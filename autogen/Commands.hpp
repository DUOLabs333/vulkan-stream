void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreateInstance(\nconst VkInstanceCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkInstance* pInstance\n)', 'params': [{'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkInstanceCreateInfo', 'header': 'const VkInstanceCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkInstance', 'header': 'VkInstance* pInstance\n        ', 'name': 'pInstance'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkDestroyInstance(\nVkInstance instance,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkInstance', 'header': 'VkInstance instance\n            ', 'name': 'instance'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkEnumeratePhysicalDevices(\nVkInstance instance,\n uint32_t* pPhysicalDeviceCount,\n VkPhysicalDevice* pPhysicalDevices\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkInstance', 'header': 'VkInstance instance\n            ', 'name': 'instance'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pPhysicalDeviceCount\n            ', 'name': 'pPhysicalDeviceCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pPhysicalDeviceCount'], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice* pPhysicalDevices\n        ', 'name': 'pPhysicalDevices'}]}(json data);
void handle_{'sync': False, 'type': 'PFN_vkVoidFunction', 'num_indirection': 0, 'header': 'PFN_vkVoidFunction funcpointer_vkGetDeviceProcAddr(\nVkDevice device,\n const char* pName\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': ['null-terminated'], 'type': 'char', 'header': 'const char* pName\n        ', 'name': 'pName'}]}(json data);
void handle_{'sync': False, 'type': 'PFN_vkVoidFunction', 'num_indirection': 0, 'header': 'PFN_vkVoidFunction funcpointer_vkGetInstanceProcAddr(\nVkInstance instance,\n const char* pName\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkInstance', 'header': 'VkInstance instance\n            ', 'name': 'instance'}, {'const': True, 'num_indirection': 1, 'length': ['null-terminated'], 'type': 'char', 'header': 'const char* pName\n        ', 'name': 'pName'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetPhysicalDeviceProperties(\nVkPhysicalDevice physicalDevice,\n VkPhysicalDeviceProperties* pProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkPhysicalDeviceProperties', 'header': 'VkPhysicalDeviceProperties* pProperties\n        ', 'name': 'pProperties'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetPhysicalDeviceQueueFamilyProperties(\nVkPhysicalDevice physicalDevice,\n uint32_t* pQueueFamilyPropertyCount,\n VkQueueFamilyProperties* pQueueFamilyProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pQueueFamilyPropertyCount\n            ', 'name': 'pQueueFamilyPropertyCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pQueueFamilyPropertyCount'], 'type': 'VkQueueFamilyProperties', 'header': 'VkQueueFamilyProperties* pQueueFamilyProperties\n        ', 'name': 'pQueueFamilyProperties'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetPhysicalDeviceMemoryProperties(\nVkPhysicalDevice physicalDevice,\n VkPhysicalDeviceMemoryProperties* pMemoryProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkPhysicalDeviceMemoryProperties', 'header': 'VkPhysicalDeviceMemoryProperties* pMemoryProperties\n        ', 'name': 'pMemoryProperties'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetPhysicalDeviceFeatures(\nVkPhysicalDevice physicalDevice,\n VkPhysicalDeviceFeatures* pFeatures\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkPhysicalDeviceFeatures', 'header': 'VkPhysicalDeviceFeatures* pFeatures\n        ', 'name': 'pFeatures'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetPhysicalDeviceFormatProperties(\nVkPhysicalDevice physicalDevice,\n VkFormat format,\n VkFormatProperties* pFormatProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkFormat', 'header': 'VkFormat format\n            ', 'name': 'format'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkFormatProperties', 'header': 'VkFormatProperties* pFormatProperties\n        ', 'name': 'pFormatProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetPhysicalDeviceImageFormatProperties(\nVkPhysicalDevice physicalDevice,\n VkFormat format,\n VkImageType type,\n VkImageTiling tiling,\n VkImageUsageFlags usage,\n VkImageCreateFlags flags,\n VkImageFormatProperties* pImageFormatProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkFormat', 'header': 'VkFormat format\n            ', 'name': 'format'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageType', 'header': 'VkImageType type\n            ', 'name': 'type'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageTiling', 'header': 'VkImageTiling tiling\n            ', 'name': 'tiling'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageUsageFlags', 'header': 'VkImageUsageFlags usage\n            ', 'name': 'usage'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageCreateFlags', 'header': 'VkImageCreateFlags flags\n            ', 'name': 'flags'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkImageFormatProperties', 'header': 'VkImageFormatProperties* pImageFormatProperties\n        ', 'name': 'pImageFormatProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreateDevice(\nVkPhysicalDevice physicalDevice,\n const VkDeviceCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkDevice* pDevice\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDeviceCreateInfo', 'header': 'const VkDeviceCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice* pDevice\n        ', 'name': 'pDevice'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkDestroyDevice(\nVkDevice device,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkEnumerateInstanceVersion(\nuint32_t* pApiVersion\n)', 'params': [{'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pApiVersion\n        ', 'name': 'pApiVersion'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkEnumerateInstanceLayerProperties(\nuint32_t* pPropertyCount,\n VkLayerProperties* pProperties\n)', 'params': [{'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pPropertyCount\n            ', 'name': 'pPropertyCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pPropertyCount'], 'type': 'VkLayerProperties', 'header': 'VkLayerProperties* pProperties\n        ', 'name': 'pProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkEnumerateInstanceExtensionProperties(\nconst char* pLayerName,\n uint32_t* pPropertyCount,\n VkExtensionProperties* pProperties\n)', 'params': [{'const': True, 'num_indirection': 1, 'length': ['null-terminated'], 'type': 'char', 'header': 'const char* pLayerName\n            ', 'name': 'pLayerName'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pPropertyCount\n            ', 'name': 'pPropertyCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pPropertyCount'], 'type': 'VkExtensionProperties', 'header': 'VkExtensionProperties* pProperties\n        ', 'name': 'pProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkEnumerateDeviceLayerProperties(\nVkPhysicalDevice physicalDevice,\n uint32_t* pPropertyCount,\n VkLayerProperties* pProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pPropertyCount\n            ', 'name': 'pPropertyCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pPropertyCount'], 'type': 'VkLayerProperties', 'header': 'VkLayerProperties* pProperties\n        ', 'name': 'pProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkEnumerateDeviceExtensionProperties(\nVkPhysicalDevice physicalDevice,\n const char* pLayerName,\n uint32_t* pPropertyCount,\n VkExtensionProperties* pProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': True, 'num_indirection': 1, 'length': ['null-terminated'], 'type': 'char', 'header': 'const char* pLayerName\n            ', 'name': 'pLayerName'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pPropertyCount\n            ', 'name': 'pPropertyCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pPropertyCount'], 'type': 'VkExtensionProperties', 'header': 'VkExtensionProperties* pProperties\n        ', 'name': 'pProperties'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetDeviceQueue(\nVkDevice device,\n uint32_t queueFamilyIndex,\n uint32_t queueIndex,\n VkQueue* pQueue\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t queueFamilyIndex\n            ', 'name': 'queueFamilyIndex'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t queueIndex\n            ', 'name': 'queueIndex'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkQueue', 'header': 'VkQueue* pQueue\n        ', 'name': 'pQueue'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkQueueSubmit(\nVkQueue queue,\n uint32_t submitCount,\n const VkSubmitInfo* pSubmits,\n VkFence fence\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueue', 'header': 'VkQueue queue\n            ', 'name': 'queue'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t submitCount\n            ', 'name': 'submitCount'}, {'const': True, 'num_indirection': 1, 'length': ['submitCount'], 'type': 'VkSubmitInfo', 'header': 'const VkSubmitInfo* pSubmits\n            ', 'name': 'pSubmits'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkFence', 'header': 'VkFence fence\n        ', 'name': 'fence'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkQueueWaitIdle(\nVkQueue queue\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueue', 'header': 'VkQueue queue\n        ', 'name': 'queue'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkDeviceWaitIdle(\nVkDevice device\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkAllocateMemory(\nVkDevice device,\n const VkMemoryAllocateInfo* pAllocateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkDeviceMemory* pMemory\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkMemoryAllocateInfo', 'header': 'const VkMemoryAllocateInfo* pAllocateInfo\n            ', 'name': 'pAllocateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkDeviceMemory', 'header': 'VkDeviceMemory* pMemory\n        ', 'name': 'pMemory'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkFreeMemory(\nVkDevice device,\n VkDeviceMemory memory,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceMemory', 'header': 'VkDeviceMemory memory\n            ', 'name': 'memory'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkMapMemory(\nVkDevice device,\n VkDeviceMemory memory,\n VkDeviceSize offset,\n VkDeviceSize size,\n VkMemoryMapFlags flags,\n void** ppData\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceMemory', 'header': 'VkDeviceMemory memory\n            ', 'name': 'memory'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize offset\n            ', 'name': 'offset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize size\n            ', 'name': 'size'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkMemoryMapFlags', 'header': 'VkMemoryMapFlags flags\n            ', 'name': 'flags'}, {'const': False, 'num_indirection': 2, 'length': [''], 'type': 'void', 'header': 'void** ppData\n        ', 'name': 'ppData'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkUnmapMemory(\nVkDevice device,\n VkDeviceMemory memory\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceMemory', 'header': 'VkDeviceMemory memory\n        ', 'name': 'memory'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkFlushMappedMemoryRanges(\nVkDevice device,\n uint32_t memoryRangeCount,\n const VkMappedMemoryRange* pMemoryRanges\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t memoryRangeCount\n            ', 'name': 'memoryRangeCount'}, {'const': True, 'num_indirection': 1, 'length': ['memoryRangeCount'], 'type': 'VkMappedMemoryRange', 'header': 'const VkMappedMemoryRange* pMemoryRanges\n        ', 'name': 'pMemoryRanges'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkInvalidateMappedMemoryRanges(\nVkDevice device,\n uint32_t memoryRangeCount,\n const VkMappedMemoryRange* pMemoryRanges\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t memoryRangeCount\n            ', 'name': 'memoryRangeCount'}, {'const': True, 'num_indirection': 1, 'length': ['memoryRangeCount'], 'type': 'VkMappedMemoryRange', 'header': 'const VkMappedMemoryRange* pMemoryRanges\n        ', 'name': 'pMemoryRanges'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetDeviceMemoryCommitment(\nVkDevice device,\n VkDeviceMemory memory,\n VkDeviceSize* pCommittedMemoryInBytes\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceMemory', 'header': 'VkDeviceMemory memory\n            ', 'name': 'memory'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize* pCommittedMemoryInBytes\n        ', 'name': 'pCommittedMemoryInBytes'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetBufferMemoryRequirements(\nVkDevice device,\n VkBuffer buffer,\n VkMemoryRequirements* pMemoryRequirements\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer buffer\n            ', 'name': 'buffer'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkMemoryRequirements', 'header': 'VkMemoryRequirements* pMemoryRequirements\n        ', 'name': 'pMemoryRequirements'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkBindBufferMemory(\nVkDevice device,\n VkBuffer buffer,\n VkDeviceMemory memory,\n VkDeviceSize memoryOffset\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer buffer\n            ', 'name': 'buffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceMemory', 'header': 'VkDeviceMemory memory\n            ', 'name': 'memory'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize memoryOffset\n        ', 'name': 'memoryOffset'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetImageMemoryRequirements(\nVkDevice device,\n VkImage image,\n VkMemoryRequirements* pMemoryRequirements\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImage', 'header': 'VkImage image\n            ', 'name': 'image'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkMemoryRequirements', 'header': 'VkMemoryRequirements* pMemoryRequirements\n        ', 'name': 'pMemoryRequirements'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkBindImageMemory(\nVkDevice device,\n VkImage image,\n VkDeviceMemory memory,\n VkDeviceSize memoryOffset\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImage', 'header': 'VkImage image\n            ', 'name': 'image'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceMemory', 'header': 'VkDeviceMemory memory\n            ', 'name': 'memory'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize memoryOffset\n        ', 'name': 'memoryOffset'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetImageSparseMemoryRequirements(\nVkDevice device,\n VkImage image,\n uint32_t* pSparseMemoryRequirementCount,\n VkSparseImageMemoryRequirements* pSparseMemoryRequirements\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImage', 'header': 'VkImage image\n            ', 'name': 'image'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pSparseMemoryRequirementCount\n            ', 'name': 'pSparseMemoryRequirementCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pSparseMemoryRequirementCount'], 'type': 'VkSparseImageMemoryRequirements', 'header': 'VkSparseImageMemoryRequirements* pSparseMemoryRequirements\n        ', 'name': 'pSparseMemoryRequirements'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetPhysicalDeviceSparseImageFormatProperties(\nVkPhysicalDevice physicalDevice,\n VkFormat format,\n VkImageType type,\n VkSampleCountFlagBits samples,\n VkImageUsageFlags usage,\n VkImageTiling tiling,\n uint32_t* pPropertyCount,\n VkSparseImageFormatProperties* pProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkFormat', 'header': 'VkFormat format\n            ', 'name': 'format'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageType', 'header': 'VkImageType type\n            ', 'name': 'type'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSampleCountFlagBits', 'header': 'VkSampleCountFlagBits samples\n            ', 'name': 'samples'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageUsageFlags', 'header': 'VkImageUsageFlags usage\n            ', 'name': 'usage'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageTiling', 'header': 'VkImageTiling tiling\n            ', 'name': 'tiling'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pPropertyCount\n            ', 'name': 'pPropertyCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pPropertyCount'], 'type': 'VkSparseImageFormatProperties', 'header': 'VkSparseImageFormatProperties* pProperties\n        ', 'name': 'pProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkQueueBindSparse(\nVkQueue queue,\n uint32_t bindInfoCount,\n const VkBindSparseInfo* pBindInfo,\n VkFence fence\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueue', 'header': 'VkQueue queue\n            ', 'name': 'queue'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t bindInfoCount\n            ', 'name': 'bindInfoCount'}, {'const': True, 'num_indirection': 1, 'length': ['bindInfoCount'], 'type': 'VkBindSparseInfo', 'header': 'const VkBindSparseInfo* pBindInfo\n            ', 'name': 'pBindInfo'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkFence', 'header': 'VkFence fence\n        ', 'name': 'fence'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreateFence(\nVkDevice device,\n const VkFenceCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkFence* pFence\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkFenceCreateInfo', 'header': 'const VkFenceCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkFence', 'header': 'VkFence* pFence\n        ', 'name': 'pFence'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkDestroyFence(\nVkDevice device,\n VkFence fence,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkFence', 'header': 'VkFence fence\n            ', 'name': 'fence'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkResetFences(\nVkDevice device,\n uint32_t fenceCount,\n const VkFence* pFences\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t fenceCount\n            ', 'name': 'fenceCount'}, {'const': True, 'num_indirection': 1, 'length': ['fenceCount'], 'type': 'VkFence', 'header': 'const VkFence* pFences\n        ', 'name': 'pFences'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetFenceStatus(\nVkDevice device,\n VkFence fence\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkFence', 'header': 'VkFence fence\n        ', 'name': 'fence'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkWaitForFences(\nVkDevice device,\n uint32_t fenceCount,\n const VkFence* pFences,\n VkBool32 waitAll,\n uint64_t timeout\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t fenceCount\n            ', 'name': 'fenceCount'}, {'const': True, 'num_indirection': 1, 'length': ['fenceCount'], 'type': 'VkFence', 'header': 'const VkFence* pFences\n            ', 'name': 'pFences'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 waitAll\n            ', 'name': 'waitAll'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint64_t', 'header': 'uint64_t timeout\n        ', 'name': 'timeout'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreateSemaphore(\nVkDevice device,\n const VkSemaphoreCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkSemaphore* pSemaphore\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkSemaphoreCreateInfo', 'header': 'const VkSemaphoreCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkSemaphore', 'header': 'VkSemaphore* pSemaphore\n        ', 'name': 'pSemaphore'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkDestroySemaphore(\nVkDevice device,\n VkSemaphore semaphore,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSemaphore', 'header': 'VkSemaphore semaphore\n            ', 'name': 'semaphore'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreateEvent(\nVkDevice device,\n const VkEventCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkEvent* pEvent\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkEventCreateInfo', 'header': 'const VkEventCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkEvent', 'header': 'VkEvent* pEvent\n        ', 'name': 'pEvent'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkDestroyEvent(\nVkDevice device,\n VkEvent event,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkEvent', 'header': 'VkEvent event\n            ', 'name': 'event'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetEventStatus(\nVkDevice device,\n VkEvent event\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkEvent', 'header': 'VkEvent event\n        ', 'name': 'event'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkSetEvent(\nVkDevice device,\n VkEvent event\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkEvent', 'header': 'VkEvent event\n        ', 'name': 'event'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkResetEvent(\nVkDevice device,\n VkEvent event\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkEvent', 'header': 'VkEvent event\n        ', 'name': 'event'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreateQueryPool(\nVkDevice device,\n const VkQueryPoolCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkQueryPool* pQueryPool\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkQueryPoolCreateInfo', 'header': 'const VkQueryPoolCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkQueryPool', 'header': 'VkQueryPool* pQueryPool\n        ', 'name': 'pQueryPool'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkDestroyQueryPool(\nVkDevice device,\n VkQueryPool queryPool,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryPool', 'header': 'VkQueryPool queryPool\n            ', 'name': 'queryPool'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetQueryPoolResults(\nVkDevice device,\n VkQueryPool queryPool,\n uint32_t firstQuery,\n uint32_t queryCount,\n size_t dataSize,\n void* pData,\n VkDeviceSize stride,\n VkQueryResultFlags flags\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryPool', 'header': 'VkQueryPool queryPool\n            ', 'name': 'queryPool'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstQuery\n            ', 'name': 'firstQuery'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t queryCount\n            ', 'name': 'queryCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'size_t', 'header': 'size_t dataSize\n            ', 'name': 'dataSize'}, {'const': False, 'num_indirection': 1, 'length': ['dataSize'], 'type': 'void', 'header': 'void* pData\n            ', 'name': 'pData'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize stride\n            ', 'name': 'stride'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryResultFlags', 'header': 'VkQueryResultFlags flags\n        ', 'name': 'flags'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkResetQueryPool(\nVkDevice device,\n VkQueryPool queryPool,\n uint32_t firstQuery,\n uint32_t queryCount\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryPool', 'header': 'VkQueryPool queryPool\n            ', 'name': 'queryPool'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstQuery\n            ', 'name': 'firstQuery'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t queryCount\n        ', 'name': 'queryCount'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkResetQueryPoolEXT(\nVkDevice device,\n VkQueryPool queryPool,\n uint32_t firstQuery,\n uint32_t queryCount\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryPool', 'header': 'VkQueryPool queryPool\n            ', 'name': 'queryPool'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstQuery\n            ', 'name': 'firstQuery'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t queryCount\n        ', 'name': 'queryCount'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreateBuffer(\nVkDevice device,\n const VkBufferCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkBuffer* pBuffer\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkBufferCreateInfo', 'header': 'const VkBufferCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer* pBuffer\n        ', 'name': 'pBuffer'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkDestroyBuffer(\nVkDevice device,\n VkBuffer buffer,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer buffer\n            ', 'name': 'buffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreateBufferView(\nVkDevice device,\n const VkBufferViewCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkBufferView* pView\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkBufferViewCreateInfo', 'header': 'const VkBufferViewCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkBufferView', 'header': 'VkBufferView* pView\n        ', 'name': 'pView'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkDestroyBufferView(\nVkDevice device,\n VkBufferView bufferView,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBufferView', 'header': 'VkBufferView bufferView\n            ', 'name': 'bufferView'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreateImage(\nVkDevice device,\n const VkImageCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkImage* pImage\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkImageCreateInfo', 'header': 'const VkImageCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkImage', 'header': 'VkImage* pImage\n        ', 'name': 'pImage'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkDestroyImage(\nVkDevice device,\n VkImage image,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImage', 'header': 'VkImage image\n            ', 'name': 'image'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetImageSubresourceLayout(\nVkDevice device,\n VkImage image,\n const VkImageSubresource* pSubresource,\n VkSubresourceLayout* pLayout\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImage', 'header': 'VkImage image\n            ', 'name': 'image'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkImageSubresource', 'header': 'const VkImageSubresource* pSubresource\n            ', 'name': 'pSubresource'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkSubresourceLayout', 'header': 'VkSubresourceLayout* pLayout\n        ', 'name': 'pLayout'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreateImageView(\nVkDevice device,\n const VkImageViewCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkImageView* pView\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkImageViewCreateInfo', 'header': 'const VkImageViewCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkImageView', 'header': 'VkImageView* pView\n        ', 'name': 'pView'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkDestroyImageView(\nVkDevice device,\n VkImageView imageView,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageView', 'header': 'VkImageView imageView\n            ', 'name': 'imageView'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreateShaderModule(\nVkDevice device,\n const VkShaderModuleCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkShaderModule* pShaderModule\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkShaderModuleCreateInfo', 'header': 'const VkShaderModuleCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkShaderModule', 'header': 'VkShaderModule* pShaderModule\n        ', 'name': 'pShaderModule'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkDestroyShaderModule(\nVkDevice device,\n VkShaderModule shaderModule,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkShaderModule', 'header': 'VkShaderModule shaderModule\n            ', 'name': 'shaderModule'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreatePipelineCache(\nVkDevice device,\n const VkPipelineCacheCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkPipelineCache* pPipelineCache\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPipelineCacheCreateInfo', 'header': 'const VkPipelineCacheCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkPipelineCache', 'header': 'VkPipelineCache* pPipelineCache\n        ', 'name': 'pPipelineCache'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkDestroyPipelineCache(\nVkDevice device,\n VkPipelineCache pipelineCache,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineCache', 'header': 'VkPipelineCache pipelineCache\n            ', 'name': 'pipelineCache'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetPipelineCacheData(\nVkDevice device,\n VkPipelineCache pipelineCache,\n size_t* pDataSize,\n void* pData\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineCache', 'header': 'VkPipelineCache pipelineCache\n            ', 'name': 'pipelineCache'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'size_t', 'header': 'size_t* pDataSize\n            ', 'name': 'pDataSize'}, {'const': False, 'num_indirection': 1, 'length': ['*pDataSize'], 'type': 'void', 'header': 'void* pData\n        ', 'name': 'pData'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkMergePipelineCaches(\nVkDevice device,\n VkPipelineCache dstCache,\n uint32_t srcCacheCount,\n const VkPipelineCache* pSrcCaches\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineCache', 'header': 'VkPipelineCache dstCache\n            ', 'name': 'dstCache'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t srcCacheCount\n            ', 'name': 'srcCacheCount'}, {'const': True, 'num_indirection': 1, 'length': ['srcCacheCount'], 'type': 'VkPipelineCache', 'header': 'const VkPipelineCache* pSrcCaches\n        ', 'name': 'pSrcCaches'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreateGraphicsPipelines(\nVkDevice device,\n VkPipelineCache pipelineCache,\n uint32_t createInfoCount,\n const VkGraphicsPipelineCreateInfo* pCreateInfos,\n const VkAllocationCallbacks* pAllocator,\n VkPipeline* pPipelines\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineCache', 'header': 'VkPipelineCache pipelineCache\n            ', 'name': 'pipelineCache'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t createInfoCount\n            ', 'name': 'createInfoCount'}, {'const': True, 'num_indirection': 1, 'length': ['createInfoCount'], 'type': 'VkGraphicsPipelineCreateInfo', 'header': 'const VkGraphicsPipelineCreateInfo* pCreateInfos\n            ', 'name': 'pCreateInfos'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': ['createInfoCount'], 'type': 'VkPipeline', 'header': 'VkPipeline* pPipelines\n        ', 'name': 'pPipelines'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreateComputePipelines(\nVkDevice device,\n VkPipelineCache pipelineCache,\n uint32_t createInfoCount,\n const VkComputePipelineCreateInfo* pCreateInfos,\n const VkAllocationCallbacks* pAllocator,\n VkPipeline* pPipelines\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineCache', 'header': 'VkPipelineCache pipelineCache\n            ', 'name': 'pipelineCache'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t createInfoCount\n            ', 'name': 'createInfoCount'}, {'const': True, 'num_indirection': 1, 'length': ['createInfoCount'], 'type': 'VkComputePipelineCreateInfo', 'header': 'const VkComputePipelineCreateInfo* pCreateInfos\n            ', 'name': 'pCreateInfos'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': ['createInfoCount'], 'type': 'VkPipeline', 'header': 'VkPipeline* pPipelines\n        ', 'name': 'pPipelines'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(\nVkDevice device,\n VkRenderPass renderpass,\n VkExtent2D* pMaxWorkgroupSize\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkRenderPass', 'header': 'VkRenderPass renderpass\n            ', 'name': 'renderpass'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkExtent2D', 'header': 'VkExtent2D* pMaxWorkgroupSize\n        ', 'name': 'pMaxWorkgroupSize'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkDestroyPipeline(\nVkDevice device,\n VkPipeline pipeline,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipeline', 'header': 'VkPipeline pipeline\n            ', 'name': 'pipeline'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreatePipelineLayout(\nVkDevice device,\n const VkPipelineLayoutCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkPipelineLayout* pPipelineLayout\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPipelineLayoutCreateInfo', 'header': 'const VkPipelineLayoutCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkPipelineLayout', 'header': 'VkPipelineLayout* pPipelineLayout\n        ', 'name': 'pPipelineLayout'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkDestroyPipelineLayout(\nVkDevice device,\n VkPipelineLayout pipelineLayout,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineLayout', 'header': 'VkPipelineLayout pipelineLayout\n            ', 'name': 'pipelineLayout'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreateSampler(\nVkDevice device,\n const VkSamplerCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkSampler* pSampler\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkSamplerCreateInfo', 'header': 'const VkSamplerCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkSampler', 'header': 'VkSampler* pSampler\n        ', 'name': 'pSampler'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkDestroySampler(\nVkDevice device,\n VkSampler sampler,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSampler', 'header': 'VkSampler sampler\n            ', 'name': 'sampler'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreateDescriptorSetLayout(\nVkDevice device,\n const VkDescriptorSetLayoutCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkDescriptorSetLayout* pSetLayout\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDescriptorSetLayoutCreateInfo', 'header': 'const VkDescriptorSetLayoutCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkDescriptorSetLayout', 'header': 'VkDescriptorSetLayout* pSetLayout\n        ', 'name': 'pSetLayout'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkDestroyDescriptorSetLayout(\nVkDevice device,\n VkDescriptorSetLayout descriptorSetLayout,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDescriptorSetLayout', 'header': 'VkDescriptorSetLayout descriptorSetLayout\n            ', 'name': 'descriptorSetLayout'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreateDescriptorPool(\nVkDevice device,\n const VkDescriptorPoolCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkDescriptorPool* pDescriptorPool\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDescriptorPoolCreateInfo', 'header': 'const VkDescriptorPoolCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkDescriptorPool', 'header': 'VkDescriptorPool* pDescriptorPool\n        ', 'name': 'pDescriptorPool'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkDestroyDescriptorPool(\nVkDevice device,\n VkDescriptorPool descriptorPool,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDescriptorPool', 'header': 'VkDescriptorPool descriptorPool\n            ', 'name': 'descriptorPool'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkResetDescriptorPool(\nVkDevice device,\n VkDescriptorPool descriptorPool,\n VkDescriptorPoolResetFlags flags\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDescriptorPool', 'header': 'VkDescriptorPool descriptorPool\n            ', 'name': 'descriptorPool'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDescriptorPoolResetFlags', 'header': 'VkDescriptorPoolResetFlags flags\n            ', 'name': 'flags'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkAllocateDescriptorSets(\nVkDevice device,\n const VkDescriptorSetAllocateInfo* pAllocateInfo,\n VkDescriptorSet* pDescriptorSets\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDescriptorSetAllocateInfo', 'header': 'const VkDescriptorSetAllocateInfo* pAllocateInfo\n            ', 'name': 'pAllocateInfo'}, {'const': False, 'num_indirection': 1, 'length': ['pAllocateInfo->descriptorSetCount'], 'type': 'VkDescriptorSet', 'header': 'VkDescriptorSet* pDescriptorSets\n        ', 'name': 'pDescriptorSets'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkFreeDescriptorSets(\nVkDevice device,\n VkDescriptorPool descriptorPool,\n uint32_t descriptorSetCount,\n const VkDescriptorSet* pDescriptorSets\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDescriptorPool', 'header': 'VkDescriptorPool descriptorPool\n            ', 'name': 'descriptorPool'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t descriptorSetCount\n            ', 'name': 'descriptorSetCount'}, {'const': True, 'num_indirection': 1, 'length': ['descriptorSetCount'], 'type': 'VkDescriptorSet', 'header': 'const VkDescriptorSet* pDescriptorSets\n        ', 'name': 'pDescriptorSets'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkUpdateDescriptorSets(\nVkDevice device,\n uint32_t descriptorWriteCount,\n const VkWriteDescriptorSet* pDescriptorWrites,\n uint32_t descriptorCopyCount,\n const VkCopyDescriptorSet* pDescriptorCopies\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t descriptorWriteCount\n            ', 'name': 'descriptorWriteCount'}, {'const': True, 'num_indirection': 1, 'length': ['descriptorWriteCount'], 'type': 'VkWriteDescriptorSet', 'header': 'const VkWriteDescriptorSet* pDescriptorWrites\n            ', 'name': 'pDescriptorWrites'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t descriptorCopyCount\n            ', 'name': 'descriptorCopyCount'}, {'const': True, 'num_indirection': 1, 'length': ['descriptorCopyCount'], 'type': 'VkCopyDescriptorSet', 'header': 'const VkCopyDescriptorSet* pDescriptorCopies\n        ', 'name': 'pDescriptorCopies'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreateFramebuffer(\nVkDevice device,\n const VkFramebufferCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkFramebuffer* pFramebuffer\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkFramebufferCreateInfo', 'header': 'const VkFramebufferCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkFramebuffer', 'header': 'VkFramebuffer* pFramebuffer\n        ', 'name': 'pFramebuffer'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkDestroyFramebuffer(\nVkDevice device,\n VkFramebuffer framebuffer,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkFramebuffer', 'header': 'VkFramebuffer framebuffer\n            ', 'name': 'framebuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreateRenderPass(\nVkDevice device,\n const VkRenderPassCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkRenderPass* pRenderPass\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkRenderPassCreateInfo', 'header': 'const VkRenderPassCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkRenderPass', 'header': 'VkRenderPass* pRenderPass\n        ', 'name': 'pRenderPass'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkDestroyRenderPass(\nVkDevice device,\n VkRenderPass renderPass,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkRenderPass', 'header': 'VkRenderPass renderPass\n            ', 'name': 'renderPass'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetRenderAreaGranularity(\nVkDevice device,\n VkRenderPass renderPass,\n VkExtent2D* pGranularity\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkRenderPass', 'header': 'VkRenderPass renderPass\n            ', 'name': 'renderPass'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkExtent2D', 'header': 'VkExtent2D* pGranularity\n        ', 'name': 'pGranularity'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetRenderingAreaGranularityKHR(\nVkDevice device,\n const VkRenderingAreaInfoKHR* pRenderingAreaInfo,\n VkExtent2D* pGranularity\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkRenderingAreaInfoKHR', 'header': 'const VkRenderingAreaInfoKHR* pRenderingAreaInfo\n            ', 'name': 'pRenderingAreaInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkExtent2D', 'header': 'VkExtent2D* pGranularity\n        ', 'name': 'pGranularity'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreateCommandPool(\nVkDevice device,\n const VkCommandPoolCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkCommandPool* pCommandPool\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCommandPoolCreateInfo', 'header': 'const VkCommandPoolCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkCommandPool', 'header': 'VkCommandPool* pCommandPool\n        ', 'name': 'pCommandPool'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkDestroyCommandPool(\nVkDevice device,\n VkCommandPool commandPool,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandPool', 'header': 'VkCommandPool commandPool\n            ', 'name': 'commandPool'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkResetCommandPool(\nVkDevice device,\n VkCommandPool commandPool,\n VkCommandPoolResetFlags flags\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandPool', 'header': 'VkCommandPool commandPool\n            ', 'name': 'commandPool'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandPoolResetFlags', 'header': 'VkCommandPoolResetFlags flags\n        ', 'name': 'flags'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkAllocateCommandBuffers(\nVkDevice device,\n const VkCommandBufferAllocateInfo* pAllocateInfo,\n VkCommandBuffer* pCommandBuffers\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCommandBufferAllocateInfo', 'header': 'const VkCommandBufferAllocateInfo* pAllocateInfo\n            ', 'name': 'pAllocateInfo'}, {'const': False, 'num_indirection': 1, 'length': ['pAllocateInfo->commandBufferCount'], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer* pCommandBuffers\n        ', 'name': 'pCommandBuffers'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkFreeCommandBuffers(\nVkDevice device,\n VkCommandPool commandPool,\n uint32_t commandBufferCount,\n const VkCommandBuffer* pCommandBuffers\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandPool', 'header': 'VkCommandPool commandPool\n            ', 'name': 'commandPool'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t commandBufferCount\n            ', 'name': 'commandBufferCount'}, {'const': True, 'num_indirection': 1, 'length': ['commandBufferCount'], 'type': 'VkCommandBuffer', 'header': 'const VkCommandBuffer* pCommandBuffers\n        ', 'name': 'pCommandBuffers'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkBeginCommandBuffer(\nVkCommandBuffer commandBuffer,\n const VkCommandBufferBeginInfo* pBeginInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCommandBufferBeginInfo', 'header': 'const VkCommandBufferBeginInfo* pBeginInfo\n            ', 'name': 'pBeginInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkEndCommandBuffer(\nVkCommandBuffer commandBuffer\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkResetCommandBuffer(\nVkCommandBuffer commandBuffer,\n VkCommandBufferResetFlags flags\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBufferResetFlags', 'header': 'VkCommandBufferResetFlags flags\n            ', 'name': 'flags'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdBindPipeline(\nVkCommandBuffer commandBuffer,\n VkPipelineBindPoint pipelineBindPoint,\n VkPipeline pipeline\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineBindPoint', 'header': 'VkPipelineBindPoint pipelineBindPoint\n            ', 'name': 'pipelineBindPoint'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipeline', 'header': 'VkPipeline pipeline\n        ', 'name': 'pipeline'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetAttachmentFeedbackLoopEnableEXT(\nVkCommandBuffer commandBuffer,\n VkImageAspectFlags aspectMask\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageAspectFlags', 'header': 'VkImageAspectFlags aspectMask\n        ', 'name': 'aspectMask'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetViewport(\nVkCommandBuffer commandBuffer,\n uint32_t firstViewport,\n uint32_t viewportCount,\n const VkViewport* pViewports\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstViewport\n            ', 'name': 'firstViewport'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t viewportCount\n            ', 'name': 'viewportCount'}, {'const': True, 'num_indirection': 1, 'length': ['viewportCount'], 'type': 'VkViewport', 'header': 'const VkViewport* pViewports\n        ', 'name': 'pViewports'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetScissor(\nVkCommandBuffer commandBuffer,\n uint32_t firstScissor,\n uint32_t scissorCount,\n const VkRect2D* pScissors\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstScissor\n            ', 'name': 'firstScissor'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t scissorCount\n            ', 'name': 'scissorCount'}, {'const': True, 'num_indirection': 1, 'length': ['scissorCount'], 'type': 'VkRect2D', 'header': 'const VkRect2D* pScissors\n        ', 'name': 'pScissors'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetLineWidth(\nVkCommandBuffer commandBuffer,\n float lineWidth\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'float', 'header': 'float lineWidth\n        ', 'name': 'lineWidth'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetDepthBias(\nVkCommandBuffer commandBuffer,\n float depthBiasConstantFactor,\n float depthBiasClamp,\n float depthBiasSlopeFactor\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'float', 'header': 'float depthBiasConstantFactor\n            ', 'name': 'depthBiasConstantFactor'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'float', 'header': 'float depthBiasClamp\n            ', 'name': 'depthBiasClamp'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'float', 'header': 'float depthBiasSlopeFactor\n        ', 'name': 'depthBiasSlopeFactor'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetBlendConstants(\nVkCommandBuffer commandBuffer,\n const float blendConstants[4]\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 0, 'length': ['4'], 'type': 'float', 'header': 'const float blendConstants[4]\n        ', 'name': 'blendConstants'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetDepthBounds(\nVkCommandBuffer commandBuffer,\n float minDepthBounds,\n float maxDepthBounds\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'float', 'header': 'float minDepthBounds\n            ', 'name': 'minDepthBounds'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'float', 'header': 'float maxDepthBounds\n        ', 'name': 'maxDepthBounds'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetStencilCompareMask(\nVkCommandBuffer commandBuffer,\n VkStencilFaceFlags faceMask,\n uint32_t compareMask\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkStencilFaceFlags', 'header': 'VkStencilFaceFlags faceMask\n            ', 'name': 'faceMask'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t compareMask\n        ', 'name': 'compareMask'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetStencilWriteMask(\nVkCommandBuffer commandBuffer,\n VkStencilFaceFlags faceMask,\n uint32_t writeMask\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkStencilFaceFlags', 'header': 'VkStencilFaceFlags faceMask\n            ', 'name': 'faceMask'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t writeMask\n        ', 'name': 'writeMask'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetStencilReference(\nVkCommandBuffer commandBuffer,\n VkStencilFaceFlags faceMask,\n uint32_t reference\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkStencilFaceFlags', 'header': 'VkStencilFaceFlags faceMask\n            ', 'name': 'faceMask'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t reference\n        ', 'name': 'reference'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdBindDescriptorSets(\nVkCommandBuffer commandBuffer,\n VkPipelineBindPoint pipelineBindPoint,\n VkPipelineLayout layout,\n uint32_t firstSet,\n uint32_t descriptorSetCount,\n const VkDescriptorSet* pDescriptorSets,\n uint32_t dynamicOffsetCount,\n const uint32_t* pDynamicOffsets\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineBindPoint', 'header': 'VkPipelineBindPoint pipelineBindPoint\n            ', 'name': 'pipelineBindPoint'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineLayout', 'header': 'VkPipelineLayout layout\n            ', 'name': 'layout'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstSet\n            ', 'name': 'firstSet'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t descriptorSetCount\n            ', 'name': 'descriptorSetCount'}, {'const': True, 'num_indirection': 1, 'length': ['descriptorSetCount'], 'type': 'VkDescriptorSet', 'header': 'const VkDescriptorSet* pDescriptorSets\n            ', 'name': 'pDescriptorSets'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t dynamicOffsetCount\n            ', 'name': 'dynamicOffsetCount'}, {'const': True, 'num_indirection': 1, 'length': ['dynamicOffsetCount'], 'type': 'uint32_t', 'header': 'const uint32_t* pDynamicOffsets\n        ', 'name': 'pDynamicOffsets'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdBindIndexBuffer(\nVkCommandBuffer commandBuffer,\n VkBuffer buffer,\n VkDeviceSize offset,\n VkIndexType indexType\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer buffer\n            ', 'name': 'buffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize offset\n            ', 'name': 'offset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkIndexType', 'header': 'VkIndexType indexType\n        ', 'name': 'indexType'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdBindVertexBuffers(\nVkCommandBuffer commandBuffer,\n uint32_t firstBinding,\n uint32_t bindingCount,\n const VkBuffer* pBuffers,\n const VkDeviceSize* pOffsets\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstBinding\n            ', 'name': 'firstBinding'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t bindingCount\n            ', 'name': 'bindingCount'}, {'const': True, 'num_indirection': 1, 'length': ['bindingCount'], 'type': 'VkBuffer', 'header': 'const VkBuffer* pBuffers\n            ', 'name': 'pBuffers'}, {'const': True, 'num_indirection': 1, 'length': ['bindingCount'], 'type': 'VkDeviceSize', 'header': 'const VkDeviceSize* pOffsets\n        ', 'name': 'pOffsets'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdDraw(\nVkCommandBuffer commandBuffer,\n uint32_t vertexCount,\n uint32_t instanceCount,\n uint32_t firstVertex,\n uint32_t firstInstance\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t vertexCount\n            ', 'name': 'vertexCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t instanceCount\n            ', 'name': 'instanceCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstVertex\n            ', 'name': 'firstVertex'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstInstance\n        ', 'name': 'firstInstance'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdDrawIndexed(\nVkCommandBuffer commandBuffer,\n uint32_t indexCount,\n uint32_t instanceCount,\n uint32_t firstIndex,\n int32_t vertexOffset,\n uint32_t firstInstance\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t indexCount\n            ', 'name': 'indexCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t instanceCount\n            ', 'name': 'instanceCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstIndex\n            ', 'name': 'firstIndex'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'int32_t', 'header': 'int32_t vertexOffset\n            ', 'name': 'vertexOffset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstInstance\n        ', 'name': 'firstInstance'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdDrawMultiEXT(\nVkCommandBuffer commandBuffer,\n uint32_t drawCount,\n const VkMultiDrawInfoEXT* pVertexInfo,\n uint32_t instanceCount,\n uint32_t firstInstance,\n uint32_t stride\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t drawCount\n            ', 'name': 'drawCount'}, {'const': True, 'num_indirection': 1, 'length': ['drawCount'], 'type': 'VkMultiDrawInfoEXT', 'header': 'const VkMultiDrawInfoEXT* pVertexInfo\n            ', 'name': 'pVertexInfo'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t instanceCount\n            ', 'name': 'instanceCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstInstance\n            ', 'name': 'firstInstance'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t stride\n        ', 'name': 'stride'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdDrawMultiIndexedEXT(\nVkCommandBuffer commandBuffer,\n uint32_t drawCount,\n const VkMultiDrawIndexedInfoEXT* pIndexInfo,\n uint32_t instanceCount,\n uint32_t firstInstance,\n uint32_t stride,\n const int32_t* pVertexOffset\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t drawCount\n            ', 'name': 'drawCount'}, {'const': True, 'num_indirection': 1, 'length': ['drawCount'], 'type': 'VkMultiDrawIndexedInfoEXT', 'header': 'const VkMultiDrawIndexedInfoEXT* pIndexInfo\n            ', 'name': 'pIndexInfo'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t instanceCount\n            ', 'name': 'instanceCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstInstance\n            ', 'name': 'firstInstance'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t stride\n            ', 'name': 'stride'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'int32_t', 'header': 'const int32_t* pVertexOffset\n        ', 'name': 'pVertexOffset'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdDrawIndirect(\nVkCommandBuffer commandBuffer,\n VkBuffer buffer,\n VkDeviceSize offset,\n uint32_t drawCount,\n uint32_t stride\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer buffer\n            ', 'name': 'buffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize offset\n            ', 'name': 'offset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t drawCount\n            ', 'name': 'drawCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t stride\n        ', 'name': 'stride'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdDrawIndexedIndirect(\nVkCommandBuffer commandBuffer,\n VkBuffer buffer,\n VkDeviceSize offset,\n uint32_t drawCount,\n uint32_t stride\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer buffer\n            ', 'name': 'buffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize offset\n            ', 'name': 'offset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t drawCount\n            ', 'name': 'drawCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t stride\n        ', 'name': 'stride'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdDispatch(\nVkCommandBuffer commandBuffer,\n uint32_t groupCountX,\n uint32_t groupCountY,\n uint32_t groupCountZ\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t groupCountX\n            ', 'name': 'groupCountX'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t groupCountY\n            ', 'name': 'groupCountY'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t groupCountZ\n        ', 'name': 'groupCountZ'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdDispatchIndirect(\nVkCommandBuffer commandBuffer,\n VkBuffer buffer,\n VkDeviceSize offset\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer buffer\n            ', 'name': 'buffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize offset\n        ', 'name': 'offset'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSubpassShadingHUAWEI(\nVkCommandBuffer commandBuffer\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n        ', 'name': 'commandBuffer'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdDrawClusterHUAWEI(\nVkCommandBuffer commandBuffer,\n uint32_t groupCountX,\n uint32_t groupCountY,\n uint32_t groupCountZ\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t groupCountX\n            ', 'name': 'groupCountX'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t groupCountY\n            ', 'name': 'groupCountY'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t groupCountZ\n        ', 'name': 'groupCountZ'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdDrawClusterIndirectHUAWEI(\nVkCommandBuffer commandBuffer,\n VkBuffer buffer,\n VkDeviceSize offset\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer buffer\n            ', 'name': 'buffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize offset\n        ', 'name': 'offset'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdUpdatePipelineIndirectBufferNV(\nVkCommandBuffer commandBuffer,\n VkPipelineBindPoint           pipelineBindPoint,\n VkPipeline                    pipeline\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineBindPoint', 'header': 'VkPipelineBindPoint           pipelineBindPoint\n            ', 'name': 'pipelineBindPoint'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipeline', 'header': 'VkPipeline                    pipeline\n        ', 'name': 'pipeline'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdCopyBuffer(\nVkCommandBuffer commandBuffer,\n VkBuffer srcBuffer,\n VkBuffer dstBuffer,\n uint32_t regionCount,\n const VkBufferCopy* pRegions\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer srcBuffer\n            ', 'name': 'srcBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer dstBuffer\n            ', 'name': 'dstBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t regionCount\n            ', 'name': 'regionCount'}, {'const': True, 'num_indirection': 1, 'length': ['regionCount'], 'type': 'VkBufferCopy', 'header': 'const VkBufferCopy* pRegions\n        ', 'name': 'pRegions'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdCopyImage(\nVkCommandBuffer commandBuffer,\n VkImage srcImage,\n VkImageLayout srcImageLayout,\n VkImage dstImage,\n VkImageLayout dstImageLayout,\n uint32_t regionCount,\n const VkImageCopy* pRegions\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImage', 'header': 'VkImage srcImage\n            ', 'name': 'srcImage'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageLayout', 'header': 'VkImageLayout srcImageLayout\n            ', 'name': 'srcImageLayout'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImage', 'header': 'VkImage dstImage\n            ', 'name': 'dstImage'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageLayout', 'header': 'VkImageLayout dstImageLayout\n            ', 'name': 'dstImageLayout'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t regionCount\n            ', 'name': 'regionCount'}, {'const': True, 'num_indirection': 1, 'length': ['regionCount'], 'type': 'VkImageCopy', 'header': 'const VkImageCopy* pRegions\n        ', 'name': 'pRegions'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdBlitImage(\nVkCommandBuffer commandBuffer,\n VkImage srcImage,\n VkImageLayout srcImageLayout,\n VkImage dstImage,\n VkImageLayout dstImageLayout,\n uint32_t regionCount,\n const VkImageBlit* pRegions,\n VkFilter filter\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImage', 'header': 'VkImage srcImage\n            ', 'name': 'srcImage'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageLayout', 'header': 'VkImageLayout srcImageLayout\n            ', 'name': 'srcImageLayout'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImage', 'header': 'VkImage dstImage\n            ', 'name': 'dstImage'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageLayout', 'header': 'VkImageLayout dstImageLayout\n            ', 'name': 'dstImageLayout'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t regionCount\n            ', 'name': 'regionCount'}, {'const': True, 'num_indirection': 1, 'length': ['regionCount'], 'type': 'VkImageBlit', 'header': 'const VkImageBlit* pRegions\n            ', 'name': 'pRegions'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkFilter', 'header': 'VkFilter filter\n        ', 'name': 'filter'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdCopyBufferToImage(\nVkCommandBuffer commandBuffer,\n VkBuffer srcBuffer,\n VkImage dstImage,\n VkImageLayout dstImageLayout,\n uint32_t regionCount,\n const VkBufferImageCopy* pRegions\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer srcBuffer\n            ', 'name': 'srcBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImage', 'header': 'VkImage dstImage\n            ', 'name': 'dstImage'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageLayout', 'header': 'VkImageLayout dstImageLayout\n            ', 'name': 'dstImageLayout'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t regionCount\n            ', 'name': 'regionCount'}, {'const': True, 'num_indirection': 1, 'length': ['regionCount'], 'type': 'VkBufferImageCopy', 'header': 'const VkBufferImageCopy* pRegions\n        ', 'name': 'pRegions'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdCopyImageToBuffer(\nVkCommandBuffer commandBuffer,\n VkImage srcImage,\n VkImageLayout srcImageLayout,\n VkBuffer dstBuffer,\n uint32_t regionCount,\n const VkBufferImageCopy* pRegions\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImage', 'header': 'VkImage srcImage\n            ', 'name': 'srcImage'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageLayout', 'header': 'VkImageLayout srcImageLayout\n            ', 'name': 'srcImageLayout'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer dstBuffer\n            ', 'name': 'dstBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t regionCount\n            ', 'name': 'regionCount'}, {'const': True, 'num_indirection': 1, 'length': ['regionCount'], 'type': 'VkBufferImageCopy', 'header': 'const VkBufferImageCopy* pRegions\n        ', 'name': 'pRegions'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdCopyMemoryIndirectNV(\nVkCommandBuffer commandBuffer,\n VkDeviceAddress copyBufferAddress,\n uint32_t copyCount,\n uint32_t stride\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceAddress', 'header': 'VkDeviceAddress copyBufferAddress\n            ', 'name': 'copyBufferAddress'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t copyCount\n            ', 'name': 'copyCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t stride\n        ', 'name': 'stride'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdCopyMemoryToImageIndirectNV(\nVkCommandBuffer commandBuffer,\n VkDeviceAddress copyBufferAddress,\n uint32_t copyCount,\n uint32_t stride,\n VkImage dstImage,\n VkImageLayout dstImageLayout,\n const VkImageSubresourceLayers* pImageSubresources\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceAddress', 'header': 'VkDeviceAddress copyBufferAddress\n            ', 'name': 'copyBufferAddress'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t copyCount\n            ', 'name': 'copyCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t stride\n            ', 'name': 'stride'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImage', 'header': 'VkImage dstImage\n            ', 'name': 'dstImage'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageLayout', 'header': 'VkImageLayout dstImageLayout\n            ', 'name': 'dstImageLayout'}, {'const': True, 'num_indirection': 1, 'length': ['copyCount'], 'type': 'VkImageSubresourceLayers', 'header': 'const VkImageSubresourceLayers* pImageSubresources\n        ', 'name': 'pImageSubresources'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdUpdateBuffer(\nVkCommandBuffer commandBuffer,\n VkBuffer dstBuffer,\n VkDeviceSize dstOffset,\n VkDeviceSize dataSize,\n const void* pData\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer dstBuffer\n            ', 'name': 'dstBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize dstOffset\n            ', 'name': 'dstOffset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize dataSize\n            ', 'name': 'dataSize'}, {'const': True, 'num_indirection': 1, 'length': ['dataSize'], 'type': 'void', 'header': 'const void* pData\n        ', 'name': 'pData'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdFillBuffer(\nVkCommandBuffer commandBuffer,\n VkBuffer dstBuffer,\n VkDeviceSize dstOffset,\n VkDeviceSize size,\n uint32_t data\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer dstBuffer\n            ', 'name': 'dstBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize dstOffset\n            ', 'name': 'dstOffset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize size\n            ', 'name': 'size'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t data\n        ', 'name': 'data'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdClearColorImage(\nVkCommandBuffer commandBuffer,\n VkImage image,\n VkImageLayout imageLayout,\n const VkClearColorValue* pColor,\n uint32_t rangeCount,\n const VkImageSubresourceRange* pRanges\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImage', 'header': 'VkImage image\n            ', 'name': 'image'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageLayout', 'header': 'VkImageLayout imageLayout\n            ', 'name': 'imageLayout'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkClearColorValue', 'header': 'const VkClearColorValue* pColor\n            ', 'name': 'pColor'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t rangeCount\n            ', 'name': 'rangeCount'}, {'const': True, 'num_indirection': 1, 'length': ['rangeCount'], 'type': 'VkImageSubresourceRange', 'header': 'const VkImageSubresourceRange* pRanges\n        ', 'name': 'pRanges'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdClearDepthStencilImage(\nVkCommandBuffer commandBuffer,\n VkImage image,\n VkImageLayout imageLayout,\n const VkClearDepthStencilValue* pDepthStencil,\n uint32_t rangeCount,\n const VkImageSubresourceRange* pRanges\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImage', 'header': 'VkImage image\n            ', 'name': 'image'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageLayout', 'header': 'VkImageLayout imageLayout\n            ', 'name': 'imageLayout'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkClearDepthStencilValue', 'header': 'const VkClearDepthStencilValue* pDepthStencil\n            ', 'name': 'pDepthStencil'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t rangeCount\n            ', 'name': 'rangeCount'}, {'const': True, 'num_indirection': 1, 'length': ['rangeCount'], 'type': 'VkImageSubresourceRange', 'header': 'const VkImageSubresourceRange* pRanges\n        ', 'name': 'pRanges'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdClearAttachments(\nVkCommandBuffer commandBuffer,\n uint32_t attachmentCount,\n const VkClearAttachment* pAttachments,\n uint32_t rectCount,\n const VkClearRect* pRects\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t attachmentCount\n            ', 'name': 'attachmentCount'}, {'const': True, 'num_indirection': 1, 'length': ['attachmentCount'], 'type': 'VkClearAttachment', 'header': 'const VkClearAttachment* pAttachments\n            ', 'name': 'pAttachments'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t rectCount\n            ', 'name': 'rectCount'}, {'const': True, 'num_indirection': 1, 'length': ['rectCount'], 'type': 'VkClearRect', 'header': 'const VkClearRect* pRects\n        ', 'name': 'pRects'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdResolveImage(\nVkCommandBuffer commandBuffer,\n VkImage srcImage,\n VkImageLayout srcImageLayout,\n VkImage dstImage,\n VkImageLayout dstImageLayout,\n uint32_t regionCount,\n const VkImageResolve* pRegions\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImage', 'header': 'VkImage srcImage\n            ', 'name': 'srcImage'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageLayout', 'header': 'VkImageLayout srcImageLayout\n            ', 'name': 'srcImageLayout'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImage', 'header': 'VkImage dstImage\n            ', 'name': 'dstImage'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageLayout', 'header': 'VkImageLayout dstImageLayout\n            ', 'name': 'dstImageLayout'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t regionCount\n            ', 'name': 'regionCount'}, {'const': True, 'num_indirection': 1, 'length': ['regionCount'], 'type': 'VkImageResolve', 'header': 'const VkImageResolve* pRegions\n        ', 'name': 'pRegions'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetEvent(\nVkCommandBuffer commandBuffer,\n VkEvent event,\n VkPipelineStageFlags stageMask\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkEvent', 'header': 'VkEvent event\n            ', 'name': 'event'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineStageFlags', 'header': 'VkPipelineStageFlags stageMask\n        ', 'name': 'stageMask'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdResetEvent(\nVkCommandBuffer commandBuffer,\n VkEvent event,\n VkPipelineStageFlags stageMask\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkEvent', 'header': 'VkEvent event\n            ', 'name': 'event'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineStageFlags', 'header': 'VkPipelineStageFlags stageMask\n        ', 'name': 'stageMask'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdWaitEvents(\nVkCommandBuffer commandBuffer,\n uint32_t eventCount,\n const VkEvent* pEvents,\n VkPipelineStageFlags srcStageMask,\n VkPipelineStageFlags dstStageMask,\n uint32_t memoryBarrierCount,\n const VkMemoryBarrier* pMemoryBarriers,\n uint32_t bufferMemoryBarrierCount,\n const VkBufferMemoryBarrier* pBufferMemoryBarriers,\n uint32_t imageMemoryBarrierCount,\n const VkImageMemoryBarrier* pImageMemoryBarriers\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t eventCount\n            ', 'name': 'eventCount'}, {'const': True, 'num_indirection': 1, 'length': ['eventCount'], 'type': 'VkEvent', 'header': 'const VkEvent* pEvents\n            ', 'name': 'pEvents'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineStageFlags', 'header': 'VkPipelineStageFlags srcStageMask\n            ', 'name': 'srcStageMask'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineStageFlags', 'header': 'VkPipelineStageFlags dstStageMask\n            ', 'name': 'dstStageMask'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t memoryBarrierCount\n            ', 'name': 'memoryBarrierCount'}, {'const': True, 'num_indirection': 1, 'length': ['memoryBarrierCount'], 'type': 'VkMemoryBarrier', 'header': 'const VkMemoryBarrier* pMemoryBarriers\n            ', 'name': 'pMemoryBarriers'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t bufferMemoryBarrierCount\n            ', 'name': 'bufferMemoryBarrierCount'}, {'const': True, 'num_indirection': 1, 'length': ['bufferMemoryBarrierCount'], 'type': 'VkBufferMemoryBarrier', 'header': 'const VkBufferMemoryBarrier* pBufferMemoryBarriers\n            ', 'name': 'pBufferMemoryBarriers'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t imageMemoryBarrierCount\n            ', 'name': 'imageMemoryBarrierCount'}, {'const': True, 'num_indirection': 1, 'length': ['imageMemoryBarrierCount'], 'type': 'VkImageMemoryBarrier', 'header': 'const VkImageMemoryBarrier* pImageMemoryBarriers\n        ', 'name': 'pImageMemoryBarriers'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdPipelineBarrier(\nVkCommandBuffer commandBuffer,\n VkPipelineStageFlags srcStageMask,\n VkPipelineStageFlags dstStageMask,\n VkDependencyFlags dependencyFlags,\n uint32_t memoryBarrierCount,\n const VkMemoryBarrier* pMemoryBarriers,\n uint32_t bufferMemoryBarrierCount,\n const VkBufferMemoryBarrier* pBufferMemoryBarriers,\n uint32_t imageMemoryBarrierCount,\n const VkImageMemoryBarrier* pImageMemoryBarriers\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineStageFlags', 'header': 'VkPipelineStageFlags srcStageMask\n            ', 'name': 'srcStageMask'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineStageFlags', 'header': 'VkPipelineStageFlags dstStageMask\n            ', 'name': 'dstStageMask'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDependencyFlags', 'header': 'VkDependencyFlags dependencyFlags\n            ', 'name': 'dependencyFlags'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t memoryBarrierCount\n            ', 'name': 'memoryBarrierCount'}, {'const': True, 'num_indirection': 1, 'length': ['memoryBarrierCount'], 'type': 'VkMemoryBarrier', 'header': 'const VkMemoryBarrier* pMemoryBarriers\n            ', 'name': 'pMemoryBarriers'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t bufferMemoryBarrierCount\n            ', 'name': 'bufferMemoryBarrierCount'}, {'const': True, 'num_indirection': 1, 'length': ['bufferMemoryBarrierCount'], 'type': 'VkBufferMemoryBarrier', 'header': 'const VkBufferMemoryBarrier* pBufferMemoryBarriers\n            ', 'name': 'pBufferMemoryBarriers'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t imageMemoryBarrierCount\n            ', 'name': 'imageMemoryBarrierCount'}, {'const': True, 'num_indirection': 1, 'length': ['imageMemoryBarrierCount'], 'type': 'VkImageMemoryBarrier', 'header': 'const VkImageMemoryBarrier* pImageMemoryBarriers\n        ', 'name': 'pImageMemoryBarriers'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdBeginQuery(\nVkCommandBuffer commandBuffer,\n VkQueryPool queryPool,\n uint32_t query,\n VkQueryControlFlags flags\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryPool', 'header': 'VkQueryPool queryPool\n            ', 'name': 'queryPool'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t query\n            ', 'name': 'query'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryControlFlags', 'header': 'VkQueryControlFlags flags\n        ', 'name': 'flags'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdEndQuery(\nVkCommandBuffer commandBuffer,\n VkQueryPool queryPool,\n uint32_t query\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryPool', 'header': 'VkQueryPool queryPool\n            ', 'name': 'queryPool'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t query\n        ', 'name': 'query'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdBeginConditionalRenderingEXT(\nVkCommandBuffer commandBuffer,\n const VkConditionalRenderingBeginInfoEXT* pConditionalRenderingBegin\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkConditionalRenderingBeginInfoEXT', 'header': 'const VkConditionalRenderingBeginInfoEXT* pConditionalRenderingBegin\n        ', 'name': 'pConditionalRenderingBegin'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdEndConditionalRenderingEXT(\nVkCommandBuffer commandBuffer\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n        ', 'name': 'commandBuffer'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdResetQueryPool(\nVkCommandBuffer commandBuffer,\n VkQueryPool queryPool,\n uint32_t firstQuery,\n uint32_t queryCount\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryPool', 'header': 'VkQueryPool queryPool\n            ', 'name': 'queryPool'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstQuery\n            ', 'name': 'firstQuery'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t queryCount\n        ', 'name': 'queryCount'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdWriteTimestamp(\nVkCommandBuffer commandBuffer,\n VkPipelineStageFlagBits pipelineStage,\n VkQueryPool queryPool,\n uint32_t query\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineStageFlagBits', 'header': 'VkPipelineStageFlagBits pipelineStage\n            ', 'name': 'pipelineStage'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryPool', 'header': 'VkQueryPool queryPool\n            ', 'name': 'queryPool'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t query\n        ', 'name': 'query'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdCopyQueryPoolResults(\nVkCommandBuffer commandBuffer,\n VkQueryPool queryPool,\n uint32_t firstQuery,\n uint32_t queryCount,\n VkBuffer dstBuffer,\n VkDeviceSize dstOffset,\n VkDeviceSize stride,\n VkQueryResultFlags flags\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryPool', 'header': 'VkQueryPool queryPool\n            ', 'name': 'queryPool'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstQuery\n            ', 'name': 'firstQuery'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t queryCount\n            ', 'name': 'queryCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer dstBuffer\n            ', 'name': 'dstBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize dstOffset\n            ', 'name': 'dstOffset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize stride\n            ', 'name': 'stride'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryResultFlags', 'header': 'VkQueryResultFlags flags\n        ', 'name': 'flags'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdPushConstants(\nVkCommandBuffer commandBuffer,\n VkPipelineLayout layout,\n VkShaderStageFlags stageFlags,\n uint32_t offset,\n uint32_t size,\n const void* pValues\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineLayout', 'header': 'VkPipelineLayout layout\n            ', 'name': 'layout'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkShaderStageFlags', 'header': 'VkShaderStageFlags stageFlags\n            ', 'name': 'stageFlags'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t offset\n            ', 'name': 'offset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t size\n            ', 'name': 'size'}, {'const': True, 'num_indirection': 1, 'length': ['size'], 'type': 'void', 'header': 'const void* pValues\n        ', 'name': 'pValues'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdBeginRenderPass(\nVkCommandBuffer commandBuffer,\n const VkRenderPassBeginInfo* pRenderPassBegin,\n VkSubpassContents contents\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkRenderPassBeginInfo', 'header': 'const VkRenderPassBeginInfo* pRenderPassBegin\n            ', 'name': 'pRenderPassBegin'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSubpassContents', 'header': 'VkSubpassContents contents\n        ', 'name': 'contents'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdNextSubpass(\nVkCommandBuffer commandBuffer,\n VkSubpassContents contents\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSubpassContents', 'header': 'VkSubpassContents contents\n        ', 'name': 'contents'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdEndRenderPass(\nVkCommandBuffer commandBuffer\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n        ', 'name': 'commandBuffer'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdExecuteCommands(\nVkCommandBuffer commandBuffer,\n uint32_t commandBufferCount,\n const VkCommandBuffer* pCommandBuffers\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t commandBufferCount\n            ', 'name': 'commandBufferCount'}, {'const': True, 'num_indirection': 1, 'length': ['commandBufferCount'], 'type': 'VkCommandBuffer', 'header': 'const VkCommandBuffer* pCommandBuffers\n        ', 'name': 'pCommandBuffers'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetPhysicalDeviceDisplayPropertiesKHR(\nVkPhysicalDevice physicalDevice,\n uint32_t* pPropertyCount,\n VkDisplayPropertiesKHR* pProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pPropertyCount\n            ', 'name': 'pPropertyCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pPropertyCount'], 'type': 'VkDisplayPropertiesKHR', 'header': 'VkDisplayPropertiesKHR* pProperties\n        ', 'name': 'pProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetPhysicalDeviceDisplayPlanePropertiesKHR(\nVkPhysicalDevice physicalDevice,\n uint32_t* pPropertyCount,\n VkDisplayPlanePropertiesKHR* pProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pPropertyCount\n            ', 'name': 'pPropertyCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pPropertyCount'], 'type': 'VkDisplayPlanePropertiesKHR', 'header': 'VkDisplayPlanePropertiesKHR* pProperties\n        ', 'name': 'pProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetDisplayPlaneSupportedDisplaysKHR(\nVkPhysicalDevice physicalDevice,\n uint32_t planeIndex,\n uint32_t* pDisplayCount,\n VkDisplayKHR* pDisplays\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t planeIndex\n            ', 'name': 'planeIndex'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pDisplayCount\n            ', 'name': 'pDisplayCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pDisplayCount'], 'type': 'VkDisplayKHR', 'header': 'VkDisplayKHR* pDisplays\n        ', 'name': 'pDisplays'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetDisplayModePropertiesKHR(\nVkPhysicalDevice physicalDevice,\n VkDisplayKHR display,\n uint32_t* pPropertyCount,\n VkDisplayModePropertiesKHR* pProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDisplayKHR', 'header': 'VkDisplayKHR display\n            ', 'name': 'display'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pPropertyCount\n            ', 'name': 'pPropertyCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pPropertyCount'], 'type': 'VkDisplayModePropertiesKHR', 'header': 'VkDisplayModePropertiesKHR* pProperties\n        ', 'name': 'pProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreateDisplayModeKHR(\nVkPhysicalDevice physicalDevice,\n VkDisplayKHR display,\n const VkDisplayModeCreateInfoKHR* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkDisplayModeKHR* pMode\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDisplayKHR', 'header': 'VkDisplayKHR display\n            ', 'name': 'display'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDisplayModeCreateInfoKHR', 'header': 'const VkDisplayModeCreateInfoKHR* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkDisplayModeKHR', 'header': 'VkDisplayModeKHR* pMode\n        ', 'name': 'pMode'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetDisplayPlaneCapabilitiesKHR(\nVkPhysicalDevice physicalDevice,\n VkDisplayModeKHR mode,\n uint32_t planeIndex,\n VkDisplayPlaneCapabilitiesKHR* pCapabilities\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDisplayModeKHR', 'header': 'VkDisplayModeKHR mode\n            ', 'name': 'mode'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t planeIndex\n            ', 'name': 'planeIndex'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkDisplayPlaneCapabilitiesKHR', 'header': 'VkDisplayPlaneCapabilitiesKHR* pCapabilities\n        ', 'name': 'pCapabilities'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreateDisplayPlaneSurfaceKHR(\nVkInstance instance,\n const VkDisplaySurfaceCreateInfoKHR* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkSurfaceKHR* pSurface\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkInstance', 'header': 'VkInstance instance\n            ', 'name': 'instance'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDisplaySurfaceCreateInfoKHR', 'header': 'const VkDisplaySurfaceCreateInfoKHR* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkSurfaceKHR', 'header': 'VkSurfaceKHR* pSurface\n        ', 'name': 'pSurface'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreateSharedSwapchainsKHR(\nVkDevice device,\n uint32_t swapchainCount,\n const VkSwapchainCreateInfoKHR* pCreateInfos,\n const VkAllocationCallbacks* pAllocator,\n VkSwapchainKHR* pSwapchains\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t swapchainCount\n            ', 'name': 'swapchainCount'}, {'const': True, 'num_indirection': 1, 'length': ['swapchainCount'], 'type': 'VkSwapchainCreateInfoKHR', 'header': 'const VkSwapchainCreateInfoKHR* pCreateInfos\n            ', 'name': 'pCreateInfos'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': ['swapchainCount'], 'type': 'VkSwapchainKHR', 'header': 'VkSwapchainKHR* pSwapchains\n        ', 'name': 'pSwapchains'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkDestroySurfaceKHR(\nVkInstance instance,\n VkSurfaceKHR surface,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkInstance', 'header': 'VkInstance instance\n            ', 'name': 'instance'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSurfaceKHR', 'header': 'VkSurfaceKHR surface\n            ', 'name': 'surface'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetPhysicalDeviceSurfaceSupportKHR(\nVkPhysicalDevice physicalDevice,\n uint32_t queueFamilyIndex,\n VkSurfaceKHR surface,\n VkBool32* pSupported\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t queueFamilyIndex\n            ', 'name': 'queueFamilyIndex'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSurfaceKHR', 'header': 'VkSurfaceKHR surface\n            ', 'name': 'surface'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32* pSupported\n        ', 'name': 'pSupported'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetPhysicalDeviceSurfaceCapabilitiesKHR(\nVkPhysicalDevice physicalDevice,\n VkSurfaceKHR surface,\n VkSurfaceCapabilitiesKHR* pSurfaceCapabilities\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSurfaceKHR', 'header': 'VkSurfaceKHR surface\n            ', 'name': 'surface'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkSurfaceCapabilitiesKHR', 'header': 'VkSurfaceCapabilitiesKHR* pSurfaceCapabilities\n        ', 'name': 'pSurfaceCapabilities'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetPhysicalDeviceSurfaceFormatsKHR(\nVkPhysicalDevice physicalDevice,\n VkSurfaceKHR surface,\n uint32_t* pSurfaceFormatCount,\n VkSurfaceFormatKHR* pSurfaceFormats\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSurfaceKHR', 'header': 'VkSurfaceKHR surface\n            ', 'name': 'surface'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pSurfaceFormatCount\n            ', 'name': 'pSurfaceFormatCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pSurfaceFormatCount'], 'type': 'VkSurfaceFormatKHR', 'header': 'VkSurfaceFormatKHR* pSurfaceFormats\n        ', 'name': 'pSurfaceFormats'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetPhysicalDeviceSurfacePresentModesKHR(\nVkPhysicalDevice physicalDevice,\n VkSurfaceKHR surface,\n uint32_t* pPresentModeCount,\n VkPresentModeKHR* pPresentModes\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSurfaceKHR', 'header': 'VkSurfaceKHR surface\n            ', 'name': 'surface'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pPresentModeCount\n            ', 'name': 'pPresentModeCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pPresentModeCount'], 'type': 'VkPresentModeKHR', 'header': 'VkPresentModeKHR* pPresentModes\n        ', 'name': 'pPresentModes'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreateSwapchainKHR(\nVkDevice device,\n const VkSwapchainCreateInfoKHR* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkSwapchainKHR* pSwapchain\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkSwapchainCreateInfoKHR', 'header': 'const VkSwapchainCreateInfoKHR* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkSwapchainKHR', 'header': 'VkSwapchainKHR* pSwapchain\n        ', 'name': 'pSwapchain'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkDestroySwapchainKHR(\nVkDevice device,\n VkSwapchainKHR swapchain,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSwapchainKHR', 'header': 'VkSwapchainKHR swapchain\n            ', 'name': 'swapchain'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetSwapchainImagesKHR(\nVkDevice device,\n VkSwapchainKHR swapchain,\n uint32_t* pSwapchainImageCount,\n VkImage* pSwapchainImages\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSwapchainKHR', 'header': 'VkSwapchainKHR swapchain\n            ', 'name': 'swapchain'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pSwapchainImageCount\n            ', 'name': 'pSwapchainImageCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pSwapchainImageCount'], 'type': 'VkImage', 'header': 'VkImage* pSwapchainImages\n        ', 'name': 'pSwapchainImages'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkAcquireNextImageKHR(\nVkDevice device,\n VkSwapchainKHR swapchain,\n uint64_t timeout,\n VkSemaphore semaphore,\n VkFence fence,\n uint32_t* pImageIndex\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSwapchainKHR', 'header': 'VkSwapchainKHR swapchain\n            ', 'name': 'swapchain'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint64_t', 'header': 'uint64_t timeout\n            ', 'name': 'timeout'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSemaphore', 'header': 'VkSemaphore semaphore\n            ', 'name': 'semaphore'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkFence', 'header': 'VkFence fence\n            ', 'name': 'fence'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pImageIndex\n        ', 'name': 'pImageIndex'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkQueuePresentKHR(\nVkQueue queue,\n const VkPresentInfoKHR* pPresentInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueue', 'header': 'VkQueue queue\n            ', 'name': 'queue'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPresentInfoKHR', 'header': 'const VkPresentInfoKHR* pPresentInfo\n        ', 'name': 'pPresentInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreateXlibSurfaceKHR(\nVkInstance instance,\n const VkXlibSurfaceCreateInfoKHR* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkSurfaceKHR* pSurface\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkInstance', 'header': 'VkInstance instance\n            ', 'name': 'instance'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkXlibSurfaceCreateInfoKHR', 'header': 'const VkXlibSurfaceCreateInfoKHR* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkSurfaceKHR', 'header': 'VkSurfaceKHR* pSurface\n        ', 'name': 'pSurface'}]}(json data);
void handle_{'sync': False, 'type': 'VkBool32', 'num_indirection': 0, 'header': 'VkBool32 funcpointer_vkGetPhysicalDeviceXlibPresentationSupportKHR(\nVkPhysicalDevice physicalDevice,\n uint32_t queueFamilyIndex,\n Display* dpy,\n VisualID visualID\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t queueFamilyIndex\n            ', 'name': 'queueFamilyIndex'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'Display', 'header': 'Display* dpy\n            ', 'name': 'dpy'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VisualID', 'header': 'VisualID visualID\n        ', 'name': 'visualID'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreateXcbSurfaceKHR(\nVkInstance instance,\n const VkXcbSurfaceCreateInfoKHR* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkSurfaceKHR* pSurface\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkInstance', 'header': 'VkInstance instance\n            ', 'name': 'instance'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkXcbSurfaceCreateInfoKHR', 'header': 'const VkXcbSurfaceCreateInfoKHR* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkSurfaceKHR', 'header': 'VkSurfaceKHR* pSurface\n        ', 'name': 'pSurface'}]}(json data);
void handle_{'sync': False, 'type': 'VkBool32', 'num_indirection': 0, 'header': 'VkBool32 funcpointer_vkGetPhysicalDeviceXcbPresentationSupportKHR(\nVkPhysicalDevice physicalDevice,\n uint32_t queueFamilyIndex,\n xcb_connection_t* connection,\n xcb_visualid_t visual_id\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t queueFamilyIndex\n            ', 'name': 'queueFamilyIndex'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'xcb_connection_t', 'header': 'xcb_connection_t* connection\n            ', 'name': 'connection'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'xcb_visualid_t', 'header': 'xcb_visualid_t visual_id\n        ', 'name': 'visual_id'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreateDebugReportCallbackEXT(\nVkInstance instance,\n const VkDebugReportCallbackCreateInfoEXT* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkDebugReportCallbackEXT* pCallback\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkInstance', 'header': 'VkInstance instance\n            ', 'name': 'instance'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDebugReportCallbackCreateInfoEXT', 'header': 'const VkDebugReportCallbackCreateInfoEXT* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkDebugReportCallbackEXT', 'header': 'VkDebugReportCallbackEXT* pCallback\n        ', 'name': 'pCallback'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkDestroyDebugReportCallbackEXT(\nVkInstance instance,\n VkDebugReportCallbackEXT callback,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkInstance', 'header': 'VkInstance instance\n            ', 'name': 'instance'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDebugReportCallbackEXT', 'header': 'VkDebugReportCallbackEXT callback\n            ', 'name': 'callback'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkDebugReportMessageEXT(\nVkInstance instance,\n VkDebugReportFlagsEXT flags,\n VkDebugReportObjectTypeEXT objectType,\n uint64_t object,\n size_t location,\n int32_t messageCode,\n const char* pLayerPrefix,\n const char* pMessage\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkInstance', 'header': 'VkInstance instance\n            ', 'name': 'instance'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDebugReportFlagsEXT', 'header': 'VkDebugReportFlagsEXT flags\n            ', 'name': 'flags'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDebugReportObjectTypeEXT', 'header': 'VkDebugReportObjectTypeEXT objectType\n            ', 'name': 'objectType'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint64_t', 'header': 'uint64_t object\n            ', 'name': 'object'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'size_t', 'header': 'size_t location\n            ', 'name': 'location'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'int32_t', 'header': 'int32_t messageCode\n            ', 'name': 'messageCode'}, {'const': True, 'num_indirection': 1, 'length': ['null-terminated'], 'type': 'char', 'header': 'const char* pLayerPrefix\n            ', 'name': 'pLayerPrefix'}, {'const': True, 'num_indirection': 1, 'length': ['null-terminated'], 'type': 'char', 'header': 'const char* pMessage\n        ', 'name': 'pMessage'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkDebugMarkerSetObjectNameEXT(\nVkDevice device,\n const VkDebugMarkerObjectNameInfoEXT* pNameInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDebugMarkerObjectNameInfoEXT', 'header': 'const VkDebugMarkerObjectNameInfoEXT* pNameInfo\n        ', 'name': 'pNameInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkDebugMarkerSetObjectTagEXT(\nVkDevice device,\n const VkDebugMarkerObjectTagInfoEXT* pTagInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDebugMarkerObjectTagInfoEXT', 'header': 'const VkDebugMarkerObjectTagInfoEXT* pTagInfo\n        ', 'name': 'pTagInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdDebugMarkerBeginEXT(\nVkCommandBuffer commandBuffer,\n const VkDebugMarkerMarkerInfoEXT* pMarkerInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDebugMarkerMarkerInfoEXT', 'header': 'const VkDebugMarkerMarkerInfoEXT* pMarkerInfo\n        ', 'name': 'pMarkerInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdDebugMarkerEndEXT(\nVkCommandBuffer commandBuffer\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n        ', 'name': 'commandBuffer'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdDebugMarkerInsertEXT(\nVkCommandBuffer commandBuffer,\n const VkDebugMarkerMarkerInfoEXT* pMarkerInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDebugMarkerMarkerInfoEXT', 'header': 'const VkDebugMarkerMarkerInfoEXT* pMarkerInfo\n        ', 'name': 'pMarkerInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetPhysicalDeviceExternalImageFormatPropertiesNV(\nVkPhysicalDevice physicalDevice,\n VkFormat format,\n VkImageType type,\n VkImageTiling tiling,\n VkImageUsageFlags usage,\n VkImageCreateFlags flags,\n VkExternalMemoryHandleTypeFlagsNV externalHandleType,\n VkExternalImageFormatPropertiesNV* pExternalImageFormatProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkFormat', 'header': 'VkFormat format\n            ', 'name': 'format'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageType', 'header': 'VkImageType type\n            ', 'name': 'type'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageTiling', 'header': 'VkImageTiling tiling\n            ', 'name': 'tiling'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageUsageFlags', 'header': 'VkImageUsageFlags usage\n            ', 'name': 'usage'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageCreateFlags', 'header': 'VkImageCreateFlags flags\n            ', 'name': 'flags'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkExternalMemoryHandleTypeFlagsNV', 'header': 'VkExternalMemoryHandleTypeFlagsNV externalHandleType\n            ', 'name': 'externalHandleType'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkExternalImageFormatPropertiesNV', 'header': 'VkExternalImageFormatPropertiesNV* pExternalImageFormatProperties\n        ', 'name': 'pExternalImageFormatProperties'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdExecuteGeneratedCommandsNV(\nVkCommandBuffer commandBuffer,\n VkBool32 isPreprocessed,\n const VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 isPreprocessed\n            ', 'name': 'isPreprocessed'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkGeneratedCommandsInfoNV', 'header': 'const VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo\n        ', 'name': 'pGeneratedCommandsInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdPreprocessGeneratedCommandsNV(\nVkCommandBuffer commandBuffer,\n const VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkGeneratedCommandsInfoNV', 'header': 'const VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo\n        ', 'name': 'pGeneratedCommandsInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdBindPipelineShaderGroupNV(\nVkCommandBuffer commandBuffer,\n VkPipelineBindPoint pipelineBindPoint,\n VkPipeline pipeline,\n uint32_t groupIndex\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineBindPoint', 'header': 'VkPipelineBindPoint pipelineBindPoint\n            ', 'name': 'pipelineBindPoint'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipeline', 'header': 'VkPipeline pipeline\n            ', 'name': 'pipeline'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t groupIndex\n        ', 'name': 'groupIndex'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetGeneratedCommandsMemoryRequirementsNV(\nVkDevice device,\n const VkGeneratedCommandsMemoryRequirementsInfoNV* pInfo,\n VkMemoryRequirements2* pMemoryRequirements\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkGeneratedCommandsMemoryRequirementsInfoNV', 'header': 'const VkGeneratedCommandsMemoryRequirementsInfoNV* pInfo\n            ', 'name': 'pInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkMemoryRequirements2', 'header': 'VkMemoryRequirements2* pMemoryRequirements\n        ', 'name': 'pMemoryRequirements'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreateIndirectCommandsLayoutNV(\nVkDevice device,\n const VkIndirectCommandsLayoutCreateInfoNV* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkIndirectCommandsLayoutNV* pIndirectCommandsLayout\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkIndirectCommandsLayoutCreateInfoNV', 'header': 'const VkIndirectCommandsLayoutCreateInfoNV* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkIndirectCommandsLayoutNV', 'header': 'VkIndirectCommandsLayoutNV* pIndirectCommandsLayout\n        ', 'name': 'pIndirectCommandsLayout'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkDestroyIndirectCommandsLayoutNV(\nVkDevice device,\n VkIndirectCommandsLayoutNV indirectCommandsLayout,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkIndirectCommandsLayoutNV', 'header': 'VkIndirectCommandsLayoutNV indirectCommandsLayout\n            ', 'name': 'indirectCommandsLayout'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetPhysicalDeviceFeatures2(\nVkPhysicalDevice physicalDevice,\n VkPhysicalDeviceFeatures2* pFeatures\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkPhysicalDeviceFeatures2', 'header': 'VkPhysicalDeviceFeatures2* pFeatures\n        ', 'name': 'pFeatures'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetPhysicalDeviceFeatures2KHR(\nVkPhysicalDevice physicalDevice,\n VkPhysicalDeviceFeatures2* pFeatures\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkPhysicalDeviceFeatures2', 'header': 'VkPhysicalDeviceFeatures2* pFeatures\n        ', 'name': 'pFeatures'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetPhysicalDeviceProperties2(\nVkPhysicalDevice physicalDevice,\n VkPhysicalDeviceProperties2* pProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkPhysicalDeviceProperties2', 'header': 'VkPhysicalDeviceProperties2* pProperties\n        ', 'name': 'pProperties'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetPhysicalDeviceProperties2KHR(\nVkPhysicalDevice physicalDevice,\n VkPhysicalDeviceProperties2* pProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkPhysicalDeviceProperties2', 'header': 'VkPhysicalDeviceProperties2* pProperties\n        ', 'name': 'pProperties'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetPhysicalDeviceFormatProperties2(\nVkPhysicalDevice physicalDevice,\n VkFormat format,\n VkFormatProperties2* pFormatProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkFormat', 'header': 'VkFormat format\n            ', 'name': 'format'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkFormatProperties2', 'header': 'VkFormatProperties2* pFormatProperties\n        ', 'name': 'pFormatProperties'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetPhysicalDeviceFormatProperties2KHR(\nVkPhysicalDevice physicalDevice,\n VkFormat format,\n VkFormatProperties2* pFormatProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkFormat', 'header': 'VkFormat format\n            ', 'name': 'format'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkFormatProperties2', 'header': 'VkFormatProperties2* pFormatProperties\n        ', 'name': 'pFormatProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetPhysicalDeviceImageFormatProperties2(\nVkPhysicalDevice physicalDevice,\n const VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo,\n VkImageFormatProperties2* pImageFormatProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPhysicalDeviceImageFormatInfo2', 'header': 'const VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo\n            ', 'name': 'pImageFormatInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkImageFormatProperties2', 'header': 'VkImageFormatProperties2* pImageFormatProperties\n        ', 'name': 'pImageFormatProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetPhysicalDeviceImageFormatProperties2KHR(\nVkPhysicalDevice physicalDevice,\n const VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo,\n VkImageFormatProperties2* pImageFormatProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPhysicalDeviceImageFormatInfo2', 'header': 'const VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo\n            ', 'name': 'pImageFormatInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkImageFormatProperties2', 'header': 'VkImageFormatProperties2* pImageFormatProperties\n        ', 'name': 'pImageFormatProperties'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetPhysicalDeviceQueueFamilyProperties2(\nVkPhysicalDevice physicalDevice,\n uint32_t* pQueueFamilyPropertyCount,\n VkQueueFamilyProperties2* pQueueFamilyProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pQueueFamilyPropertyCount\n            ', 'name': 'pQueueFamilyPropertyCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pQueueFamilyPropertyCount'], 'type': 'VkQueueFamilyProperties2', 'header': 'VkQueueFamilyProperties2* pQueueFamilyProperties\n        ', 'name': 'pQueueFamilyProperties'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetPhysicalDeviceQueueFamilyProperties2KHR(\nVkPhysicalDevice physicalDevice,\n uint32_t* pQueueFamilyPropertyCount,\n VkQueueFamilyProperties2* pQueueFamilyProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pQueueFamilyPropertyCount\n            ', 'name': 'pQueueFamilyPropertyCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pQueueFamilyPropertyCount'], 'type': 'VkQueueFamilyProperties2', 'header': 'VkQueueFamilyProperties2* pQueueFamilyProperties\n        ', 'name': 'pQueueFamilyProperties'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetPhysicalDeviceMemoryProperties2(\nVkPhysicalDevice physicalDevice,\n VkPhysicalDeviceMemoryProperties2* pMemoryProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkPhysicalDeviceMemoryProperties2', 'header': 'VkPhysicalDeviceMemoryProperties2* pMemoryProperties\n        ', 'name': 'pMemoryProperties'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetPhysicalDeviceMemoryProperties2KHR(\nVkPhysicalDevice physicalDevice,\n VkPhysicalDeviceMemoryProperties2* pMemoryProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkPhysicalDeviceMemoryProperties2', 'header': 'VkPhysicalDeviceMemoryProperties2* pMemoryProperties\n        ', 'name': 'pMemoryProperties'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetPhysicalDeviceSparseImageFormatProperties2(\nVkPhysicalDevice physicalDevice,\n const VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo,\n uint32_t* pPropertyCount,\n VkSparseImageFormatProperties2* pProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPhysicalDeviceSparseImageFormatInfo2', 'header': 'const VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo\n            ', 'name': 'pFormatInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pPropertyCount\n            ', 'name': 'pPropertyCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pPropertyCount'], 'type': 'VkSparseImageFormatProperties2', 'header': 'VkSparseImageFormatProperties2* pProperties\n        ', 'name': 'pProperties'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetPhysicalDeviceSparseImageFormatProperties2KHR(\nVkPhysicalDevice physicalDevice,\n const VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo,\n uint32_t* pPropertyCount,\n VkSparseImageFormatProperties2* pProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPhysicalDeviceSparseImageFormatInfo2', 'header': 'const VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo\n            ', 'name': 'pFormatInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pPropertyCount\n            ', 'name': 'pPropertyCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pPropertyCount'], 'type': 'VkSparseImageFormatProperties2', 'header': 'VkSparseImageFormatProperties2* pProperties\n        ', 'name': 'pProperties'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdPushDescriptorSetKHR(\nVkCommandBuffer commandBuffer,\n VkPipelineBindPoint pipelineBindPoint,\n VkPipelineLayout layout,\n uint32_t set,\n uint32_t descriptorWriteCount,\n const VkWriteDescriptorSet* pDescriptorWrites\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineBindPoint', 'header': 'VkPipelineBindPoint pipelineBindPoint\n            ', 'name': 'pipelineBindPoint'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineLayout', 'header': 'VkPipelineLayout layout\n            ', 'name': 'layout'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t set\n            ', 'name': 'set'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t descriptorWriteCount\n            ', 'name': 'descriptorWriteCount'}, {'const': True, 'num_indirection': 1, 'length': ['descriptorWriteCount'], 'type': 'VkWriteDescriptorSet', 'header': 'const VkWriteDescriptorSet* pDescriptorWrites\n        ', 'name': 'pDescriptorWrites'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkTrimCommandPool(\nVkDevice device,\n VkCommandPool commandPool,\n VkCommandPoolTrimFlags flags\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandPool', 'header': 'VkCommandPool commandPool\n            ', 'name': 'commandPool'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandPoolTrimFlags', 'header': 'VkCommandPoolTrimFlags flags\n        ', 'name': 'flags'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkTrimCommandPoolKHR(\nVkDevice device,\n VkCommandPool commandPool,\n VkCommandPoolTrimFlags flags\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandPool', 'header': 'VkCommandPool commandPool\n            ', 'name': 'commandPool'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandPoolTrimFlags', 'header': 'VkCommandPoolTrimFlags flags\n        ', 'name': 'flags'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetPhysicalDeviceExternalBufferProperties(\nVkPhysicalDevice physicalDevice,\n const VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo,\n VkExternalBufferProperties* pExternalBufferProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPhysicalDeviceExternalBufferInfo', 'header': 'const VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo\n            ', 'name': 'pExternalBufferInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkExternalBufferProperties', 'header': 'VkExternalBufferProperties* pExternalBufferProperties\n        ', 'name': 'pExternalBufferProperties'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetPhysicalDeviceExternalBufferPropertiesKHR(\nVkPhysicalDevice physicalDevice,\n const VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo,\n VkExternalBufferProperties* pExternalBufferProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPhysicalDeviceExternalBufferInfo', 'header': 'const VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo\n            ', 'name': 'pExternalBufferInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkExternalBufferProperties', 'header': 'VkExternalBufferProperties* pExternalBufferProperties\n        ', 'name': 'pExternalBufferProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetMemoryFdKHR(\nVkDevice device,\n const VkMemoryGetFdInfoKHR* pGetFdInfo,\n int* pFd\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkMemoryGetFdInfoKHR', 'header': 'const VkMemoryGetFdInfoKHR* pGetFdInfo\n            ', 'name': 'pGetFdInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'int', 'header': 'int* pFd\n        ', 'name': 'pFd'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetMemoryFdPropertiesKHR(\nVkDevice device,\n VkExternalMemoryHandleTypeFlagBits handleType,\n int fd,\n VkMemoryFdPropertiesKHR* pMemoryFdProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkExternalMemoryHandleTypeFlagBits', 'header': 'VkExternalMemoryHandleTypeFlagBits handleType\n            ', 'name': 'handleType'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'int', 'header': 'int fd\n            ', 'name': 'fd'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkMemoryFdPropertiesKHR', 'header': 'VkMemoryFdPropertiesKHR* pMemoryFdProperties\n        ', 'name': 'pMemoryFdProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetMemoryRemoteAddressNV(\nVkDevice device,\n const VkMemoryGetRemoteAddressInfoNV* pMemoryGetRemoteAddressInfo,\n VkRemoteAddressNV* pAddress\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkMemoryGetRemoteAddressInfoNV', 'header': 'const VkMemoryGetRemoteAddressInfoNV* pMemoryGetRemoteAddressInfo\n            ', 'name': 'pMemoryGetRemoteAddressInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkRemoteAddressNV', 'header': 'VkRemoteAddressNV* pAddress\n        ', 'name': 'pAddress'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetPhysicalDeviceExternalSemaphoreProperties(\nVkPhysicalDevice physicalDevice,\n const VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo,\n VkExternalSemaphoreProperties* pExternalSemaphoreProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPhysicalDeviceExternalSemaphoreInfo', 'header': 'const VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo\n            ', 'name': 'pExternalSemaphoreInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkExternalSemaphoreProperties', 'header': 'VkExternalSemaphoreProperties* pExternalSemaphoreProperties\n        ', 'name': 'pExternalSemaphoreProperties'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(\nVkPhysicalDevice physicalDevice,\n const VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo,\n VkExternalSemaphoreProperties* pExternalSemaphoreProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPhysicalDeviceExternalSemaphoreInfo', 'header': 'const VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo\n            ', 'name': 'pExternalSemaphoreInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkExternalSemaphoreProperties', 'header': 'VkExternalSemaphoreProperties* pExternalSemaphoreProperties\n        ', 'name': 'pExternalSemaphoreProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetSemaphoreFdKHR(\nVkDevice device,\n const VkSemaphoreGetFdInfoKHR* pGetFdInfo,\n int* pFd\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkSemaphoreGetFdInfoKHR', 'header': 'const VkSemaphoreGetFdInfoKHR* pGetFdInfo\n            ', 'name': 'pGetFdInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'int', 'header': 'int* pFd\n        ', 'name': 'pFd'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkImportSemaphoreFdKHR(\nVkDevice device,\n const VkImportSemaphoreFdInfoKHR* pImportSemaphoreFdInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkImportSemaphoreFdInfoKHR', 'header': 'const VkImportSemaphoreFdInfoKHR* pImportSemaphoreFdInfo\n        ', 'name': 'pImportSemaphoreFdInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetPhysicalDeviceExternalFenceProperties(\nVkPhysicalDevice physicalDevice,\n const VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo,\n VkExternalFenceProperties* pExternalFenceProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPhysicalDeviceExternalFenceInfo', 'header': 'const VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo\n            ', 'name': 'pExternalFenceInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkExternalFenceProperties', 'header': 'VkExternalFenceProperties* pExternalFenceProperties\n        ', 'name': 'pExternalFenceProperties'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetPhysicalDeviceExternalFencePropertiesKHR(\nVkPhysicalDevice physicalDevice,\n const VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo,\n VkExternalFenceProperties* pExternalFenceProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPhysicalDeviceExternalFenceInfo', 'header': 'const VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo\n            ', 'name': 'pExternalFenceInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkExternalFenceProperties', 'header': 'VkExternalFenceProperties* pExternalFenceProperties\n        ', 'name': 'pExternalFenceProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetFenceFdKHR(\nVkDevice device,\n const VkFenceGetFdInfoKHR* pGetFdInfo,\n int* pFd\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkFenceGetFdInfoKHR', 'header': 'const VkFenceGetFdInfoKHR* pGetFdInfo\n            ', 'name': 'pGetFdInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'int', 'header': 'int* pFd\n        ', 'name': 'pFd'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkImportFenceFdKHR(\nVkDevice device,\n const VkImportFenceFdInfoKHR* pImportFenceFdInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkImportFenceFdInfoKHR', 'header': 'const VkImportFenceFdInfoKHR* pImportFenceFdInfo\n        ', 'name': 'pImportFenceFdInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkReleaseDisplayEXT(\nVkPhysicalDevice physicalDevice,\n VkDisplayKHR display\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDisplayKHR', 'header': 'VkDisplayKHR display\n        ', 'name': 'display'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkDisplayPowerControlEXT(\nVkDevice device,\n VkDisplayKHR display,\n const VkDisplayPowerInfoEXT* pDisplayPowerInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDisplayKHR', 'header': 'VkDisplayKHR display\n            ', 'name': 'display'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDisplayPowerInfoEXT', 'header': 'const VkDisplayPowerInfoEXT* pDisplayPowerInfo\n        ', 'name': 'pDisplayPowerInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkRegisterDeviceEventEXT(\nVkDevice device,\n const VkDeviceEventInfoEXT* pDeviceEventInfo,\n const VkAllocationCallbacks* pAllocator,\n VkFence* pFence\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDeviceEventInfoEXT', 'header': 'const VkDeviceEventInfoEXT* pDeviceEventInfo\n            ', 'name': 'pDeviceEventInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkFence', 'header': 'VkFence* pFence\n        ', 'name': 'pFence'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkRegisterDisplayEventEXT(\nVkDevice device,\n VkDisplayKHR display,\n const VkDisplayEventInfoEXT* pDisplayEventInfo,\n const VkAllocationCallbacks* pAllocator,\n VkFence* pFence\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDisplayKHR', 'header': 'VkDisplayKHR display\n            ', 'name': 'display'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDisplayEventInfoEXT', 'header': 'const VkDisplayEventInfoEXT* pDisplayEventInfo\n            ', 'name': 'pDisplayEventInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkFence', 'header': 'VkFence* pFence\n        ', 'name': 'pFence'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetSwapchainCounterEXT(\nVkDevice device,\n VkSwapchainKHR swapchain,\n VkSurfaceCounterFlagBitsEXT counter,\n uint64_t* pCounterValue\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSwapchainKHR', 'header': 'VkSwapchainKHR swapchain\n            ', 'name': 'swapchain'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSurfaceCounterFlagBitsEXT', 'header': 'VkSurfaceCounterFlagBitsEXT counter\n            ', 'name': 'counter'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint64_t', 'header': 'uint64_t* pCounterValue\n        ', 'name': 'pCounterValue'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetPhysicalDeviceSurfaceCapabilities2EXT(\nVkPhysicalDevice physicalDevice,\n VkSurfaceKHR surface,\n VkSurfaceCapabilities2EXT* pSurfaceCapabilities\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSurfaceKHR', 'header': 'VkSurfaceKHR surface\n            ', 'name': 'surface'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkSurfaceCapabilities2EXT', 'header': 'VkSurfaceCapabilities2EXT* pSurfaceCapabilities\n        ', 'name': 'pSurfaceCapabilities'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkEnumeratePhysicalDeviceGroups(\nVkInstance instance,\n uint32_t* pPhysicalDeviceGroupCount,\n VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkInstance', 'header': 'VkInstance instance\n            ', 'name': 'instance'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pPhysicalDeviceGroupCount\n            ', 'name': 'pPhysicalDeviceGroupCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pPhysicalDeviceGroupCount'], 'type': 'VkPhysicalDeviceGroupProperties', 'header': 'VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties\n        ', 'name': 'pPhysicalDeviceGroupProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkEnumeratePhysicalDeviceGroupsKHR(\nVkInstance instance,\n uint32_t* pPhysicalDeviceGroupCount,\n VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkInstance', 'header': 'VkInstance instance\n            ', 'name': 'instance'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pPhysicalDeviceGroupCount\n            ', 'name': 'pPhysicalDeviceGroupCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pPhysicalDeviceGroupCount'], 'type': 'VkPhysicalDeviceGroupProperties', 'header': 'VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties\n        ', 'name': 'pPhysicalDeviceGroupProperties'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetDeviceGroupPeerMemoryFeatures(\nVkDevice device,\n uint32_t heapIndex,\n uint32_t localDeviceIndex,\n uint32_t remoteDeviceIndex,\n VkPeerMemoryFeatureFlags* pPeerMemoryFeatures\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t heapIndex\n            ', 'name': 'heapIndex'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t localDeviceIndex\n            ', 'name': 'localDeviceIndex'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t remoteDeviceIndex\n            ', 'name': 'remoteDeviceIndex'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkPeerMemoryFeatureFlags', 'header': 'VkPeerMemoryFeatureFlags* pPeerMemoryFeatures\n        ', 'name': 'pPeerMemoryFeatures'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetDeviceGroupPeerMemoryFeaturesKHR(\nVkDevice device,\n uint32_t heapIndex,\n uint32_t localDeviceIndex,\n uint32_t remoteDeviceIndex,\n VkPeerMemoryFeatureFlags* pPeerMemoryFeatures\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t heapIndex\n            ', 'name': 'heapIndex'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t localDeviceIndex\n            ', 'name': 'localDeviceIndex'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t remoteDeviceIndex\n            ', 'name': 'remoteDeviceIndex'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkPeerMemoryFeatureFlags', 'header': 'VkPeerMemoryFeatureFlags* pPeerMemoryFeatures\n        ', 'name': 'pPeerMemoryFeatures'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkBindBufferMemory2(\nVkDevice device,\n uint32_t bindInfoCount,\n const VkBindBufferMemoryInfo* pBindInfos\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t bindInfoCount\n            ', 'name': 'bindInfoCount'}, {'const': True, 'num_indirection': 1, 'length': ['bindInfoCount'], 'type': 'VkBindBufferMemoryInfo', 'header': 'const VkBindBufferMemoryInfo* pBindInfos\n        ', 'name': 'pBindInfos'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkBindBufferMemory2KHR(\nVkDevice device,\n uint32_t bindInfoCount,\n const VkBindBufferMemoryInfo* pBindInfos\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t bindInfoCount\n            ', 'name': 'bindInfoCount'}, {'const': True, 'num_indirection': 1, 'length': ['bindInfoCount'], 'type': 'VkBindBufferMemoryInfo', 'header': 'const VkBindBufferMemoryInfo* pBindInfos\n        ', 'name': 'pBindInfos'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkBindImageMemory2(\nVkDevice device,\n uint32_t bindInfoCount,\n const VkBindImageMemoryInfo* pBindInfos\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t bindInfoCount\n            ', 'name': 'bindInfoCount'}, {'const': True, 'num_indirection': 1, 'length': ['bindInfoCount'], 'type': 'VkBindImageMemoryInfo', 'header': 'const VkBindImageMemoryInfo* pBindInfos\n        ', 'name': 'pBindInfos'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkBindImageMemory2KHR(\nVkDevice device,\n uint32_t bindInfoCount,\n const VkBindImageMemoryInfo* pBindInfos\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t bindInfoCount\n            ', 'name': 'bindInfoCount'}, {'const': True, 'num_indirection': 1, 'length': ['bindInfoCount'], 'type': 'VkBindImageMemoryInfo', 'header': 'const VkBindImageMemoryInfo* pBindInfos\n        ', 'name': 'pBindInfos'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetDeviceMask(\nVkCommandBuffer commandBuffer,\n uint32_t deviceMask\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t deviceMask\n        ', 'name': 'deviceMask'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetDeviceMaskKHR(\nVkCommandBuffer commandBuffer,\n uint32_t deviceMask\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t deviceMask\n        ', 'name': 'deviceMask'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetDeviceGroupPresentCapabilitiesKHR(\nVkDevice device,\n VkDeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkDeviceGroupPresentCapabilitiesKHR', 'header': 'VkDeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities\n        ', 'name': 'pDeviceGroupPresentCapabilities'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetDeviceGroupSurfacePresentModesKHR(\nVkDevice device,\n VkSurfaceKHR surface,\n VkDeviceGroupPresentModeFlagsKHR* pModes\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSurfaceKHR', 'header': 'VkSurfaceKHR surface\n            ', 'name': 'surface'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkDeviceGroupPresentModeFlagsKHR', 'header': 'VkDeviceGroupPresentModeFlagsKHR* pModes\n        ', 'name': 'pModes'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkAcquireNextImage2KHR(\nVkDevice device,\n const VkAcquireNextImageInfoKHR* pAcquireInfo,\n uint32_t* pImageIndex\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAcquireNextImageInfoKHR', 'header': 'const VkAcquireNextImageInfoKHR* pAcquireInfo\n            ', 'name': 'pAcquireInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pImageIndex\n        ', 'name': 'pImageIndex'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdDispatchBase(\nVkCommandBuffer commandBuffer,\n uint32_t baseGroupX,\n uint32_t baseGroupY,\n uint32_t baseGroupZ,\n uint32_t groupCountX,\n uint32_t groupCountY,\n uint32_t groupCountZ\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t baseGroupX\n            ', 'name': 'baseGroupX'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t baseGroupY\n            ', 'name': 'baseGroupY'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t baseGroupZ\n            ', 'name': 'baseGroupZ'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t groupCountX\n            ', 'name': 'groupCountX'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t groupCountY\n            ', 'name': 'groupCountY'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t groupCountZ\n        ', 'name': 'groupCountZ'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdDispatchBaseKHR(\nVkCommandBuffer commandBuffer,\n uint32_t baseGroupX,\n uint32_t baseGroupY,\n uint32_t baseGroupZ,\n uint32_t groupCountX,\n uint32_t groupCountY,\n uint32_t groupCountZ\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t baseGroupX\n            ', 'name': 'baseGroupX'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t baseGroupY\n            ', 'name': 'baseGroupY'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t baseGroupZ\n            ', 'name': 'baseGroupZ'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t groupCountX\n            ', 'name': 'groupCountX'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t groupCountY\n            ', 'name': 'groupCountY'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t groupCountZ\n        ', 'name': 'groupCountZ'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetPhysicalDevicePresentRectanglesKHR(\nVkPhysicalDevice physicalDevice,\n VkSurfaceKHR surface,\n uint32_t* pRectCount,\n VkRect2D* pRects\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSurfaceKHR', 'header': 'VkSurfaceKHR surface\n            ', 'name': 'surface'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pRectCount\n            ', 'name': 'pRectCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pRectCount'], 'type': 'VkRect2D', 'header': 'VkRect2D* pRects\n        ', 'name': 'pRects'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreateDescriptorUpdateTemplate(\nVkDevice device,\n const VkDescriptorUpdateTemplateCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDescriptorUpdateTemplateCreateInfo', 'header': 'const VkDescriptorUpdateTemplateCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkDescriptorUpdateTemplate', 'header': 'VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate\n        ', 'name': 'pDescriptorUpdateTemplate'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreateDescriptorUpdateTemplateKHR(\nVkDevice device,\n const VkDescriptorUpdateTemplateCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDescriptorUpdateTemplateCreateInfo', 'header': 'const VkDescriptorUpdateTemplateCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkDescriptorUpdateTemplate', 'header': 'VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate\n        ', 'name': 'pDescriptorUpdateTemplate'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkDestroyDescriptorUpdateTemplate(\nVkDevice device,\n VkDescriptorUpdateTemplate descriptorUpdateTemplate,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDescriptorUpdateTemplate', 'header': 'VkDescriptorUpdateTemplate descriptorUpdateTemplate\n            ', 'name': 'descriptorUpdateTemplate'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkDestroyDescriptorUpdateTemplateKHR(\nVkDevice device,\n VkDescriptorUpdateTemplate descriptorUpdateTemplate,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDescriptorUpdateTemplate', 'header': 'VkDescriptorUpdateTemplate descriptorUpdateTemplate\n            ', 'name': 'descriptorUpdateTemplate'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkUpdateDescriptorSetWithTemplate(\nVkDevice device,\n VkDescriptorSet descriptorSet,\n VkDescriptorUpdateTemplate descriptorUpdateTemplate,\n const void* pData\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDescriptorSet', 'header': 'VkDescriptorSet descriptorSet\n            ', 'name': 'descriptorSet'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDescriptorUpdateTemplate', 'header': 'VkDescriptorUpdateTemplate descriptorUpdateTemplate\n            ', 'name': 'descriptorUpdateTemplate'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'void', 'header': 'const void* pData\n        ', 'name': 'pData'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkUpdateDescriptorSetWithTemplateKHR(\nVkDevice device,\n VkDescriptorSet descriptorSet,\n VkDescriptorUpdateTemplate descriptorUpdateTemplate,\n const void* pData\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDescriptorSet', 'header': 'VkDescriptorSet descriptorSet\n            ', 'name': 'descriptorSet'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDescriptorUpdateTemplate', 'header': 'VkDescriptorUpdateTemplate descriptorUpdateTemplate\n            ', 'name': 'descriptorUpdateTemplate'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'void', 'header': 'const void* pData\n        ', 'name': 'pData'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdPushDescriptorSetWithTemplateKHR(\nVkCommandBuffer commandBuffer,\n VkDescriptorUpdateTemplate descriptorUpdateTemplate,\n VkPipelineLayout layout,\n uint32_t set,\n const void* pData\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDescriptorUpdateTemplate', 'header': 'VkDescriptorUpdateTemplate descriptorUpdateTemplate\n            ', 'name': 'descriptorUpdateTemplate'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineLayout', 'header': 'VkPipelineLayout layout\n            ', 'name': 'layout'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t set\n            ', 'name': 'set'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'void', 'header': 'const void* pData\n        ', 'name': 'pData'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkSetHdrMetadataEXT(\nVkDevice device,\n uint32_t swapchainCount,\n const VkSwapchainKHR* pSwapchains,\n const VkHdrMetadataEXT* pMetadata\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t swapchainCount\n            ', 'name': 'swapchainCount'}, {'const': True, 'num_indirection': 1, 'length': ['swapchainCount'], 'type': 'VkSwapchainKHR', 'header': 'const VkSwapchainKHR* pSwapchains\n            ', 'name': 'pSwapchains'}, {'const': True, 'num_indirection': 1, 'length': ['swapchainCount'], 'type': 'VkHdrMetadataEXT', 'header': 'const VkHdrMetadataEXT* pMetadata\n        ', 'name': 'pMetadata'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetSwapchainStatusKHR(\nVkDevice device,\n VkSwapchainKHR swapchain\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSwapchainKHR', 'header': 'VkSwapchainKHR swapchain\n        ', 'name': 'swapchain'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetRefreshCycleDurationGOOGLE(\nVkDevice device,\n VkSwapchainKHR swapchain,\n VkRefreshCycleDurationGOOGLE* pDisplayTimingProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSwapchainKHR', 'header': 'VkSwapchainKHR swapchain\n            ', 'name': 'swapchain'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkRefreshCycleDurationGOOGLE', 'header': 'VkRefreshCycleDurationGOOGLE* pDisplayTimingProperties\n        ', 'name': 'pDisplayTimingProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetPastPresentationTimingGOOGLE(\nVkDevice device,\n VkSwapchainKHR swapchain,\n uint32_t* pPresentationTimingCount,\n VkPastPresentationTimingGOOGLE* pPresentationTimings\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSwapchainKHR', 'header': 'VkSwapchainKHR swapchain\n            ', 'name': 'swapchain'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pPresentationTimingCount\n            ', 'name': 'pPresentationTimingCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pPresentationTimingCount'], 'type': 'VkPastPresentationTimingGOOGLE', 'header': 'VkPastPresentationTimingGOOGLE* pPresentationTimings\n        ', 'name': 'pPresentationTimings'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetViewportWScalingNV(\nVkCommandBuffer commandBuffer,\n uint32_t firstViewport,\n uint32_t viewportCount,\n const VkViewportWScalingNV* pViewportWScalings\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstViewport\n            ', 'name': 'firstViewport'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t viewportCount\n            ', 'name': 'viewportCount'}, {'const': True, 'num_indirection': 1, 'length': ['viewportCount'], 'type': 'VkViewportWScalingNV', 'header': 'const VkViewportWScalingNV* pViewportWScalings\n        ', 'name': 'pViewportWScalings'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetDiscardRectangleEXT(\nVkCommandBuffer commandBuffer,\n uint32_t firstDiscardRectangle,\n uint32_t discardRectangleCount,\n const VkRect2D* pDiscardRectangles\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstDiscardRectangle\n            ', 'name': 'firstDiscardRectangle'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t discardRectangleCount\n            ', 'name': 'discardRectangleCount'}, {'const': True, 'num_indirection': 1, 'length': ['discardRectangleCount'], 'type': 'VkRect2D', 'header': 'const VkRect2D* pDiscardRectangles\n        ', 'name': 'pDiscardRectangles'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetDiscardRectangleEnableEXT(\nVkCommandBuffer commandBuffer,\n VkBool32 discardRectangleEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 discardRectangleEnable\n        ', 'name': 'discardRectangleEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetDiscardRectangleModeEXT(\nVkCommandBuffer commandBuffer,\n VkDiscardRectangleModeEXT discardRectangleMode\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDiscardRectangleModeEXT', 'header': 'VkDiscardRectangleModeEXT discardRectangleMode\n        ', 'name': 'discardRectangleMode'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetSampleLocationsEXT(\nVkCommandBuffer commandBuffer,\n const VkSampleLocationsInfoEXT* pSampleLocationsInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkSampleLocationsInfoEXT', 'header': 'const VkSampleLocationsInfoEXT* pSampleLocationsInfo\n        ', 'name': 'pSampleLocationsInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetPhysicalDeviceMultisamplePropertiesEXT(\nVkPhysicalDevice physicalDevice,\n VkSampleCountFlagBits samples,\n VkMultisamplePropertiesEXT* pMultisampleProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSampleCountFlagBits', 'header': 'VkSampleCountFlagBits samples\n            ', 'name': 'samples'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkMultisamplePropertiesEXT', 'header': 'VkMultisamplePropertiesEXT* pMultisampleProperties\n        ', 'name': 'pMultisampleProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetPhysicalDeviceSurfaceCapabilities2KHR(\nVkPhysicalDevice physicalDevice,\n const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo,\n VkSurfaceCapabilities2KHR* pSurfaceCapabilities\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPhysicalDeviceSurfaceInfo2KHR', 'header': 'const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo\n            ', 'name': 'pSurfaceInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkSurfaceCapabilities2KHR', 'header': 'VkSurfaceCapabilities2KHR* pSurfaceCapabilities\n        ', 'name': 'pSurfaceCapabilities'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetPhysicalDeviceSurfaceFormats2KHR(\nVkPhysicalDevice physicalDevice,\n const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo,\n uint32_t* pSurfaceFormatCount,\n VkSurfaceFormat2KHR* pSurfaceFormats\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPhysicalDeviceSurfaceInfo2KHR', 'header': 'const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo\n            ', 'name': 'pSurfaceInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pSurfaceFormatCount\n            ', 'name': 'pSurfaceFormatCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pSurfaceFormatCount'], 'type': 'VkSurfaceFormat2KHR', 'header': 'VkSurfaceFormat2KHR* pSurfaceFormats\n        ', 'name': 'pSurfaceFormats'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetPhysicalDeviceDisplayProperties2KHR(\nVkPhysicalDevice physicalDevice,\n uint32_t* pPropertyCount,\n VkDisplayProperties2KHR* pProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pPropertyCount\n            ', 'name': 'pPropertyCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pPropertyCount'], 'type': 'VkDisplayProperties2KHR', 'header': 'VkDisplayProperties2KHR* pProperties\n        ', 'name': 'pProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetPhysicalDeviceDisplayPlaneProperties2KHR(\nVkPhysicalDevice physicalDevice,\n uint32_t* pPropertyCount,\n VkDisplayPlaneProperties2KHR* pProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pPropertyCount\n            ', 'name': 'pPropertyCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pPropertyCount'], 'type': 'VkDisplayPlaneProperties2KHR', 'header': 'VkDisplayPlaneProperties2KHR* pProperties\n        ', 'name': 'pProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetDisplayModeProperties2KHR(\nVkPhysicalDevice physicalDevice,\n VkDisplayKHR display,\n uint32_t* pPropertyCount,\n VkDisplayModeProperties2KHR* pProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDisplayKHR', 'header': 'VkDisplayKHR display\n            ', 'name': 'display'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pPropertyCount\n            ', 'name': 'pPropertyCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pPropertyCount'], 'type': 'VkDisplayModeProperties2KHR', 'header': 'VkDisplayModeProperties2KHR* pProperties\n        ', 'name': 'pProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetDisplayPlaneCapabilities2KHR(\nVkPhysicalDevice physicalDevice,\n const VkDisplayPlaneInfo2KHR* pDisplayPlaneInfo,\n VkDisplayPlaneCapabilities2KHR* pCapabilities\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDisplayPlaneInfo2KHR', 'header': 'const VkDisplayPlaneInfo2KHR* pDisplayPlaneInfo\n            ', 'name': 'pDisplayPlaneInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkDisplayPlaneCapabilities2KHR', 'header': 'VkDisplayPlaneCapabilities2KHR* pCapabilities\n        ', 'name': 'pCapabilities'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetBufferMemoryRequirements2(\nVkDevice device,\n const VkBufferMemoryRequirementsInfo2* pInfo,\n VkMemoryRequirements2* pMemoryRequirements\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkBufferMemoryRequirementsInfo2', 'header': 'const VkBufferMemoryRequirementsInfo2* pInfo\n            ', 'name': 'pInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkMemoryRequirements2', 'header': 'VkMemoryRequirements2* pMemoryRequirements\n        ', 'name': 'pMemoryRequirements'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetBufferMemoryRequirements2KHR(\nVkDevice device,\n const VkBufferMemoryRequirementsInfo2* pInfo,\n VkMemoryRequirements2* pMemoryRequirements\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkBufferMemoryRequirementsInfo2', 'header': 'const VkBufferMemoryRequirementsInfo2* pInfo\n            ', 'name': 'pInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkMemoryRequirements2', 'header': 'VkMemoryRequirements2* pMemoryRequirements\n        ', 'name': 'pMemoryRequirements'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetImageMemoryRequirements2(\nVkDevice device,\n const VkImageMemoryRequirementsInfo2* pInfo,\n VkMemoryRequirements2* pMemoryRequirements\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkImageMemoryRequirementsInfo2', 'header': 'const VkImageMemoryRequirementsInfo2* pInfo\n            ', 'name': 'pInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkMemoryRequirements2', 'header': 'VkMemoryRequirements2* pMemoryRequirements\n        ', 'name': 'pMemoryRequirements'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetImageMemoryRequirements2KHR(\nVkDevice device,\n const VkImageMemoryRequirementsInfo2* pInfo,\n VkMemoryRequirements2* pMemoryRequirements\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkImageMemoryRequirementsInfo2', 'header': 'const VkImageMemoryRequirementsInfo2* pInfo\n            ', 'name': 'pInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkMemoryRequirements2', 'header': 'VkMemoryRequirements2* pMemoryRequirements\n        ', 'name': 'pMemoryRequirements'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetImageSparseMemoryRequirements2(\nVkDevice device,\n const VkImageSparseMemoryRequirementsInfo2* pInfo,\n uint32_t* pSparseMemoryRequirementCount,\n VkSparseImageMemoryRequirements2* pSparseMemoryRequirements\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkImageSparseMemoryRequirementsInfo2', 'header': 'const VkImageSparseMemoryRequirementsInfo2* pInfo\n            ', 'name': 'pInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pSparseMemoryRequirementCount\n            ', 'name': 'pSparseMemoryRequirementCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pSparseMemoryRequirementCount'], 'type': 'VkSparseImageMemoryRequirements2', 'header': 'VkSparseImageMemoryRequirements2* pSparseMemoryRequirements\n        ', 'name': 'pSparseMemoryRequirements'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetImageSparseMemoryRequirements2KHR(\nVkDevice device,\n const VkImageSparseMemoryRequirementsInfo2* pInfo,\n uint32_t* pSparseMemoryRequirementCount,\n VkSparseImageMemoryRequirements2* pSparseMemoryRequirements\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkImageSparseMemoryRequirementsInfo2', 'header': 'const VkImageSparseMemoryRequirementsInfo2* pInfo\n            ', 'name': 'pInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pSparseMemoryRequirementCount\n            ', 'name': 'pSparseMemoryRequirementCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pSparseMemoryRequirementCount'], 'type': 'VkSparseImageMemoryRequirements2', 'header': 'VkSparseImageMemoryRequirements2* pSparseMemoryRequirements\n        ', 'name': 'pSparseMemoryRequirements'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetDeviceBufferMemoryRequirements(\nVkDevice device,\n const VkDeviceBufferMemoryRequirements* pInfo,\n VkMemoryRequirements2* pMemoryRequirements\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDeviceBufferMemoryRequirements', 'header': 'const VkDeviceBufferMemoryRequirements* pInfo\n            ', 'name': 'pInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkMemoryRequirements2', 'header': 'VkMemoryRequirements2* pMemoryRequirements\n        ', 'name': 'pMemoryRequirements'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetDeviceBufferMemoryRequirementsKHR(\nVkDevice device,\n const VkDeviceBufferMemoryRequirements* pInfo,\n VkMemoryRequirements2* pMemoryRequirements\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDeviceBufferMemoryRequirements', 'header': 'const VkDeviceBufferMemoryRequirements* pInfo\n            ', 'name': 'pInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkMemoryRequirements2', 'header': 'VkMemoryRequirements2* pMemoryRequirements\n        ', 'name': 'pMemoryRequirements'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetDeviceImageMemoryRequirements(\nVkDevice device,\n const VkDeviceImageMemoryRequirements* pInfo,\n VkMemoryRequirements2* pMemoryRequirements\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDeviceImageMemoryRequirements', 'header': 'const VkDeviceImageMemoryRequirements* pInfo\n            ', 'name': 'pInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkMemoryRequirements2', 'header': 'VkMemoryRequirements2* pMemoryRequirements\n        ', 'name': 'pMemoryRequirements'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetDeviceImageMemoryRequirementsKHR(\nVkDevice device,\n const VkDeviceImageMemoryRequirements* pInfo,\n VkMemoryRequirements2* pMemoryRequirements\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDeviceImageMemoryRequirements', 'header': 'const VkDeviceImageMemoryRequirements* pInfo\n            ', 'name': 'pInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkMemoryRequirements2', 'header': 'VkMemoryRequirements2* pMemoryRequirements\n        ', 'name': 'pMemoryRequirements'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetDeviceImageSparseMemoryRequirements(\nVkDevice device,\n const VkDeviceImageMemoryRequirements* pInfo,\n uint32_t* pSparseMemoryRequirementCount,\n VkSparseImageMemoryRequirements2* pSparseMemoryRequirements\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDeviceImageMemoryRequirements', 'header': 'const VkDeviceImageMemoryRequirements* pInfo\n            ', 'name': 'pInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pSparseMemoryRequirementCount\n            ', 'name': 'pSparseMemoryRequirementCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pSparseMemoryRequirementCount'], 'type': 'VkSparseImageMemoryRequirements2', 'header': 'VkSparseImageMemoryRequirements2* pSparseMemoryRequirements\n        ', 'name': 'pSparseMemoryRequirements'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetDeviceImageSparseMemoryRequirementsKHR(\nVkDevice device,\n const VkDeviceImageMemoryRequirements* pInfo,\n uint32_t* pSparseMemoryRequirementCount,\n VkSparseImageMemoryRequirements2* pSparseMemoryRequirements\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDeviceImageMemoryRequirements', 'header': 'const VkDeviceImageMemoryRequirements* pInfo\n            ', 'name': 'pInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pSparseMemoryRequirementCount\n            ', 'name': 'pSparseMemoryRequirementCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pSparseMemoryRequirementCount'], 'type': 'VkSparseImageMemoryRequirements2', 'header': 'VkSparseImageMemoryRequirements2* pSparseMemoryRequirements\n        ', 'name': 'pSparseMemoryRequirements'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreateSamplerYcbcrConversion(\nVkDevice device,\n const VkSamplerYcbcrConversionCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkSamplerYcbcrConversion* pYcbcrConversion\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkSamplerYcbcrConversionCreateInfo', 'header': 'const VkSamplerYcbcrConversionCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkSamplerYcbcrConversion', 'header': 'VkSamplerYcbcrConversion* pYcbcrConversion\n        ', 'name': 'pYcbcrConversion'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreateSamplerYcbcrConversionKHR(\nVkDevice device,\n const VkSamplerYcbcrConversionCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkSamplerYcbcrConversion* pYcbcrConversion\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkSamplerYcbcrConversionCreateInfo', 'header': 'const VkSamplerYcbcrConversionCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkSamplerYcbcrConversion', 'header': 'VkSamplerYcbcrConversion* pYcbcrConversion\n        ', 'name': 'pYcbcrConversion'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkDestroySamplerYcbcrConversion(\nVkDevice device,\n VkSamplerYcbcrConversion ycbcrConversion,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSamplerYcbcrConversion', 'header': 'VkSamplerYcbcrConversion ycbcrConversion\n            ', 'name': 'ycbcrConversion'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkDestroySamplerYcbcrConversionKHR(\nVkDevice device,\n VkSamplerYcbcrConversion ycbcrConversion,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSamplerYcbcrConversion', 'header': 'VkSamplerYcbcrConversion ycbcrConversion\n            ', 'name': 'ycbcrConversion'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetDeviceQueue2(\nVkDevice device,\n const VkDeviceQueueInfo2* pQueueInfo,\n VkQueue* pQueue\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDeviceQueueInfo2', 'header': 'const VkDeviceQueueInfo2* pQueueInfo\n            ', 'name': 'pQueueInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkQueue', 'header': 'VkQueue* pQueue\n        ', 'name': 'pQueue'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreateValidationCacheEXT(\nVkDevice device,\n const VkValidationCacheCreateInfoEXT* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkValidationCacheEXT* pValidationCache\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkValidationCacheCreateInfoEXT', 'header': 'const VkValidationCacheCreateInfoEXT* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkValidationCacheEXT', 'header': 'VkValidationCacheEXT* pValidationCache\n        ', 'name': 'pValidationCache'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkDestroyValidationCacheEXT(\nVkDevice device,\n VkValidationCacheEXT validationCache,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkValidationCacheEXT', 'header': 'VkValidationCacheEXT validationCache\n            ', 'name': 'validationCache'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetValidationCacheDataEXT(\nVkDevice device,\n VkValidationCacheEXT validationCache,\n size_t* pDataSize,\n void* pData\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkValidationCacheEXT', 'header': 'VkValidationCacheEXT validationCache\n            ', 'name': 'validationCache'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'size_t', 'header': 'size_t* pDataSize\n            ', 'name': 'pDataSize'}, {'const': False, 'num_indirection': 1, 'length': ['*pDataSize'], 'type': 'void', 'header': 'void* pData\n        ', 'name': 'pData'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkMergeValidationCachesEXT(\nVkDevice device,\n VkValidationCacheEXT dstCache,\n uint32_t srcCacheCount,\n const VkValidationCacheEXT* pSrcCaches\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkValidationCacheEXT', 'header': 'VkValidationCacheEXT dstCache\n            ', 'name': 'dstCache'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t srcCacheCount\n            ', 'name': 'srcCacheCount'}, {'const': True, 'num_indirection': 1, 'length': ['srcCacheCount'], 'type': 'VkValidationCacheEXT', 'header': 'const VkValidationCacheEXT* pSrcCaches\n        ', 'name': 'pSrcCaches'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetDescriptorSetLayoutSupport(\nVkDevice device,\n const VkDescriptorSetLayoutCreateInfo* pCreateInfo,\n VkDescriptorSetLayoutSupport* pSupport\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDescriptorSetLayoutCreateInfo', 'header': 'const VkDescriptorSetLayoutCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkDescriptorSetLayoutSupport', 'header': 'VkDescriptorSetLayoutSupport* pSupport\n        ', 'name': 'pSupport'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetDescriptorSetLayoutSupportKHR(\nVkDevice device,\n const VkDescriptorSetLayoutCreateInfo* pCreateInfo,\n VkDescriptorSetLayoutSupport* pSupport\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDescriptorSetLayoutCreateInfo', 'header': 'const VkDescriptorSetLayoutCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkDescriptorSetLayoutSupport', 'header': 'VkDescriptorSetLayoutSupport* pSupport\n        ', 'name': 'pSupport'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetShaderInfoAMD(\nVkDevice device,\n VkPipeline pipeline,\n VkShaderStageFlagBits shaderStage,\n VkShaderInfoTypeAMD infoType,\n size_t* pInfoSize,\n void* pInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipeline', 'header': 'VkPipeline pipeline\n            ', 'name': 'pipeline'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkShaderStageFlagBits', 'header': 'VkShaderStageFlagBits shaderStage\n            ', 'name': 'shaderStage'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkShaderInfoTypeAMD', 'header': 'VkShaderInfoTypeAMD infoType\n            ', 'name': 'infoType'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'size_t', 'header': 'size_t* pInfoSize\n            ', 'name': 'pInfoSize'}, {'const': False, 'num_indirection': 1, 'length': ['*pInfoSize'], 'type': 'void', 'header': 'void* pInfo\n        ', 'name': 'pInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkSetLocalDimmingAMD(\nVkDevice device,\n VkSwapchainKHR swapChain,\n VkBool32 localDimmingEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSwapchainKHR', 'header': 'VkSwapchainKHR swapChain\n            ', 'name': 'swapChain'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 localDimmingEnable\n        ', 'name': 'localDimmingEnable'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(\nVkPhysicalDevice physicalDevice,\n uint32_t* pTimeDomainCount,\n VkTimeDomainEXT* pTimeDomains\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pTimeDomainCount\n            ', 'name': 'pTimeDomainCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pTimeDomainCount'], 'type': 'VkTimeDomainEXT', 'header': 'VkTimeDomainEXT* pTimeDomains\n        ', 'name': 'pTimeDomains'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetCalibratedTimestampsEXT(\nVkDevice device,\n uint32_t timestampCount,\n const VkCalibratedTimestampInfoEXT* pTimestampInfos,\n uint64_t* pTimestamps,\n uint64_t* pMaxDeviation\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t timestampCount\n            ', 'name': 'timestampCount'}, {'const': True, 'num_indirection': 1, 'length': ['timestampCount'], 'type': 'VkCalibratedTimestampInfoEXT', 'header': 'const VkCalibratedTimestampInfoEXT* pTimestampInfos\n            ', 'name': 'pTimestampInfos'}, {'const': False, 'num_indirection': 1, 'length': ['timestampCount'], 'type': 'uint64_t', 'header': 'uint64_t* pTimestamps\n            ', 'name': 'pTimestamps'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint64_t', 'header': 'uint64_t* pMaxDeviation\n        ', 'name': 'pMaxDeviation'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkSetDebugUtilsObjectNameEXT(\nVkDevice device,\n const VkDebugUtilsObjectNameInfoEXT* pNameInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDebugUtilsObjectNameInfoEXT', 'header': 'const VkDebugUtilsObjectNameInfoEXT* pNameInfo\n        ', 'name': 'pNameInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkSetDebugUtilsObjectTagEXT(\nVkDevice device,\n const VkDebugUtilsObjectTagInfoEXT* pTagInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDebugUtilsObjectTagInfoEXT', 'header': 'const VkDebugUtilsObjectTagInfoEXT* pTagInfo\n        ', 'name': 'pTagInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkQueueBeginDebugUtilsLabelEXT(\nVkQueue queue,\n const VkDebugUtilsLabelEXT* pLabelInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueue', 'header': 'VkQueue queue\n            ', 'name': 'queue'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDebugUtilsLabelEXT', 'header': 'const VkDebugUtilsLabelEXT* pLabelInfo\n        ', 'name': 'pLabelInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkQueueEndDebugUtilsLabelEXT(\nVkQueue queue\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueue', 'header': 'VkQueue queue\n        ', 'name': 'queue'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkQueueInsertDebugUtilsLabelEXT(\nVkQueue queue,\n const VkDebugUtilsLabelEXT* pLabelInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueue', 'header': 'VkQueue queue\n            ', 'name': 'queue'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDebugUtilsLabelEXT', 'header': 'const VkDebugUtilsLabelEXT* pLabelInfo\n        ', 'name': 'pLabelInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdBeginDebugUtilsLabelEXT(\nVkCommandBuffer commandBuffer,\n const VkDebugUtilsLabelEXT* pLabelInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDebugUtilsLabelEXT', 'header': 'const VkDebugUtilsLabelEXT* pLabelInfo\n        ', 'name': 'pLabelInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdEndDebugUtilsLabelEXT(\nVkCommandBuffer commandBuffer\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n        ', 'name': 'commandBuffer'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdInsertDebugUtilsLabelEXT(\nVkCommandBuffer commandBuffer,\n const VkDebugUtilsLabelEXT* pLabelInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDebugUtilsLabelEXT', 'header': 'const VkDebugUtilsLabelEXT* pLabelInfo\n        ', 'name': 'pLabelInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreateDebugUtilsMessengerEXT(\nVkInstance instance,\n const VkDebugUtilsMessengerCreateInfoEXT* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkDebugUtilsMessengerEXT* pMessenger\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkInstance', 'header': 'VkInstance instance\n            ', 'name': 'instance'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDebugUtilsMessengerCreateInfoEXT', 'header': 'const VkDebugUtilsMessengerCreateInfoEXT* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkDebugUtilsMessengerEXT', 'header': 'VkDebugUtilsMessengerEXT* pMessenger\n        ', 'name': 'pMessenger'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkDestroyDebugUtilsMessengerEXT(\nVkInstance instance,\n VkDebugUtilsMessengerEXT messenger,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkInstance', 'header': 'VkInstance instance\n            ', 'name': 'instance'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDebugUtilsMessengerEXT', 'header': 'VkDebugUtilsMessengerEXT messenger\n            ', 'name': 'messenger'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkSubmitDebugUtilsMessageEXT(\nVkInstance instance,\n VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity,\n VkDebugUtilsMessageTypeFlagsEXT messageTypes,\n const VkDebugUtilsMessengerCallbackDataEXT* pCallbackData\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkInstance', 'header': 'VkInstance instance\n            ', 'name': 'instance'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDebugUtilsMessageSeverityFlagBitsEXT', 'header': 'VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity\n            ', 'name': 'messageSeverity'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDebugUtilsMessageTypeFlagsEXT', 'header': 'VkDebugUtilsMessageTypeFlagsEXT messageTypes\n            ', 'name': 'messageTypes'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDebugUtilsMessengerCallbackDataEXT', 'header': 'const VkDebugUtilsMessengerCallbackDataEXT* pCallbackData\n        ', 'name': 'pCallbackData'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetMemoryHostPointerPropertiesEXT(\nVkDevice device,\n VkExternalMemoryHandleTypeFlagBits handleType,\n const void* pHostPointer,\n VkMemoryHostPointerPropertiesEXT* pMemoryHostPointerProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkExternalMemoryHandleTypeFlagBits', 'header': 'VkExternalMemoryHandleTypeFlagBits handleType\n            ', 'name': 'handleType'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'void', 'header': 'const void* pHostPointer\n            ', 'name': 'pHostPointer'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkMemoryHostPointerPropertiesEXT', 'header': 'VkMemoryHostPointerPropertiesEXT* pMemoryHostPointerProperties\n        ', 'name': 'pMemoryHostPointerProperties'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdWriteBufferMarkerAMD(\nVkCommandBuffer commandBuffer,\n VkPipelineStageFlagBits pipelineStage,\n VkBuffer dstBuffer,\n VkDeviceSize dstOffset,\n uint32_t marker\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineStageFlagBits', 'header': 'VkPipelineStageFlagBits pipelineStage\n            ', 'name': 'pipelineStage'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer dstBuffer\n            ', 'name': 'dstBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize dstOffset\n            ', 'name': 'dstOffset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t marker\n        ', 'name': 'marker'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreateRenderPass2(\nVkDevice device,\n const VkRenderPassCreateInfo2* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkRenderPass* pRenderPass\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkRenderPassCreateInfo2', 'header': 'const VkRenderPassCreateInfo2* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkRenderPass', 'header': 'VkRenderPass* pRenderPass\n        ', 'name': 'pRenderPass'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreateRenderPass2KHR(\nVkDevice device,\n const VkRenderPassCreateInfo2* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkRenderPass* pRenderPass\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkRenderPassCreateInfo2', 'header': 'const VkRenderPassCreateInfo2* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkRenderPass', 'header': 'VkRenderPass* pRenderPass\n        ', 'name': 'pRenderPass'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdBeginRenderPass2(\nVkCommandBuffer commandBuffer,\n const VkRenderPassBeginInfo*      pRenderPassBegin,\n const VkSubpassBeginInfo*      pSubpassBeginInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkRenderPassBeginInfo', 'header': 'const VkRenderPassBeginInfo*      pRenderPassBegin\n            ', 'name': 'pRenderPassBegin'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkSubpassBeginInfo', 'header': 'const VkSubpassBeginInfo*      pSubpassBeginInfo\n        ', 'name': 'pSubpassBeginInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdBeginRenderPass2KHR(\nVkCommandBuffer commandBuffer,\n const VkRenderPassBeginInfo*      pRenderPassBegin,\n const VkSubpassBeginInfo*      pSubpassBeginInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkRenderPassBeginInfo', 'header': 'const VkRenderPassBeginInfo*      pRenderPassBegin\n            ', 'name': 'pRenderPassBegin'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkSubpassBeginInfo', 'header': 'const VkSubpassBeginInfo*      pSubpassBeginInfo\n        ', 'name': 'pSubpassBeginInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdNextSubpass2(\nVkCommandBuffer commandBuffer,\n const VkSubpassBeginInfo*      pSubpassBeginInfo,\n const VkSubpassEndInfo*        pSubpassEndInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkSubpassBeginInfo', 'header': 'const VkSubpassBeginInfo*      pSubpassBeginInfo\n            ', 'name': 'pSubpassBeginInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkSubpassEndInfo', 'header': 'const VkSubpassEndInfo*        pSubpassEndInfo\n        ', 'name': 'pSubpassEndInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdNextSubpass2KHR(\nVkCommandBuffer commandBuffer,\n const VkSubpassBeginInfo*      pSubpassBeginInfo,\n const VkSubpassEndInfo*        pSubpassEndInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkSubpassBeginInfo', 'header': 'const VkSubpassBeginInfo*      pSubpassBeginInfo\n            ', 'name': 'pSubpassBeginInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkSubpassEndInfo', 'header': 'const VkSubpassEndInfo*        pSubpassEndInfo\n        ', 'name': 'pSubpassEndInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdEndRenderPass2(\nVkCommandBuffer commandBuffer,\n const VkSubpassEndInfo*        pSubpassEndInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkSubpassEndInfo', 'header': 'const VkSubpassEndInfo*        pSubpassEndInfo\n        ', 'name': 'pSubpassEndInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdEndRenderPass2KHR(\nVkCommandBuffer commandBuffer,\n const VkSubpassEndInfo*        pSubpassEndInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkSubpassEndInfo', 'header': 'const VkSubpassEndInfo*        pSubpassEndInfo\n        ', 'name': 'pSubpassEndInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetSemaphoreCounterValue(\nVkDevice device,\n VkSemaphore semaphore,\n uint64_t* pValue\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSemaphore', 'header': 'VkSemaphore semaphore\n            ', 'name': 'semaphore'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint64_t', 'header': 'uint64_t* pValue\n        ', 'name': 'pValue'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetSemaphoreCounterValueKHR(\nVkDevice device,\n VkSemaphore semaphore,\n uint64_t* pValue\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSemaphore', 'header': 'VkSemaphore semaphore\n            ', 'name': 'semaphore'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint64_t', 'header': 'uint64_t* pValue\n        ', 'name': 'pValue'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkWaitSemaphores(\nVkDevice device,\n const VkSemaphoreWaitInfo* pWaitInfo,\n uint64_t timeout\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkSemaphoreWaitInfo', 'header': 'const VkSemaphoreWaitInfo* pWaitInfo\n            ', 'name': 'pWaitInfo'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint64_t', 'header': 'uint64_t timeout\n        ', 'name': 'timeout'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkWaitSemaphoresKHR(\nVkDevice device,\n const VkSemaphoreWaitInfo* pWaitInfo,\n uint64_t timeout\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkSemaphoreWaitInfo', 'header': 'const VkSemaphoreWaitInfo* pWaitInfo\n            ', 'name': 'pWaitInfo'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint64_t', 'header': 'uint64_t timeout\n        ', 'name': 'timeout'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkSignalSemaphore(\nVkDevice device,\n const VkSemaphoreSignalInfo* pSignalInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkSemaphoreSignalInfo', 'header': 'const VkSemaphoreSignalInfo* pSignalInfo\n        ', 'name': 'pSignalInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkSignalSemaphoreKHR(\nVkDevice device,\n const VkSemaphoreSignalInfo* pSignalInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkSemaphoreSignalInfo', 'header': 'const VkSemaphoreSignalInfo* pSignalInfo\n        ', 'name': 'pSignalInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdDrawIndirectCount(\nVkCommandBuffer commandBuffer,\n VkBuffer buffer,\n VkDeviceSize offset,\n VkBuffer countBuffer,\n VkDeviceSize countBufferOffset,\n uint32_t maxDrawCount,\n uint32_t stride\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer buffer\n            ', 'name': 'buffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize offset\n            ', 'name': 'offset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer countBuffer\n            ', 'name': 'countBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize countBufferOffset\n            ', 'name': 'countBufferOffset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t maxDrawCount\n            ', 'name': 'maxDrawCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t stride\n        ', 'name': 'stride'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdDrawIndirectCountKHR(\nVkCommandBuffer commandBuffer,\n VkBuffer buffer,\n VkDeviceSize offset,\n VkBuffer countBuffer,\n VkDeviceSize countBufferOffset,\n uint32_t maxDrawCount,\n uint32_t stride\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer buffer\n            ', 'name': 'buffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize offset\n            ', 'name': 'offset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer countBuffer\n            ', 'name': 'countBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize countBufferOffset\n            ', 'name': 'countBufferOffset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t maxDrawCount\n            ', 'name': 'maxDrawCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t stride\n        ', 'name': 'stride'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdDrawIndirectCountAMD(\nVkCommandBuffer commandBuffer,\n VkBuffer buffer,\n VkDeviceSize offset,\n VkBuffer countBuffer,\n VkDeviceSize countBufferOffset,\n uint32_t maxDrawCount,\n uint32_t stride\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer buffer\n            ', 'name': 'buffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize offset\n            ', 'name': 'offset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer countBuffer\n            ', 'name': 'countBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize countBufferOffset\n            ', 'name': 'countBufferOffset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t maxDrawCount\n            ', 'name': 'maxDrawCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t stride\n        ', 'name': 'stride'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdDrawIndexedIndirectCount(\nVkCommandBuffer commandBuffer,\n VkBuffer buffer,\n VkDeviceSize offset,\n VkBuffer countBuffer,\n VkDeviceSize countBufferOffset,\n uint32_t maxDrawCount,\n uint32_t stride\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer buffer\n            ', 'name': 'buffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize offset\n            ', 'name': 'offset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer countBuffer\n            ', 'name': 'countBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize countBufferOffset\n            ', 'name': 'countBufferOffset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t maxDrawCount\n            ', 'name': 'maxDrawCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t stride\n        ', 'name': 'stride'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdDrawIndexedIndirectCountKHR(\nVkCommandBuffer commandBuffer,\n VkBuffer buffer,\n VkDeviceSize offset,\n VkBuffer countBuffer,\n VkDeviceSize countBufferOffset,\n uint32_t maxDrawCount,\n uint32_t stride\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer buffer\n            ', 'name': 'buffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize offset\n            ', 'name': 'offset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer countBuffer\n            ', 'name': 'countBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize countBufferOffset\n            ', 'name': 'countBufferOffset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t maxDrawCount\n            ', 'name': 'maxDrawCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t stride\n        ', 'name': 'stride'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdDrawIndexedIndirectCountAMD(\nVkCommandBuffer commandBuffer,\n VkBuffer buffer,\n VkDeviceSize offset,\n VkBuffer countBuffer,\n VkDeviceSize countBufferOffset,\n uint32_t maxDrawCount,\n uint32_t stride\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer buffer\n            ', 'name': 'buffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize offset\n            ', 'name': 'offset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer countBuffer\n            ', 'name': 'countBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize countBufferOffset\n            ', 'name': 'countBufferOffset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t maxDrawCount\n            ', 'name': 'maxDrawCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t stride\n        ', 'name': 'stride'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetCheckpointNV(\nVkCommandBuffer commandBuffer,\n const void* pCheckpointMarker\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'void', 'header': 'const void* pCheckpointMarker\n        ', 'name': 'pCheckpointMarker'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetQueueCheckpointDataNV(\nVkQueue queue,\n uint32_t* pCheckpointDataCount,\n VkCheckpointDataNV* pCheckpointData\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueue', 'header': 'VkQueue queue\n            ', 'name': 'queue'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pCheckpointDataCount\n            ', 'name': 'pCheckpointDataCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pCheckpointDataCount'], 'type': 'VkCheckpointDataNV', 'header': 'VkCheckpointDataNV* pCheckpointData\n        ', 'name': 'pCheckpointData'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdBindTransformFeedbackBuffersEXT(\nVkCommandBuffer commandBuffer,\n uint32_t firstBinding,\n uint32_t bindingCount,\n const VkBuffer* pBuffers,\n const VkDeviceSize* pOffsets,\n const VkDeviceSize* pSizes\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstBinding\n            ', 'name': 'firstBinding'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t bindingCount\n            ', 'name': 'bindingCount'}, {'const': True, 'num_indirection': 1, 'length': ['bindingCount'], 'type': 'VkBuffer', 'header': 'const VkBuffer* pBuffers\n            ', 'name': 'pBuffers'}, {'const': True, 'num_indirection': 1, 'length': ['bindingCount'], 'type': 'VkDeviceSize', 'header': 'const VkDeviceSize* pOffsets\n            ', 'name': 'pOffsets'}, {'const': True, 'num_indirection': 1, 'length': ['bindingCount'], 'type': 'VkDeviceSize', 'header': 'const VkDeviceSize* pSizes\n        ', 'name': 'pSizes'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdBeginTransformFeedbackEXT(\nVkCommandBuffer commandBuffer,\n uint32_t firstCounterBuffer,\n uint32_t counterBufferCount,\n const VkBuffer* pCounterBuffers,\n const VkDeviceSize* pCounterBufferOffsets\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstCounterBuffer\n            ', 'name': 'firstCounterBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t counterBufferCount\n            ', 'name': 'counterBufferCount'}, {'const': True, 'num_indirection': 1, 'length': ['counterBufferCount'], 'type': 'VkBuffer', 'header': 'const VkBuffer* pCounterBuffers\n            ', 'name': 'pCounterBuffers'}, {'const': True, 'num_indirection': 1, 'length': ['counterBufferCount'], 'type': 'VkDeviceSize', 'header': 'const VkDeviceSize* pCounterBufferOffsets\n        ', 'name': 'pCounterBufferOffsets'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdEndTransformFeedbackEXT(\nVkCommandBuffer commandBuffer,\n uint32_t firstCounterBuffer,\n uint32_t counterBufferCount,\n const VkBuffer* pCounterBuffers,\n const VkDeviceSize* pCounterBufferOffsets\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstCounterBuffer\n            ', 'name': 'firstCounterBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t counterBufferCount\n            ', 'name': 'counterBufferCount'}, {'const': True, 'num_indirection': 1, 'length': ['counterBufferCount'], 'type': 'VkBuffer', 'header': 'const VkBuffer* pCounterBuffers\n            ', 'name': 'pCounterBuffers'}, {'const': True, 'num_indirection': 1, 'length': ['counterBufferCount'], 'type': 'VkDeviceSize', 'header': 'const VkDeviceSize* pCounterBufferOffsets\n        ', 'name': 'pCounterBufferOffsets'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdBeginQueryIndexedEXT(\nVkCommandBuffer commandBuffer,\n VkQueryPool queryPool,\n uint32_t query,\n VkQueryControlFlags flags,\n uint32_t index\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryPool', 'header': 'VkQueryPool queryPool\n            ', 'name': 'queryPool'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t query\n            ', 'name': 'query'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryControlFlags', 'header': 'VkQueryControlFlags flags\n            ', 'name': 'flags'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t index\n        ', 'name': 'index'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdEndQueryIndexedEXT(\nVkCommandBuffer commandBuffer,\n VkQueryPool queryPool,\n uint32_t query,\n uint32_t index\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryPool', 'header': 'VkQueryPool queryPool\n            ', 'name': 'queryPool'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t query\n            ', 'name': 'query'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t index\n        ', 'name': 'index'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdDrawIndirectByteCountEXT(\nVkCommandBuffer commandBuffer,\n uint32_t instanceCount,\n uint32_t firstInstance,\n VkBuffer counterBuffer,\n VkDeviceSize counterBufferOffset,\n uint32_t counterOffset,\n uint32_t vertexStride\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t instanceCount\n            ', 'name': 'instanceCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstInstance\n            ', 'name': 'firstInstance'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer counterBuffer\n            ', 'name': 'counterBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize counterBufferOffset\n            ', 'name': 'counterBufferOffset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t counterOffset\n            ', 'name': 'counterOffset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t vertexStride\n        ', 'name': 'vertexStride'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetExclusiveScissorNV(\nVkCommandBuffer commandBuffer,\n uint32_t firstExclusiveScissor,\n uint32_t exclusiveScissorCount,\n const VkRect2D* pExclusiveScissors\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstExclusiveScissor\n            ', 'name': 'firstExclusiveScissor'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t exclusiveScissorCount\n            ', 'name': 'exclusiveScissorCount'}, {'const': True, 'num_indirection': 1, 'length': ['exclusiveScissorCount'], 'type': 'VkRect2D', 'header': 'const VkRect2D* pExclusiveScissors\n        ', 'name': 'pExclusiveScissors'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetExclusiveScissorEnableNV(\nVkCommandBuffer commandBuffer,\n uint32_t firstExclusiveScissor,\n uint32_t exclusiveScissorCount,\n const VkBool32* pExclusiveScissorEnables\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstExclusiveScissor\n            ', 'name': 'firstExclusiveScissor'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t exclusiveScissorCount\n            ', 'name': 'exclusiveScissorCount'}, {'const': True, 'num_indirection': 1, 'length': ['exclusiveScissorCount'], 'type': 'VkBool32', 'header': 'const VkBool32* pExclusiveScissorEnables\n        ', 'name': 'pExclusiveScissorEnables'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdBindShadingRateImageNV(\nVkCommandBuffer commandBuffer,\n VkImageView imageView,\n VkImageLayout imageLayout\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageView', 'header': 'VkImageView imageView\n            ', 'name': 'imageView'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageLayout', 'header': 'VkImageLayout imageLayout\n        ', 'name': 'imageLayout'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetViewportShadingRatePaletteNV(\nVkCommandBuffer commandBuffer,\n uint32_t firstViewport,\n uint32_t viewportCount,\n const VkShadingRatePaletteNV* pShadingRatePalettes\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstViewport\n            ', 'name': 'firstViewport'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t viewportCount\n            ', 'name': 'viewportCount'}, {'const': True, 'num_indirection': 1, 'length': ['viewportCount'], 'type': 'VkShadingRatePaletteNV', 'header': 'const VkShadingRatePaletteNV* pShadingRatePalettes\n        ', 'name': 'pShadingRatePalettes'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetCoarseSampleOrderNV(\nVkCommandBuffer commandBuffer,\n VkCoarseSampleOrderTypeNV sampleOrderType,\n uint32_t customSampleOrderCount,\n const VkCoarseSampleOrderCustomNV* pCustomSampleOrders\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCoarseSampleOrderTypeNV', 'header': 'VkCoarseSampleOrderTypeNV sampleOrderType\n            ', 'name': 'sampleOrderType'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t customSampleOrderCount\n            ', 'name': 'customSampleOrderCount'}, {'const': True, 'num_indirection': 1, 'length': ['customSampleOrderCount'], 'type': 'VkCoarseSampleOrderCustomNV', 'header': 'const VkCoarseSampleOrderCustomNV* pCustomSampleOrders\n        ', 'name': 'pCustomSampleOrders'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdDrawMeshTasksNV(\nVkCommandBuffer commandBuffer,\n uint32_t taskCount,\n uint32_t firstTask\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t taskCount\n            ', 'name': 'taskCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstTask\n        ', 'name': 'firstTask'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdDrawMeshTasksIndirectNV(\nVkCommandBuffer commandBuffer,\n VkBuffer buffer,\n VkDeviceSize offset,\n uint32_t drawCount,\n uint32_t stride\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer buffer\n            ', 'name': 'buffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize offset\n            ', 'name': 'offset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t drawCount\n            ', 'name': 'drawCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t stride\n        ', 'name': 'stride'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdDrawMeshTasksIndirectCountNV(\nVkCommandBuffer commandBuffer,\n VkBuffer buffer,\n VkDeviceSize offset,\n VkBuffer countBuffer,\n VkDeviceSize countBufferOffset,\n uint32_t maxDrawCount,\n uint32_t stride\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer buffer\n            ', 'name': 'buffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize offset\n            ', 'name': 'offset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer countBuffer\n            ', 'name': 'countBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize countBufferOffset\n            ', 'name': 'countBufferOffset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t maxDrawCount\n            ', 'name': 'maxDrawCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t stride\n        ', 'name': 'stride'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdDrawMeshTasksEXT(\nVkCommandBuffer commandBuffer,\n uint32_t groupCountX,\n uint32_t groupCountY,\n uint32_t groupCountZ\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t groupCountX\n            ', 'name': 'groupCountX'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t groupCountY\n            ', 'name': 'groupCountY'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t groupCountZ\n        ', 'name': 'groupCountZ'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdDrawMeshTasksIndirectEXT(\nVkCommandBuffer commandBuffer,\n VkBuffer buffer,\n VkDeviceSize offset,\n uint32_t drawCount,\n uint32_t stride\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer buffer\n            ', 'name': 'buffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize offset\n            ', 'name': 'offset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t drawCount\n            ', 'name': 'drawCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t stride\n        ', 'name': 'stride'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdDrawMeshTasksIndirectCountEXT(\nVkCommandBuffer commandBuffer,\n VkBuffer buffer,\n VkDeviceSize offset,\n VkBuffer countBuffer,\n VkDeviceSize countBufferOffset,\n uint32_t maxDrawCount,\n uint32_t stride\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer buffer\n            ', 'name': 'buffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize offset\n            ', 'name': 'offset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer countBuffer\n            ', 'name': 'countBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize countBufferOffset\n            ', 'name': 'countBufferOffset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t maxDrawCount\n            ', 'name': 'maxDrawCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t stride\n        ', 'name': 'stride'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCompileDeferredNV(\nVkDevice device,\n VkPipeline pipeline,\n uint32_t shader\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipeline', 'header': 'VkPipeline pipeline\n            ', 'name': 'pipeline'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t shader\n        ', 'name': 'shader'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreateAccelerationStructureNV(\nVkDevice device,\n const VkAccelerationStructureCreateInfoNV* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkAccelerationStructureNV* pAccelerationStructure\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAccelerationStructureCreateInfoNV', 'header': 'const VkAccelerationStructureCreateInfoNV* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkAccelerationStructureNV', 'header': 'VkAccelerationStructureNV* pAccelerationStructure\n        ', 'name': 'pAccelerationStructure'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdBindInvocationMaskHUAWEI(\nVkCommandBuffer commandBuffer,\n VkImageView imageView,\n VkImageLayout imageLayout\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageView', 'header': 'VkImageView imageView\n            ', 'name': 'imageView'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageLayout', 'header': 'VkImageLayout imageLayout\n        ', 'name': 'imageLayout'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkDestroyAccelerationStructureKHR(\nVkDevice device,\n VkAccelerationStructureKHR accelerationStructure,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkAccelerationStructureKHR', 'header': 'VkAccelerationStructureKHR accelerationStructure\n            ', 'name': 'accelerationStructure'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkDestroyAccelerationStructureNV(\nVkDevice device,\n VkAccelerationStructureNV accelerationStructure,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkAccelerationStructureNV', 'header': 'VkAccelerationStructureNV accelerationStructure\n            ', 'name': 'accelerationStructure'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetAccelerationStructureMemoryRequirementsNV(\nVkDevice device,\n const VkAccelerationStructureMemoryRequirementsInfoNV* pInfo,\n VkMemoryRequirements2KHR* pMemoryRequirements\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAccelerationStructureMemoryRequirementsInfoNV', 'header': 'const VkAccelerationStructureMemoryRequirementsInfoNV* pInfo\n            ', 'name': 'pInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkMemoryRequirements2KHR', 'header': 'VkMemoryRequirements2KHR* pMemoryRequirements\n        ', 'name': 'pMemoryRequirements'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkBindAccelerationStructureMemoryNV(\nVkDevice device,\n uint32_t bindInfoCount,\n const VkBindAccelerationStructureMemoryInfoNV* pBindInfos\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t bindInfoCount\n            ', 'name': 'bindInfoCount'}, {'const': True, 'num_indirection': 1, 'length': ['bindInfoCount'], 'type': 'VkBindAccelerationStructureMemoryInfoNV', 'header': 'const VkBindAccelerationStructureMemoryInfoNV* pBindInfos\n        ', 'name': 'pBindInfos'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdCopyAccelerationStructureNV(\nVkCommandBuffer commandBuffer,\n VkAccelerationStructureNV dst,\n VkAccelerationStructureNV src,\n VkCopyAccelerationStructureModeKHR mode\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkAccelerationStructureNV', 'header': 'VkAccelerationStructureNV dst\n            ', 'name': 'dst'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkAccelerationStructureNV', 'header': 'VkAccelerationStructureNV src\n            ', 'name': 'src'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCopyAccelerationStructureModeKHR', 'header': 'VkCopyAccelerationStructureModeKHR mode\n        ', 'name': 'mode'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdCopyAccelerationStructureKHR(\nVkCommandBuffer commandBuffer,\n const VkCopyAccelerationStructureInfoKHR* pInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCopyAccelerationStructureInfoKHR', 'header': 'const VkCopyAccelerationStructureInfoKHR* pInfo\n        ', 'name': 'pInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCopyAccelerationStructureKHR(\nVkDevice device,\n VkDeferredOperationKHR deferredOperation,\n const VkCopyAccelerationStructureInfoKHR* pInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeferredOperationKHR', 'header': 'VkDeferredOperationKHR deferredOperation\n            ', 'name': 'deferredOperation'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCopyAccelerationStructureInfoKHR', 'header': 'const VkCopyAccelerationStructureInfoKHR* pInfo\n        ', 'name': 'pInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdCopyAccelerationStructureToMemoryKHR(\nVkCommandBuffer commandBuffer,\n const VkCopyAccelerationStructureToMemoryInfoKHR* pInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCopyAccelerationStructureToMemoryInfoKHR', 'header': 'const VkCopyAccelerationStructureToMemoryInfoKHR* pInfo\n        ', 'name': 'pInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCopyAccelerationStructureToMemoryKHR(\nVkDevice device,\n VkDeferredOperationKHR deferredOperation,\n const VkCopyAccelerationStructureToMemoryInfoKHR* pInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeferredOperationKHR', 'header': 'VkDeferredOperationKHR deferredOperation\n            ', 'name': 'deferredOperation'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCopyAccelerationStructureToMemoryInfoKHR', 'header': 'const VkCopyAccelerationStructureToMemoryInfoKHR* pInfo\n        ', 'name': 'pInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdCopyMemoryToAccelerationStructureKHR(\nVkCommandBuffer commandBuffer,\n const VkCopyMemoryToAccelerationStructureInfoKHR* pInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCopyMemoryToAccelerationStructureInfoKHR', 'header': 'const VkCopyMemoryToAccelerationStructureInfoKHR* pInfo\n        ', 'name': 'pInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCopyMemoryToAccelerationStructureKHR(\nVkDevice device,\n VkDeferredOperationKHR deferredOperation,\n const VkCopyMemoryToAccelerationStructureInfoKHR* pInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeferredOperationKHR', 'header': 'VkDeferredOperationKHR deferredOperation\n            ', 'name': 'deferredOperation'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCopyMemoryToAccelerationStructureInfoKHR', 'header': 'const VkCopyMemoryToAccelerationStructureInfoKHR* pInfo\n        ', 'name': 'pInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdWriteAccelerationStructuresPropertiesKHR(\nVkCommandBuffer commandBuffer,\n uint32_t accelerationStructureCount,\n const VkAccelerationStructureKHR* pAccelerationStructures,\n VkQueryType queryType,\n VkQueryPool queryPool,\n uint32_t firstQuery\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t accelerationStructureCount\n            ', 'name': 'accelerationStructureCount'}, {'const': True, 'num_indirection': 1, 'length': ['accelerationStructureCount'], 'type': 'VkAccelerationStructureKHR', 'header': 'const VkAccelerationStructureKHR* pAccelerationStructures\n            ', 'name': 'pAccelerationStructures'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryType', 'header': 'VkQueryType queryType\n            ', 'name': 'queryType'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryPool', 'header': 'VkQueryPool queryPool\n            ', 'name': 'queryPool'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstQuery\n        ', 'name': 'firstQuery'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdWriteAccelerationStructuresPropertiesNV(\nVkCommandBuffer commandBuffer,\n uint32_t accelerationStructureCount,\n const VkAccelerationStructureNV* pAccelerationStructures,\n VkQueryType queryType,\n VkQueryPool queryPool,\n uint32_t firstQuery\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t accelerationStructureCount\n            ', 'name': 'accelerationStructureCount'}, {'const': True, 'num_indirection': 1, 'length': ['accelerationStructureCount'], 'type': 'VkAccelerationStructureNV', 'header': 'const VkAccelerationStructureNV* pAccelerationStructures\n            ', 'name': 'pAccelerationStructures'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryType', 'header': 'VkQueryType queryType\n            ', 'name': 'queryType'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryPool', 'header': 'VkQueryPool queryPool\n            ', 'name': 'queryPool'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstQuery\n        ', 'name': 'firstQuery'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdBuildAccelerationStructureNV(\nVkCommandBuffer commandBuffer,\n const VkAccelerationStructureInfoNV* pInfo,\n VkBuffer instanceData,\n VkDeviceSize instanceOffset,\n VkBool32 update,\n VkAccelerationStructureNV dst,\n VkAccelerationStructureNV src,\n VkBuffer scratch,\n VkDeviceSize scratchOffset\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAccelerationStructureInfoNV', 'header': 'const VkAccelerationStructureInfoNV* pInfo\n            ', 'name': 'pInfo'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer instanceData\n            ', 'name': 'instanceData'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize instanceOffset\n            ', 'name': 'instanceOffset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 update\n            ', 'name': 'update'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkAccelerationStructureNV', 'header': 'VkAccelerationStructureNV dst\n            ', 'name': 'dst'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkAccelerationStructureNV', 'header': 'VkAccelerationStructureNV src\n            ', 'name': 'src'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer scratch\n            ', 'name': 'scratch'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize scratchOffset\n        ', 'name': 'scratchOffset'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkWriteAccelerationStructuresPropertiesKHR(\nVkDevice device,\n uint32_t accelerationStructureCount,\n const VkAccelerationStructureKHR* pAccelerationStructures,\n VkQueryType  queryType,\n size_t       dataSize,\n void* pData,\n size_t stride\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t accelerationStructureCount\n            ', 'name': 'accelerationStructureCount'}, {'const': True, 'num_indirection': 1, 'length': ['accelerationStructureCount'], 'type': 'VkAccelerationStructureKHR', 'header': 'const VkAccelerationStructureKHR* pAccelerationStructures\n            ', 'name': 'pAccelerationStructures'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryType', 'header': 'VkQueryType  queryType\n            ', 'name': 'queryType'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'size_t', 'header': 'size_t       dataSize\n            ', 'name': 'dataSize'}, {'const': False, 'num_indirection': 1, 'length': ['dataSize'], 'type': 'void', 'header': 'void* pData\n            ', 'name': 'pData'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'size_t', 'header': 'size_t stride\n        ', 'name': 'stride'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdTraceRaysKHR(\nVkCommandBuffer commandBuffer,\n const VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable,\n const VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable,\n const VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable,\n const VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable,\n uint32_t width,\n uint32_t height,\n uint32_t depth\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkStridedDeviceAddressRegionKHR', 'header': 'const VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable\n            ', 'name': 'pRaygenShaderBindingTable'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkStridedDeviceAddressRegionKHR', 'header': 'const VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable\n            ', 'name': 'pMissShaderBindingTable'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkStridedDeviceAddressRegionKHR', 'header': 'const VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable\n            ', 'name': 'pHitShaderBindingTable'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkStridedDeviceAddressRegionKHR', 'header': 'const VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable\n            ', 'name': 'pCallableShaderBindingTable'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t width\n            ', 'name': 'width'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t height\n            ', 'name': 'height'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t depth\n        ', 'name': 'depth'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdTraceRaysNV(\nVkCommandBuffer commandBuffer,\n VkBuffer raygenShaderBindingTableBuffer,\n VkDeviceSize raygenShaderBindingOffset,\n VkBuffer missShaderBindingTableBuffer,\n VkDeviceSize missShaderBindingOffset,\n VkDeviceSize missShaderBindingStride,\n VkBuffer hitShaderBindingTableBuffer,\n VkDeviceSize hitShaderBindingOffset,\n VkDeviceSize hitShaderBindingStride,\n VkBuffer callableShaderBindingTableBuffer,\n VkDeviceSize callableShaderBindingOffset,\n VkDeviceSize callableShaderBindingStride,\n uint32_t width,\n uint32_t height,\n uint32_t depth\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer raygenShaderBindingTableBuffer\n            ', 'name': 'raygenShaderBindingTableBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize raygenShaderBindingOffset\n            ', 'name': 'raygenShaderBindingOffset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer missShaderBindingTableBuffer\n            ', 'name': 'missShaderBindingTableBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize missShaderBindingOffset\n            ', 'name': 'missShaderBindingOffset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize missShaderBindingStride\n            ', 'name': 'missShaderBindingStride'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer hitShaderBindingTableBuffer\n            ', 'name': 'hitShaderBindingTableBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize hitShaderBindingOffset\n            ', 'name': 'hitShaderBindingOffset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize hitShaderBindingStride\n            ', 'name': 'hitShaderBindingStride'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer callableShaderBindingTableBuffer\n            ', 'name': 'callableShaderBindingTableBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize callableShaderBindingOffset\n            ', 'name': 'callableShaderBindingOffset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize callableShaderBindingStride\n            ', 'name': 'callableShaderBindingStride'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t width\n            ', 'name': 'width'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t height\n            ', 'name': 'height'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t depth\n        ', 'name': 'depth'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetRayTracingShaderGroupHandlesKHR(\nVkDevice device,\n VkPipeline pipeline,\n uint32_t firstGroup,\n uint32_t groupCount,\n size_t dataSize,\n void* pData\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipeline', 'header': 'VkPipeline pipeline\n            ', 'name': 'pipeline'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstGroup\n            ', 'name': 'firstGroup'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t groupCount\n            ', 'name': 'groupCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'size_t', 'header': 'size_t dataSize\n            ', 'name': 'dataSize'}, {'const': False, 'num_indirection': 1, 'length': ['dataSize'], 'type': 'void', 'header': 'void* pData\n        ', 'name': 'pData'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetRayTracingShaderGroupHandlesNV(\nVkDevice device,\n VkPipeline pipeline,\n uint32_t firstGroup,\n uint32_t groupCount,\n size_t dataSize,\n void* pData\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipeline', 'header': 'VkPipeline pipeline\n            ', 'name': 'pipeline'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstGroup\n            ', 'name': 'firstGroup'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t groupCount\n            ', 'name': 'groupCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'size_t', 'header': 'size_t dataSize\n            ', 'name': 'dataSize'}, {'const': False, 'num_indirection': 1, 'length': ['dataSize'], 'type': 'void', 'header': 'void* pData\n        ', 'name': 'pData'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(\nVkDevice device,\n VkPipeline pipeline,\n uint32_t firstGroup,\n uint32_t groupCount,\n size_t dataSize,\n void* pData\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipeline', 'header': 'VkPipeline pipeline\n            ', 'name': 'pipeline'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstGroup\n            ', 'name': 'firstGroup'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t groupCount\n            ', 'name': 'groupCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'size_t', 'header': 'size_t dataSize\n            ', 'name': 'dataSize'}, {'const': False, 'num_indirection': 1, 'length': ['dataSize'], 'type': 'void', 'header': 'void* pData\n        ', 'name': 'pData'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetAccelerationStructureHandleNV(\nVkDevice device,\n VkAccelerationStructureNV accelerationStructure,\n size_t dataSize,\n void* pData\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkAccelerationStructureNV', 'header': 'VkAccelerationStructureNV accelerationStructure\n            ', 'name': 'accelerationStructure'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'size_t', 'header': 'size_t dataSize\n            ', 'name': 'dataSize'}, {'const': False, 'num_indirection': 1, 'length': ['dataSize'], 'type': 'void', 'header': 'void* pData\n        ', 'name': 'pData'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreateRayTracingPipelinesNV(\nVkDevice device,\n VkPipelineCache pipelineCache,\n uint32_t createInfoCount,\n const VkRayTracingPipelineCreateInfoNV* pCreateInfos,\n const VkAllocationCallbacks* pAllocator,\n VkPipeline* pPipelines\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineCache', 'header': 'VkPipelineCache pipelineCache\n            ', 'name': 'pipelineCache'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t createInfoCount\n            ', 'name': 'createInfoCount'}, {'const': True, 'num_indirection': 1, 'length': ['createInfoCount'], 'type': 'VkRayTracingPipelineCreateInfoNV', 'header': 'const VkRayTracingPipelineCreateInfoNV* pCreateInfos\n            ', 'name': 'pCreateInfos'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': ['createInfoCount'], 'type': 'VkPipeline', 'header': 'VkPipeline* pPipelines\n        ', 'name': 'pPipelines'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreateRayTracingPipelinesKHR(\nVkDevice device,\n VkDeferredOperationKHR deferredOperation,\n VkPipelineCache pipelineCache,\n uint32_t createInfoCount,\n const VkRayTracingPipelineCreateInfoKHR* pCreateInfos,\n const VkAllocationCallbacks* pAllocator,\n VkPipeline* pPipelines\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeferredOperationKHR', 'header': 'VkDeferredOperationKHR deferredOperation\n            ', 'name': 'deferredOperation'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineCache', 'header': 'VkPipelineCache pipelineCache\n            ', 'name': 'pipelineCache'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t createInfoCount\n            ', 'name': 'createInfoCount'}, {'const': True, 'num_indirection': 1, 'length': ['createInfoCount'], 'type': 'VkRayTracingPipelineCreateInfoKHR', 'header': 'const VkRayTracingPipelineCreateInfoKHR* pCreateInfos\n            ', 'name': 'pCreateInfos'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': ['createInfoCount'], 'type': 'VkPipeline', 'header': 'VkPipeline* pPipelines\n        ', 'name': 'pPipelines'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(\nVkPhysicalDevice physicalDevice,\n uint32_t* pPropertyCount,\n VkCooperativeMatrixPropertiesNV* pProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pPropertyCount\n            ', 'name': 'pPropertyCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pPropertyCount'], 'type': 'VkCooperativeMatrixPropertiesNV', 'header': 'VkCooperativeMatrixPropertiesNV* pProperties\n        ', 'name': 'pProperties'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdTraceRaysIndirectKHR(\nVkCommandBuffer commandBuffer,\n const VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable,\n const VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable,\n const VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable,\n const VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable,\n VkDeviceAddress indirectDeviceAddress\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkStridedDeviceAddressRegionKHR', 'header': 'const VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable\n            ', 'name': 'pRaygenShaderBindingTable'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkStridedDeviceAddressRegionKHR', 'header': 'const VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable\n            ', 'name': 'pMissShaderBindingTable'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkStridedDeviceAddressRegionKHR', 'header': 'const VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable\n            ', 'name': 'pHitShaderBindingTable'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkStridedDeviceAddressRegionKHR', 'header': 'const VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable\n            ', 'name': 'pCallableShaderBindingTable'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceAddress', 'header': 'VkDeviceAddress indirectDeviceAddress\n        ', 'name': 'indirectDeviceAddress'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdTraceRaysIndirect2KHR(\nVkCommandBuffer commandBuffer,\n VkDeviceAddress indirectDeviceAddress\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceAddress', 'header': 'VkDeviceAddress indirectDeviceAddress\n        ', 'name': 'indirectDeviceAddress'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetDeviceAccelerationStructureCompatibilityKHR(\nVkDevice device,\n const VkAccelerationStructureVersionInfoKHR* pVersionInfo,\n VkAccelerationStructureCompatibilityKHR* pCompatibility\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAccelerationStructureVersionInfoKHR', 'header': 'const VkAccelerationStructureVersionInfoKHR* pVersionInfo\n            ', 'name': 'pVersionInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkAccelerationStructureCompatibilityKHR', 'header': 'VkAccelerationStructureCompatibilityKHR* pCompatibility\n        ', 'name': 'pCompatibility'}]}(json data);
void handle_{'sync': False, 'type': 'VkDeviceSize', 'num_indirection': 0, 'header': 'VkDeviceSize funcpointer_vkGetRayTracingShaderGroupStackSizeKHR(\nVkDevice device,\n VkPipeline pipeline,\n uint32_t group,\n VkShaderGroupShaderKHR groupShader\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipeline', 'header': 'VkPipeline pipeline\n            ', 'name': 'pipeline'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t group\n            ', 'name': 'group'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkShaderGroupShaderKHR', 'header': 'VkShaderGroupShaderKHR groupShader\n        ', 'name': 'groupShader'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetRayTracingPipelineStackSizeKHR(\nVkCommandBuffer commandBuffer,\n uint32_t pipelineStackSize\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t pipelineStackSize\n        ', 'name': 'pipelineStackSize'}]}(json data);
void handle_{'sync': False, 'type': 'uint32_t', 'num_indirection': 0, 'header': 'uint32_t funcpointer_vkGetImageViewHandleNVX(\nVkDevice device,\n const VkImageViewHandleInfoNVX* pInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkImageViewHandleInfoNVX', 'header': 'const VkImageViewHandleInfoNVX* pInfo\n        ', 'name': 'pInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetImageViewAddressNVX(\nVkDevice device,\n VkImageView imageView,\n VkImageViewAddressPropertiesNVX* pProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageView', 'header': 'VkImageView imageView\n            ', 'name': 'imageView'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkImageViewAddressPropertiesNVX', 'header': 'VkImageViewAddressPropertiesNVX* pProperties\n        ', 'name': 'pProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(\nVkPhysicalDevice physicalDevice,\n uint32_t queueFamilyIndex,\n uint32_t* pCounterCount,\n VkPerformanceCounterKHR* pCounters,\n VkPerformanceCounterDescriptionKHR* pCounterDescriptions\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t queueFamilyIndex\n            ', 'name': 'queueFamilyIndex'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pCounterCount\n            ', 'name': 'pCounterCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pCounterCount'], 'type': 'VkPerformanceCounterKHR', 'header': 'VkPerformanceCounterKHR* pCounters\n            ', 'name': 'pCounters'}, {'const': False, 'num_indirection': 1, 'length': ['*pCounterCount'], 'type': 'VkPerformanceCounterDescriptionKHR', 'header': 'VkPerformanceCounterDescriptionKHR* pCounterDescriptions\n        ', 'name': 'pCounterDescriptions'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(\nVkPhysicalDevice physicalDevice,\n const VkQueryPoolPerformanceCreateInfoKHR* pPerformanceQueryCreateInfo,\n uint32_t* pNumPasses\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkQueryPoolPerformanceCreateInfoKHR', 'header': 'const VkQueryPoolPerformanceCreateInfoKHR* pPerformanceQueryCreateInfo\n            ', 'name': 'pPerformanceQueryCreateInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pNumPasses\n        ', 'name': 'pNumPasses'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkAcquireProfilingLockKHR(\nVkDevice device,\n const VkAcquireProfilingLockInfoKHR* pInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAcquireProfilingLockInfoKHR', 'header': 'const VkAcquireProfilingLockInfoKHR* pInfo\n        ', 'name': 'pInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkReleaseProfilingLockKHR(\nVkDevice device\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n        ', 'name': 'device'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetImageDrmFormatModifierPropertiesEXT(\nVkDevice device,\n VkImage image,\n VkImageDrmFormatModifierPropertiesEXT* pProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImage', 'header': 'VkImage image\n            ', 'name': 'image'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkImageDrmFormatModifierPropertiesEXT', 'header': 'VkImageDrmFormatModifierPropertiesEXT* pProperties\n        ', 'name': 'pProperties'}]}(json data);
void handle_{'sync': False, 'type': 'uint64_t', 'num_indirection': 0, 'header': 'uint64_t funcpointer_vkGetBufferOpaqueCaptureAddress(\nVkDevice device,\n const VkBufferDeviceAddressInfo* pInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkBufferDeviceAddressInfo', 'header': 'const VkBufferDeviceAddressInfo* pInfo\n        ', 'name': 'pInfo'}]}(json data);
void handle_{'sync': False, 'type': 'uint64_t', 'num_indirection': 0, 'header': 'uint64_t funcpointer_vkGetBufferOpaqueCaptureAddressKHR(\nVkDevice device,\n const VkBufferDeviceAddressInfo* pInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkBufferDeviceAddressInfo', 'header': 'const VkBufferDeviceAddressInfo* pInfo\n        ', 'name': 'pInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkDeviceAddress', 'num_indirection': 0, 'header': 'VkDeviceAddress funcpointer_vkGetBufferDeviceAddress(\nVkDevice device,\n const VkBufferDeviceAddressInfo* pInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkBufferDeviceAddressInfo', 'header': 'const VkBufferDeviceAddressInfo* pInfo\n        ', 'name': 'pInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkDeviceAddress', 'num_indirection': 0, 'header': 'VkDeviceAddress funcpointer_vkGetBufferDeviceAddressKHR(\nVkDevice device,\n const VkBufferDeviceAddressInfo* pInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkBufferDeviceAddressInfo', 'header': 'const VkBufferDeviceAddressInfo* pInfo\n        ', 'name': 'pInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkDeviceAddress', 'num_indirection': 0, 'header': 'VkDeviceAddress funcpointer_vkGetBufferDeviceAddressEXT(\nVkDevice device,\n const VkBufferDeviceAddressInfo* pInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkBufferDeviceAddressInfo', 'header': 'const VkBufferDeviceAddressInfo* pInfo\n        ', 'name': 'pInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreateHeadlessSurfaceEXT(\nVkInstance instance,\n const VkHeadlessSurfaceCreateInfoEXT* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkSurfaceKHR* pSurface\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkInstance', 'header': 'VkInstance instance\n            ', 'name': 'instance'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkHeadlessSurfaceCreateInfoEXT', 'header': 'const VkHeadlessSurfaceCreateInfoEXT* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkSurfaceKHR', 'header': 'VkSurfaceKHR* pSurface\n        ', 'name': 'pSurface'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(\nVkPhysicalDevice physicalDevice,\n uint32_t* pCombinationCount,\n VkFramebufferMixedSamplesCombinationNV* pCombinations\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pCombinationCount\n            ', 'name': 'pCombinationCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pCombinationCount'], 'type': 'VkFramebufferMixedSamplesCombinationNV', 'header': 'VkFramebufferMixedSamplesCombinationNV* pCombinations\n        ', 'name': 'pCombinations'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkInitializePerformanceApiINTEL(\nVkDevice device,\n const VkInitializePerformanceApiInfoINTEL* pInitializeInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkInitializePerformanceApiInfoINTEL', 'header': 'const VkInitializePerformanceApiInfoINTEL* pInitializeInfo\n        ', 'name': 'pInitializeInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkUninitializePerformanceApiINTEL(\nVkDevice device\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n        ', 'name': 'device'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCmdSetPerformanceMarkerINTEL(\nVkCommandBuffer commandBuffer,\n const VkPerformanceMarkerInfoINTEL* pMarkerInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPerformanceMarkerInfoINTEL', 'header': 'const VkPerformanceMarkerInfoINTEL* pMarkerInfo\n        ', 'name': 'pMarkerInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCmdSetPerformanceStreamMarkerINTEL(\nVkCommandBuffer commandBuffer,\n const VkPerformanceStreamMarkerInfoINTEL* pMarkerInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPerformanceStreamMarkerInfoINTEL', 'header': 'const VkPerformanceStreamMarkerInfoINTEL* pMarkerInfo\n        ', 'name': 'pMarkerInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCmdSetPerformanceOverrideINTEL(\nVkCommandBuffer commandBuffer,\n const VkPerformanceOverrideInfoINTEL* pOverrideInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPerformanceOverrideInfoINTEL', 'header': 'const VkPerformanceOverrideInfoINTEL* pOverrideInfo\n        ', 'name': 'pOverrideInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkAcquirePerformanceConfigurationINTEL(\nVkDevice device,\n const VkPerformanceConfigurationAcquireInfoINTEL* pAcquireInfo,\n VkPerformanceConfigurationINTEL* pConfiguration\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPerformanceConfigurationAcquireInfoINTEL', 'header': 'const VkPerformanceConfigurationAcquireInfoINTEL* pAcquireInfo\n            ', 'name': 'pAcquireInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkPerformanceConfigurationINTEL', 'header': 'VkPerformanceConfigurationINTEL* pConfiguration\n        ', 'name': 'pConfiguration'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkReleasePerformanceConfigurationINTEL(\nVkDevice device,\n VkPerformanceConfigurationINTEL configuration\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPerformanceConfigurationINTEL', 'header': 'VkPerformanceConfigurationINTEL configuration\n        ', 'name': 'configuration'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkQueueSetPerformanceConfigurationINTEL(\nVkQueue queue,\n VkPerformanceConfigurationINTEL configuration\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueue', 'header': 'VkQueue queue\n            ', 'name': 'queue'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPerformanceConfigurationINTEL', 'header': 'VkPerformanceConfigurationINTEL configuration\n        ', 'name': 'configuration'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetPerformanceParameterINTEL(\nVkDevice device,\n VkPerformanceParameterTypeINTEL parameter,\n VkPerformanceValueINTEL* pValue\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPerformanceParameterTypeINTEL', 'header': 'VkPerformanceParameterTypeINTEL parameter\n            ', 'name': 'parameter'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkPerformanceValueINTEL', 'header': 'VkPerformanceValueINTEL* pValue\n        ', 'name': 'pValue'}]}(json data);
void handle_{'sync': False, 'type': 'uint64_t', 'num_indirection': 0, 'header': 'uint64_t funcpointer_vkGetDeviceMemoryOpaqueCaptureAddress(\nVkDevice device,\n const VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDeviceMemoryOpaqueCaptureAddressInfo', 'header': 'const VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo\n        ', 'name': 'pInfo'}]}(json data);
void handle_{'sync': False, 'type': 'uint64_t', 'num_indirection': 0, 'header': 'uint64_t funcpointer_vkGetDeviceMemoryOpaqueCaptureAddressKHR(\nVkDevice device,\n const VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDeviceMemoryOpaqueCaptureAddressInfo', 'header': 'const VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo\n        ', 'name': 'pInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetPipelineExecutablePropertiesKHR(\nVkDevice                        device,\n const VkPipelineInfoKHR*        pPipelineInfo,\n uint32_t* pExecutableCount,\n VkPipelineExecutablePropertiesKHR* pProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice                        device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPipelineInfoKHR', 'header': 'const VkPipelineInfoKHR*        pPipelineInfo\n            ', 'name': 'pPipelineInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pExecutableCount\n            ', 'name': 'pExecutableCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pExecutableCount'], 'type': 'VkPipelineExecutablePropertiesKHR', 'header': 'VkPipelineExecutablePropertiesKHR* pProperties\n        ', 'name': 'pProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetPipelineExecutableStatisticsKHR(\nVkDevice                        device,\n const VkPipelineExecutableInfoKHR*  pExecutableInfo,\n uint32_t* pStatisticCount,\n VkPipelineExecutableStatisticKHR* pStatistics\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice                        device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPipelineExecutableInfoKHR', 'header': 'const VkPipelineExecutableInfoKHR*  pExecutableInfo\n            ', 'name': 'pExecutableInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pStatisticCount\n            ', 'name': 'pStatisticCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pStatisticCount'], 'type': 'VkPipelineExecutableStatisticKHR', 'header': 'VkPipelineExecutableStatisticKHR* pStatistics\n        ', 'name': 'pStatistics'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetPipelineExecutableInternalRepresentationsKHR(\nVkDevice                        device,\n const VkPipelineExecutableInfoKHR*  pExecutableInfo,\n uint32_t* pInternalRepresentationCount,\n VkPipelineExecutableInternalRepresentationKHR* pInternalRepresentations\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice                        device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPipelineExecutableInfoKHR', 'header': 'const VkPipelineExecutableInfoKHR*  pExecutableInfo\n            ', 'name': 'pExecutableInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pInternalRepresentationCount\n            ', 'name': 'pInternalRepresentationCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pInternalRepresentationCount'], 'type': 'VkPipelineExecutableInternalRepresentationKHR', 'header': 'VkPipelineExecutableInternalRepresentationKHR* pInternalRepresentations\n        ', 'name': 'pInternalRepresentations'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetLineStippleEXT(\nVkCommandBuffer commandBuffer,\n uint32_t lineStippleFactor,\n uint16_t lineStipplePattern\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t lineStippleFactor\n            ', 'name': 'lineStippleFactor'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint16_t', 'header': 'uint16_t lineStipplePattern\n        ', 'name': 'lineStipplePattern'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetPhysicalDeviceToolProperties(\nVkPhysicalDevice physicalDevice,\n uint32_t* pToolCount,\n VkPhysicalDeviceToolProperties* pToolProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pToolCount\n            ', 'name': 'pToolCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pToolCount'], 'type': 'VkPhysicalDeviceToolProperties', 'header': 'VkPhysicalDeviceToolProperties* pToolProperties\n        ', 'name': 'pToolProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetPhysicalDeviceToolPropertiesEXT(\nVkPhysicalDevice physicalDevice,\n uint32_t* pToolCount,\n VkPhysicalDeviceToolProperties* pToolProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pToolCount\n            ', 'name': 'pToolCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pToolCount'], 'type': 'VkPhysicalDeviceToolProperties', 'header': 'VkPhysicalDeviceToolProperties* pToolProperties\n        ', 'name': 'pToolProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreateAccelerationStructureKHR(\nVkDevice                                           device,\n const VkAccelerationStructureCreateInfoKHR*        pCreateInfo,\n const VkAllocationCallbacks*       pAllocator,\n VkAccelerationStructureKHR*                        pAccelerationStructure\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice                                           device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAccelerationStructureCreateInfoKHR', 'header': 'const VkAccelerationStructureCreateInfoKHR*        pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks*       pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkAccelerationStructureKHR', 'header': 'VkAccelerationStructureKHR*                        pAccelerationStructure\n        ', 'name': 'pAccelerationStructure'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdBuildAccelerationStructuresKHR(\nVkCommandBuffer                                    commandBuffer,\n uint32_t infoCount,\n const VkAccelerationStructureBuildGeometryInfoKHR* pInfos,\n const VkAccelerationStructureBuildRangeInfoKHR* const* ppBuildRangeInfos\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer                                    commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t infoCount\n            ', 'name': 'infoCount'}, {'const': True, 'num_indirection': 1, 'length': ['infoCount'], 'type': 'VkAccelerationStructureBuildGeometryInfoKHR', 'header': 'const VkAccelerationStructureBuildGeometryInfoKHR* pInfos\n            ', 'name': 'pInfos'}, {'const': True, 'num_indirection': 2, 'length': ['infoCount'], 'type': 'VkAccelerationStructureBuildRangeInfoKHR', 'header': 'const VkAccelerationStructureBuildRangeInfoKHR* const* ppBuildRangeInfos\n        ', 'name': 'ppBuildRangeInfos'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdBuildAccelerationStructuresIndirectKHR(\nVkCommandBuffer                  commandBuffer,\n uint32_t                                           infoCount,\n const VkAccelerationStructureBuildGeometryInfoKHR* pInfos,\n const VkDeviceAddress*             pIndirectDeviceAddresses,\n const uint32_t*                    pIndirectStrides,\n const uint32_t* const*             ppMaxPrimitiveCounts\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer                  commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t                                           infoCount\n            ', 'name': 'infoCount'}, {'const': True, 'num_indirection': 1, 'length': ['infoCount'], 'type': 'VkAccelerationStructureBuildGeometryInfoKHR', 'header': 'const VkAccelerationStructureBuildGeometryInfoKHR* pInfos\n            ', 'name': 'pInfos'}, {'const': True, 'num_indirection': 1, 'length': ['infoCount'], 'type': 'VkDeviceAddress', 'header': 'const VkDeviceAddress*             pIndirectDeviceAddresses\n            ', 'name': 'pIndirectDeviceAddresses'}, {'const': True, 'num_indirection': 1, 'length': ['infoCount'], 'type': 'uint32_t', 'header': 'const uint32_t*                    pIndirectStrides\n            ', 'name': 'pIndirectStrides'}, {'const': True, 'num_indirection': 2, 'length': ['infoCount'], 'type': 'uint32_t', 'header': 'const uint32_t* const*             ppMaxPrimitiveCounts\n        ', 'name': 'ppMaxPrimitiveCounts'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkBuildAccelerationStructuresKHR(\nVkDevice                                           device,\n VkDeferredOperationKHR deferredOperation,\n uint32_t infoCount,\n const VkAccelerationStructureBuildGeometryInfoKHR* pInfos,\n const VkAccelerationStructureBuildRangeInfoKHR* const* ppBuildRangeInfos\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice                                           device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeferredOperationKHR', 'header': 'VkDeferredOperationKHR deferredOperation\n            ', 'name': 'deferredOperation'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t infoCount\n            ', 'name': 'infoCount'}, {'const': True, 'num_indirection': 1, 'length': ['infoCount'], 'type': 'VkAccelerationStructureBuildGeometryInfoKHR', 'header': 'const VkAccelerationStructureBuildGeometryInfoKHR* pInfos\n            ', 'name': 'pInfos'}, {'const': True, 'num_indirection': 2, 'length': ['infoCount'], 'type': 'VkAccelerationStructureBuildRangeInfoKHR', 'header': 'const VkAccelerationStructureBuildRangeInfoKHR* const* ppBuildRangeInfos\n        ', 'name': 'ppBuildRangeInfos'}]}(json data);
void handle_{'sync': False, 'type': 'VkDeviceAddress', 'num_indirection': 0, 'header': 'VkDeviceAddress funcpointer_vkGetAccelerationStructureDeviceAddressKHR(\nVkDevice device,\n const VkAccelerationStructureDeviceAddressInfoKHR* pInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAccelerationStructureDeviceAddressInfoKHR', 'header': 'const VkAccelerationStructureDeviceAddressInfoKHR* pInfo\n        ', 'name': 'pInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreateDeferredOperationKHR(\nVkDevice device,\n const VkAllocationCallbacks* pAllocator,\n VkDeferredOperationKHR* pDeferredOperation\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkDeferredOperationKHR', 'header': 'VkDeferredOperationKHR* pDeferredOperation\n        ', 'name': 'pDeferredOperation'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkDestroyDeferredOperationKHR(\nVkDevice device,\n VkDeferredOperationKHR operation,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeferredOperationKHR', 'header': 'VkDeferredOperationKHR operation\n            ', 'name': 'operation'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'uint32_t', 'num_indirection': 0, 'header': 'uint32_t funcpointer_vkGetDeferredOperationMaxConcurrencyKHR(\nVkDevice device,\n VkDeferredOperationKHR operation\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeferredOperationKHR', 'header': 'VkDeferredOperationKHR operation\n        ', 'name': 'operation'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetDeferredOperationResultKHR(\nVkDevice device,\n VkDeferredOperationKHR operation\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeferredOperationKHR', 'header': 'VkDeferredOperationKHR operation\n        ', 'name': 'operation'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkDeferredOperationJoinKHR(\nVkDevice device,\n VkDeferredOperationKHR operation\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeferredOperationKHR', 'header': 'VkDeferredOperationKHR operation\n        ', 'name': 'operation'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetPipelineIndirectMemoryRequirementsNV(\nVkDevice device,\n const VkComputePipelineCreateInfo* pCreateInfo,\n VkMemoryRequirements2* pMemoryRequirements\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkComputePipelineCreateInfo', 'header': 'const VkComputePipelineCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkMemoryRequirements2', 'header': 'VkMemoryRequirements2* pMemoryRequirements\n        ', 'name': 'pMemoryRequirements'}]}(json data);
void handle_{'sync': False, 'type': 'VkDeviceAddress', 'num_indirection': 0, 'header': 'VkDeviceAddress funcpointer_vkGetPipelineIndirectDeviceAddressNV(\nVkDevice device,\n const VkPipelineIndirectDeviceAddressInfoNV* pInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPipelineIndirectDeviceAddressInfoNV', 'header': 'const VkPipelineIndirectDeviceAddressInfoNV* pInfo\n        ', 'name': 'pInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetCullMode(\nVkCommandBuffer commandBuffer,\n VkCullModeFlags cullMode\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCullModeFlags', 'header': 'VkCullModeFlags cullMode\n        ', 'name': 'cullMode'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetCullModeEXT(\nVkCommandBuffer commandBuffer,\n VkCullModeFlags cullMode\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCullModeFlags', 'header': 'VkCullModeFlags cullMode\n        ', 'name': 'cullMode'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetFrontFace(\nVkCommandBuffer commandBuffer,\n VkFrontFace frontFace\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkFrontFace', 'header': 'VkFrontFace frontFace\n        ', 'name': 'frontFace'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetFrontFaceEXT(\nVkCommandBuffer commandBuffer,\n VkFrontFace frontFace\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkFrontFace', 'header': 'VkFrontFace frontFace\n        ', 'name': 'frontFace'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetPrimitiveTopology(\nVkCommandBuffer commandBuffer,\n VkPrimitiveTopology primitiveTopology\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPrimitiveTopology', 'header': 'VkPrimitiveTopology primitiveTopology\n        ', 'name': 'primitiveTopology'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetPrimitiveTopologyEXT(\nVkCommandBuffer commandBuffer,\n VkPrimitiveTopology primitiveTopology\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPrimitiveTopology', 'header': 'VkPrimitiveTopology primitiveTopology\n        ', 'name': 'primitiveTopology'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetViewportWithCount(\nVkCommandBuffer commandBuffer,\n uint32_t viewportCount,\n const VkViewport* pViewports\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t viewportCount\n            ', 'name': 'viewportCount'}, {'const': True, 'num_indirection': 1, 'length': ['viewportCount'], 'type': 'VkViewport', 'header': 'const VkViewport* pViewports\n        ', 'name': 'pViewports'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetViewportWithCountEXT(\nVkCommandBuffer commandBuffer,\n uint32_t viewportCount,\n const VkViewport* pViewports\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t viewportCount\n            ', 'name': 'viewportCount'}, {'const': True, 'num_indirection': 1, 'length': ['viewportCount'], 'type': 'VkViewport', 'header': 'const VkViewport* pViewports\n        ', 'name': 'pViewports'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetScissorWithCount(\nVkCommandBuffer commandBuffer,\n uint32_t scissorCount,\n const VkRect2D* pScissors\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t scissorCount\n            ', 'name': 'scissorCount'}, {'const': True, 'num_indirection': 1, 'length': ['scissorCount'], 'type': 'VkRect2D', 'header': 'const VkRect2D* pScissors\n        ', 'name': 'pScissors'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetScissorWithCountEXT(\nVkCommandBuffer commandBuffer,\n uint32_t scissorCount,\n const VkRect2D* pScissors\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t scissorCount\n            ', 'name': 'scissorCount'}, {'const': True, 'num_indirection': 1, 'length': ['scissorCount'], 'type': 'VkRect2D', 'header': 'const VkRect2D* pScissors\n        ', 'name': 'pScissors'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdBindIndexBuffer2KHR(\nVkCommandBuffer commandBuffer,\n VkBuffer buffer,\n VkDeviceSize offset,\n VkDeviceSize size,\n VkIndexType indexType\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer buffer\n            ', 'name': 'buffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize offset\n            ', 'name': 'offset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize size\n            ', 'name': 'size'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkIndexType', 'header': 'VkIndexType indexType\n        ', 'name': 'indexType'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdBindVertexBuffers2(\nVkCommandBuffer commandBuffer,\n uint32_t firstBinding,\n uint32_t bindingCount,\n const VkBuffer* pBuffers,\n const VkDeviceSize* pOffsets,\n const VkDeviceSize* pSizes,\n const VkDeviceSize* pStrides\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstBinding\n            ', 'name': 'firstBinding'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t bindingCount\n            ', 'name': 'bindingCount'}, {'const': True, 'num_indirection': 1, 'length': ['bindingCount'], 'type': 'VkBuffer', 'header': 'const VkBuffer* pBuffers\n            ', 'name': 'pBuffers'}, {'const': True, 'num_indirection': 1, 'length': ['bindingCount'], 'type': 'VkDeviceSize', 'header': 'const VkDeviceSize* pOffsets\n            ', 'name': 'pOffsets'}, {'const': True, 'num_indirection': 1, 'length': ['bindingCount'], 'type': 'VkDeviceSize', 'header': 'const VkDeviceSize* pSizes\n            ', 'name': 'pSizes'}, {'const': True, 'num_indirection': 1, 'length': ['bindingCount'], 'type': 'VkDeviceSize', 'header': 'const VkDeviceSize* pStrides\n        ', 'name': 'pStrides'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdBindVertexBuffers2EXT(\nVkCommandBuffer commandBuffer,\n uint32_t firstBinding,\n uint32_t bindingCount,\n const VkBuffer* pBuffers,\n const VkDeviceSize* pOffsets,\n const VkDeviceSize* pSizes,\n const VkDeviceSize* pStrides\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstBinding\n            ', 'name': 'firstBinding'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t bindingCount\n            ', 'name': 'bindingCount'}, {'const': True, 'num_indirection': 1, 'length': ['bindingCount'], 'type': 'VkBuffer', 'header': 'const VkBuffer* pBuffers\n            ', 'name': 'pBuffers'}, {'const': True, 'num_indirection': 1, 'length': ['bindingCount'], 'type': 'VkDeviceSize', 'header': 'const VkDeviceSize* pOffsets\n            ', 'name': 'pOffsets'}, {'const': True, 'num_indirection': 1, 'length': ['bindingCount'], 'type': 'VkDeviceSize', 'header': 'const VkDeviceSize* pSizes\n            ', 'name': 'pSizes'}, {'const': True, 'num_indirection': 1, 'length': ['bindingCount'], 'type': 'VkDeviceSize', 'header': 'const VkDeviceSize* pStrides\n        ', 'name': 'pStrides'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetDepthTestEnable(\nVkCommandBuffer commandBuffer,\n VkBool32 depthTestEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 depthTestEnable\n        ', 'name': 'depthTestEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetDepthTestEnableEXT(\nVkCommandBuffer commandBuffer,\n VkBool32 depthTestEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 depthTestEnable\n        ', 'name': 'depthTestEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetDepthWriteEnable(\nVkCommandBuffer commandBuffer,\n VkBool32 depthWriteEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 depthWriteEnable\n        ', 'name': 'depthWriteEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetDepthWriteEnableEXT(\nVkCommandBuffer commandBuffer,\n VkBool32 depthWriteEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 depthWriteEnable\n        ', 'name': 'depthWriteEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetDepthCompareOp(\nVkCommandBuffer commandBuffer,\n VkCompareOp depthCompareOp\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCompareOp', 'header': 'VkCompareOp depthCompareOp\n        ', 'name': 'depthCompareOp'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetDepthCompareOpEXT(\nVkCommandBuffer commandBuffer,\n VkCompareOp depthCompareOp\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCompareOp', 'header': 'VkCompareOp depthCompareOp\n        ', 'name': 'depthCompareOp'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetDepthBoundsTestEnable(\nVkCommandBuffer commandBuffer,\n VkBool32 depthBoundsTestEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 depthBoundsTestEnable\n        ', 'name': 'depthBoundsTestEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetDepthBoundsTestEnableEXT(\nVkCommandBuffer commandBuffer,\n VkBool32 depthBoundsTestEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 depthBoundsTestEnable\n        ', 'name': 'depthBoundsTestEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetStencilTestEnable(\nVkCommandBuffer commandBuffer,\n VkBool32 stencilTestEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 stencilTestEnable\n        ', 'name': 'stencilTestEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetStencilTestEnableEXT(\nVkCommandBuffer commandBuffer,\n VkBool32 stencilTestEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 stencilTestEnable\n        ', 'name': 'stencilTestEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetStencilOp(\nVkCommandBuffer commandBuffer,\n VkStencilFaceFlags faceMask,\n VkStencilOp failOp,\n VkStencilOp passOp,\n VkStencilOp depthFailOp,\n VkCompareOp compareOp\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkStencilFaceFlags', 'header': 'VkStencilFaceFlags faceMask\n            ', 'name': 'faceMask'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkStencilOp', 'header': 'VkStencilOp failOp\n            ', 'name': 'failOp'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkStencilOp', 'header': 'VkStencilOp passOp\n            ', 'name': 'passOp'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkStencilOp', 'header': 'VkStencilOp depthFailOp\n            ', 'name': 'depthFailOp'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCompareOp', 'header': 'VkCompareOp compareOp\n        ', 'name': 'compareOp'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetStencilOpEXT(\nVkCommandBuffer commandBuffer,\n VkStencilFaceFlags faceMask,\n VkStencilOp failOp,\n VkStencilOp passOp,\n VkStencilOp depthFailOp,\n VkCompareOp compareOp\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkStencilFaceFlags', 'header': 'VkStencilFaceFlags faceMask\n            ', 'name': 'faceMask'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkStencilOp', 'header': 'VkStencilOp failOp\n            ', 'name': 'failOp'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkStencilOp', 'header': 'VkStencilOp passOp\n            ', 'name': 'passOp'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkStencilOp', 'header': 'VkStencilOp depthFailOp\n            ', 'name': 'depthFailOp'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCompareOp', 'header': 'VkCompareOp compareOp\n        ', 'name': 'compareOp'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetPatchControlPointsEXT(\nVkCommandBuffer commandBuffer,\n uint32_t patchControlPoints\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t patchControlPoints\n        ', 'name': 'patchControlPoints'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetRasterizerDiscardEnable(\nVkCommandBuffer commandBuffer,\n VkBool32 rasterizerDiscardEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 rasterizerDiscardEnable\n        ', 'name': 'rasterizerDiscardEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetRasterizerDiscardEnableEXT(\nVkCommandBuffer commandBuffer,\n VkBool32 rasterizerDiscardEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 rasterizerDiscardEnable\n        ', 'name': 'rasterizerDiscardEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetDepthBiasEnable(\nVkCommandBuffer commandBuffer,\n VkBool32 depthBiasEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 depthBiasEnable\n        ', 'name': 'depthBiasEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetDepthBiasEnableEXT(\nVkCommandBuffer commandBuffer,\n VkBool32 depthBiasEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 depthBiasEnable\n        ', 'name': 'depthBiasEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetLogicOpEXT(\nVkCommandBuffer commandBuffer,\n VkLogicOp logicOp\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkLogicOp', 'header': 'VkLogicOp logicOp\n        ', 'name': 'logicOp'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetPrimitiveRestartEnable(\nVkCommandBuffer commandBuffer,\n VkBool32 primitiveRestartEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 primitiveRestartEnable\n        ', 'name': 'primitiveRestartEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetPrimitiveRestartEnableEXT(\nVkCommandBuffer commandBuffer,\n VkBool32 primitiveRestartEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 primitiveRestartEnable\n        ', 'name': 'primitiveRestartEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetTessellationDomainOriginEXT(\nVkCommandBuffer commandBuffer,\n VkTessellationDomainOrigin domainOrigin\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkTessellationDomainOrigin', 'header': 'VkTessellationDomainOrigin domainOrigin\n        ', 'name': 'domainOrigin'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetDepthClampEnableEXT(\nVkCommandBuffer commandBuffer,\n VkBool32 depthClampEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 depthClampEnable\n        ', 'name': 'depthClampEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetPolygonModeEXT(\nVkCommandBuffer commandBuffer,\n VkPolygonMode polygonMode\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPolygonMode', 'header': 'VkPolygonMode polygonMode\n        ', 'name': 'polygonMode'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetRasterizationSamplesEXT(\nVkCommandBuffer commandBuffer,\n VkSampleCountFlagBits  rasterizationSamples\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSampleCountFlagBits', 'header': 'VkSampleCountFlagBits  rasterizationSamples\n        ', 'name': 'rasterizationSamples'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetSampleMaskEXT(\nVkCommandBuffer commandBuffer,\n VkSampleCountFlagBits  samples,\n const VkSampleMask*    pSampleMask\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSampleCountFlagBits', 'header': 'VkSampleCountFlagBits  samples\n            ', 'name': 'samples'}, {'const': True, 'num_indirection': 1, 'length': ['(samples + 31) / 32'], 'type': 'VkSampleMask', 'header': 'const VkSampleMask*    pSampleMask\n        ', 'name': 'pSampleMask'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetAlphaToCoverageEnableEXT(\nVkCommandBuffer commandBuffer,\n VkBool32 alphaToCoverageEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 alphaToCoverageEnable\n        ', 'name': 'alphaToCoverageEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetAlphaToOneEnableEXT(\nVkCommandBuffer commandBuffer,\n VkBool32 alphaToOneEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 alphaToOneEnable\n        ', 'name': 'alphaToOneEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetLogicOpEnableEXT(\nVkCommandBuffer commandBuffer,\n VkBool32 logicOpEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 logicOpEnable\n        ', 'name': 'logicOpEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetColorBlendEnableEXT(\nVkCommandBuffer commandBuffer,\n uint32_t firstAttachment,\n uint32_t attachmentCount,\n const VkBool32* pColorBlendEnables\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstAttachment\n            ', 'name': 'firstAttachment'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t attachmentCount\n            ', 'name': 'attachmentCount'}, {'const': True, 'num_indirection': 1, 'length': ['attachmentCount'], 'type': 'VkBool32', 'header': 'const VkBool32* pColorBlendEnables\n        ', 'name': 'pColorBlendEnables'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetColorBlendEquationEXT(\nVkCommandBuffer commandBuffer,\n uint32_t firstAttachment,\n uint32_t attachmentCount,\n const VkColorBlendEquationEXT* pColorBlendEquations\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstAttachment\n            ', 'name': 'firstAttachment'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t attachmentCount\n            ', 'name': 'attachmentCount'}, {'const': True, 'num_indirection': 1, 'length': ['attachmentCount'], 'type': 'VkColorBlendEquationEXT', 'header': 'const VkColorBlendEquationEXT* pColorBlendEquations\n        ', 'name': 'pColorBlendEquations'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetColorWriteMaskEXT(\nVkCommandBuffer commandBuffer,\n uint32_t firstAttachment,\n uint32_t attachmentCount,\n const VkColorComponentFlags* pColorWriteMasks\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstAttachment\n            ', 'name': 'firstAttachment'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t attachmentCount\n            ', 'name': 'attachmentCount'}, {'const': True, 'num_indirection': 1, 'length': ['attachmentCount'], 'type': 'VkColorComponentFlags', 'header': 'const VkColorComponentFlags* pColorWriteMasks\n        ', 'name': 'pColorWriteMasks'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetRasterizationStreamEXT(\nVkCommandBuffer commandBuffer,\n uint32_t rasterizationStream\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t rasterizationStream\n        ', 'name': 'rasterizationStream'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetConservativeRasterizationModeEXT(\nVkCommandBuffer commandBuffer,\n VkConservativeRasterizationModeEXT conservativeRasterizationMode\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkConservativeRasterizationModeEXT', 'header': 'VkConservativeRasterizationModeEXT conservativeRasterizationMode\n        ', 'name': 'conservativeRasterizationMode'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetExtraPrimitiveOverestimationSizeEXT(\nVkCommandBuffer commandBuffer,\n float extraPrimitiveOverestimationSize\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'float', 'header': 'float extraPrimitiveOverestimationSize\n        ', 'name': 'extraPrimitiveOverestimationSize'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetDepthClipEnableEXT(\nVkCommandBuffer commandBuffer,\n VkBool32 depthClipEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 depthClipEnable\n        ', 'name': 'depthClipEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetSampleLocationsEnableEXT(\nVkCommandBuffer commandBuffer,\n VkBool32 sampleLocationsEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 sampleLocationsEnable\n        ', 'name': 'sampleLocationsEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetColorBlendAdvancedEXT(\nVkCommandBuffer commandBuffer,\n uint32_t firstAttachment,\n uint32_t attachmentCount,\n const VkColorBlendAdvancedEXT* pColorBlendAdvanced\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstAttachment\n            ', 'name': 'firstAttachment'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t attachmentCount\n            ', 'name': 'attachmentCount'}, {'const': True, 'num_indirection': 1, 'length': ['attachmentCount'], 'type': 'VkColorBlendAdvancedEXT', 'header': 'const VkColorBlendAdvancedEXT* pColorBlendAdvanced\n        ', 'name': 'pColorBlendAdvanced'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetProvokingVertexModeEXT(\nVkCommandBuffer commandBuffer,\n VkProvokingVertexModeEXT provokingVertexMode\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkProvokingVertexModeEXT', 'header': 'VkProvokingVertexModeEXT provokingVertexMode\n        ', 'name': 'provokingVertexMode'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetLineRasterizationModeEXT(\nVkCommandBuffer commandBuffer,\n VkLineRasterizationModeEXT lineRasterizationMode\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkLineRasterizationModeEXT', 'header': 'VkLineRasterizationModeEXT lineRasterizationMode\n        ', 'name': 'lineRasterizationMode'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetLineStippleEnableEXT(\nVkCommandBuffer commandBuffer,\n VkBool32 stippledLineEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 stippledLineEnable\n        ', 'name': 'stippledLineEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetDepthClipNegativeOneToOneEXT(\nVkCommandBuffer commandBuffer,\n VkBool32 negativeOneToOne\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 negativeOneToOne\n        ', 'name': 'negativeOneToOne'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetViewportWScalingEnableNV(\nVkCommandBuffer commandBuffer,\n VkBool32 viewportWScalingEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 viewportWScalingEnable\n        ', 'name': 'viewportWScalingEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetViewportSwizzleNV(\nVkCommandBuffer commandBuffer,\n uint32_t firstViewport,\n uint32_t viewportCount,\n const VkViewportSwizzleNV* pViewportSwizzles\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstViewport\n            ', 'name': 'firstViewport'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t viewportCount\n            ', 'name': 'viewportCount'}, {'const': True, 'num_indirection': 1, 'length': ['viewportCount'], 'type': 'VkViewportSwizzleNV', 'header': 'const VkViewportSwizzleNV* pViewportSwizzles\n        ', 'name': 'pViewportSwizzles'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetCoverageToColorEnableNV(\nVkCommandBuffer commandBuffer,\n VkBool32 coverageToColorEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 coverageToColorEnable\n        ', 'name': 'coverageToColorEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetCoverageToColorLocationNV(\nVkCommandBuffer commandBuffer,\n uint32_t coverageToColorLocation\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t coverageToColorLocation\n        ', 'name': 'coverageToColorLocation'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetCoverageModulationModeNV(\nVkCommandBuffer commandBuffer,\n VkCoverageModulationModeNV coverageModulationMode\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCoverageModulationModeNV', 'header': 'VkCoverageModulationModeNV coverageModulationMode\n        ', 'name': 'coverageModulationMode'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetCoverageModulationTableEnableNV(\nVkCommandBuffer commandBuffer,\n VkBool32 coverageModulationTableEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 coverageModulationTableEnable\n        ', 'name': 'coverageModulationTableEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetCoverageModulationTableNV(\nVkCommandBuffer commandBuffer,\n uint32_t coverageModulationTableCount,\n const float* pCoverageModulationTable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t coverageModulationTableCount\n            ', 'name': 'coverageModulationTableCount'}, {'const': True, 'num_indirection': 1, 'length': ['coverageModulationTableCount'], 'type': 'float', 'header': 'const float* pCoverageModulationTable\n        ', 'name': 'pCoverageModulationTable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetShadingRateImageEnableNV(\nVkCommandBuffer commandBuffer,\n VkBool32 shadingRateImageEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 shadingRateImageEnable\n        ', 'name': 'shadingRateImageEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetCoverageReductionModeNV(\nVkCommandBuffer commandBuffer,\n VkCoverageReductionModeNV coverageReductionMode\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCoverageReductionModeNV', 'header': 'VkCoverageReductionModeNV coverageReductionMode\n        ', 'name': 'coverageReductionMode'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetRepresentativeFragmentTestEnableNV(\nVkCommandBuffer commandBuffer,\n VkBool32 representativeFragmentTestEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 representativeFragmentTestEnable\n        ', 'name': 'representativeFragmentTestEnable'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreatePrivateDataSlot(\nVkDevice device,\n const VkPrivateDataSlotCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkPrivateDataSlot* pPrivateDataSlot\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPrivateDataSlotCreateInfo', 'header': 'const VkPrivateDataSlotCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkPrivateDataSlot', 'header': 'VkPrivateDataSlot* pPrivateDataSlot\n        ', 'name': 'pPrivateDataSlot'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreatePrivateDataSlotEXT(\nVkDevice device,\n const VkPrivateDataSlotCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkPrivateDataSlot* pPrivateDataSlot\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPrivateDataSlotCreateInfo', 'header': 'const VkPrivateDataSlotCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkPrivateDataSlot', 'header': 'VkPrivateDataSlot* pPrivateDataSlot\n        ', 'name': 'pPrivateDataSlot'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkDestroyPrivateDataSlot(\nVkDevice device,\n VkPrivateDataSlot privateDataSlot,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPrivateDataSlot', 'header': 'VkPrivateDataSlot privateDataSlot\n            ', 'name': 'privateDataSlot'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkDestroyPrivateDataSlotEXT(\nVkDevice device,\n VkPrivateDataSlot privateDataSlot,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPrivateDataSlot', 'header': 'VkPrivateDataSlot privateDataSlot\n            ', 'name': 'privateDataSlot'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkSetPrivateData(\nVkDevice device,\n VkObjectType objectType,\n uint64_t objectHandle,\n VkPrivateDataSlot privateDataSlot,\n uint64_t data\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkObjectType', 'header': 'VkObjectType objectType\n            ', 'name': 'objectType'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint64_t', 'header': 'uint64_t objectHandle\n            ', 'name': 'objectHandle'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPrivateDataSlot', 'header': 'VkPrivateDataSlot privateDataSlot\n            ', 'name': 'privateDataSlot'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint64_t', 'header': 'uint64_t data\n        ', 'name': 'data'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkSetPrivateDataEXT(\nVkDevice device,\n VkObjectType objectType,\n uint64_t objectHandle,\n VkPrivateDataSlot privateDataSlot,\n uint64_t data\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkObjectType', 'header': 'VkObjectType objectType\n            ', 'name': 'objectType'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint64_t', 'header': 'uint64_t objectHandle\n            ', 'name': 'objectHandle'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPrivateDataSlot', 'header': 'VkPrivateDataSlot privateDataSlot\n            ', 'name': 'privateDataSlot'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint64_t', 'header': 'uint64_t data\n        ', 'name': 'data'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetPrivateData(\nVkDevice device,\n VkObjectType objectType,\n uint64_t objectHandle,\n VkPrivateDataSlot privateDataSlot,\n uint64_t* pData\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkObjectType', 'header': 'VkObjectType objectType\n            ', 'name': 'objectType'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint64_t', 'header': 'uint64_t objectHandle\n            ', 'name': 'objectHandle'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPrivateDataSlot', 'header': 'VkPrivateDataSlot privateDataSlot\n            ', 'name': 'privateDataSlot'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint64_t', 'header': 'uint64_t* pData\n        ', 'name': 'pData'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetPrivateDataEXT(\nVkDevice device,\n VkObjectType objectType,\n uint64_t objectHandle,\n VkPrivateDataSlot privateDataSlot,\n uint64_t* pData\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkObjectType', 'header': 'VkObjectType objectType\n            ', 'name': 'objectType'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint64_t', 'header': 'uint64_t objectHandle\n            ', 'name': 'objectHandle'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPrivateDataSlot', 'header': 'VkPrivateDataSlot privateDataSlot\n            ', 'name': 'privateDataSlot'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint64_t', 'header': 'uint64_t* pData\n        ', 'name': 'pData'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdCopyBuffer2(\nVkCommandBuffer commandBuffer,\n const VkCopyBufferInfo2* pCopyBufferInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCopyBufferInfo2', 'header': 'const VkCopyBufferInfo2* pCopyBufferInfo\n        ', 'name': 'pCopyBufferInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdCopyBuffer2KHR(\nVkCommandBuffer commandBuffer,\n const VkCopyBufferInfo2* pCopyBufferInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCopyBufferInfo2', 'header': 'const VkCopyBufferInfo2* pCopyBufferInfo\n        ', 'name': 'pCopyBufferInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdCopyImage2(\nVkCommandBuffer commandBuffer,\n const VkCopyImageInfo2* pCopyImageInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCopyImageInfo2', 'header': 'const VkCopyImageInfo2* pCopyImageInfo\n        ', 'name': 'pCopyImageInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdCopyImage2KHR(\nVkCommandBuffer commandBuffer,\n const VkCopyImageInfo2* pCopyImageInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCopyImageInfo2', 'header': 'const VkCopyImageInfo2* pCopyImageInfo\n        ', 'name': 'pCopyImageInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdBlitImage2(\nVkCommandBuffer commandBuffer,\n const VkBlitImageInfo2* pBlitImageInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkBlitImageInfo2', 'header': 'const VkBlitImageInfo2* pBlitImageInfo\n        ', 'name': 'pBlitImageInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdBlitImage2KHR(\nVkCommandBuffer commandBuffer,\n const VkBlitImageInfo2* pBlitImageInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkBlitImageInfo2', 'header': 'const VkBlitImageInfo2* pBlitImageInfo\n        ', 'name': 'pBlitImageInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdCopyBufferToImage2(\nVkCommandBuffer commandBuffer,\n const VkCopyBufferToImageInfo2* pCopyBufferToImageInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCopyBufferToImageInfo2', 'header': 'const VkCopyBufferToImageInfo2* pCopyBufferToImageInfo\n        ', 'name': 'pCopyBufferToImageInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdCopyBufferToImage2KHR(\nVkCommandBuffer commandBuffer,\n const VkCopyBufferToImageInfo2* pCopyBufferToImageInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCopyBufferToImageInfo2', 'header': 'const VkCopyBufferToImageInfo2* pCopyBufferToImageInfo\n        ', 'name': 'pCopyBufferToImageInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdCopyImageToBuffer2(\nVkCommandBuffer commandBuffer,\n const VkCopyImageToBufferInfo2* pCopyImageToBufferInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCopyImageToBufferInfo2', 'header': 'const VkCopyImageToBufferInfo2* pCopyImageToBufferInfo\n        ', 'name': 'pCopyImageToBufferInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdCopyImageToBuffer2KHR(\nVkCommandBuffer commandBuffer,\n const VkCopyImageToBufferInfo2* pCopyImageToBufferInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCopyImageToBufferInfo2', 'header': 'const VkCopyImageToBufferInfo2* pCopyImageToBufferInfo\n        ', 'name': 'pCopyImageToBufferInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdResolveImage2(\nVkCommandBuffer commandBuffer,\n const VkResolveImageInfo2* pResolveImageInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkResolveImageInfo2', 'header': 'const VkResolveImageInfo2* pResolveImageInfo\n        ', 'name': 'pResolveImageInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdResolveImage2KHR(\nVkCommandBuffer commandBuffer,\n const VkResolveImageInfo2* pResolveImageInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkResolveImageInfo2', 'header': 'const VkResolveImageInfo2* pResolveImageInfo\n        ', 'name': 'pResolveImageInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetFragmentShadingRateKHR(\nVkCommandBuffer           commandBuffer,\n const VkExtent2D*                           pFragmentSize,\n const VkFragmentShadingRateCombinerOpKHR    combinerOps[2]\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer           commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkExtent2D', 'header': 'const VkExtent2D*                           pFragmentSize\n            ', 'name': 'pFragmentSize'}, {'const': True, 'num_indirection': 0, 'length': ['2'], 'type': 'VkFragmentShadingRateCombinerOpKHR', 'header': 'const VkFragmentShadingRateCombinerOpKHR    combinerOps[2]\n        ', 'name': 'combinerOps'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetPhysicalDeviceFragmentShadingRatesKHR(\nVkPhysicalDevice physicalDevice,\n uint32_t* pFragmentShadingRateCount,\n VkPhysicalDeviceFragmentShadingRateKHR* pFragmentShadingRates\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pFragmentShadingRateCount\n            ', 'name': 'pFragmentShadingRateCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pFragmentShadingRateCount'], 'type': 'VkPhysicalDeviceFragmentShadingRateKHR', 'header': 'VkPhysicalDeviceFragmentShadingRateKHR* pFragmentShadingRates\n        ', 'name': 'pFragmentShadingRates'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetFragmentShadingRateEnumNV(\nVkCommandBuffer           commandBuffer,\n VkFragmentShadingRateNV                     shadingRate,\n const VkFragmentShadingRateCombinerOpKHR    combinerOps[2]\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer           commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkFragmentShadingRateNV', 'header': 'VkFragmentShadingRateNV                     shadingRate\n            ', 'name': 'shadingRate'}, {'const': True, 'num_indirection': 0, 'length': ['2'], 'type': 'VkFragmentShadingRateCombinerOpKHR', 'header': 'const VkFragmentShadingRateCombinerOpKHR    combinerOps[2]\n        ', 'name': 'combinerOps'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetAccelerationStructureBuildSizesKHR(\nVkDevice                                            device,\n VkAccelerationStructureBuildTypeKHR                 buildType,\n const VkAccelerationStructureBuildGeometryInfoKHR*  pBuildInfo,\n const uint32_t*  pMaxPrimitiveCounts,\n VkAccelerationStructureBuildSizesInfoKHR*           pSizeInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice                                            device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkAccelerationStructureBuildTypeKHR', 'header': 'VkAccelerationStructureBuildTypeKHR                 buildType\n            ', 'name': 'buildType'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAccelerationStructureBuildGeometryInfoKHR', 'header': 'const VkAccelerationStructureBuildGeometryInfoKHR*  pBuildInfo\n            ', 'name': 'pBuildInfo'}, {'const': True, 'num_indirection': 1, 'length': ['pBuildInfo->geometryCount'], 'type': 'uint32_t', 'header': 'const uint32_t*  pMaxPrimitiveCounts\n            ', 'name': 'pMaxPrimitiveCounts'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkAccelerationStructureBuildSizesInfoKHR', 'header': 'VkAccelerationStructureBuildSizesInfoKHR*           pSizeInfo\n        ', 'name': 'pSizeInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetVertexInputEXT(\nVkCommandBuffer commandBuffer,\n uint32_t vertexBindingDescriptionCount,\n const VkVertexInputBindingDescription2EXT* pVertexBindingDescriptions,\n uint32_t vertexAttributeDescriptionCount,\n const VkVertexInputAttributeDescription2EXT* pVertexAttributeDescriptions\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t vertexBindingDescriptionCount\n            ', 'name': 'vertexBindingDescriptionCount'}, {'const': True, 'num_indirection': 1, 'length': ['vertexBindingDescriptionCount'], 'type': 'VkVertexInputBindingDescription2EXT', 'header': 'const VkVertexInputBindingDescription2EXT* pVertexBindingDescriptions\n            ', 'name': 'pVertexBindingDescriptions'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t vertexAttributeDescriptionCount\n            ', 'name': 'vertexAttributeDescriptionCount'}, {'const': True, 'num_indirection': 1, 'length': ['vertexAttributeDescriptionCount'], 'type': 'VkVertexInputAttributeDescription2EXT', 'header': 'const VkVertexInputAttributeDescription2EXT* pVertexAttributeDescriptions\n        ', 'name': 'pVertexAttributeDescriptions'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetColorWriteEnableEXT(\nVkCommandBuffer       commandBuffer,\n uint32_t                                attachmentCount,\n const VkBool32*   pColorWriteEnables\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer       commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t                                attachmentCount\n            ', 'name': 'attachmentCount'}, {'const': True, 'num_indirection': 1, 'length': ['attachmentCount'], 'type': 'VkBool32', 'header': 'const VkBool32*   pColorWriteEnables\n        ', 'name': 'pColorWriteEnables'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetEvent2(\nVkCommandBuffer                   commandBuffer,\n VkEvent                                             event,\n const VkDependencyInfo*                             pDependencyInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer                   commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkEvent', 'header': 'VkEvent                                             event\n            ', 'name': 'event'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDependencyInfo', 'header': 'const VkDependencyInfo*                             pDependencyInfo\n        ', 'name': 'pDependencyInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetEvent2KHR(\nVkCommandBuffer                   commandBuffer,\n VkEvent                                             event,\n const VkDependencyInfo*                             pDependencyInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer                   commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkEvent', 'header': 'VkEvent                                             event\n            ', 'name': 'event'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDependencyInfo', 'header': 'const VkDependencyInfo*                             pDependencyInfo\n        ', 'name': 'pDependencyInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdResetEvent2(\nVkCommandBuffer                   commandBuffer,\n VkEvent                                             event,\n VkPipelineStageFlags2               stageMask\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer                   commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkEvent', 'header': 'VkEvent                                             event\n            ', 'name': 'event'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineStageFlags2', 'header': 'VkPipelineStageFlags2               stageMask\n        ', 'name': 'stageMask'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdResetEvent2KHR(\nVkCommandBuffer                   commandBuffer,\n VkEvent                                             event,\n VkPipelineStageFlags2               stageMask\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer                   commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkEvent', 'header': 'VkEvent                                             event\n            ', 'name': 'event'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineStageFlags2', 'header': 'VkPipelineStageFlags2               stageMask\n        ', 'name': 'stageMask'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdWaitEvents2(\nVkCommandBuffer                   commandBuffer,\n uint32_t                                            eventCount,\n const VkEvent*                     pEvents,\n const VkDependencyInfo*            pDependencyInfos\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer                   commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t                                            eventCount\n            ', 'name': 'eventCount'}, {'const': True, 'num_indirection': 1, 'length': ['eventCount'], 'type': 'VkEvent', 'header': 'const VkEvent*                     pEvents\n            ', 'name': 'pEvents'}, {'const': True, 'num_indirection': 1, 'length': ['eventCount'], 'type': 'VkDependencyInfo', 'header': 'const VkDependencyInfo*            pDependencyInfos\n        ', 'name': 'pDependencyInfos'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdWaitEvents2KHR(\nVkCommandBuffer                   commandBuffer,\n uint32_t                                            eventCount,\n const VkEvent*                     pEvents,\n const VkDependencyInfo*            pDependencyInfos\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer                   commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t                                            eventCount\n            ', 'name': 'eventCount'}, {'const': True, 'num_indirection': 1, 'length': ['eventCount'], 'type': 'VkEvent', 'header': 'const VkEvent*                     pEvents\n            ', 'name': 'pEvents'}, {'const': True, 'num_indirection': 1, 'length': ['eventCount'], 'type': 'VkDependencyInfo', 'header': 'const VkDependencyInfo*            pDependencyInfos\n        ', 'name': 'pDependencyInfos'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdPipelineBarrier2(\nVkCommandBuffer                   commandBuffer,\n const VkDependencyInfo*                             pDependencyInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer                   commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDependencyInfo', 'header': 'const VkDependencyInfo*                             pDependencyInfo\n        ', 'name': 'pDependencyInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdPipelineBarrier2KHR(\nVkCommandBuffer                   commandBuffer,\n const VkDependencyInfo*                             pDependencyInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer                   commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDependencyInfo', 'header': 'const VkDependencyInfo*                             pDependencyInfo\n        ', 'name': 'pDependencyInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkQueueSubmit2(\nVkQueue                           queue,\n uint32_t                            submitCount,\n const VkSubmitInfo2*              pSubmits,\n VkFence           fence\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueue', 'header': 'VkQueue                           queue\n            ', 'name': 'queue'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t                            submitCount\n            ', 'name': 'submitCount'}, {'const': True, 'num_indirection': 1, 'length': ['submitCount'], 'type': 'VkSubmitInfo2', 'header': 'const VkSubmitInfo2*              pSubmits\n            ', 'name': 'pSubmits'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkFence', 'header': 'VkFence           fence\n        ', 'name': 'fence'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkQueueSubmit2KHR(\nVkQueue                           queue,\n uint32_t                            submitCount,\n const VkSubmitInfo2*              pSubmits,\n VkFence           fence\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueue', 'header': 'VkQueue                           queue\n            ', 'name': 'queue'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t                            submitCount\n            ', 'name': 'submitCount'}, {'const': True, 'num_indirection': 1, 'length': ['submitCount'], 'type': 'VkSubmitInfo2', 'header': 'const VkSubmitInfo2*              pSubmits\n            ', 'name': 'pSubmits'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkFence', 'header': 'VkFence           fence\n        ', 'name': 'fence'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdWriteTimestamp2(\nVkCommandBuffer                   commandBuffer,\n VkPipelineStageFlags2               stage,\n VkQueryPool                                         queryPool,\n uint32_t                                            query\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer                   commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineStageFlags2', 'header': 'VkPipelineStageFlags2               stage\n            ', 'name': 'stage'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryPool', 'header': 'VkQueryPool                                         queryPool\n            ', 'name': 'queryPool'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t                                            query\n        ', 'name': 'query'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdWriteTimestamp2KHR(\nVkCommandBuffer                   commandBuffer,\n VkPipelineStageFlags2               stage,\n VkQueryPool                                         queryPool,\n uint32_t                                            query\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer                   commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineStageFlags2', 'header': 'VkPipelineStageFlags2               stage\n            ', 'name': 'stage'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryPool', 'header': 'VkQueryPool                                         queryPool\n            ', 'name': 'queryPool'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t                                            query\n        ', 'name': 'query'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdWriteBufferMarker2AMD(\nVkCommandBuffer                   commandBuffer,\n VkPipelineStageFlags2               stage,\n VkBuffer                                            dstBuffer,\n VkDeviceSize                                        dstOffset,\n uint32_t                                            marker\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer                   commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineStageFlags2', 'header': 'VkPipelineStageFlags2               stage\n            ', 'name': 'stage'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer                                            dstBuffer\n            ', 'name': 'dstBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize                                        dstOffset\n            ', 'name': 'dstOffset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t                                            marker\n        ', 'name': 'marker'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetQueueCheckpointData2NV(\nVkQueue queue,\n uint32_t* pCheckpointDataCount,\n VkCheckpointData2NV* pCheckpointData\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueue', 'header': 'VkQueue queue\n            ', 'name': 'queue'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pCheckpointDataCount\n            ', 'name': 'pCheckpointDataCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pCheckpointDataCount'], 'type': 'VkCheckpointData2NV', 'header': 'VkCheckpointData2NV* pCheckpointData\n        ', 'name': 'pCheckpointData'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCopyMemoryToImageEXT(\nVkDevice device,\n const VkCopyMemoryToImageInfoEXT* pCopyMemoryToImageInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCopyMemoryToImageInfoEXT', 'header': 'const VkCopyMemoryToImageInfoEXT* pCopyMemoryToImageInfo\n        ', 'name': 'pCopyMemoryToImageInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCopyImageToMemoryEXT(\nVkDevice device,\n const VkCopyImageToMemoryInfoEXT* pCopyImageToMemoryInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCopyImageToMemoryInfoEXT', 'header': 'const VkCopyImageToMemoryInfoEXT* pCopyImageToMemoryInfo\n        ', 'name': 'pCopyImageToMemoryInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCopyImageToImageEXT(\nVkDevice device,\n const VkCopyImageToImageInfoEXT* pCopyImageToImageInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCopyImageToImageInfoEXT', 'header': 'const VkCopyImageToImageInfoEXT* pCopyImageToImageInfo\n        ', 'name': 'pCopyImageToImageInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkTransitionImageLayoutEXT(\nVkDevice device,\n uint32_t transitionCount,\n const VkHostImageLayoutTransitionInfoEXT* pTransitions\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t transitionCount\n            ', 'name': 'transitionCount'}, {'const': True, 'num_indirection': 1, 'length': ['transitionCount'], 'type': 'VkHostImageLayoutTransitionInfoEXT', 'header': 'const VkHostImageLayoutTransitionInfoEXT* pTransitions\n        ', 'name': 'pTransitions'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetPhysicalDeviceVideoCapabilitiesKHR(\nVkPhysicalDevice physicalDevice,\n const VkVideoProfileInfoKHR* pVideoProfile,\n VkVideoCapabilitiesKHR* pCapabilities\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkVideoProfileInfoKHR', 'header': 'const VkVideoProfileInfoKHR* pVideoProfile\n            ', 'name': 'pVideoProfile'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkVideoCapabilitiesKHR', 'header': 'VkVideoCapabilitiesKHR* pCapabilities\n        ', 'name': 'pCapabilities'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetPhysicalDeviceVideoFormatPropertiesKHR(\nVkPhysicalDevice physicalDevice,\n const VkPhysicalDeviceVideoFormatInfoKHR* pVideoFormatInfo,\n uint32_t* pVideoFormatPropertyCount,\n VkVideoFormatPropertiesKHR* pVideoFormatProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPhysicalDeviceVideoFormatInfoKHR', 'header': 'const VkPhysicalDeviceVideoFormatInfoKHR* pVideoFormatInfo\n            ', 'name': 'pVideoFormatInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pVideoFormatPropertyCount\n            ', 'name': 'pVideoFormatPropertyCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pVideoFormatPropertyCount'], 'type': 'VkVideoFormatPropertiesKHR', 'header': 'VkVideoFormatPropertiesKHR* pVideoFormatProperties\n        ', 'name': 'pVideoFormatProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreateVideoSessionKHR(\nVkDevice device,\n const VkVideoSessionCreateInfoKHR* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkVideoSessionKHR* pVideoSession\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkVideoSessionCreateInfoKHR', 'header': 'const VkVideoSessionCreateInfoKHR* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkVideoSessionKHR', 'header': 'VkVideoSessionKHR* pVideoSession\n        ', 'name': 'pVideoSession'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkDestroyVideoSessionKHR(\nVkDevice device,\n VkVideoSessionKHR videoSession,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkVideoSessionKHR', 'header': 'VkVideoSessionKHR videoSession\n            ', 'name': 'videoSession'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreateVideoSessionParametersKHR(\nVkDevice device,\n const VkVideoSessionParametersCreateInfoKHR* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkVideoSessionParametersKHR* pVideoSessionParameters\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkVideoSessionParametersCreateInfoKHR', 'header': 'const VkVideoSessionParametersCreateInfoKHR* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkVideoSessionParametersKHR', 'header': 'VkVideoSessionParametersKHR* pVideoSessionParameters\n        ', 'name': 'pVideoSessionParameters'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkUpdateVideoSessionParametersKHR(\nVkDevice device,\n VkVideoSessionParametersKHR videoSessionParameters,\n const VkVideoSessionParametersUpdateInfoKHR* pUpdateInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkVideoSessionParametersKHR', 'header': 'VkVideoSessionParametersKHR videoSessionParameters\n            ', 'name': 'videoSessionParameters'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkVideoSessionParametersUpdateInfoKHR', 'header': 'const VkVideoSessionParametersUpdateInfoKHR* pUpdateInfo\n        ', 'name': 'pUpdateInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkDestroyVideoSessionParametersKHR(\nVkDevice device,\n VkVideoSessionParametersKHR videoSessionParameters,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkVideoSessionParametersKHR', 'header': 'VkVideoSessionParametersKHR videoSessionParameters\n            ', 'name': 'videoSessionParameters'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetVideoSessionMemoryRequirementsKHR(\nVkDevice device,\n VkVideoSessionKHR videoSession,\n uint32_t* pMemoryRequirementsCount,\n VkVideoSessionMemoryRequirementsKHR* pMemoryRequirements\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkVideoSessionKHR', 'header': 'VkVideoSessionKHR videoSession\n            ', 'name': 'videoSession'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pMemoryRequirementsCount\n            ', 'name': 'pMemoryRequirementsCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pMemoryRequirementsCount'], 'type': 'VkVideoSessionMemoryRequirementsKHR', 'header': 'VkVideoSessionMemoryRequirementsKHR* pMemoryRequirements\n        ', 'name': 'pMemoryRequirements'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkBindVideoSessionMemoryKHR(\nVkDevice device,\n VkVideoSessionKHR videoSession,\n uint32_t bindSessionMemoryInfoCount,\n const VkBindVideoSessionMemoryInfoKHR* pBindSessionMemoryInfos\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkVideoSessionKHR', 'header': 'VkVideoSessionKHR videoSession\n            ', 'name': 'videoSession'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t bindSessionMemoryInfoCount\n            ', 'name': 'bindSessionMemoryInfoCount'}, {'const': True, 'num_indirection': 1, 'length': ['bindSessionMemoryInfoCount'], 'type': 'VkBindVideoSessionMemoryInfoKHR', 'header': 'const VkBindVideoSessionMemoryInfoKHR* pBindSessionMemoryInfos\n        ', 'name': 'pBindSessionMemoryInfos'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdDecodeVideoKHR(\nVkCommandBuffer commandBuffer,\n const VkVideoDecodeInfoKHR* pDecodeInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkVideoDecodeInfoKHR', 'header': 'const VkVideoDecodeInfoKHR* pDecodeInfo\n        ', 'name': 'pDecodeInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdBeginVideoCodingKHR(\nVkCommandBuffer commandBuffer,\n const VkVideoBeginCodingInfoKHR* pBeginInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkVideoBeginCodingInfoKHR', 'header': 'const VkVideoBeginCodingInfoKHR* pBeginInfo\n        ', 'name': 'pBeginInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdControlVideoCodingKHR(\nVkCommandBuffer commandBuffer,\n const VkVideoCodingControlInfoKHR* pCodingControlInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkVideoCodingControlInfoKHR', 'header': 'const VkVideoCodingControlInfoKHR* pCodingControlInfo\n        ', 'name': 'pCodingControlInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdEndVideoCodingKHR(\nVkCommandBuffer commandBuffer,\n const VkVideoEndCodingInfoKHR* pEndCodingInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkVideoEndCodingInfoKHR', 'header': 'const VkVideoEndCodingInfoKHR* pEndCodingInfo\n        ', 'name': 'pEndCodingInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdDecompressMemoryNV(\nVkCommandBuffer commandBuffer,\n uint32_t decompressRegionCount,\n const VkDecompressMemoryRegionNV* pDecompressMemoryRegions\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t decompressRegionCount\n            ', 'name': 'decompressRegionCount'}, {'const': True, 'num_indirection': 1, 'length': ['decompressRegionCount'], 'type': 'VkDecompressMemoryRegionNV', 'header': 'const VkDecompressMemoryRegionNV* pDecompressMemoryRegions\n        ', 'name': 'pDecompressMemoryRegions'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdDecompressMemoryIndirectCountNV(\nVkCommandBuffer commandBuffer,\n VkDeviceAddress indirectCommandsAddress,\n VkDeviceAddress indirectCommandsCountAddress,\n uint32_t stride\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceAddress', 'header': 'VkDeviceAddress indirectCommandsAddress\n            ', 'name': 'indirectCommandsAddress'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceAddress', 'header': 'VkDeviceAddress indirectCommandsCountAddress\n            ', 'name': 'indirectCommandsCountAddress'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t stride\n        ', 'name': 'stride'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreateCuModuleNVX(\nVkDevice device,\n const VkCuModuleCreateInfoNVX* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkCuModuleNVX* pModule\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCuModuleCreateInfoNVX', 'header': 'const VkCuModuleCreateInfoNVX* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkCuModuleNVX', 'header': 'VkCuModuleNVX* pModule\n        ', 'name': 'pModule'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreateCuFunctionNVX(\nVkDevice device,\n const VkCuFunctionCreateInfoNVX* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkCuFunctionNVX* pFunction\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCuFunctionCreateInfoNVX', 'header': 'const VkCuFunctionCreateInfoNVX* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkCuFunctionNVX', 'header': 'VkCuFunctionNVX* pFunction\n        ', 'name': 'pFunction'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkDestroyCuModuleNVX(\nVkDevice device,\n VkCuModuleNVX module,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCuModuleNVX', 'header': 'VkCuModuleNVX module\n            ', 'name': 'module'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkDestroyCuFunctionNVX(\nVkDevice device,\n VkCuFunctionNVX function,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCuFunctionNVX', 'header': 'VkCuFunctionNVX function\n            ', 'name': 'function'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdCuLaunchKernelNVX(\nVkCommandBuffer commandBuffer,\n const VkCuLaunchInfoNVX* pLaunchInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCuLaunchInfoNVX', 'header': 'const VkCuLaunchInfoNVX* pLaunchInfo\n        ', 'name': 'pLaunchInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetDescriptorSetLayoutSizeEXT(\nVkDevice device,\n VkDescriptorSetLayout layout,\n VkDeviceSize* pLayoutSizeInBytes\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDescriptorSetLayout', 'header': 'VkDescriptorSetLayout layout\n            ', 'name': 'layout'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize* pLayoutSizeInBytes\n        ', 'name': 'pLayoutSizeInBytes'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetDescriptorSetLayoutBindingOffsetEXT(\nVkDevice device,\n VkDescriptorSetLayout layout,\n uint32_t binding,\n VkDeviceSize* pOffset\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDescriptorSetLayout', 'header': 'VkDescriptorSetLayout layout\n            ', 'name': 'layout'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t binding\n            ', 'name': 'binding'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize* pOffset\n        ', 'name': 'pOffset'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetDescriptorEXT(\nVkDevice device,\n const VkDescriptorGetInfoEXT* pDescriptorInfo,\n size_t dataSize,\n void* pDescriptor\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDescriptorGetInfoEXT', 'header': 'const VkDescriptorGetInfoEXT* pDescriptorInfo\n            ', 'name': 'pDescriptorInfo'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'size_t', 'header': 'size_t dataSize\n            ', 'name': 'dataSize'}, {'const': False, 'num_indirection': 1, 'length': ['dataSize'], 'type': 'void', 'header': 'void* pDescriptor\n        ', 'name': 'pDescriptor'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdBindDescriptorBuffersEXT(\nVkCommandBuffer commandBuffer,\n uint32_t bufferCount,\n const VkDescriptorBufferBindingInfoEXT* pBindingInfos\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t bufferCount\n            ', 'name': 'bufferCount'}, {'const': True, 'num_indirection': 1, 'length': ['bufferCount'], 'type': 'VkDescriptorBufferBindingInfoEXT', 'header': 'const VkDescriptorBufferBindingInfoEXT* pBindingInfos\n        ', 'name': 'pBindingInfos'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetDescriptorBufferOffsetsEXT(\nVkCommandBuffer commandBuffer,\n VkPipelineBindPoint pipelineBindPoint,\n VkPipelineLayout layout,\n uint32_t firstSet,\n uint32_t setCount,\n const uint32_t* pBufferIndices,\n const VkDeviceSize* pOffsets\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineBindPoint', 'header': 'VkPipelineBindPoint pipelineBindPoint\n            ', 'name': 'pipelineBindPoint'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineLayout', 'header': 'VkPipelineLayout layout\n            ', 'name': 'layout'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstSet\n            ', 'name': 'firstSet'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t setCount\n            ', 'name': 'setCount'}, {'const': True, 'num_indirection': 1, 'length': ['setCount'], 'type': 'uint32_t', 'header': 'const uint32_t* pBufferIndices\n            ', 'name': 'pBufferIndices'}, {'const': True, 'num_indirection': 1, 'length': ['setCount'], 'type': 'VkDeviceSize', 'header': 'const VkDeviceSize* pOffsets\n        ', 'name': 'pOffsets'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdBindDescriptorBufferEmbeddedSamplersEXT(\nVkCommandBuffer commandBuffer,\n VkPipelineBindPoint pipelineBindPoint,\n VkPipelineLayout layout,\n uint32_t set\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineBindPoint', 'header': 'VkPipelineBindPoint pipelineBindPoint\n            ', 'name': 'pipelineBindPoint'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineLayout', 'header': 'VkPipelineLayout layout\n            ', 'name': 'layout'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t set\n        ', 'name': 'set'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetBufferOpaqueCaptureDescriptorDataEXT(\nVkDevice device,\n const VkBufferCaptureDescriptorDataInfoEXT* pInfo,\n void* pData\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkBufferCaptureDescriptorDataInfoEXT', 'header': 'const VkBufferCaptureDescriptorDataInfoEXT* pInfo\n            ', 'name': 'pInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'void', 'header': 'void* pData\n        ', 'name': 'pData'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetImageOpaqueCaptureDescriptorDataEXT(\nVkDevice device,\n const VkImageCaptureDescriptorDataInfoEXT* pInfo,\n void* pData\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkImageCaptureDescriptorDataInfoEXT', 'header': 'const VkImageCaptureDescriptorDataInfoEXT* pInfo\n            ', 'name': 'pInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'void', 'header': 'void* pData\n        ', 'name': 'pData'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetImageViewOpaqueCaptureDescriptorDataEXT(\nVkDevice device,\n const VkImageViewCaptureDescriptorDataInfoEXT* pInfo,\n void* pData\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkImageViewCaptureDescriptorDataInfoEXT', 'header': 'const VkImageViewCaptureDescriptorDataInfoEXT* pInfo\n            ', 'name': 'pInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'void', 'header': 'void* pData\n        ', 'name': 'pData'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetSamplerOpaqueCaptureDescriptorDataEXT(\nVkDevice device,\n const VkSamplerCaptureDescriptorDataInfoEXT* pInfo,\n void* pData\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkSamplerCaptureDescriptorDataInfoEXT', 'header': 'const VkSamplerCaptureDescriptorDataInfoEXT* pInfo\n            ', 'name': 'pInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'void', 'header': 'void* pData\n        ', 'name': 'pData'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT(\nVkDevice device,\n const VkAccelerationStructureCaptureDescriptorDataInfoEXT* pInfo,\n void* pData\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAccelerationStructureCaptureDescriptorDataInfoEXT', 'header': 'const VkAccelerationStructureCaptureDescriptorDataInfoEXT* pInfo\n            ', 'name': 'pInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'void', 'header': 'void* pData\n        ', 'name': 'pData'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkSetDeviceMemoryPriorityEXT(\nVkDevice       device,\n VkDeviceMemory memory,\n float          priority\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice       device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceMemory', 'header': 'VkDeviceMemory memory\n            ', 'name': 'memory'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'float', 'header': 'float          priority\n        ', 'name': 'priority'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkAcquireDrmDisplayEXT(\nVkPhysicalDevice physicalDevice,\n int32_t drmFd,\n VkDisplayKHR display\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'int32_t', 'header': 'int32_t drmFd\n            ', 'name': 'drmFd'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDisplayKHR', 'header': 'VkDisplayKHR display\n        ', 'name': 'display'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetDrmDisplayEXT(\nVkPhysicalDevice physicalDevice,\n int32_t drmFd,\n uint32_t connectorId,\n VkDisplayKHR* display\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'int32_t', 'header': 'int32_t drmFd\n            ', 'name': 'drmFd'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t connectorId\n            ', 'name': 'connectorId'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkDisplayKHR', 'header': 'VkDisplayKHR* display\n        ', 'name': 'display'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkWaitForPresentKHR(\nVkDevice device,\n VkSwapchainKHR swapchain,\n uint64_t presentId,\n uint64_t timeout\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSwapchainKHR', 'header': 'VkSwapchainKHR swapchain\n            ', 'name': 'swapchain'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint64_t', 'header': 'uint64_t presentId\n            ', 'name': 'presentId'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint64_t', 'header': 'uint64_t timeout\n        ', 'name': 'timeout'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdBeginRendering(\nVkCommandBuffer                   commandBuffer,\n const VkRenderingInfo*                              pRenderingInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer                   commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkRenderingInfo', 'header': 'const VkRenderingInfo*                              pRenderingInfo\n        ', 'name': 'pRenderingInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdBeginRenderingKHR(\nVkCommandBuffer                   commandBuffer,\n const VkRenderingInfo*                              pRenderingInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer                   commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkRenderingInfo', 'header': 'const VkRenderingInfo*                              pRenderingInfo\n        ', 'name': 'pRenderingInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdEndRendering(\nVkCommandBuffer                   commandBuffer\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer                   commandBuffer\n        ', 'name': 'commandBuffer'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdEndRenderingKHR(\nVkCommandBuffer                   commandBuffer\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer                   commandBuffer\n        ', 'name': 'commandBuffer'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetDescriptorSetLayoutHostMappingInfoVALVE(\nVkDevice device,\n const VkDescriptorSetBindingReferenceVALVE* pBindingReference,\n VkDescriptorSetLayoutHostMappingInfoVALVE* pHostMapping\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDescriptorSetBindingReferenceVALVE', 'header': 'const VkDescriptorSetBindingReferenceVALVE* pBindingReference\n            ', 'name': 'pBindingReference'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkDescriptorSetLayoutHostMappingInfoVALVE', 'header': 'VkDescriptorSetLayoutHostMappingInfoVALVE* pHostMapping\n        ', 'name': 'pHostMapping'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetDescriptorSetHostMappingVALVE(\nVkDevice device,\n VkDescriptorSet descriptorSet,\n void** ppData\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDescriptorSet', 'header': 'VkDescriptorSet descriptorSet\n            ', 'name': 'descriptorSet'}, {'const': False, 'num_indirection': 2, 'length': [''], 'type': 'void', 'header': 'void** ppData\n        ', 'name': 'ppData'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreateMicromapEXT(\nVkDevice                                           device,\n const VkMicromapCreateInfoEXT*        pCreateInfo,\n const VkAllocationCallbacks*       pAllocator,\n VkMicromapEXT*                        pMicromap\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice                                           device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkMicromapCreateInfoEXT', 'header': 'const VkMicromapCreateInfoEXT*        pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks*       pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkMicromapEXT', 'header': 'VkMicromapEXT*                        pMicromap\n        ', 'name': 'pMicromap'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdBuildMicromapsEXT(\nVkCommandBuffer                                    commandBuffer,\n uint32_t infoCount,\n const VkMicromapBuildInfoEXT* pInfos\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer                                    commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t infoCount\n            ', 'name': 'infoCount'}, {'const': True, 'num_indirection': 1, 'length': ['infoCount'], 'type': 'VkMicromapBuildInfoEXT', 'header': 'const VkMicromapBuildInfoEXT* pInfos\n        ', 'name': 'pInfos'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkBuildMicromapsEXT(\nVkDevice                                           device,\n VkDeferredOperationKHR deferredOperation,\n uint32_t infoCount,\n const VkMicromapBuildInfoEXT* pInfos\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice                                           device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeferredOperationKHR', 'header': 'VkDeferredOperationKHR deferredOperation\n            ', 'name': 'deferredOperation'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t infoCount\n            ', 'name': 'infoCount'}, {'const': True, 'num_indirection': 1, 'length': ['infoCount'], 'type': 'VkMicromapBuildInfoEXT', 'header': 'const VkMicromapBuildInfoEXT* pInfos\n        ', 'name': 'pInfos'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkDestroyMicromapEXT(\nVkDevice device,\n VkMicromapEXT micromap,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkMicromapEXT', 'header': 'VkMicromapEXT micromap\n            ', 'name': 'micromap'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdCopyMicromapEXT(\nVkCommandBuffer commandBuffer,\n const VkCopyMicromapInfoEXT* pInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCopyMicromapInfoEXT', 'header': 'const VkCopyMicromapInfoEXT* pInfo\n        ', 'name': 'pInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCopyMicromapEXT(\nVkDevice device,\n VkDeferredOperationKHR deferredOperation,\n const VkCopyMicromapInfoEXT* pInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeferredOperationKHR', 'header': 'VkDeferredOperationKHR deferredOperation\n            ', 'name': 'deferredOperation'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCopyMicromapInfoEXT', 'header': 'const VkCopyMicromapInfoEXT* pInfo\n        ', 'name': 'pInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdCopyMicromapToMemoryEXT(\nVkCommandBuffer commandBuffer,\n const VkCopyMicromapToMemoryInfoEXT* pInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCopyMicromapToMemoryInfoEXT', 'header': 'const VkCopyMicromapToMemoryInfoEXT* pInfo\n        ', 'name': 'pInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCopyMicromapToMemoryEXT(\nVkDevice device,\n VkDeferredOperationKHR deferredOperation,\n const VkCopyMicromapToMemoryInfoEXT* pInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeferredOperationKHR', 'header': 'VkDeferredOperationKHR deferredOperation\n            ', 'name': 'deferredOperation'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCopyMicromapToMemoryInfoEXT', 'header': 'const VkCopyMicromapToMemoryInfoEXT* pInfo\n        ', 'name': 'pInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdCopyMemoryToMicromapEXT(\nVkCommandBuffer commandBuffer,\n const VkCopyMemoryToMicromapInfoEXT* pInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCopyMemoryToMicromapInfoEXT', 'header': 'const VkCopyMemoryToMicromapInfoEXT* pInfo\n        ', 'name': 'pInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCopyMemoryToMicromapEXT(\nVkDevice device,\n VkDeferredOperationKHR deferredOperation,\n const VkCopyMemoryToMicromapInfoEXT* pInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeferredOperationKHR', 'header': 'VkDeferredOperationKHR deferredOperation\n            ', 'name': 'deferredOperation'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCopyMemoryToMicromapInfoEXT', 'header': 'const VkCopyMemoryToMicromapInfoEXT* pInfo\n        ', 'name': 'pInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdWriteMicromapsPropertiesEXT(\nVkCommandBuffer commandBuffer,\n uint32_t micromapCount,\n const VkMicromapEXT* pMicromaps,\n VkQueryType queryType,\n VkQueryPool queryPool,\n uint32_t firstQuery\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t micromapCount\n            ', 'name': 'micromapCount'}, {'const': True, 'num_indirection': 1, 'length': ['micromapCount'], 'type': 'VkMicromapEXT', 'header': 'const VkMicromapEXT* pMicromaps\n            ', 'name': 'pMicromaps'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryType', 'header': 'VkQueryType queryType\n            ', 'name': 'queryType'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryPool', 'header': 'VkQueryPool queryPool\n            ', 'name': 'queryPool'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstQuery\n        ', 'name': 'firstQuery'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkWriteMicromapsPropertiesEXT(\nVkDevice device,\n uint32_t micromapCount,\n const VkMicromapEXT* pMicromaps,\n VkQueryType  queryType,\n size_t       dataSize,\n void* pData,\n size_t stride\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t micromapCount\n            ', 'name': 'micromapCount'}, {'const': True, 'num_indirection': 1, 'length': ['micromapCount'], 'type': 'VkMicromapEXT', 'header': 'const VkMicromapEXT* pMicromaps\n            ', 'name': 'pMicromaps'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryType', 'header': 'VkQueryType  queryType\n            ', 'name': 'queryType'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'size_t', 'header': 'size_t       dataSize\n            ', 'name': 'dataSize'}, {'const': False, 'num_indirection': 1, 'length': ['dataSize'], 'type': 'void', 'header': 'void* pData\n            ', 'name': 'pData'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'size_t', 'header': 'size_t stride\n        ', 'name': 'stride'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetDeviceMicromapCompatibilityEXT(\nVkDevice device,\n const VkMicromapVersionInfoEXT* pVersionInfo,\n VkAccelerationStructureCompatibilityKHR* pCompatibility\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkMicromapVersionInfoEXT', 'header': 'const VkMicromapVersionInfoEXT* pVersionInfo\n            ', 'name': 'pVersionInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkAccelerationStructureCompatibilityKHR', 'header': 'VkAccelerationStructureCompatibilityKHR* pCompatibility\n        ', 'name': 'pCompatibility'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetMicromapBuildSizesEXT(\nVkDevice                                            device,\n VkAccelerationStructureBuildTypeKHR                 buildType,\n const VkMicromapBuildInfoEXT*  pBuildInfo,\n VkMicromapBuildSizesInfoEXT*           pSizeInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice                                            device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkAccelerationStructureBuildTypeKHR', 'header': 'VkAccelerationStructureBuildTypeKHR                 buildType\n            ', 'name': 'buildType'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkMicromapBuildInfoEXT', 'header': 'const VkMicromapBuildInfoEXT*  pBuildInfo\n            ', 'name': 'pBuildInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkMicromapBuildSizesInfoEXT', 'header': 'VkMicromapBuildSizesInfoEXT*           pSizeInfo\n        ', 'name': 'pSizeInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetShaderModuleIdentifierEXT(\nVkDevice device,\n VkShaderModule shaderModule,\n VkShaderModuleIdentifierEXT* pIdentifier\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkShaderModule', 'header': 'VkShaderModule shaderModule\n            ', 'name': 'shaderModule'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkShaderModuleIdentifierEXT', 'header': 'VkShaderModuleIdentifierEXT* pIdentifier\n        ', 'name': 'pIdentifier'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetShaderModuleCreateInfoIdentifierEXT(\nVkDevice device,\n const VkShaderModuleCreateInfo* pCreateInfo,\n VkShaderModuleIdentifierEXT* pIdentifier\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkShaderModuleCreateInfo', 'header': 'const VkShaderModuleCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkShaderModuleIdentifierEXT', 'header': 'VkShaderModuleIdentifierEXT* pIdentifier\n        ', 'name': 'pIdentifier'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetImageSubresourceLayout2KHR(\nVkDevice device,\n VkImage image,\n const VkImageSubresource2KHR* pSubresource,\n VkSubresourceLayout2KHR* pLayout\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImage', 'header': 'VkImage image\n            ', 'name': 'image'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkImageSubresource2KHR', 'header': 'const VkImageSubresource2KHR* pSubresource\n            ', 'name': 'pSubresource'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkSubresourceLayout2KHR', 'header': 'VkSubresourceLayout2KHR* pLayout\n        ', 'name': 'pLayout'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetImageSubresourceLayout2EXT(\nVkDevice device,\n VkImage image,\n const VkImageSubresource2KHR* pSubresource,\n VkSubresourceLayout2KHR* pLayout\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImage', 'header': 'VkImage image\n            ', 'name': 'image'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkImageSubresource2KHR', 'header': 'const VkImageSubresource2KHR* pSubresource\n            ', 'name': 'pSubresource'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkSubresourceLayout2KHR', 'header': 'VkSubresourceLayout2KHR* pLayout\n        ', 'name': 'pLayout'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetPipelinePropertiesEXT(\nVkDevice device,\n const VkPipelineInfoEXT* pPipelineInfo,\n VkBaseOutStructure* pPipelineProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPipelineInfoEXT', 'header': 'const VkPipelineInfoEXT* pPipelineInfo\n            ', 'name': 'pPipelineInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkBaseOutStructure', 'header': 'VkBaseOutStructure* pPipelineProperties\n        ', 'name': 'pPipelineProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetFramebufferTilePropertiesQCOM(\nVkDevice device,\n VkFramebuffer framebuffer,\n uint32_t* pPropertiesCount,\n VkTilePropertiesQCOM* pProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkFramebuffer', 'header': 'VkFramebuffer framebuffer\n            ', 'name': 'framebuffer'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pPropertiesCount\n            ', 'name': 'pPropertiesCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pPropertiesCount'], 'type': 'VkTilePropertiesQCOM', 'header': 'VkTilePropertiesQCOM* pProperties\n        ', 'name': 'pProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetDynamicRenderingTilePropertiesQCOM(\nVkDevice device,\n const VkRenderingInfo* pRenderingInfo,\n VkTilePropertiesQCOM* pProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkRenderingInfo', 'header': 'const VkRenderingInfo* pRenderingInfo\n            ', 'name': 'pRenderingInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkTilePropertiesQCOM', 'header': 'VkTilePropertiesQCOM* pProperties\n        ', 'name': 'pProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetPhysicalDeviceOpticalFlowImageFormatsNV(\nVkPhysicalDevice physicalDevice,\n const VkOpticalFlowImageFormatInfoNV* pOpticalFlowImageFormatInfo,\n uint32_t* pFormatCount,\n VkOpticalFlowImageFormatPropertiesNV* pImageFormatProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkOpticalFlowImageFormatInfoNV', 'header': 'const VkOpticalFlowImageFormatInfoNV* pOpticalFlowImageFormatInfo\n            ', 'name': 'pOpticalFlowImageFormatInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pFormatCount\n            ', 'name': 'pFormatCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pFormatCount'], 'type': 'VkOpticalFlowImageFormatPropertiesNV', 'header': 'VkOpticalFlowImageFormatPropertiesNV* pImageFormatProperties\n        ', 'name': 'pImageFormatProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreateOpticalFlowSessionNV(\nVkDevice device,\n const VkOpticalFlowSessionCreateInfoNV* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkOpticalFlowSessionNV* pSession\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkOpticalFlowSessionCreateInfoNV', 'header': 'const VkOpticalFlowSessionCreateInfoNV* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkOpticalFlowSessionNV', 'header': 'VkOpticalFlowSessionNV* pSession\n        ', 'name': 'pSession'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkDestroyOpticalFlowSessionNV(\nVkDevice device,\n VkOpticalFlowSessionNV session,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkOpticalFlowSessionNV', 'header': 'VkOpticalFlowSessionNV session\n            ', 'name': 'session'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkBindOpticalFlowSessionImageNV(\nVkDevice device,\n VkOpticalFlowSessionNV session,\n VkOpticalFlowSessionBindingPointNV bindingPoint,\n VkImageView view,\n VkImageLayout layout\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkOpticalFlowSessionNV', 'header': 'VkOpticalFlowSessionNV session\n            ', 'name': 'session'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkOpticalFlowSessionBindingPointNV', 'header': 'VkOpticalFlowSessionBindingPointNV bindingPoint\n            ', 'name': 'bindingPoint'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageView', 'header': 'VkImageView view\n            ', 'name': 'view'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageLayout', 'header': 'VkImageLayout layout\n        ', 'name': 'layout'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdOpticalFlowExecuteNV(\nVkCommandBuffer commandBuffer,\n VkOpticalFlowSessionNV session,\n const VkOpticalFlowExecuteInfoNV* pExecuteInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkOpticalFlowSessionNV', 'header': 'VkOpticalFlowSessionNV session\n            ', 'name': 'session'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkOpticalFlowExecuteInfoNV', 'header': 'const VkOpticalFlowExecuteInfoNV* pExecuteInfo\n        ', 'name': 'pExecuteInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetDeviceFaultInfoEXT(\nVkDevice device,\n VkDeviceFaultCountsEXT* pFaultCounts,\n VkDeviceFaultInfoEXT* pFaultInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkDeviceFaultCountsEXT', 'header': 'VkDeviceFaultCountsEXT* pFaultCounts\n            ', 'name': 'pFaultCounts'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkDeviceFaultInfoEXT', 'header': 'VkDeviceFaultInfoEXT* pFaultInfo\n        ', 'name': 'pFaultInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdSetDepthBias2EXT(\nVkCommandBuffer commandBuffer,\n const VkDepthBiasInfoEXT*         pDepthBiasInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDepthBiasInfoEXT', 'header': 'const VkDepthBiasInfoEXT*         pDepthBiasInfo\n        ', 'name': 'pDepthBiasInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkReleaseSwapchainImagesEXT(\nVkDevice device,\n const VkReleaseSwapchainImagesInfoEXT* pReleaseInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkReleaseSwapchainImagesInfoEXT', 'header': 'const VkReleaseSwapchainImagesInfoEXT* pReleaseInfo\n        ', 'name': 'pReleaseInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkGetDeviceImageSubresourceLayoutKHR(\nVkDevice device,\n const VkDeviceImageSubresourceInfoKHR* pInfo,\n VkSubresourceLayout2KHR* pLayout\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDeviceImageSubresourceInfoKHR', 'header': 'const VkDeviceImageSubresourceInfoKHR* pInfo\n            ', 'name': 'pInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkSubresourceLayout2KHR', 'header': 'VkSubresourceLayout2KHR* pLayout\n        ', 'name': 'pLayout'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkMapMemory2KHR(\nVkDevice device,\n const VkMemoryMapInfoKHR* pMemoryMapInfo,\n void** ppData\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkMemoryMapInfoKHR', 'header': 'const VkMemoryMapInfoKHR* pMemoryMapInfo\n            ', 'name': 'pMemoryMapInfo'}, {'const': False, 'num_indirection': 2, 'length': [''], 'type': 'void', 'header': 'void** ppData\n        ', 'name': 'ppData'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkUnmapMemory2KHR(\nVkDevice device,\n const VkMemoryUnmapInfoKHR* pMemoryUnmapInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkMemoryUnmapInfoKHR', 'header': 'const VkMemoryUnmapInfoKHR* pMemoryUnmapInfo\n        ', 'name': 'pMemoryUnmapInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkCreateShadersEXT(\nVkDevice device,\n uint32_t createInfoCount,\n const VkShaderCreateInfoEXT* pCreateInfos,\n const VkAllocationCallbacks* pAllocator,\n VkShaderEXT* pShaders\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t createInfoCount\n            ', 'name': 'createInfoCount'}, {'const': True, 'num_indirection': 1, 'length': ['createInfoCount'], 'type': 'VkShaderCreateInfoEXT', 'header': 'const VkShaderCreateInfoEXT* pCreateInfos\n            ', 'name': 'pCreateInfos'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': ['createInfoCount'], 'type': 'VkShaderEXT', 'header': 'VkShaderEXT* pShaders\n        ', 'name': 'pShaders'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkDestroyShaderEXT(\nVkDevice device,\n VkShaderEXT shader,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkShaderEXT', 'header': 'VkShaderEXT shader\n            ', 'name': 'shader'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetShaderBinaryDataEXT(\nVkDevice device,\n VkShaderEXT shader,\n size_t* pDataSize,\n void* pData\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkShaderEXT', 'header': 'VkShaderEXT shader\n            ', 'name': 'shader'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'size_t', 'header': 'size_t* pDataSize\n            ', 'name': 'pDataSize'}, {'const': False, 'num_indirection': 1, 'length': ['*pDataSize'], 'type': 'void', 'header': 'void* pData\n        ', 'name': 'pData'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void funcpointer_vkCmdBindShadersEXT(\nVkCommandBuffer commandBuffer,\n uint32_t stageCount,\n const VkShaderStageFlagBits* pStages,\n const VkShaderEXT* pShaders\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t stageCount\n            ', 'name': 'stageCount'}, {'const': True, 'num_indirection': 1, 'length': ['stageCount'], 'type': 'VkShaderStageFlagBits', 'header': 'const VkShaderStageFlagBits* pStages\n            ', 'name': 'pStages'}, {'const': True, 'num_indirection': 1, 'length': ['stageCount'], 'type': 'VkShaderEXT', 'header': 'const VkShaderEXT* pShaders\n        ', 'name': 'pShaders'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult funcpointer_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR(\nVkPhysicalDevice physicalDevice,\n uint32_t* pPropertyCount,\n VkCooperativeMatrixPropertiesKHR* pProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pPropertyCount\n            ', 'name': 'pPropertyCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pPropertyCount'], 'type': 'VkCooperativeMatrixPropertiesKHR', 'header': 'VkCooperativeMatrixPropertiesKHR* pProperties\n        ', 'name': 'pProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreateInstance(\nconst VkInstanceCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkInstance* pInstance\n)', 'params': [{'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkInstanceCreateInfo', 'header': 'const VkInstanceCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkInstance', 'header': 'VkInstance* pInstance\n        ', 'name': 'pInstance'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkDestroyInstance(\nVkInstance instance,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkInstance', 'header': 'VkInstance instance\n            ', 'name': 'instance'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkEnumeratePhysicalDevices(\nVkInstance instance,\n uint32_t* pPhysicalDeviceCount,\n VkPhysicalDevice* pPhysicalDevices\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkInstance', 'header': 'VkInstance instance\n            ', 'name': 'instance'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pPhysicalDeviceCount\n            ', 'name': 'pPhysicalDeviceCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pPhysicalDeviceCount'], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice* pPhysicalDevices\n        ', 'name': 'pPhysicalDevices'}]}(json data);
void handle_{'sync': False, 'type': 'PFN_vkVoidFunction', 'num_indirection': 0, 'header': 'PFN_vkVoidFunction vkGetDeviceProcAddr(\nVkDevice device,\n const char* pName\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': ['null-terminated'], 'type': 'char', 'header': 'const char* pName\n        ', 'name': 'pName'}]}(json data);
void handle_{'sync': False, 'type': 'PFN_vkVoidFunction', 'num_indirection': 0, 'header': 'PFN_vkVoidFunction vkGetInstanceProcAddr(\nVkInstance instance,\n const char* pName\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkInstance', 'header': 'VkInstance instance\n            ', 'name': 'instance'}, {'const': True, 'num_indirection': 1, 'length': ['null-terminated'], 'type': 'char', 'header': 'const char* pName\n        ', 'name': 'pName'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetPhysicalDeviceProperties(\nVkPhysicalDevice physicalDevice,\n VkPhysicalDeviceProperties* pProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkPhysicalDeviceProperties', 'header': 'VkPhysicalDeviceProperties* pProperties\n        ', 'name': 'pProperties'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetPhysicalDeviceQueueFamilyProperties(\nVkPhysicalDevice physicalDevice,\n uint32_t* pQueueFamilyPropertyCount,\n VkQueueFamilyProperties* pQueueFamilyProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pQueueFamilyPropertyCount\n            ', 'name': 'pQueueFamilyPropertyCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pQueueFamilyPropertyCount'], 'type': 'VkQueueFamilyProperties', 'header': 'VkQueueFamilyProperties* pQueueFamilyProperties\n        ', 'name': 'pQueueFamilyProperties'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetPhysicalDeviceMemoryProperties(\nVkPhysicalDevice physicalDevice,\n VkPhysicalDeviceMemoryProperties* pMemoryProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkPhysicalDeviceMemoryProperties', 'header': 'VkPhysicalDeviceMemoryProperties* pMemoryProperties\n        ', 'name': 'pMemoryProperties'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetPhysicalDeviceFeatures(\nVkPhysicalDevice physicalDevice,\n VkPhysicalDeviceFeatures* pFeatures\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkPhysicalDeviceFeatures', 'header': 'VkPhysicalDeviceFeatures* pFeatures\n        ', 'name': 'pFeatures'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetPhysicalDeviceFormatProperties(\nVkPhysicalDevice physicalDevice,\n VkFormat format,\n VkFormatProperties* pFormatProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkFormat', 'header': 'VkFormat format\n            ', 'name': 'format'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkFormatProperties', 'header': 'VkFormatProperties* pFormatProperties\n        ', 'name': 'pFormatProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetPhysicalDeviceImageFormatProperties(\nVkPhysicalDevice physicalDevice,\n VkFormat format,\n VkImageType type,\n VkImageTiling tiling,\n VkImageUsageFlags usage,\n VkImageCreateFlags flags,\n VkImageFormatProperties* pImageFormatProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkFormat', 'header': 'VkFormat format\n            ', 'name': 'format'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageType', 'header': 'VkImageType type\n            ', 'name': 'type'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageTiling', 'header': 'VkImageTiling tiling\n            ', 'name': 'tiling'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageUsageFlags', 'header': 'VkImageUsageFlags usage\n            ', 'name': 'usage'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageCreateFlags', 'header': 'VkImageCreateFlags flags\n            ', 'name': 'flags'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkImageFormatProperties', 'header': 'VkImageFormatProperties* pImageFormatProperties\n        ', 'name': 'pImageFormatProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreateDevice(\nVkPhysicalDevice physicalDevice,\n const VkDeviceCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkDevice* pDevice\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDeviceCreateInfo', 'header': 'const VkDeviceCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice* pDevice\n        ', 'name': 'pDevice'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkDestroyDevice(\nVkDevice device,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkEnumerateInstanceVersion(\nuint32_t* pApiVersion\n)', 'params': [{'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pApiVersion\n        ', 'name': 'pApiVersion'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkEnumerateInstanceLayerProperties(\nuint32_t* pPropertyCount,\n VkLayerProperties* pProperties\n)', 'params': [{'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pPropertyCount\n            ', 'name': 'pPropertyCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pPropertyCount'], 'type': 'VkLayerProperties', 'header': 'VkLayerProperties* pProperties\n        ', 'name': 'pProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkEnumerateInstanceExtensionProperties(\nconst char* pLayerName,\n uint32_t* pPropertyCount,\n VkExtensionProperties* pProperties\n)', 'params': [{'const': True, 'num_indirection': 1, 'length': ['null-terminated'], 'type': 'char', 'header': 'const char* pLayerName\n            ', 'name': 'pLayerName'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pPropertyCount\n            ', 'name': 'pPropertyCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pPropertyCount'], 'type': 'VkExtensionProperties', 'header': 'VkExtensionProperties* pProperties\n        ', 'name': 'pProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkEnumerateDeviceLayerProperties(\nVkPhysicalDevice physicalDevice,\n uint32_t* pPropertyCount,\n VkLayerProperties* pProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pPropertyCount\n            ', 'name': 'pPropertyCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pPropertyCount'], 'type': 'VkLayerProperties', 'header': 'VkLayerProperties* pProperties\n        ', 'name': 'pProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkEnumerateDeviceExtensionProperties(\nVkPhysicalDevice physicalDevice,\n const char* pLayerName,\n uint32_t* pPropertyCount,\n VkExtensionProperties* pProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': True, 'num_indirection': 1, 'length': ['null-terminated'], 'type': 'char', 'header': 'const char* pLayerName\n            ', 'name': 'pLayerName'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pPropertyCount\n            ', 'name': 'pPropertyCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pPropertyCount'], 'type': 'VkExtensionProperties', 'header': 'VkExtensionProperties* pProperties\n        ', 'name': 'pProperties'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetDeviceQueue(\nVkDevice device,\n uint32_t queueFamilyIndex,\n uint32_t queueIndex,\n VkQueue* pQueue\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t queueFamilyIndex\n            ', 'name': 'queueFamilyIndex'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t queueIndex\n            ', 'name': 'queueIndex'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkQueue', 'header': 'VkQueue* pQueue\n        ', 'name': 'pQueue'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkQueueSubmit(\nVkQueue queue,\n uint32_t submitCount,\n const VkSubmitInfo* pSubmits,\n VkFence fence\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueue', 'header': 'VkQueue queue\n            ', 'name': 'queue'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t submitCount\n            ', 'name': 'submitCount'}, {'const': True, 'num_indirection': 1, 'length': ['submitCount'], 'type': 'VkSubmitInfo', 'header': 'const VkSubmitInfo* pSubmits\n            ', 'name': 'pSubmits'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkFence', 'header': 'VkFence fence\n        ', 'name': 'fence'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkQueueWaitIdle(\nVkQueue queue\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueue', 'header': 'VkQueue queue\n        ', 'name': 'queue'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkDeviceWaitIdle(\nVkDevice device\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkAllocateMemory(\nVkDevice device,\n const VkMemoryAllocateInfo* pAllocateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkDeviceMemory* pMemory\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkMemoryAllocateInfo', 'header': 'const VkMemoryAllocateInfo* pAllocateInfo\n            ', 'name': 'pAllocateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkDeviceMemory', 'header': 'VkDeviceMemory* pMemory\n        ', 'name': 'pMemory'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkFreeMemory(\nVkDevice device,\n VkDeviceMemory memory,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceMemory', 'header': 'VkDeviceMemory memory\n            ', 'name': 'memory'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkMapMemory(\nVkDevice device,\n VkDeviceMemory memory,\n VkDeviceSize offset,\n VkDeviceSize size,\n VkMemoryMapFlags flags,\n void** ppData\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceMemory', 'header': 'VkDeviceMemory memory\n            ', 'name': 'memory'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize offset\n            ', 'name': 'offset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize size\n            ', 'name': 'size'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkMemoryMapFlags', 'header': 'VkMemoryMapFlags flags\n            ', 'name': 'flags'}, {'const': False, 'num_indirection': 2, 'length': [''], 'type': 'void', 'header': 'void** ppData\n        ', 'name': 'ppData'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkUnmapMemory(\nVkDevice device,\n VkDeviceMemory memory\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceMemory', 'header': 'VkDeviceMemory memory\n        ', 'name': 'memory'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkFlushMappedMemoryRanges(\nVkDevice device,\n uint32_t memoryRangeCount,\n const VkMappedMemoryRange* pMemoryRanges\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t memoryRangeCount\n            ', 'name': 'memoryRangeCount'}, {'const': True, 'num_indirection': 1, 'length': ['memoryRangeCount'], 'type': 'VkMappedMemoryRange', 'header': 'const VkMappedMemoryRange* pMemoryRanges\n        ', 'name': 'pMemoryRanges'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkInvalidateMappedMemoryRanges(\nVkDevice device,\n uint32_t memoryRangeCount,\n const VkMappedMemoryRange* pMemoryRanges\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t memoryRangeCount\n            ', 'name': 'memoryRangeCount'}, {'const': True, 'num_indirection': 1, 'length': ['memoryRangeCount'], 'type': 'VkMappedMemoryRange', 'header': 'const VkMappedMemoryRange* pMemoryRanges\n        ', 'name': 'pMemoryRanges'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetDeviceMemoryCommitment(\nVkDevice device,\n VkDeviceMemory memory,\n VkDeviceSize* pCommittedMemoryInBytes\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceMemory', 'header': 'VkDeviceMemory memory\n            ', 'name': 'memory'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize* pCommittedMemoryInBytes\n        ', 'name': 'pCommittedMemoryInBytes'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetBufferMemoryRequirements(\nVkDevice device,\n VkBuffer buffer,\n VkMemoryRequirements* pMemoryRequirements\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer buffer\n            ', 'name': 'buffer'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkMemoryRequirements', 'header': 'VkMemoryRequirements* pMemoryRequirements\n        ', 'name': 'pMemoryRequirements'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkBindBufferMemory(\nVkDevice device,\n VkBuffer buffer,\n VkDeviceMemory memory,\n VkDeviceSize memoryOffset\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer buffer\n            ', 'name': 'buffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceMemory', 'header': 'VkDeviceMemory memory\n            ', 'name': 'memory'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize memoryOffset\n        ', 'name': 'memoryOffset'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetImageMemoryRequirements(\nVkDevice device,\n VkImage image,\n VkMemoryRequirements* pMemoryRequirements\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImage', 'header': 'VkImage image\n            ', 'name': 'image'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkMemoryRequirements', 'header': 'VkMemoryRequirements* pMemoryRequirements\n        ', 'name': 'pMemoryRequirements'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkBindImageMemory(\nVkDevice device,\n VkImage image,\n VkDeviceMemory memory,\n VkDeviceSize memoryOffset\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImage', 'header': 'VkImage image\n            ', 'name': 'image'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceMemory', 'header': 'VkDeviceMemory memory\n            ', 'name': 'memory'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize memoryOffset\n        ', 'name': 'memoryOffset'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetImageSparseMemoryRequirements(\nVkDevice device,\n VkImage image,\n uint32_t* pSparseMemoryRequirementCount,\n VkSparseImageMemoryRequirements* pSparseMemoryRequirements\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImage', 'header': 'VkImage image\n            ', 'name': 'image'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pSparseMemoryRequirementCount\n            ', 'name': 'pSparseMemoryRequirementCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pSparseMemoryRequirementCount'], 'type': 'VkSparseImageMemoryRequirements', 'header': 'VkSparseImageMemoryRequirements* pSparseMemoryRequirements\n        ', 'name': 'pSparseMemoryRequirements'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetPhysicalDeviceSparseImageFormatProperties(\nVkPhysicalDevice physicalDevice,\n VkFormat format,\n VkImageType type,\n VkSampleCountFlagBits samples,\n VkImageUsageFlags usage,\n VkImageTiling tiling,\n uint32_t* pPropertyCount,\n VkSparseImageFormatProperties* pProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkFormat', 'header': 'VkFormat format\n            ', 'name': 'format'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageType', 'header': 'VkImageType type\n            ', 'name': 'type'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSampleCountFlagBits', 'header': 'VkSampleCountFlagBits samples\n            ', 'name': 'samples'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageUsageFlags', 'header': 'VkImageUsageFlags usage\n            ', 'name': 'usage'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageTiling', 'header': 'VkImageTiling tiling\n            ', 'name': 'tiling'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pPropertyCount\n            ', 'name': 'pPropertyCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pPropertyCount'], 'type': 'VkSparseImageFormatProperties', 'header': 'VkSparseImageFormatProperties* pProperties\n        ', 'name': 'pProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkQueueBindSparse(\nVkQueue queue,\n uint32_t bindInfoCount,\n const VkBindSparseInfo* pBindInfo,\n VkFence fence\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueue', 'header': 'VkQueue queue\n            ', 'name': 'queue'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t bindInfoCount\n            ', 'name': 'bindInfoCount'}, {'const': True, 'num_indirection': 1, 'length': ['bindInfoCount'], 'type': 'VkBindSparseInfo', 'header': 'const VkBindSparseInfo* pBindInfo\n            ', 'name': 'pBindInfo'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkFence', 'header': 'VkFence fence\n        ', 'name': 'fence'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreateFence(\nVkDevice device,\n const VkFenceCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkFence* pFence\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkFenceCreateInfo', 'header': 'const VkFenceCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkFence', 'header': 'VkFence* pFence\n        ', 'name': 'pFence'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkDestroyFence(\nVkDevice device,\n VkFence fence,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkFence', 'header': 'VkFence fence\n            ', 'name': 'fence'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkResetFences(\nVkDevice device,\n uint32_t fenceCount,\n const VkFence* pFences\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t fenceCount\n            ', 'name': 'fenceCount'}, {'const': True, 'num_indirection': 1, 'length': ['fenceCount'], 'type': 'VkFence', 'header': 'const VkFence* pFences\n        ', 'name': 'pFences'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetFenceStatus(\nVkDevice device,\n VkFence fence\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkFence', 'header': 'VkFence fence\n        ', 'name': 'fence'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkWaitForFences(\nVkDevice device,\n uint32_t fenceCount,\n const VkFence* pFences,\n VkBool32 waitAll,\n uint64_t timeout\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t fenceCount\n            ', 'name': 'fenceCount'}, {'const': True, 'num_indirection': 1, 'length': ['fenceCount'], 'type': 'VkFence', 'header': 'const VkFence* pFences\n            ', 'name': 'pFences'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 waitAll\n            ', 'name': 'waitAll'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint64_t', 'header': 'uint64_t timeout\n        ', 'name': 'timeout'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreateSemaphore(\nVkDevice device,\n const VkSemaphoreCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkSemaphore* pSemaphore\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkSemaphoreCreateInfo', 'header': 'const VkSemaphoreCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkSemaphore', 'header': 'VkSemaphore* pSemaphore\n        ', 'name': 'pSemaphore'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkDestroySemaphore(\nVkDevice device,\n VkSemaphore semaphore,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSemaphore', 'header': 'VkSemaphore semaphore\n            ', 'name': 'semaphore'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreateEvent(\nVkDevice device,\n const VkEventCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkEvent* pEvent\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkEventCreateInfo', 'header': 'const VkEventCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkEvent', 'header': 'VkEvent* pEvent\n        ', 'name': 'pEvent'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkDestroyEvent(\nVkDevice device,\n VkEvent event,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkEvent', 'header': 'VkEvent event\n            ', 'name': 'event'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetEventStatus(\nVkDevice device,\n VkEvent event\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkEvent', 'header': 'VkEvent event\n        ', 'name': 'event'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkSetEvent(\nVkDevice device,\n VkEvent event\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkEvent', 'header': 'VkEvent event\n        ', 'name': 'event'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkResetEvent(\nVkDevice device,\n VkEvent event\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkEvent', 'header': 'VkEvent event\n        ', 'name': 'event'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreateQueryPool(\nVkDevice device,\n const VkQueryPoolCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkQueryPool* pQueryPool\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkQueryPoolCreateInfo', 'header': 'const VkQueryPoolCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkQueryPool', 'header': 'VkQueryPool* pQueryPool\n        ', 'name': 'pQueryPool'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkDestroyQueryPool(\nVkDevice device,\n VkQueryPool queryPool,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryPool', 'header': 'VkQueryPool queryPool\n            ', 'name': 'queryPool'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetQueryPoolResults(\nVkDevice device,\n VkQueryPool queryPool,\n uint32_t firstQuery,\n uint32_t queryCount,\n size_t dataSize,\n void* pData,\n VkDeviceSize stride,\n VkQueryResultFlags flags\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryPool', 'header': 'VkQueryPool queryPool\n            ', 'name': 'queryPool'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstQuery\n            ', 'name': 'firstQuery'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t queryCount\n            ', 'name': 'queryCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'size_t', 'header': 'size_t dataSize\n            ', 'name': 'dataSize'}, {'const': False, 'num_indirection': 1, 'length': ['dataSize'], 'type': 'void', 'header': 'void* pData\n            ', 'name': 'pData'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize stride\n            ', 'name': 'stride'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryResultFlags', 'header': 'VkQueryResultFlags flags\n        ', 'name': 'flags'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkResetQueryPool(\nVkDevice device,\n VkQueryPool queryPool,\n uint32_t firstQuery,\n uint32_t queryCount\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryPool', 'header': 'VkQueryPool queryPool\n            ', 'name': 'queryPool'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstQuery\n            ', 'name': 'firstQuery'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t queryCount\n        ', 'name': 'queryCount'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkResetQueryPoolEXT(\nVkDevice device,\n VkQueryPool queryPool,\n uint32_t firstQuery,\n uint32_t queryCount\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryPool', 'header': 'VkQueryPool queryPool\n            ', 'name': 'queryPool'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstQuery\n            ', 'name': 'firstQuery'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t queryCount\n        ', 'name': 'queryCount'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreateBuffer(\nVkDevice device,\n const VkBufferCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkBuffer* pBuffer\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkBufferCreateInfo', 'header': 'const VkBufferCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer* pBuffer\n        ', 'name': 'pBuffer'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkDestroyBuffer(\nVkDevice device,\n VkBuffer buffer,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer buffer\n            ', 'name': 'buffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreateBufferView(\nVkDevice device,\n const VkBufferViewCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkBufferView* pView\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkBufferViewCreateInfo', 'header': 'const VkBufferViewCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkBufferView', 'header': 'VkBufferView* pView\n        ', 'name': 'pView'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkDestroyBufferView(\nVkDevice device,\n VkBufferView bufferView,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBufferView', 'header': 'VkBufferView bufferView\n            ', 'name': 'bufferView'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreateImage(\nVkDevice device,\n const VkImageCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkImage* pImage\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkImageCreateInfo', 'header': 'const VkImageCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkImage', 'header': 'VkImage* pImage\n        ', 'name': 'pImage'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkDestroyImage(\nVkDevice device,\n VkImage image,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImage', 'header': 'VkImage image\n            ', 'name': 'image'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetImageSubresourceLayout(\nVkDevice device,\n VkImage image,\n const VkImageSubresource* pSubresource,\n VkSubresourceLayout* pLayout\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImage', 'header': 'VkImage image\n            ', 'name': 'image'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkImageSubresource', 'header': 'const VkImageSubresource* pSubresource\n            ', 'name': 'pSubresource'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkSubresourceLayout', 'header': 'VkSubresourceLayout* pLayout\n        ', 'name': 'pLayout'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreateImageView(\nVkDevice device,\n const VkImageViewCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkImageView* pView\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkImageViewCreateInfo', 'header': 'const VkImageViewCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkImageView', 'header': 'VkImageView* pView\n        ', 'name': 'pView'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkDestroyImageView(\nVkDevice device,\n VkImageView imageView,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageView', 'header': 'VkImageView imageView\n            ', 'name': 'imageView'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreateShaderModule(\nVkDevice device,\n const VkShaderModuleCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkShaderModule* pShaderModule\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkShaderModuleCreateInfo', 'header': 'const VkShaderModuleCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkShaderModule', 'header': 'VkShaderModule* pShaderModule\n        ', 'name': 'pShaderModule'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkDestroyShaderModule(\nVkDevice device,\n VkShaderModule shaderModule,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkShaderModule', 'header': 'VkShaderModule shaderModule\n            ', 'name': 'shaderModule'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreatePipelineCache(\nVkDevice device,\n const VkPipelineCacheCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkPipelineCache* pPipelineCache\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPipelineCacheCreateInfo', 'header': 'const VkPipelineCacheCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkPipelineCache', 'header': 'VkPipelineCache* pPipelineCache\n        ', 'name': 'pPipelineCache'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkDestroyPipelineCache(\nVkDevice device,\n VkPipelineCache pipelineCache,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineCache', 'header': 'VkPipelineCache pipelineCache\n            ', 'name': 'pipelineCache'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetPipelineCacheData(\nVkDevice device,\n VkPipelineCache pipelineCache,\n size_t* pDataSize,\n void* pData\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineCache', 'header': 'VkPipelineCache pipelineCache\n            ', 'name': 'pipelineCache'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'size_t', 'header': 'size_t* pDataSize\n            ', 'name': 'pDataSize'}, {'const': False, 'num_indirection': 1, 'length': ['*pDataSize'], 'type': 'void', 'header': 'void* pData\n        ', 'name': 'pData'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkMergePipelineCaches(\nVkDevice device,\n VkPipelineCache dstCache,\n uint32_t srcCacheCount,\n const VkPipelineCache* pSrcCaches\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineCache', 'header': 'VkPipelineCache dstCache\n            ', 'name': 'dstCache'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t srcCacheCount\n            ', 'name': 'srcCacheCount'}, {'const': True, 'num_indirection': 1, 'length': ['srcCacheCount'], 'type': 'VkPipelineCache', 'header': 'const VkPipelineCache* pSrcCaches\n        ', 'name': 'pSrcCaches'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreateGraphicsPipelines(\nVkDevice device,\n VkPipelineCache pipelineCache,\n uint32_t createInfoCount,\n const VkGraphicsPipelineCreateInfo* pCreateInfos,\n const VkAllocationCallbacks* pAllocator,\n VkPipeline* pPipelines\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineCache', 'header': 'VkPipelineCache pipelineCache\n            ', 'name': 'pipelineCache'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t createInfoCount\n            ', 'name': 'createInfoCount'}, {'const': True, 'num_indirection': 1, 'length': ['createInfoCount'], 'type': 'VkGraphicsPipelineCreateInfo', 'header': 'const VkGraphicsPipelineCreateInfo* pCreateInfos\n            ', 'name': 'pCreateInfos'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': ['createInfoCount'], 'type': 'VkPipeline', 'header': 'VkPipeline* pPipelines\n        ', 'name': 'pPipelines'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreateComputePipelines(\nVkDevice device,\n VkPipelineCache pipelineCache,\n uint32_t createInfoCount,\n const VkComputePipelineCreateInfo* pCreateInfos,\n const VkAllocationCallbacks* pAllocator,\n VkPipeline* pPipelines\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineCache', 'header': 'VkPipelineCache pipelineCache\n            ', 'name': 'pipelineCache'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t createInfoCount\n            ', 'name': 'createInfoCount'}, {'const': True, 'num_indirection': 1, 'length': ['createInfoCount'], 'type': 'VkComputePipelineCreateInfo', 'header': 'const VkComputePipelineCreateInfo* pCreateInfos\n            ', 'name': 'pCreateInfos'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': ['createInfoCount'], 'type': 'VkPipeline', 'header': 'VkPipeline* pPipelines\n        ', 'name': 'pPipelines'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(\nVkDevice device,\n VkRenderPass renderpass,\n VkExtent2D* pMaxWorkgroupSize\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkRenderPass', 'header': 'VkRenderPass renderpass\n            ', 'name': 'renderpass'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkExtent2D', 'header': 'VkExtent2D* pMaxWorkgroupSize\n        ', 'name': 'pMaxWorkgroupSize'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkDestroyPipeline(\nVkDevice device,\n VkPipeline pipeline,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipeline', 'header': 'VkPipeline pipeline\n            ', 'name': 'pipeline'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreatePipelineLayout(\nVkDevice device,\n const VkPipelineLayoutCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkPipelineLayout* pPipelineLayout\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPipelineLayoutCreateInfo', 'header': 'const VkPipelineLayoutCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkPipelineLayout', 'header': 'VkPipelineLayout* pPipelineLayout\n        ', 'name': 'pPipelineLayout'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkDestroyPipelineLayout(\nVkDevice device,\n VkPipelineLayout pipelineLayout,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineLayout', 'header': 'VkPipelineLayout pipelineLayout\n            ', 'name': 'pipelineLayout'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreateSampler(\nVkDevice device,\n const VkSamplerCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkSampler* pSampler\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkSamplerCreateInfo', 'header': 'const VkSamplerCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkSampler', 'header': 'VkSampler* pSampler\n        ', 'name': 'pSampler'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkDestroySampler(\nVkDevice device,\n VkSampler sampler,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSampler', 'header': 'VkSampler sampler\n            ', 'name': 'sampler'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreateDescriptorSetLayout(\nVkDevice device,\n const VkDescriptorSetLayoutCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkDescriptorSetLayout* pSetLayout\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDescriptorSetLayoutCreateInfo', 'header': 'const VkDescriptorSetLayoutCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkDescriptorSetLayout', 'header': 'VkDescriptorSetLayout* pSetLayout\n        ', 'name': 'pSetLayout'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkDestroyDescriptorSetLayout(\nVkDevice device,\n VkDescriptorSetLayout descriptorSetLayout,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDescriptorSetLayout', 'header': 'VkDescriptorSetLayout descriptorSetLayout\n            ', 'name': 'descriptorSetLayout'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreateDescriptorPool(\nVkDevice device,\n const VkDescriptorPoolCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkDescriptorPool* pDescriptorPool\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDescriptorPoolCreateInfo', 'header': 'const VkDescriptorPoolCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkDescriptorPool', 'header': 'VkDescriptorPool* pDescriptorPool\n        ', 'name': 'pDescriptorPool'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkDestroyDescriptorPool(\nVkDevice device,\n VkDescriptorPool descriptorPool,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDescriptorPool', 'header': 'VkDescriptorPool descriptorPool\n            ', 'name': 'descriptorPool'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkResetDescriptorPool(\nVkDevice device,\n VkDescriptorPool descriptorPool,\n VkDescriptorPoolResetFlags flags\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDescriptorPool', 'header': 'VkDescriptorPool descriptorPool\n            ', 'name': 'descriptorPool'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDescriptorPoolResetFlags', 'header': 'VkDescriptorPoolResetFlags flags\n            ', 'name': 'flags'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkAllocateDescriptorSets(\nVkDevice device,\n const VkDescriptorSetAllocateInfo* pAllocateInfo,\n VkDescriptorSet* pDescriptorSets\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDescriptorSetAllocateInfo', 'header': 'const VkDescriptorSetAllocateInfo* pAllocateInfo\n            ', 'name': 'pAllocateInfo'}, {'const': False, 'num_indirection': 1, 'length': ['pAllocateInfo->descriptorSetCount'], 'type': 'VkDescriptorSet', 'header': 'VkDescriptorSet* pDescriptorSets\n        ', 'name': 'pDescriptorSets'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkFreeDescriptorSets(\nVkDevice device,\n VkDescriptorPool descriptorPool,\n uint32_t descriptorSetCount,\n const VkDescriptorSet* pDescriptorSets\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDescriptorPool', 'header': 'VkDescriptorPool descriptorPool\n            ', 'name': 'descriptorPool'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t descriptorSetCount\n            ', 'name': 'descriptorSetCount'}, {'const': True, 'num_indirection': 1, 'length': ['descriptorSetCount'], 'type': 'VkDescriptorSet', 'header': 'const VkDescriptorSet* pDescriptorSets\n        ', 'name': 'pDescriptorSets'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkUpdateDescriptorSets(\nVkDevice device,\n uint32_t descriptorWriteCount,\n const VkWriteDescriptorSet* pDescriptorWrites,\n uint32_t descriptorCopyCount,\n const VkCopyDescriptorSet* pDescriptorCopies\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t descriptorWriteCount\n            ', 'name': 'descriptorWriteCount'}, {'const': True, 'num_indirection': 1, 'length': ['descriptorWriteCount'], 'type': 'VkWriteDescriptorSet', 'header': 'const VkWriteDescriptorSet* pDescriptorWrites\n            ', 'name': 'pDescriptorWrites'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t descriptorCopyCount\n            ', 'name': 'descriptorCopyCount'}, {'const': True, 'num_indirection': 1, 'length': ['descriptorCopyCount'], 'type': 'VkCopyDescriptorSet', 'header': 'const VkCopyDescriptorSet* pDescriptorCopies\n        ', 'name': 'pDescriptorCopies'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreateFramebuffer(\nVkDevice device,\n const VkFramebufferCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkFramebuffer* pFramebuffer\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkFramebufferCreateInfo', 'header': 'const VkFramebufferCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkFramebuffer', 'header': 'VkFramebuffer* pFramebuffer\n        ', 'name': 'pFramebuffer'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkDestroyFramebuffer(\nVkDevice device,\n VkFramebuffer framebuffer,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkFramebuffer', 'header': 'VkFramebuffer framebuffer\n            ', 'name': 'framebuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreateRenderPass(\nVkDevice device,\n const VkRenderPassCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkRenderPass* pRenderPass\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkRenderPassCreateInfo', 'header': 'const VkRenderPassCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkRenderPass', 'header': 'VkRenderPass* pRenderPass\n        ', 'name': 'pRenderPass'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkDestroyRenderPass(\nVkDevice device,\n VkRenderPass renderPass,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkRenderPass', 'header': 'VkRenderPass renderPass\n            ', 'name': 'renderPass'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetRenderAreaGranularity(\nVkDevice device,\n VkRenderPass renderPass,\n VkExtent2D* pGranularity\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkRenderPass', 'header': 'VkRenderPass renderPass\n            ', 'name': 'renderPass'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkExtent2D', 'header': 'VkExtent2D* pGranularity\n        ', 'name': 'pGranularity'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetRenderingAreaGranularityKHR(\nVkDevice device,\n const VkRenderingAreaInfoKHR* pRenderingAreaInfo,\n VkExtent2D* pGranularity\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkRenderingAreaInfoKHR', 'header': 'const VkRenderingAreaInfoKHR* pRenderingAreaInfo\n            ', 'name': 'pRenderingAreaInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkExtent2D', 'header': 'VkExtent2D* pGranularity\n        ', 'name': 'pGranularity'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreateCommandPool(\nVkDevice device,\n const VkCommandPoolCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkCommandPool* pCommandPool\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCommandPoolCreateInfo', 'header': 'const VkCommandPoolCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkCommandPool', 'header': 'VkCommandPool* pCommandPool\n        ', 'name': 'pCommandPool'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkDestroyCommandPool(\nVkDevice device,\n VkCommandPool commandPool,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandPool', 'header': 'VkCommandPool commandPool\n            ', 'name': 'commandPool'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkResetCommandPool(\nVkDevice device,\n VkCommandPool commandPool,\n VkCommandPoolResetFlags flags\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandPool', 'header': 'VkCommandPool commandPool\n            ', 'name': 'commandPool'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandPoolResetFlags', 'header': 'VkCommandPoolResetFlags flags\n        ', 'name': 'flags'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkAllocateCommandBuffers(\nVkDevice device,\n const VkCommandBufferAllocateInfo* pAllocateInfo,\n VkCommandBuffer* pCommandBuffers\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCommandBufferAllocateInfo', 'header': 'const VkCommandBufferAllocateInfo* pAllocateInfo\n            ', 'name': 'pAllocateInfo'}, {'const': False, 'num_indirection': 1, 'length': ['pAllocateInfo->commandBufferCount'], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer* pCommandBuffers\n        ', 'name': 'pCommandBuffers'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkFreeCommandBuffers(\nVkDevice device,\n VkCommandPool commandPool,\n uint32_t commandBufferCount,\n const VkCommandBuffer* pCommandBuffers\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandPool', 'header': 'VkCommandPool commandPool\n            ', 'name': 'commandPool'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t commandBufferCount\n            ', 'name': 'commandBufferCount'}, {'const': True, 'num_indirection': 1, 'length': ['commandBufferCount'], 'type': 'VkCommandBuffer', 'header': 'const VkCommandBuffer* pCommandBuffers\n        ', 'name': 'pCommandBuffers'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkBeginCommandBuffer(\nVkCommandBuffer commandBuffer,\n const VkCommandBufferBeginInfo* pBeginInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCommandBufferBeginInfo', 'header': 'const VkCommandBufferBeginInfo* pBeginInfo\n            ', 'name': 'pBeginInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkEndCommandBuffer(\nVkCommandBuffer commandBuffer\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkResetCommandBuffer(\nVkCommandBuffer commandBuffer,\n VkCommandBufferResetFlags flags\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBufferResetFlags', 'header': 'VkCommandBufferResetFlags flags\n            ', 'name': 'flags'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdBindPipeline(\nVkCommandBuffer commandBuffer,\n VkPipelineBindPoint pipelineBindPoint,\n VkPipeline pipeline\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineBindPoint', 'header': 'VkPipelineBindPoint pipelineBindPoint\n            ', 'name': 'pipelineBindPoint'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipeline', 'header': 'VkPipeline pipeline\n        ', 'name': 'pipeline'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetAttachmentFeedbackLoopEnableEXT(\nVkCommandBuffer commandBuffer,\n VkImageAspectFlags aspectMask\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageAspectFlags', 'header': 'VkImageAspectFlags aspectMask\n        ', 'name': 'aspectMask'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetViewport(\nVkCommandBuffer commandBuffer,\n uint32_t firstViewport,\n uint32_t viewportCount,\n const VkViewport* pViewports\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstViewport\n            ', 'name': 'firstViewport'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t viewportCount\n            ', 'name': 'viewportCount'}, {'const': True, 'num_indirection': 1, 'length': ['viewportCount'], 'type': 'VkViewport', 'header': 'const VkViewport* pViewports\n        ', 'name': 'pViewports'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetScissor(\nVkCommandBuffer commandBuffer,\n uint32_t firstScissor,\n uint32_t scissorCount,\n const VkRect2D* pScissors\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstScissor\n            ', 'name': 'firstScissor'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t scissorCount\n            ', 'name': 'scissorCount'}, {'const': True, 'num_indirection': 1, 'length': ['scissorCount'], 'type': 'VkRect2D', 'header': 'const VkRect2D* pScissors\n        ', 'name': 'pScissors'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetLineWidth(\nVkCommandBuffer commandBuffer,\n float lineWidth\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'float', 'header': 'float lineWidth\n        ', 'name': 'lineWidth'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetDepthBias(\nVkCommandBuffer commandBuffer,\n float depthBiasConstantFactor,\n float depthBiasClamp,\n float depthBiasSlopeFactor\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'float', 'header': 'float depthBiasConstantFactor\n            ', 'name': 'depthBiasConstantFactor'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'float', 'header': 'float depthBiasClamp\n            ', 'name': 'depthBiasClamp'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'float', 'header': 'float depthBiasSlopeFactor\n        ', 'name': 'depthBiasSlopeFactor'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetBlendConstants(\nVkCommandBuffer commandBuffer,\n const float blendConstants[4]\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 0, 'length': ['4'], 'type': 'float', 'header': 'const float blendConstants[4]\n        ', 'name': 'blendConstants'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetDepthBounds(\nVkCommandBuffer commandBuffer,\n float minDepthBounds,\n float maxDepthBounds\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'float', 'header': 'float minDepthBounds\n            ', 'name': 'minDepthBounds'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'float', 'header': 'float maxDepthBounds\n        ', 'name': 'maxDepthBounds'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetStencilCompareMask(\nVkCommandBuffer commandBuffer,\n VkStencilFaceFlags faceMask,\n uint32_t compareMask\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkStencilFaceFlags', 'header': 'VkStencilFaceFlags faceMask\n            ', 'name': 'faceMask'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t compareMask\n        ', 'name': 'compareMask'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetStencilWriteMask(\nVkCommandBuffer commandBuffer,\n VkStencilFaceFlags faceMask,\n uint32_t writeMask\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkStencilFaceFlags', 'header': 'VkStencilFaceFlags faceMask\n            ', 'name': 'faceMask'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t writeMask\n        ', 'name': 'writeMask'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetStencilReference(\nVkCommandBuffer commandBuffer,\n VkStencilFaceFlags faceMask,\n uint32_t reference\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkStencilFaceFlags', 'header': 'VkStencilFaceFlags faceMask\n            ', 'name': 'faceMask'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t reference\n        ', 'name': 'reference'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdBindDescriptorSets(\nVkCommandBuffer commandBuffer,\n VkPipelineBindPoint pipelineBindPoint,\n VkPipelineLayout layout,\n uint32_t firstSet,\n uint32_t descriptorSetCount,\n const VkDescriptorSet* pDescriptorSets,\n uint32_t dynamicOffsetCount,\n const uint32_t* pDynamicOffsets\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineBindPoint', 'header': 'VkPipelineBindPoint pipelineBindPoint\n            ', 'name': 'pipelineBindPoint'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineLayout', 'header': 'VkPipelineLayout layout\n            ', 'name': 'layout'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstSet\n            ', 'name': 'firstSet'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t descriptorSetCount\n            ', 'name': 'descriptorSetCount'}, {'const': True, 'num_indirection': 1, 'length': ['descriptorSetCount'], 'type': 'VkDescriptorSet', 'header': 'const VkDescriptorSet* pDescriptorSets\n            ', 'name': 'pDescriptorSets'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t dynamicOffsetCount\n            ', 'name': 'dynamicOffsetCount'}, {'const': True, 'num_indirection': 1, 'length': ['dynamicOffsetCount'], 'type': 'uint32_t', 'header': 'const uint32_t* pDynamicOffsets\n        ', 'name': 'pDynamicOffsets'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdBindIndexBuffer(\nVkCommandBuffer commandBuffer,\n VkBuffer buffer,\n VkDeviceSize offset,\n VkIndexType indexType\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer buffer\n            ', 'name': 'buffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize offset\n            ', 'name': 'offset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkIndexType', 'header': 'VkIndexType indexType\n        ', 'name': 'indexType'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdBindVertexBuffers(\nVkCommandBuffer commandBuffer,\n uint32_t firstBinding,\n uint32_t bindingCount,\n const VkBuffer* pBuffers,\n const VkDeviceSize* pOffsets\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstBinding\n            ', 'name': 'firstBinding'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t bindingCount\n            ', 'name': 'bindingCount'}, {'const': True, 'num_indirection': 1, 'length': ['bindingCount'], 'type': 'VkBuffer', 'header': 'const VkBuffer* pBuffers\n            ', 'name': 'pBuffers'}, {'const': True, 'num_indirection': 1, 'length': ['bindingCount'], 'type': 'VkDeviceSize', 'header': 'const VkDeviceSize* pOffsets\n        ', 'name': 'pOffsets'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdDraw(\nVkCommandBuffer commandBuffer,\n uint32_t vertexCount,\n uint32_t instanceCount,\n uint32_t firstVertex,\n uint32_t firstInstance\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t vertexCount\n            ', 'name': 'vertexCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t instanceCount\n            ', 'name': 'instanceCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstVertex\n            ', 'name': 'firstVertex'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstInstance\n        ', 'name': 'firstInstance'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdDrawIndexed(\nVkCommandBuffer commandBuffer,\n uint32_t indexCount,\n uint32_t instanceCount,\n uint32_t firstIndex,\n int32_t vertexOffset,\n uint32_t firstInstance\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t indexCount\n            ', 'name': 'indexCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t instanceCount\n            ', 'name': 'instanceCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstIndex\n            ', 'name': 'firstIndex'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'int32_t', 'header': 'int32_t vertexOffset\n            ', 'name': 'vertexOffset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstInstance\n        ', 'name': 'firstInstance'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdDrawMultiEXT(\nVkCommandBuffer commandBuffer,\n uint32_t drawCount,\n const VkMultiDrawInfoEXT* pVertexInfo,\n uint32_t instanceCount,\n uint32_t firstInstance,\n uint32_t stride\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t drawCount\n            ', 'name': 'drawCount'}, {'const': True, 'num_indirection': 1, 'length': ['drawCount'], 'type': 'VkMultiDrawInfoEXT', 'header': 'const VkMultiDrawInfoEXT* pVertexInfo\n            ', 'name': 'pVertexInfo'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t instanceCount\n            ', 'name': 'instanceCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstInstance\n            ', 'name': 'firstInstance'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t stride\n        ', 'name': 'stride'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdDrawMultiIndexedEXT(\nVkCommandBuffer commandBuffer,\n uint32_t drawCount,\n const VkMultiDrawIndexedInfoEXT* pIndexInfo,\n uint32_t instanceCount,\n uint32_t firstInstance,\n uint32_t stride,\n const int32_t* pVertexOffset\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t drawCount\n            ', 'name': 'drawCount'}, {'const': True, 'num_indirection': 1, 'length': ['drawCount'], 'type': 'VkMultiDrawIndexedInfoEXT', 'header': 'const VkMultiDrawIndexedInfoEXT* pIndexInfo\n            ', 'name': 'pIndexInfo'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t instanceCount\n            ', 'name': 'instanceCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstInstance\n            ', 'name': 'firstInstance'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t stride\n            ', 'name': 'stride'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'int32_t', 'header': 'const int32_t* pVertexOffset\n        ', 'name': 'pVertexOffset'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdDrawIndirect(\nVkCommandBuffer commandBuffer,\n VkBuffer buffer,\n VkDeviceSize offset,\n uint32_t drawCount,\n uint32_t stride\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer buffer\n            ', 'name': 'buffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize offset\n            ', 'name': 'offset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t drawCount\n            ', 'name': 'drawCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t stride\n        ', 'name': 'stride'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdDrawIndexedIndirect(\nVkCommandBuffer commandBuffer,\n VkBuffer buffer,\n VkDeviceSize offset,\n uint32_t drawCount,\n uint32_t stride\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer buffer\n            ', 'name': 'buffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize offset\n            ', 'name': 'offset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t drawCount\n            ', 'name': 'drawCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t stride\n        ', 'name': 'stride'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdDispatch(\nVkCommandBuffer commandBuffer,\n uint32_t groupCountX,\n uint32_t groupCountY,\n uint32_t groupCountZ\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t groupCountX\n            ', 'name': 'groupCountX'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t groupCountY\n            ', 'name': 'groupCountY'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t groupCountZ\n        ', 'name': 'groupCountZ'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdDispatchIndirect(\nVkCommandBuffer commandBuffer,\n VkBuffer buffer,\n VkDeviceSize offset\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer buffer\n            ', 'name': 'buffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize offset\n        ', 'name': 'offset'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSubpassShadingHUAWEI(\nVkCommandBuffer commandBuffer\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n        ', 'name': 'commandBuffer'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdDrawClusterHUAWEI(\nVkCommandBuffer commandBuffer,\n uint32_t groupCountX,\n uint32_t groupCountY,\n uint32_t groupCountZ\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t groupCountX\n            ', 'name': 'groupCountX'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t groupCountY\n            ', 'name': 'groupCountY'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t groupCountZ\n        ', 'name': 'groupCountZ'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdDrawClusterIndirectHUAWEI(\nVkCommandBuffer commandBuffer,\n VkBuffer buffer,\n VkDeviceSize offset\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer buffer\n            ', 'name': 'buffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize offset\n        ', 'name': 'offset'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdUpdatePipelineIndirectBufferNV(\nVkCommandBuffer commandBuffer,\n VkPipelineBindPoint           pipelineBindPoint,\n VkPipeline                    pipeline\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineBindPoint', 'header': 'VkPipelineBindPoint           pipelineBindPoint\n            ', 'name': 'pipelineBindPoint'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipeline', 'header': 'VkPipeline                    pipeline\n        ', 'name': 'pipeline'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdCopyBuffer(\nVkCommandBuffer commandBuffer,\n VkBuffer srcBuffer,\n VkBuffer dstBuffer,\n uint32_t regionCount,\n const VkBufferCopy* pRegions\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer srcBuffer\n            ', 'name': 'srcBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer dstBuffer\n            ', 'name': 'dstBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t regionCount\n            ', 'name': 'regionCount'}, {'const': True, 'num_indirection': 1, 'length': ['regionCount'], 'type': 'VkBufferCopy', 'header': 'const VkBufferCopy* pRegions\n        ', 'name': 'pRegions'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdCopyImage(\nVkCommandBuffer commandBuffer,\n VkImage srcImage,\n VkImageLayout srcImageLayout,\n VkImage dstImage,\n VkImageLayout dstImageLayout,\n uint32_t regionCount,\n const VkImageCopy* pRegions\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImage', 'header': 'VkImage srcImage\n            ', 'name': 'srcImage'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageLayout', 'header': 'VkImageLayout srcImageLayout\n            ', 'name': 'srcImageLayout'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImage', 'header': 'VkImage dstImage\n            ', 'name': 'dstImage'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageLayout', 'header': 'VkImageLayout dstImageLayout\n            ', 'name': 'dstImageLayout'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t regionCount\n            ', 'name': 'regionCount'}, {'const': True, 'num_indirection': 1, 'length': ['regionCount'], 'type': 'VkImageCopy', 'header': 'const VkImageCopy* pRegions\n        ', 'name': 'pRegions'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdBlitImage(\nVkCommandBuffer commandBuffer,\n VkImage srcImage,\n VkImageLayout srcImageLayout,\n VkImage dstImage,\n VkImageLayout dstImageLayout,\n uint32_t regionCount,\n const VkImageBlit* pRegions,\n VkFilter filter\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImage', 'header': 'VkImage srcImage\n            ', 'name': 'srcImage'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageLayout', 'header': 'VkImageLayout srcImageLayout\n            ', 'name': 'srcImageLayout'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImage', 'header': 'VkImage dstImage\n            ', 'name': 'dstImage'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageLayout', 'header': 'VkImageLayout dstImageLayout\n            ', 'name': 'dstImageLayout'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t regionCount\n            ', 'name': 'regionCount'}, {'const': True, 'num_indirection': 1, 'length': ['regionCount'], 'type': 'VkImageBlit', 'header': 'const VkImageBlit* pRegions\n            ', 'name': 'pRegions'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkFilter', 'header': 'VkFilter filter\n        ', 'name': 'filter'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdCopyBufferToImage(\nVkCommandBuffer commandBuffer,\n VkBuffer srcBuffer,\n VkImage dstImage,\n VkImageLayout dstImageLayout,\n uint32_t regionCount,\n const VkBufferImageCopy* pRegions\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer srcBuffer\n            ', 'name': 'srcBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImage', 'header': 'VkImage dstImage\n            ', 'name': 'dstImage'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageLayout', 'header': 'VkImageLayout dstImageLayout\n            ', 'name': 'dstImageLayout'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t regionCount\n            ', 'name': 'regionCount'}, {'const': True, 'num_indirection': 1, 'length': ['regionCount'], 'type': 'VkBufferImageCopy', 'header': 'const VkBufferImageCopy* pRegions\n        ', 'name': 'pRegions'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdCopyImageToBuffer(\nVkCommandBuffer commandBuffer,\n VkImage srcImage,\n VkImageLayout srcImageLayout,\n VkBuffer dstBuffer,\n uint32_t regionCount,\n const VkBufferImageCopy* pRegions\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImage', 'header': 'VkImage srcImage\n            ', 'name': 'srcImage'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageLayout', 'header': 'VkImageLayout srcImageLayout\n            ', 'name': 'srcImageLayout'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer dstBuffer\n            ', 'name': 'dstBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t regionCount\n            ', 'name': 'regionCount'}, {'const': True, 'num_indirection': 1, 'length': ['regionCount'], 'type': 'VkBufferImageCopy', 'header': 'const VkBufferImageCopy* pRegions\n        ', 'name': 'pRegions'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdCopyMemoryIndirectNV(\nVkCommandBuffer commandBuffer,\n VkDeviceAddress copyBufferAddress,\n uint32_t copyCount,\n uint32_t stride\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceAddress', 'header': 'VkDeviceAddress copyBufferAddress\n            ', 'name': 'copyBufferAddress'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t copyCount\n            ', 'name': 'copyCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t stride\n        ', 'name': 'stride'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdCopyMemoryToImageIndirectNV(\nVkCommandBuffer commandBuffer,\n VkDeviceAddress copyBufferAddress,\n uint32_t copyCount,\n uint32_t stride,\n VkImage dstImage,\n VkImageLayout dstImageLayout,\n const VkImageSubresourceLayers* pImageSubresources\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceAddress', 'header': 'VkDeviceAddress copyBufferAddress\n            ', 'name': 'copyBufferAddress'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t copyCount\n            ', 'name': 'copyCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t stride\n            ', 'name': 'stride'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImage', 'header': 'VkImage dstImage\n            ', 'name': 'dstImage'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageLayout', 'header': 'VkImageLayout dstImageLayout\n            ', 'name': 'dstImageLayout'}, {'const': True, 'num_indirection': 1, 'length': ['copyCount'], 'type': 'VkImageSubresourceLayers', 'header': 'const VkImageSubresourceLayers* pImageSubresources\n        ', 'name': 'pImageSubresources'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdUpdateBuffer(\nVkCommandBuffer commandBuffer,\n VkBuffer dstBuffer,\n VkDeviceSize dstOffset,\n VkDeviceSize dataSize,\n const void* pData\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer dstBuffer\n            ', 'name': 'dstBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize dstOffset\n            ', 'name': 'dstOffset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize dataSize\n            ', 'name': 'dataSize'}, {'const': True, 'num_indirection': 1, 'length': ['dataSize'], 'type': 'void', 'header': 'const void* pData\n        ', 'name': 'pData'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdFillBuffer(\nVkCommandBuffer commandBuffer,\n VkBuffer dstBuffer,\n VkDeviceSize dstOffset,\n VkDeviceSize size,\n uint32_t data\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer dstBuffer\n            ', 'name': 'dstBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize dstOffset\n            ', 'name': 'dstOffset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize size\n            ', 'name': 'size'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t data\n        ', 'name': 'data'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdClearColorImage(\nVkCommandBuffer commandBuffer,\n VkImage image,\n VkImageLayout imageLayout,\n const VkClearColorValue* pColor,\n uint32_t rangeCount,\n const VkImageSubresourceRange* pRanges\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImage', 'header': 'VkImage image\n            ', 'name': 'image'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageLayout', 'header': 'VkImageLayout imageLayout\n            ', 'name': 'imageLayout'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkClearColorValue', 'header': 'const VkClearColorValue* pColor\n            ', 'name': 'pColor'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t rangeCount\n            ', 'name': 'rangeCount'}, {'const': True, 'num_indirection': 1, 'length': ['rangeCount'], 'type': 'VkImageSubresourceRange', 'header': 'const VkImageSubresourceRange* pRanges\n        ', 'name': 'pRanges'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdClearDepthStencilImage(\nVkCommandBuffer commandBuffer,\n VkImage image,\n VkImageLayout imageLayout,\n const VkClearDepthStencilValue* pDepthStencil,\n uint32_t rangeCount,\n const VkImageSubresourceRange* pRanges\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImage', 'header': 'VkImage image\n            ', 'name': 'image'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageLayout', 'header': 'VkImageLayout imageLayout\n            ', 'name': 'imageLayout'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkClearDepthStencilValue', 'header': 'const VkClearDepthStencilValue* pDepthStencil\n            ', 'name': 'pDepthStencil'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t rangeCount\n            ', 'name': 'rangeCount'}, {'const': True, 'num_indirection': 1, 'length': ['rangeCount'], 'type': 'VkImageSubresourceRange', 'header': 'const VkImageSubresourceRange* pRanges\n        ', 'name': 'pRanges'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdClearAttachments(\nVkCommandBuffer commandBuffer,\n uint32_t attachmentCount,\n const VkClearAttachment* pAttachments,\n uint32_t rectCount,\n const VkClearRect* pRects\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t attachmentCount\n            ', 'name': 'attachmentCount'}, {'const': True, 'num_indirection': 1, 'length': ['attachmentCount'], 'type': 'VkClearAttachment', 'header': 'const VkClearAttachment* pAttachments\n            ', 'name': 'pAttachments'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t rectCount\n            ', 'name': 'rectCount'}, {'const': True, 'num_indirection': 1, 'length': ['rectCount'], 'type': 'VkClearRect', 'header': 'const VkClearRect* pRects\n        ', 'name': 'pRects'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdResolveImage(\nVkCommandBuffer commandBuffer,\n VkImage srcImage,\n VkImageLayout srcImageLayout,\n VkImage dstImage,\n VkImageLayout dstImageLayout,\n uint32_t regionCount,\n const VkImageResolve* pRegions\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImage', 'header': 'VkImage srcImage\n            ', 'name': 'srcImage'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageLayout', 'header': 'VkImageLayout srcImageLayout\n            ', 'name': 'srcImageLayout'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImage', 'header': 'VkImage dstImage\n            ', 'name': 'dstImage'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageLayout', 'header': 'VkImageLayout dstImageLayout\n            ', 'name': 'dstImageLayout'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t regionCount\n            ', 'name': 'regionCount'}, {'const': True, 'num_indirection': 1, 'length': ['regionCount'], 'type': 'VkImageResolve', 'header': 'const VkImageResolve* pRegions\n        ', 'name': 'pRegions'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetEvent(\nVkCommandBuffer commandBuffer,\n VkEvent event,\n VkPipelineStageFlags stageMask\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkEvent', 'header': 'VkEvent event\n            ', 'name': 'event'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineStageFlags', 'header': 'VkPipelineStageFlags stageMask\n        ', 'name': 'stageMask'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdResetEvent(\nVkCommandBuffer commandBuffer,\n VkEvent event,\n VkPipelineStageFlags stageMask\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkEvent', 'header': 'VkEvent event\n            ', 'name': 'event'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineStageFlags', 'header': 'VkPipelineStageFlags stageMask\n        ', 'name': 'stageMask'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdWaitEvents(\nVkCommandBuffer commandBuffer,\n uint32_t eventCount,\n const VkEvent* pEvents,\n VkPipelineStageFlags srcStageMask,\n VkPipelineStageFlags dstStageMask,\n uint32_t memoryBarrierCount,\n const VkMemoryBarrier* pMemoryBarriers,\n uint32_t bufferMemoryBarrierCount,\n const VkBufferMemoryBarrier* pBufferMemoryBarriers,\n uint32_t imageMemoryBarrierCount,\n const VkImageMemoryBarrier* pImageMemoryBarriers\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t eventCount\n            ', 'name': 'eventCount'}, {'const': True, 'num_indirection': 1, 'length': ['eventCount'], 'type': 'VkEvent', 'header': 'const VkEvent* pEvents\n            ', 'name': 'pEvents'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineStageFlags', 'header': 'VkPipelineStageFlags srcStageMask\n            ', 'name': 'srcStageMask'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineStageFlags', 'header': 'VkPipelineStageFlags dstStageMask\n            ', 'name': 'dstStageMask'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t memoryBarrierCount\n            ', 'name': 'memoryBarrierCount'}, {'const': True, 'num_indirection': 1, 'length': ['memoryBarrierCount'], 'type': 'VkMemoryBarrier', 'header': 'const VkMemoryBarrier* pMemoryBarriers\n            ', 'name': 'pMemoryBarriers'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t bufferMemoryBarrierCount\n            ', 'name': 'bufferMemoryBarrierCount'}, {'const': True, 'num_indirection': 1, 'length': ['bufferMemoryBarrierCount'], 'type': 'VkBufferMemoryBarrier', 'header': 'const VkBufferMemoryBarrier* pBufferMemoryBarriers\n            ', 'name': 'pBufferMemoryBarriers'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t imageMemoryBarrierCount\n            ', 'name': 'imageMemoryBarrierCount'}, {'const': True, 'num_indirection': 1, 'length': ['imageMemoryBarrierCount'], 'type': 'VkImageMemoryBarrier', 'header': 'const VkImageMemoryBarrier* pImageMemoryBarriers\n        ', 'name': 'pImageMemoryBarriers'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdPipelineBarrier(\nVkCommandBuffer commandBuffer,\n VkPipelineStageFlags srcStageMask,\n VkPipelineStageFlags dstStageMask,\n VkDependencyFlags dependencyFlags,\n uint32_t memoryBarrierCount,\n const VkMemoryBarrier* pMemoryBarriers,\n uint32_t bufferMemoryBarrierCount,\n const VkBufferMemoryBarrier* pBufferMemoryBarriers,\n uint32_t imageMemoryBarrierCount,\n const VkImageMemoryBarrier* pImageMemoryBarriers\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineStageFlags', 'header': 'VkPipelineStageFlags srcStageMask\n            ', 'name': 'srcStageMask'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineStageFlags', 'header': 'VkPipelineStageFlags dstStageMask\n            ', 'name': 'dstStageMask'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDependencyFlags', 'header': 'VkDependencyFlags dependencyFlags\n            ', 'name': 'dependencyFlags'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t memoryBarrierCount\n            ', 'name': 'memoryBarrierCount'}, {'const': True, 'num_indirection': 1, 'length': ['memoryBarrierCount'], 'type': 'VkMemoryBarrier', 'header': 'const VkMemoryBarrier* pMemoryBarriers\n            ', 'name': 'pMemoryBarriers'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t bufferMemoryBarrierCount\n            ', 'name': 'bufferMemoryBarrierCount'}, {'const': True, 'num_indirection': 1, 'length': ['bufferMemoryBarrierCount'], 'type': 'VkBufferMemoryBarrier', 'header': 'const VkBufferMemoryBarrier* pBufferMemoryBarriers\n            ', 'name': 'pBufferMemoryBarriers'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t imageMemoryBarrierCount\n            ', 'name': 'imageMemoryBarrierCount'}, {'const': True, 'num_indirection': 1, 'length': ['imageMemoryBarrierCount'], 'type': 'VkImageMemoryBarrier', 'header': 'const VkImageMemoryBarrier* pImageMemoryBarriers\n        ', 'name': 'pImageMemoryBarriers'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdBeginQuery(\nVkCommandBuffer commandBuffer,\n VkQueryPool queryPool,\n uint32_t query,\n VkQueryControlFlags flags\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryPool', 'header': 'VkQueryPool queryPool\n            ', 'name': 'queryPool'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t query\n            ', 'name': 'query'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryControlFlags', 'header': 'VkQueryControlFlags flags\n        ', 'name': 'flags'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdEndQuery(\nVkCommandBuffer commandBuffer,\n VkQueryPool queryPool,\n uint32_t query\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryPool', 'header': 'VkQueryPool queryPool\n            ', 'name': 'queryPool'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t query\n        ', 'name': 'query'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdBeginConditionalRenderingEXT(\nVkCommandBuffer commandBuffer,\n const VkConditionalRenderingBeginInfoEXT* pConditionalRenderingBegin\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkConditionalRenderingBeginInfoEXT', 'header': 'const VkConditionalRenderingBeginInfoEXT* pConditionalRenderingBegin\n        ', 'name': 'pConditionalRenderingBegin'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdEndConditionalRenderingEXT(\nVkCommandBuffer commandBuffer\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n        ', 'name': 'commandBuffer'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdResetQueryPool(\nVkCommandBuffer commandBuffer,\n VkQueryPool queryPool,\n uint32_t firstQuery,\n uint32_t queryCount\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryPool', 'header': 'VkQueryPool queryPool\n            ', 'name': 'queryPool'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstQuery\n            ', 'name': 'firstQuery'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t queryCount\n        ', 'name': 'queryCount'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdWriteTimestamp(\nVkCommandBuffer commandBuffer,\n VkPipelineStageFlagBits pipelineStage,\n VkQueryPool queryPool,\n uint32_t query\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineStageFlagBits', 'header': 'VkPipelineStageFlagBits pipelineStage\n            ', 'name': 'pipelineStage'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryPool', 'header': 'VkQueryPool queryPool\n            ', 'name': 'queryPool'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t query\n        ', 'name': 'query'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdCopyQueryPoolResults(\nVkCommandBuffer commandBuffer,\n VkQueryPool queryPool,\n uint32_t firstQuery,\n uint32_t queryCount,\n VkBuffer dstBuffer,\n VkDeviceSize dstOffset,\n VkDeviceSize stride,\n VkQueryResultFlags flags\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryPool', 'header': 'VkQueryPool queryPool\n            ', 'name': 'queryPool'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstQuery\n            ', 'name': 'firstQuery'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t queryCount\n            ', 'name': 'queryCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer dstBuffer\n            ', 'name': 'dstBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize dstOffset\n            ', 'name': 'dstOffset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize stride\n            ', 'name': 'stride'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryResultFlags', 'header': 'VkQueryResultFlags flags\n        ', 'name': 'flags'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdPushConstants(\nVkCommandBuffer commandBuffer,\n VkPipelineLayout layout,\n VkShaderStageFlags stageFlags,\n uint32_t offset,\n uint32_t size,\n const void* pValues\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineLayout', 'header': 'VkPipelineLayout layout\n            ', 'name': 'layout'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkShaderStageFlags', 'header': 'VkShaderStageFlags stageFlags\n            ', 'name': 'stageFlags'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t offset\n            ', 'name': 'offset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t size\n            ', 'name': 'size'}, {'const': True, 'num_indirection': 1, 'length': ['size'], 'type': 'void', 'header': 'const void* pValues\n        ', 'name': 'pValues'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdBeginRenderPass(\nVkCommandBuffer commandBuffer,\n const VkRenderPassBeginInfo* pRenderPassBegin,\n VkSubpassContents contents\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkRenderPassBeginInfo', 'header': 'const VkRenderPassBeginInfo* pRenderPassBegin\n            ', 'name': 'pRenderPassBegin'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSubpassContents', 'header': 'VkSubpassContents contents\n        ', 'name': 'contents'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdNextSubpass(\nVkCommandBuffer commandBuffer,\n VkSubpassContents contents\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSubpassContents', 'header': 'VkSubpassContents contents\n        ', 'name': 'contents'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdEndRenderPass(\nVkCommandBuffer commandBuffer\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n        ', 'name': 'commandBuffer'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdExecuteCommands(\nVkCommandBuffer commandBuffer,\n uint32_t commandBufferCount,\n const VkCommandBuffer* pCommandBuffers\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t commandBufferCount\n            ', 'name': 'commandBufferCount'}, {'const': True, 'num_indirection': 1, 'length': ['commandBufferCount'], 'type': 'VkCommandBuffer', 'header': 'const VkCommandBuffer* pCommandBuffers\n        ', 'name': 'pCommandBuffers'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetPhysicalDeviceDisplayPropertiesKHR(\nVkPhysicalDevice physicalDevice,\n uint32_t* pPropertyCount,\n VkDisplayPropertiesKHR* pProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pPropertyCount\n            ', 'name': 'pPropertyCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pPropertyCount'], 'type': 'VkDisplayPropertiesKHR', 'header': 'VkDisplayPropertiesKHR* pProperties\n        ', 'name': 'pProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetPhysicalDeviceDisplayPlanePropertiesKHR(\nVkPhysicalDevice physicalDevice,\n uint32_t* pPropertyCount,\n VkDisplayPlanePropertiesKHR* pProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pPropertyCount\n            ', 'name': 'pPropertyCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pPropertyCount'], 'type': 'VkDisplayPlanePropertiesKHR', 'header': 'VkDisplayPlanePropertiesKHR* pProperties\n        ', 'name': 'pProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetDisplayPlaneSupportedDisplaysKHR(\nVkPhysicalDevice physicalDevice,\n uint32_t planeIndex,\n uint32_t* pDisplayCount,\n VkDisplayKHR* pDisplays\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t planeIndex\n            ', 'name': 'planeIndex'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pDisplayCount\n            ', 'name': 'pDisplayCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pDisplayCount'], 'type': 'VkDisplayKHR', 'header': 'VkDisplayKHR* pDisplays\n        ', 'name': 'pDisplays'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetDisplayModePropertiesKHR(\nVkPhysicalDevice physicalDevice,\n VkDisplayKHR display,\n uint32_t* pPropertyCount,\n VkDisplayModePropertiesKHR* pProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDisplayKHR', 'header': 'VkDisplayKHR display\n            ', 'name': 'display'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pPropertyCount\n            ', 'name': 'pPropertyCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pPropertyCount'], 'type': 'VkDisplayModePropertiesKHR', 'header': 'VkDisplayModePropertiesKHR* pProperties\n        ', 'name': 'pProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreateDisplayModeKHR(\nVkPhysicalDevice physicalDevice,\n VkDisplayKHR display,\n const VkDisplayModeCreateInfoKHR* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkDisplayModeKHR* pMode\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDisplayKHR', 'header': 'VkDisplayKHR display\n            ', 'name': 'display'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDisplayModeCreateInfoKHR', 'header': 'const VkDisplayModeCreateInfoKHR* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkDisplayModeKHR', 'header': 'VkDisplayModeKHR* pMode\n        ', 'name': 'pMode'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetDisplayPlaneCapabilitiesKHR(\nVkPhysicalDevice physicalDevice,\n VkDisplayModeKHR mode,\n uint32_t planeIndex,\n VkDisplayPlaneCapabilitiesKHR* pCapabilities\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDisplayModeKHR', 'header': 'VkDisplayModeKHR mode\n            ', 'name': 'mode'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t planeIndex\n            ', 'name': 'planeIndex'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkDisplayPlaneCapabilitiesKHR', 'header': 'VkDisplayPlaneCapabilitiesKHR* pCapabilities\n        ', 'name': 'pCapabilities'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreateDisplayPlaneSurfaceKHR(\nVkInstance instance,\n const VkDisplaySurfaceCreateInfoKHR* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkSurfaceKHR* pSurface\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkInstance', 'header': 'VkInstance instance\n            ', 'name': 'instance'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDisplaySurfaceCreateInfoKHR', 'header': 'const VkDisplaySurfaceCreateInfoKHR* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkSurfaceKHR', 'header': 'VkSurfaceKHR* pSurface\n        ', 'name': 'pSurface'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreateSharedSwapchainsKHR(\nVkDevice device,\n uint32_t swapchainCount,\n const VkSwapchainCreateInfoKHR* pCreateInfos,\n const VkAllocationCallbacks* pAllocator,\n VkSwapchainKHR* pSwapchains\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t swapchainCount\n            ', 'name': 'swapchainCount'}, {'const': True, 'num_indirection': 1, 'length': ['swapchainCount'], 'type': 'VkSwapchainCreateInfoKHR', 'header': 'const VkSwapchainCreateInfoKHR* pCreateInfos\n            ', 'name': 'pCreateInfos'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': ['swapchainCount'], 'type': 'VkSwapchainKHR', 'header': 'VkSwapchainKHR* pSwapchains\n        ', 'name': 'pSwapchains'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkDestroySurfaceKHR(\nVkInstance instance,\n VkSurfaceKHR surface,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkInstance', 'header': 'VkInstance instance\n            ', 'name': 'instance'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSurfaceKHR', 'header': 'VkSurfaceKHR surface\n            ', 'name': 'surface'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetPhysicalDeviceSurfaceSupportKHR(\nVkPhysicalDevice physicalDevice,\n uint32_t queueFamilyIndex,\n VkSurfaceKHR surface,\n VkBool32* pSupported\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t queueFamilyIndex\n            ', 'name': 'queueFamilyIndex'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSurfaceKHR', 'header': 'VkSurfaceKHR surface\n            ', 'name': 'surface'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32* pSupported\n        ', 'name': 'pSupported'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetPhysicalDeviceSurfaceCapabilitiesKHR(\nVkPhysicalDevice physicalDevice,\n VkSurfaceKHR surface,\n VkSurfaceCapabilitiesKHR* pSurfaceCapabilities\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSurfaceKHR', 'header': 'VkSurfaceKHR surface\n            ', 'name': 'surface'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkSurfaceCapabilitiesKHR', 'header': 'VkSurfaceCapabilitiesKHR* pSurfaceCapabilities\n        ', 'name': 'pSurfaceCapabilities'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetPhysicalDeviceSurfaceFormatsKHR(\nVkPhysicalDevice physicalDevice,\n VkSurfaceKHR surface,\n uint32_t* pSurfaceFormatCount,\n VkSurfaceFormatKHR* pSurfaceFormats\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSurfaceKHR', 'header': 'VkSurfaceKHR surface\n            ', 'name': 'surface'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pSurfaceFormatCount\n            ', 'name': 'pSurfaceFormatCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pSurfaceFormatCount'], 'type': 'VkSurfaceFormatKHR', 'header': 'VkSurfaceFormatKHR* pSurfaceFormats\n        ', 'name': 'pSurfaceFormats'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetPhysicalDeviceSurfacePresentModesKHR(\nVkPhysicalDevice physicalDevice,\n VkSurfaceKHR surface,\n uint32_t* pPresentModeCount,\n VkPresentModeKHR* pPresentModes\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSurfaceKHR', 'header': 'VkSurfaceKHR surface\n            ', 'name': 'surface'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pPresentModeCount\n            ', 'name': 'pPresentModeCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pPresentModeCount'], 'type': 'VkPresentModeKHR', 'header': 'VkPresentModeKHR* pPresentModes\n        ', 'name': 'pPresentModes'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreateSwapchainKHR(\nVkDevice device,\n const VkSwapchainCreateInfoKHR* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkSwapchainKHR* pSwapchain\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkSwapchainCreateInfoKHR', 'header': 'const VkSwapchainCreateInfoKHR* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkSwapchainKHR', 'header': 'VkSwapchainKHR* pSwapchain\n        ', 'name': 'pSwapchain'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkDestroySwapchainKHR(\nVkDevice device,\n VkSwapchainKHR swapchain,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSwapchainKHR', 'header': 'VkSwapchainKHR swapchain\n            ', 'name': 'swapchain'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetSwapchainImagesKHR(\nVkDevice device,\n VkSwapchainKHR swapchain,\n uint32_t* pSwapchainImageCount,\n VkImage* pSwapchainImages\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSwapchainKHR', 'header': 'VkSwapchainKHR swapchain\n            ', 'name': 'swapchain'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pSwapchainImageCount\n            ', 'name': 'pSwapchainImageCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pSwapchainImageCount'], 'type': 'VkImage', 'header': 'VkImage* pSwapchainImages\n        ', 'name': 'pSwapchainImages'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkAcquireNextImageKHR(\nVkDevice device,\n VkSwapchainKHR swapchain,\n uint64_t timeout,\n VkSemaphore semaphore,\n VkFence fence,\n uint32_t* pImageIndex\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSwapchainKHR', 'header': 'VkSwapchainKHR swapchain\n            ', 'name': 'swapchain'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint64_t', 'header': 'uint64_t timeout\n            ', 'name': 'timeout'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSemaphore', 'header': 'VkSemaphore semaphore\n            ', 'name': 'semaphore'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkFence', 'header': 'VkFence fence\n            ', 'name': 'fence'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pImageIndex\n        ', 'name': 'pImageIndex'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkQueuePresentKHR(\nVkQueue queue,\n const VkPresentInfoKHR* pPresentInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueue', 'header': 'VkQueue queue\n            ', 'name': 'queue'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPresentInfoKHR', 'header': 'const VkPresentInfoKHR* pPresentInfo\n        ', 'name': 'pPresentInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreateXlibSurfaceKHR(\nVkInstance instance,\n const VkXlibSurfaceCreateInfoKHR* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkSurfaceKHR* pSurface\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkInstance', 'header': 'VkInstance instance\n            ', 'name': 'instance'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkXlibSurfaceCreateInfoKHR', 'header': 'const VkXlibSurfaceCreateInfoKHR* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkSurfaceKHR', 'header': 'VkSurfaceKHR* pSurface\n        ', 'name': 'pSurface'}]}(json data);
void handle_{'sync': False, 'type': 'VkBool32', 'num_indirection': 0, 'header': 'VkBool32 vkGetPhysicalDeviceXlibPresentationSupportKHR(\nVkPhysicalDevice physicalDevice,\n uint32_t queueFamilyIndex,\n Display* dpy,\n VisualID visualID\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t queueFamilyIndex\n            ', 'name': 'queueFamilyIndex'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'Display', 'header': 'Display* dpy\n            ', 'name': 'dpy'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VisualID', 'header': 'VisualID visualID\n        ', 'name': 'visualID'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreateXcbSurfaceKHR(\nVkInstance instance,\n const VkXcbSurfaceCreateInfoKHR* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkSurfaceKHR* pSurface\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkInstance', 'header': 'VkInstance instance\n            ', 'name': 'instance'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkXcbSurfaceCreateInfoKHR', 'header': 'const VkXcbSurfaceCreateInfoKHR* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkSurfaceKHR', 'header': 'VkSurfaceKHR* pSurface\n        ', 'name': 'pSurface'}]}(json data);
void handle_{'sync': False, 'type': 'VkBool32', 'num_indirection': 0, 'header': 'VkBool32 vkGetPhysicalDeviceXcbPresentationSupportKHR(\nVkPhysicalDevice physicalDevice,\n uint32_t queueFamilyIndex,\n xcb_connection_t* connection,\n xcb_visualid_t visual_id\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t queueFamilyIndex\n            ', 'name': 'queueFamilyIndex'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'xcb_connection_t', 'header': 'xcb_connection_t* connection\n            ', 'name': 'connection'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'xcb_visualid_t', 'header': 'xcb_visualid_t visual_id\n        ', 'name': 'visual_id'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreateDebugReportCallbackEXT(\nVkInstance instance,\n const VkDebugReportCallbackCreateInfoEXT* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkDebugReportCallbackEXT* pCallback\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkInstance', 'header': 'VkInstance instance\n            ', 'name': 'instance'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDebugReportCallbackCreateInfoEXT', 'header': 'const VkDebugReportCallbackCreateInfoEXT* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkDebugReportCallbackEXT', 'header': 'VkDebugReportCallbackEXT* pCallback\n        ', 'name': 'pCallback'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkDestroyDebugReportCallbackEXT(\nVkInstance instance,\n VkDebugReportCallbackEXT callback,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkInstance', 'header': 'VkInstance instance\n            ', 'name': 'instance'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDebugReportCallbackEXT', 'header': 'VkDebugReportCallbackEXT callback\n            ', 'name': 'callback'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkDebugReportMessageEXT(\nVkInstance instance,\n VkDebugReportFlagsEXT flags,\n VkDebugReportObjectTypeEXT objectType,\n uint64_t object,\n size_t location,\n int32_t messageCode,\n const char* pLayerPrefix,\n const char* pMessage\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkInstance', 'header': 'VkInstance instance\n            ', 'name': 'instance'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDebugReportFlagsEXT', 'header': 'VkDebugReportFlagsEXT flags\n            ', 'name': 'flags'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDebugReportObjectTypeEXT', 'header': 'VkDebugReportObjectTypeEXT objectType\n            ', 'name': 'objectType'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint64_t', 'header': 'uint64_t object\n            ', 'name': 'object'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'size_t', 'header': 'size_t location\n            ', 'name': 'location'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'int32_t', 'header': 'int32_t messageCode\n            ', 'name': 'messageCode'}, {'const': True, 'num_indirection': 1, 'length': ['null-terminated'], 'type': 'char', 'header': 'const char* pLayerPrefix\n            ', 'name': 'pLayerPrefix'}, {'const': True, 'num_indirection': 1, 'length': ['null-terminated'], 'type': 'char', 'header': 'const char* pMessage\n        ', 'name': 'pMessage'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkDebugMarkerSetObjectNameEXT(\nVkDevice device,\n const VkDebugMarkerObjectNameInfoEXT* pNameInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDebugMarkerObjectNameInfoEXT', 'header': 'const VkDebugMarkerObjectNameInfoEXT* pNameInfo\n        ', 'name': 'pNameInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkDebugMarkerSetObjectTagEXT(\nVkDevice device,\n const VkDebugMarkerObjectTagInfoEXT* pTagInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDebugMarkerObjectTagInfoEXT', 'header': 'const VkDebugMarkerObjectTagInfoEXT* pTagInfo\n        ', 'name': 'pTagInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdDebugMarkerBeginEXT(\nVkCommandBuffer commandBuffer,\n const VkDebugMarkerMarkerInfoEXT* pMarkerInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDebugMarkerMarkerInfoEXT', 'header': 'const VkDebugMarkerMarkerInfoEXT* pMarkerInfo\n        ', 'name': 'pMarkerInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdDebugMarkerEndEXT(\nVkCommandBuffer commandBuffer\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n        ', 'name': 'commandBuffer'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdDebugMarkerInsertEXT(\nVkCommandBuffer commandBuffer,\n const VkDebugMarkerMarkerInfoEXT* pMarkerInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDebugMarkerMarkerInfoEXT', 'header': 'const VkDebugMarkerMarkerInfoEXT* pMarkerInfo\n        ', 'name': 'pMarkerInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetPhysicalDeviceExternalImageFormatPropertiesNV(\nVkPhysicalDevice physicalDevice,\n VkFormat format,\n VkImageType type,\n VkImageTiling tiling,\n VkImageUsageFlags usage,\n VkImageCreateFlags flags,\n VkExternalMemoryHandleTypeFlagsNV externalHandleType,\n VkExternalImageFormatPropertiesNV* pExternalImageFormatProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkFormat', 'header': 'VkFormat format\n            ', 'name': 'format'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageType', 'header': 'VkImageType type\n            ', 'name': 'type'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageTiling', 'header': 'VkImageTiling tiling\n            ', 'name': 'tiling'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageUsageFlags', 'header': 'VkImageUsageFlags usage\n            ', 'name': 'usage'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageCreateFlags', 'header': 'VkImageCreateFlags flags\n            ', 'name': 'flags'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkExternalMemoryHandleTypeFlagsNV', 'header': 'VkExternalMemoryHandleTypeFlagsNV externalHandleType\n            ', 'name': 'externalHandleType'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkExternalImageFormatPropertiesNV', 'header': 'VkExternalImageFormatPropertiesNV* pExternalImageFormatProperties\n        ', 'name': 'pExternalImageFormatProperties'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdExecuteGeneratedCommandsNV(\nVkCommandBuffer commandBuffer,\n VkBool32 isPreprocessed,\n const VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 isPreprocessed\n            ', 'name': 'isPreprocessed'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkGeneratedCommandsInfoNV', 'header': 'const VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo\n        ', 'name': 'pGeneratedCommandsInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdPreprocessGeneratedCommandsNV(\nVkCommandBuffer commandBuffer,\n const VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkGeneratedCommandsInfoNV', 'header': 'const VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo\n        ', 'name': 'pGeneratedCommandsInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdBindPipelineShaderGroupNV(\nVkCommandBuffer commandBuffer,\n VkPipelineBindPoint pipelineBindPoint,\n VkPipeline pipeline,\n uint32_t groupIndex\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineBindPoint', 'header': 'VkPipelineBindPoint pipelineBindPoint\n            ', 'name': 'pipelineBindPoint'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipeline', 'header': 'VkPipeline pipeline\n            ', 'name': 'pipeline'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t groupIndex\n        ', 'name': 'groupIndex'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetGeneratedCommandsMemoryRequirementsNV(\nVkDevice device,\n const VkGeneratedCommandsMemoryRequirementsInfoNV* pInfo,\n VkMemoryRequirements2* pMemoryRequirements\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkGeneratedCommandsMemoryRequirementsInfoNV', 'header': 'const VkGeneratedCommandsMemoryRequirementsInfoNV* pInfo\n            ', 'name': 'pInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkMemoryRequirements2', 'header': 'VkMemoryRequirements2* pMemoryRequirements\n        ', 'name': 'pMemoryRequirements'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreateIndirectCommandsLayoutNV(\nVkDevice device,\n const VkIndirectCommandsLayoutCreateInfoNV* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkIndirectCommandsLayoutNV* pIndirectCommandsLayout\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkIndirectCommandsLayoutCreateInfoNV', 'header': 'const VkIndirectCommandsLayoutCreateInfoNV* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkIndirectCommandsLayoutNV', 'header': 'VkIndirectCommandsLayoutNV* pIndirectCommandsLayout\n        ', 'name': 'pIndirectCommandsLayout'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkDestroyIndirectCommandsLayoutNV(\nVkDevice device,\n VkIndirectCommandsLayoutNV indirectCommandsLayout,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkIndirectCommandsLayoutNV', 'header': 'VkIndirectCommandsLayoutNV indirectCommandsLayout\n            ', 'name': 'indirectCommandsLayout'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetPhysicalDeviceFeatures2(\nVkPhysicalDevice physicalDevice,\n VkPhysicalDeviceFeatures2* pFeatures\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkPhysicalDeviceFeatures2', 'header': 'VkPhysicalDeviceFeatures2* pFeatures\n        ', 'name': 'pFeatures'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetPhysicalDeviceFeatures2KHR(\nVkPhysicalDevice physicalDevice,\n VkPhysicalDeviceFeatures2* pFeatures\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkPhysicalDeviceFeatures2', 'header': 'VkPhysicalDeviceFeatures2* pFeatures\n        ', 'name': 'pFeatures'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetPhysicalDeviceProperties2(\nVkPhysicalDevice physicalDevice,\n VkPhysicalDeviceProperties2* pProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkPhysicalDeviceProperties2', 'header': 'VkPhysicalDeviceProperties2* pProperties\n        ', 'name': 'pProperties'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetPhysicalDeviceProperties2KHR(\nVkPhysicalDevice physicalDevice,\n VkPhysicalDeviceProperties2* pProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkPhysicalDeviceProperties2', 'header': 'VkPhysicalDeviceProperties2* pProperties\n        ', 'name': 'pProperties'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetPhysicalDeviceFormatProperties2(\nVkPhysicalDevice physicalDevice,\n VkFormat format,\n VkFormatProperties2* pFormatProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkFormat', 'header': 'VkFormat format\n            ', 'name': 'format'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkFormatProperties2', 'header': 'VkFormatProperties2* pFormatProperties\n        ', 'name': 'pFormatProperties'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetPhysicalDeviceFormatProperties2KHR(\nVkPhysicalDevice physicalDevice,\n VkFormat format,\n VkFormatProperties2* pFormatProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkFormat', 'header': 'VkFormat format\n            ', 'name': 'format'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkFormatProperties2', 'header': 'VkFormatProperties2* pFormatProperties\n        ', 'name': 'pFormatProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetPhysicalDeviceImageFormatProperties2(\nVkPhysicalDevice physicalDevice,\n const VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo,\n VkImageFormatProperties2* pImageFormatProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPhysicalDeviceImageFormatInfo2', 'header': 'const VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo\n            ', 'name': 'pImageFormatInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkImageFormatProperties2', 'header': 'VkImageFormatProperties2* pImageFormatProperties\n        ', 'name': 'pImageFormatProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetPhysicalDeviceImageFormatProperties2KHR(\nVkPhysicalDevice physicalDevice,\n const VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo,\n VkImageFormatProperties2* pImageFormatProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPhysicalDeviceImageFormatInfo2', 'header': 'const VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo\n            ', 'name': 'pImageFormatInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkImageFormatProperties2', 'header': 'VkImageFormatProperties2* pImageFormatProperties\n        ', 'name': 'pImageFormatProperties'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetPhysicalDeviceQueueFamilyProperties2(\nVkPhysicalDevice physicalDevice,\n uint32_t* pQueueFamilyPropertyCount,\n VkQueueFamilyProperties2* pQueueFamilyProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pQueueFamilyPropertyCount\n            ', 'name': 'pQueueFamilyPropertyCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pQueueFamilyPropertyCount'], 'type': 'VkQueueFamilyProperties2', 'header': 'VkQueueFamilyProperties2* pQueueFamilyProperties\n        ', 'name': 'pQueueFamilyProperties'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetPhysicalDeviceQueueFamilyProperties2KHR(\nVkPhysicalDevice physicalDevice,\n uint32_t* pQueueFamilyPropertyCount,\n VkQueueFamilyProperties2* pQueueFamilyProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pQueueFamilyPropertyCount\n            ', 'name': 'pQueueFamilyPropertyCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pQueueFamilyPropertyCount'], 'type': 'VkQueueFamilyProperties2', 'header': 'VkQueueFamilyProperties2* pQueueFamilyProperties\n        ', 'name': 'pQueueFamilyProperties'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetPhysicalDeviceMemoryProperties2(\nVkPhysicalDevice physicalDevice,\n VkPhysicalDeviceMemoryProperties2* pMemoryProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkPhysicalDeviceMemoryProperties2', 'header': 'VkPhysicalDeviceMemoryProperties2* pMemoryProperties\n        ', 'name': 'pMemoryProperties'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetPhysicalDeviceMemoryProperties2KHR(\nVkPhysicalDevice physicalDevice,\n VkPhysicalDeviceMemoryProperties2* pMemoryProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkPhysicalDeviceMemoryProperties2', 'header': 'VkPhysicalDeviceMemoryProperties2* pMemoryProperties\n        ', 'name': 'pMemoryProperties'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetPhysicalDeviceSparseImageFormatProperties2(\nVkPhysicalDevice physicalDevice,\n const VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo,\n uint32_t* pPropertyCount,\n VkSparseImageFormatProperties2* pProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPhysicalDeviceSparseImageFormatInfo2', 'header': 'const VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo\n            ', 'name': 'pFormatInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pPropertyCount\n            ', 'name': 'pPropertyCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pPropertyCount'], 'type': 'VkSparseImageFormatProperties2', 'header': 'VkSparseImageFormatProperties2* pProperties\n        ', 'name': 'pProperties'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetPhysicalDeviceSparseImageFormatProperties2KHR(\nVkPhysicalDevice physicalDevice,\n const VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo,\n uint32_t* pPropertyCount,\n VkSparseImageFormatProperties2* pProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPhysicalDeviceSparseImageFormatInfo2', 'header': 'const VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo\n            ', 'name': 'pFormatInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pPropertyCount\n            ', 'name': 'pPropertyCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pPropertyCount'], 'type': 'VkSparseImageFormatProperties2', 'header': 'VkSparseImageFormatProperties2* pProperties\n        ', 'name': 'pProperties'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdPushDescriptorSetKHR(\nVkCommandBuffer commandBuffer,\n VkPipelineBindPoint pipelineBindPoint,\n VkPipelineLayout layout,\n uint32_t set,\n uint32_t descriptorWriteCount,\n const VkWriteDescriptorSet* pDescriptorWrites\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineBindPoint', 'header': 'VkPipelineBindPoint pipelineBindPoint\n            ', 'name': 'pipelineBindPoint'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineLayout', 'header': 'VkPipelineLayout layout\n            ', 'name': 'layout'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t set\n            ', 'name': 'set'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t descriptorWriteCount\n            ', 'name': 'descriptorWriteCount'}, {'const': True, 'num_indirection': 1, 'length': ['descriptorWriteCount'], 'type': 'VkWriteDescriptorSet', 'header': 'const VkWriteDescriptorSet* pDescriptorWrites\n        ', 'name': 'pDescriptorWrites'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkTrimCommandPool(\nVkDevice device,\n VkCommandPool commandPool,\n VkCommandPoolTrimFlags flags\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandPool', 'header': 'VkCommandPool commandPool\n            ', 'name': 'commandPool'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandPoolTrimFlags', 'header': 'VkCommandPoolTrimFlags flags\n        ', 'name': 'flags'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkTrimCommandPoolKHR(\nVkDevice device,\n VkCommandPool commandPool,\n VkCommandPoolTrimFlags flags\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandPool', 'header': 'VkCommandPool commandPool\n            ', 'name': 'commandPool'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandPoolTrimFlags', 'header': 'VkCommandPoolTrimFlags flags\n        ', 'name': 'flags'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetPhysicalDeviceExternalBufferProperties(\nVkPhysicalDevice physicalDevice,\n const VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo,\n VkExternalBufferProperties* pExternalBufferProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPhysicalDeviceExternalBufferInfo', 'header': 'const VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo\n            ', 'name': 'pExternalBufferInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkExternalBufferProperties', 'header': 'VkExternalBufferProperties* pExternalBufferProperties\n        ', 'name': 'pExternalBufferProperties'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetPhysicalDeviceExternalBufferPropertiesKHR(\nVkPhysicalDevice physicalDevice,\n const VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo,\n VkExternalBufferProperties* pExternalBufferProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPhysicalDeviceExternalBufferInfo', 'header': 'const VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo\n            ', 'name': 'pExternalBufferInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkExternalBufferProperties', 'header': 'VkExternalBufferProperties* pExternalBufferProperties\n        ', 'name': 'pExternalBufferProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetMemoryFdKHR(\nVkDevice device,\n const VkMemoryGetFdInfoKHR* pGetFdInfo,\n int* pFd\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkMemoryGetFdInfoKHR', 'header': 'const VkMemoryGetFdInfoKHR* pGetFdInfo\n            ', 'name': 'pGetFdInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'int', 'header': 'int* pFd\n        ', 'name': 'pFd'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetMemoryFdPropertiesKHR(\nVkDevice device,\n VkExternalMemoryHandleTypeFlagBits handleType,\n int fd,\n VkMemoryFdPropertiesKHR* pMemoryFdProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkExternalMemoryHandleTypeFlagBits', 'header': 'VkExternalMemoryHandleTypeFlagBits handleType\n            ', 'name': 'handleType'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'int', 'header': 'int fd\n            ', 'name': 'fd'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkMemoryFdPropertiesKHR', 'header': 'VkMemoryFdPropertiesKHR* pMemoryFdProperties\n        ', 'name': 'pMemoryFdProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetMemoryRemoteAddressNV(\nVkDevice device,\n const VkMemoryGetRemoteAddressInfoNV* pMemoryGetRemoteAddressInfo,\n VkRemoteAddressNV* pAddress\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkMemoryGetRemoteAddressInfoNV', 'header': 'const VkMemoryGetRemoteAddressInfoNV* pMemoryGetRemoteAddressInfo\n            ', 'name': 'pMemoryGetRemoteAddressInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkRemoteAddressNV', 'header': 'VkRemoteAddressNV* pAddress\n        ', 'name': 'pAddress'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetPhysicalDeviceExternalSemaphoreProperties(\nVkPhysicalDevice physicalDevice,\n const VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo,\n VkExternalSemaphoreProperties* pExternalSemaphoreProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPhysicalDeviceExternalSemaphoreInfo', 'header': 'const VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo\n            ', 'name': 'pExternalSemaphoreInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkExternalSemaphoreProperties', 'header': 'VkExternalSemaphoreProperties* pExternalSemaphoreProperties\n        ', 'name': 'pExternalSemaphoreProperties'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(\nVkPhysicalDevice physicalDevice,\n const VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo,\n VkExternalSemaphoreProperties* pExternalSemaphoreProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPhysicalDeviceExternalSemaphoreInfo', 'header': 'const VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo\n            ', 'name': 'pExternalSemaphoreInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkExternalSemaphoreProperties', 'header': 'VkExternalSemaphoreProperties* pExternalSemaphoreProperties\n        ', 'name': 'pExternalSemaphoreProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetSemaphoreFdKHR(\nVkDevice device,\n const VkSemaphoreGetFdInfoKHR* pGetFdInfo,\n int* pFd\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkSemaphoreGetFdInfoKHR', 'header': 'const VkSemaphoreGetFdInfoKHR* pGetFdInfo\n            ', 'name': 'pGetFdInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'int', 'header': 'int* pFd\n        ', 'name': 'pFd'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkImportSemaphoreFdKHR(\nVkDevice device,\n const VkImportSemaphoreFdInfoKHR* pImportSemaphoreFdInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkImportSemaphoreFdInfoKHR', 'header': 'const VkImportSemaphoreFdInfoKHR* pImportSemaphoreFdInfo\n        ', 'name': 'pImportSemaphoreFdInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetPhysicalDeviceExternalFenceProperties(\nVkPhysicalDevice physicalDevice,\n const VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo,\n VkExternalFenceProperties* pExternalFenceProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPhysicalDeviceExternalFenceInfo', 'header': 'const VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo\n            ', 'name': 'pExternalFenceInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkExternalFenceProperties', 'header': 'VkExternalFenceProperties* pExternalFenceProperties\n        ', 'name': 'pExternalFenceProperties'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetPhysicalDeviceExternalFencePropertiesKHR(\nVkPhysicalDevice physicalDevice,\n const VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo,\n VkExternalFenceProperties* pExternalFenceProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPhysicalDeviceExternalFenceInfo', 'header': 'const VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo\n            ', 'name': 'pExternalFenceInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkExternalFenceProperties', 'header': 'VkExternalFenceProperties* pExternalFenceProperties\n        ', 'name': 'pExternalFenceProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetFenceFdKHR(\nVkDevice device,\n const VkFenceGetFdInfoKHR* pGetFdInfo,\n int* pFd\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkFenceGetFdInfoKHR', 'header': 'const VkFenceGetFdInfoKHR* pGetFdInfo\n            ', 'name': 'pGetFdInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'int', 'header': 'int* pFd\n        ', 'name': 'pFd'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkImportFenceFdKHR(\nVkDevice device,\n const VkImportFenceFdInfoKHR* pImportFenceFdInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkImportFenceFdInfoKHR', 'header': 'const VkImportFenceFdInfoKHR* pImportFenceFdInfo\n        ', 'name': 'pImportFenceFdInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkReleaseDisplayEXT(\nVkPhysicalDevice physicalDevice,\n VkDisplayKHR display\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDisplayKHR', 'header': 'VkDisplayKHR display\n        ', 'name': 'display'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkDisplayPowerControlEXT(\nVkDevice device,\n VkDisplayKHR display,\n const VkDisplayPowerInfoEXT* pDisplayPowerInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDisplayKHR', 'header': 'VkDisplayKHR display\n            ', 'name': 'display'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDisplayPowerInfoEXT', 'header': 'const VkDisplayPowerInfoEXT* pDisplayPowerInfo\n        ', 'name': 'pDisplayPowerInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkRegisterDeviceEventEXT(\nVkDevice device,\n const VkDeviceEventInfoEXT* pDeviceEventInfo,\n const VkAllocationCallbacks* pAllocator,\n VkFence* pFence\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDeviceEventInfoEXT', 'header': 'const VkDeviceEventInfoEXT* pDeviceEventInfo\n            ', 'name': 'pDeviceEventInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkFence', 'header': 'VkFence* pFence\n        ', 'name': 'pFence'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkRegisterDisplayEventEXT(\nVkDevice device,\n VkDisplayKHR display,\n const VkDisplayEventInfoEXT* pDisplayEventInfo,\n const VkAllocationCallbacks* pAllocator,\n VkFence* pFence\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDisplayKHR', 'header': 'VkDisplayKHR display\n            ', 'name': 'display'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDisplayEventInfoEXT', 'header': 'const VkDisplayEventInfoEXT* pDisplayEventInfo\n            ', 'name': 'pDisplayEventInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkFence', 'header': 'VkFence* pFence\n        ', 'name': 'pFence'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetSwapchainCounterEXT(\nVkDevice device,\n VkSwapchainKHR swapchain,\n VkSurfaceCounterFlagBitsEXT counter,\n uint64_t* pCounterValue\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSwapchainKHR', 'header': 'VkSwapchainKHR swapchain\n            ', 'name': 'swapchain'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSurfaceCounterFlagBitsEXT', 'header': 'VkSurfaceCounterFlagBitsEXT counter\n            ', 'name': 'counter'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint64_t', 'header': 'uint64_t* pCounterValue\n        ', 'name': 'pCounterValue'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetPhysicalDeviceSurfaceCapabilities2EXT(\nVkPhysicalDevice physicalDevice,\n VkSurfaceKHR surface,\n VkSurfaceCapabilities2EXT* pSurfaceCapabilities\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSurfaceKHR', 'header': 'VkSurfaceKHR surface\n            ', 'name': 'surface'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkSurfaceCapabilities2EXT', 'header': 'VkSurfaceCapabilities2EXT* pSurfaceCapabilities\n        ', 'name': 'pSurfaceCapabilities'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkEnumeratePhysicalDeviceGroups(\nVkInstance instance,\n uint32_t* pPhysicalDeviceGroupCount,\n VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkInstance', 'header': 'VkInstance instance\n            ', 'name': 'instance'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pPhysicalDeviceGroupCount\n            ', 'name': 'pPhysicalDeviceGroupCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pPhysicalDeviceGroupCount'], 'type': 'VkPhysicalDeviceGroupProperties', 'header': 'VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties\n        ', 'name': 'pPhysicalDeviceGroupProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkEnumeratePhysicalDeviceGroupsKHR(\nVkInstance instance,\n uint32_t* pPhysicalDeviceGroupCount,\n VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkInstance', 'header': 'VkInstance instance\n            ', 'name': 'instance'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pPhysicalDeviceGroupCount\n            ', 'name': 'pPhysicalDeviceGroupCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pPhysicalDeviceGroupCount'], 'type': 'VkPhysicalDeviceGroupProperties', 'header': 'VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties\n        ', 'name': 'pPhysicalDeviceGroupProperties'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetDeviceGroupPeerMemoryFeatures(\nVkDevice device,\n uint32_t heapIndex,\n uint32_t localDeviceIndex,\n uint32_t remoteDeviceIndex,\n VkPeerMemoryFeatureFlags* pPeerMemoryFeatures\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t heapIndex\n            ', 'name': 'heapIndex'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t localDeviceIndex\n            ', 'name': 'localDeviceIndex'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t remoteDeviceIndex\n            ', 'name': 'remoteDeviceIndex'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkPeerMemoryFeatureFlags', 'header': 'VkPeerMemoryFeatureFlags* pPeerMemoryFeatures\n        ', 'name': 'pPeerMemoryFeatures'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetDeviceGroupPeerMemoryFeaturesKHR(\nVkDevice device,\n uint32_t heapIndex,\n uint32_t localDeviceIndex,\n uint32_t remoteDeviceIndex,\n VkPeerMemoryFeatureFlags* pPeerMemoryFeatures\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t heapIndex\n            ', 'name': 'heapIndex'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t localDeviceIndex\n            ', 'name': 'localDeviceIndex'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t remoteDeviceIndex\n            ', 'name': 'remoteDeviceIndex'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkPeerMemoryFeatureFlags', 'header': 'VkPeerMemoryFeatureFlags* pPeerMemoryFeatures\n        ', 'name': 'pPeerMemoryFeatures'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkBindBufferMemory2(\nVkDevice device,\n uint32_t bindInfoCount,\n const VkBindBufferMemoryInfo* pBindInfos\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t bindInfoCount\n            ', 'name': 'bindInfoCount'}, {'const': True, 'num_indirection': 1, 'length': ['bindInfoCount'], 'type': 'VkBindBufferMemoryInfo', 'header': 'const VkBindBufferMemoryInfo* pBindInfos\n        ', 'name': 'pBindInfos'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkBindBufferMemory2KHR(\nVkDevice device,\n uint32_t bindInfoCount,\n const VkBindBufferMemoryInfo* pBindInfos\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t bindInfoCount\n            ', 'name': 'bindInfoCount'}, {'const': True, 'num_indirection': 1, 'length': ['bindInfoCount'], 'type': 'VkBindBufferMemoryInfo', 'header': 'const VkBindBufferMemoryInfo* pBindInfos\n        ', 'name': 'pBindInfos'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkBindImageMemory2(\nVkDevice device,\n uint32_t bindInfoCount,\n const VkBindImageMemoryInfo* pBindInfos\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t bindInfoCount\n            ', 'name': 'bindInfoCount'}, {'const': True, 'num_indirection': 1, 'length': ['bindInfoCount'], 'type': 'VkBindImageMemoryInfo', 'header': 'const VkBindImageMemoryInfo* pBindInfos\n        ', 'name': 'pBindInfos'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkBindImageMemory2KHR(\nVkDevice device,\n uint32_t bindInfoCount,\n const VkBindImageMemoryInfo* pBindInfos\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t bindInfoCount\n            ', 'name': 'bindInfoCount'}, {'const': True, 'num_indirection': 1, 'length': ['bindInfoCount'], 'type': 'VkBindImageMemoryInfo', 'header': 'const VkBindImageMemoryInfo* pBindInfos\n        ', 'name': 'pBindInfos'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetDeviceMask(\nVkCommandBuffer commandBuffer,\n uint32_t deviceMask\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t deviceMask\n        ', 'name': 'deviceMask'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetDeviceMaskKHR(\nVkCommandBuffer commandBuffer,\n uint32_t deviceMask\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t deviceMask\n        ', 'name': 'deviceMask'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetDeviceGroupPresentCapabilitiesKHR(\nVkDevice device,\n VkDeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkDeviceGroupPresentCapabilitiesKHR', 'header': 'VkDeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities\n        ', 'name': 'pDeviceGroupPresentCapabilities'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetDeviceGroupSurfacePresentModesKHR(\nVkDevice device,\n VkSurfaceKHR surface,\n VkDeviceGroupPresentModeFlagsKHR* pModes\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSurfaceKHR', 'header': 'VkSurfaceKHR surface\n            ', 'name': 'surface'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkDeviceGroupPresentModeFlagsKHR', 'header': 'VkDeviceGroupPresentModeFlagsKHR* pModes\n        ', 'name': 'pModes'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkAcquireNextImage2KHR(\nVkDevice device,\n const VkAcquireNextImageInfoKHR* pAcquireInfo,\n uint32_t* pImageIndex\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAcquireNextImageInfoKHR', 'header': 'const VkAcquireNextImageInfoKHR* pAcquireInfo\n            ', 'name': 'pAcquireInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pImageIndex\n        ', 'name': 'pImageIndex'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdDispatchBase(\nVkCommandBuffer commandBuffer,\n uint32_t baseGroupX,\n uint32_t baseGroupY,\n uint32_t baseGroupZ,\n uint32_t groupCountX,\n uint32_t groupCountY,\n uint32_t groupCountZ\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t baseGroupX\n            ', 'name': 'baseGroupX'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t baseGroupY\n            ', 'name': 'baseGroupY'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t baseGroupZ\n            ', 'name': 'baseGroupZ'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t groupCountX\n            ', 'name': 'groupCountX'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t groupCountY\n            ', 'name': 'groupCountY'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t groupCountZ\n        ', 'name': 'groupCountZ'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdDispatchBaseKHR(\nVkCommandBuffer commandBuffer,\n uint32_t baseGroupX,\n uint32_t baseGroupY,\n uint32_t baseGroupZ,\n uint32_t groupCountX,\n uint32_t groupCountY,\n uint32_t groupCountZ\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t baseGroupX\n            ', 'name': 'baseGroupX'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t baseGroupY\n            ', 'name': 'baseGroupY'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t baseGroupZ\n            ', 'name': 'baseGroupZ'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t groupCountX\n            ', 'name': 'groupCountX'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t groupCountY\n            ', 'name': 'groupCountY'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t groupCountZ\n        ', 'name': 'groupCountZ'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetPhysicalDevicePresentRectanglesKHR(\nVkPhysicalDevice physicalDevice,\n VkSurfaceKHR surface,\n uint32_t* pRectCount,\n VkRect2D* pRects\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSurfaceKHR', 'header': 'VkSurfaceKHR surface\n            ', 'name': 'surface'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pRectCount\n            ', 'name': 'pRectCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pRectCount'], 'type': 'VkRect2D', 'header': 'VkRect2D* pRects\n        ', 'name': 'pRects'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreateDescriptorUpdateTemplate(\nVkDevice device,\n const VkDescriptorUpdateTemplateCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDescriptorUpdateTemplateCreateInfo', 'header': 'const VkDescriptorUpdateTemplateCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkDescriptorUpdateTemplate', 'header': 'VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate\n        ', 'name': 'pDescriptorUpdateTemplate'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreateDescriptorUpdateTemplateKHR(\nVkDevice device,\n const VkDescriptorUpdateTemplateCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDescriptorUpdateTemplateCreateInfo', 'header': 'const VkDescriptorUpdateTemplateCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkDescriptorUpdateTemplate', 'header': 'VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate\n        ', 'name': 'pDescriptorUpdateTemplate'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkDestroyDescriptorUpdateTemplate(\nVkDevice device,\n VkDescriptorUpdateTemplate descriptorUpdateTemplate,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDescriptorUpdateTemplate', 'header': 'VkDescriptorUpdateTemplate descriptorUpdateTemplate\n            ', 'name': 'descriptorUpdateTemplate'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkDestroyDescriptorUpdateTemplateKHR(\nVkDevice device,\n VkDescriptorUpdateTemplate descriptorUpdateTemplate,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDescriptorUpdateTemplate', 'header': 'VkDescriptorUpdateTemplate descriptorUpdateTemplate\n            ', 'name': 'descriptorUpdateTemplate'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkUpdateDescriptorSetWithTemplate(\nVkDevice device,\n VkDescriptorSet descriptorSet,\n VkDescriptorUpdateTemplate descriptorUpdateTemplate,\n const void* pData\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDescriptorSet', 'header': 'VkDescriptorSet descriptorSet\n            ', 'name': 'descriptorSet'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDescriptorUpdateTemplate', 'header': 'VkDescriptorUpdateTemplate descriptorUpdateTemplate\n            ', 'name': 'descriptorUpdateTemplate'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'void', 'header': 'const void* pData\n        ', 'name': 'pData'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkUpdateDescriptorSetWithTemplateKHR(\nVkDevice device,\n VkDescriptorSet descriptorSet,\n VkDescriptorUpdateTemplate descriptorUpdateTemplate,\n const void* pData\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDescriptorSet', 'header': 'VkDescriptorSet descriptorSet\n            ', 'name': 'descriptorSet'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDescriptorUpdateTemplate', 'header': 'VkDescriptorUpdateTemplate descriptorUpdateTemplate\n            ', 'name': 'descriptorUpdateTemplate'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'void', 'header': 'const void* pData\n        ', 'name': 'pData'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdPushDescriptorSetWithTemplateKHR(\nVkCommandBuffer commandBuffer,\n VkDescriptorUpdateTemplate descriptorUpdateTemplate,\n VkPipelineLayout layout,\n uint32_t set,\n const void* pData\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDescriptorUpdateTemplate', 'header': 'VkDescriptorUpdateTemplate descriptorUpdateTemplate\n            ', 'name': 'descriptorUpdateTemplate'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineLayout', 'header': 'VkPipelineLayout layout\n            ', 'name': 'layout'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t set\n            ', 'name': 'set'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'void', 'header': 'const void* pData\n        ', 'name': 'pData'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkSetHdrMetadataEXT(\nVkDevice device,\n uint32_t swapchainCount,\n const VkSwapchainKHR* pSwapchains,\n const VkHdrMetadataEXT* pMetadata\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t swapchainCount\n            ', 'name': 'swapchainCount'}, {'const': True, 'num_indirection': 1, 'length': ['swapchainCount'], 'type': 'VkSwapchainKHR', 'header': 'const VkSwapchainKHR* pSwapchains\n            ', 'name': 'pSwapchains'}, {'const': True, 'num_indirection': 1, 'length': ['swapchainCount'], 'type': 'VkHdrMetadataEXT', 'header': 'const VkHdrMetadataEXT* pMetadata\n        ', 'name': 'pMetadata'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetSwapchainStatusKHR(\nVkDevice device,\n VkSwapchainKHR swapchain\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSwapchainKHR', 'header': 'VkSwapchainKHR swapchain\n        ', 'name': 'swapchain'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetRefreshCycleDurationGOOGLE(\nVkDevice device,\n VkSwapchainKHR swapchain,\n VkRefreshCycleDurationGOOGLE* pDisplayTimingProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSwapchainKHR', 'header': 'VkSwapchainKHR swapchain\n            ', 'name': 'swapchain'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkRefreshCycleDurationGOOGLE', 'header': 'VkRefreshCycleDurationGOOGLE* pDisplayTimingProperties\n        ', 'name': 'pDisplayTimingProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetPastPresentationTimingGOOGLE(\nVkDevice device,\n VkSwapchainKHR swapchain,\n uint32_t* pPresentationTimingCount,\n VkPastPresentationTimingGOOGLE* pPresentationTimings\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSwapchainKHR', 'header': 'VkSwapchainKHR swapchain\n            ', 'name': 'swapchain'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pPresentationTimingCount\n            ', 'name': 'pPresentationTimingCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pPresentationTimingCount'], 'type': 'VkPastPresentationTimingGOOGLE', 'header': 'VkPastPresentationTimingGOOGLE* pPresentationTimings\n        ', 'name': 'pPresentationTimings'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetViewportWScalingNV(\nVkCommandBuffer commandBuffer,\n uint32_t firstViewport,\n uint32_t viewportCount,\n const VkViewportWScalingNV* pViewportWScalings\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstViewport\n            ', 'name': 'firstViewport'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t viewportCount\n            ', 'name': 'viewportCount'}, {'const': True, 'num_indirection': 1, 'length': ['viewportCount'], 'type': 'VkViewportWScalingNV', 'header': 'const VkViewportWScalingNV* pViewportWScalings\n        ', 'name': 'pViewportWScalings'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetDiscardRectangleEXT(\nVkCommandBuffer commandBuffer,\n uint32_t firstDiscardRectangle,\n uint32_t discardRectangleCount,\n const VkRect2D* pDiscardRectangles\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstDiscardRectangle\n            ', 'name': 'firstDiscardRectangle'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t discardRectangleCount\n            ', 'name': 'discardRectangleCount'}, {'const': True, 'num_indirection': 1, 'length': ['discardRectangleCount'], 'type': 'VkRect2D', 'header': 'const VkRect2D* pDiscardRectangles\n        ', 'name': 'pDiscardRectangles'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetDiscardRectangleEnableEXT(\nVkCommandBuffer commandBuffer,\n VkBool32 discardRectangleEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 discardRectangleEnable\n        ', 'name': 'discardRectangleEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetDiscardRectangleModeEXT(\nVkCommandBuffer commandBuffer,\n VkDiscardRectangleModeEXT discardRectangleMode\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDiscardRectangleModeEXT', 'header': 'VkDiscardRectangleModeEXT discardRectangleMode\n        ', 'name': 'discardRectangleMode'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetSampleLocationsEXT(\nVkCommandBuffer commandBuffer,\n const VkSampleLocationsInfoEXT* pSampleLocationsInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkSampleLocationsInfoEXT', 'header': 'const VkSampleLocationsInfoEXT* pSampleLocationsInfo\n        ', 'name': 'pSampleLocationsInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetPhysicalDeviceMultisamplePropertiesEXT(\nVkPhysicalDevice physicalDevice,\n VkSampleCountFlagBits samples,\n VkMultisamplePropertiesEXT* pMultisampleProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSampleCountFlagBits', 'header': 'VkSampleCountFlagBits samples\n            ', 'name': 'samples'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkMultisamplePropertiesEXT', 'header': 'VkMultisamplePropertiesEXT* pMultisampleProperties\n        ', 'name': 'pMultisampleProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetPhysicalDeviceSurfaceCapabilities2KHR(\nVkPhysicalDevice physicalDevice,\n const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo,\n VkSurfaceCapabilities2KHR* pSurfaceCapabilities\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPhysicalDeviceSurfaceInfo2KHR', 'header': 'const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo\n            ', 'name': 'pSurfaceInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkSurfaceCapabilities2KHR', 'header': 'VkSurfaceCapabilities2KHR* pSurfaceCapabilities\n        ', 'name': 'pSurfaceCapabilities'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetPhysicalDeviceSurfaceFormats2KHR(\nVkPhysicalDevice physicalDevice,\n const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo,\n uint32_t* pSurfaceFormatCount,\n VkSurfaceFormat2KHR* pSurfaceFormats\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPhysicalDeviceSurfaceInfo2KHR', 'header': 'const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo\n            ', 'name': 'pSurfaceInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pSurfaceFormatCount\n            ', 'name': 'pSurfaceFormatCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pSurfaceFormatCount'], 'type': 'VkSurfaceFormat2KHR', 'header': 'VkSurfaceFormat2KHR* pSurfaceFormats\n        ', 'name': 'pSurfaceFormats'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetPhysicalDeviceDisplayProperties2KHR(\nVkPhysicalDevice physicalDevice,\n uint32_t* pPropertyCount,\n VkDisplayProperties2KHR* pProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pPropertyCount\n            ', 'name': 'pPropertyCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pPropertyCount'], 'type': 'VkDisplayProperties2KHR', 'header': 'VkDisplayProperties2KHR* pProperties\n        ', 'name': 'pProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetPhysicalDeviceDisplayPlaneProperties2KHR(\nVkPhysicalDevice physicalDevice,\n uint32_t* pPropertyCount,\n VkDisplayPlaneProperties2KHR* pProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pPropertyCount\n            ', 'name': 'pPropertyCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pPropertyCount'], 'type': 'VkDisplayPlaneProperties2KHR', 'header': 'VkDisplayPlaneProperties2KHR* pProperties\n        ', 'name': 'pProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetDisplayModeProperties2KHR(\nVkPhysicalDevice physicalDevice,\n VkDisplayKHR display,\n uint32_t* pPropertyCount,\n VkDisplayModeProperties2KHR* pProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDisplayKHR', 'header': 'VkDisplayKHR display\n            ', 'name': 'display'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pPropertyCount\n            ', 'name': 'pPropertyCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pPropertyCount'], 'type': 'VkDisplayModeProperties2KHR', 'header': 'VkDisplayModeProperties2KHR* pProperties\n        ', 'name': 'pProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetDisplayPlaneCapabilities2KHR(\nVkPhysicalDevice physicalDevice,\n const VkDisplayPlaneInfo2KHR* pDisplayPlaneInfo,\n VkDisplayPlaneCapabilities2KHR* pCapabilities\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDisplayPlaneInfo2KHR', 'header': 'const VkDisplayPlaneInfo2KHR* pDisplayPlaneInfo\n            ', 'name': 'pDisplayPlaneInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkDisplayPlaneCapabilities2KHR', 'header': 'VkDisplayPlaneCapabilities2KHR* pCapabilities\n        ', 'name': 'pCapabilities'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetBufferMemoryRequirements2(\nVkDevice device,\n const VkBufferMemoryRequirementsInfo2* pInfo,\n VkMemoryRequirements2* pMemoryRequirements\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkBufferMemoryRequirementsInfo2', 'header': 'const VkBufferMemoryRequirementsInfo2* pInfo\n            ', 'name': 'pInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkMemoryRequirements2', 'header': 'VkMemoryRequirements2* pMemoryRequirements\n        ', 'name': 'pMemoryRequirements'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetBufferMemoryRequirements2KHR(\nVkDevice device,\n const VkBufferMemoryRequirementsInfo2* pInfo,\n VkMemoryRequirements2* pMemoryRequirements\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkBufferMemoryRequirementsInfo2', 'header': 'const VkBufferMemoryRequirementsInfo2* pInfo\n            ', 'name': 'pInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkMemoryRequirements2', 'header': 'VkMemoryRequirements2* pMemoryRequirements\n        ', 'name': 'pMemoryRequirements'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetImageMemoryRequirements2(\nVkDevice device,\n const VkImageMemoryRequirementsInfo2* pInfo,\n VkMemoryRequirements2* pMemoryRequirements\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkImageMemoryRequirementsInfo2', 'header': 'const VkImageMemoryRequirementsInfo2* pInfo\n            ', 'name': 'pInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkMemoryRequirements2', 'header': 'VkMemoryRequirements2* pMemoryRequirements\n        ', 'name': 'pMemoryRequirements'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetImageMemoryRequirements2KHR(\nVkDevice device,\n const VkImageMemoryRequirementsInfo2* pInfo,\n VkMemoryRequirements2* pMemoryRequirements\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkImageMemoryRequirementsInfo2', 'header': 'const VkImageMemoryRequirementsInfo2* pInfo\n            ', 'name': 'pInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkMemoryRequirements2', 'header': 'VkMemoryRequirements2* pMemoryRequirements\n        ', 'name': 'pMemoryRequirements'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetImageSparseMemoryRequirements2(\nVkDevice device,\n const VkImageSparseMemoryRequirementsInfo2* pInfo,\n uint32_t* pSparseMemoryRequirementCount,\n VkSparseImageMemoryRequirements2* pSparseMemoryRequirements\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkImageSparseMemoryRequirementsInfo2', 'header': 'const VkImageSparseMemoryRequirementsInfo2* pInfo\n            ', 'name': 'pInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pSparseMemoryRequirementCount\n            ', 'name': 'pSparseMemoryRequirementCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pSparseMemoryRequirementCount'], 'type': 'VkSparseImageMemoryRequirements2', 'header': 'VkSparseImageMemoryRequirements2* pSparseMemoryRequirements\n        ', 'name': 'pSparseMemoryRequirements'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetImageSparseMemoryRequirements2KHR(\nVkDevice device,\n const VkImageSparseMemoryRequirementsInfo2* pInfo,\n uint32_t* pSparseMemoryRequirementCount,\n VkSparseImageMemoryRequirements2* pSparseMemoryRequirements\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkImageSparseMemoryRequirementsInfo2', 'header': 'const VkImageSparseMemoryRequirementsInfo2* pInfo\n            ', 'name': 'pInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pSparseMemoryRequirementCount\n            ', 'name': 'pSparseMemoryRequirementCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pSparseMemoryRequirementCount'], 'type': 'VkSparseImageMemoryRequirements2', 'header': 'VkSparseImageMemoryRequirements2* pSparseMemoryRequirements\n        ', 'name': 'pSparseMemoryRequirements'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetDeviceBufferMemoryRequirements(\nVkDevice device,\n const VkDeviceBufferMemoryRequirements* pInfo,\n VkMemoryRequirements2* pMemoryRequirements\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDeviceBufferMemoryRequirements', 'header': 'const VkDeviceBufferMemoryRequirements* pInfo\n            ', 'name': 'pInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkMemoryRequirements2', 'header': 'VkMemoryRequirements2* pMemoryRequirements\n        ', 'name': 'pMemoryRequirements'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetDeviceBufferMemoryRequirementsKHR(\nVkDevice device,\n const VkDeviceBufferMemoryRequirements* pInfo,\n VkMemoryRequirements2* pMemoryRequirements\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDeviceBufferMemoryRequirements', 'header': 'const VkDeviceBufferMemoryRequirements* pInfo\n            ', 'name': 'pInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkMemoryRequirements2', 'header': 'VkMemoryRequirements2* pMemoryRequirements\n        ', 'name': 'pMemoryRequirements'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetDeviceImageMemoryRequirements(\nVkDevice device,\n const VkDeviceImageMemoryRequirements* pInfo,\n VkMemoryRequirements2* pMemoryRequirements\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDeviceImageMemoryRequirements', 'header': 'const VkDeviceImageMemoryRequirements* pInfo\n            ', 'name': 'pInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkMemoryRequirements2', 'header': 'VkMemoryRequirements2* pMemoryRequirements\n        ', 'name': 'pMemoryRequirements'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetDeviceImageMemoryRequirementsKHR(\nVkDevice device,\n const VkDeviceImageMemoryRequirements* pInfo,\n VkMemoryRequirements2* pMemoryRequirements\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDeviceImageMemoryRequirements', 'header': 'const VkDeviceImageMemoryRequirements* pInfo\n            ', 'name': 'pInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkMemoryRequirements2', 'header': 'VkMemoryRequirements2* pMemoryRequirements\n        ', 'name': 'pMemoryRequirements'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetDeviceImageSparseMemoryRequirements(\nVkDevice device,\n const VkDeviceImageMemoryRequirements* pInfo,\n uint32_t* pSparseMemoryRequirementCount,\n VkSparseImageMemoryRequirements2* pSparseMemoryRequirements\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDeviceImageMemoryRequirements', 'header': 'const VkDeviceImageMemoryRequirements* pInfo\n            ', 'name': 'pInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pSparseMemoryRequirementCount\n            ', 'name': 'pSparseMemoryRequirementCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pSparseMemoryRequirementCount'], 'type': 'VkSparseImageMemoryRequirements2', 'header': 'VkSparseImageMemoryRequirements2* pSparseMemoryRequirements\n        ', 'name': 'pSparseMemoryRequirements'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetDeviceImageSparseMemoryRequirementsKHR(\nVkDevice device,\n const VkDeviceImageMemoryRequirements* pInfo,\n uint32_t* pSparseMemoryRequirementCount,\n VkSparseImageMemoryRequirements2* pSparseMemoryRequirements\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDeviceImageMemoryRequirements', 'header': 'const VkDeviceImageMemoryRequirements* pInfo\n            ', 'name': 'pInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pSparseMemoryRequirementCount\n            ', 'name': 'pSparseMemoryRequirementCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pSparseMemoryRequirementCount'], 'type': 'VkSparseImageMemoryRequirements2', 'header': 'VkSparseImageMemoryRequirements2* pSparseMemoryRequirements\n        ', 'name': 'pSparseMemoryRequirements'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreateSamplerYcbcrConversion(\nVkDevice device,\n const VkSamplerYcbcrConversionCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkSamplerYcbcrConversion* pYcbcrConversion\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkSamplerYcbcrConversionCreateInfo', 'header': 'const VkSamplerYcbcrConversionCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkSamplerYcbcrConversion', 'header': 'VkSamplerYcbcrConversion* pYcbcrConversion\n        ', 'name': 'pYcbcrConversion'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreateSamplerYcbcrConversionKHR(\nVkDevice device,\n const VkSamplerYcbcrConversionCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkSamplerYcbcrConversion* pYcbcrConversion\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkSamplerYcbcrConversionCreateInfo', 'header': 'const VkSamplerYcbcrConversionCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkSamplerYcbcrConversion', 'header': 'VkSamplerYcbcrConversion* pYcbcrConversion\n        ', 'name': 'pYcbcrConversion'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkDestroySamplerYcbcrConversion(\nVkDevice device,\n VkSamplerYcbcrConversion ycbcrConversion,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSamplerYcbcrConversion', 'header': 'VkSamplerYcbcrConversion ycbcrConversion\n            ', 'name': 'ycbcrConversion'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkDestroySamplerYcbcrConversionKHR(\nVkDevice device,\n VkSamplerYcbcrConversion ycbcrConversion,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSamplerYcbcrConversion', 'header': 'VkSamplerYcbcrConversion ycbcrConversion\n            ', 'name': 'ycbcrConversion'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetDeviceQueue2(\nVkDevice device,\n const VkDeviceQueueInfo2* pQueueInfo,\n VkQueue* pQueue\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDeviceQueueInfo2', 'header': 'const VkDeviceQueueInfo2* pQueueInfo\n            ', 'name': 'pQueueInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkQueue', 'header': 'VkQueue* pQueue\n        ', 'name': 'pQueue'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreateValidationCacheEXT(\nVkDevice device,\n const VkValidationCacheCreateInfoEXT* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkValidationCacheEXT* pValidationCache\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkValidationCacheCreateInfoEXT', 'header': 'const VkValidationCacheCreateInfoEXT* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkValidationCacheEXT', 'header': 'VkValidationCacheEXT* pValidationCache\n        ', 'name': 'pValidationCache'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkDestroyValidationCacheEXT(\nVkDevice device,\n VkValidationCacheEXT validationCache,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkValidationCacheEXT', 'header': 'VkValidationCacheEXT validationCache\n            ', 'name': 'validationCache'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetValidationCacheDataEXT(\nVkDevice device,\n VkValidationCacheEXT validationCache,\n size_t* pDataSize,\n void* pData\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkValidationCacheEXT', 'header': 'VkValidationCacheEXT validationCache\n            ', 'name': 'validationCache'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'size_t', 'header': 'size_t* pDataSize\n            ', 'name': 'pDataSize'}, {'const': False, 'num_indirection': 1, 'length': ['*pDataSize'], 'type': 'void', 'header': 'void* pData\n        ', 'name': 'pData'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkMergeValidationCachesEXT(\nVkDevice device,\n VkValidationCacheEXT dstCache,\n uint32_t srcCacheCount,\n const VkValidationCacheEXT* pSrcCaches\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkValidationCacheEXT', 'header': 'VkValidationCacheEXT dstCache\n            ', 'name': 'dstCache'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t srcCacheCount\n            ', 'name': 'srcCacheCount'}, {'const': True, 'num_indirection': 1, 'length': ['srcCacheCount'], 'type': 'VkValidationCacheEXT', 'header': 'const VkValidationCacheEXT* pSrcCaches\n        ', 'name': 'pSrcCaches'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetDescriptorSetLayoutSupport(\nVkDevice device,\n const VkDescriptorSetLayoutCreateInfo* pCreateInfo,\n VkDescriptorSetLayoutSupport* pSupport\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDescriptorSetLayoutCreateInfo', 'header': 'const VkDescriptorSetLayoutCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkDescriptorSetLayoutSupport', 'header': 'VkDescriptorSetLayoutSupport* pSupport\n        ', 'name': 'pSupport'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetDescriptorSetLayoutSupportKHR(\nVkDevice device,\n const VkDescriptorSetLayoutCreateInfo* pCreateInfo,\n VkDescriptorSetLayoutSupport* pSupport\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDescriptorSetLayoutCreateInfo', 'header': 'const VkDescriptorSetLayoutCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkDescriptorSetLayoutSupport', 'header': 'VkDescriptorSetLayoutSupport* pSupport\n        ', 'name': 'pSupport'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetShaderInfoAMD(\nVkDevice device,\n VkPipeline pipeline,\n VkShaderStageFlagBits shaderStage,\n VkShaderInfoTypeAMD infoType,\n size_t* pInfoSize,\n void* pInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipeline', 'header': 'VkPipeline pipeline\n            ', 'name': 'pipeline'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkShaderStageFlagBits', 'header': 'VkShaderStageFlagBits shaderStage\n            ', 'name': 'shaderStage'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkShaderInfoTypeAMD', 'header': 'VkShaderInfoTypeAMD infoType\n            ', 'name': 'infoType'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'size_t', 'header': 'size_t* pInfoSize\n            ', 'name': 'pInfoSize'}, {'const': False, 'num_indirection': 1, 'length': ['*pInfoSize'], 'type': 'void', 'header': 'void* pInfo\n        ', 'name': 'pInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkSetLocalDimmingAMD(\nVkDevice device,\n VkSwapchainKHR swapChain,\n VkBool32 localDimmingEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSwapchainKHR', 'header': 'VkSwapchainKHR swapChain\n            ', 'name': 'swapChain'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 localDimmingEnable\n        ', 'name': 'localDimmingEnable'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(\nVkPhysicalDevice physicalDevice,\n uint32_t* pTimeDomainCount,\n VkTimeDomainEXT* pTimeDomains\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pTimeDomainCount\n            ', 'name': 'pTimeDomainCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pTimeDomainCount'], 'type': 'VkTimeDomainEXT', 'header': 'VkTimeDomainEXT* pTimeDomains\n        ', 'name': 'pTimeDomains'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetCalibratedTimestampsEXT(\nVkDevice device,\n uint32_t timestampCount,\n const VkCalibratedTimestampInfoEXT* pTimestampInfos,\n uint64_t* pTimestamps,\n uint64_t* pMaxDeviation\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t timestampCount\n            ', 'name': 'timestampCount'}, {'const': True, 'num_indirection': 1, 'length': ['timestampCount'], 'type': 'VkCalibratedTimestampInfoEXT', 'header': 'const VkCalibratedTimestampInfoEXT* pTimestampInfos\n            ', 'name': 'pTimestampInfos'}, {'const': False, 'num_indirection': 1, 'length': ['timestampCount'], 'type': 'uint64_t', 'header': 'uint64_t* pTimestamps\n            ', 'name': 'pTimestamps'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint64_t', 'header': 'uint64_t* pMaxDeviation\n        ', 'name': 'pMaxDeviation'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkSetDebugUtilsObjectNameEXT(\nVkDevice device,\n const VkDebugUtilsObjectNameInfoEXT* pNameInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDebugUtilsObjectNameInfoEXT', 'header': 'const VkDebugUtilsObjectNameInfoEXT* pNameInfo\n        ', 'name': 'pNameInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkSetDebugUtilsObjectTagEXT(\nVkDevice device,\n const VkDebugUtilsObjectTagInfoEXT* pTagInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDebugUtilsObjectTagInfoEXT', 'header': 'const VkDebugUtilsObjectTagInfoEXT* pTagInfo\n        ', 'name': 'pTagInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkQueueBeginDebugUtilsLabelEXT(\nVkQueue queue,\n const VkDebugUtilsLabelEXT* pLabelInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueue', 'header': 'VkQueue queue\n            ', 'name': 'queue'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDebugUtilsLabelEXT', 'header': 'const VkDebugUtilsLabelEXT* pLabelInfo\n        ', 'name': 'pLabelInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkQueueEndDebugUtilsLabelEXT(\nVkQueue queue\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueue', 'header': 'VkQueue queue\n        ', 'name': 'queue'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkQueueInsertDebugUtilsLabelEXT(\nVkQueue queue,\n const VkDebugUtilsLabelEXT* pLabelInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueue', 'header': 'VkQueue queue\n            ', 'name': 'queue'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDebugUtilsLabelEXT', 'header': 'const VkDebugUtilsLabelEXT* pLabelInfo\n        ', 'name': 'pLabelInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdBeginDebugUtilsLabelEXT(\nVkCommandBuffer commandBuffer,\n const VkDebugUtilsLabelEXT* pLabelInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDebugUtilsLabelEXT', 'header': 'const VkDebugUtilsLabelEXT* pLabelInfo\n        ', 'name': 'pLabelInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdEndDebugUtilsLabelEXT(\nVkCommandBuffer commandBuffer\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n        ', 'name': 'commandBuffer'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdInsertDebugUtilsLabelEXT(\nVkCommandBuffer commandBuffer,\n const VkDebugUtilsLabelEXT* pLabelInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDebugUtilsLabelEXT', 'header': 'const VkDebugUtilsLabelEXT* pLabelInfo\n        ', 'name': 'pLabelInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreateDebugUtilsMessengerEXT(\nVkInstance instance,\n const VkDebugUtilsMessengerCreateInfoEXT* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkDebugUtilsMessengerEXT* pMessenger\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkInstance', 'header': 'VkInstance instance\n            ', 'name': 'instance'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDebugUtilsMessengerCreateInfoEXT', 'header': 'const VkDebugUtilsMessengerCreateInfoEXT* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkDebugUtilsMessengerEXT', 'header': 'VkDebugUtilsMessengerEXT* pMessenger\n        ', 'name': 'pMessenger'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkDestroyDebugUtilsMessengerEXT(\nVkInstance instance,\n VkDebugUtilsMessengerEXT messenger,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkInstance', 'header': 'VkInstance instance\n            ', 'name': 'instance'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDebugUtilsMessengerEXT', 'header': 'VkDebugUtilsMessengerEXT messenger\n            ', 'name': 'messenger'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkSubmitDebugUtilsMessageEXT(\nVkInstance instance,\n VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity,\n VkDebugUtilsMessageTypeFlagsEXT messageTypes,\n const VkDebugUtilsMessengerCallbackDataEXT* pCallbackData\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkInstance', 'header': 'VkInstance instance\n            ', 'name': 'instance'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDebugUtilsMessageSeverityFlagBitsEXT', 'header': 'VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity\n            ', 'name': 'messageSeverity'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDebugUtilsMessageTypeFlagsEXT', 'header': 'VkDebugUtilsMessageTypeFlagsEXT messageTypes\n            ', 'name': 'messageTypes'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDebugUtilsMessengerCallbackDataEXT', 'header': 'const VkDebugUtilsMessengerCallbackDataEXT* pCallbackData\n        ', 'name': 'pCallbackData'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetMemoryHostPointerPropertiesEXT(\nVkDevice device,\n VkExternalMemoryHandleTypeFlagBits handleType,\n const void* pHostPointer,\n VkMemoryHostPointerPropertiesEXT* pMemoryHostPointerProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkExternalMemoryHandleTypeFlagBits', 'header': 'VkExternalMemoryHandleTypeFlagBits handleType\n            ', 'name': 'handleType'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'void', 'header': 'const void* pHostPointer\n            ', 'name': 'pHostPointer'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkMemoryHostPointerPropertiesEXT', 'header': 'VkMemoryHostPointerPropertiesEXT* pMemoryHostPointerProperties\n        ', 'name': 'pMemoryHostPointerProperties'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdWriteBufferMarkerAMD(\nVkCommandBuffer commandBuffer,\n VkPipelineStageFlagBits pipelineStage,\n VkBuffer dstBuffer,\n VkDeviceSize dstOffset,\n uint32_t marker\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineStageFlagBits', 'header': 'VkPipelineStageFlagBits pipelineStage\n            ', 'name': 'pipelineStage'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer dstBuffer\n            ', 'name': 'dstBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize dstOffset\n            ', 'name': 'dstOffset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t marker\n        ', 'name': 'marker'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreateRenderPass2(\nVkDevice device,\n const VkRenderPassCreateInfo2* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkRenderPass* pRenderPass\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkRenderPassCreateInfo2', 'header': 'const VkRenderPassCreateInfo2* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkRenderPass', 'header': 'VkRenderPass* pRenderPass\n        ', 'name': 'pRenderPass'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreateRenderPass2KHR(\nVkDevice device,\n const VkRenderPassCreateInfo2* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkRenderPass* pRenderPass\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkRenderPassCreateInfo2', 'header': 'const VkRenderPassCreateInfo2* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkRenderPass', 'header': 'VkRenderPass* pRenderPass\n        ', 'name': 'pRenderPass'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdBeginRenderPass2(\nVkCommandBuffer commandBuffer,\n const VkRenderPassBeginInfo*      pRenderPassBegin,\n const VkSubpassBeginInfo*      pSubpassBeginInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkRenderPassBeginInfo', 'header': 'const VkRenderPassBeginInfo*      pRenderPassBegin\n            ', 'name': 'pRenderPassBegin'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkSubpassBeginInfo', 'header': 'const VkSubpassBeginInfo*      pSubpassBeginInfo\n        ', 'name': 'pSubpassBeginInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdBeginRenderPass2KHR(\nVkCommandBuffer commandBuffer,\n const VkRenderPassBeginInfo*      pRenderPassBegin,\n const VkSubpassBeginInfo*      pSubpassBeginInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkRenderPassBeginInfo', 'header': 'const VkRenderPassBeginInfo*      pRenderPassBegin\n            ', 'name': 'pRenderPassBegin'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkSubpassBeginInfo', 'header': 'const VkSubpassBeginInfo*      pSubpassBeginInfo\n        ', 'name': 'pSubpassBeginInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdNextSubpass2(\nVkCommandBuffer commandBuffer,\n const VkSubpassBeginInfo*      pSubpassBeginInfo,\n const VkSubpassEndInfo*        pSubpassEndInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkSubpassBeginInfo', 'header': 'const VkSubpassBeginInfo*      pSubpassBeginInfo\n            ', 'name': 'pSubpassBeginInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkSubpassEndInfo', 'header': 'const VkSubpassEndInfo*        pSubpassEndInfo\n        ', 'name': 'pSubpassEndInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdNextSubpass2KHR(\nVkCommandBuffer commandBuffer,\n const VkSubpassBeginInfo*      pSubpassBeginInfo,\n const VkSubpassEndInfo*        pSubpassEndInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkSubpassBeginInfo', 'header': 'const VkSubpassBeginInfo*      pSubpassBeginInfo\n            ', 'name': 'pSubpassBeginInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkSubpassEndInfo', 'header': 'const VkSubpassEndInfo*        pSubpassEndInfo\n        ', 'name': 'pSubpassEndInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdEndRenderPass2(\nVkCommandBuffer commandBuffer,\n const VkSubpassEndInfo*        pSubpassEndInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkSubpassEndInfo', 'header': 'const VkSubpassEndInfo*        pSubpassEndInfo\n        ', 'name': 'pSubpassEndInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdEndRenderPass2KHR(\nVkCommandBuffer commandBuffer,\n const VkSubpassEndInfo*        pSubpassEndInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkSubpassEndInfo', 'header': 'const VkSubpassEndInfo*        pSubpassEndInfo\n        ', 'name': 'pSubpassEndInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetSemaphoreCounterValue(\nVkDevice device,\n VkSemaphore semaphore,\n uint64_t* pValue\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSemaphore', 'header': 'VkSemaphore semaphore\n            ', 'name': 'semaphore'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint64_t', 'header': 'uint64_t* pValue\n        ', 'name': 'pValue'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetSemaphoreCounterValueKHR(\nVkDevice device,\n VkSemaphore semaphore,\n uint64_t* pValue\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSemaphore', 'header': 'VkSemaphore semaphore\n            ', 'name': 'semaphore'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint64_t', 'header': 'uint64_t* pValue\n        ', 'name': 'pValue'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkWaitSemaphores(\nVkDevice device,\n const VkSemaphoreWaitInfo* pWaitInfo,\n uint64_t timeout\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkSemaphoreWaitInfo', 'header': 'const VkSemaphoreWaitInfo* pWaitInfo\n            ', 'name': 'pWaitInfo'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint64_t', 'header': 'uint64_t timeout\n        ', 'name': 'timeout'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkWaitSemaphoresKHR(\nVkDevice device,\n const VkSemaphoreWaitInfo* pWaitInfo,\n uint64_t timeout\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkSemaphoreWaitInfo', 'header': 'const VkSemaphoreWaitInfo* pWaitInfo\n            ', 'name': 'pWaitInfo'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint64_t', 'header': 'uint64_t timeout\n        ', 'name': 'timeout'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkSignalSemaphore(\nVkDevice device,\n const VkSemaphoreSignalInfo* pSignalInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkSemaphoreSignalInfo', 'header': 'const VkSemaphoreSignalInfo* pSignalInfo\n        ', 'name': 'pSignalInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkSignalSemaphoreKHR(\nVkDevice device,\n const VkSemaphoreSignalInfo* pSignalInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkSemaphoreSignalInfo', 'header': 'const VkSemaphoreSignalInfo* pSignalInfo\n        ', 'name': 'pSignalInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdDrawIndirectCount(\nVkCommandBuffer commandBuffer,\n VkBuffer buffer,\n VkDeviceSize offset,\n VkBuffer countBuffer,\n VkDeviceSize countBufferOffset,\n uint32_t maxDrawCount,\n uint32_t stride\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer buffer\n            ', 'name': 'buffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize offset\n            ', 'name': 'offset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer countBuffer\n            ', 'name': 'countBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize countBufferOffset\n            ', 'name': 'countBufferOffset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t maxDrawCount\n            ', 'name': 'maxDrawCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t stride\n        ', 'name': 'stride'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdDrawIndirectCountKHR(\nVkCommandBuffer commandBuffer,\n VkBuffer buffer,\n VkDeviceSize offset,\n VkBuffer countBuffer,\n VkDeviceSize countBufferOffset,\n uint32_t maxDrawCount,\n uint32_t stride\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer buffer\n            ', 'name': 'buffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize offset\n            ', 'name': 'offset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer countBuffer\n            ', 'name': 'countBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize countBufferOffset\n            ', 'name': 'countBufferOffset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t maxDrawCount\n            ', 'name': 'maxDrawCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t stride\n        ', 'name': 'stride'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdDrawIndirectCountAMD(\nVkCommandBuffer commandBuffer,\n VkBuffer buffer,\n VkDeviceSize offset,\n VkBuffer countBuffer,\n VkDeviceSize countBufferOffset,\n uint32_t maxDrawCount,\n uint32_t stride\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer buffer\n            ', 'name': 'buffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize offset\n            ', 'name': 'offset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer countBuffer\n            ', 'name': 'countBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize countBufferOffset\n            ', 'name': 'countBufferOffset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t maxDrawCount\n            ', 'name': 'maxDrawCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t stride\n        ', 'name': 'stride'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdDrawIndexedIndirectCount(\nVkCommandBuffer commandBuffer,\n VkBuffer buffer,\n VkDeviceSize offset,\n VkBuffer countBuffer,\n VkDeviceSize countBufferOffset,\n uint32_t maxDrawCount,\n uint32_t stride\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer buffer\n            ', 'name': 'buffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize offset\n            ', 'name': 'offset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer countBuffer\n            ', 'name': 'countBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize countBufferOffset\n            ', 'name': 'countBufferOffset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t maxDrawCount\n            ', 'name': 'maxDrawCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t stride\n        ', 'name': 'stride'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdDrawIndexedIndirectCountKHR(\nVkCommandBuffer commandBuffer,\n VkBuffer buffer,\n VkDeviceSize offset,\n VkBuffer countBuffer,\n VkDeviceSize countBufferOffset,\n uint32_t maxDrawCount,\n uint32_t stride\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer buffer\n            ', 'name': 'buffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize offset\n            ', 'name': 'offset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer countBuffer\n            ', 'name': 'countBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize countBufferOffset\n            ', 'name': 'countBufferOffset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t maxDrawCount\n            ', 'name': 'maxDrawCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t stride\n        ', 'name': 'stride'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdDrawIndexedIndirectCountAMD(\nVkCommandBuffer commandBuffer,\n VkBuffer buffer,\n VkDeviceSize offset,\n VkBuffer countBuffer,\n VkDeviceSize countBufferOffset,\n uint32_t maxDrawCount,\n uint32_t stride\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer buffer\n            ', 'name': 'buffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize offset\n            ', 'name': 'offset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer countBuffer\n            ', 'name': 'countBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize countBufferOffset\n            ', 'name': 'countBufferOffset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t maxDrawCount\n            ', 'name': 'maxDrawCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t stride\n        ', 'name': 'stride'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetCheckpointNV(\nVkCommandBuffer commandBuffer,\n const void* pCheckpointMarker\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'void', 'header': 'const void* pCheckpointMarker\n        ', 'name': 'pCheckpointMarker'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetQueueCheckpointDataNV(\nVkQueue queue,\n uint32_t* pCheckpointDataCount,\n VkCheckpointDataNV* pCheckpointData\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueue', 'header': 'VkQueue queue\n            ', 'name': 'queue'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pCheckpointDataCount\n            ', 'name': 'pCheckpointDataCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pCheckpointDataCount'], 'type': 'VkCheckpointDataNV', 'header': 'VkCheckpointDataNV* pCheckpointData\n        ', 'name': 'pCheckpointData'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdBindTransformFeedbackBuffersEXT(\nVkCommandBuffer commandBuffer,\n uint32_t firstBinding,\n uint32_t bindingCount,\n const VkBuffer* pBuffers,\n const VkDeviceSize* pOffsets,\n const VkDeviceSize* pSizes\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstBinding\n            ', 'name': 'firstBinding'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t bindingCount\n            ', 'name': 'bindingCount'}, {'const': True, 'num_indirection': 1, 'length': ['bindingCount'], 'type': 'VkBuffer', 'header': 'const VkBuffer* pBuffers\n            ', 'name': 'pBuffers'}, {'const': True, 'num_indirection': 1, 'length': ['bindingCount'], 'type': 'VkDeviceSize', 'header': 'const VkDeviceSize* pOffsets\n            ', 'name': 'pOffsets'}, {'const': True, 'num_indirection': 1, 'length': ['bindingCount'], 'type': 'VkDeviceSize', 'header': 'const VkDeviceSize* pSizes\n        ', 'name': 'pSizes'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdBeginTransformFeedbackEXT(\nVkCommandBuffer commandBuffer,\n uint32_t firstCounterBuffer,\n uint32_t counterBufferCount,\n const VkBuffer* pCounterBuffers,\n const VkDeviceSize* pCounterBufferOffsets\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstCounterBuffer\n            ', 'name': 'firstCounterBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t counterBufferCount\n            ', 'name': 'counterBufferCount'}, {'const': True, 'num_indirection': 1, 'length': ['counterBufferCount'], 'type': 'VkBuffer', 'header': 'const VkBuffer* pCounterBuffers\n            ', 'name': 'pCounterBuffers'}, {'const': True, 'num_indirection': 1, 'length': ['counterBufferCount'], 'type': 'VkDeviceSize', 'header': 'const VkDeviceSize* pCounterBufferOffsets\n        ', 'name': 'pCounterBufferOffsets'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdEndTransformFeedbackEXT(\nVkCommandBuffer commandBuffer,\n uint32_t firstCounterBuffer,\n uint32_t counterBufferCount,\n const VkBuffer* pCounterBuffers,\n const VkDeviceSize* pCounterBufferOffsets\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstCounterBuffer\n            ', 'name': 'firstCounterBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t counterBufferCount\n            ', 'name': 'counterBufferCount'}, {'const': True, 'num_indirection': 1, 'length': ['counterBufferCount'], 'type': 'VkBuffer', 'header': 'const VkBuffer* pCounterBuffers\n            ', 'name': 'pCounterBuffers'}, {'const': True, 'num_indirection': 1, 'length': ['counterBufferCount'], 'type': 'VkDeviceSize', 'header': 'const VkDeviceSize* pCounterBufferOffsets\n        ', 'name': 'pCounterBufferOffsets'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdBeginQueryIndexedEXT(\nVkCommandBuffer commandBuffer,\n VkQueryPool queryPool,\n uint32_t query,\n VkQueryControlFlags flags,\n uint32_t index\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryPool', 'header': 'VkQueryPool queryPool\n            ', 'name': 'queryPool'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t query\n            ', 'name': 'query'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryControlFlags', 'header': 'VkQueryControlFlags flags\n            ', 'name': 'flags'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t index\n        ', 'name': 'index'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdEndQueryIndexedEXT(\nVkCommandBuffer commandBuffer,\n VkQueryPool queryPool,\n uint32_t query,\n uint32_t index\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryPool', 'header': 'VkQueryPool queryPool\n            ', 'name': 'queryPool'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t query\n            ', 'name': 'query'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t index\n        ', 'name': 'index'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdDrawIndirectByteCountEXT(\nVkCommandBuffer commandBuffer,\n uint32_t instanceCount,\n uint32_t firstInstance,\n VkBuffer counterBuffer,\n VkDeviceSize counterBufferOffset,\n uint32_t counterOffset,\n uint32_t vertexStride\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t instanceCount\n            ', 'name': 'instanceCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstInstance\n            ', 'name': 'firstInstance'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer counterBuffer\n            ', 'name': 'counterBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize counterBufferOffset\n            ', 'name': 'counterBufferOffset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t counterOffset\n            ', 'name': 'counterOffset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t vertexStride\n        ', 'name': 'vertexStride'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetExclusiveScissorNV(\nVkCommandBuffer commandBuffer,\n uint32_t firstExclusiveScissor,\n uint32_t exclusiveScissorCount,\n const VkRect2D* pExclusiveScissors\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstExclusiveScissor\n            ', 'name': 'firstExclusiveScissor'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t exclusiveScissorCount\n            ', 'name': 'exclusiveScissorCount'}, {'const': True, 'num_indirection': 1, 'length': ['exclusiveScissorCount'], 'type': 'VkRect2D', 'header': 'const VkRect2D* pExclusiveScissors\n        ', 'name': 'pExclusiveScissors'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetExclusiveScissorEnableNV(\nVkCommandBuffer commandBuffer,\n uint32_t firstExclusiveScissor,\n uint32_t exclusiveScissorCount,\n const VkBool32* pExclusiveScissorEnables\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstExclusiveScissor\n            ', 'name': 'firstExclusiveScissor'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t exclusiveScissorCount\n            ', 'name': 'exclusiveScissorCount'}, {'const': True, 'num_indirection': 1, 'length': ['exclusiveScissorCount'], 'type': 'VkBool32', 'header': 'const VkBool32* pExclusiveScissorEnables\n        ', 'name': 'pExclusiveScissorEnables'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdBindShadingRateImageNV(\nVkCommandBuffer commandBuffer,\n VkImageView imageView,\n VkImageLayout imageLayout\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageView', 'header': 'VkImageView imageView\n            ', 'name': 'imageView'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageLayout', 'header': 'VkImageLayout imageLayout\n        ', 'name': 'imageLayout'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetViewportShadingRatePaletteNV(\nVkCommandBuffer commandBuffer,\n uint32_t firstViewport,\n uint32_t viewportCount,\n const VkShadingRatePaletteNV* pShadingRatePalettes\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstViewport\n            ', 'name': 'firstViewport'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t viewportCount\n            ', 'name': 'viewportCount'}, {'const': True, 'num_indirection': 1, 'length': ['viewportCount'], 'type': 'VkShadingRatePaletteNV', 'header': 'const VkShadingRatePaletteNV* pShadingRatePalettes\n        ', 'name': 'pShadingRatePalettes'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetCoarseSampleOrderNV(\nVkCommandBuffer commandBuffer,\n VkCoarseSampleOrderTypeNV sampleOrderType,\n uint32_t customSampleOrderCount,\n const VkCoarseSampleOrderCustomNV* pCustomSampleOrders\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCoarseSampleOrderTypeNV', 'header': 'VkCoarseSampleOrderTypeNV sampleOrderType\n            ', 'name': 'sampleOrderType'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t customSampleOrderCount\n            ', 'name': 'customSampleOrderCount'}, {'const': True, 'num_indirection': 1, 'length': ['customSampleOrderCount'], 'type': 'VkCoarseSampleOrderCustomNV', 'header': 'const VkCoarseSampleOrderCustomNV* pCustomSampleOrders\n        ', 'name': 'pCustomSampleOrders'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdDrawMeshTasksNV(\nVkCommandBuffer commandBuffer,\n uint32_t taskCount,\n uint32_t firstTask\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t taskCount\n            ', 'name': 'taskCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstTask\n        ', 'name': 'firstTask'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdDrawMeshTasksIndirectNV(\nVkCommandBuffer commandBuffer,\n VkBuffer buffer,\n VkDeviceSize offset,\n uint32_t drawCount,\n uint32_t stride\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer buffer\n            ', 'name': 'buffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize offset\n            ', 'name': 'offset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t drawCount\n            ', 'name': 'drawCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t stride\n        ', 'name': 'stride'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdDrawMeshTasksIndirectCountNV(\nVkCommandBuffer commandBuffer,\n VkBuffer buffer,\n VkDeviceSize offset,\n VkBuffer countBuffer,\n VkDeviceSize countBufferOffset,\n uint32_t maxDrawCount,\n uint32_t stride\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer buffer\n            ', 'name': 'buffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize offset\n            ', 'name': 'offset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer countBuffer\n            ', 'name': 'countBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize countBufferOffset\n            ', 'name': 'countBufferOffset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t maxDrawCount\n            ', 'name': 'maxDrawCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t stride\n        ', 'name': 'stride'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdDrawMeshTasksEXT(\nVkCommandBuffer commandBuffer,\n uint32_t groupCountX,\n uint32_t groupCountY,\n uint32_t groupCountZ\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t groupCountX\n            ', 'name': 'groupCountX'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t groupCountY\n            ', 'name': 'groupCountY'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t groupCountZ\n        ', 'name': 'groupCountZ'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdDrawMeshTasksIndirectEXT(\nVkCommandBuffer commandBuffer,\n VkBuffer buffer,\n VkDeviceSize offset,\n uint32_t drawCount,\n uint32_t stride\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer buffer\n            ', 'name': 'buffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize offset\n            ', 'name': 'offset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t drawCount\n            ', 'name': 'drawCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t stride\n        ', 'name': 'stride'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdDrawMeshTasksIndirectCountEXT(\nVkCommandBuffer commandBuffer,\n VkBuffer buffer,\n VkDeviceSize offset,\n VkBuffer countBuffer,\n VkDeviceSize countBufferOffset,\n uint32_t maxDrawCount,\n uint32_t stride\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer buffer\n            ', 'name': 'buffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize offset\n            ', 'name': 'offset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer countBuffer\n            ', 'name': 'countBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize countBufferOffset\n            ', 'name': 'countBufferOffset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t maxDrawCount\n            ', 'name': 'maxDrawCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t stride\n        ', 'name': 'stride'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCompileDeferredNV(\nVkDevice device,\n VkPipeline pipeline,\n uint32_t shader\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipeline', 'header': 'VkPipeline pipeline\n            ', 'name': 'pipeline'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t shader\n        ', 'name': 'shader'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreateAccelerationStructureNV(\nVkDevice device,\n const VkAccelerationStructureCreateInfoNV* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkAccelerationStructureNV* pAccelerationStructure\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAccelerationStructureCreateInfoNV', 'header': 'const VkAccelerationStructureCreateInfoNV* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkAccelerationStructureNV', 'header': 'VkAccelerationStructureNV* pAccelerationStructure\n        ', 'name': 'pAccelerationStructure'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdBindInvocationMaskHUAWEI(\nVkCommandBuffer commandBuffer,\n VkImageView imageView,\n VkImageLayout imageLayout\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageView', 'header': 'VkImageView imageView\n            ', 'name': 'imageView'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageLayout', 'header': 'VkImageLayout imageLayout\n        ', 'name': 'imageLayout'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkDestroyAccelerationStructureKHR(\nVkDevice device,\n VkAccelerationStructureKHR accelerationStructure,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkAccelerationStructureKHR', 'header': 'VkAccelerationStructureKHR accelerationStructure\n            ', 'name': 'accelerationStructure'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkDestroyAccelerationStructureNV(\nVkDevice device,\n VkAccelerationStructureNV accelerationStructure,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkAccelerationStructureNV', 'header': 'VkAccelerationStructureNV accelerationStructure\n            ', 'name': 'accelerationStructure'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetAccelerationStructureMemoryRequirementsNV(\nVkDevice device,\n const VkAccelerationStructureMemoryRequirementsInfoNV* pInfo,\n VkMemoryRequirements2KHR* pMemoryRequirements\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAccelerationStructureMemoryRequirementsInfoNV', 'header': 'const VkAccelerationStructureMemoryRequirementsInfoNV* pInfo\n            ', 'name': 'pInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkMemoryRequirements2KHR', 'header': 'VkMemoryRequirements2KHR* pMemoryRequirements\n        ', 'name': 'pMemoryRequirements'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkBindAccelerationStructureMemoryNV(\nVkDevice device,\n uint32_t bindInfoCount,\n const VkBindAccelerationStructureMemoryInfoNV* pBindInfos\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t bindInfoCount\n            ', 'name': 'bindInfoCount'}, {'const': True, 'num_indirection': 1, 'length': ['bindInfoCount'], 'type': 'VkBindAccelerationStructureMemoryInfoNV', 'header': 'const VkBindAccelerationStructureMemoryInfoNV* pBindInfos\n        ', 'name': 'pBindInfos'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdCopyAccelerationStructureNV(\nVkCommandBuffer commandBuffer,\n VkAccelerationStructureNV dst,\n VkAccelerationStructureNV src,\n VkCopyAccelerationStructureModeKHR mode\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkAccelerationStructureNV', 'header': 'VkAccelerationStructureNV dst\n            ', 'name': 'dst'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkAccelerationStructureNV', 'header': 'VkAccelerationStructureNV src\n            ', 'name': 'src'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCopyAccelerationStructureModeKHR', 'header': 'VkCopyAccelerationStructureModeKHR mode\n        ', 'name': 'mode'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdCopyAccelerationStructureKHR(\nVkCommandBuffer commandBuffer,\n const VkCopyAccelerationStructureInfoKHR* pInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCopyAccelerationStructureInfoKHR', 'header': 'const VkCopyAccelerationStructureInfoKHR* pInfo\n        ', 'name': 'pInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCopyAccelerationStructureKHR(\nVkDevice device,\n VkDeferredOperationKHR deferredOperation,\n const VkCopyAccelerationStructureInfoKHR* pInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeferredOperationKHR', 'header': 'VkDeferredOperationKHR deferredOperation\n            ', 'name': 'deferredOperation'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCopyAccelerationStructureInfoKHR', 'header': 'const VkCopyAccelerationStructureInfoKHR* pInfo\n        ', 'name': 'pInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdCopyAccelerationStructureToMemoryKHR(\nVkCommandBuffer commandBuffer,\n const VkCopyAccelerationStructureToMemoryInfoKHR* pInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCopyAccelerationStructureToMemoryInfoKHR', 'header': 'const VkCopyAccelerationStructureToMemoryInfoKHR* pInfo\n        ', 'name': 'pInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCopyAccelerationStructureToMemoryKHR(\nVkDevice device,\n VkDeferredOperationKHR deferredOperation,\n const VkCopyAccelerationStructureToMemoryInfoKHR* pInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeferredOperationKHR', 'header': 'VkDeferredOperationKHR deferredOperation\n            ', 'name': 'deferredOperation'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCopyAccelerationStructureToMemoryInfoKHR', 'header': 'const VkCopyAccelerationStructureToMemoryInfoKHR* pInfo\n        ', 'name': 'pInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdCopyMemoryToAccelerationStructureKHR(\nVkCommandBuffer commandBuffer,\n const VkCopyMemoryToAccelerationStructureInfoKHR* pInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCopyMemoryToAccelerationStructureInfoKHR', 'header': 'const VkCopyMemoryToAccelerationStructureInfoKHR* pInfo\n        ', 'name': 'pInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCopyMemoryToAccelerationStructureKHR(\nVkDevice device,\n VkDeferredOperationKHR deferredOperation,\n const VkCopyMemoryToAccelerationStructureInfoKHR* pInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeferredOperationKHR', 'header': 'VkDeferredOperationKHR deferredOperation\n            ', 'name': 'deferredOperation'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCopyMemoryToAccelerationStructureInfoKHR', 'header': 'const VkCopyMemoryToAccelerationStructureInfoKHR* pInfo\n        ', 'name': 'pInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdWriteAccelerationStructuresPropertiesKHR(\nVkCommandBuffer commandBuffer,\n uint32_t accelerationStructureCount,\n const VkAccelerationStructureKHR* pAccelerationStructures,\n VkQueryType queryType,\n VkQueryPool queryPool,\n uint32_t firstQuery\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t accelerationStructureCount\n            ', 'name': 'accelerationStructureCount'}, {'const': True, 'num_indirection': 1, 'length': ['accelerationStructureCount'], 'type': 'VkAccelerationStructureKHR', 'header': 'const VkAccelerationStructureKHR* pAccelerationStructures\n            ', 'name': 'pAccelerationStructures'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryType', 'header': 'VkQueryType queryType\n            ', 'name': 'queryType'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryPool', 'header': 'VkQueryPool queryPool\n            ', 'name': 'queryPool'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstQuery\n        ', 'name': 'firstQuery'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdWriteAccelerationStructuresPropertiesNV(\nVkCommandBuffer commandBuffer,\n uint32_t accelerationStructureCount,\n const VkAccelerationStructureNV* pAccelerationStructures,\n VkQueryType queryType,\n VkQueryPool queryPool,\n uint32_t firstQuery\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t accelerationStructureCount\n            ', 'name': 'accelerationStructureCount'}, {'const': True, 'num_indirection': 1, 'length': ['accelerationStructureCount'], 'type': 'VkAccelerationStructureNV', 'header': 'const VkAccelerationStructureNV* pAccelerationStructures\n            ', 'name': 'pAccelerationStructures'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryType', 'header': 'VkQueryType queryType\n            ', 'name': 'queryType'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryPool', 'header': 'VkQueryPool queryPool\n            ', 'name': 'queryPool'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstQuery\n        ', 'name': 'firstQuery'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdBuildAccelerationStructureNV(\nVkCommandBuffer commandBuffer,\n const VkAccelerationStructureInfoNV* pInfo,\n VkBuffer instanceData,\n VkDeviceSize instanceOffset,\n VkBool32 update,\n VkAccelerationStructureNV dst,\n VkAccelerationStructureNV src,\n VkBuffer scratch,\n VkDeviceSize scratchOffset\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAccelerationStructureInfoNV', 'header': 'const VkAccelerationStructureInfoNV* pInfo\n            ', 'name': 'pInfo'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer instanceData\n            ', 'name': 'instanceData'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize instanceOffset\n            ', 'name': 'instanceOffset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 update\n            ', 'name': 'update'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkAccelerationStructureNV', 'header': 'VkAccelerationStructureNV dst\n            ', 'name': 'dst'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkAccelerationStructureNV', 'header': 'VkAccelerationStructureNV src\n            ', 'name': 'src'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer scratch\n            ', 'name': 'scratch'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize scratchOffset\n        ', 'name': 'scratchOffset'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkWriteAccelerationStructuresPropertiesKHR(\nVkDevice device,\n uint32_t accelerationStructureCount,\n const VkAccelerationStructureKHR* pAccelerationStructures,\n VkQueryType  queryType,\n size_t       dataSize,\n void* pData,\n size_t stride\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t accelerationStructureCount\n            ', 'name': 'accelerationStructureCount'}, {'const': True, 'num_indirection': 1, 'length': ['accelerationStructureCount'], 'type': 'VkAccelerationStructureKHR', 'header': 'const VkAccelerationStructureKHR* pAccelerationStructures\n            ', 'name': 'pAccelerationStructures'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryType', 'header': 'VkQueryType  queryType\n            ', 'name': 'queryType'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'size_t', 'header': 'size_t       dataSize\n            ', 'name': 'dataSize'}, {'const': False, 'num_indirection': 1, 'length': ['dataSize'], 'type': 'void', 'header': 'void* pData\n            ', 'name': 'pData'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'size_t', 'header': 'size_t stride\n        ', 'name': 'stride'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdTraceRaysKHR(\nVkCommandBuffer commandBuffer,\n const VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable,\n const VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable,\n const VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable,\n const VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable,\n uint32_t width,\n uint32_t height,\n uint32_t depth\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkStridedDeviceAddressRegionKHR', 'header': 'const VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable\n            ', 'name': 'pRaygenShaderBindingTable'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkStridedDeviceAddressRegionKHR', 'header': 'const VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable\n            ', 'name': 'pMissShaderBindingTable'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkStridedDeviceAddressRegionKHR', 'header': 'const VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable\n            ', 'name': 'pHitShaderBindingTable'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkStridedDeviceAddressRegionKHR', 'header': 'const VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable\n            ', 'name': 'pCallableShaderBindingTable'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t width\n            ', 'name': 'width'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t height\n            ', 'name': 'height'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t depth\n        ', 'name': 'depth'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdTraceRaysNV(\nVkCommandBuffer commandBuffer,\n VkBuffer raygenShaderBindingTableBuffer,\n VkDeviceSize raygenShaderBindingOffset,\n VkBuffer missShaderBindingTableBuffer,\n VkDeviceSize missShaderBindingOffset,\n VkDeviceSize missShaderBindingStride,\n VkBuffer hitShaderBindingTableBuffer,\n VkDeviceSize hitShaderBindingOffset,\n VkDeviceSize hitShaderBindingStride,\n VkBuffer callableShaderBindingTableBuffer,\n VkDeviceSize callableShaderBindingOffset,\n VkDeviceSize callableShaderBindingStride,\n uint32_t width,\n uint32_t height,\n uint32_t depth\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer raygenShaderBindingTableBuffer\n            ', 'name': 'raygenShaderBindingTableBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize raygenShaderBindingOffset\n            ', 'name': 'raygenShaderBindingOffset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer missShaderBindingTableBuffer\n            ', 'name': 'missShaderBindingTableBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize missShaderBindingOffset\n            ', 'name': 'missShaderBindingOffset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize missShaderBindingStride\n            ', 'name': 'missShaderBindingStride'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer hitShaderBindingTableBuffer\n            ', 'name': 'hitShaderBindingTableBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize hitShaderBindingOffset\n            ', 'name': 'hitShaderBindingOffset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize hitShaderBindingStride\n            ', 'name': 'hitShaderBindingStride'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer callableShaderBindingTableBuffer\n            ', 'name': 'callableShaderBindingTableBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize callableShaderBindingOffset\n            ', 'name': 'callableShaderBindingOffset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize callableShaderBindingStride\n            ', 'name': 'callableShaderBindingStride'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t width\n            ', 'name': 'width'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t height\n            ', 'name': 'height'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t depth\n        ', 'name': 'depth'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetRayTracingShaderGroupHandlesKHR(\nVkDevice device,\n VkPipeline pipeline,\n uint32_t firstGroup,\n uint32_t groupCount,\n size_t dataSize,\n void* pData\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipeline', 'header': 'VkPipeline pipeline\n            ', 'name': 'pipeline'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstGroup\n            ', 'name': 'firstGroup'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t groupCount\n            ', 'name': 'groupCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'size_t', 'header': 'size_t dataSize\n            ', 'name': 'dataSize'}, {'const': False, 'num_indirection': 1, 'length': ['dataSize'], 'type': 'void', 'header': 'void* pData\n        ', 'name': 'pData'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetRayTracingShaderGroupHandlesNV(\nVkDevice device,\n VkPipeline pipeline,\n uint32_t firstGroup,\n uint32_t groupCount,\n size_t dataSize,\n void* pData\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipeline', 'header': 'VkPipeline pipeline\n            ', 'name': 'pipeline'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstGroup\n            ', 'name': 'firstGroup'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t groupCount\n            ', 'name': 'groupCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'size_t', 'header': 'size_t dataSize\n            ', 'name': 'dataSize'}, {'const': False, 'num_indirection': 1, 'length': ['dataSize'], 'type': 'void', 'header': 'void* pData\n        ', 'name': 'pData'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(\nVkDevice device,\n VkPipeline pipeline,\n uint32_t firstGroup,\n uint32_t groupCount,\n size_t dataSize,\n void* pData\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipeline', 'header': 'VkPipeline pipeline\n            ', 'name': 'pipeline'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstGroup\n            ', 'name': 'firstGroup'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t groupCount\n            ', 'name': 'groupCount'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'size_t', 'header': 'size_t dataSize\n            ', 'name': 'dataSize'}, {'const': False, 'num_indirection': 1, 'length': ['dataSize'], 'type': 'void', 'header': 'void* pData\n        ', 'name': 'pData'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetAccelerationStructureHandleNV(\nVkDevice device,\n VkAccelerationStructureNV accelerationStructure,\n size_t dataSize,\n void* pData\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkAccelerationStructureNV', 'header': 'VkAccelerationStructureNV accelerationStructure\n            ', 'name': 'accelerationStructure'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'size_t', 'header': 'size_t dataSize\n            ', 'name': 'dataSize'}, {'const': False, 'num_indirection': 1, 'length': ['dataSize'], 'type': 'void', 'header': 'void* pData\n        ', 'name': 'pData'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreateRayTracingPipelinesNV(\nVkDevice device,\n VkPipelineCache pipelineCache,\n uint32_t createInfoCount,\n const VkRayTracingPipelineCreateInfoNV* pCreateInfos,\n const VkAllocationCallbacks* pAllocator,\n VkPipeline* pPipelines\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineCache', 'header': 'VkPipelineCache pipelineCache\n            ', 'name': 'pipelineCache'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t createInfoCount\n            ', 'name': 'createInfoCount'}, {'const': True, 'num_indirection': 1, 'length': ['createInfoCount'], 'type': 'VkRayTracingPipelineCreateInfoNV', 'header': 'const VkRayTracingPipelineCreateInfoNV* pCreateInfos\n            ', 'name': 'pCreateInfos'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': ['createInfoCount'], 'type': 'VkPipeline', 'header': 'VkPipeline* pPipelines\n        ', 'name': 'pPipelines'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreateRayTracingPipelinesKHR(\nVkDevice device,\n VkDeferredOperationKHR deferredOperation,\n VkPipelineCache pipelineCache,\n uint32_t createInfoCount,\n const VkRayTracingPipelineCreateInfoKHR* pCreateInfos,\n const VkAllocationCallbacks* pAllocator,\n VkPipeline* pPipelines\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeferredOperationKHR', 'header': 'VkDeferredOperationKHR deferredOperation\n            ', 'name': 'deferredOperation'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineCache', 'header': 'VkPipelineCache pipelineCache\n            ', 'name': 'pipelineCache'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t createInfoCount\n            ', 'name': 'createInfoCount'}, {'const': True, 'num_indirection': 1, 'length': ['createInfoCount'], 'type': 'VkRayTracingPipelineCreateInfoKHR', 'header': 'const VkRayTracingPipelineCreateInfoKHR* pCreateInfos\n            ', 'name': 'pCreateInfos'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': ['createInfoCount'], 'type': 'VkPipeline', 'header': 'VkPipeline* pPipelines\n        ', 'name': 'pPipelines'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(\nVkPhysicalDevice physicalDevice,\n uint32_t* pPropertyCount,\n VkCooperativeMatrixPropertiesNV* pProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pPropertyCount\n            ', 'name': 'pPropertyCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pPropertyCount'], 'type': 'VkCooperativeMatrixPropertiesNV', 'header': 'VkCooperativeMatrixPropertiesNV* pProperties\n        ', 'name': 'pProperties'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdTraceRaysIndirectKHR(\nVkCommandBuffer commandBuffer,\n const VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable,\n const VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable,\n const VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable,\n const VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable,\n VkDeviceAddress indirectDeviceAddress\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkStridedDeviceAddressRegionKHR', 'header': 'const VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable\n            ', 'name': 'pRaygenShaderBindingTable'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkStridedDeviceAddressRegionKHR', 'header': 'const VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable\n            ', 'name': 'pMissShaderBindingTable'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkStridedDeviceAddressRegionKHR', 'header': 'const VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable\n            ', 'name': 'pHitShaderBindingTable'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkStridedDeviceAddressRegionKHR', 'header': 'const VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable\n            ', 'name': 'pCallableShaderBindingTable'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceAddress', 'header': 'VkDeviceAddress indirectDeviceAddress\n        ', 'name': 'indirectDeviceAddress'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdTraceRaysIndirect2KHR(\nVkCommandBuffer commandBuffer,\n VkDeviceAddress indirectDeviceAddress\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceAddress', 'header': 'VkDeviceAddress indirectDeviceAddress\n        ', 'name': 'indirectDeviceAddress'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetDeviceAccelerationStructureCompatibilityKHR(\nVkDevice device,\n const VkAccelerationStructureVersionInfoKHR* pVersionInfo,\n VkAccelerationStructureCompatibilityKHR* pCompatibility\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAccelerationStructureVersionInfoKHR', 'header': 'const VkAccelerationStructureVersionInfoKHR* pVersionInfo\n            ', 'name': 'pVersionInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkAccelerationStructureCompatibilityKHR', 'header': 'VkAccelerationStructureCompatibilityKHR* pCompatibility\n        ', 'name': 'pCompatibility'}]}(json data);
void handle_{'sync': False, 'type': 'VkDeviceSize', 'num_indirection': 0, 'header': 'VkDeviceSize vkGetRayTracingShaderGroupStackSizeKHR(\nVkDevice device,\n VkPipeline pipeline,\n uint32_t group,\n VkShaderGroupShaderKHR groupShader\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipeline', 'header': 'VkPipeline pipeline\n            ', 'name': 'pipeline'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t group\n            ', 'name': 'group'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkShaderGroupShaderKHR', 'header': 'VkShaderGroupShaderKHR groupShader\n        ', 'name': 'groupShader'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetRayTracingPipelineStackSizeKHR(\nVkCommandBuffer commandBuffer,\n uint32_t pipelineStackSize\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t pipelineStackSize\n        ', 'name': 'pipelineStackSize'}]}(json data);
void handle_{'sync': False, 'type': 'uint32_t', 'num_indirection': 0, 'header': 'uint32_t vkGetImageViewHandleNVX(\nVkDevice device,\n const VkImageViewHandleInfoNVX* pInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkImageViewHandleInfoNVX', 'header': 'const VkImageViewHandleInfoNVX* pInfo\n        ', 'name': 'pInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetImageViewAddressNVX(\nVkDevice device,\n VkImageView imageView,\n VkImageViewAddressPropertiesNVX* pProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageView', 'header': 'VkImageView imageView\n            ', 'name': 'imageView'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkImageViewAddressPropertiesNVX', 'header': 'VkImageViewAddressPropertiesNVX* pProperties\n        ', 'name': 'pProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(\nVkPhysicalDevice physicalDevice,\n uint32_t queueFamilyIndex,\n uint32_t* pCounterCount,\n VkPerformanceCounterKHR* pCounters,\n VkPerformanceCounterDescriptionKHR* pCounterDescriptions\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t queueFamilyIndex\n            ', 'name': 'queueFamilyIndex'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pCounterCount\n            ', 'name': 'pCounterCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pCounterCount'], 'type': 'VkPerformanceCounterKHR', 'header': 'VkPerformanceCounterKHR* pCounters\n            ', 'name': 'pCounters'}, {'const': False, 'num_indirection': 1, 'length': ['*pCounterCount'], 'type': 'VkPerformanceCounterDescriptionKHR', 'header': 'VkPerformanceCounterDescriptionKHR* pCounterDescriptions\n        ', 'name': 'pCounterDescriptions'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(\nVkPhysicalDevice physicalDevice,\n const VkQueryPoolPerformanceCreateInfoKHR* pPerformanceQueryCreateInfo,\n uint32_t* pNumPasses\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkQueryPoolPerformanceCreateInfoKHR', 'header': 'const VkQueryPoolPerformanceCreateInfoKHR* pPerformanceQueryCreateInfo\n            ', 'name': 'pPerformanceQueryCreateInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pNumPasses\n        ', 'name': 'pNumPasses'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkAcquireProfilingLockKHR(\nVkDevice device,\n const VkAcquireProfilingLockInfoKHR* pInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAcquireProfilingLockInfoKHR', 'header': 'const VkAcquireProfilingLockInfoKHR* pInfo\n        ', 'name': 'pInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkReleaseProfilingLockKHR(\nVkDevice device\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n        ', 'name': 'device'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetImageDrmFormatModifierPropertiesEXT(\nVkDevice device,\n VkImage image,\n VkImageDrmFormatModifierPropertiesEXT* pProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImage', 'header': 'VkImage image\n            ', 'name': 'image'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkImageDrmFormatModifierPropertiesEXT', 'header': 'VkImageDrmFormatModifierPropertiesEXT* pProperties\n        ', 'name': 'pProperties'}]}(json data);
void handle_{'sync': False, 'type': 'uint64_t', 'num_indirection': 0, 'header': 'uint64_t vkGetBufferOpaqueCaptureAddress(\nVkDevice device,\n const VkBufferDeviceAddressInfo* pInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkBufferDeviceAddressInfo', 'header': 'const VkBufferDeviceAddressInfo* pInfo\n        ', 'name': 'pInfo'}]}(json data);
void handle_{'sync': False, 'type': 'uint64_t', 'num_indirection': 0, 'header': 'uint64_t vkGetBufferOpaqueCaptureAddressKHR(\nVkDevice device,\n const VkBufferDeviceAddressInfo* pInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkBufferDeviceAddressInfo', 'header': 'const VkBufferDeviceAddressInfo* pInfo\n        ', 'name': 'pInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkDeviceAddress', 'num_indirection': 0, 'header': 'VkDeviceAddress vkGetBufferDeviceAddress(\nVkDevice device,\n const VkBufferDeviceAddressInfo* pInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkBufferDeviceAddressInfo', 'header': 'const VkBufferDeviceAddressInfo* pInfo\n        ', 'name': 'pInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkDeviceAddress', 'num_indirection': 0, 'header': 'VkDeviceAddress vkGetBufferDeviceAddressKHR(\nVkDevice device,\n const VkBufferDeviceAddressInfo* pInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkBufferDeviceAddressInfo', 'header': 'const VkBufferDeviceAddressInfo* pInfo\n        ', 'name': 'pInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkDeviceAddress', 'num_indirection': 0, 'header': 'VkDeviceAddress vkGetBufferDeviceAddressEXT(\nVkDevice device,\n const VkBufferDeviceAddressInfo* pInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkBufferDeviceAddressInfo', 'header': 'const VkBufferDeviceAddressInfo* pInfo\n        ', 'name': 'pInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreateHeadlessSurfaceEXT(\nVkInstance instance,\n const VkHeadlessSurfaceCreateInfoEXT* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkSurfaceKHR* pSurface\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkInstance', 'header': 'VkInstance instance\n            ', 'name': 'instance'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkHeadlessSurfaceCreateInfoEXT', 'header': 'const VkHeadlessSurfaceCreateInfoEXT* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkSurfaceKHR', 'header': 'VkSurfaceKHR* pSurface\n        ', 'name': 'pSurface'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(\nVkPhysicalDevice physicalDevice,\n uint32_t* pCombinationCount,\n VkFramebufferMixedSamplesCombinationNV* pCombinations\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pCombinationCount\n            ', 'name': 'pCombinationCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pCombinationCount'], 'type': 'VkFramebufferMixedSamplesCombinationNV', 'header': 'VkFramebufferMixedSamplesCombinationNV* pCombinations\n        ', 'name': 'pCombinations'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkInitializePerformanceApiINTEL(\nVkDevice device,\n const VkInitializePerformanceApiInfoINTEL* pInitializeInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkInitializePerformanceApiInfoINTEL', 'header': 'const VkInitializePerformanceApiInfoINTEL* pInitializeInfo\n        ', 'name': 'pInitializeInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkUninitializePerformanceApiINTEL(\nVkDevice device\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n        ', 'name': 'device'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCmdSetPerformanceMarkerINTEL(\nVkCommandBuffer commandBuffer,\n const VkPerformanceMarkerInfoINTEL* pMarkerInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPerformanceMarkerInfoINTEL', 'header': 'const VkPerformanceMarkerInfoINTEL* pMarkerInfo\n        ', 'name': 'pMarkerInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCmdSetPerformanceStreamMarkerINTEL(\nVkCommandBuffer commandBuffer,\n const VkPerformanceStreamMarkerInfoINTEL* pMarkerInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPerformanceStreamMarkerInfoINTEL', 'header': 'const VkPerformanceStreamMarkerInfoINTEL* pMarkerInfo\n        ', 'name': 'pMarkerInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCmdSetPerformanceOverrideINTEL(\nVkCommandBuffer commandBuffer,\n const VkPerformanceOverrideInfoINTEL* pOverrideInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPerformanceOverrideInfoINTEL', 'header': 'const VkPerformanceOverrideInfoINTEL* pOverrideInfo\n        ', 'name': 'pOverrideInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkAcquirePerformanceConfigurationINTEL(\nVkDevice device,\n const VkPerformanceConfigurationAcquireInfoINTEL* pAcquireInfo,\n VkPerformanceConfigurationINTEL* pConfiguration\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPerformanceConfigurationAcquireInfoINTEL', 'header': 'const VkPerformanceConfigurationAcquireInfoINTEL* pAcquireInfo\n            ', 'name': 'pAcquireInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkPerformanceConfigurationINTEL', 'header': 'VkPerformanceConfigurationINTEL* pConfiguration\n        ', 'name': 'pConfiguration'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkReleasePerformanceConfigurationINTEL(\nVkDevice device,\n VkPerformanceConfigurationINTEL configuration\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPerformanceConfigurationINTEL', 'header': 'VkPerformanceConfigurationINTEL configuration\n        ', 'name': 'configuration'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkQueueSetPerformanceConfigurationINTEL(\nVkQueue queue,\n VkPerformanceConfigurationINTEL configuration\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueue', 'header': 'VkQueue queue\n            ', 'name': 'queue'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPerformanceConfigurationINTEL', 'header': 'VkPerformanceConfigurationINTEL configuration\n        ', 'name': 'configuration'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetPerformanceParameterINTEL(\nVkDevice device,\n VkPerformanceParameterTypeINTEL parameter,\n VkPerformanceValueINTEL* pValue\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPerformanceParameterTypeINTEL', 'header': 'VkPerformanceParameterTypeINTEL parameter\n            ', 'name': 'parameter'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkPerformanceValueINTEL', 'header': 'VkPerformanceValueINTEL* pValue\n        ', 'name': 'pValue'}]}(json data);
void handle_{'sync': False, 'type': 'uint64_t', 'num_indirection': 0, 'header': 'uint64_t vkGetDeviceMemoryOpaqueCaptureAddress(\nVkDevice device,\n const VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDeviceMemoryOpaqueCaptureAddressInfo', 'header': 'const VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo\n        ', 'name': 'pInfo'}]}(json data);
void handle_{'sync': False, 'type': 'uint64_t', 'num_indirection': 0, 'header': 'uint64_t vkGetDeviceMemoryOpaqueCaptureAddressKHR(\nVkDevice device,\n const VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDeviceMemoryOpaqueCaptureAddressInfo', 'header': 'const VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo\n        ', 'name': 'pInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetPipelineExecutablePropertiesKHR(\nVkDevice                        device,\n const VkPipelineInfoKHR*        pPipelineInfo,\n uint32_t* pExecutableCount,\n VkPipelineExecutablePropertiesKHR* pProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice                        device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPipelineInfoKHR', 'header': 'const VkPipelineInfoKHR*        pPipelineInfo\n            ', 'name': 'pPipelineInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pExecutableCount\n            ', 'name': 'pExecutableCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pExecutableCount'], 'type': 'VkPipelineExecutablePropertiesKHR', 'header': 'VkPipelineExecutablePropertiesKHR* pProperties\n        ', 'name': 'pProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetPipelineExecutableStatisticsKHR(\nVkDevice                        device,\n const VkPipelineExecutableInfoKHR*  pExecutableInfo,\n uint32_t* pStatisticCount,\n VkPipelineExecutableStatisticKHR* pStatistics\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice                        device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPipelineExecutableInfoKHR', 'header': 'const VkPipelineExecutableInfoKHR*  pExecutableInfo\n            ', 'name': 'pExecutableInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pStatisticCount\n            ', 'name': 'pStatisticCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pStatisticCount'], 'type': 'VkPipelineExecutableStatisticKHR', 'header': 'VkPipelineExecutableStatisticKHR* pStatistics\n        ', 'name': 'pStatistics'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetPipelineExecutableInternalRepresentationsKHR(\nVkDevice                        device,\n const VkPipelineExecutableInfoKHR*  pExecutableInfo,\n uint32_t* pInternalRepresentationCount,\n VkPipelineExecutableInternalRepresentationKHR* pInternalRepresentations\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice                        device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPipelineExecutableInfoKHR', 'header': 'const VkPipelineExecutableInfoKHR*  pExecutableInfo\n            ', 'name': 'pExecutableInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pInternalRepresentationCount\n            ', 'name': 'pInternalRepresentationCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pInternalRepresentationCount'], 'type': 'VkPipelineExecutableInternalRepresentationKHR', 'header': 'VkPipelineExecutableInternalRepresentationKHR* pInternalRepresentations\n        ', 'name': 'pInternalRepresentations'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetLineStippleEXT(\nVkCommandBuffer commandBuffer,\n uint32_t lineStippleFactor,\n uint16_t lineStipplePattern\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t lineStippleFactor\n            ', 'name': 'lineStippleFactor'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint16_t', 'header': 'uint16_t lineStipplePattern\n        ', 'name': 'lineStipplePattern'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetPhysicalDeviceToolProperties(\nVkPhysicalDevice physicalDevice,\n uint32_t* pToolCount,\n VkPhysicalDeviceToolProperties* pToolProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pToolCount\n            ', 'name': 'pToolCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pToolCount'], 'type': 'VkPhysicalDeviceToolProperties', 'header': 'VkPhysicalDeviceToolProperties* pToolProperties\n        ', 'name': 'pToolProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetPhysicalDeviceToolPropertiesEXT(\nVkPhysicalDevice physicalDevice,\n uint32_t* pToolCount,\n VkPhysicalDeviceToolProperties* pToolProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pToolCount\n            ', 'name': 'pToolCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pToolCount'], 'type': 'VkPhysicalDeviceToolProperties', 'header': 'VkPhysicalDeviceToolProperties* pToolProperties\n        ', 'name': 'pToolProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreateAccelerationStructureKHR(\nVkDevice                                           device,\n const VkAccelerationStructureCreateInfoKHR*        pCreateInfo,\n const VkAllocationCallbacks*       pAllocator,\n VkAccelerationStructureKHR*                        pAccelerationStructure\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice                                           device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAccelerationStructureCreateInfoKHR', 'header': 'const VkAccelerationStructureCreateInfoKHR*        pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks*       pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkAccelerationStructureKHR', 'header': 'VkAccelerationStructureKHR*                        pAccelerationStructure\n        ', 'name': 'pAccelerationStructure'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdBuildAccelerationStructuresKHR(\nVkCommandBuffer                                    commandBuffer,\n uint32_t infoCount,\n const VkAccelerationStructureBuildGeometryInfoKHR* pInfos,\n const VkAccelerationStructureBuildRangeInfoKHR* const* ppBuildRangeInfos\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer                                    commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t infoCount\n            ', 'name': 'infoCount'}, {'const': True, 'num_indirection': 1, 'length': ['infoCount'], 'type': 'VkAccelerationStructureBuildGeometryInfoKHR', 'header': 'const VkAccelerationStructureBuildGeometryInfoKHR* pInfos\n            ', 'name': 'pInfos'}, {'const': True, 'num_indirection': 2, 'length': ['infoCount'], 'type': 'VkAccelerationStructureBuildRangeInfoKHR', 'header': 'const VkAccelerationStructureBuildRangeInfoKHR* const* ppBuildRangeInfos\n        ', 'name': 'ppBuildRangeInfos'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdBuildAccelerationStructuresIndirectKHR(\nVkCommandBuffer                  commandBuffer,\n uint32_t                                           infoCount,\n const VkAccelerationStructureBuildGeometryInfoKHR* pInfos,\n const VkDeviceAddress*             pIndirectDeviceAddresses,\n const uint32_t*                    pIndirectStrides,\n const uint32_t* const*             ppMaxPrimitiveCounts\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer                  commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t                                           infoCount\n            ', 'name': 'infoCount'}, {'const': True, 'num_indirection': 1, 'length': ['infoCount'], 'type': 'VkAccelerationStructureBuildGeometryInfoKHR', 'header': 'const VkAccelerationStructureBuildGeometryInfoKHR* pInfos\n            ', 'name': 'pInfos'}, {'const': True, 'num_indirection': 1, 'length': ['infoCount'], 'type': 'VkDeviceAddress', 'header': 'const VkDeviceAddress*             pIndirectDeviceAddresses\n            ', 'name': 'pIndirectDeviceAddresses'}, {'const': True, 'num_indirection': 1, 'length': ['infoCount'], 'type': 'uint32_t', 'header': 'const uint32_t*                    pIndirectStrides\n            ', 'name': 'pIndirectStrides'}, {'const': True, 'num_indirection': 2, 'length': ['infoCount'], 'type': 'uint32_t', 'header': 'const uint32_t* const*             ppMaxPrimitiveCounts\n        ', 'name': 'ppMaxPrimitiveCounts'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkBuildAccelerationStructuresKHR(\nVkDevice                                           device,\n VkDeferredOperationKHR deferredOperation,\n uint32_t infoCount,\n const VkAccelerationStructureBuildGeometryInfoKHR* pInfos,\n const VkAccelerationStructureBuildRangeInfoKHR* const* ppBuildRangeInfos\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice                                           device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeferredOperationKHR', 'header': 'VkDeferredOperationKHR deferredOperation\n            ', 'name': 'deferredOperation'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t infoCount\n            ', 'name': 'infoCount'}, {'const': True, 'num_indirection': 1, 'length': ['infoCount'], 'type': 'VkAccelerationStructureBuildGeometryInfoKHR', 'header': 'const VkAccelerationStructureBuildGeometryInfoKHR* pInfos\n            ', 'name': 'pInfos'}, {'const': True, 'num_indirection': 2, 'length': ['infoCount'], 'type': 'VkAccelerationStructureBuildRangeInfoKHR', 'header': 'const VkAccelerationStructureBuildRangeInfoKHR* const* ppBuildRangeInfos\n        ', 'name': 'ppBuildRangeInfos'}]}(json data);
void handle_{'sync': False, 'type': 'VkDeviceAddress', 'num_indirection': 0, 'header': 'VkDeviceAddress vkGetAccelerationStructureDeviceAddressKHR(\nVkDevice device,\n const VkAccelerationStructureDeviceAddressInfoKHR* pInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAccelerationStructureDeviceAddressInfoKHR', 'header': 'const VkAccelerationStructureDeviceAddressInfoKHR* pInfo\n        ', 'name': 'pInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreateDeferredOperationKHR(\nVkDevice device,\n const VkAllocationCallbacks* pAllocator,\n VkDeferredOperationKHR* pDeferredOperation\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkDeferredOperationKHR', 'header': 'VkDeferredOperationKHR* pDeferredOperation\n        ', 'name': 'pDeferredOperation'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkDestroyDeferredOperationKHR(\nVkDevice device,\n VkDeferredOperationKHR operation,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeferredOperationKHR', 'header': 'VkDeferredOperationKHR operation\n            ', 'name': 'operation'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'uint32_t', 'num_indirection': 0, 'header': 'uint32_t vkGetDeferredOperationMaxConcurrencyKHR(\nVkDevice device,\n VkDeferredOperationKHR operation\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeferredOperationKHR', 'header': 'VkDeferredOperationKHR operation\n        ', 'name': 'operation'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetDeferredOperationResultKHR(\nVkDevice device,\n VkDeferredOperationKHR operation\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeferredOperationKHR', 'header': 'VkDeferredOperationKHR operation\n        ', 'name': 'operation'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkDeferredOperationJoinKHR(\nVkDevice device,\n VkDeferredOperationKHR operation\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeferredOperationKHR', 'header': 'VkDeferredOperationKHR operation\n        ', 'name': 'operation'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetPipelineIndirectMemoryRequirementsNV(\nVkDevice device,\n const VkComputePipelineCreateInfo* pCreateInfo,\n VkMemoryRequirements2* pMemoryRequirements\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkComputePipelineCreateInfo', 'header': 'const VkComputePipelineCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkMemoryRequirements2', 'header': 'VkMemoryRequirements2* pMemoryRequirements\n        ', 'name': 'pMemoryRequirements'}]}(json data);
void handle_{'sync': False, 'type': 'VkDeviceAddress', 'num_indirection': 0, 'header': 'VkDeviceAddress vkGetPipelineIndirectDeviceAddressNV(\nVkDevice device,\n const VkPipelineIndirectDeviceAddressInfoNV* pInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPipelineIndirectDeviceAddressInfoNV', 'header': 'const VkPipelineIndirectDeviceAddressInfoNV* pInfo\n        ', 'name': 'pInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetCullMode(\nVkCommandBuffer commandBuffer,\n VkCullModeFlags cullMode\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCullModeFlags', 'header': 'VkCullModeFlags cullMode\n        ', 'name': 'cullMode'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetCullModeEXT(\nVkCommandBuffer commandBuffer,\n VkCullModeFlags cullMode\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCullModeFlags', 'header': 'VkCullModeFlags cullMode\n        ', 'name': 'cullMode'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetFrontFace(\nVkCommandBuffer commandBuffer,\n VkFrontFace frontFace\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkFrontFace', 'header': 'VkFrontFace frontFace\n        ', 'name': 'frontFace'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetFrontFaceEXT(\nVkCommandBuffer commandBuffer,\n VkFrontFace frontFace\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkFrontFace', 'header': 'VkFrontFace frontFace\n        ', 'name': 'frontFace'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetPrimitiveTopology(\nVkCommandBuffer commandBuffer,\n VkPrimitiveTopology primitiveTopology\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPrimitiveTopology', 'header': 'VkPrimitiveTopology primitiveTopology\n        ', 'name': 'primitiveTopology'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetPrimitiveTopologyEXT(\nVkCommandBuffer commandBuffer,\n VkPrimitiveTopology primitiveTopology\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPrimitiveTopology', 'header': 'VkPrimitiveTopology primitiveTopology\n        ', 'name': 'primitiveTopology'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetViewportWithCount(\nVkCommandBuffer commandBuffer,\n uint32_t viewportCount,\n const VkViewport* pViewports\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t viewportCount\n            ', 'name': 'viewportCount'}, {'const': True, 'num_indirection': 1, 'length': ['viewportCount'], 'type': 'VkViewport', 'header': 'const VkViewport* pViewports\n        ', 'name': 'pViewports'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetViewportWithCountEXT(\nVkCommandBuffer commandBuffer,\n uint32_t viewportCount,\n const VkViewport* pViewports\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t viewportCount\n            ', 'name': 'viewportCount'}, {'const': True, 'num_indirection': 1, 'length': ['viewportCount'], 'type': 'VkViewport', 'header': 'const VkViewport* pViewports\n        ', 'name': 'pViewports'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetScissorWithCount(\nVkCommandBuffer commandBuffer,\n uint32_t scissorCount,\n const VkRect2D* pScissors\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t scissorCount\n            ', 'name': 'scissorCount'}, {'const': True, 'num_indirection': 1, 'length': ['scissorCount'], 'type': 'VkRect2D', 'header': 'const VkRect2D* pScissors\n        ', 'name': 'pScissors'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetScissorWithCountEXT(\nVkCommandBuffer commandBuffer,\n uint32_t scissorCount,\n const VkRect2D* pScissors\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t scissorCount\n            ', 'name': 'scissorCount'}, {'const': True, 'num_indirection': 1, 'length': ['scissorCount'], 'type': 'VkRect2D', 'header': 'const VkRect2D* pScissors\n        ', 'name': 'pScissors'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdBindIndexBuffer2KHR(\nVkCommandBuffer commandBuffer,\n VkBuffer buffer,\n VkDeviceSize offset,\n VkDeviceSize size,\n VkIndexType indexType\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer buffer\n            ', 'name': 'buffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize offset\n            ', 'name': 'offset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize size\n            ', 'name': 'size'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkIndexType', 'header': 'VkIndexType indexType\n        ', 'name': 'indexType'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdBindVertexBuffers2(\nVkCommandBuffer commandBuffer,\n uint32_t firstBinding,\n uint32_t bindingCount,\n const VkBuffer* pBuffers,\n const VkDeviceSize* pOffsets,\n const VkDeviceSize* pSizes,\n const VkDeviceSize* pStrides\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstBinding\n            ', 'name': 'firstBinding'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t bindingCount\n            ', 'name': 'bindingCount'}, {'const': True, 'num_indirection': 1, 'length': ['bindingCount'], 'type': 'VkBuffer', 'header': 'const VkBuffer* pBuffers\n            ', 'name': 'pBuffers'}, {'const': True, 'num_indirection': 1, 'length': ['bindingCount'], 'type': 'VkDeviceSize', 'header': 'const VkDeviceSize* pOffsets\n            ', 'name': 'pOffsets'}, {'const': True, 'num_indirection': 1, 'length': ['bindingCount'], 'type': 'VkDeviceSize', 'header': 'const VkDeviceSize* pSizes\n            ', 'name': 'pSizes'}, {'const': True, 'num_indirection': 1, 'length': ['bindingCount'], 'type': 'VkDeviceSize', 'header': 'const VkDeviceSize* pStrides\n        ', 'name': 'pStrides'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdBindVertexBuffers2EXT(\nVkCommandBuffer commandBuffer,\n uint32_t firstBinding,\n uint32_t bindingCount,\n const VkBuffer* pBuffers,\n const VkDeviceSize* pOffsets,\n const VkDeviceSize* pSizes,\n const VkDeviceSize* pStrides\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstBinding\n            ', 'name': 'firstBinding'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t bindingCount\n            ', 'name': 'bindingCount'}, {'const': True, 'num_indirection': 1, 'length': ['bindingCount'], 'type': 'VkBuffer', 'header': 'const VkBuffer* pBuffers\n            ', 'name': 'pBuffers'}, {'const': True, 'num_indirection': 1, 'length': ['bindingCount'], 'type': 'VkDeviceSize', 'header': 'const VkDeviceSize* pOffsets\n            ', 'name': 'pOffsets'}, {'const': True, 'num_indirection': 1, 'length': ['bindingCount'], 'type': 'VkDeviceSize', 'header': 'const VkDeviceSize* pSizes\n            ', 'name': 'pSizes'}, {'const': True, 'num_indirection': 1, 'length': ['bindingCount'], 'type': 'VkDeviceSize', 'header': 'const VkDeviceSize* pStrides\n        ', 'name': 'pStrides'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetDepthTestEnable(\nVkCommandBuffer commandBuffer,\n VkBool32 depthTestEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 depthTestEnable\n        ', 'name': 'depthTestEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetDepthTestEnableEXT(\nVkCommandBuffer commandBuffer,\n VkBool32 depthTestEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 depthTestEnable\n        ', 'name': 'depthTestEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetDepthWriteEnable(\nVkCommandBuffer commandBuffer,\n VkBool32 depthWriteEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 depthWriteEnable\n        ', 'name': 'depthWriteEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetDepthWriteEnableEXT(\nVkCommandBuffer commandBuffer,\n VkBool32 depthWriteEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 depthWriteEnable\n        ', 'name': 'depthWriteEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetDepthCompareOp(\nVkCommandBuffer commandBuffer,\n VkCompareOp depthCompareOp\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCompareOp', 'header': 'VkCompareOp depthCompareOp\n        ', 'name': 'depthCompareOp'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetDepthCompareOpEXT(\nVkCommandBuffer commandBuffer,\n VkCompareOp depthCompareOp\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCompareOp', 'header': 'VkCompareOp depthCompareOp\n        ', 'name': 'depthCompareOp'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetDepthBoundsTestEnable(\nVkCommandBuffer commandBuffer,\n VkBool32 depthBoundsTestEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 depthBoundsTestEnable\n        ', 'name': 'depthBoundsTestEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetDepthBoundsTestEnableEXT(\nVkCommandBuffer commandBuffer,\n VkBool32 depthBoundsTestEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 depthBoundsTestEnable\n        ', 'name': 'depthBoundsTestEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetStencilTestEnable(\nVkCommandBuffer commandBuffer,\n VkBool32 stencilTestEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 stencilTestEnable\n        ', 'name': 'stencilTestEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetStencilTestEnableEXT(\nVkCommandBuffer commandBuffer,\n VkBool32 stencilTestEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 stencilTestEnable\n        ', 'name': 'stencilTestEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetStencilOp(\nVkCommandBuffer commandBuffer,\n VkStencilFaceFlags faceMask,\n VkStencilOp failOp,\n VkStencilOp passOp,\n VkStencilOp depthFailOp,\n VkCompareOp compareOp\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkStencilFaceFlags', 'header': 'VkStencilFaceFlags faceMask\n            ', 'name': 'faceMask'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkStencilOp', 'header': 'VkStencilOp failOp\n            ', 'name': 'failOp'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkStencilOp', 'header': 'VkStencilOp passOp\n            ', 'name': 'passOp'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkStencilOp', 'header': 'VkStencilOp depthFailOp\n            ', 'name': 'depthFailOp'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCompareOp', 'header': 'VkCompareOp compareOp\n        ', 'name': 'compareOp'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetStencilOpEXT(\nVkCommandBuffer commandBuffer,\n VkStencilFaceFlags faceMask,\n VkStencilOp failOp,\n VkStencilOp passOp,\n VkStencilOp depthFailOp,\n VkCompareOp compareOp\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkStencilFaceFlags', 'header': 'VkStencilFaceFlags faceMask\n            ', 'name': 'faceMask'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkStencilOp', 'header': 'VkStencilOp failOp\n            ', 'name': 'failOp'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkStencilOp', 'header': 'VkStencilOp passOp\n            ', 'name': 'passOp'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkStencilOp', 'header': 'VkStencilOp depthFailOp\n            ', 'name': 'depthFailOp'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCompareOp', 'header': 'VkCompareOp compareOp\n        ', 'name': 'compareOp'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetPatchControlPointsEXT(\nVkCommandBuffer commandBuffer,\n uint32_t patchControlPoints\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t patchControlPoints\n        ', 'name': 'patchControlPoints'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetRasterizerDiscardEnable(\nVkCommandBuffer commandBuffer,\n VkBool32 rasterizerDiscardEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 rasterizerDiscardEnable\n        ', 'name': 'rasterizerDiscardEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetRasterizerDiscardEnableEXT(\nVkCommandBuffer commandBuffer,\n VkBool32 rasterizerDiscardEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 rasterizerDiscardEnable\n        ', 'name': 'rasterizerDiscardEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetDepthBiasEnable(\nVkCommandBuffer commandBuffer,\n VkBool32 depthBiasEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 depthBiasEnable\n        ', 'name': 'depthBiasEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetDepthBiasEnableEXT(\nVkCommandBuffer commandBuffer,\n VkBool32 depthBiasEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 depthBiasEnable\n        ', 'name': 'depthBiasEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetLogicOpEXT(\nVkCommandBuffer commandBuffer,\n VkLogicOp logicOp\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkLogicOp', 'header': 'VkLogicOp logicOp\n        ', 'name': 'logicOp'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetPrimitiveRestartEnable(\nVkCommandBuffer commandBuffer,\n VkBool32 primitiveRestartEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 primitiveRestartEnable\n        ', 'name': 'primitiveRestartEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetPrimitiveRestartEnableEXT(\nVkCommandBuffer commandBuffer,\n VkBool32 primitiveRestartEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 primitiveRestartEnable\n        ', 'name': 'primitiveRestartEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetTessellationDomainOriginEXT(\nVkCommandBuffer commandBuffer,\n VkTessellationDomainOrigin domainOrigin\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkTessellationDomainOrigin', 'header': 'VkTessellationDomainOrigin domainOrigin\n        ', 'name': 'domainOrigin'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetDepthClampEnableEXT(\nVkCommandBuffer commandBuffer,\n VkBool32 depthClampEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 depthClampEnable\n        ', 'name': 'depthClampEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetPolygonModeEXT(\nVkCommandBuffer commandBuffer,\n VkPolygonMode polygonMode\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPolygonMode', 'header': 'VkPolygonMode polygonMode\n        ', 'name': 'polygonMode'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetRasterizationSamplesEXT(\nVkCommandBuffer commandBuffer,\n VkSampleCountFlagBits  rasterizationSamples\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSampleCountFlagBits', 'header': 'VkSampleCountFlagBits  rasterizationSamples\n        ', 'name': 'rasterizationSamples'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetSampleMaskEXT(\nVkCommandBuffer commandBuffer,\n VkSampleCountFlagBits  samples,\n const VkSampleMask*    pSampleMask\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSampleCountFlagBits', 'header': 'VkSampleCountFlagBits  samples\n            ', 'name': 'samples'}, {'const': True, 'num_indirection': 1, 'length': ['(samples + 31) / 32'], 'type': 'VkSampleMask', 'header': 'const VkSampleMask*    pSampleMask\n        ', 'name': 'pSampleMask'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetAlphaToCoverageEnableEXT(\nVkCommandBuffer commandBuffer,\n VkBool32 alphaToCoverageEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 alphaToCoverageEnable\n        ', 'name': 'alphaToCoverageEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetAlphaToOneEnableEXT(\nVkCommandBuffer commandBuffer,\n VkBool32 alphaToOneEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 alphaToOneEnable\n        ', 'name': 'alphaToOneEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetLogicOpEnableEXT(\nVkCommandBuffer commandBuffer,\n VkBool32 logicOpEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 logicOpEnable\n        ', 'name': 'logicOpEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetColorBlendEnableEXT(\nVkCommandBuffer commandBuffer,\n uint32_t firstAttachment,\n uint32_t attachmentCount,\n const VkBool32* pColorBlendEnables\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstAttachment\n            ', 'name': 'firstAttachment'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t attachmentCount\n            ', 'name': 'attachmentCount'}, {'const': True, 'num_indirection': 1, 'length': ['attachmentCount'], 'type': 'VkBool32', 'header': 'const VkBool32* pColorBlendEnables\n        ', 'name': 'pColorBlendEnables'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetColorBlendEquationEXT(\nVkCommandBuffer commandBuffer,\n uint32_t firstAttachment,\n uint32_t attachmentCount,\n const VkColorBlendEquationEXT* pColorBlendEquations\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstAttachment\n            ', 'name': 'firstAttachment'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t attachmentCount\n            ', 'name': 'attachmentCount'}, {'const': True, 'num_indirection': 1, 'length': ['attachmentCount'], 'type': 'VkColorBlendEquationEXT', 'header': 'const VkColorBlendEquationEXT* pColorBlendEquations\n        ', 'name': 'pColorBlendEquations'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetColorWriteMaskEXT(\nVkCommandBuffer commandBuffer,\n uint32_t firstAttachment,\n uint32_t attachmentCount,\n const VkColorComponentFlags* pColorWriteMasks\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstAttachment\n            ', 'name': 'firstAttachment'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t attachmentCount\n            ', 'name': 'attachmentCount'}, {'const': True, 'num_indirection': 1, 'length': ['attachmentCount'], 'type': 'VkColorComponentFlags', 'header': 'const VkColorComponentFlags* pColorWriteMasks\n        ', 'name': 'pColorWriteMasks'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetRasterizationStreamEXT(\nVkCommandBuffer commandBuffer,\n uint32_t rasterizationStream\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t rasterizationStream\n        ', 'name': 'rasterizationStream'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetConservativeRasterizationModeEXT(\nVkCommandBuffer commandBuffer,\n VkConservativeRasterizationModeEXT conservativeRasterizationMode\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkConservativeRasterizationModeEXT', 'header': 'VkConservativeRasterizationModeEXT conservativeRasterizationMode\n        ', 'name': 'conservativeRasterizationMode'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetExtraPrimitiveOverestimationSizeEXT(\nVkCommandBuffer commandBuffer,\n float extraPrimitiveOverestimationSize\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'float', 'header': 'float extraPrimitiveOverestimationSize\n        ', 'name': 'extraPrimitiveOverestimationSize'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetDepthClipEnableEXT(\nVkCommandBuffer commandBuffer,\n VkBool32 depthClipEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 depthClipEnable\n        ', 'name': 'depthClipEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetSampleLocationsEnableEXT(\nVkCommandBuffer commandBuffer,\n VkBool32 sampleLocationsEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 sampleLocationsEnable\n        ', 'name': 'sampleLocationsEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetColorBlendAdvancedEXT(\nVkCommandBuffer commandBuffer,\n uint32_t firstAttachment,\n uint32_t attachmentCount,\n const VkColorBlendAdvancedEXT* pColorBlendAdvanced\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstAttachment\n            ', 'name': 'firstAttachment'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t attachmentCount\n            ', 'name': 'attachmentCount'}, {'const': True, 'num_indirection': 1, 'length': ['attachmentCount'], 'type': 'VkColorBlendAdvancedEXT', 'header': 'const VkColorBlendAdvancedEXT* pColorBlendAdvanced\n        ', 'name': 'pColorBlendAdvanced'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetProvokingVertexModeEXT(\nVkCommandBuffer commandBuffer,\n VkProvokingVertexModeEXT provokingVertexMode\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkProvokingVertexModeEXT', 'header': 'VkProvokingVertexModeEXT provokingVertexMode\n        ', 'name': 'provokingVertexMode'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetLineRasterizationModeEXT(\nVkCommandBuffer commandBuffer,\n VkLineRasterizationModeEXT lineRasterizationMode\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkLineRasterizationModeEXT', 'header': 'VkLineRasterizationModeEXT lineRasterizationMode\n        ', 'name': 'lineRasterizationMode'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetLineStippleEnableEXT(\nVkCommandBuffer commandBuffer,\n VkBool32 stippledLineEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 stippledLineEnable\n        ', 'name': 'stippledLineEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetDepthClipNegativeOneToOneEXT(\nVkCommandBuffer commandBuffer,\n VkBool32 negativeOneToOne\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 negativeOneToOne\n        ', 'name': 'negativeOneToOne'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetViewportWScalingEnableNV(\nVkCommandBuffer commandBuffer,\n VkBool32 viewportWScalingEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 viewportWScalingEnable\n        ', 'name': 'viewportWScalingEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetViewportSwizzleNV(\nVkCommandBuffer commandBuffer,\n uint32_t firstViewport,\n uint32_t viewportCount,\n const VkViewportSwizzleNV* pViewportSwizzles\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstViewport\n            ', 'name': 'firstViewport'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t viewportCount\n            ', 'name': 'viewportCount'}, {'const': True, 'num_indirection': 1, 'length': ['viewportCount'], 'type': 'VkViewportSwizzleNV', 'header': 'const VkViewportSwizzleNV* pViewportSwizzles\n        ', 'name': 'pViewportSwizzles'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetCoverageToColorEnableNV(\nVkCommandBuffer commandBuffer,\n VkBool32 coverageToColorEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 coverageToColorEnable\n        ', 'name': 'coverageToColorEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetCoverageToColorLocationNV(\nVkCommandBuffer commandBuffer,\n uint32_t coverageToColorLocation\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t coverageToColorLocation\n        ', 'name': 'coverageToColorLocation'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetCoverageModulationModeNV(\nVkCommandBuffer commandBuffer,\n VkCoverageModulationModeNV coverageModulationMode\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCoverageModulationModeNV', 'header': 'VkCoverageModulationModeNV coverageModulationMode\n        ', 'name': 'coverageModulationMode'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetCoverageModulationTableEnableNV(\nVkCommandBuffer commandBuffer,\n VkBool32 coverageModulationTableEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 coverageModulationTableEnable\n        ', 'name': 'coverageModulationTableEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetCoverageModulationTableNV(\nVkCommandBuffer commandBuffer,\n uint32_t coverageModulationTableCount,\n const float* pCoverageModulationTable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t coverageModulationTableCount\n            ', 'name': 'coverageModulationTableCount'}, {'const': True, 'num_indirection': 1, 'length': ['coverageModulationTableCount'], 'type': 'float', 'header': 'const float* pCoverageModulationTable\n        ', 'name': 'pCoverageModulationTable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetShadingRateImageEnableNV(\nVkCommandBuffer commandBuffer,\n VkBool32 shadingRateImageEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 shadingRateImageEnable\n        ', 'name': 'shadingRateImageEnable'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetCoverageReductionModeNV(\nVkCommandBuffer commandBuffer,\n VkCoverageReductionModeNV coverageReductionMode\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCoverageReductionModeNV', 'header': 'VkCoverageReductionModeNV coverageReductionMode\n        ', 'name': 'coverageReductionMode'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetRepresentativeFragmentTestEnableNV(\nVkCommandBuffer commandBuffer,\n VkBool32 representativeFragmentTestEnable\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBool32', 'header': 'VkBool32 representativeFragmentTestEnable\n        ', 'name': 'representativeFragmentTestEnable'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreatePrivateDataSlot(\nVkDevice device,\n const VkPrivateDataSlotCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkPrivateDataSlot* pPrivateDataSlot\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPrivateDataSlotCreateInfo', 'header': 'const VkPrivateDataSlotCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkPrivateDataSlot', 'header': 'VkPrivateDataSlot* pPrivateDataSlot\n        ', 'name': 'pPrivateDataSlot'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreatePrivateDataSlotEXT(\nVkDevice device,\n const VkPrivateDataSlotCreateInfo* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkPrivateDataSlot* pPrivateDataSlot\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPrivateDataSlotCreateInfo', 'header': 'const VkPrivateDataSlotCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkPrivateDataSlot', 'header': 'VkPrivateDataSlot* pPrivateDataSlot\n        ', 'name': 'pPrivateDataSlot'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkDestroyPrivateDataSlot(\nVkDevice device,\n VkPrivateDataSlot privateDataSlot,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPrivateDataSlot', 'header': 'VkPrivateDataSlot privateDataSlot\n            ', 'name': 'privateDataSlot'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkDestroyPrivateDataSlotEXT(\nVkDevice device,\n VkPrivateDataSlot privateDataSlot,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPrivateDataSlot', 'header': 'VkPrivateDataSlot privateDataSlot\n            ', 'name': 'privateDataSlot'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkSetPrivateData(\nVkDevice device,\n VkObjectType objectType,\n uint64_t objectHandle,\n VkPrivateDataSlot privateDataSlot,\n uint64_t data\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkObjectType', 'header': 'VkObjectType objectType\n            ', 'name': 'objectType'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint64_t', 'header': 'uint64_t objectHandle\n            ', 'name': 'objectHandle'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPrivateDataSlot', 'header': 'VkPrivateDataSlot privateDataSlot\n            ', 'name': 'privateDataSlot'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint64_t', 'header': 'uint64_t data\n        ', 'name': 'data'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkSetPrivateDataEXT(\nVkDevice device,\n VkObjectType objectType,\n uint64_t objectHandle,\n VkPrivateDataSlot privateDataSlot,\n uint64_t data\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkObjectType', 'header': 'VkObjectType objectType\n            ', 'name': 'objectType'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint64_t', 'header': 'uint64_t objectHandle\n            ', 'name': 'objectHandle'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPrivateDataSlot', 'header': 'VkPrivateDataSlot privateDataSlot\n            ', 'name': 'privateDataSlot'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint64_t', 'header': 'uint64_t data\n        ', 'name': 'data'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetPrivateData(\nVkDevice device,\n VkObjectType objectType,\n uint64_t objectHandle,\n VkPrivateDataSlot privateDataSlot,\n uint64_t* pData\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkObjectType', 'header': 'VkObjectType objectType\n            ', 'name': 'objectType'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint64_t', 'header': 'uint64_t objectHandle\n            ', 'name': 'objectHandle'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPrivateDataSlot', 'header': 'VkPrivateDataSlot privateDataSlot\n            ', 'name': 'privateDataSlot'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint64_t', 'header': 'uint64_t* pData\n        ', 'name': 'pData'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetPrivateDataEXT(\nVkDevice device,\n VkObjectType objectType,\n uint64_t objectHandle,\n VkPrivateDataSlot privateDataSlot,\n uint64_t* pData\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkObjectType', 'header': 'VkObjectType objectType\n            ', 'name': 'objectType'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint64_t', 'header': 'uint64_t objectHandle\n            ', 'name': 'objectHandle'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPrivateDataSlot', 'header': 'VkPrivateDataSlot privateDataSlot\n            ', 'name': 'privateDataSlot'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint64_t', 'header': 'uint64_t* pData\n        ', 'name': 'pData'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdCopyBuffer2(\nVkCommandBuffer commandBuffer,\n const VkCopyBufferInfo2* pCopyBufferInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCopyBufferInfo2', 'header': 'const VkCopyBufferInfo2* pCopyBufferInfo\n        ', 'name': 'pCopyBufferInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdCopyBuffer2KHR(\nVkCommandBuffer commandBuffer,\n const VkCopyBufferInfo2* pCopyBufferInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCopyBufferInfo2', 'header': 'const VkCopyBufferInfo2* pCopyBufferInfo\n        ', 'name': 'pCopyBufferInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdCopyImage2(\nVkCommandBuffer commandBuffer,\n const VkCopyImageInfo2* pCopyImageInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCopyImageInfo2', 'header': 'const VkCopyImageInfo2* pCopyImageInfo\n        ', 'name': 'pCopyImageInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdCopyImage2KHR(\nVkCommandBuffer commandBuffer,\n const VkCopyImageInfo2* pCopyImageInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCopyImageInfo2', 'header': 'const VkCopyImageInfo2* pCopyImageInfo\n        ', 'name': 'pCopyImageInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdBlitImage2(\nVkCommandBuffer commandBuffer,\n const VkBlitImageInfo2* pBlitImageInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkBlitImageInfo2', 'header': 'const VkBlitImageInfo2* pBlitImageInfo\n        ', 'name': 'pBlitImageInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdBlitImage2KHR(\nVkCommandBuffer commandBuffer,\n const VkBlitImageInfo2* pBlitImageInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkBlitImageInfo2', 'header': 'const VkBlitImageInfo2* pBlitImageInfo\n        ', 'name': 'pBlitImageInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdCopyBufferToImage2(\nVkCommandBuffer commandBuffer,\n const VkCopyBufferToImageInfo2* pCopyBufferToImageInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCopyBufferToImageInfo2', 'header': 'const VkCopyBufferToImageInfo2* pCopyBufferToImageInfo\n        ', 'name': 'pCopyBufferToImageInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdCopyBufferToImage2KHR(\nVkCommandBuffer commandBuffer,\n const VkCopyBufferToImageInfo2* pCopyBufferToImageInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCopyBufferToImageInfo2', 'header': 'const VkCopyBufferToImageInfo2* pCopyBufferToImageInfo\n        ', 'name': 'pCopyBufferToImageInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdCopyImageToBuffer2(\nVkCommandBuffer commandBuffer,\n const VkCopyImageToBufferInfo2* pCopyImageToBufferInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCopyImageToBufferInfo2', 'header': 'const VkCopyImageToBufferInfo2* pCopyImageToBufferInfo\n        ', 'name': 'pCopyImageToBufferInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdCopyImageToBuffer2KHR(\nVkCommandBuffer commandBuffer,\n const VkCopyImageToBufferInfo2* pCopyImageToBufferInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCopyImageToBufferInfo2', 'header': 'const VkCopyImageToBufferInfo2* pCopyImageToBufferInfo\n        ', 'name': 'pCopyImageToBufferInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdResolveImage2(\nVkCommandBuffer commandBuffer,\n const VkResolveImageInfo2* pResolveImageInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkResolveImageInfo2', 'header': 'const VkResolveImageInfo2* pResolveImageInfo\n        ', 'name': 'pResolveImageInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdResolveImage2KHR(\nVkCommandBuffer commandBuffer,\n const VkResolveImageInfo2* pResolveImageInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkResolveImageInfo2', 'header': 'const VkResolveImageInfo2* pResolveImageInfo\n        ', 'name': 'pResolveImageInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetFragmentShadingRateKHR(\nVkCommandBuffer           commandBuffer,\n const VkExtent2D*                           pFragmentSize,\n const VkFragmentShadingRateCombinerOpKHR    combinerOps[2]\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer           commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkExtent2D', 'header': 'const VkExtent2D*                           pFragmentSize\n            ', 'name': 'pFragmentSize'}, {'const': True, 'num_indirection': 0, 'length': ['2'], 'type': 'VkFragmentShadingRateCombinerOpKHR', 'header': 'const VkFragmentShadingRateCombinerOpKHR    combinerOps[2]\n        ', 'name': 'combinerOps'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetPhysicalDeviceFragmentShadingRatesKHR(\nVkPhysicalDevice physicalDevice,\n uint32_t* pFragmentShadingRateCount,\n VkPhysicalDeviceFragmentShadingRateKHR* pFragmentShadingRates\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pFragmentShadingRateCount\n            ', 'name': 'pFragmentShadingRateCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pFragmentShadingRateCount'], 'type': 'VkPhysicalDeviceFragmentShadingRateKHR', 'header': 'VkPhysicalDeviceFragmentShadingRateKHR* pFragmentShadingRates\n        ', 'name': 'pFragmentShadingRates'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetFragmentShadingRateEnumNV(\nVkCommandBuffer           commandBuffer,\n VkFragmentShadingRateNV                     shadingRate,\n const VkFragmentShadingRateCombinerOpKHR    combinerOps[2]\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer           commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkFragmentShadingRateNV', 'header': 'VkFragmentShadingRateNV                     shadingRate\n            ', 'name': 'shadingRate'}, {'const': True, 'num_indirection': 0, 'length': ['2'], 'type': 'VkFragmentShadingRateCombinerOpKHR', 'header': 'const VkFragmentShadingRateCombinerOpKHR    combinerOps[2]\n        ', 'name': 'combinerOps'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetAccelerationStructureBuildSizesKHR(\nVkDevice                                            device,\n VkAccelerationStructureBuildTypeKHR                 buildType,\n const VkAccelerationStructureBuildGeometryInfoKHR*  pBuildInfo,\n const uint32_t*  pMaxPrimitiveCounts,\n VkAccelerationStructureBuildSizesInfoKHR*           pSizeInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice                                            device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkAccelerationStructureBuildTypeKHR', 'header': 'VkAccelerationStructureBuildTypeKHR                 buildType\n            ', 'name': 'buildType'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAccelerationStructureBuildGeometryInfoKHR', 'header': 'const VkAccelerationStructureBuildGeometryInfoKHR*  pBuildInfo\n            ', 'name': 'pBuildInfo'}, {'const': True, 'num_indirection': 1, 'length': ['pBuildInfo->geometryCount'], 'type': 'uint32_t', 'header': 'const uint32_t*  pMaxPrimitiveCounts\n            ', 'name': 'pMaxPrimitiveCounts'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkAccelerationStructureBuildSizesInfoKHR', 'header': 'VkAccelerationStructureBuildSizesInfoKHR*           pSizeInfo\n        ', 'name': 'pSizeInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetVertexInputEXT(\nVkCommandBuffer commandBuffer,\n uint32_t vertexBindingDescriptionCount,\n const VkVertexInputBindingDescription2EXT* pVertexBindingDescriptions,\n uint32_t vertexAttributeDescriptionCount,\n const VkVertexInputAttributeDescription2EXT* pVertexAttributeDescriptions\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t vertexBindingDescriptionCount\n            ', 'name': 'vertexBindingDescriptionCount'}, {'const': True, 'num_indirection': 1, 'length': ['vertexBindingDescriptionCount'], 'type': 'VkVertexInputBindingDescription2EXT', 'header': 'const VkVertexInputBindingDescription2EXT* pVertexBindingDescriptions\n            ', 'name': 'pVertexBindingDescriptions'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t vertexAttributeDescriptionCount\n            ', 'name': 'vertexAttributeDescriptionCount'}, {'const': True, 'num_indirection': 1, 'length': ['vertexAttributeDescriptionCount'], 'type': 'VkVertexInputAttributeDescription2EXT', 'header': 'const VkVertexInputAttributeDescription2EXT* pVertexAttributeDescriptions\n        ', 'name': 'pVertexAttributeDescriptions'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetColorWriteEnableEXT(\nVkCommandBuffer       commandBuffer,\n uint32_t                                attachmentCount,\n const VkBool32*   pColorWriteEnables\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer       commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t                                attachmentCount\n            ', 'name': 'attachmentCount'}, {'const': True, 'num_indirection': 1, 'length': ['attachmentCount'], 'type': 'VkBool32', 'header': 'const VkBool32*   pColorWriteEnables\n        ', 'name': 'pColorWriteEnables'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetEvent2(\nVkCommandBuffer                   commandBuffer,\n VkEvent                                             event,\n const VkDependencyInfo*                             pDependencyInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer                   commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkEvent', 'header': 'VkEvent                                             event\n            ', 'name': 'event'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDependencyInfo', 'header': 'const VkDependencyInfo*                             pDependencyInfo\n        ', 'name': 'pDependencyInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetEvent2KHR(\nVkCommandBuffer                   commandBuffer,\n VkEvent                                             event,\n const VkDependencyInfo*                             pDependencyInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer                   commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkEvent', 'header': 'VkEvent                                             event\n            ', 'name': 'event'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDependencyInfo', 'header': 'const VkDependencyInfo*                             pDependencyInfo\n        ', 'name': 'pDependencyInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdResetEvent2(\nVkCommandBuffer                   commandBuffer,\n VkEvent                                             event,\n VkPipelineStageFlags2               stageMask\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer                   commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkEvent', 'header': 'VkEvent                                             event\n            ', 'name': 'event'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineStageFlags2', 'header': 'VkPipelineStageFlags2               stageMask\n        ', 'name': 'stageMask'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdResetEvent2KHR(\nVkCommandBuffer                   commandBuffer,\n VkEvent                                             event,\n VkPipelineStageFlags2               stageMask\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer                   commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkEvent', 'header': 'VkEvent                                             event\n            ', 'name': 'event'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineStageFlags2', 'header': 'VkPipelineStageFlags2               stageMask\n        ', 'name': 'stageMask'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdWaitEvents2(\nVkCommandBuffer                   commandBuffer,\n uint32_t                                            eventCount,\n const VkEvent*                     pEvents,\n const VkDependencyInfo*            pDependencyInfos\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer                   commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t                                            eventCount\n            ', 'name': 'eventCount'}, {'const': True, 'num_indirection': 1, 'length': ['eventCount'], 'type': 'VkEvent', 'header': 'const VkEvent*                     pEvents\n            ', 'name': 'pEvents'}, {'const': True, 'num_indirection': 1, 'length': ['eventCount'], 'type': 'VkDependencyInfo', 'header': 'const VkDependencyInfo*            pDependencyInfos\n        ', 'name': 'pDependencyInfos'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdWaitEvents2KHR(\nVkCommandBuffer                   commandBuffer,\n uint32_t                                            eventCount,\n const VkEvent*                     pEvents,\n const VkDependencyInfo*            pDependencyInfos\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer                   commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t                                            eventCount\n            ', 'name': 'eventCount'}, {'const': True, 'num_indirection': 1, 'length': ['eventCount'], 'type': 'VkEvent', 'header': 'const VkEvent*                     pEvents\n            ', 'name': 'pEvents'}, {'const': True, 'num_indirection': 1, 'length': ['eventCount'], 'type': 'VkDependencyInfo', 'header': 'const VkDependencyInfo*            pDependencyInfos\n        ', 'name': 'pDependencyInfos'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdPipelineBarrier2(\nVkCommandBuffer                   commandBuffer,\n const VkDependencyInfo*                             pDependencyInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer                   commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDependencyInfo', 'header': 'const VkDependencyInfo*                             pDependencyInfo\n        ', 'name': 'pDependencyInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdPipelineBarrier2KHR(\nVkCommandBuffer                   commandBuffer,\n const VkDependencyInfo*                             pDependencyInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer                   commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDependencyInfo', 'header': 'const VkDependencyInfo*                             pDependencyInfo\n        ', 'name': 'pDependencyInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkQueueSubmit2(\nVkQueue                           queue,\n uint32_t                            submitCount,\n const VkSubmitInfo2*              pSubmits,\n VkFence           fence\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueue', 'header': 'VkQueue                           queue\n            ', 'name': 'queue'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t                            submitCount\n            ', 'name': 'submitCount'}, {'const': True, 'num_indirection': 1, 'length': ['submitCount'], 'type': 'VkSubmitInfo2', 'header': 'const VkSubmitInfo2*              pSubmits\n            ', 'name': 'pSubmits'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkFence', 'header': 'VkFence           fence\n        ', 'name': 'fence'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkQueueSubmit2KHR(\nVkQueue                           queue,\n uint32_t                            submitCount,\n const VkSubmitInfo2*              pSubmits,\n VkFence           fence\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueue', 'header': 'VkQueue                           queue\n            ', 'name': 'queue'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t                            submitCount\n            ', 'name': 'submitCount'}, {'const': True, 'num_indirection': 1, 'length': ['submitCount'], 'type': 'VkSubmitInfo2', 'header': 'const VkSubmitInfo2*              pSubmits\n            ', 'name': 'pSubmits'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkFence', 'header': 'VkFence           fence\n        ', 'name': 'fence'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdWriteTimestamp2(\nVkCommandBuffer                   commandBuffer,\n VkPipelineStageFlags2               stage,\n VkQueryPool                                         queryPool,\n uint32_t                                            query\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer                   commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineStageFlags2', 'header': 'VkPipelineStageFlags2               stage\n            ', 'name': 'stage'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryPool', 'header': 'VkQueryPool                                         queryPool\n            ', 'name': 'queryPool'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t                                            query\n        ', 'name': 'query'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdWriteTimestamp2KHR(\nVkCommandBuffer                   commandBuffer,\n VkPipelineStageFlags2               stage,\n VkQueryPool                                         queryPool,\n uint32_t                                            query\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer                   commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineStageFlags2', 'header': 'VkPipelineStageFlags2               stage\n            ', 'name': 'stage'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryPool', 'header': 'VkQueryPool                                         queryPool\n            ', 'name': 'queryPool'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t                                            query\n        ', 'name': 'query'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdWriteBufferMarker2AMD(\nVkCommandBuffer                   commandBuffer,\n VkPipelineStageFlags2               stage,\n VkBuffer                                            dstBuffer,\n VkDeviceSize                                        dstOffset,\n uint32_t                                            marker\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer                   commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineStageFlags2', 'header': 'VkPipelineStageFlags2               stage\n            ', 'name': 'stage'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkBuffer', 'header': 'VkBuffer                                            dstBuffer\n            ', 'name': 'dstBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize                                        dstOffset\n            ', 'name': 'dstOffset'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t                                            marker\n        ', 'name': 'marker'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetQueueCheckpointData2NV(\nVkQueue queue,\n uint32_t* pCheckpointDataCount,\n VkCheckpointData2NV* pCheckpointData\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueue', 'header': 'VkQueue queue\n            ', 'name': 'queue'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pCheckpointDataCount\n            ', 'name': 'pCheckpointDataCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pCheckpointDataCount'], 'type': 'VkCheckpointData2NV', 'header': 'VkCheckpointData2NV* pCheckpointData\n        ', 'name': 'pCheckpointData'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCopyMemoryToImageEXT(\nVkDevice device,\n const VkCopyMemoryToImageInfoEXT* pCopyMemoryToImageInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCopyMemoryToImageInfoEXT', 'header': 'const VkCopyMemoryToImageInfoEXT* pCopyMemoryToImageInfo\n        ', 'name': 'pCopyMemoryToImageInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCopyImageToMemoryEXT(\nVkDevice device,\n const VkCopyImageToMemoryInfoEXT* pCopyImageToMemoryInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCopyImageToMemoryInfoEXT', 'header': 'const VkCopyImageToMemoryInfoEXT* pCopyImageToMemoryInfo\n        ', 'name': 'pCopyImageToMemoryInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCopyImageToImageEXT(\nVkDevice device,\n const VkCopyImageToImageInfoEXT* pCopyImageToImageInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCopyImageToImageInfoEXT', 'header': 'const VkCopyImageToImageInfoEXT* pCopyImageToImageInfo\n        ', 'name': 'pCopyImageToImageInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkTransitionImageLayoutEXT(\nVkDevice device,\n uint32_t transitionCount,\n const VkHostImageLayoutTransitionInfoEXT* pTransitions\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t transitionCount\n            ', 'name': 'transitionCount'}, {'const': True, 'num_indirection': 1, 'length': ['transitionCount'], 'type': 'VkHostImageLayoutTransitionInfoEXT', 'header': 'const VkHostImageLayoutTransitionInfoEXT* pTransitions\n        ', 'name': 'pTransitions'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetPhysicalDeviceVideoCapabilitiesKHR(\nVkPhysicalDevice physicalDevice,\n const VkVideoProfileInfoKHR* pVideoProfile,\n VkVideoCapabilitiesKHR* pCapabilities\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkVideoProfileInfoKHR', 'header': 'const VkVideoProfileInfoKHR* pVideoProfile\n            ', 'name': 'pVideoProfile'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkVideoCapabilitiesKHR', 'header': 'VkVideoCapabilitiesKHR* pCapabilities\n        ', 'name': 'pCapabilities'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetPhysicalDeviceVideoFormatPropertiesKHR(\nVkPhysicalDevice physicalDevice,\n const VkPhysicalDeviceVideoFormatInfoKHR* pVideoFormatInfo,\n uint32_t* pVideoFormatPropertyCount,\n VkVideoFormatPropertiesKHR* pVideoFormatProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPhysicalDeviceVideoFormatInfoKHR', 'header': 'const VkPhysicalDeviceVideoFormatInfoKHR* pVideoFormatInfo\n            ', 'name': 'pVideoFormatInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pVideoFormatPropertyCount\n            ', 'name': 'pVideoFormatPropertyCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pVideoFormatPropertyCount'], 'type': 'VkVideoFormatPropertiesKHR', 'header': 'VkVideoFormatPropertiesKHR* pVideoFormatProperties\n        ', 'name': 'pVideoFormatProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreateVideoSessionKHR(\nVkDevice device,\n const VkVideoSessionCreateInfoKHR* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkVideoSessionKHR* pVideoSession\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkVideoSessionCreateInfoKHR', 'header': 'const VkVideoSessionCreateInfoKHR* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkVideoSessionKHR', 'header': 'VkVideoSessionKHR* pVideoSession\n        ', 'name': 'pVideoSession'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkDestroyVideoSessionKHR(\nVkDevice device,\n VkVideoSessionKHR videoSession,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkVideoSessionKHR', 'header': 'VkVideoSessionKHR videoSession\n            ', 'name': 'videoSession'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreateVideoSessionParametersKHR(\nVkDevice device,\n const VkVideoSessionParametersCreateInfoKHR* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkVideoSessionParametersKHR* pVideoSessionParameters\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkVideoSessionParametersCreateInfoKHR', 'header': 'const VkVideoSessionParametersCreateInfoKHR* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkVideoSessionParametersKHR', 'header': 'VkVideoSessionParametersKHR* pVideoSessionParameters\n        ', 'name': 'pVideoSessionParameters'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkUpdateVideoSessionParametersKHR(\nVkDevice device,\n VkVideoSessionParametersKHR videoSessionParameters,\n const VkVideoSessionParametersUpdateInfoKHR* pUpdateInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkVideoSessionParametersKHR', 'header': 'VkVideoSessionParametersKHR videoSessionParameters\n            ', 'name': 'videoSessionParameters'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkVideoSessionParametersUpdateInfoKHR', 'header': 'const VkVideoSessionParametersUpdateInfoKHR* pUpdateInfo\n        ', 'name': 'pUpdateInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkDestroyVideoSessionParametersKHR(\nVkDevice device,\n VkVideoSessionParametersKHR videoSessionParameters,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkVideoSessionParametersKHR', 'header': 'VkVideoSessionParametersKHR videoSessionParameters\n            ', 'name': 'videoSessionParameters'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetVideoSessionMemoryRequirementsKHR(\nVkDevice device,\n VkVideoSessionKHR videoSession,\n uint32_t* pMemoryRequirementsCount,\n VkVideoSessionMemoryRequirementsKHR* pMemoryRequirements\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkVideoSessionKHR', 'header': 'VkVideoSessionKHR videoSession\n            ', 'name': 'videoSession'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pMemoryRequirementsCount\n            ', 'name': 'pMemoryRequirementsCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pMemoryRequirementsCount'], 'type': 'VkVideoSessionMemoryRequirementsKHR', 'header': 'VkVideoSessionMemoryRequirementsKHR* pMemoryRequirements\n        ', 'name': 'pMemoryRequirements'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkBindVideoSessionMemoryKHR(\nVkDevice device,\n VkVideoSessionKHR videoSession,\n uint32_t bindSessionMemoryInfoCount,\n const VkBindVideoSessionMemoryInfoKHR* pBindSessionMemoryInfos\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkVideoSessionKHR', 'header': 'VkVideoSessionKHR videoSession\n            ', 'name': 'videoSession'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t bindSessionMemoryInfoCount\n            ', 'name': 'bindSessionMemoryInfoCount'}, {'const': True, 'num_indirection': 1, 'length': ['bindSessionMemoryInfoCount'], 'type': 'VkBindVideoSessionMemoryInfoKHR', 'header': 'const VkBindVideoSessionMemoryInfoKHR* pBindSessionMemoryInfos\n        ', 'name': 'pBindSessionMemoryInfos'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdDecodeVideoKHR(\nVkCommandBuffer commandBuffer,\n const VkVideoDecodeInfoKHR* pDecodeInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkVideoDecodeInfoKHR', 'header': 'const VkVideoDecodeInfoKHR* pDecodeInfo\n        ', 'name': 'pDecodeInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdBeginVideoCodingKHR(\nVkCommandBuffer commandBuffer,\n const VkVideoBeginCodingInfoKHR* pBeginInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkVideoBeginCodingInfoKHR', 'header': 'const VkVideoBeginCodingInfoKHR* pBeginInfo\n        ', 'name': 'pBeginInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdControlVideoCodingKHR(\nVkCommandBuffer commandBuffer,\n const VkVideoCodingControlInfoKHR* pCodingControlInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkVideoCodingControlInfoKHR', 'header': 'const VkVideoCodingControlInfoKHR* pCodingControlInfo\n        ', 'name': 'pCodingControlInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdEndVideoCodingKHR(\nVkCommandBuffer commandBuffer,\n const VkVideoEndCodingInfoKHR* pEndCodingInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkVideoEndCodingInfoKHR', 'header': 'const VkVideoEndCodingInfoKHR* pEndCodingInfo\n        ', 'name': 'pEndCodingInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdDecompressMemoryNV(\nVkCommandBuffer commandBuffer,\n uint32_t decompressRegionCount,\n const VkDecompressMemoryRegionNV* pDecompressMemoryRegions\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t decompressRegionCount\n            ', 'name': 'decompressRegionCount'}, {'const': True, 'num_indirection': 1, 'length': ['decompressRegionCount'], 'type': 'VkDecompressMemoryRegionNV', 'header': 'const VkDecompressMemoryRegionNV* pDecompressMemoryRegions\n        ', 'name': 'pDecompressMemoryRegions'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdDecompressMemoryIndirectCountNV(\nVkCommandBuffer commandBuffer,\n VkDeviceAddress indirectCommandsAddress,\n VkDeviceAddress indirectCommandsCountAddress,\n uint32_t stride\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceAddress', 'header': 'VkDeviceAddress indirectCommandsAddress\n            ', 'name': 'indirectCommandsAddress'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceAddress', 'header': 'VkDeviceAddress indirectCommandsCountAddress\n            ', 'name': 'indirectCommandsCountAddress'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t stride\n        ', 'name': 'stride'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreateCuModuleNVX(\nVkDevice device,\n const VkCuModuleCreateInfoNVX* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkCuModuleNVX* pModule\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCuModuleCreateInfoNVX', 'header': 'const VkCuModuleCreateInfoNVX* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkCuModuleNVX', 'header': 'VkCuModuleNVX* pModule\n        ', 'name': 'pModule'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreateCuFunctionNVX(\nVkDevice device,\n const VkCuFunctionCreateInfoNVX* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkCuFunctionNVX* pFunction\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCuFunctionCreateInfoNVX', 'header': 'const VkCuFunctionCreateInfoNVX* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkCuFunctionNVX', 'header': 'VkCuFunctionNVX* pFunction\n        ', 'name': 'pFunction'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkDestroyCuModuleNVX(\nVkDevice device,\n VkCuModuleNVX module,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCuModuleNVX', 'header': 'VkCuModuleNVX module\n            ', 'name': 'module'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkDestroyCuFunctionNVX(\nVkDevice device,\n VkCuFunctionNVX function,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCuFunctionNVX', 'header': 'VkCuFunctionNVX function\n            ', 'name': 'function'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdCuLaunchKernelNVX(\nVkCommandBuffer commandBuffer,\n const VkCuLaunchInfoNVX* pLaunchInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCuLaunchInfoNVX', 'header': 'const VkCuLaunchInfoNVX* pLaunchInfo\n        ', 'name': 'pLaunchInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetDescriptorSetLayoutSizeEXT(\nVkDevice device,\n VkDescriptorSetLayout layout,\n VkDeviceSize* pLayoutSizeInBytes\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDescriptorSetLayout', 'header': 'VkDescriptorSetLayout layout\n            ', 'name': 'layout'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize* pLayoutSizeInBytes\n        ', 'name': 'pLayoutSizeInBytes'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetDescriptorSetLayoutBindingOffsetEXT(\nVkDevice device,\n VkDescriptorSetLayout layout,\n uint32_t binding,\n VkDeviceSize* pOffset\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDescriptorSetLayout', 'header': 'VkDescriptorSetLayout layout\n            ', 'name': 'layout'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t binding\n            ', 'name': 'binding'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkDeviceSize', 'header': 'VkDeviceSize* pOffset\n        ', 'name': 'pOffset'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetDescriptorEXT(\nVkDevice device,\n const VkDescriptorGetInfoEXT* pDescriptorInfo,\n size_t dataSize,\n void* pDescriptor\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDescriptorGetInfoEXT', 'header': 'const VkDescriptorGetInfoEXT* pDescriptorInfo\n            ', 'name': 'pDescriptorInfo'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'size_t', 'header': 'size_t dataSize\n            ', 'name': 'dataSize'}, {'const': False, 'num_indirection': 1, 'length': ['dataSize'], 'type': 'void', 'header': 'void* pDescriptor\n        ', 'name': 'pDescriptor'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdBindDescriptorBuffersEXT(\nVkCommandBuffer commandBuffer,\n uint32_t bufferCount,\n const VkDescriptorBufferBindingInfoEXT* pBindingInfos\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t bufferCount\n            ', 'name': 'bufferCount'}, {'const': True, 'num_indirection': 1, 'length': ['bufferCount'], 'type': 'VkDescriptorBufferBindingInfoEXT', 'header': 'const VkDescriptorBufferBindingInfoEXT* pBindingInfos\n        ', 'name': 'pBindingInfos'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetDescriptorBufferOffsetsEXT(\nVkCommandBuffer commandBuffer,\n VkPipelineBindPoint pipelineBindPoint,\n VkPipelineLayout layout,\n uint32_t firstSet,\n uint32_t setCount,\n const uint32_t* pBufferIndices,\n const VkDeviceSize* pOffsets\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineBindPoint', 'header': 'VkPipelineBindPoint pipelineBindPoint\n            ', 'name': 'pipelineBindPoint'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineLayout', 'header': 'VkPipelineLayout layout\n            ', 'name': 'layout'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstSet\n            ', 'name': 'firstSet'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t setCount\n            ', 'name': 'setCount'}, {'const': True, 'num_indirection': 1, 'length': ['setCount'], 'type': 'uint32_t', 'header': 'const uint32_t* pBufferIndices\n            ', 'name': 'pBufferIndices'}, {'const': True, 'num_indirection': 1, 'length': ['setCount'], 'type': 'VkDeviceSize', 'header': 'const VkDeviceSize* pOffsets\n        ', 'name': 'pOffsets'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdBindDescriptorBufferEmbeddedSamplersEXT(\nVkCommandBuffer commandBuffer,\n VkPipelineBindPoint pipelineBindPoint,\n VkPipelineLayout layout,\n uint32_t set\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineBindPoint', 'header': 'VkPipelineBindPoint pipelineBindPoint\n            ', 'name': 'pipelineBindPoint'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPipelineLayout', 'header': 'VkPipelineLayout layout\n            ', 'name': 'layout'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t set\n        ', 'name': 'set'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetBufferOpaqueCaptureDescriptorDataEXT(\nVkDevice device,\n const VkBufferCaptureDescriptorDataInfoEXT* pInfo,\n void* pData\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkBufferCaptureDescriptorDataInfoEXT', 'header': 'const VkBufferCaptureDescriptorDataInfoEXT* pInfo\n            ', 'name': 'pInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'void', 'header': 'void* pData\n        ', 'name': 'pData'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetImageOpaqueCaptureDescriptorDataEXT(\nVkDevice device,\n const VkImageCaptureDescriptorDataInfoEXT* pInfo,\n void* pData\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkImageCaptureDescriptorDataInfoEXT', 'header': 'const VkImageCaptureDescriptorDataInfoEXT* pInfo\n            ', 'name': 'pInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'void', 'header': 'void* pData\n        ', 'name': 'pData'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetImageViewOpaqueCaptureDescriptorDataEXT(\nVkDevice device,\n const VkImageViewCaptureDescriptorDataInfoEXT* pInfo,\n void* pData\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkImageViewCaptureDescriptorDataInfoEXT', 'header': 'const VkImageViewCaptureDescriptorDataInfoEXT* pInfo\n            ', 'name': 'pInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'void', 'header': 'void* pData\n        ', 'name': 'pData'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetSamplerOpaqueCaptureDescriptorDataEXT(\nVkDevice device,\n const VkSamplerCaptureDescriptorDataInfoEXT* pInfo,\n void* pData\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkSamplerCaptureDescriptorDataInfoEXT', 'header': 'const VkSamplerCaptureDescriptorDataInfoEXT* pInfo\n            ', 'name': 'pInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'void', 'header': 'void* pData\n        ', 'name': 'pData'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT(\nVkDevice device,\n const VkAccelerationStructureCaptureDescriptorDataInfoEXT* pInfo,\n void* pData\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAccelerationStructureCaptureDescriptorDataInfoEXT', 'header': 'const VkAccelerationStructureCaptureDescriptorDataInfoEXT* pInfo\n            ', 'name': 'pInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'void', 'header': 'void* pData\n        ', 'name': 'pData'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkSetDeviceMemoryPriorityEXT(\nVkDevice       device,\n VkDeviceMemory memory,\n float          priority\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice       device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeviceMemory', 'header': 'VkDeviceMemory memory\n            ', 'name': 'memory'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'float', 'header': 'float          priority\n        ', 'name': 'priority'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkAcquireDrmDisplayEXT(\nVkPhysicalDevice physicalDevice,\n int32_t drmFd,\n VkDisplayKHR display\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'int32_t', 'header': 'int32_t drmFd\n            ', 'name': 'drmFd'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDisplayKHR', 'header': 'VkDisplayKHR display\n        ', 'name': 'display'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetDrmDisplayEXT(\nVkPhysicalDevice physicalDevice,\n int32_t drmFd,\n uint32_t connectorId,\n VkDisplayKHR* display\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'int32_t', 'header': 'int32_t drmFd\n            ', 'name': 'drmFd'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t connectorId\n            ', 'name': 'connectorId'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkDisplayKHR', 'header': 'VkDisplayKHR* display\n        ', 'name': 'display'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkWaitForPresentKHR(\nVkDevice device,\n VkSwapchainKHR swapchain,\n uint64_t presentId,\n uint64_t timeout\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkSwapchainKHR', 'header': 'VkSwapchainKHR swapchain\n            ', 'name': 'swapchain'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint64_t', 'header': 'uint64_t presentId\n            ', 'name': 'presentId'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint64_t', 'header': 'uint64_t timeout\n        ', 'name': 'timeout'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdBeginRendering(\nVkCommandBuffer                   commandBuffer,\n const VkRenderingInfo*                              pRenderingInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer                   commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkRenderingInfo', 'header': 'const VkRenderingInfo*                              pRenderingInfo\n        ', 'name': 'pRenderingInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdBeginRenderingKHR(\nVkCommandBuffer                   commandBuffer,\n const VkRenderingInfo*                              pRenderingInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer                   commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkRenderingInfo', 'header': 'const VkRenderingInfo*                              pRenderingInfo\n        ', 'name': 'pRenderingInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdEndRendering(\nVkCommandBuffer                   commandBuffer\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer                   commandBuffer\n        ', 'name': 'commandBuffer'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdEndRenderingKHR(\nVkCommandBuffer                   commandBuffer\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer                   commandBuffer\n        ', 'name': 'commandBuffer'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetDescriptorSetLayoutHostMappingInfoVALVE(\nVkDevice device,\n const VkDescriptorSetBindingReferenceVALVE* pBindingReference,\n VkDescriptorSetLayoutHostMappingInfoVALVE* pHostMapping\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDescriptorSetBindingReferenceVALVE', 'header': 'const VkDescriptorSetBindingReferenceVALVE* pBindingReference\n            ', 'name': 'pBindingReference'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkDescriptorSetLayoutHostMappingInfoVALVE', 'header': 'VkDescriptorSetLayoutHostMappingInfoVALVE* pHostMapping\n        ', 'name': 'pHostMapping'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetDescriptorSetHostMappingVALVE(\nVkDevice device,\n VkDescriptorSet descriptorSet,\n void** ppData\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDescriptorSet', 'header': 'VkDescriptorSet descriptorSet\n            ', 'name': 'descriptorSet'}, {'const': False, 'num_indirection': 2, 'length': [''], 'type': 'void', 'header': 'void** ppData\n        ', 'name': 'ppData'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreateMicromapEXT(\nVkDevice                                           device,\n const VkMicromapCreateInfoEXT*        pCreateInfo,\n const VkAllocationCallbacks*       pAllocator,\n VkMicromapEXT*                        pMicromap\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice                                           device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkMicromapCreateInfoEXT', 'header': 'const VkMicromapCreateInfoEXT*        pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks*       pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkMicromapEXT', 'header': 'VkMicromapEXT*                        pMicromap\n        ', 'name': 'pMicromap'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdBuildMicromapsEXT(\nVkCommandBuffer                                    commandBuffer,\n uint32_t infoCount,\n const VkMicromapBuildInfoEXT* pInfos\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer                                    commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t infoCount\n            ', 'name': 'infoCount'}, {'const': True, 'num_indirection': 1, 'length': ['infoCount'], 'type': 'VkMicromapBuildInfoEXT', 'header': 'const VkMicromapBuildInfoEXT* pInfos\n        ', 'name': 'pInfos'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkBuildMicromapsEXT(\nVkDevice                                           device,\n VkDeferredOperationKHR deferredOperation,\n uint32_t infoCount,\n const VkMicromapBuildInfoEXT* pInfos\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice                                           device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeferredOperationKHR', 'header': 'VkDeferredOperationKHR deferredOperation\n            ', 'name': 'deferredOperation'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t infoCount\n            ', 'name': 'infoCount'}, {'const': True, 'num_indirection': 1, 'length': ['infoCount'], 'type': 'VkMicromapBuildInfoEXT', 'header': 'const VkMicromapBuildInfoEXT* pInfos\n        ', 'name': 'pInfos'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkDestroyMicromapEXT(\nVkDevice device,\n VkMicromapEXT micromap,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkMicromapEXT', 'header': 'VkMicromapEXT micromap\n            ', 'name': 'micromap'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdCopyMicromapEXT(\nVkCommandBuffer commandBuffer,\n const VkCopyMicromapInfoEXT* pInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCopyMicromapInfoEXT', 'header': 'const VkCopyMicromapInfoEXT* pInfo\n        ', 'name': 'pInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCopyMicromapEXT(\nVkDevice device,\n VkDeferredOperationKHR deferredOperation,\n const VkCopyMicromapInfoEXT* pInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeferredOperationKHR', 'header': 'VkDeferredOperationKHR deferredOperation\n            ', 'name': 'deferredOperation'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCopyMicromapInfoEXT', 'header': 'const VkCopyMicromapInfoEXT* pInfo\n        ', 'name': 'pInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdCopyMicromapToMemoryEXT(\nVkCommandBuffer commandBuffer,\n const VkCopyMicromapToMemoryInfoEXT* pInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCopyMicromapToMemoryInfoEXT', 'header': 'const VkCopyMicromapToMemoryInfoEXT* pInfo\n        ', 'name': 'pInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCopyMicromapToMemoryEXT(\nVkDevice device,\n VkDeferredOperationKHR deferredOperation,\n const VkCopyMicromapToMemoryInfoEXT* pInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeferredOperationKHR', 'header': 'VkDeferredOperationKHR deferredOperation\n            ', 'name': 'deferredOperation'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCopyMicromapToMemoryInfoEXT', 'header': 'const VkCopyMicromapToMemoryInfoEXT* pInfo\n        ', 'name': 'pInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdCopyMemoryToMicromapEXT(\nVkCommandBuffer commandBuffer,\n const VkCopyMemoryToMicromapInfoEXT* pInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCopyMemoryToMicromapInfoEXT', 'header': 'const VkCopyMemoryToMicromapInfoEXT* pInfo\n        ', 'name': 'pInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCopyMemoryToMicromapEXT(\nVkDevice device,\n VkDeferredOperationKHR deferredOperation,\n const VkCopyMemoryToMicromapInfoEXT* pInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDeferredOperationKHR', 'header': 'VkDeferredOperationKHR deferredOperation\n            ', 'name': 'deferredOperation'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkCopyMemoryToMicromapInfoEXT', 'header': 'const VkCopyMemoryToMicromapInfoEXT* pInfo\n        ', 'name': 'pInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdWriteMicromapsPropertiesEXT(\nVkCommandBuffer commandBuffer,\n uint32_t micromapCount,\n const VkMicromapEXT* pMicromaps,\n VkQueryType queryType,\n VkQueryPool queryPool,\n uint32_t firstQuery\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t micromapCount\n            ', 'name': 'micromapCount'}, {'const': True, 'num_indirection': 1, 'length': ['micromapCount'], 'type': 'VkMicromapEXT', 'header': 'const VkMicromapEXT* pMicromaps\n            ', 'name': 'pMicromaps'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryType', 'header': 'VkQueryType queryType\n            ', 'name': 'queryType'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryPool', 'header': 'VkQueryPool queryPool\n            ', 'name': 'queryPool'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t firstQuery\n        ', 'name': 'firstQuery'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkWriteMicromapsPropertiesEXT(\nVkDevice device,\n uint32_t micromapCount,\n const VkMicromapEXT* pMicromaps,\n VkQueryType  queryType,\n size_t       dataSize,\n void* pData,\n size_t stride\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t micromapCount\n            ', 'name': 'micromapCount'}, {'const': True, 'num_indirection': 1, 'length': ['micromapCount'], 'type': 'VkMicromapEXT', 'header': 'const VkMicromapEXT* pMicromaps\n            ', 'name': 'pMicromaps'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkQueryType', 'header': 'VkQueryType  queryType\n            ', 'name': 'queryType'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'size_t', 'header': 'size_t       dataSize\n            ', 'name': 'dataSize'}, {'const': False, 'num_indirection': 1, 'length': ['dataSize'], 'type': 'void', 'header': 'void* pData\n            ', 'name': 'pData'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'size_t', 'header': 'size_t stride\n        ', 'name': 'stride'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetDeviceMicromapCompatibilityEXT(\nVkDevice device,\n const VkMicromapVersionInfoEXT* pVersionInfo,\n VkAccelerationStructureCompatibilityKHR* pCompatibility\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkMicromapVersionInfoEXT', 'header': 'const VkMicromapVersionInfoEXT* pVersionInfo\n            ', 'name': 'pVersionInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkAccelerationStructureCompatibilityKHR', 'header': 'VkAccelerationStructureCompatibilityKHR* pCompatibility\n        ', 'name': 'pCompatibility'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetMicromapBuildSizesEXT(\nVkDevice                                            device,\n VkAccelerationStructureBuildTypeKHR                 buildType,\n const VkMicromapBuildInfoEXT*  pBuildInfo,\n VkMicromapBuildSizesInfoEXT*           pSizeInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice                                            device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkAccelerationStructureBuildTypeKHR', 'header': 'VkAccelerationStructureBuildTypeKHR                 buildType\n            ', 'name': 'buildType'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkMicromapBuildInfoEXT', 'header': 'const VkMicromapBuildInfoEXT*  pBuildInfo\n            ', 'name': 'pBuildInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkMicromapBuildSizesInfoEXT', 'header': 'VkMicromapBuildSizesInfoEXT*           pSizeInfo\n        ', 'name': 'pSizeInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetShaderModuleIdentifierEXT(\nVkDevice device,\n VkShaderModule shaderModule,\n VkShaderModuleIdentifierEXT* pIdentifier\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkShaderModule', 'header': 'VkShaderModule shaderModule\n            ', 'name': 'shaderModule'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkShaderModuleIdentifierEXT', 'header': 'VkShaderModuleIdentifierEXT* pIdentifier\n        ', 'name': 'pIdentifier'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetShaderModuleCreateInfoIdentifierEXT(\nVkDevice device,\n const VkShaderModuleCreateInfo* pCreateInfo,\n VkShaderModuleIdentifierEXT* pIdentifier\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkShaderModuleCreateInfo', 'header': 'const VkShaderModuleCreateInfo* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkShaderModuleIdentifierEXT', 'header': 'VkShaderModuleIdentifierEXT* pIdentifier\n        ', 'name': 'pIdentifier'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetImageSubresourceLayout2KHR(\nVkDevice device,\n VkImage image,\n const VkImageSubresource2KHR* pSubresource,\n VkSubresourceLayout2KHR* pLayout\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImage', 'header': 'VkImage image\n            ', 'name': 'image'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkImageSubresource2KHR', 'header': 'const VkImageSubresource2KHR* pSubresource\n            ', 'name': 'pSubresource'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkSubresourceLayout2KHR', 'header': 'VkSubresourceLayout2KHR* pLayout\n        ', 'name': 'pLayout'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetImageSubresourceLayout2EXT(\nVkDevice device,\n VkImage image,\n const VkImageSubresource2KHR* pSubresource,\n VkSubresourceLayout2KHR* pLayout\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImage', 'header': 'VkImage image\n            ', 'name': 'image'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkImageSubresource2KHR', 'header': 'const VkImageSubresource2KHR* pSubresource\n            ', 'name': 'pSubresource'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkSubresourceLayout2KHR', 'header': 'VkSubresourceLayout2KHR* pLayout\n        ', 'name': 'pLayout'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetPipelinePropertiesEXT(\nVkDevice device,\n const VkPipelineInfoEXT* pPipelineInfo,\n VkBaseOutStructure* pPipelineProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkPipelineInfoEXT', 'header': 'const VkPipelineInfoEXT* pPipelineInfo\n            ', 'name': 'pPipelineInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkBaseOutStructure', 'header': 'VkBaseOutStructure* pPipelineProperties\n        ', 'name': 'pPipelineProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetFramebufferTilePropertiesQCOM(\nVkDevice device,\n VkFramebuffer framebuffer,\n uint32_t* pPropertiesCount,\n VkTilePropertiesQCOM* pProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkFramebuffer', 'header': 'VkFramebuffer framebuffer\n            ', 'name': 'framebuffer'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pPropertiesCount\n            ', 'name': 'pPropertiesCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pPropertiesCount'], 'type': 'VkTilePropertiesQCOM', 'header': 'VkTilePropertiesQCOM* pProperties\n        ', 'name': 'pProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetDynamicRenderingTilePropertiesQCOM(\nVkDevice device,\n const VkRenderingInfo* pRenderingInfo,\n VkTilePropertiesQCOM* pProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkRenderingInfo', 'header': 'const VkRenderingInfo* pRenderingInfo\n            ', 'name': 'pRenderingInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkTilePropertiesQCOM', 'header': 'VkTilePropertiesQCOM* pProperties\n        ', 'name': 'pProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetPhysicalDeviceOpticalFlowImageFormatsNV(\nVkPhysicalDevice physicalDevice,\n const VkOpticalFlowImageFormatInfoNV* pOpticalFlowImageFormatInfo,\n uint32_t* pFormatCount,\n VkOpticalFlowImageFormatPropertiesNV* pImageFormatProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkOpticalFlowImageFormatInfoNV', 'header': 'const VkOpticalFlowImageFormatInfoNV* pOpticalFlowImageFormatInfo\n            ', 'name': 'pOpticalFlowImageFormatInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pFormatCount\n            ', 'name': 'pFormatCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pFormatCount'], 'type': 'VkOpticalFlowImageFormatPropertiesNV', 'header': 'VkOpticalFlowImageFormatPropertiesNV* pImageFormatProperties\n        ', 'name': 'pImageFormatProperties'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreateOpticalFlowSessionNV(\nVkDevice device,\n const VkOpticalFlowSessionCreateInfoNV* pCreateInfo,\n const VkAllocationCallbacks* pAllocator,\n VkOpticalFlowSessionNV* pSession\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkOpticalFlowSessionCreateInfoNV', 'header': 'const VkOpticalFlowSessionCreateInfoNV* pCreateInfo\n            ', 'name': 'pCreateInfo'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkOpticalFlowSessionNV', 'header': 'VkOpticalFlowSessionNV* pSession\n        ', 'name': 'pSession'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkDestroyOpticalFlowSessionNV(\nVkDevice device,\n VkOpticalFlowSessionNV session,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkOpticalFlowSessionNV', 'header': 'VkOpticalFlowSessionNV session\n            ', 'name': 'session'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkBindOpticalFlowSessionImageNV(\nVkDevice device,\n VkOpticalFlowSessionNV session,\n VkOpticalFlowSessionBindingPointNV bindingPoint,\n VkImageView view,\n VkImageLayout layout\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkOpticalFlowSessionNV', 'header': 'VkOpticalFlowSessionNV session\n            ', 'name': 'session'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkOpticalFlowSessionBindingPointNV', 'header': 'VkOpticalFlowSessionBindingPointNV bindingPoint\n            ', 'name': 'bindingPoint'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageView', 'header': 'VkImageView view\n            ', 'name': 'view'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkImageLayout', 'header': 'VkImageLayout layout\n        ', 'name': 'layout'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdOpticalFlowExecuteNV(\nVkCommandBuffer commandBuffer,\n VkOpticalFlowSessionNV session,\n const VkOpticalFlowExecuteInfoNV* pExecuteInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkOpticalFlowSessionNV', 'header': 'VkOpticalFlowSessionNV session\n            ', 'name': 'session'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkOpticalFlowExecuteInfoNV', 'header': 'const VkOpticalFlowExecuteInfoNV* pExecuteInfo\n        ', 'name': 'pExecuteInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetDeviceFaultInfoEXT(\nVkDevice device,\n VkDeviceFaultCountsEXT* pFaultCounts,\n VkDeviceFaultInfoEXT* pFaultInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkDeviceFaultCountsEXT', 'header': 'VkDeviceFaultCountsEXT* pFaultCounts\n            ', 'name': 'pFaultCounts'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkDeviceFaultInfoEXT', 'header': 'VkDeviceFaultInfoEXT* pFaultInfo\n        ', 'name': 'pFaultInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdSetDepthBias2EXT(\nVkCommandBuffer commandBuffer,\n const VkDepthBiasInfoEXT*         pDepthBiasInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDepthBiasInfoEXT', 'header': 'const VkDepthBiasInfoEXT*         pDepthBiasInfo\n        ', 'name': 'pDepthBiasInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkReleaseSwapchainImagesEXT(\nVkDevice device,\n const VkReleaseSwapchainImagesInfoEXT* pReleaseInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkReleaseSwapchainImagesInfoEXT', 'header': 'const VkReleaseSwapchainImagesInfoEXT* pReleaseInfo\n        ', 'name': 'pReleaseInfo'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkGetDeviceImageSubresourceLayoutKHR(\nVkDevice device,\n const VkDeviceImageSubresourceInfoKHR* pInfo,\n VkSubresourceLayout2KHR* pLayout\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkDeviceImageSubresourceInfoKHR', 'header': 'const VkDeviceImageSubresourceInfoKHR* pInfo\n            ', 'name': 'pInfo'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'VkSubresourceLayout2KHR', 'header': 'VkSubresourceLayout2KHR* pLayout\n        ', 'name': 'pLayout'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkMapMemory2KHR(\nVkDevice device,\n const VkMemoryMapInfoKHR* pMemoryMapInfo,\n void** ppData\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkMemoryMapInfoKHR', 'header': 'const VkMemoryMapInfoKHR* pMemoryMapInfo\n            ', 'name': 'pMemoryMapInfo'}, {'const': False, 'num_indirection': 2, 'length': [''], 'type': 'void', 'header': 'void** ppData\n        ', 'name': 'ppData'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkUnmapMemory2KHR(\nVkDevice device,\n const VkMemoryUnmapInfoKHR* pMemoryUnmapInfo\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkMemoryUnmapInfoKHR', 'header': 'const VkMemoryUnmapInfoKHR* pMemoryUnmapInfo\n        ', 'name': 'pMemoryUnmapInfo'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkCreateShadersEXT(\nVkDevice device,\n uint32_t createInfoCount,\n const VkShaderCreateInfoEXT* pCreateInfos,\n const VkAllocationCallbacks* pAllocator,\n VkShaderEXT* pShaders\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t createInfoCount\n            ', 'name': 'createInfoCount'}, {'const': True, 'num_indirection': 1, 'length': ['createInfoCount'], 'type': 'VkShaderCreateInfoEXT', 'header': 'const VkShaderCreateInfoEXT* pCreateInfos\n            ', 'name': 'pCreateInfos'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n            ', 'name': 'pAllocator'}, {'const': False, 'num_indirection': 1, 'length': ['createInfoCount'], 'type': 'VkShaderEXT', 'header': 'VkShaderEXT* pShaders\n        ', 'name': 'pShaders'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkDestroyShaderEXT(\nVkDevice device,\n VkShaderEXT shader,\n const VkAllocationCallbacks* pAllocator\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkShaderEXT', 'header': 'VkShaderEXT shader\n            ', 'name': 'shader'}, {'const': True, 'num_indirection': 1, 'length': [''], 'type': 'VkAllocationCallbacks', 'header': 'const VkAllocationCallbacks* pAllocator\n        ', 'name': 'pAllocator'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetShaderBinaryDataEXT(\nVkDevice device,\n VkShaderEXT shader,\n size_t* pDataSize,\n void* pData\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkDevice', 'header': 'VkDevice device\n            ', 'name': 'device'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkShaderEXT', 'header': 'VkShaderEXT shader\n            ', 'name': 'shader'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'size_t', 'header': 'size_t* pDataSize\n            ', 'name': 'pDataSize'}, {'const': False, 'num_indirection': 1, 'length': ['*pDataSize'], 'type': 'void', 'header': 'void* pData\n        ', 'name': 'pData'}]}(json data);
void handle_{'sync': False, 'type': 'void', 'num_indirection': 0, 'header': 'void vkCmdBindShadersEXT(\nVkCommandBuffer commandBuffer,\n uint32_t stageCount,\n const VkShaderStageFlagBits* pStages,\n const VkShaderEXT* pShaders\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkCommandBuffer', 'header': 'VkCommandBuffer commandBuffer\n            ', 'name': 'commandBuffer'}, {'const': False, 'num_indirection': 0, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t stageCount\n            ', 'name': 'stageCount'}, {'const': True, 'num_indirection': 1, 'length': ['stageCount'], 'type': 'VkShaderStageFlagBits', 'header': 'const VkShaderStageFlagBits* pStages\n            ', 'name': 'pStages'}, {'const': True, 'num_indirection': 1, 'length': ['stageCount'], 'type': 'VkShaderEXT', 'header': 'const VkShaderEXT* pShaders\n        ', 'name': 'pShaders'}]}(json data);
void handle_{'sync': False, 'type': 'VkResult', 'num_indirection': 0, 'header': 'VkResult vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR(\nVkPhysicalDevice physicalDevice,\n uint32_t* pPropertyCount,\n VkCooperativeMatrixPropertiesKHR* pProperties\n)', 'params': [{'const': False, 'num_indirection': 0, 'length': [''], 'type': 'VkPhysicalDevice', 'header': 'VkPhysicalDevice physicalDevice\n            ', 'name': 'physicalDevice'}, {'const': False, 'num_indirection': 1, 'length': [''], 'type': 'uint32_t', 'header': 'uint32_t* pPropertyCount\n            ', 'name': 'pPropertyCount'}, {'const': False, 'num_indirection': 1, 'length': ['*pPropertyCount'], 'type': 'VkCooperativeMatrixPropertiesKHR', 'header': 'VkCooperativeMatrixPropertiesKHR* pProperties\n        ', 'name': 'pProperties'}]}(json data);
