void handle_command(vkCreateInstance::Reader& reader);
void handle_command(vkDestroyInstance::Reader& reader);
void handle_command(vkEnumeratePhysicalDevices::Reader& reader);
void handle_command(vkGetDeviceProcAddr::Reader& reader);
void handle_command(vkGetInstanceProcAddr::Reader& reader);
void handle_command(vkGetPhysicalDeviceProperties::Reader& reader);
void handle_command(vkGetPhysicalDeviceQueueFamilyProperties::Reader& reader);
void handle_command(vkGetPhysicalDeviceMemoryProperties::Reader& reader);
void handle_command(vkGetPhysicalDeviceFeatures::Reader& reader);
void handle_command(vkGetPhysicalDeviceFormatProperties::Reader& reader);
void handle_command(vkGetPhysicalDeviceImageFormatProperties::Reader& reader);
void handle_command(vkCreateDevice::Reader& reader);
void handle_command(vkDestroyDevice::Reader& reader);
void handle_command(vkEnumerateInstanceVersion::Reader& reader);
void handle_command(vkEnumerateInstanceLayerProperties::Reader& reader);
void handle_command(vkEnumerateInstanceExtensionProperties::Reader& reader);
void handle_command(vkEnumerateDeviceLayerProperties::Reader& reader);
void handle_command(vkEnumerateDeviceExtensionProperties::Reader& reader);
void handle_command(vkGetDeviceQueue::Reader& reader);
void handle_command(vkQueueSubmit::Reader& reader);
void handle_command(vkQueueWaitIdle::Reader& reader);
void handle_command(vkDeviceWaitIdle::Reader& reader);
void handle_command(vkAllocateMemory::Reader& reader);
void handle_command(vkFreeMemory::Reader& reader);
void handle_command(vkMapMemory::Reader& reader);
void handle_command(vkUnmapMemory::Reader& reader);
void handle_command(vkFlushMappedMemoryRanges::Reader& reader);
void handle_command(vkInvalidateMappedMemoryRanges::Reader& reader);
void handle_command(vkGetDeviceMemoryCommitment::Reader& reader);
void handle_command(vkGetBufferMemoryRequirements::Reader& reader);
void handle_command(vkBindBufferMemory::Reader& reader);
void handle_command(vkGetImageMemoryRequirements::Reader& reader);
void handle_command(vkBindImageMemory::Reader& reader);
void handle_command(vkGetImageSparseMemoryRequirements::Reader& reader);
void handle_command(vkGetPhysicalDeviceSparseImageFormatProperties::Reader& reader);
void handle_command(vkQueueBindSparse::Reader& reader);
void handle_command(vkCreateFence::Reader& reader);
void handle_command(vkDestroyFence::Reader& reader);
void handle_command(vkResetFences::Reader& reader);
void handle_command(vkGetFenceStatus::Reader& reader);
void handle_command(vkWaitForFences::Reader& reader);
void handle_command(vkCreateSemaphore::Reader& reader);
void handle_command(vkDestroySemaphore::Reader& reader);
void handle_command(vkCreateEvent::Reader& reader);
void handle_command(vkDestroyEvent::Reader& reader);
void handle_command(vkGetEventStatus::Reader& reader);
void handle_command(vkSetEvent::Reader& reader);
void handle_command(vkResetEvent::Reader& reader);
void handle_command(vkCreateQueryPool::Reader& reader);
void handle_command(vkDestroyQueryPool::Reader& reader);
void handle_command(vkGetQueryPoolResults::Reader& reader);
void handle_command(vkResetQueryPool::Reader& reader);
void handle_command(vkCreateBuffer::Reader& reader);
void handle_command(vkDestroyBuffer::Reader& reader);
void handle_command(vkCreateBufferView::Reader& reader);
void handle_command(vkDestroyBufferView::Reader& reader);
void handle_command(vkCreateImage::Reader& reader);
void handle_command(vkDestroyImage::Reader& reader);
void handle_command(vkGetImageSubresourceLayout::Reader& reader);
void handle_command(vkCreateImageView::Reader& reader);
void handle_command(vkDestroyImageView::Reader& reader);
void handle_command(vkCreateShaderModule::Reader& reader);
void handle_command(vkDestroyShaderModule::Reader& reader);
void handle_command(vkCreatePipelineCache::Reader& reader);
void handle_command(vkDestroyPipelineCache::Reader& reader);
void handle_command(vkGetPipelineCacheData::Reader& reader);
void handle_command(vkMergePipelineCaches::Reader& reader);
void handle_command(vkCreateGraphicsPipelines::Reader& reader);
void handle_command(vkCreateComputePipelines::Reader& reader);
void handle_command(vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI::Reader& reader);
void handle_command(vkDestroyPipeline::Reader& reader);
void handle_command(vkCreatePipelineLayout::Reader& reader);
void handle_command(vkDestroyPipelineLayout::Reader& reader);
void handle_command(vkCreateSampler::Reader& reader);
void handle_command(vkDestroySampler::Reader& reader);
void handle_command(vkCreateDescriptorSetLayout::Reader& reader);
void handle_command(vkDestroyDescriptorSetLayout::Reader& reader);
void handle_command(vkCreateDescriptorPool::Reader& reader);
void handle_command(vkDestroyDescriptorPool::Reader& reader);
void handle_command(vkResetDescriptorPool::Reader& reader);
void handle_command(vkAllocateDescriptorSets::Reader& reader);
void handle_command(vkFreeDescriptorSets::Reader& reader);
void handle_command(vkUpdateDescriptorSets::Reader& reader);
void handle_command(vkCreateFramebuffer::Reader& reader);
void handle_command(vkDestroyFramebuffer::Reader& reader);
void handle_command(vkCreateRenderPass::Reader& reader);
void handle_command(vkDestroyRenderPass::Reader& reader);
void handle_command(vkGetRenderAreaGranularity::Reader& reader);
void handle_command(vkGetRenderingAreaGranularityKHR::Reader& reader);
void handle_command(vkCreateCommandPool::Reader& reader);
void handle_command(vkDestroyCommandPool::Reader& reader);
void handle_command(vkResetCommandPool::Reader& reader);
void handle_command(vkAllocateCommandBuffers::Reader& reader);
void handle_command(vkFreeCommandBuffers::Reader& reader);
void handle_command(vkBeginCommandBuffer::Reader& reader);
void handle_command(vkEndCommandBuffer::Reader& reader);
void handle_command(vkResetCommandBuffer::Reader& reader);
void handle_command(vkCmdBindPipeline::Reader& reader);
void handle_command(vkCmdSetAttachmentFeedbackLoopEnableEXT::Reader& reader);
void handle_command(vkCmdSetViewport::Reader& reader);
void handle_command(vkCmdSetScissor::Reader& reader);
void handle_command(vkCmdSetLineWidth::Reader& reader);
void handle_command(vkCmdSetDepthBias::Reader& reader);
void handle_command(vkCmdSetBlendConstants::Reader& reader);
void handle_command(vkCmdSetDepthBounds::Reader& reader);
void handle_command(vkCmdSetStencilCompareMask::Reader& reader);
void handle_command(vkCmdSetStencilWriteMask::Reader& reader);
void handle_command(vkCmdSetStencilReference::Reader& reader);
void handle_command(vkCmdBindDescriptorSets::Reader& reader);
void handle_command(vkCmdBindIndexBuffer::Reader& reader);
void handle_command(vkCmdBindVertexBuffers::Reader& reader);
void handle_command(vkCmdDraw::Reader& reader);
void handle_command(vkCmdDrawIndexed::Reader& reader);
void handle_command(vkCmdDrawMultiEXT::Reader& reader);
void handle_command(vkCmdDrawMultiIndexedEXT::Reader& reader);
void handle_command(vkCmdDrawIndirect::Reader& reader);
void handle_command(vkCmdDrawIndexedIndirect::Reader& reader);
void handle_command(vkCmdDispatch::Reader& reader);
void handle_command(vkCmdDispatchIndirect::Reader& reader);
void handle_command(vkCmdSubpassShadingHUAWEI::Reader& reader);
void handle_command(vkCmdDrawClusterHUAWEI::Reader& reader);
void handle_command(vkCmdDrawClusterIndirectHUAWEI::Reader& reader);
void handle_command(vkCmdUpdatePipelineIndirectBufferNV::Reader& reader);
void handle_command(vkCmdCopyBuffer::Reader& reader);
void handle_command(vkCmdCopyImage::Reader& reader);
void handle_command(vkCmdBlitImage::Reader& reader);
void handle_command(vkCmdCopyBufferToImage::Reader& reader);
void handle_command(vkCmdCopyImageToBuffer::Reader& reader);
void handle_command(vkCmdCopyMemoryIndirectNV::Reader& reader);
void handle_command(vkCmdCopyMemoryToImageIndirectNV::Reader& reader);
void handle_command(vkCmdUpdateBuffer::Reader& reader);
void handle_command(vkCmdFillBuffer::Reader& reader);
void handle_command(vkCmdClearColorImage::Reader& reader);
void handle_command(vkCmdClearDepthStencilImage::Reader& reader);
void handle_command(vkCmdClearAttachments::Reader& reader);
void handle_command(vkCmdResolveImage::Reader& reader);
void handle_command(vkCmdSetEvent::Reader& reader);
void handle_command(vkCmdResetEvent::Reader& reader);
void handle_command(vkCmdWaitEvents::Reader& reader);
void handle_command(vkCmdPipelineBarrier::Reader& reader);
void handle_command(vkCmdBeginQuery::Reader& reader);
void handle_command(vkCmdEndQuery::Reader& reader);
void handle_command(vkCmdBeginConditionalRenderingEXT::Reader& reader);
void handle_command(vkCmdEndConditionalRenderingEXT::Reader& reader);
void handle_command(vkCmdResetQueryPool::Reader& reader);
void handle_command(vkCmdWriteTimestamp::Reader& reader);
void handle_command(vkCmdCopyQueryPoolResults::Reader& reader);
void handle_command(vkCmdPushConstants::Reader& reader);
void handle_command(vkCmdBeginRenderPass::Reader& reader);
void handle_command(vkCmdNextSubpass::Reader& reader);
void handle_command(vkCmdEndRenderPass::Reader& reader);
void handle_command(vkCmdExecuteCommands::Reader& reader);
void handle_command(vkGetPhysicalDeviceDisplayPropertiesKHR::Reader& reader);
void handle_command(vkGetPhysicalDeviceDisplayPlanePropertiesKHR::Reader& reader);
void handle_command(vkGetDisplayPlaneSupportedDisplaysKHR::Reader& reader);
void handle_command(vkGetDisplayModePropertiesKHR::Reader& reader);
void handle_command(vkCreateDisplayModeKHR::Reader& reader);
void handle_command(vkGetDisplayPlaneCapabilitiesKHR::Reader& reader);
void handle_command(vkCreateDisplayPlaneSurfaceKHR::Reader& reader);
void handle_command(vkCreateSharedSwapchainsKHR::Reader& reader);
void handle_command(vkDestroySurfaceKHR::Reader& reader);
void handle_command(vkGetPhysicalDeviceSurfaceSupportKHR::Reader& reader);
void handle_command(vkGetPhysicalDeviceSurfaceCapabilitiesKHR::Reader& reader);
void handle_command(vkGetPhysicalDeviceSurfaceFormatsKHR::Reader& reader);
void handle_command(vkGetPhysicalDeviceSurfacePresentModesKHR::Reader& reader);
void handle_command(vkCreateSwapchainKHR::Reader& reader);
void handle_command(vkDestroySwapchainKHR::Reader& reader);
void handle_command(vkGetSwapchainImagesKHR::Reader& reader);
void handle_command(vkAcquireNextImageKHR::Reader& reader);
void handle_command(vkQueuePresentKHR::Reader& reader);
void handle_command(vkCreateXlibSurfaceKHR::Reader& reader);
void handle_command(vkGetPhysicalDeviceXlibPresentationSupportKHR::Reader& reader);
void handle_command(vkCreateXcbSurfaceKHR::Reader& reader);
void handle_command(vkGetPhysicalDeviceXcbPresentationSupportKHR::Reader& reader);
void handle_command(vkCreateDebugReportCallbackEXT::Reader& reader);
void handle_command(vkDestroyDebugReportCallbackEXT::Reader& reader);
void handle_command(vkDebugReportMessageEXT::Reader& reader);
void handle_command(vkDebugMarkerSetObjectNameEXT::Reader& reader);
void handle_command(vkDebugMarkerSetObjectTagEXT::Reader& reader);
void handle_command(vkCmdDebugMarkerBeginEXT::Reader& reader);
void handle_command(vkCmdDebugMarkerEndEXT::Reader& reader);
void handle_command(vkCmdDebugMarkerInsertEXT::Reader& reader);
void handle_command(vkGetPhysicalDeviceExternalImageFormatPropertiesNV::Reader& reader);
void handle_command(vkCmdExecuteGeneratedCommandsNV::Reader& reader);
void handle_command(vkCmdPreprocessGeneratedCommandsNV::Reader& reader);
void handle_command(vkCmdBindPipelineShaderGroupNV::Reader& reader);
void handle_command(vkGetGeneratedCommandsMemoryRequirementsNV::Reader& reader);
void handle_command(vkCreateIndirectCommandsLayoutNV::Reader& reader);
void handle_command(vkDestroyIndirectCommandsLayoutNV::Reader& reader);
void handle_command(vkGetPhysicalDeviceFeatures2::Reader& reader);
void handle_command(vkGetPhysicalDeviceProperties2::Reader& reader);
void handle_command(vkGetPhysicalDeviceFormatProperties2::Reader& reader);
void handle_command(vkGetPhysicalDeviceImageFormatProperties2::Reader& reader);
void handle_command(vkGetPhysicalDeviceQueueFamilyProperties2::Reader& reader);
void handle_command(vkGetPhysicalDeviceMemoryProperties2::Reader& reader);
void handle_command(vkGetPhysicalDeviceSparseImageFormatProperties2::Reader& reader);
void handle_command(vkCmdPushDescriptorSetKHR::Reader& reader);
void handle_command(vkTrimCommandPool::Reader& reader);
void handle_command(vkGetPhysicalDeviceExternalBufferProperties::Reader& reader);
void handle_command(vkGetMemoryFdKHR::Reader& reader);
void handle_command(vkGetMemoryFdPropertiesKHR::Reader& reader);
void handle_command(vkGetMemoryRemoteAddressNV::Reader& reader);
void handle_command(vkGetPhysicalDeviceExternalSemaphoreProperties::Reader& reader);
void handle_command(vkGetSemaphoreFdKHR::Reader& reader);
void handle_command(vkImportSemaphoreFdKHR::Reader& reader);
void handle_command(vkGetPhysicalDeviceExternalFenceProperties::Reader& reader);
void handle_command(vkGetFenceFdKHR::Reader& reader);
void handle_command(vkImportFenceFdKHR::Reader& reader);
void handle_command(vkReleaseDisplayEXT::Reader& reader);
void handle_command(vkDisplayPowerControlEXT::Reader& reader);
void handle_command(vkRegisterDeviceEventEXT::Reader& reader);
void handle_command(vkRegisterDisplayEventEXT::Reader& reader);
void handle_command(vkGetSwapchainCounterEXT::Reader& reader);
void handle_command(vkGetPhysicalDeviceSurfaceCapabilities2EXT::Reader& reader);
void handle_command(vkEnumeratePhysicalDeviceGroups::Reader& reader);
void handle_command(vkGetDeviceGroupPeerMemoryFeatures::Reader& reader);
void handle_command(vkBindBufferMemory2::Reader& reader);
void handle_command(vkBindImageMemory2::Reader& reader);
void handle_command(vkCmdSetDeviceMask::Reader& reader);
void handle_command(vkGetDeviceGroupPresentCapabilitiesKHR::Reader& reader);
void handle_command(vkGetDeviceGroupSurfacePresentModesKHR::Reader& reader);
void handle_command(vkAcquireNextImage2KHR::Reader& reader);
void handle_command(vkCmdDispatchBase::Reader& reader);
void handle_command(vkGetPhysicalDevicePresentRectanglesKHR::Reader& reader);
void handle_command(vkCreateDescriptorUpdateTemplate::Reader& reader);
void handle_command(vkDestroyDescriptorUpdateTemplate::Reader& reader);
void handle_command(vkUpdateDescriptorSetWithTemplate::Reader& reader);
void handle_command(vkCmdPushDescriptorSetWithTemplateKHR::Reader& reader);
void handle_command(vkSetHdrMetadataEXT::Reader& reader);
void handle_command(vkGetSwapchainStatusKHR::Reader& reader);
void handle_command(vkGetRefreshCycleDurationGOOGLE::Reader& reader);
void handle_command(vkGetPastPresentationTimingGOOGLE::Reader& reader);
void handle_command(vkCmdSetViewportWScalingNV::Reader& reader);
void handle_command(vkCmdSetDiscardRectangleEXT::Reader& reader);
void handle_command(vkCmdSetDiscardRectangleEnableEXT::Reader& reader);
void handle_command(vkCmdSetDiscardRectangleModeEXT::Reader& reader);
void handle_command(vkCmdSetSampleLocationsEXT::Reader& reader);
void handle_command(vkGetPhysicalDeviceMultisamplePropertiesEXT::Reader& reader);
void handle_command(vkGetPhysicalDeviceSurfaceCapabilities2KHR::Reader& reader);
void handle_command(vkGetPhysicalDeviceSurfaceFormats2KHR::Reader& reader);
void handle_command(vkGetPhysicalDeviceDisplayProperties2KHR::Reader& reader);
void handle_command(vkGetPhysicalDeviceDisplayPlaneProperties2KHR::Reader& reader);
void handle_command(vkGetDisplayModeProperties2KHR::Reader& reader);
void handle_command(vkGetDisplayPlaneCapabilities2KHR::Reader& reader);
void handle_command(vkGetBufferMemoryRequirements2::Reader& reader);
void handle_command(vkGetImageMemoryRequirements2::Reader& reader);
void handle_command(vkGetImageSparseMemoryRequirements2::Reader& reader);
void handle_command(vkGetDeviceBufferMemoryRequirements::Reader& reader);
void handle_command(vkGetDeviceImageMemoryRequirements::Reader& reader);
void handle_command(vkGetDeviceImageSparseMemoryRequirements::Reader& reader);
void handle_command(vkCreateSamplerYcbcrConversion::Reader& reader);
void handle_command(vkDestroySamplerYcbcrConversion::Reader& reader);
void handle_command(vkGetDeviceQueue2::Reader& reader);
void handle_command(vkCreateValidationCacheEXT::Reader& reader);
void handle_command(vkDestroyValidationCacheEXT::Reader& reader);
void handle_command(vkGetValidationCacheDataEXT::Reader& reader);
void handle_command(vkMergeValidationCachesEXT::Reader& reader);
void handle_command(vkGetDescriptorSetLayoutSupport::Reader& reader);
void handle_command(vkGetShaderInfoAMD::Reader& reader);
void handle_command(vkSetLocalDimmingAMD::Reader& reader);
void handle_command(vkGetPhysicalDeviceCalibrateableTimeDomainsEXT::Reader& reader);
void handle_command(vkGetCalibratedTimestampsEXT::Reader& reader);
void handle_command(vkSetDebugUtilsObjectNameEXT::Reader& reader);
void handle_command(vkSetDebugUtilsObjectTagEXT::Reader& reader);
void handle_command(vkQueueBeginDebugUtilsLabelEXT::Reader& reader);
void handle_command(vkQueueEndDebugUtilsLabelEXT::Reader& reader);
void handle_command(vkQueueInsertDebugUtilsLabelEXT::Reader& reader);
void handle_command(vkCmdBeginDebugUtilsLabelEXT::Reader& reader);
void handle_command(vkCmdEndDebugUtilsLabelEXT::Reader& reader);
void handle_command(vkCmdInsertDebugUtilsLabelEXT::Reader& reader);
void handle_command(vkCreateDebugUtilsMessengerEXT::Reader& reader);
void handle_command(vkDestroyDebugUtilsMessengerEXT::Reader& reader);
void handle_command(vkSubmitDebugUtilsMessageEXT::Reader& reader);
void handle_command(vkGetMemoryHostPointerPropertiesEXT::Reader& reader);
void handle_command(vkCmdWriteBufferMarkerAMD::Reader& reader);
void handle_command(vkCreateRenderPass2::Reader& reader);
void handle_command(vkCmdBeginRenderPass2::Reader& reader);
void handle_command(vkCmdNextSubpass2::Reader& reader);
void handle_command(vkCmdEndRenderPass2::Reader& reader);
void handle_command(vkGetSemaphoreCounterValue::Reader& reader);
void handle_command(vkWaitSemaphores::Reader& reader);
void handle_command(vkSignalSemaphore::Reader& reader);
void handle_command(vkCmdDrawIndirectCount::Reader& reader);
void handle_command(vkCmdDrawIndexedIndirectCount::Reader& reader);
void handle_command(vkCmdSetCheckpointNV::Reader& reader);
void handle_command(vkGetQueueCheckpointDataNV::Reader& reader);
void handle_command(vkCmdBindTransformFeedbackBuffersEXT::Reader& reader);
void handle_command(vkCmdBeginTransformFeedbackEXT::Reader& reader);
void handle_command(vkCmdEndTransformFeedbackEXT::Reader& reader);
void handle_command(vkCmdBeginQueryIndexedEXT::Reader& reader);
void handle_command(vkCmdEndQueryIndexedEXT::Reader& reader);
void handle_command(vkCmdDrawIndirectByteCountEXT::Reader& reader);
void handle_command(vkCmdSetExclusiveScissorNV::Reader& reader);
void handle_command(vkCmdSetExclusiveScissorEnableNV::Reader& reader);
void handle_command(vkCmdBindShadingRateImageNV::Reader& reader);
void handle_command(vkCmdSetViewportShadingRatePaletteNV::Reader& reader);
void handle_command(vkCmdSetCoarseSampleOrderNV::Reader& reader);
void handle_command(vkCmdDrawMeshTasksNV::Reader& reader);
void handle_command(vkCmdDrawMeshTasksIndirectNV::Reader& reader);
void handle_command(vkCmdDrawMeshTasksIndirectCountNV::Reader& reader);
void handle_command(vkCmdDrawMeshTasksEXT::Reader& reader);
void handle_command(vkCmdDrawMeshTasksIndirectEXT::Reader& reader);
void handle_command(vkCmdDrawMeshTasksIndirectCountEXT::Reader& reader);
void handle_command(vkCompileDeferredNV::Reader& reader);
void handle_command(vkCreateAccelerationStructureNV::Reader& reader);
void handle_command(vkCmdBindInvocationMaskHUAWEI::Reader& reader);
void handle_command(vkDestroyAccelerationStructureKHR::Reader& reader);
void handle_command(vkDestroyAccelerationStructureNV::Reader& reader);
void handle_command(vkGetAccelerationStructureMemoryRequirementsNV::Reader& reader);
void handle_command(vkBindAccelerationStructureMemoryNV::Reader& reader);
void handle_command(vkCmdCopyAccelerationStructureNV::Reader& reader);
void handle_command(vkCmdCopyAccelerationStructureKHR::Reader& reader);
void handle_command(vkCopyAccelerationStructureKHR::Reader& reader);
void handle_command(vkCmdCopyAccelerationStructureToMemoryKHR::Reader& reader);
void handle_command(vkCopyAccelerationStructureToMemoryKHR::Reader& reader);
void handle_command(vkCmdCopyMemoryToAccelerationStructureKHR::Reader& reader);
void handle_command(vkCopyMemoryToAccelerationStructureKHR::Reader& reader);
void handle_command(vkCmdWriteAccelerationStructuresPropertiesKHR::Reader& reader);
void handle_command(vkCmdWriteAccelerationStructuresPropertiesNV::Reader& reader);
void handle_command(vkCmdBuildAccelerationStructureNV::Reader& reader);
void handle_command(vkWriteAccelerationStructuresPropertiesKHR::Reader& reader);
void handle_command(vkCmdTraceRaysKHR::Reader& reader);
void handle_command(vkCmdTraceRaysNV::Reader& reader);
void handle_command(vkGetRayTracingShaderGroupHandlesKHR::Reader& reader);
void handle_command(vkGetRayTracingCaptureReplayShaderGroupHandlesKHR::Reader& reader);
void handle_command(vkGetAccelerationStructureHandleNV::Reader& reader);
void handle_command(vkCreateRayTracingPipelinesNV::Reader& reader);
void handle_command(vkCreateRayTracingPipelinesKHR::Reader& reader);
void handle_command(vkGetPhysicalDeviceCooperativeMatrixPropertiesNV::Reader& reader);
void handle_command(vkCmdTraceRaysIndirectKHR::Reader& reader);
void handle_command(vkCmdTraceRaysIndirect2KHR::Reader& reader);
void handle_command(vkGetDeviceAccelerationStructureCompatibilityKHR::Reader& reader);
void handle_command(vkGetRayTracingShaderGroupStackSizeKHR::Reader& reader);
void handle_command(vkCmdSetRayTracingPipelineStackSizeKHR::Reader& reader);
void handle_command(vkGetImageViewHandleNVX::Reader& reader);
void handle_command(vkGetImageViewAddressNVX::Reader& reader);
void handle_command(vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR::Reader& reader);
void handle_command(vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR::Reader& reader);
void handle_command(vkAcquireProfilingLockKHR::Reader& reader);
void handle_command(vkReleaseProfilingLockKHR::Reader& reader);
void handle_command(vkGetImageDrmFormatModifierPropertiesEXT::Reader& reader);
void handle_command(vkGetBufferOpaqueCaptureAddress::Reader& reader);
void handle_command(vkGetBufferDeviceAddress::Reader& reader);
void handle_command(vkCreateHeadlessSurfaceEXT::Reader& reader);
void handle_command(vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV::Reader& reader);
void handle_command(vkInitializePerformanceApiINTEL::Reader& reader);
void handle_command(vkUninitializePerformanceApiINTEL::Reader& reader);
void handle_command(vkCmdSetPerformanceMarkerINTEL::Reader& reader);
void handle_command(vkCmdSetPerformanceStreamMarkerINTEL::Reader& reader);
void handle_command(vkCmdSetPerformanceOverrideINTEL::Reader& reader);
void handle_command(vkAcquirePerformanceConfigurationINTEL::Reader& reader);
void handle_command(vkReleasePerformanceConfigurationINTEL::Reader& reader);
void handle_command(vkQueueSetPerformanceConfigurationINTEL::Reader& reader);
void handle_command(vkGetPerformanceParameterINTEL::Reader& reader);
void handle_command(vkGetDeviceMemoryOpaqueCaptureAddress::Reader& reader);
void handle_command(vkGetPipelineExecutablePropertiesKHR::Reader& reader);
void handle_command(vkGetPipelineExecutableStatisticsKHR::Reader& reader);
void handle_command(vkGetPipelineExecutableInternalRepresentationsKHR::Reader& reader);
void handle_command(vkCmdSetLineStippleEXT::Reader& reader);
void handle_command(vkGetPhysicalDeviceToolProperties::Reader& reader);
void handle_command(vkCreateAccelerationStructureKHR::Reader& reader);
void handle_command(vkCmdBuildAccelerationStructuresKHR::Reader& reader);
void handle_command(vkCmdBuildAccelerationStructuresIndirectKHR::Reader& reader);
void handle_command(vkBuildAccelerationStructuresKHR::Reader& reader);
void handle_command(vkGetAccelerationStructureDeviceAddressKHR::Reader& reader);
void handle_command(vkCreateDeferredOperationKHR::Reader& reader);
void handle_command(vkDestroyDeferredOperationKHR::Reader& reader);
void handle_command(vkGetDeferredOperationMaxConcurrencyKHR::Reader& reader);
void handle_command(vkGetDeferredOperationResultKHR::Reader& reader);
void handle_command(vkDeferredOperationJoinKHR::Reader& reader);
void handle_command(vkGetPipelineIndirectMemoryRequirementsNV::Reader& reader);
void handle_command(vkGetPipelineIndirectDeviceAddressNV::Reader& reader);
void handle_command(vkCmdSetCullMode::Reader& reader);
void handle_command(vkCmdSetFrontFace::Reader& reader);
void handle_command(vkCmdSetPrimitiveTopology::Reader& reader);
void handle_command(vkCmdSetViewportWithCount::Reader& reader);
void handle_command(vkCmdSetScissorWithCount::Reader& reader);
void handle_command(vkCmdBindIndexBuffer2KHR::Reader& reader);
void handle_command(vkCmdBindVertexBuffers2::Reader& reader);
void handle_command(vkCmdSetDepthTestEnable::Reader& reader);
void handle_command(vkCmdSetDepthWriteEnable::Reader& reader);
void handle_command(vkCmdSetDepthCompareOp::Reader& reader);
void handle_command(vkCmdSetDepthBoundsTestEnable::Reader& reader);
void handle_command(vkCmdSetStencilTestEnable::Reader& reader);
void handle_command(vkCmdSetStencilOp::Reader& reader);
void handle_command(vkCmdSetPatchControlPointsEXT::Reader& reader);
void handle_command(vkCmdSetRasterizerDiscardEnable::Reader& reader);
void handle_command(vkCmdSetDepthBiasEnable::Reader& reader);
void handle_command(vkCmdSetLogicOpEXT::Reader& reader);
void handle_command(vkCmdSetPrimitiveRestartEnable::Reader& reader);
void handle_command(vkCmdSetTessellationDomainOriginEXT::Reader& reader);
void handle_command(vkCmdSetDepthClampEnableEXT::Reader& reader);
void handle_command(vkCmdSetPolygonModeEXT::Reader& reader);
void handle_command(vkCmdSetRasterizationSamplesEXT::Reader& reader);
void handle_command(vkCmdSetSampleMaskEXT::Reader& reader);
void handle_command(vkCmdSetAlphaToCoverageEnableEXT::Reader& reader);
void handle_command(vkCmdSetAlphaToOneEnableEXT::Reader& reader);
void handle_command(vkCmdSetLogicOpEnableEXT::Reader& reader);
void handle_command(vkCmdSetColorBlendEnableEXT::Reader& reader);
void handle_command(vkCmdSetColorBlendEquationEXT::Reader& reader);
void handle_command(vkCmdSetColorWriteMaskEXT::Reader& reader);
void handle_command(vkCmdSetRasterizationStreamEXT::Reader& reader);
void handle_command(vkCmdSetConservativeRasterizationModeEXT::Reader& reader);
void handle_command(vkCmdSetExtraPrimitiveOverestimationSizeEXT::Reader& reader);
void handle_command(vkCmdSetDepthClipEnableEXT::Reader& reader);
void handle_command(vkCmdSetSampleLocationsEnableEXT::Reader& reader);
void handle_command(vkCmdSetColorBlendAdvancedEXT::Reader& reader);
void handle_command(vkCmdSetProvokingVertexModeEXT::Reader& reader);
void handle_command(vkCmdSetLineRasterizationModeEXT::Reader& reader);
void handle_command(vkCmdSetLineStippleEnableEXT::Reader& reader);
void handle_command(vkCmdSetDepthClipNegativeOneToOneEXT::Reader& reader);
void handle_command(vkCmdSetViewportWScalingEnableNV::Reader& reader);
void handle_command(vkCmdSetViewportSwizzleNV::Reader& reader);
void handle_command(vkCmdSetCoverageToColorEnableNV::Reader& reader);
void handle_command(vkCmdSetCoverageToColorLocationNV::Reader& reader);
void handle_command(vkCmdSetCoverageModulationModeNV::Reader& reader);
void handle_command(vkCmdSetCoverageModulationTableEnableNV::Reader& reader);
void handle_command(vkCmdSetCoverageModulationTableNV::Reader& reader);
void handle_command(vkCmdSetShadingRateImageEnableNV::Reader& reader);
void handle_command(vkCmdSetCoverageReductionModeNV::Reader& reader);
void handle_command(vkCmdSetRepresentativeFragmentTestEnableNV::Reader& reader);
void handle_command(vkCreatePrivateDataSlot::Reader& reader);
void handle_command(vkDestroyPrivateDataSlot::Reader& reader);
void handle_command(vkSetPrivateData::Reader& reader);
void handle_command(vkGetPrivateData::Reader& reader);
void handle_command(vkCmdCopyBuffer2::Reader& reader);
void handle_command(vkCmdCopyImage2::Reader& reader);
void handle_command(vkCmdBlitImage2::Reader& reader);
void handle_command(vkCmdCopyBufferToImage2::Reader& reader);
void handle_command(vkCmdCopyImageToBuffer2::Reader& reader);
void handle_command(vkCmdResolveImage2::Reader& reader);
void handle_command(vkCmdSetFragmentShadingRateKHR::Reader& reader);
void handle_command(vkGetPhysicalDeviceFragmentShadingRatesKHR::Reader& reader);
void handle_command(vkCmdSetFragmentShadingRateEnumNV::Reader& reader);
void handle_command(vkGetAccelerationStructureBuildSizesKHR::Reader& reader);
void handle_command(vkCmdSetVertexInputEXT::Reader& reader);
void handle_command(vkCmdSetColorWriteEnableEXT::Reader& reader);
void handle_command(vkCmdSetEvent2::Reader& reader);
void handle_command(vkCmdResetEvent2::Reader& reader);
void handle_command(vkCmdWaitEvents2::Reader& reader);
void handle_command(vkCmdPipelineBarrier2::Reader& reader);
void handle_command(vkQueueSubmit2::Reader& reader);
void handle_command(vkCmdWriteTimestamp2::Reader& reader);
void handle_command(vkCmdWriteBufferMarker2AMD::Reader& reader);
void handle_command(vkGetQueueCheckpointData2NV::Reader& reader);
void handle_command(vkCopyMemoryToImageEXT::Reader& reader);
void handle_command(vkCopyImageToMemoryEXT::Reader& reader);
void handle_command(vkCopyImageToImageEXT::Reader& reader);
void handle_command(vkTransitionImageLayoutEXT::Reader& reader);
void handle_command(vkGetPhysicalDeviceVideoCapabilitiesKHR::Reader& reader);
void handle_command(vkGetPhysicalDeviceVideoFormatPropertiesKHR::Reader& reader);
void handle_command(vkCreateVideoSessionKHR::Reader& reader);
void handle_command(vkDestroyVideoSessionKHR::Reader& reader);
void handle_command(vkCreateVideoSessionParametersKHR::Reader& reader);
void handle_command(vkUpdateVideoSessionParametersKHR::Reader& reader);
void handle_command(vkDestroyVideoSessionParametersKHR::Reader& reader);
void handle_command(vkGetVideoSessionMemoryRequirementsKHR::Reader& reader);
void handle_command(vkBindVideoSessionMemoryKHR::Reader& reader);
void handle_command(vkCmdDecodeVideoKHR::Reader& reader);
void handle_command(vkCmdBeginVideoCodingKHR::Reader& reader);
void handle_command(vkCmdControlVideoCodingKHR::Reader& reader);
void handle_command(vkCmdEndVideoCodingKHR::Reader& reader);
void handle_command(vkCmdDecompressMemoryNV::Reader& reader);
void handle_command(vkCmdDecompressMemoryIndirectCountNV::Reader& reader);
void handle_command(vkCreateCuModuleNVX::Reader& reader);
void handle_command(vkCreateCuFunctionNVX::Reader& reader);
void handle_command(vkDestroyCuModuleNVX::Reader& reader);
void handle_command(vkDestroyCuFunctionNVX::Reader& reader);
void handle_command(vkCmdCuLaunchKernelNVX::Reader& reader);
void handle_command(vkGetDescriptorSetLayoutSizeEXT::Reader& reader);
void handle_command(vkGetDescriptorSetLayoutBindingOffsetEXT::Reader& reader);
void handle_command(vkGetDescriptorEXT::Reader& reader);
void handle_command(vkCmdBindDescriptorBuffersEXT::Reader& reader);
void handle_command(vkCmdSetDescriptorBufferOffsetsEXT::Reader& reader);
void handle_command(vkCmdBindDescriptorBufferEmbeddedSamplersEXT::Reader& reader);
void handle_command(vkGetBufferOpaqueCaptureDescriptorDataEXT::Reader& reader);
void handle_command(vkGetImageOpaqueCaptureDescriptorDataEXT::Reader& reader);
void handle_command(vkGetImageViewOpaqueCaptureDescriptorDataEXT::Reader& reader);
void handle_command(vkGetSamplerOpaqueCaptureDescriptorDataEXT::Reader& reader);
void handle_command(vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT::Reader& reader);
void handle_command(vkSetDeviceMemoryPriorityEXT::Reader& reader);
void handle_command(vkAcquireDrmDisplayEXT::Reader& reader);
void handle_command(vkGetDrmDisplayEXT::Reader& reader);
void handle_command(vkWaitForPresentKHR::Reader& reader);
void handle_command(vkCmdBeginRendering::Reader& reader);
void handle_command(vkCmdEndRendering::Reader& reader);
void handle_command(vkGetDescriptorSetLayoutHostMappingInfoVALVE::Reader& reader);
void handle_command(vkGetDescriptorSetHostMappingVALVE::Reader& reader);
void handle_command(vkCreateMicromapEXT::Reader& reader);
void handle_command(vkCmdBuildMicromapsEXT::Reader& reader);
void handle_command(vkBuildMicromapsEXT::Reader& reader);
void handle_command(vkDestroyMicromapEXT::Reader& reader);
void handle_command(vkCmdCopyMicromapEXT::Reader& reader);
void handle_command(vkCopyMicromapEXT::Reader& reader);
void handle_command(vkCmdCopyMicromapToMemoryEXT::Reader& reader);
void handle_command(vkCopyMicromapToMemoryEXT::Reader& reader);
void handle_command(vkCmdCopyMemoryToMicromapEXT::Reader& reader);
void handle_command(vkCopyMemoryToMicromapEXT::Reader& reader);
void handle_command(vkCmdWriteMicromapsPropertiesEXT::Reader& reader);
void handle_command(vkWriteMicromapsPropertiesEXT::Reader& reader);
void handle_command(vkGetDeviceMicromapCompatibilityEXT::Reader& reader);
void handle_command(vkGetMicromapBuildSizesEXT::Reader& reader);
void handle_command(vkGetShaderModuleIdentifierEXT::Reader& reader);
void handle_command(vkGetShaderModuleCreateInfoIdentifierEXT::Reader& reader);
void handle_command(vkGetImageSubresourceLayout2KHR::Reader& reader);
void handle_command(vkGetPipelinePropertiesEXT::Reader& reader);
void handle_command(vkGetFramebufferTilePropertiesQCOM::Reader& reader);
void handle_command(vkGetDynamicRenderingTilePropertiesQCOM::Reader& reader);
void handle_command(vkGetPhysicalDeviceOpticalFlowImageFormatsNV::Reader& reader);
void handle_command(vkCreateOpticalFlowSessionNV::Reader& reader);
void handle_command(vkDestroyOpticalFlowSessionNV::Reader& reader);
void handle_command(vkBindOpticalFlowSessionImageNV::Reader& reader);
void handle_command(vkCmdOpticalFlowExecuteNV::Reader& reader);
void handle_command(vkGetDeviceFaultInfoEXT::Reader& reader);
void handle_command(vkCmdSetDepthBias2EXT::Reader& reader);
void handle_command(vkReleaseSwapchainImagesEXT::Reader& reader);
void handle_command(vkGetDeviceImageSubresourceLayoutKHR::Reader& reader);
void handle_command(vkMapMemory2KHR::Reader& reader);
void handle_command(vkUnmapMemory2KHR::Reader& reader);
void handle_command(vkCreateShadersEXT::Reader& reader);
void handle_command(vkDestroyShaderEXT::Reader& reader);
void handle_command(vkGetShaderBinaryDataEXT::Reader& reader);
void handle_command(vkCmdBindShadersEXT::Reader& reader);
void handle_command(vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR::Reader& reader);
void handle_command(Message::Reader&);
