
#include <ThreadStruct.hpp>
#include <stdexcept>
#include <future>

#include <nlohmann/json.hpp>
using json = nlohmann::json;

#include <vulkan/vulkan.h>
#include <shm_open_anon.h>

#include <Serialization.hpp>
#include <Server.hpp>
#include <Synchronization.hpp>
#include <sys/mman.h>


typedef struct {
int fd;
VkDeviceSize size;
void* mem;
std::vector<void*> mapped_ranges;
} MemInfo;

std::map<uintptr_t,MemInfo*> devicememory_to_mem_info;
#ifndef CLIENT

#ifdef __APPLE__
    std::string vulkan_library_name="libvulkan.dylib";
#endif
#include <dlfcn.h>
auto vulkan_library=dlopen(vulkan_library_name.c_str(), RTLD_LAZY | RTLD_GLOBAL);
auto get_instance_proc_addr=(PFN_vkGetInstanceProcAddr)(dlsym(vulkan_library,"vkGetInstanceProcAddr")));
auto get_device_proc_addr=(PFN_vkGetDeviceProcAddr)(dlsym(vulkan_library,"vkGetDeviceProcAddr")));


    void handle_vkCreateInstance(json data_json){
    //Will only be called by the server
    
VkInstanceCreateInfo* pCreateInfo
            ;
[&]() {
VkInstanceCreateInfo* temp_RmbQbmp;[&]() {

        if (data_json["members"]["pCreateInfo"].contains("null")){
        temp_RmbQbmp=NULL;
        return;
        }
    temp_RmbQbmp=(VkInstanceCreateInfo*)malloc(sizeof(VkInstanceCreateInfo));
[&]() {
*(temp_RmbQbmp)=deserialize_VkInstanceCreateInfo(data_json["members"]["pCreateInfo"]);}();
}();pCreateInfo=temp_RmbQbmp;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkInstance* pInstance
        ;
[&]() {

        if (data_json["members"]["pInstance"].contains("null")){
        pInstance=NULL;
        return;
        }
    pInstance=(VkInstance*)malloc(sizeof(VkInstance));
[&]() {
*(pInstance)=deserialize_VkInstance(data_json["members"]["pInstance"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreateInstance)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateInstance");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreateInstance)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateInstance");
    }  
    
auto return_value=call_function(pCreateInfo, pAllocator, pInstance);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_QyYscWX=json({});
    return serialize_VkResult(return_value);}();
result["members"]["pCreateInfo"]=[&]() {
    json return_UqkZAHS=json({});
    
        if (pCreateInfo==NULL){
            return_UqkZAHS["null"]=true;
            return return_UqkZAHS;
        }
        return_UqkZAHS=[&]() {
    json return_VbaOfPq=json({});
    return serialize_VkInstanceCreateInfo(*pCreateInfo);}();
return return_UqkZAHS;}();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pInstance"]=[&]() {
    json return_uTmbaBc=json({});
    
        if (pInstance==NULL){
            return_uTmbaBc["null"]=true;
            return return_uTmbaBc;
        }
        return_uTmbaBc=[&]() {
    json return_BGbArZa=json({});
    return serialize_VkInstance(*pInstance);}();
return return_uTmbaBc;}();

        writeToConn(result);
    }

    void handle_vkDestroyInstance(json data_json){
    //Will only be called by the server
    
VkInstance instance
            ;
[&]() {
instance=deserialize_VkInstance(data_json["members"]["instance"]);}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkDestroyInstance)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyInstance");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkDestroyInstance)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyInstance");
    }  
    
call_function(instance, pAllocator);
json result=json({});
        result["type"]="Response";
    

result["members"]["instance"]=[&]() {
    json return_uDnIwUL=json({});
    return serialize_VkInstance(instance);}();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();

        writeToConn(result);
    }

    void handle_vkEnumeratePhysicalDevices(json data_json){
    //Will only be called by the server
    
VkInstance instance
            ;
[&]() {
instance=deserialize_VkInstance(data_json["members"]["instance"]);}();
uint32_t* pPhysicalDeviceCount
            ;
[&]() {

        if (data_json["members"]["pPhysicalDeviceCount"].contains("null")){
        pPhysicalDeviceCount=NULL;
        return;
        }
    pPhysicalDeviceCount=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pPhysicalDeviceCount)=deserialize_uint32_t(data_json["members"]["pPhysicalDeviceCount"]);}();
}();
VkPhysicalDevice* pPhysicalDevices
        ;
[&]() {

        if (data_json["members"]["pPhysicalDevices"].contains("null")){
        pPhysicalDevices=NULL;
        return;
        }
    pPhysicalDevices=(VkPhysicalDevice*)malloc(*pPhysicalDeviceCount*sizeof(VkPhysicalDevice));
        for (int TLfKNSG=0; TLfKNSG < *pPhysicalDeviceCount; TLfKNSG++){
            [&]() {
pPhysicalDevices[TLfKNSG]=deserialize_VkPhysicalDevice(data_json["members"]["pPhysicalDevices"]["members"][TLfKNSG]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkEnumeratePhysicalDevices)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkEnumeratePhysicalDevices");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkEnumeratePhysicalDevices)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkEnumeratePhysicalDevices");
    }  
    
auto return_value=call_function(instance, pPhysicalDeviceCount, pPhysicalDevices);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_VKXvzDz=json({});
    return serialize_VkResult(return_value);}();
result["members"]["instance"]=[&]() {
    json return_uDnIwUL=json({});
    return serialize_VkInstance(instance);}();
result["members"]["pPhysicalDeviceCount"]=[&]() {
    json return_SLNCGBL=json({});
    
        if (pPhysicalDeviceCount==NULL){
            return_SLNCGBL["null"]=true;
            return return_SLNCGBL;
        }
        return_SLNCGBL=[&]() {
    json return_vKKvZSl=json({});
    return serialize_uint32_t(*pPhysicalDeviceCount);}();
return return_SLNCGBL;}();
result["members"]["pPhysicalDevices"]=[&]() {
    json return_IegEydc=json({});
    
        if (pPhysicalDevices==NULL){
            return_IegEydc["null"]=true;
            return return_IegEydc;
        }
        
        return_IegEydc["members"]={};
        for(int IegEydc=0; IegEydc < *pPhysicalDeviceCount; IegEydc++){
            json temp;
            temp=[&]() {
    json return_Ypzycea=json({});
    return serialize_VkPhysicalDevice(pPhysicalDevices[IegEydc]);}();
            return_IegEydc["members"].push_back(temp);
        }
        return return_IegEydc;
        }();

        writeToConn(result);
    }

    void handle_vkGetDeviceProcAddr(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
char* pName
        ;
[&]() {
char* temp_yiAxPXc;[&]() {

        if (data_json["members"]["pName"].contains("null")){
        temp_yiAxPXc=NULL;
        return;
        }
    temp_yiAxPXc=deserialize_char_p(data_json["members"]["pName"]);
}();pName=temp_yiAxPXc;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetDeviceProcAddr)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDeviceProcAddr");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetDeviceProcAddr)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDeviceProcAddr");
    }  
    
auto return_value=call_function(device, pName);
json result=json({});
        result["type"]="Response";
    
result["return"]=(return_value!=NULL ? true: false;
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pName"]=[&]() {
    json return_UtWldLN=json({});
    
        if (pName==NULL){
            return_UtWldLN["null"]=true;
            return return_UtWldLN;
        }
        return serialize_char_p(pName);
}();

        writeToConn(result);
    }

    void handle_vkGetInstanceProcAddr(json data_json){
    //Will only be called by the server
    
VkInstance instance
            ;
[&]() {
instance=deserialize_VkInstance(data_json["members"]["instance"]);}();
char* pName
        ;
[&]() {
char* temp_yiAxPXc;[&]() {

        if (data_json["members"]["pName"].contains("null")){
        temp_yiAxPXc=NULL;
        return;
        }
    temp_yiAxPXc=deserialize_char_p(data_json["members"]["pName"]);
}();pName=temp_yiAxPXc;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetInstanceProcAddr)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetInstanceProcAddr");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetInstanceProcAddr)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetInstanceProcAddr");
    }  
    
auto return_value=call_function(instance, pName);
json result=json({});
        result["type"]="Response";
    
result["return"]=(return_value!=NULL ? true: false;
result["members"]["instance"]=[&]() {
    json return_uDnIwUL=json({});
    return serialize_VkInstance(instance);}();
result["members"]["pName"]=[&]() {
    json return_UtWldLN=json({});
    
        if (pName==NULL){
            return_UtWldLN["null"]=true;
            return return_UtWldLN;
        }
        return serialize_char_p(pName);
}();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceProperties(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
VkPhysicalDeviceProperties* pProperties
        ;
[&]() {

        if (data_json["members"]["pProperties"].contains("null")){
        pProperties=NULL;
        return;
        }
    pProperties=(VkPhysicalDeviceProperties*)malloc(sizeof(VkPhysicalDeviceProperties));
[&]() {
*(pProperties)=deserialize_VkPhysicalDeviceProperties(data_json["members"]["pProperties"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceProperties)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceProperties");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceProperties)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceProperties");
    }  
    
call_function(physicalDevice, pProperties);
json result=json({});
        result["type"]="Response";
    

result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["pProperties"]=[&]() {
    json return_khdQLrQ=json({});
    
        if (pProperties==NULL){
            return_khdQLrQ["null"]=true;
            return return_khdQLrQ;
        }
        return_khdQLrQ=[&]() {
    json return_dgVEkHL=json({});
    return serialize_VkPhysicalDeviceProperties(*pProperties);}();
return return_khdQLrQ;}();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceQueueFamilyProperties(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
uint32_t* pQueueFamilyPropertyCount
            ;
[&]() {

        if (data_json["members"]["pQueueFamilyPropertyCount"].contains("null")){
        pQueueFamilyPropertyCount=NULL;
        return;
        }
    pQueueFamilyPropertyCount=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pQueueFamilyPropertyCount)=deserialize_uint32_t(data_json["members"]["pQueueFamilyPropertyCount"]);}();
}();
VkQueueFamilyProperties* pQueueFamilyProperties
        ;
[&]() {

        if (data_json["members"]["pQueueFamilyProperties"].contains("null")){
        pQueueFamilyProperties=NULL;
        return;
        }
    pQueueFamilyProperties=(VkQueueFamilyProperties*)malloc(*pQueueFamilyPropertyCount*sizeof(VkQueueFamilyProperties));
        for (int zdBuCre=0; zdBuCre < *pQueueFamilyPropertyCount; zdBuCre++){
            [&]() {
pQueueFamilyProperties[zdBuCre]=deserialize_VkQueueFamilyProperties(data_json["members"]["pQueueFamilyProperties"]["members"][zdBuCre]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceQueueFamilyProperties)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceQueueFamilyProperties");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceQueueFamilyProperties)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceQueueFamilyProperties");
    }  
    
call_function(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
json result=json({});
        result["type"]="Response";
    

result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["pQueueFamilyPropertyCount"]=[&]() {
    json return_SBlrxix=json({});
    
        if (pQueueFamilyPropertyCount==NULL){
            return_SBlrxix["null"]=true;
            return return_SBlrxix;
        }
        return_SBlrxix=[&]() {
    json return_xdCcTRD=json({});
    return serialize_uint32_t(*pQueueFamilyPropertyCount);}();
return return_SBlrxix;}();
result["members"]["pQueueFamilyProperties"]=[&]() {
    json return_tdSoBqP=json({});
    
        if (pQueueFamilyProperties==NULL){
            return_tdSoBqP["null"]=true;
            return return_tdSoBqP;
        }
        
        return_tdSoBqP["members"]={};
        for(int tdSoBqP=0; tdSoBqP < *pQueueFamilyPropertyCount; tdSoBqP++){
            json temp;
            temp=[&]() {
    json return_aExQUNJ=json({});
    return serialize_VkQueueFamilyProperties(pQueueFamilyProperties[tdSoBqP]);}();
            return_tdSoBqP["members"].push_back(temp);
        }
        return return_tdSoBqP;
        }();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceMemoryProperties(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
VkPhysicalDeviceMemoryProperties* pMemoryProperties
        ;
[&]() {

        if (data_json["members"]["pMemoryProperties"].contains("null")){
        pMemoryProperties=NULL;
        return;
        }
    pMemoryProperties=(VkPhysicalDeviceMemoryProperties*)malloc(sizeof(VkPhysicalDeviceMemoryProperties));
[&]() {
*(pMemoryProperties)=deserialize_VkPhysicalDeviceMemoryProperties(data_json["members"]["pMemoryProperties"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceMemoryProperties)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceMemoryProperties");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceMemoryProperties)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceMemoryProperties");
    }  
    
call_function(physicalDevice, pMemoryProperties);
json result=json({});
        result["type"]="Response";
    

result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["pMemoryProperties"]=[&]() {
    json return_ccVshit=json({});
    
        if (pMemoryProperties==NULL){
            return_ccVshit["null"]=true;
            return return_ccVshit;
        }
        return_ccVshit=[&]() {
    json return_JhCyNGV=json({});
    return serialize_VkPhysicalDeviceMemoryProperties(*pMemoryProperties);}();
return return_ccVshit;}();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceFeatures(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
VkPhysicalDeviceFeatures* pFeatures
        ;
[&]() {

        if (data_json["members"]["pFeatures"].contains("null")){
        pFeatures=NULL;
        return;
        }
    pFeatures=(VkPhysicalDeviceFeatures*)malloc(sizeof(VkPhysicalDeviceFeatures));
[&]() {
*(pFeatures)=deserialize_VkPhysicalDeviceFeatures(data_json["members"]["pFeatures"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceFeatures)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceFeatures");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceFeatures)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceFeatures");
    }  
    
call_function(physicalDevice, pFeatures);
json result=json({});
        result["type"]="Response";
    

result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["pFeatures"]=[&]() {
    json return_wXsZLQh=json({});
    
        if (pFeatures==NULL){
            return_wXsZLQh["null"]=true;
            return return_wXsZLQh;
        }
        return_wXsZLQh=[&]() {
    json return_ugXPkSg=json({});
    return serialize_VkPhysicalDeviceFeatures(*pFeatures);}();
return return_wXsZLQh;}();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceFormatProperties(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
VkFormat format
            ;
[&]() {
format=deserialize_VkFormat(data_json["members"]["format"]);}();
VkFormatProperties* pFormatProperties
        ;
[&]() {

        if (data_json["members"]["pFormatProperties"].contains("null")){
        pFormatProperties=NULL;
        return;
        }
    pFormatProperties=(VkFormatProperties*)malloc(sizeof(VkFormatProperties));
[&]() {
*(pFormatProperties)=deserialize_VkFormatProperties(data_json["members"]["pFormatProperties"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceFormatProperties)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceFormatProperties");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceFormatProperties)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceFormatProperties");
    }  
    
call_function(physicalDevice, format, pFormatProperties);
json result=json({});
        result["type"]="Response";
    

result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["format"]=[&]() {
    json return_ESSNhLl=json({});
    return serialize_VkFormat(format);}();
result["members"]["pFormatProperties"]=[&]() {
    json return_VFiMeek=json({});
    
        if (pFormatProperties==NULL){
            return_VFiMeek["null"]=true;
            return return_VFiMeek;
        }
        return_VFiMeek=[&]() {
    json return_ulbLbfq=json({});
    return serialize_VkFormatProperties(*pFormatProperties);}();
return return_VFiMeek;}();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceImageFormatProperties(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
VkFormat format
            ;
[&]() {
format=deserialize_VkFormat(data_json["members"]["format"]);}();
VkImageType type
            ;
[&]() {
type=deserialize_VkImageType(data_json["members"]["type"]);}();
VkImageTiling tiling
            ;
[&]() {
tiling=deserialize_VkImageTiling(data_json["members"]["tiling"]);}();
VkImageUsageFlags usage
            ;
[&]() {
usage=deserialize_VkImageUsageFlags(data_json["members"]["usage"]);}();
VkImageCreateFlags flags
            ;
[&]() {
flags=deserialize_VkImageCreateFlags(data_json["members"]["flags"]);}();
VkImageFormatProperties* pImageFormatProperties
        ;
[&]() {

        if (data_json["members"]["pImageFormatProperties"].contains("null")){
        pImageFormatProperties=NULL;
        return;
        }
    pImageFormatProperties=(VkImageFormatProperties*)malloc(sizeof(VkImageFormatProperties));
[&]() {
*(pImageFormatProperties)=deserialize_VkImageFormatProperties(data_json["members"]["pImageFormatProperties"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceImageFormatProperties)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceImageFormatProperties");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceImageFormatProperties)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceImageFormatProperties");
    }  
    
auto return_value=call_function(physicalDevice, format, type, tiling, usage, flags, pImageFormatProperties);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_nOhJBBf=json({});
    return serialize_VkResult(return_value);}();
result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["format"]=[&]() {
    json return_ESSNhLl=json({});
    return serialize_VkFormat(format);}();
result["members"]["type"]=[&]() {
    json return_riYevWa=json({});
    return serialize_VkImageType(type);}();
result["members"]["tiling"]=[&]() {
    json return_UkQGtiM=json({});
    return serialize_VkImageTiling(tiling);}();
result["members"]["usage"]=[&]() {
    json return_QwDsmvQ=json({});
    return serialize_VkImageUsageFlags(usage);}();
result["members"]["flags"]=[&]() {
    json return_tBBADJd=json({});
    return serialize_VkImageCreateFlags(flags);}();
result["members"]["pImageFormatProperties"]=[&]() {
    json return_bJlBypv=json({});
    
        if (pImageFormatProperties==NULL){
            return_bJlBypv["null"]=true;
            return return_bJlBypv;
        }
        return_bJlBypv=[&]() {
    json return_eqQLVKU=json({});
    return serialize_VkImageFormatProperties(*pImageFormatProperties);}();
return return_bJlBypv;}();

        writeToConn(result);
    }

    void handle_vkCreateDevice(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
VkDeviceCreateInfo* pCreateInfo
            ;
[&]() {
VkDeviceCreateInfo* temp_zEAmwqT;[&]() {

        if (data_json["members"]["pCreateInfo"].contains("null")){
        temp_zEAmwqT=NULL;
        return;
        }
    temp_zEAmwqT=(VkDeviceCreateInfo*)malloc(sizeof(VkDeviceCreateInfo));
[&]() {
*(temp_zEAmwqT)=deserialize_VkDeviceCreateInfo(data_json["members"]["pCreateInfo"]);}();
}();pCreateInfo=temp_zEAmwqT;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkDevice* pDevice
        ;
[&]() {

        if (data_json["members"]["pDevice"].contains("null")){
        pDevice=NULL;
        return;
        }
    pDevice=(VkDevice*)malloc(sizeof(VkDevice));
[&]() {
*(pDevice)=deserialize_VkDevice(data_json["members"]["pDevice"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreateDevice)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateDevice");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreateDevice)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateDevice");
    }  
    
auto return_value=call_function(physicalDevice, pCreateInfo, pAllocator, pDevice);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_WnNTeVV=json({});
    return serialize_VkResult(return_value);}();
result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["pCreateInfo"]=[&]() {
    json return_rdXjMLJ=json({});
    
        if (pCreateInfo==NULL){
            return_rdXjMLJ["null"]=true;
            return return_rdXjMLJ;
        }
        return_rdXjMLJ=[&]() {
    json return_ohUrILX=json({});
    return serialize_VkDeviceCreateInfo(*pCreateInfo);}();
return return_rdXjMLJ;}();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pDevice"]=[&]() {
    json return_mEaCsnj=json({});
    
        if (pDevice==NULL){
            return_mEaCsnj["null"]=true;
            return return_mEaCsnj;
        }
        return_mEaCsnj=[&]() {
    json return_YVINSjY=json({});
    return serialize_VkDevice(*pDevice);}();
return return_mEaCsnj;}();

        writeToConn(result);
    }

    void handle_vkDestroyDevice(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkDestroyDevice)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyDevice");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkDestroyDevice)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyDevice");
    }  
    
call_function(device, pAllocator);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();

        writeToConn(result);
    }

    void handle_vkEnumerateInstanceVersion(json data_json){
    //Will only be called by the server
    
uint32_t* pApiVersion
        ;
[&]() {

        if (data_json["members"]["pApiVersion"].contains("null")){
        pApiVersion=NULL;
        return;
        }
    pApiVersion=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pApiVersion)=deserialize_uint32_t(data_json["members"]["pApiVersion"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkEnumerateInstanceVersion)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkEnumerateInstanceVersion");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkEnumerateInstanceVersion)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkEnumerateInstanceVersion");
    }  
    
auto return_value=call_function(pApiVersion);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_ziXFjbb=json({});
    return serialize_VkResult(return_value);}();
result["members"]["pApiVersion"]=[&]() {
    json return_dYdaZSt=json({});
    
        if (pApiVersion==NULL){
            return_dYdaZSt["null"]=true;
            return return_dYdaZSt;
        }
        return_dYdaZSt=[&]() {
    json return_cILWFUW=json({});
    return serialize_uint32_t(*pApiVersion);}();
return return_dYdaZSt;}();

        writeToConn(result);
    }

    void handle_vkEnumerateInstanceLayerProperties(json data_json){
    //Will only be called by the server
    
uint32_t* pPropertyCount
            ;
[&]() {

        if (data_json["members"]["pPropertyCount"].contains("null")){
        pPropertyCount=NULL;
        return;
        }
    pPropertyCount=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pPropertyCount)=deserialize_uint32_t(data_json["members"]["pPropertyCount"]);}();
}();
VkLayerProperties* pProperties
        ;
[&]() {

        if (data_json["members"]["pProperties"].contains("null")){
        pProperties=NULL;
        return;
        }
    pProperties=(VkLayerProperties*)malloc(*pPropertyCount*sizeof(VkLayerProperties));
        for (int VdejBXK=0; VdejBXK < *pPropertyCount; VdejBXK++){
            [&]() {
pProperties[VdejBXK]=deserialize_VkLayerProperties(data_json["members"]["pProperties"]["members"][VdejBXK]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkEnumerateInstanceLayerProperties)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkEnumerateInstanceLayerProperties");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkEnumerateInstanceLayerProperties)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkEnumerateInstanceLayerProperties");
    }  
    
auto return_value=call_function(pPropertyCount, pProperties);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_mkeEijq=json({});
    return serialize_VkResult(return_value);}();
result["members"]["pPropertyCount"]=[&]() {
    json return_MnYOHdG=json({});
    
        if (pPropertyCount==NULL){
            return_MnYOHdG["null"]=true;
            return return_MnYOHdG;
        }
        return_MnYOHdG=[&]() {
    json return_rPOmKzR=json({});
    return serialize_uint32_t(*pPropertyCount);}();
return return_MnYOHdG;}();
result["members"]["pProperties"]=[&]() {
    json return_wvbQLft=json({});
    
        if (pProperties==NULL){
            return_wvbQLft["null"]=true;
            return return_wvbQLft;
        }
        
        return_wvbQLft["members"]={};
        for(int wvbQLft=0; wvbQLft < *pPropertyCount; wvbQLft++){
            json temp;
            temp=[&]() {
    json return_WGRsCUz=json({});
    return serialize_VkLayerProperties(pProperties[wvbQLft]);}();
            return_wvbQLft["members"].push_back(temp);
        }
        return return_wvbQLft;
        }();

        writeToConn(result);
    }

    void handle_vkEnumerateInstanceExtensionProperties(json data_json){
    //Will only be called by the server
    
char* pLayerName
            ;
[&]() {
char* temp_rAtvgFK;[&]() {

        if (data_json["members"]["pLayerName"].contains("null")){
        temp_rAtvgFK=NULL;
        return;
        }
    temp_rAtvgFK=deserialize_char_p(data_json["members"]["pLayerName"]);
}();pLayerName=temp_rAtvgFK;}();
uint32_t* pPropertyCount
            ;
[&]() {

        if (data_json["members"]["pPropertyCount"].contains("null")){
        pPropertyCount=NULL;
        return;
        }
    pPropertyCount=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pPropertyCount)=deserialize_uint32_t(data_json["members"]["pPropertyCount"]);}();
}();
VkExtensionProperties* pProperties
        ;
[&]() {

        if (data_json["members"]["pProperties"].contains("null")){
        pProperties=NULL;
        return;
        }
    pProperties=(VkExtensionProperties*)malloc(*pPropertyCount*sizeof(VkExtensionProperties));
        for (int jQZGUEJ=0; jQZGUEJ < *pPropertyCount; jQZGUEJ++){
            [&]() {
pProperties[jQZGUEJ]=deserialize_VkExtensionProperties(data_json["members"]["pProperties"]["members"][jQZGUEJ]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkEnumerateInstanceExtensionProperties)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkEnumerateInstanceExtensionProperties");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkEnumerateInstanceExtensionProperties)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkEnumerateInstanceExtensionProperties");
    }  
    
auto return_value=call_function(pLayerName, pPropertyCount, pProperties);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_dJbLXzx=json({});
    return serialize_VkResult(return_value);}();
result["members"]["pLayerName"]=[&]() {
    json return_GVAKxQC=json({});
    
        if (pLayerName==NULL){
            return_GVAKxQC["null"]=true;
            return return_GVAKxQC;
        }
        return serialize_char_p(pLayerName);
}();
result["members"]["pPropertyCount"]=[&]() {
    json return_MnYOHdG=json({});
    
        if (pPropertyCount==NULL){
            return_MnYOHdG["null"]=true;
            return return_MnYOHdG;
        }
        return_MnYOHdG=[&]() {
    json return_rPOmKzR=json({});
    return serialize_uint32_t(*pPropertyCount);}();
return return_MnYOHdG;}();
result["members"]["pProperties"]=[&]() {
    json return_FGyOCov=json({});
    
        if (pProperties==NULL){
            return_FGyOCov["null"]=true;
            return return_FGyOCov;
        }
        
        return_FGyOCov["members"]={};
        for(int FGyOCov=0; FGyOCov < *pPropertyCount; FGyOCov++){
            json temp;
            temp=[&]() {
    json return_gJpGkaF=json({});
    return serialize_VkExtensionProperties(pProperties[FGyOCov]);}();
            return_FGyOCov["members"].push_back(temp);
        }
        return return_FGyOCov;
        }();

        writeToConn(result);
    }

    void handle_vkEnumerateDeviceLayerProperties(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
uint32_t* pPropertyCount
            ;
[&]() {

        if (data_json["members"]["pPropertyCount"].contains("null")){
        pPropertyCount=NULL;
        return;
        }
    pPropertyCount=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pPropertyCount)=deserialize_uint32_t(data_json["members"]["pPropertyCount"]);}();
}();
VkLayerProperties* pProperties
        ;
[&]() {

        if (data_json["members"]["pProperties"].contains("null")){
        pProperties=NULL;
        return;
        }
    pProperties=(VkLayerProperties*)malloc(*pPropertyCount*sizeof(VkLayerProperties));
        for (int VdejBXK=0; VdejBXK < *pPropertyCount; VdejBXK++){
            [&]() {
pProperties[VdejBXK]=deserialize_VkLayerProperties(data_json["members"]["pProperties"]["members"][VdejBXK]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkEnumerateDeviceLayerProperties)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkEnumerateDeviceLayerProperties");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkEnumerateDeviceLayerProperties)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkEnumerateDeviceLayerProperties");
    }  
    
auto return_value=call_function(physicalDevice, pPropertyCount, pProperties);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_OGIuEFp=json({});
    return serialize_VkResult(return_value);}();
result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["pPropertyCount"]=[&]() {
    json return_MnYOHdG=json({});
    
        if (pPropertyCount==NULL){
            return_MnYOHdG["null"]=true;
            return return_MnYOHdG;
        }
        return_MnYOHdG=[&]() {
    json return_rPOmKzR=json({});
    return serialize_uint32_t(*pPropertyCount);}();
return return_MnYOHdG;}();
result["members"]["pProperties"]=[&]() {
    json return_wvbQLft=json({});
    
        if (pProperties==NULL){
            return_wvbQLft["null"]=true;
            return return_wvbQLft;
        }
        
        return_wvbQLft["members"]={};
        for(int wvbQLft=0; wvbQLft < *pPropertyCount; wvbQLft++){
            json temp;
            temp=[&]() {
    json return_WGRsCUz=json({});
    return serialize_VkLayerProperties(pProperties[wvbQLft]);}();
            return_wvbQLft["members"].push_back(temp);
        }
        return return_wvbQLft;
        }();

        writeToConn(result);
    }

    void handle_vkEnumerateDeviceExtensionProperties(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
char* pLayerName
            ;
[&]() {
char* temp_rAtvgFK;[&]() {

        if (data_json["members"]["pLayerName"].contains("null")){
        temp_rAtvgFK=NULL;
        return;
        }
    temp_rAtvgFK=deserialize_char_p(data_json["members"]["pLayerName"]);
}();pLayerName=temp_rAtvgFK;}();
uint32_t* pPropertyCount
            ;
[&]() {

        if (data_json["members"]["pPropertyCount"].contains("null")){
        pPropertyCount=NULL;
        return;
        }
    pPropertyCount=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pPropertyCount)=deserialize_uint32_t(data_json["members"]["pPropertyCount"]);}();
}();
VkExtensionProperties* pProperties
        ;
[&]() {

        if (data_json["members"]["pProperties"].contains("null")){
        pProperties=NULL;
        return;
        }
    pProperties=(VkExtensionProperties*)malloc(*pPropertyCount*sizeof(VkExtensionProperties));
        for (int jQZGUEJ=0; jQZGUEJ < *pPropertyCount; jQZGUEJ++){
            [&]() {
pProperties[jQZGUEJ]=deserialize_VkExtensionProperties(data_json["members"]["pProperties"]["members"][jQZGUEJ]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkEnumerateDeviceExtensionProperties)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkEnumerateDeviceExtensionProperties");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkEnumerateDeviceExtensionProperties)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkEnumerateDeviceExtensionProperties");
    }  
    
auto return_value=call_function(physicalDevice, pLayerName, pPropertyCount, pProperties);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_csItoDZ=json({});
    return serialize_VkResult(return_value);}();
result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["pLayerName"]=[&]() {
    json return_GVAKxQC=json({});
    
        if (pLayerName==NULL){
            return_GVAKxQC["null"]=true;
            return return_GVAKxQC;
        }
        return serialize_char_p(pLayerName);
}();
result["members"]["pPropertyCount"]=[&]() {
    json return_MnYOHdG=json({});
    
        if (pPropertyCount==NULL){
            return_MnYOHdG["null"]=true;
            return return_MnYOHdG;
        }
        return_MnYOHdG=[&]() {
    json return_rPOmKzR=json({});
    return serialize_uint32_t(*pPropertyCount);}();
return return_MnYOHdG;}();
result["members"]["pProperties"]=[&]() {
    json return_FGyOCov=json({});
    
        if (pProperties==NULL){
            return_FGyOCov["null"]=true;
            return return_FGyOCov;
        }
        
        return_FGyOCov["members"]={};
        for(int FGyOCov=0; FGyOCov < *pPropertyCount; FGyOCov++){
            json temp;
            temp=[&]() {
    json return_gJpGkaF=json({});
    return serialize_VkExtensionProperties(pProperties[FGyOCov]);}();
            return_FGyOCov["members"].push_back(temp);
        }
        return return_FGyOCov;
        }();

        writeToConn(result);
    }

    void handle_vkGetDeviceQueue(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
uint32_t queueFamilyIndex
            ;
[&]() {
queueFamilyIndex=deserialize_uint32_t(data_json["members"]["queueFamilyIndex"]);}();
uint32_t queueIndex
            ;
[&]() {
queueIndex=deserialize_uint32_t(data_json["members"]["queueIndex"]);}();
VkQueue* pQueue
        ;
[&]() {

        if (data_json["members"]["pQueue"].contains("null")){
        pQueue=NULL;
        return;
        }
    pQueue=(VkQueue*)malloc(sizeof(VkQueue));
[&]() {
*(pQueue)=deserialize_VkQueue(data_json["members"]["pQueue"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetDeviceQueue)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDeviceQueue");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetDeviceQueue)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDeviceQueue");
    }  
    
call_function(device, queueFamilyIndex, queueIndex, pQueue);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["queueFamilyIndex"]=[&]() {
    json return_lNjYgkI=json({});
    return serialize_uint32_t(queueFamilyIndex);}();
result["members"]["queueIndex"]=[&]() {
    json return_GWdHyyn=json({});
    return serialize_uint32_t(queueIndex);}();
result["members"]["pQueue"]=[&]() {
    json return_WCWxniJ=json({});
    
        if (pQueue==NULL){
            return_WCWxniJ["null"]=true;
            return return_WCWxniJ;
        }
        return_WCWxniJ=[&]() {
    json return_NsjiHxF=json({});
    return serialize_VkQueue(*pQueue);}();
return return_WCWxniJ;}();

        writeToConn(result);
    }

    void handle_vkQueueSubmit(json data_json){
    //Will only be called by the server
    
VkQueue queue
            ;
[&]() {
queue=deserialize_VkQueue(data_json["members"]["queue"]);}();
uint32_t submitCount
            ;
[&]() {
submitCount=deserialize_uint32_t(data_json["members"]["submitCount"]);}();
VkSubmitInfo* pSubmits
            ;
[&]() {
VkSubmitInfo* temp_WwgQeAl;[&]() {

        if (data_json["members"]["pSubmits"].contains("null")){
        temp_WwgQeAl=NULL;
        return;
        }
    temp_WwgQeAl=(VkSubmitInfo*)malloc(submitCount*sizeof(VkSubmitInfo));
        for (int ADmVgVd=0; ADmVgVd < submitCount; ADmVgVd++){
            [&]() {
temp_WwgQeAl[ADmVgVd]=deserialize_VkSubmitInfo(data_json["members"]["pSubmits"]["members"][ADmVgVd]);}();;
        }
        }();pSubmits=temp_WwgQeAl;}();
VkFence fence
        ;
[&]() {
fence=deserialize_VkFence(data_json["members"]["fence"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkQueueSubmit)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkQueueSubmit");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkQueueSubmit)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkQueueSubmit");
    }  
    
auto return_value=call_function(queue, submitCount, pSubmits, fence);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_iYXUkMT=json({});
    return serialize_VkResult(return_value);}();
result["members"]["queue"]=[&]() {
    json return_KYhcIBS=json({});
    return serialize_VkQueue(queue);}();
result["members"]["submitCount"]=[&]() {
    json return_CvaHQdk=json({});
    return serialize_uint32_t(submitCount);}();
result["members"]["pSubmits"]=[&]() {
    json return_DGEUHbB=json({});
    
        if (pSubmits==NULL){
            return_DGEUHbB["null"]=true;
            return return_DGEUHbB;
        }
        
        return_DGEUHbB["members"]={};
        for(int DGEUHbB=0; DGEUHbB < submitCount; DGEUHbB++){
            json temp;
            temp=[&]() {
    json return_ZMNyrAC=json({});
    return serialize_VkSubmitInfo(pSubmits[DGEUHbB]);}();
            return_DGEUHbB["members"].push_back(temp);
        }
        return return_DGEUHbB;
        }();
result["members"]["fence"]=[&]() {
    json return_rCCyTaL=json({});
    return serialize_VkFence(fence);}();

        writeToConn(result);
    }

    void handle_vkQueueWaitIdle(json data_json){
    //Will only be called by the server
    
VkQueue queue
        ;
[&]() {
queue=deserialize_VkQueue(data_json["members"]["queue"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkQueueWaitIdle)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkQueueWaitIdle");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkQueueWaitIdle)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkQueueWaitIdle");
    }  
    
auto return_value=call_function(queue);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_YMuzIDy=json({});
    return serialize_VkResult(return_value);}();
result["members"]["queue"]=[&]() {
    json return_sfVGawV=json({});
    return serialize_VkQueue(queue);}();

        writeToConn(result);
    }

    void handle_vkDeviceWaitIdle(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkDeviceWaitIdle)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDeviceWaitIdle");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkDeviceWaitIdle)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDeviceWaitIdle");
    }  
    
auto return_value=call_function(device);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_wPhMxAV=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();

        writeToConn(result);
    }

    void handle_vkAllocateMemory(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkMemoryAllocateInfo* pAllocateInfo
            ;
[&]() {
VkMemoryAllocateInfo* temp_CpMiiQO;[&]() {

        if (data_json["members"]["pAllocateInfo"].contains("null")){
        temp_CpMiiQO=NULL;
        return;
        }
    temp_CpMiiQO=(VkMemoryAllocateInfo*)malloc(sizeof(VkMemoryAllocateInfo));
[&]() {
*(temp_CpMiiQO)=deserialize_VkMemoryAllocateInfo(data_json["members"]["pAllocateInfo"]);}();
}();pAllocateInfo=temp_CpMiiQO;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkDeviceMemory* pMemory
        ;
[&]() {

        if (data_json["members"]["pMemory"].contains("null")){
        pMemory=NULL;
        return;
        }
    pMemory=(VkDeviceMemory*)malloc(sizeof(VkDeviceMemory));
[&]() {
*(pMemory)=deserialize_VkDeviceMemory(data_json["members"]["pMemory"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkAllocateMemory)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkAllocateMemory");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkAllocateMemory)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkAllocateMemory");
    }  
    
auto return_value=call_function(device, pAllocateInfo, pAllocator, pMemory);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_zvCgzrC=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pAllocateInfo"]=[&]() {
    json return_OuQtKle=json({});
    
        if (pAllocateInfo==NULL){
            return_OuQtKle["null"]=true;
            return return_OuQtKle;
        }
        return_OuQtKle=[&]() {
    json return_sJfsLTf=json({});
    return serialize_VkMemoryAllocateInfo(*pAllocateInfo);}();
return return_OuQtKle;}();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pMemory"]=[&]() {
    json return_ngdHqpy=json({});
    
        if (pMemory==NULL){
            return_ngdHqpy["null"]=true;
            return return_ngdHqpy;
        }
        return_ngdHqpy=[&]() {
    json return_sJMwtse=json({});
    return serialize_VkDeviceMemory(*pMemory);}();
return return_ngdHqpy;}();

        writeToConn(result);
    }

    void handle_vkFreeMemory(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDeviceMemory memory
            ;
[&]() {
memory=deserialize_VkDeviceMemory(data_json["members"]["memory"]);}();
VkAllocationCallbacks* pAllocator
        ;
[&]() {
VkAllocationCallbacks* temp_VAmhMvJ;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_VAmhMvJ=NULL;
        return;
        }
    temp_VAmhMvJ=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_VAmhMvJ)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_VAmhMvJ;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkFreeMemory)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkFreeMemory");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkFreeMemory)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkFreeMemory");
    }  
    
call_function(device, memory, pAllocator);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["memory"]=[&]() {
    json return_OJZmLJB=json({});
    return serialize_VkDeviceMemory(memory);}();
result["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();

        writeToConn(result);
    }

    void handle_vkMapMemory(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDeviceMemory memory
            ;
[&]() {
memory=deserialize_VkDeviceMemory(data_json["members"]["memory"]);}();
VkDeviceSize offset
            ;
[&]() {
[&]() {
offset=deserialize_uint64_t(data_json["members"]["offset"]);}();}();
VkDeviceSize size
            ;
[&]() {
[&]() {
size=deserialize_uint64_t(data_json["members"]["size"]);}();}();
VkMemoryMapFlags flags
            ;
[&]() {
flags=deserialize_VkMemoryMapFlags(data_json["members"]["flags"]);}();
void** ppData
        ;
[&]() {

        if (data_json["members"]["ppData"].contains("null")){
        ppData=NULL;
        return;
        }
    ppData=(void**)malloc(sizeof(void*));
[&]() {

        if (data_json["members"]["ppData"].contains("null")){
        *(ppData)=NULL;
        return;
        }
    *(ppData)=deserialize_void_p(data_json["members"]["ppData"]);
}();
}();

        auto info=new MemInfo();
        
        VkDeviceSize whole_size;
        vkGetDeviceMemoryCommitment(device,memory,&whole_size);
        info->size=whole_size;
        
        devicememory_to_mem_info[(uintptr_t)memory]=info;
        

    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkMapMemory)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkMapMemory");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkMapMemory)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkMapMemory");
    }  
    
auto return_value=call_function(device, memory, offset, size, flags, ppData);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_yoqlchr=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["memory"]=[&]() {
    json return_OJZmLJB=json({});
    return serialize_VkDeviceMemory(memory);}();
result["members"]["offset"]=[&]() {
    json return_vTtZMhj=json({});
    return_vTtZMhj=[&]() {
    json return_eEWibmR=json({});
    return serialize_uint64_t(offset);}();return return_vTtZMhj;}();
result["members"]["size"]=[&]() {
    json return_EcDMigR=json({});
    return_EcDMigR=[&]() {
    json return_vDcVgJV=json({});
    return serialize_uint64_t(size);}();return return_EcDMigR;}();
result["members"]["flags"]=[&]() {
    json return_rVhBgWW=json({});
    return serialize_VkMemoryMapFlags(flags);}();
result["members"]["ppData"]=[&]() {
    json return_PsFVEjO=json({});
    
        if (ppData==NULL){
            return_PsFVEjO["null"]=true;
            return return_PsFVEjO;
        }
        return_PsFVEjO=[&]() {
    json return_KWNLtTl=json({});
    
        if (*ppData==NULL){
            return_KWNLtTl["null"]=true;
            return return_KWNLtTl;
        }
        return serialize_void_p(*ppData);
}();
return return_PsFVEjO;}();

        info->mem=*ppData;
        

        writeToConn(result);
    }

    void handle_vkUnmapMemory(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDeviceMemory memory
        ;
[&]() {
memory=deserialize_VkDeviceMemory(data_json["members"]["memory"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkUnmapMemory)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkUnmapMemory");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkUnmapMemory)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkUnmapMemory");
    }  
    
call_function(device, memory);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["memory"]=[&]() {
    json return_OcfqswQ=json({});
    return serialize_VkDeviceMemory(memory);}();

        writeToConn(result);
    }

    void handle_vkFlushMappedMemoryRanges(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
uint32_t memoryRangeCount
            ;
[&]() {
memoryRangeCount=deserialize_uint32_t(data_json["members"]["memoryRangeCount"]);}();
VkMappedMemoryRange* pMemoryRanges
        ;
[&]() {
VkMappedMemoryRange* temp_WMecqPI;[&]() {

        if (data_json["members"]["pMemoryRanges"].contains("null")){
        temp_WMecqPI=NULL;
        return;
        }
    temp_WMecqPI=(VkMappedMemoryRange*)malloc(memoryRangeCount*sizeof(VkMappedMemoryRange));
        for (int aBQucmO=0; aBQucmO < memoryRangeCount; aBQucmO++){
            [&]() {
temp_WMecqPI[aBQucmO]=deserialize_VkMappedMemoryRange(data_json["members"]["pMemoryRanges"]["members"][aBQucmO]);}();;
        }
        }();pMemoryRanges=temp_WMecqPI;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkFlushMappedMemoryRanges)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkFlushMappedMemoryRanges");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkFlushMappedMemoryRanges)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkFlushMappedMemoryRanges");
    }  
    
auto return_value=call_function(device, memoryRangeCount, pMemoryRanges);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_xqBJKIN=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["memoryRangeCount"]=[&]() {
    json return_DrXrDAT=json({});
    return serialize_uint32_t(memoryRangeCount);}();
result["members"]["pMemoryRanges"]=[&]() {
    json return_GCDQESk=json({});
    
        if (pMemoryRanges==NULL){
            return_GCDQESk["null"]=true;
            return return_GCDQESk;
        }
        
        return_GCDQESk["members"]={};
        for(int GCDQESk=0; GCDQESk < memoryRangeCount; GCDQESk++){
            json temp;
            temp=[&]() {
    json return_sqNTOHy=json({});
    return serialize_VkMappedMemoryRange(pMemoryRanges[GCDQESk]);}();
            return_GCDQESk["members"].push_back(temp);
        }
        return return_GCDQESk;
        }();

        writeToConn(result);
    }

    void handle_vkInvalidateMappedMemoryRanges(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
uint32_t memoryRangeCount
            ;
[&]() {
memoryRangeCount=deserialize_uint32_t(data_json["members"]["memoryRangeCount"]);}();
VkMappedMemoryRange* pMemoryRanges
        ;
[&]() {
VkMappedMemoryRange* temp_WMecqPI;[&]() {

        if (data_json["members"]["pMemoryRanges"].contains("null")){
        temp_WMecqPI=NULL;
        return;
        }
    temp_WMecqPI=(VkMappedMemoryRange*)malloc(memoryRangeCount*sizeof(VkMappedMemoryRange));
        for (int aBQucmO=0; aBQucmO < memoryRangeCount; aBQucmO++){
            [&]() {
temp_WMecqPI[aBQucmO]=deserialize_VkMappedMemoryRange(data_json["members"]["pMemoryRanges"]["members"][aBQucmO]);}();;
        }
        }();pMemoryRanges=temp_WMecqPI;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkInvalidateMappedMemoryRanges)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkInvalidateMappedMemoryRanges");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkInvalidateMappedMemoryRanges)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkInvalidateMappedMemoryRanges");
    }  
    
auto return_value=call_function(device, memoryRangeCount, pMemoryRanges);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_vKvNBei=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["memoryRangeCount"]=[&]() {
    json return_DrXrDAT=json({});
    return serialize_uint32_t(memoryRangeCount);}();
result["members"]["pMemoryRanges"]=[&]() {
    json return_GCDQESk=json({});
    
        if (pMemoryRanges==NULL){
            return_GCDQESk["null"]=true;
            return return_GCDQESk;
        }
        
        return_GCDQESk["members"]={};
        for(int GCDQESk=0; GCDQESk < memoryRangeCount; GCDQESk++){
            json temp;
            temp=[&]() {
    json return_sqNTOHy=json({});
    return serialize_VkMappedMemoryRange(pMemoryRanges[GCDQESk]);}();
            return_GCDQESk["members"].push_back(temp);
        }
        return return_GCDQESk;
        }();

        writeToConn(result);
    }

    void handle_vkGetDeviceMemoryCommitment(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDeviceMemory memory
            ;
[&]() {
memory=deserialize_VkDeviceMemory(data_json["members"]["memory"]);}();
VkDeviceSize* pCommittedMemoryInBytes
        ;
[&]() {

        if (data_json["members"]["pCommittedMemoryInBytes"].contains("null")){
        pCommittedMemoryInBytes=NULL;
        return;
        }
    [&]() {

        if (data_json["members"]["pCommittedMemoryInBytes"].contains("null")){
        pCommittedMemoryInBytes=NULL;
        return;
        }
    pCommittedMemoryInBytes=(uint64_t*)malloc(sizeof(uint64_t));
[&]() {
*(pCommittedMemoryInBytes)=deserialize_uint64_t(data_json["members"]["pCommittedMemoryInBytes"]);}();
}();}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetDeviceMemoryCommitment)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDeviceMemoryCommitment");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetDeviceMemoryCommitment)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDeviceMemoryCommitment");
    }  
    
call_function(device, memory, pCommittedMemoryInBytes);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["memory"]=[&]() {
    json return_OJZmLJB=json({});
    return serialize_VkDeviceMemory(memory);}();
result["members"]["pCommittedMemoryInBytes"]=[&]() {
    json return_pfhFKRe=json({});
    
        if (pCommittedMemoryInBytes==NULL){
            return_pfhFKRe["null"]=true;
            return return_pfhFKRe;
        }
        return_pfhFKRe=[&]() {
    json return_abkpmRp=json({});
    return_abkpmRp=[&]() {
    json return_AOQlmjb=json({});
    return serialize_uint64_t(*pCommittedMemoryInBytes);}();return return_abkpmRp;}();
return return_pfhFKRe;}();

        writeToConn(result);
    }

    void handle_vkGetBufferMemoryRequirements(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkBuffer buffer
            ;
[&]() {
buffer=deserialize_VkBuffer(data_json["members"]["buffer"]);}();
VkMemoryRequirements* pMemoryRequirements
        ;
[&]() {

        if (data_json["members"]["pMemoryRequirements"].contains("null")){
        pMemoryRequirements=NULL;
        return;
        }
    pMemoryRequirements=(VkMemoryRequirements*)malloc(sizeof(VkMemoryRequirements));
[&]() {
*(pMemoryRequirements)=deserialize_VkMemoryRequirements(data_json["members"]["pMemoryRequirements"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetBufferMemoryRequirements)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetBufferMemoryRequirements");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetBufferMemoryRequirements)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetBufferMemoryRequirements");
    }  
    
call_function(device, buffer, pMemoryRequirements);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["buffer"]=[&]() {
    json return_Fjwvwzv=json({});
    return serialize_VkBuffer(buffer);}();
result["members"]["pMemoryRequirements"]=[&]() {
    json return_eielYFe=json({});
    
        if (pMemoryRequirements==NULL){
            return_eielYFe["null"]=true;
            return return_eielYFe;
        }
        return_eielYFe=[&]() {
    json return_VipSsCT=json({});
    return serialize_VkMemoryRequirements(*pMemoryRequirements);}();
return return_eielYFe;}();

        writeToConn(result);
    }

    void handle_vkBindBufferMemory(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkBuffer buffer
            ;
[&]() {
buffer=deserialize_VkBuffer(data_json["members"]["buffer"]);}();
VkDeviceMemory memory
            ;
[&]() {
memory=deserialize_VkDeviceMemory(data_json["members"]["memory"]);}();
VkDeviceSize memoryOffset
        ;
[&]() {
[&]() {
memoryOffset=deserialize_uint64_t(data_json["members"]["memoryOffset"]);}();}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkBindBufferMemory)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkBindBufferMemory");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkBindBufferMemory)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkBindBufferMemory");
    }  
    
auto return_value=call_function(device, buffer, memory, memoryOffset);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_naImKic=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["buffer"]=[&]() {
    json return_Fjwvwzv=json({});
    return serialize_VkBuffer(buffer);}();
result["members"]["memory"]=[&]() {
    json return_OJZmLJB=json({});
    return serialize_VkDeviceMemory(memory);}();
result["members"]["memoryOffset"]=[&]() {
    json return_CwypnMR=json({});
    return_CwypnMR=[&]() {
    json return_fnrwJYv=json({});
    return serialize_uint64_t(memoryOffset);}();return return_CwypnMR;}();

        writeToConn(result);
    }

    void handle_vkGetImageMemoryRequirements(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkImage image
            ;
[&]() {
image=deserialize_VkImage(data_json["members"]["image"]);}();
VkMemoryRequirements* pMemoryRequirements
        ;
[&]() {

        if (data_json["members"]["pMemoryRequirements"].contains("null")){
        pMemoryRequirements=NULL;
        return;
        }
    pMemoryRequirements=(VkMemoryRequirements*)malloc(sizeof(VkMemoryRequirements));
[&]() {
*(pMemoryRequirements)=deserialize_VkMemoryRequirements(data_json["members"]["pMemoryRequirements"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetImageMemoryRequirements)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetImageMemoryRequirements");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetImageMemoryRequirements)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetImageMemoryRequirements");
    }  
    
call_function(device, image, pMemoryRequirements);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["image"]=[&]() {
    json return_fgEkUQK=json({});
    return serialize_VkImage(image);}();
result["members"]["pMemoryRequirements"]=[&]() {
    json return_eielYFe=json({});
    
        if (pMemoryRequirements==NULL){
            return_eielYFe["null"]=true;
            return return_eielYFe;
        }
        return_eielYFe=[&]() {
    json return_VipSsCT=json({});
    return serialize_VkMemoryRequirements(*pMemoryRequirements);}();
return return_eielYFe;}();

        writeToConn(result);
    }

    void handle_vkBindImageMemory(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkImage image
            ;
[&]() {
image=deserialize_VkImage(data_json["members"]["image"]);}();
VkDeviceMemory memory
            ;
[&]() {
memory=deserialize_VkDeviceMemory(data_json["members"]["memory"]);}();
VkDeviceSize memoryOffset
        ;
[&]() {
[&]() {
memoryOffset=deserialize_uint64_t(data_json["members"]["memoryOffset"]);}();}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkBindImageMemory)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkBindImageMemory");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkBindImageMemory)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkBindImageMemory");
    }  
    
auto return_value=call_function(device, image, memory, memoryOffset);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_fHebzZo=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["image"]=[&]() {
    json return_fgEkUQK=json({});
    return serialize_VkImage(image);}();
result["members"]["memory"]=[&]() {
    json return_OJZmLJB=json({});
    return serialize_VkDeviceMemory(memory);}();
result["members"]["memoryOffset"]=[&]() {
    json return_CwypnMR=json({});
    return_CwypnMR=[&]() {
    json return_fnrwJYv=json({});
    return serialize_uint64_t(memoryOffset);}();return return_CwypnMR;}();

        writeToConn(result);
    }

    void handle_vkGetImageSparseMemoryRequirements(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkImage image
            ;
[&]() {
image=deserialize_VkImage(data_json["members"]["image"]);}();
uint32_t* pSparseMemoryRequirementCount
            ;
[&]() {

        if (data_json["members"]["pSparseMemoryRequirementCount"].contains("null")){
        pSparseMemoryRequirementCount=NULL;
        return;
        }
    pSparseMemoryRequirementCount=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pSparseMemoryRequirementCount)=deserialize_uint32_t(data_json["members"]["pSparseMemoryRequirementCount"]);}();
}();
VkSparseImageMemoryRequirements* pSparseMemoryRequirements
        ;
[&]() {

        if (data_json["members"]["pSparseMemoryRequirements"].contains("null")){
        pSparseMemoryRequirements=NULL;
        return;
        }
    pSparseMemoryRequirements=(VkSparseImageMemoryRequirements*)malloc(*pSparseMemoryRequirementCount*sizeof(VkSparseImageMemoryRequirements));
        for (int vUihJmc=0; vUihJmc < *pSparseMemoryRequirementCount; vUihJmc++){
            [&]() {
pSparseMemoryRequirements[vUihJmc]=deserialize_VkSparseImageMemoryRequirements(data_json["members"]["pSparseMemoryRequirements"]["members"][vUihJmc]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetImageSparseMemoryRequirements)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetImageSparseMemoryRequirements");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetImageSparseMemoryRequirements)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetImageSparseMemoryRequirements");
    }  
    
call_function(device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["image"]=[&]() {
    json return_fgEkUQK=json({});
    return serialize_VkImage(image);}();
result["members"]["pSparseMemoryRequirementCount"]=[&]() {
    json return_HoOHmri=json({});
    
        if (pSparseMemoryRequirementCount==NULL){
            return_HoOHmri["null"]=true;
            return return_HoOHmri;
        }
        return_HoOHmri=[&]() {
    json return_auEoviK=json({});
    return serialize_uint32_t(*pSparseMemoryRequirementCount);}();
return return_HoOHmri;}();
result["members"]["pSparseMemoryRequirements"]=[&]() {
    json return_JcvvZOZ=json({});
    
        if (pSparseMemoryRequirements==NULL){
            return_JcvvZOZ["null"]=true;
            return return_JcvvZOZ;
        }
        
        return_JcvvZOZ["members"]={};
        for(int JcvvZOZ=0; JcvvZOZ < *pSparseMemoryRequirementCount; JcvvZOZ++){
            json temp;
            temp=[&]() {
    json return_dYklWqu=json({});
    return serialize_VkSparseImageMemoryRequirements(pSparseMemoryRequirements[JcvvZOZ]);}();
            return_JcvvZOZ["members"].push_back(temp);
        }
        return return_JcvvZOZ;
        }();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceSparseImageFormatProperties(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
VkFormat format
            ;
[&]() {
format=deserialize_VkFormat(data_json["members"]["format"]);}();
VkImageType type
            ;
[&]() {
type=deserialize_VkImageType(data_json["members"]["type"]);}();
VkSampleCountFlagBits samples
            ;
[&]() {
samples=deserialize_VkSampleCountFlagBits(data_json["members"]["samples"]);}();
VkImageUsageFlags usage
            ;
[&]() {
usage=deserialize_VkImageUsageFlags(data_json["members"]["usage"]);}();
VkImageTiling tiling
            ;
[&]() {
tiling=deserialize_VkImageTiling(data_json["members"]["tiling"]);}();
uint32_t* pPropertyCount
            ;
[&]() {

        if (data_json["members"]["pPropertyCount"].contains("null")){
        pPropertyCount=NULL;
        return;
        }
    pPropertyCount=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pPropertyCount)=deserialize_uint32_t(data_json["members"]["pPropertyCount"]);}();
}();
VkSparseImageFormatProperties* pProperties
        ;
[&]() {

        if (data_json["members"]["pProperties"].contains("null")){
        pProperties=NULL;
        return;
        }
    pProperties=(VkSparseImageFormatProperties*)malloc(*pPropertyCount*sizeof(VkSparseImageFormatProperties));
        for (int XtzjSDX=0; XtzjSDX < *pPropertyCount; XtzjSDX++){
            [&]() {
pProperties[XtzjSDX]=deserialize_VkSparseImageFormatProperties(data_json["members"]["pProperties"]["members"][XtzjSDX]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceSparseImageFormatProperties)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceSparseImageFormatProperties");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceSparseImageFormatProperties)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceSparseImageFormatProperties");
    }  
    
call_function(physicalDevice, format, type, samples, usage, tiling, pPropertyCount, pProperties);
json result=json({});
        result["type"]="Response";
    

result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["format"]=[&]() {
    json return_ESSNhLl=json({});
    return serialize_VkFormat(format);}();
result["members"]["type"]=[&]() {
    json return_riYevWa=json({});
    return serialize_VkImageType(type);}();
result["members"]["samples"]=[&]() {
    json return_EMNaydU=json({});
    return serialize_VkSampleCountFlagBits(samples);}();
result["members"]["usage"]=[&]() {
    json return_QwDsmvQ=json({});
    return serialize_VkImageUsageFlags(usage);}();
result["members"]["tiling"]=[&]() {
    json return_UkQGtiM=json({});
    return serialize_VkImageTiling(tiling);}();
result["members"]["pPropertyCount"]=[&]() {
    json return_MnYOHdG=json({});
    
        if (pPropertyCount==NULL){
            return_MnYOHdG["null"]=true;
            return return_MnYOHdG;
        }
        return_MnYOHdG=[&]() {
    json return_rPOmKzR=json({});
    return serialize_uint32_t(*pPropertyCount);}();
return return_MnYOHdG;}();
result["members"]["pProperties"]=[&]() {
    json return_ToyRIQZ=json({});
    
        if (pProperties==NULL){
            return_ToyRIQZ["null"]=true;
            return return_ToyRIQZ;
        }
        
        return_ToyRIQZ["members"]={};
        for(int ToyRIQZ=0; ToyRIQZ < *pPropertyCount; ToyRIQZ++){
            json temp;
            temp=[&]() {
    json return_ABgEkiQ=json({});
    return serialize_VkSparseImageFormatProperties(pProperties[ToyRIQZ]);}();
            return_ToyRIQZ["members"].push_back(temp);
        }
        return return_ToyRIQZ;
        }();

        writeToConn(result);
    }

    void handle_vkQueueBindSparse(json data_json){
    //Will only be called by the server
    
VkQueue queue
            ;
[&]() {
queue=deserialize_VkQueue(data_json["members"]["queue"]);}();
uint32_t bindInfoCount
            ;
[&]() {
bindInfoCount=deserialize_uint32_t(data_json["members"]["bindInfoCount"]);}();
VkBindSparseInfo* pBindInfo
            ;
[&]() {
VkBindSparseInfo* temp_NucLKkC;[&]() {

        if (data_json["members"]["pBindInfo"].contains("null")){
        temp_NucLKkC=NULL;
        return;
        }
    temp_NucLKkC=(VkBindSparseInfo*)malloc(bindInfoCount*sizeof(VkBindSparseInfo));
        for (int EzHEurx=0; EzHEurx < bindInfoCount; EzHEurx++){
            [&]() {
temp_NucLKkC[EzHEurx]=deserialize_VkBindSparseInfo(data_json["members"]["pBindInfo"]["members"][EzHEurx]);}();;
        }
        }();pBindInfo=temp_NucLKkC;}();
VkFence fence
        ;
[&]() {
fence=deserialize_VkFence(data_json["members"]["fence"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkQueueBindSparse)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkQueueBindSparse");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkQueueBindSparse)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkQueueBindSparse");
    }  
    
auto return_value=call_function(queue, bindInfoCount, pBindInfo, fence);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_hWrQpkg=json({});
    return serialize_VkResult(return_value);}();
result["members"]["queue"]=[&]() {
    json return_KYhcIBS=json({});
    return serialize_VkQueue(queue);}();
result["members"]["bindInfoCount"]=[&]() {
    json return_nEBKnUd=json({});
    return serialize_uint32_t(bindInfoCount);}();
result["members"]["pBindInfo"]=[&]() {
    json return_rsnbalh=json({});
    
        if (pBindInfo==NULL){
            return_rsnbalh["null"]=true;
            return return_rsnbalh;
        }
        
        return_rsnbalh["members"]={};
        for(int rsnbalh=0; rsnbalh < bindInfoCount; rsnbalh++){
            json temp;
            temp=[&]() {
    json return_MdVJjrJ=json({});
    return serialize_VkBindSparseInfo(pBindInfo[rsnbalh]);}();
            return_rsnbalh["members"].push_back(temp);
        }
        return return_rsnbalh;
        }();
result["members"]["fence"]=[&]() {
    json return_rCCyTaL=json({});
    return serialize_VkFence(fence);}();

        writeToConn(result);
    }

    void handle_vkCreateFence(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkFenceCreateInfo* pCreateInfo
            ;
[&]() {
VkFenceCreateInfo* temp_TGLoodZ;[&]() {

        if (data_json["members"]["pCreateInfo"].contains("null")){
        temp_TGLoodZ=NULL;
        return;
        }
    temp_TGLoodZ=(VkFenceCreateInfo*)malloc(sizeof(VkFenceCreateInfo));
[&]() {
*(temp_TGLoodZ)=deserialize_VkFenceCreateInfo(data_json["members"]["pCreateInfo"]);}();
}();pCreateInfo=temp_TGLoodZ;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkFence* pFence
        ;
[&]() {

        if (data_json["members"]["pFence"].contains("null")){
        pFence=NULL;
        return;
        }
    pFence=(VkFence*)malloc(sizeof(VkFence));
[&]() {
*(pFence)=deserialize_VkFence(data_json["members"]["pFence"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreateFence)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateFence");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreateFence)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateFence");
    }  
    
auto return_value=call_function(device, pCreateInfo, pAllocator, pFence);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_rsNSJAM=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pCreateInfo"]=[&]() {
    json return_InhPisi=json({});
    
        if (pCreateInfo==NULL){
            return_InhPisi["null"]=true;
            return return_InhPisi;
        }
        return_InhPisi=[&]() {
    json return_XymvyAa=json({});
    return serialize_VkFenceCreateInfo(*pCreateInfo);}();
return return_InhPisi;}();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pFence"]=[&]() {
    json return_zBsTPmH=json({});
    
        if (pFence==NULL){
            return_zBsTPmH["null"]=true;
            return return_zBsTPmH;
        }
        return_zBsTPmH=[&]() {
    json return_WJcpXwr=json({});
    return serialize_VkFence(*pFence);}();
return return_zBsTPmH;}();

        writeToConn(result);
    }

    void handle_vkDestroyFence(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkFence fence
            ;
[&]() {
fence=deserialize_VkFence(data_json["members"]["fence"]);}();
VkAllocationCallbacks* pAllocator
        ;
[&]() {
VkAllocationCallbacks* temp_VAmhMvJ;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_VAmhMvJ=NULL;
        return;
        }
    temp_VAmhMvJ=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_VAmhMvJ)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_VAmhMvJ;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkDestroyFence)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyFence");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkDestroyFence)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyFence");
    }  
    
call_function(device, fence, pAllocator);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["fence"]=[&]() {
    json return_uUveTbE=json({});
    return serialize_VkFence(fence);}();
result["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();

        writeToConn(result);
    }

    void handle_vkResetFences(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
uint32_t fenceCount
            ;
[&]() {
fenceCount=deserialize_uint32_t(data_json["members"]["fenceCount"]);}();
VkFence* pFences
        ;
[&]() {
VkFence* temp_DNHQkje;[&]() {

        if (data_json["members"]["pFences"].contains("null")){
        temp_DNHQkje=NULL;
        return;
        }
    temp_DNHQkje=(VkFence*)malloc(fenceCount*sizeof(VkFence));
        for (int kyySwzS=0; kyySwzS < fenceCount; kyySwzS++){
            [&]() {
temp_DNHQkje[kyySwzS]=deserialize_VkFence(data_json["members"]["pFences"]["members"][kyySwzS]);}();;
        }
        }();pFences=temp_DNHQkje;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkResetFences)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkResetFences");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkResetFences)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkResetFences");
    }  
    
auto return_value=call_function(device, fenceCount, pFences);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_GDQrmoP=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["fenceCount"]=[&]() {
    json return_oLxqUfl=json({});
    return serialize_uint32_t(fenceCount);}();
result["members"]["pFences"]=[&]() {
    json return_noqqmFa=json({});
    
        if (pFences==NULL){
            return_noqqmFa["null"]=true;
            return return_noqqmFa;
        }
        
        return_noqqmFa["members"]={};
        for(int noqqmFa=0; noqqmFa < fenceCount; noqqmFa++){
            json temp;
            temp=[&]() {
    json return_yvTvfks=json({});
    return serialize_VkFence(pFences[noqqmFa]);}();
            return_noqqmFa["members"].push_back(temp);
        }
        return return_noqqmFa;
        }();

        writeToConn(result);
    }

    void handle_vkGetFenceStatus(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkFence fence
        ;
[&]() {
fence=deserialize_VkFence(data_json["members"]["fence"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetFenceStatus)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetFenceStatus");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetFenceStatus)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetFenceStatus");
    }  
    
auto return_value=call_function(device, fence);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_tagmcSJ=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["fence"]=[&]() {
    json return_rCCyTaL=json({});
    return serialize_VkFence(fence);}();

        writeToConn(result);
    }

    void handle_vkWaitForFences(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
uint32_t fenceCount
            ;
[&]() {
fenceCount=deserialize_uint32_t(data_json["members"]["fenceCount"]);}();
VkFence* pFences
            ;
[&]() {
VkFence* temp_SWsPwdD;[&]() {

        if (data_json["members"]["pFences"].contains("null")){
        temp_SWsPwdD=NULL;
        return;
        }
    temp_SWsPwdD=(VkFence*)malloc(fenceCount*sizeof(VkFence));
        for (int jwsWRSE=0; jwsWRSE < fenceCount; jwsWRSE++){
            [&]() {
temp_SWsPwdD[jwsWRSE]=deserialize_VkFence(data_json["members"]["pFences"]["members"][jwsWRSE]);}();;
        }
        }();pFences=temp_SWsPwdD;}();
VkBool32 waitAll
            ;
[&]() {
[&]() {
waitAll=deserialize_uint32_t(data_json["members"]["waitAll"]);}();}();
uint64_t timeout
        ;
[&]() {
timeout=deserialize_uint64_t(data_json["members"]["timeout"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkWaitForFences)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkWaitForFences");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkWaitForFences)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkWaitForFences");
    }  
    
auto return_value=call_function(device, fenceCount, pFences, waitAll, timeout);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_PZkZeqC=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["fenceCount"]=[&]() {
    json return_oLxqUfl=json({});
    return serialize_uint32_t(fenceCount);}();
result["members"]["pFences"]=[&]() {
    json return_YFbfWmG=json({});
    
        if (pFences==NULL){
            return_YFbfWmG["null"]=true;
            return return_YFbfWmG;
        }
        
        return_YFbfWmG["members"]={};
        for(int YFbfWmG=0; YFbfWmG < fenceCount; YFbfWmG++){
            json temp;
            temp=[&]() {
    json return_RwAVgvQ=json({});
    return serialize_VkFence(pFences[YFbfWmG]);}();
            return_YFbfWmG["members"].push_back(temp);
        }
        return return_YFbfWmG;
        }();
result["members"]["waitAll"]=[&]() {
    json return_EYJJfHR=json({});
    return_EYJJfHR=[&]() {
    json return_otgNsTv=json({});
    return serialize_uint32_t(waitAll);}();return return_EYJJfHR;}();
result["members"]["timeout"]=[&]() {
    json return_CYRKadv=json({});
    return serialize_uint64_t(timeout);}();

   for (auto& device_memory: *(currStruct()->mem_to_sync)){
       if (devicememory_to_mem_info.count(device_memory)){
           auto& mem_info=devicememory_to_mem_info[device_memory];
              Sync(mem_info->mem,mem_info->size);
           }
   }
   currStruct()->mem_to_sync->clear();
   

        writeToConn(result);
    }

    void handle_vkCreateSemaphore(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkSemaphoreCreateInfo* pCreateInfo
            ;
[&]() {
VkSemaphoreCreateInfo* temp_jzNrugP;[&]() {

        if (data_json["members"]["pCreateInfo"].contains("null")){
        temp_jzNrugP=NULL;
        return;
        }
    temp_jzNrugP=(VkSemaphoreCreateInfo*)malloc(sizeof(VkSemaphoreCreateInfo));
[&]() {
*(temp_jzNrugP)=deserialize_VkSemaphoreCreateInfo(data_json["members"]["pCreateInfo"]);}();
}();pCreateInfo=temp_jzNrugP;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkSemaphore* pSemaphore
        ;
[&]() {

        if (data_json["members"]["pSemaphore"].contains("null")){
        pSemaphore=NULL;
        return;
        }
    pSemaphore=(VkSemaphore*)malloc(sizeof(VkSemaphore));
[&]() {
*(pSemaphore)=deserialize_VkSemaphore(data_json["members"]["pSemaphore"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreateSemaphore)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateSemaphore");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreateSemaphore)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateSemaphore");
    }  
    
auto return_value=call_function(device, pCreateInfo, pAllocator, pSemaphore);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_tSHAGtr=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pCreateInfo"]=[&]() {
    json return_xmVbtzK=json({});
    
        if (pCreateInfo==NULL){
            return_xmVbtzK["null"]=true;
            return return_xmVbtzK;
        }
        return_xmVbtzK=[&]() {
    json return_jEVpenU=json({});
    return serialize_VkSemaphoreCreateInfo(*pCreateInfo);}();
return return_xmVbtzK;}();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pSemaphore"]=[&]() {
    json return_EFOALCS=json({});
    
        if (pSemaphore==NULL){
            return_EFOALCS["null"]=true;
            return return_EFOALCS;
        }
        return_EFOALCS=[&]() {
    json return_lOFLhag=json({});
    return serialize_VkSemaphore(*pSemaphore);}();
return return_EFOALCS;}();

        writeToConn(result);
    }

    void handle_vkDestroySemaphore(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkSemaphore semaphore
            ;
[&]() {
semaphore=deserialize_VkSemaphore(data_json["members"]["semaphore"]);}();
VkAllocationCallbacks* pAllocator
        ;
[&]() {
VkAllocationCallbacks* temp_VAmhMvJ;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_VAmhMvJ=NULL;
        return;
        }
    temp_VAmhMvJ=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_VAmhMvJ)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_VAmhMvJ;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkDestroySemaphore)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroySemaphore");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkDestroySemaphore)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroySemaphore");
    }  
    
call_function(device, semaphore, pAllocator);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["semaphore"]=[&]() {
    json return_NeBBGDW=json({});
    return serialize_VkSemaphore(semaphore);}();
result["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();

        writeToConn(result);
    }

    void handle_vkCreateEvent(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkEventCreateInfo* pCreateInfo
            ;
[&]() {
VkEventCreateInfo* temp_cWHZFGh;[&]() {

        if (data_json["members"]["pCreateInfo"].contains("null")){
        temp_cWHZFGh=NULL;
        return;
        }
    temp_cWHZFGh=(VkEventCreateInfo*)malloc(sizeof(VkEventCreateInfo));
[&]() {
*(temp_cWHZFGh)=deserialize_VkEventCreateInfo(data_json["members"]["pCreateInfo"]);}();
}();pCreateInfo=temp_cWHZFGh;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkEvent* pEvent
        ;
[&]() {

        if (data_json["members"]["pEvent"].contains("null")){
        pEvent=NULL;
        return;
        }
    pEvent=(VkEvent*)malloc(sizeof(VkEvent));
[&]() {
*(pEvent)=deserialize_VkEvent(data_json["members"]["pEvent"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreateEvent)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateEvent");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreateEvent)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateEvent");
    }  
    
auto return_value=call_function(device, pCreateInfo, pAllocator, pEvent);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_AIrbRsQ=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pCreateInfo"]=[&]() {
    json return_hsCmSQi=json({});
    
        if (pCreateInfo==NULL){
            return_hsCmSQi["null"]=true;
            return return_hsCmSQi;
        }
        return_hsCmSQi=[&]() {
    json return_IIeSGQi=json({});
    return serialize_VkEventCreateInfo(*pCreateInfo);}();
return return_hsCmSQi;}();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pEvent"]=[&]() {
    json return_cvCJvFz=json({});
    
        if (pEvent==NULL){
            return_cvCJvFz["null"]=true;
            return return_cvCJvFz;
        }
        return_cvCJvFz=[&]() {
    json return_YdSuKCD=json({});
    return serialize_VkEvent(*pEvent);}();
return return_cvCJvFz;}();

        writeToConn(result);
    }

    void handle_vkDestroyEvent(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkEvent event
            ;
[&]() {
event=deserialize_VkEvent(data_json["members"]["event"]);}();
VkAllocationCallbacks* pAllocator
        ;
[&]() {
VkAllocationCallbacks* temp_VAmhMvJ;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_VAmhMvJ=NULL;
        return;
        }
    temp_VAmhMvJ=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_VAmhMvJ)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_VAmhMvJ;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkDestroyEvent)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyEvent");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkDestroyEvent)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyEvent");
    }  
    
call_function(device, event, pAllocator);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["event"]=[&]() {
    json return_LAeltAe=json({});
    return serialize_VkEvent(event);}();
result["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();

        writeToConn(result);
    }

    void handle_vkGetEventStatus(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkEvent event
        ;
[&]() {
event=deserialize_VkEvent(data_json["members"]["event"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetEventStatus)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetEventStatus");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetEventStatus)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetEventStatus");
    }  
    
auto return_value=call_function(device, event);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_yYVCazB=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["event"]=[&]() {
    json return_uUtwjXV=json({});
    return serialize_VkEvent(event);}();

        writeToConn(result);
    }

    void handle_vkSetEvent(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkEvent event
        ;
[&]() {
event=deserialize_VkEvent(data_json["members"]["event"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkSetEvent)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkSetEvent");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkSetEvent)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkSetEvent");
    }  
    
auto return_value=call_function(device, event);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_IgdoCPi=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["event"]=[&]() {
    json return_uUtwjXV=json({});
    return serialize_VkEvent(event);}();

        writeToConn(result);
    }

    void handle_vkResetEvent(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkEvent event
        ;
[&]() {
event=deserialize_VkEvent(data_json["members"]["event"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkResetEvent)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkResetEvent");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkResetEvent)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkResetEvent");
    }  
    
auto return_value=call_function(device, event);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_qdWzUCf=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["event"]=[&]() {
    json return_uUtwjXV=json({});
    return serialize_VkEvent(event);}();

        writeToConn(result);
    }

    void handle_vkCreateQueryPool(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkQueryPoolCreateInfo* pCreateInfo
            ;
[&]() {
VkQueryPoolCreateInfo* temp_GELfHEY;[&]() {

        if (data_json["members"]["pCreateInfo"].contains("null")){
        temp_GELfHEY=NULL;
        return;
        }
    temp_GELfHEY=(VkQueryPoolCreateInfo*)malloc(sizeof(VkQueryPoolCreateInfo));
[&]() {
*(temp_GELfHEY)=deserialize_VkQueryPoolCreateInfo(data_json["members"]["pCreateInfo"]);}();
}();pCreateInfo=temp_GELfHEY;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkQueryPool* pQueryPool
        ;
[&]() {

        if (data_json["members"]["pQueryPool"].contains("null")){
        pQueryPool=NULL;
        return;
        }
    pQueryPool=(VkQueryPool*)malloc(sizeof(VkQueryPool));
[&]() {
*(pQueryPool)=deserialize_VkQueryPool(data_json["members"]["pQueryPool"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreateQueryPool)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateQueryPool");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreateQueryPool)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateQueryPool");
    }  
    
auto return_value=call_function(device, pCreateInfo, pAllocator, pQueryPool);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_ymRHFNu=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pCreateInfo"]=[&]() {
    json return_IzEqsna=json({});
    
        if (pCreateInfo==NULL){
            return_IzEqsna["null"]=true;
            return return_IzEqsna;
        }
        return_IzEqsna=[&]() {
    json return_EtikQqZ=json({});
    return serialize_VkQueryPoolCreateInfo(*pCreateInfo);}();
return return_IzEqsna;}();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pQueryPool"]=[&]() {
    json return_NSHWQnu=json({});
    
        if (pQueryPool==NULL){
            return_NSHWQnu["null"]=true;
            return return_NSHWQnu;
        }
        return_NSHWQnu=[&]() {
    json return_QeQTTEO=json({});
    return serialize_VkQueryPool(*pQueryPool);}();
return return_NSHWQnu;}();

        writeToConn(result);
    }

    void handle_vkDestroyQueryPool(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkQueryPool queryPool
            ;
[&]() {
queryPool=deserialize_VkQueryPool(data_json["members"]["queryPool"]);}();
VkAllocationCallbacks* pAllocator
        ;
[&]() {
VkAllocationCallbacks* temp_VAmhMvJ;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_VAmhMvJ=NULL;
        return;
        }
    temp_VAmhMvJ=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_VAmhMvJ)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_VAmhMvJ;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkDestroyQueryPool)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyQueryPool");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkDestroyQueryPool)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyQueryPool");
    }  
    
call_function(device, queryPool, pAllocator);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["queryPool"]=[&]() {
    json return_hLGHCzh=json({});
    return serialize_VkQueryPool(queryPool);}();
result["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();

        writeToConn(result);
    }

    void handle_vkGetQueryPoolResults(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkQueryPool queryPool
            ;
[&]() {
queryPool=deserialize_VkQueryPool(data_json["members"]["queryPool"]);}();
uint32_t firstQuery
            ;
[&]() {
firstQuery=deserialize_uint32_t(data_json["members"]["firstQuery"]);}();
uint32_t queryCount
            ;
[&]() {
queryCount=deserialize_uint32_t(data_json["members"]["queryCount"]);}();
size_t dataSize
            ;
[&]() {
dataSize=deserialize_size_t(data_json["members"]["dataSize"]);}();
void* pData
            ;
[&]() {

        if (data_json["members"]["pData"].contains("null")){
        pData=NULL;
        return;
        }
    pData=deserialize_void_p(data_json["members"]["pData"]);
}();
VkDeviceSize stride
            ;
[&]() {
[&]() {
stride=deserialize_uint64_t(data_json["members"]["stride"]);}();}();
VkQueryResultFlags flags
        ;
[&]() {
flags=deserialize_VkQueryResultFlags(data_json["members"]["flags"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetQueryPoolResults)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetQueryPoolResults");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetQueryPoolResults)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetQueryPoolResults");
    }  
    
auto return_value=call_function(device, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_efwXJcX=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["queryPool"]=[&]() {
    json return_hLGHCzh=json({});
    return serialize_VkQueryPool(queryPool);}();
result["members"]["firstQuery"]=[&]() {
    json return_NDUBmTE=json({});
    return serialize_uint32_t(firstQuery);}();
result["members"]["queryCount"]=[&]() {
    json return_qTWGWQh=json({});
    return serialize_uint32_t(queryCount);}();
result["members"]["dataSize"]=[&]() {
    json return_mCuLMQj=json({});
    return serialize_size_t(dataSize);}();
result["members"]["pData"]=[&]() {
    json return_uMNHZoi=json({});
    
        if (pData==NULL){
            return_uMNHZoi["null"]=true;
            return return_uMNHZoi;
        }
        return serialize_void_p(pData);
}();
result["members"]["stride"]=[&]() {
    json return_MQAmiOM=json({});
    return_MQAmiOM=[&]() {
    json return_jeGZpau=json({});
    return serialize_uint64_t(stride);}();return return_MQAmiOM;}();
result["members"]["flags"]=[&]() {
    json return_ZmykXqP=json({});
    return serialize_VkQueryResultFlags(flags);}();

        writeToConn(result);
    }

    void handle_vkResetQueryPool(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkQueryPool queryPool
            ;
[&]() {
queryPool=deserialize_VkQueryPool(data_json["members"]["queryPool"]);}();
uint32_t firstQuery
            ;
[&]() {
firstQuery=deserialize_uint32_t(data_json["members"]["firstQuery"]);}();
uint32_t queryCount
        ;
[&]() {
queryCount=deserialize_uint32_t(data_json["members"]["queryCount"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkResetQueryPool)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkResetQueryPool");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkResetQueryPool)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkResetQueryPool");
    }  
    
call_function(device, queryPool, firstQuery, queryCount);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["queryPool"]=[&]() {
    json return_hLGHCzh=json({});
    return serialize_VkQueryPool(queryPool);}();
result["members"]["firstQuery"]=[&]() {
    json return_NDUBmTE=json({});
    return serialize_uint32_t(firstQuery);}();
result["members"]["queryCount"]=[&]() {
    json return_uMPzGuZ=json({});
    return serialize_uint32_t(queryCount);}();

        writeToConn(result);
    }

    void handle_vkResetQueryPoolEXT(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkQueryPool queryPool
            ;
[&]() {
queryPool=deserialize_VkQueryPool(data_json["members"]["queryPool"]);}();
uint32_t firstQuery
            ;
[&]() {
firstQuery=deserialize_uint32_t(data_json["members"]["firstQuery"]);}();
uint32_t queryCount
        ;
[&]() {
queryCount=deserialize_uint32_t(data_json["members"]["queryCount"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkResetQueryPoolEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkResetQueryPoolEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkResetQueryPoolEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkResetQueryPoolEXT");
    }  
    
call_function(device, queryPool, firstQuery, queryCount);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["queryPool"]=[&]() {
    json return_hLGHCzh=json({});
    return serialize_VkQueryPool(queryPool);}();
result["members"]["firstQuery"]=[&]() {
    json return_NDUBmTE=json({});
    return serialize_uint32_t(firstQuery);}();
result["members"]["queryCount"]=[&]() {
    json return_uMPzGuZ=json({});
    return serialize_uint32_t(queryCount);}();

        writeToConn(result);
    }

    void handle_vkCreateBuffer(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkBufferCreateInfo* pCreateInfo
            ;
[&]() {
VkBufferCreateInfo* temp_YakyfkW;[&]() {

        if (data_json["members"]["pCreateInfo"].contains("null")){
        temp_YakyfkW=NULL;
        return;
        }
    temp_YakyfkW=(VkBufferCreateInfo*)malloc(sizeof(VkBufferCreateInfo));
[&]() {
*(temp_YakyfkW)=deserialize_VkBufferCreateInfo(data_json["members"]["pCreateInfo"]);}();
}();pCreateInfo=temp_YakyfkW;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkBuffer* pBuffer
        ;
[&]() {

        if (data_json["members"]["pBuffer"].contains("null")){
        pBuffer=NULL;
        return;
        }
    pBuffer=(VkBuffer*)malloc(sizeof(VkBuffer));
[&]() {
*(pBuffer)=deserialize_VkBuffer(data_json["members"]["pBuffer"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreateBuffer)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateBuffer");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreateBuffer)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateBuffer");
    }  
    
auto return_value=call_function(device, pCreateInfo, pAllocator, pBuffer);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_norLKAA=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pCreateInfo"]=[&]() {
    json return_pyjotWD=json({});
    
        if (pCreateInfo==NULL){
            return_pyjotWD["null"]=true;
            return return_pyjotWD;
        }
        return_pyjotWD=[&]() {
    json return_fsnuqZv=json({});
    return serialize_VkBufferCreateInfo(*pCreateInfo);}();
return return_pyjotWD;}();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pBuffer"]=[&]() {
    json return_BRVliuB=json({});
    
        if (pBuffer==NULL){
            return_BRVliuB["null"]=true;
            return return_BRVliuB;
        }
        return_BRVliuB=[&]() {
    json return_BSXCqYn=json({});
    return serialize_VkBuffer(*pBuffer);}();
return return_BRVliuB;}();

        writeToConn(result);
    }

    void handle_vkDestroyBuffer(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkBuffer buffer
            ;
[&]() {
buffer=deserialize_VkBuffer(data_json["members"]["buffer"]);}();
VkAllocationCallbacks* pAllocator
        ;
[&]() {
VkAllocationCallbacks* temp_VAmhMvJ;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_VAmhMvJ=NULL;
        return;
        }
    temp_VAmhMvJ=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_VAmhMvJ)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_VAmhMvJ;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkDestroyBuffer)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyBuffer");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkDestroyBuffer)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyBuffer");
    }  
    
call_function(device, buffer, pAllocator);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["buffer"]=[&]() {
    json return_Fjwvwzv=json({});
    return serialize_VkBuffer(buffer);}();
result["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();

        writeToConn(result);
    }

    void handle_vkCreateBufferView(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkBufferViewCreateInfo* pCreateInfo
            ;
[&]() {
VkBufferViewCreateInfo* temp_gHasNsh;[&]() {

        if (data_json["members"]["pCreateInfo"].contains("null")){
        temp_gHasNsh=NULL;
        return;
        }
    temp_gHasNsh=(VkBufferViewCreateInfo*)malloc(sizeof(VkBufferViewCreateInfo));
[&]() {
*(temp_gHasNsh)=deserialize_VkBufferViewCreateInfo(data_json["members"]["pCreateInfo"]);}();
}();pCreateInfo=temp_gHasNsh;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkBufferView* pView
        ;
[&]() {

        if (data_json["members"]["pView"].contains("null")){
        pView=NULL;
        return;
        }
    pView=(VkBufferView*)malloc(sizeof(VkBufferView));
[&]() {
*(pView)=deserialize_VkBufferView(data_json["members"]["pView"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreateBufferView)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateBufferView");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreateBufferView)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateBufferView");
    }  
    
auto return_value=call_function(device, pCreateInfo, pAllocator, pView);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_xJCremX=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pCreateInfo"]=[&]() {
    json return_RsKbxoF=json({});
    
        if (pCreateInfo==NULL){
            return_RsKbxoF["null"]=true;
            return return_RsKbxoF;
        }
        return_RsKbxoF=[&]() {
    json return_nmkmoBG=json({});
    return serialize_VkBufferViewCreateInfo(*pCreateInfo);}();
return return_RsKbxoF;}();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pView"]=[&]() {
    json return_TqkDHmq=json({});
    
        if (pView==NULL){
            return_TqkDHmq["null"]=true;
            return return_TqkDHmq;
        }
        return_TqkDHmq=[&]() {
    json return_gkhjAJZ=json({});
    return serialize_VkBufferView(*pView);}();
return return_TqkDHmq;}();

        writeToConn(result);
    }

    void handle_vkDestroyBufferView(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkBufferView bufferView
            ;
[&]() {
bufferView=deserialize_VkBufferView(data_json["members"]["bufferView"]);}();
VkAllocationCallbacks* pAllocator
        ;
[&]() {
VkAllocationCallbacks* temp_VAmhMvJ;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_VAmhMvJ=NULL;
        return;
        }
    temp_VAmhMvJ=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_VAmhMvJ)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_VAmhMvJ;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkDestroyBufferView)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyBufferView");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkDestroyBufferView)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyBufferView");
    }  
    
call_function(device, bufferView, pAllocator);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["bufferView"]=[&]() {
    json return_fMELlWC=json({});
    return serialize_VkBufferView(bufferView);}();
result["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();

        writeToConn(result);
    }

    void handle_vkCreateImage(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkImageCreateInfo* pCreateInfo
            ;
[&]() {
VkImageCreateInfo* temp_RjzjCMY;[&]() {

        if (data_json["members"]["pCreateInfo"].contains("null")){
        temp_RjzjCMY=NULL;
        return;
        }
    temp_RjzjCMY=(VkImageCreateInfo*)malloc(sizeof(VkImageCreateInfo));
[&]() {
*(temp_RjzjCMY)=deserialize_VkImageCreateInfo(data_json["members"]["pCreateInfo"]);}();
}();pCreateInfo=temp_RjzjCMY;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkImage* pImage
        ;
[&]() {

        if (data_json["members"]["pImage"].contains("null")){
        pImage=NULL;
        return;
        }
    pImage=(VkImage*)malloc(sizeof(VkImage));
[&]() {
*(pImage)=deserialize_VkImage(data_json["members"]["pImage"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreateImage)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateImage");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreateImage)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateImage");
    }  
    
auto return_value=call_function(device, pCreateInfo, pAllocator, pImage);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_iZwbOZu=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pCreateInfo"]=[&]() {
    json return_VmFEleQ=json({});
    
        if (pCreateInfo==NULL){
            return_VmFEleQ["null"]=true;
            return return_VmFEleQ;
        }
        return_VmFEleQ=[&]() {
    json return_mtsHVIS=json({});
    return serialize_VkImageCreateInfo(*pCreateInfo);}();
return return_VmFEleQ;}();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pImage"]=[&]() {
    json return_uVXSXiL=json({});
    
        if (pImage==NULL){
            return_uVXSXiL["null"]=true;
            return return_uVXSXiL;
        }
        return_uVXSXiL=[&]() {
    json return_WJifzww=json({});
    return serialize_VkImage(*pImage);}();
return return_uVXSXiL;}();

        writeToConn(result);
    }

    void handle_vkDestroyImage(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkImage image
            ;
[&]() {
image=deserialize_VkImage(data_json["members"]["image"]);}();
VkAllocationCallbacks* pAllocator
        ;
[&]() {
VkAllocationCallbacks* temp_VAmhMvJ;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_VAmhMvJ=NULL;
        return;
        }
    temp_VAmhMvJ=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_VAmhMvJ)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_VAmhMvJ;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkDestroyImage)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyImage");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkDestroyImage)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyImage");
    }  
    
call_function(device, image, pAllocator);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["image"]=[&]() {
    json return_fgEkUQK=json({});
    return serialize_VkImage(image);}();
result["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();

        writeToConn(result);
    }

    void handle_vkGetImageSubresourceLayout(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkImage image
            ;
[&]() {
image=deserialize_VkImage(data_json["members"]["image"]);}();
VkImageSubresource* pSubresource
            ;
[&]() {
VkImageSubresource* temp_fqUkLHN;[&]() {

        if (data_json["members"]["pSubresource"].contains("null")){
        temp_fqUkLHN=NULL;
        return;
        }
    temp_fqUkLHN=(VkImageSubresource*)malloc(sizeof(VkImageSubresource));
[&]() {
*(temp_fqUkLHN)=deserialize_VkImageSubresource(data_json["members"]["pSubresource"]);}();
}();pSubresource=temp_fqUkLHN;}();
VkSubresourceLayout* pLayout
        ;
[&]() {

        if (data_json["members"]["pLayout"].contains("null")){
        pLayout=NULL;
        return;
        }
    pLayout=(VkSubresourceLayout*)malloc(sizeof(VkSubresourceLayout));
[&]() {
*(pLayout)=deserialize_VkSubresourceLayout(data_json["members"]["pLayout"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetImageSubresourceLayout)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetImageSubresourceLayout");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetImageSubresourceLayout)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetImageSubresourceLayout");
    }  
    
call_function(device, image, pSubresource, pLayout);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["image"]=[&]() {
    json return_fgEkUQK=json({});
    return serialize_VkImage(image);}();
result["members"]["pSubresource"]=[&]() {
    json return_GsBhOLL=json({});
    
        if (pSubresource==NULL){
            return_GsBhOLL["null"]=true;
            return return_GsBhOLL;
        }
        return_GsBhOLL=[&]() {
    json return_aIMvvfq=json({});
    return serialize_VkImageSubresource(*pSubresource);}();
return return_GsBhOLL;}();
result["members"]["pLayout"]=[&]() {
    json return_qgpJVgb=json({});
    
        if (pLayout==NULL){
            return_qgpJVgb["null"]=true;
            return return_qgpJVgb;
        }
        return_qgpJVgb=[&]() {
    json return_DLdfbcJ=json({});
    return serialize_VkSubresourceLayout(*pLayout);}();
return return_qgpJVgb;}();

        writeToConn(result);
    }

    void handle_vkCreateImageView(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkImageViewCreateInfo* pCreateInfo
            ;
[&]() {
VkImageViewCreateInfo* temp_OsfGfVA;[&]() {

        if (data_json["members"]["pCreateInfo"].contains("null")){
        temp_OsfGfVA=NULL;
        return;
        }
    temp_OsfGfVA=(VkImageViewCreateInfo*)malloc(sizeof(VkImageViewCreateInfo));
[&]() {
*(temp_OsfGfVA)=deserialize_VkImageViewCreateInfo(data_json["members"]["pCreateInfo"]);}();
}();pCreateInfo=temp_OsfGfVA;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkImageView* pView
        ;
[&]() {

        if (data_json["members"]["pView"].contains("null")){
        pView=NULL;
        return;
        }
    pView=(VkImageView*)malloc(sizeof(VkImageView));
[&]() {
*(pView)=deserialize_VkImageView(data_json["members"]["pView"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreateImageView)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateImageView");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreateImageView)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateImageView");
    }  
    
auto return_value=call_function(device, pCreateInfo, pAllocator, pView);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_PhYLWoQ=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pCreateInfo"]=[&]() {
    json return_vMCNnLC=json({});
    
        if (pCreateInfo==NULL){
            return_vMCNnLC["null"]=true;
            return return_vMCNnLC;
        }
        return_vMCNnLC=[&]() {
    json return_LHPkLYG=json({});
    return serialize_VkImageViewCreateInfo(*pCreateInfo);}();
return return_vMCNnLC;}();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pView"]=[&]() {
    json return_GRDMWAC=json({});
    
        if (pView==NULL){
            return_GRDMWAC["null"]=true;
            return return_GRDMWAC;
        }
        return_GRDMWAC=[&]() {
    json return_fziRgds=json({});
    return serialize_VkImageView(*pView);}();
return return_GRDMWAC;}();

        writeToConn(result);
    }

    void handle_vkDestroyImageView(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkImageView imageView
            ;
[&]() {
imageView=deserialize_VkImageView(data_json["members"]["imageView"]);}();
VkAllocationCallbacks* pAllocator
        ;
[&]() {
VkAllocationCallbacks* temp_VAmhMvJ;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_VAmhMvJ=NULL;
        return;
        }
    temp_VAmhMvJ=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_VAmhMvJ)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_VAmhMvJ;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkDestroyImageView)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyImageView");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkDestroyImageView)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyImageView");
    }  
    
call_function(device, imageView, pAllocator);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["imageView"]=[&]() {
    json return_TXEDCEI=json({});
    return serialize_VkImageView(imageView);}();
result["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();

        writeToConn(result);
    }

    void handle_vkCreateShaderModule(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkShaderModuleCreateInfo* pCreateInfo
            ;
[&]() {
VkShaderModuleCreateInfo* temp_BBNFLIv;[&]() {

        if (data_json["members"]["pCreateInfo"].contains("null")){
        temp_BBNFLIv=NULL;
        return;
        }
    temp_BBNFLIv=(VkShaderModuleCreateInfo*)malloc(sizeof(VkShaderModuleCreateInfo));
[&]() {
*(temp_BBNFLIv)=deserialize_VkShaderModuleCreateInfo(data_json["members"]["pCreateInfo"]);}();
}();pCreateInfo=temp_BBNFLIv;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkShaderModule* pShaderModule
        ;
[&]() {

        if (data_json["members"]["pShaderModule"].contains("null")){
        pShaderModule=NULL;
        return;
        }
    pShaderModule=(VkShaderModule*)malloc(sizeof(VkShaderModule));
[&]() {
*(pShaderModule)=deserialize_VkShaderModule(data_json["members"]["pShaderModule"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreateShaderModule)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateShaderModule");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreateShaderModule)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateShaderModule");
    }  
    
auto return_value=call_function(device, pCreateInfo, pAllocator, pShaderModule);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_gbwoqLF=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pCreateInfo"]=[&]() {
    json return_zQuPJLA=json({});
    
        if (pCreateInfo==NULL){
            return_zQuPJLA["null"]=true;
            return return_zQuPJLA;
        }
        return_zQuPJLA=[&]() {
    json return_BZkuQie=json({});
    return serialize_VkShaderModuleCreateInfo(*pCreateInfo);}();
return return_zQuPJLA;}();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pShaderModule"]=[&]() {
    json return_CDnEWkq=json({});
    
        if (pShaderModule==NULL){
            return_CDnEWkq["null"]=true;
            return return_CDnEWkq;
        }
        return_CDnEWkq=[&]() {
    json return_OceuVmd=json({});
    return serialize_VkShaderModule(*pShaderModule);}();
return return_CDnEWkq;}();

        writeToConn(result);
    }

    void handle_vkDestroyShaderModule(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkShaderModule shaderModule
            ;
[&]() {
shaderModule=deserialize_VkShaderModule(data_json["members"]["shaderModule"]);}();
VkAllocationCallbacks* pAllocator
        ;
[&]() {
VkAllocationCallbacks* temp_VAmhMvJ;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_VAmhMvJ=NULL;
        return;
        }
    temp_VAmhMvJ=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_VAmhMvJ)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_VAmhMvJ;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkDestroyShaderModule)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyShaderModule");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkDestroyShaderModule)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyShaderModule");
    }  
    
call_function(device, shaderModule, pAllocator);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["shaderModule"]=[&]() {
    json return_StBFTOZ=json({});
    return serialize_VkShaderModule(shaderModule);}();
result["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();

        writeToConn(result);
    }

    void handle_vkCreatePipelineCache(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkPipelineCacheCreateInfo* pCreateInfo
            ;
[&]() {
VkPipelineCacheCreateInfo* temp_WEajcrs;[&]() {

        if (data_json["members"]["pCreateInfo"].contains("null")){
        temp_WEajcrs=NULL;
        return;
        }
    temp_WEajcrs=(VkPipelineCacheCreateInfo*)malloc(sizeof(VkPipelineCacheCreateInfo));
[&]() {
*(temp_WEajcrs)=deserialize_VkPipelineCacheCreateInfo(data_json["members"]["pCreateInfo"]);}();
}();pCreateInfo=temp_WEajcrs;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkPipelineCache* pPipelineCache
        ;
[&]() {

        if (data_json["members"]["pPipelineCache"].contains("null")){
        pPipelineCache=NULL;
        return;
        }
    pPipelineCache=(VkPipelineCache*)malloc(sizeof(VkPipelineCache));
[&]() {
*(pPipelineCache)=deserialize_VkPipelineCache(data_json["members"]["pPipelineCache"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreatePipelineCache)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreatePipelineCache");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreatePipelineCache)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreatePipelineCache");
    }  
    
auto return_value=call_function(device, pCreateInfo, pAllocator, pPipelineCache);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_borBjsv=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pCreateInfo"]=[&]() {
    json return_LUlinZP=json({});
    
        if (pCreateInfo==NULL){
            return_LUlinZP["null"]=true;
            return return_LUlinZP;
        }
        return_LUlinZP=[&]() {
    json return_EJPMmxu=json({});
    return serialize_VkPipelineCacheCreateInfo(*pCreateInfo);}();
return return_LUlinZP;}();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pPipelineCache"]=[&]() {
    json return_qHxmzrm=json({});
    
        if (pPipelineCache==NULL){
            return_qHxmzrm["null"]=true;
            return return_qHxmzrm;
        }
        return_qHxmzrm=[&]() {
    json return_gvaZlMv=json({});
    return serialize_VkPipelineCache(*pPipelineCache);}();
return return_qHxmzrm;}();

        writeToConn(result);
    }

    void handle_vkDestroyPipelineCache(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkPipelineCache pipelineCache
            ;
[&]() {
pipelineCache=deserialize_VkPipelineCache(data_json["members"]["pipelineCache"]);}();
VkAllocationCallbacks* pAllocator
        ;
[&]() {
VkAllocationCallbacks* temp_VAmhMvJ;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_VAmhMvJ=NULL;
        return;
        }
    temp_VAmhMvJ=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_VAmhMvJ)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_VAmhMvJ;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkDestroyPipelineCache)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyPipelineCache");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkDestroyPipelineCache)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyPipelineCache");
    }  
    
call_function(device, pipelineCache, pAllocator);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pipelineCache"]=[&]() {
    json return_sRQlJCP=json({});
    return serialize_VkPipelineCache(pipelineCache);}();
result["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();

        writeToConn(result);
    }

    void handle_vkGetPipelineCacheData(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkPipelineCache pipelineCache
            ;
[&]() {
pipelineCache=deserialize_VkPipelineCache(data_json["members"]["pipelineCache"]);}();
size_t* pDataSize
            ;
[&]() {

        if (data_json["members"]["pDataSize"].contains("null")){
        pDataSize=NULL;
        return;
        }
    pDataSize=(size_t*)malloc(sizeof(size_t));
[&]() {
*(pDataSize)=deserialize_size_t(data_json["members"]["pDataSize"]);}();
}();
void* pData
        ;
[&]() {

        if (data_json["members"]["pData"].contains("null")){
        pData=NULL;
        return;
        }
    pData=deserialize_void_p(data_json["members"]["pData"]);
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPipelineCacheData)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPipelineCacheData");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPipelineCacheData)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPipelineCacheData");
    }  
    
auto return_value=call_function(device, pipelineCache, pDataSize, pData);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_mXkkLJK=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pipelineCache"]=[&]() {
    json return_sRQlJCP=json({});
    return serialize_VkPipelineCache(pipelineCache);}();
result["members"]["pDataSize"]=[&]() {
    json return_DeyPpRh=json({});
    
        if (pDataSize==NULL){
            return_DeyPpRh["null"]=true;
            return return_DeyPpRh;
        }
        return_DeyPpRh=[&]() {
    json return_ffvzSRv=json({});
    return serialize_size_t(*pDataSize);}();
return return_DeyPpRh;}();
result["members"]["pData"]=[&]() {
    json return_MOqETBu=json({});
    
        if (pData==NULL){
            return_MOqETBu["null"]=true;
            return return_MOqETBu;
        }
        return serialize_void_p(pData);
}();

        writeToConn(result);
    }

    void handle_vkMergePipelineCaches(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkPipelineCache dstCache
            ;
[&]() {
dstCache=deserialize_VkPipelineCache(data_json["members"]["dstCache"]);}();
uint32_t srcCacheCount
            ;
[&]() {
srcCacheCount=deserialize_uint32_t(data_json["members"]["srcCacheCount"]);}();
VkPipelineCache* pSrcCaches
        ;
[&]() {
VkPipelineCache* temp_gpZHctO;[&]() {

        if (data_json["members"]["pSrcCaches"].contains("null")){
        temp_gpZHctO=NULL;
        return;
        }
    temp_gpZHctO=(VkPipelineCache*)malloc(srcCacheCount*sizeof(VkPipelineCache));
        for (int ppBxkPo=0; ppBxkPo < srcCacheCount; ppBxkPo++){
            [&]() {
temp_gpZHctO[ppBxkPo]=deserialize_VkPipelineCache(data_json["members"]["pSrcCaches"]["members"][ppBxkPo]);}();;
        }
        }();pSrcCaches=temp_gpZHctO;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkMergePipelineCaches)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkMergePipelineCaches");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkMergePipelineCaches)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkMergePipelineCaches");
    }  
    
auto return_value=call_function(device, dstCache, srcCacheCount, pSrcCaches);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_UluQWqi=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["dstCache"]=[&]() {
    json return_gBmCPeC=json({});
    return serialize_VkPipelineCache(dstCache);}();
result["members"]["srcCacheCount"]=[&]() {
    json return_agrMtpa=json({});
    return serialize_uint32_t(srcCacheCount);}();
result["members"]["pSrcCaches"]=[&]() {
    json return_EMLiyEc=json({});
    
        if (pSrcCaches==NULL){
            return_EMLiyEc["null"]=true;
            return return_EMLiyEc;
        }
        
        return_EMLiyEc["members"]={};
        for(int EMLiyEc=0; EMLiyEc < srcCacheCount; EMLiyEc++){
            json temp;
            temp=[&]() {
    json return_WIRSPHD=json({});
    return serialize_VkPipelineCache(pSrcCaches[EMLiyEc]);}();
            return_EMLiyEc["members"].push_back(temp);
        }
        return return_EMLiyEc;
        }();

        writeToConn(result);
    }

    void handle_vkCreateGraphicsPipelines(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkPipelineCache pipelineCache
            ;
[&]() {
pipelineCache=deserialize_VkPipelineCache(data_json["members"]["pipelineCache"]);}();
uint32_t createInfoCount
            ;
[&]() {
createInfoCount=deserialize_uint32_t(data_json["members"]["createInfoCount"]);}();
VkGraphicsPipelineCreateInfo* pCreateInfos
            ;
[&]() {
VkGraphicsPipelineCreateInfo* temp_goSpFIk;[&]() {

        if (data_json["members"]["pCreateInfos"].contains("null")){
        temp_goSpFIk=NULL;
        return;
        }
    temp_goSpFIk=(VkGraphicsPipelineCreateInfo*)malloc(createInfoCount*sizeof(VkGraphicsPipelineCreateInfo));
        for (int ZviCzBY=0; ZviCzBY < createInfoCount; ZviCzBY++){
            [&]() {
temp_goSpFIk[ZviCzBY]=deserialize_VkGraphicsPipelineCreateInfo(data_json["members"]["pCreateInfos"]["members"][ZviCzBY]);}();;
        }
        }();pCreateInfos=temp_goSpFIk;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkPipeline* pPipelines
        ;
[&]() {

        if (data_json["members"]["pPipelines"].contains("null")){
        pPipelines=NULL;
        return;
        }
    pPipelines=(VkPipeline*)malloc(createInfoCount*sizeof(VkPipeline));
        for (int TBqpkOr=0; TBqpkOr < createInfoCount; TBqpkOr++){
            [&]() {
pPipelines[TBqpkOr]=deserialize_VkPipeline(data_json["members"]["pPipelines"]["members"][TBqpkOr]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreateGraphicsPipelines)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateGraphicsPipelines");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreateGraphicsPipelines)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateGraphicsPipelines");
    }  
    
auto return_value=call_function(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_SHisjcu=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pipelineCache"]=[&]() {
    json return_sRQlJCP=json({});
    return serialize_VkPipelineCache(pipelineCache);}();
result["members"]["createInfoCount"]=[&]() {
    json return_cRiHaUT=json({});
    return serialize_uint32_t(createInfoCount);}();
result["members"]["pCreateInfos"]=[&]() {
    json return_QHASSNU=json({});
    
        if (pCreateInfos==NULL){
            return_QHASSNU["null"]=true;
            return return_QHASSNU;
        }
        
        return_QHASSNU["members"]={};
        for(int QHASSNU=0; QHASSNU < createInfoCount; QHASSNU++){
            json temp;
            temp=[&]() {
    json return_GOShvvh=json({});
    return serialize_VkGraphicsPipelineCreateInfo(pCreateInfos[QHASSNU]);}();
            return_QHASSNU["members"].push_back(temp);
        }
        return return_QHASSNU;
        }();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pPipelines"]=[&]() {
    json return_kBzHgXu=json({});
    
        if (pPipelines==NULL){
            return_kBzHgXu["null"]=true;
            return return_kBzHgXu;
        }
        
        return_kBzHgXu["members"]={};
        for(int kBzHgXu=0; kBzHgXu < createInfoCount; kBzHgXu++){
            json temp;
            temp=[&]() {
    json return_EvuMoqq=json({});
    return serialize_VkPipeline(pPipelines[kBzHgXu]);}();
            return_kBzHgXu["members"].push_back(temp);
        }
        return return_kBzHgXu;
        }();

        writeToConn(result);
    }

    void handle_vkCreateComputePipelines(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkPipelineCache pipelineCache
            ;
[&]() {
pipelineCache=deserialize_VkPipelineCache(data_json["members"]["pipelineCache"]);}();
uint32_t createInfoCount
            ;
[&]() {
createInfoCount=deserialize_uint32_t(data_json["members"]["createInfoCount"]);}();
VkComputePipelineCreateInfo* pCreateInfos
            ;
[&]() {
VkComputePipelineCreateInfo* temp_AbieDQy;[&]() {

        if (data_json["members"]["pCreateInfos"].contains("null")){
        temp_AbieDQy=NULL;
        return;
        }
    temp_AbieDQy=(VkComputePipelineCreateInfo*)malloc(createInfoCount*sizeof(VkComputePipelineCreateInfo));
        for (int sxjVHlI=0; sxjVHlI < createInfoCount; sxjVHlI++){
            [&]() {
temp_AbieDQy[sxjVHlI]=deserialize_VkComputePipelineCreateInfo(data_json["members"]["pCreateInfos"]["members"][sxjVHlI]);}();;
        }
        }();pCreateInfos=temp_AbieDQy;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkPipeline* pPipelines
        ;
[&]() {

        if (data_json["members"]["pPipelines"].contains("null")){
        pPipelines=NULL;
        return;
        }
    pPipelines=(VkPipeline*)malloc(createInfoCount*sizeof(VkPipeline));
        for (int TBqpkOr=0; TBqpkOr < createInfoCount; TBqpkOr++){
            [&]() {
pPipelines[TBqpkOr]=deserialize_VkPipeline(data_json["members"]["pPipelines"]["members"][TBqpkOr]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreateComputePipelines)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateComputePipelines");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreateComputePipelines)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateComputePipelines");
    }  
    
auto return_value=call_function(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_zmqSuWI=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pipelineCache"]=[&]() {
    json return_sRQlJCP=json({});
    return serialize_VkPipelineCache(pipelineCache);}();
result["members"]["createInfoCount"]=[&]() {
    json return_cRiHaUT=json({});
    return serialize_uint32_t(createInfoCount);}();
result["members"]["pCreateInfos"]=[&]() {
    json return_SmdccXw=json({});
    
        if (pCreateInfos==NULL){
            return_SmdccXw["null"]=true;
            return return_SmdccXw;
        }
        
        return_SmdccXw["members"]={};
        for(int SmdccXw=0; SmdccXw < createInfoCount; SmdccXw++){
            json temp;
            temp=[&]() {
    json return_GcGKnxw=json({});
    return serialize_VkComputePipelineCreateInfo(pCreateInfos[SmdccXw]);}();
            return_SmdccXw["members"].push_back(temp);
        }
        return return_SmdccXw;
        }();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pPipelines"]=[&]() {
    json return_kBzHgXu=json({});
    
        if (pPipelines==NULL){
            return_kBzHgXu["null"]=true;
            return return_kBzHgXu;
        }
        
        return_kBzHgXu["members"]={};
        for(int kBzHgXu=0; kBzHgXu < createInfoCount; kBzHgXu++){
            json temp;
            temp=[&]() {
    json return_EvuMoqq=json({});
    return serialize_VkPipeline(pPipelines[kBzHgXu]);}();
            return_kBzHgXu["members"].push_back(temp);
        }
        return return_kBzHgXu;
        }();

        writeToConn(result);
    }

    void handle_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkRenderPass renderpass
            ;
[&]() {
renderpass=deserialize_VkRenderPass(data_json["members"]["renderpass"]);}();
VkExtent2D* pMaxWorkgroupSize
        ;
[&]() {

        if (data_json["members"]["pMaxWorkgroupSize"].contains("null")){
        pMaxWorkgroupSize=NULL;
        return;
        }
    pMaxWorkgroupSize=(VkExtent2D*)malloc(sizeof(VkExtent2D));
[&]() {
*(pMaxWorkgroupSize)=deserialize_VkExtent2D(data_json["members"]["pMaxWorkgroupSize"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI");
    }  
    
auto return_value=call_function(device, renderpass, pMaxWorkgroupSize);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_kJmzAUr=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["renderpass"]=[&]() {
    json return_HbYLjOQ=json({});
    return serialize_VkRenderPass(renderpass);}();
result["members"]["pMaxWorkgroupSize"]=[&]() {
    json return_qTkFMPy=json({});
    
        if (pMaxWorkgroupSize==NULL){
            return_qTkFMPy["null"]=true;
            return return_qTkFMPy;
        }
        return_qTkFMPy=[&]() {
    json return_vigVOnY=json({});
    return serialize_VkExtent2D(*pMaxWorkgroupSize);}();
return return_qTkFMPy;}();

        writeToConn(result);
    }

    void handle_vkDestroyPipeline(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkPipeline pipeline
            ;
[&]() {
pipeline=deserialize_VkPipeline(data_json["members"]["pipeline"]);}();
VkAllocationCallbacks* pAllocator
        ;
[&]() {
VkAllocationCallbacks* temp_VAmhMvJ;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_VAmhMvJ=NULL;
        return;
        }
    temp_VAmhMvJ=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_VAmhMvJ)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_VAmhMvJ;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkDestroyPipeline)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyPipeline");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkDestroyPipeline)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyPipeline");
    }  
    
call_function(device, pipeline, pAllocator);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pipeline"]=[&]() {
    json return_xIUyQCN=json({});
    return serialize_VkPipeline(pipeline);}();
result["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();

        writeToConn(result);
    }

    void handle_vkCreatePipelineLayout(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkPipelineLayoutCreateInfo* pCreateInfo
            ;
[&]() {
VkPipelineLayoutCreateInfo* temp_yGmMPqM;[&]() {

        if (data_json["members"]["pCreateInfo"].contains("null")){
        temp_yGmMPqM=NULL;
        return;
        }
    temp_yGmMPqM=(VkPipelineLayoutCreateInfo*)malloc(sizeof(VkPipelineLayoutCreateInfo));
[&]() {
*(temp_yGmMPqM)=deserialize_VkPipelineLayoutCreateInfo(data_json["members"]["pCreateInfo"]);}();
}();pCreateInfo=temp_yGmMPqM;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkPipelineLayout* pPipelineLayout
        ;
[&]() {

        if (data_json["members"]["pPipelineLayout"].contains("null")){
        pPipelineLayout=NULL;
        return;
        }
    pPipelineLayout=(VkPipelineLayout*)malloc(sizeof(VkPipelineLayout));
[&]() {
*(pPipelineLayout)=deserialize_VkPipelineLayout(data_json["members"]["pPipelineLayout"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreatePipelineLayout)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreatePipelineLayout");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreatePipelineLayout)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreatePipelineLayout");
    }  
    
auto return_value=call_function(device, pCreateInfo, pAllocator, pPipelineLayout);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_ttgdoHz=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pCreateInfo"]=[&]() {
    json return_RQGktVl=json({});
    
        if (pCreateInfo==NULL){
            return_RQGktVl["null"]=true;
            return return_RQGktVl;
        }
        return_RQGktVl=[&]() {
    json return_cMsXZOW=json({});
    return serialize_VkPipelineLayoutCreateInfo(*pCreateInfo);}();
return return_RQGktVl;}();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pPipelineLayout"]=[&]() {
    json return_pqmQaMo=json({});
    
        if (pPipelineLayout==NULL){
            return_pqmQaMo["null"]=true;
            return return_pqmQaMo;
        }
        return_pqmQaMo=[&]() {
    json return_lLGxOIV=json({});
    return serialize_VkPipelineLayout(*pPipelineLayout);}();
return return_pqmQaMo;}();

        writeToConn(result);
    }

    void handle_vkDestroyPipelineLayout(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkPipelineLayout pipelineLayout
            ;
[&]() {
pipelineLayout=deserialize_VkPipelineLayout(data_json["members"]["pipelineLayout"]);}();
VkAllocationCallbacks* pAllocator
        ;
[&]() {
VkAllocationCallbacks* temp_VAmhMvJ;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_VAmhMvJ=NULL;
        return;
        }
    temp_VAmhMvJ=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_VAmhMvJ)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_VAmhMvJ;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkDestroyPipelineLayout)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyPipelineLayout");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkDestroyPipelineLayout)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyPipelineLayout");
    }  
    
call_function(device, pipelineLayout, pAllocator);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pipelineLayout"]=[&]() {
    json return_kykmcbl=json({});
    return serialize_VkPipelineLayout(pipelineLayout);}();
result["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();

        writeToConn(result);
    }

    void handle_vkCreateSampler(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkSamplerCreateInfo* pCreateInfo
            ;
[&]() {
VkSamplerCreateInfo* temp_hOYJrBa;[&]() {

        if (data_json["members"]["pCreateInfo"].contains("null")){
        temp_hOYJrBa=NULL;
        return;
        }
    temp_hOYJrBa=(VkSamplerCreateInfo*)malloc(sizeof(VkSamplerCreateInfo));
[&]() {
*(temp_hOYJrBa)=deserialize_VkSamplerCreateInfo(data_json["members"]["pCreateInfo"]);}();
}();pCreateInfo=temp_hOYJrBa;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkSampler* pSampler
        ;
[&]() {

        if (data_json["members"]["pSampler"].contains("null")){
        pSampler=NULL;
        return;
        }
    pSampler=(VkSampler*)malloc(sizeof(VkSampler));
[&]() {
*(pSampler)=deserialize_VkSampler(data_json["members"]["pSampler"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreateSampler)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateSampler");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreateSampler)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateSampler");
    }  
    
auto return_value=call_function(device, pCreateInfo, pAllocator, pSampler);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_YlSAFfT=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pCreateInfo"]=[&]() {
    json return_WuBdMmw=json({});
    
        if (pCreateInfo==NULL){
            return_WuBdMmw["null"]=true;
            return return_WuBdMmw;
        }
        return_WuBdMmw=[&]() {
    json return_EEBbWEc=json({});
    return serialize_VkSamplerCreateInfo(*pCreateInfo);}();
return return_WuBdMmw;}();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pSampler"]=[&]() {
    json return_YnzdpEe=json({});
    
        if (pSampler==NULL){
            return_YnzdpEe["null"]=true;
            return return_YnzdpEe;
        }
        return_YnzdpEe=[&]() {
    json return_lGWFwiD=json({});
    return serialize_VkSampler(*pSampler);}();
return return_YnzdpEe;}();

        writeToConn(result);
    }

    void handle_vkDestroySampler(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkSampler sampler
            ;
[&]() {
sampler=deserialize_VkSampler(data_json["members"]["sampler"]);}();
VkAllocationCallbacks* pAllocator
        ;
[&]() {
VkAllocationCallbacks* temp_VAmhMvJ;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_VAmhMvJ=NULL;
        return;
        }
    temp_VAmhMvJ=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_VAmhMvJ)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_VAmhMvJ;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkDestroySampler)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroySampler");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkDestroySampler)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroySampler");
    }  
    
call_function(device, sampler, pAllocator);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["sampler"]=[&]() {
    json return_qfqBCAh=json({});
    return serialize_VkSampler(sampler);}();
result["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();

        writeToConn(result);
    }

    void handle_vkCreateDescriptorSetLayout(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDescriptorSetLayoutCreateInfo* pCreateInfo
            ;
[&]() {
VkDescriptorSetLayoutCreateInfo* temp_EtrEDqi;[&]() {

        if (data_json["members"]["pCreateInfo"].contains("null")){
        temp_EtrEDqi=NULL;
        return;
        }
    temp_EtrEDqi=(VkDescriptorSetLayoutCreateInfo*)malloc(sizeof(VkDescriptorSetLayoutCreateInfo));
[&]() {
*(temp_EtrEDqi)=deserialize_VkDescriptorSetLayoutCreateInfo(data_json["members"]["pCreateInfo"]);}();
}();pCreateInfo=temp_EtrEDqi;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkDescriptorSetLayout* pSetLayout
        ;
[&]() {

        if (data_json["members"]["pSetLayout"].contains("null")){
        pSetLayout=NULL;
        return;
        }
    pSetLayout=(VkDescriptorSetLayout*)malloc(sizeof(VkDescriptorSetLayout));
[&]() {
*(pSetLayout)=deserialize_VkDescriptorSetLayout(data_json["members"]["pSetLayout"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreateDescriptorSetLayout)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateDescriptorSetLayout");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreateDescriptorSetLayout)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateDescriptorSetLayout");
    }  
    
auto return_value=call_function(device, pCreateInfo, pAllocator, pSetLayout);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_KkVwQEq=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pCreateInfo"]=[&]() {
    json return_DbQjwWK=json({});
    
        if (pCreateInfo==NULL){
            return_DbQjwWK["null"]=true;
            return return_DbQjwWK;
        }
        return_DbQjwWK=[&]() {
    json return_vQZpbNT=json({});
    return serialize_VkDescriptorSetLayoutCreateInfo(*pCreateInfo);}();
return return_DbQjwWK;}();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pSetLayout"]=[&]() {
    json return_WkIPvFu=json({});
    
        if (pSetLayout==NULL){
            return_WkIPvFu["null"]=true;
            return return_WkIPvFu;
        }
        return_WkIPvFu=[&]() {
    json return_WXRGcio=json({});
    return serialize_VkDescriptorSetLayout(*pSetLayout);}();
return return_WkIPvFu;}();

        writeToConn(result);
    }

    void handle_vkDestroyDescriptorSetLayout(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDescriptorSetLayout descriptorSetLayout
            ;
[&]() {
descriptorSetLayout=deserialize_VkDescriptorSetLayout(data_json["members"]["descriptorSetLayout"]);}();
VkAllocationCallbacks* pAllocator
        ;
[&]() {
VkAllocationCallbacks* temp_VAmhMvJ;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_VAmhMvJ=NULL;
        return;
        }
    temp_VAmhMvJ=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_VAmhMvJ)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_VAmhMvJ;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkDestroyDescriptorSetLayout)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyDescriptorSetLayout");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkDestroyDescriptorSetLayout)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyDescriptorSetLayout");
    }  
    
call_function(device, descriptorSetLayout, pAllocator);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["descriptorSetLayout"]=[&]() {
    json return_jXWJeAO=json({});
    return serialize_VkDescriptorSetLayout(descriptorSetLayout);}();
result["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();

        writeToConn(result);
    }

    void handle_vkCreateDescriptorPool(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDescriptorPoolCreateInfo* pCreateInfo
            ;
[&]() {
VkDescriptorPoolCreateInfo* temp_kVPjgYQ;[&]() {

        if (data_json["members"]["pCreateInfo"].contains("null")){
        temp_kVPjgYQ=NULL;
        return;
        }
    temp_kVPjgYQ=(VkDescriptorPoolCreateInfo*)malloc(sizeof(VkDescriptorPoolCreateInfo));
[&]() {
*(temp_kVPjgYQ)=deserialize_VkDescriptorPoolCreateInfo(data_json["members"]["pCreateInfo"]);}();
}();pCreateInfo=temp_kVPjgYQ;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkDescriptorPool* pDescriptorPool
        ;
[&]() {

        if (data_json["members"]["pDescriptorPool"].contains("null")){
        pDescriptorPool=NULL;
        return;
        }
    pDescriptorPool=(VkDescriptorPool*)malloc(sizeof(VkDescriptorPool));
[&]() {
*(pDescriptorPool)=deserialize_VkDescriptorPool(data_json["members"]["pDescriptorPool"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreateDescriptorPool)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateDescriptorPool");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreateDescriptorPool)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateDescriptorPool");
    }  
    
auto return_value=call_function(device, pCreateInfo, pAllocator, pDescriptorPool);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_eWAhKQM=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pCreateInfo"]=[&]() {
    json return_bTKIXzZ=json({});
    
        if (pCreateInfo==NULL){
            return_bTKIXzZ["null"]=true;
            return return_bTKIXzZ;
        }
        return_bTKIXzZ=[&]() {
    json return_XeZHdbn=json({});
    return serialize_VkDescriptorPoolCreateInfo(*pCreateInfo);}();
return return_bTKIXzZ;}();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pDescriptorPool"]=[&]() {
    json return_ZZOytMO=json({});
    
        if (pDescriptorPool==NULL){
            return_ZZOytMO["null"]=true;
            return return_ZZOytMO;
        }
        return_ZZOytMO=[&]() {
    json return_wEMcPim=json({});
    return serialize_VkDescriptorPool(*pDescriptorPool);}();
return return_ZZOytMO;}();

        writeToConn(result);
    }

    void handle_vkDestroyDescriptorPool(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDescriptorPool descriptorPool
            ;
[&]() {
descriptorPool=deserialize_VkDescriptorPool(data_json["members"]["descriptorPool"]);}();
VkAllocationCallbacks* pAllocator
        ;
[&]() {
VkAllocationCallbacks* temp_VAmhMvJ;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_VAmhMvJ=NULL;
        return;
        }
    temp_VAmhMvJ=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_VAmhMvJ)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_VAmhMvJ;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkDestroyDescriptorPool)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyDescriptorPool");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkDestroyDescriptorPool)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyDescriptorPool");
    }  
    
call_function(device, descriptorPool, pAllocator);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["descriptorPool"]=[&]() {
    json return_WAKJKVb=json({});
    return serialize_VkDescriptorPool(descriptorPool);}();
result["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();

        writeToConn(result);
    }

    void handle_vkResetDescriptorPool(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDescriptorPool descriptorPool
            ;
[&]() {
descriptorPool=deserialize_VkDescriptorPool(data_json["members"]["descriptorPool"]);}();
VkDescriptorPoolResetFlags flags
            ;
[&]() {
flags=deserialize_VkDescriptorPoolResetFlags(data_json["members"]["flags"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkResetDescriptorPool)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkResetDescriptorPool");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkResetDescriptorPool)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkResetDescriptorPool");
    }  
    
auto return_value=call_function(device, descriptorPool, flags);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_yDmiDxa=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["descriptorPool"]=[&]() {
    json return_WAKJKVb=json({});
    return serialize_VkDescriptorPool(descriptorPool);}();
result["members"]["flags"]=[&]() {
    json return_PtjtXRF=json({});
    return serialize_VkDescriptorPoolResetFlags(flags);}();

        writeToConn(result);
    }

    void handle_vkAllocateDescriptorSets(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDescriptorSetAllocateInfo* pAllocateInfo
            ;
[&]() {
VkDescriptorSetAllocateInfo* temp_jrmyckr;[&]() {

        if (data_json["members"]["pAllocateInfo"].contains("null")){
        temp_jrmyckr=NULL;
        return;
        }
    temp_jrmyckr=(VkDescriptorSetAllocateInfo*)malloc(sizeof(VkDescriptorSetAllocateInfo));
[&]() {
*(temp_jrmyckr)=deserialize_VkDescriptorSetAllocateInfo(data_json["members"]["pAllocateInfo"]);}();
}();pAllocateInfo=temp_jrmyckr;}();
VkDescriptorSet* pDescriptorSets
        ;
[&]() {

        if (data_json["members"]["pDescriptorSets"].contains("null")){
        pDescriptorSets=NULL;
        return;
        }
    pDescriptorSets=(VkDescriptorSet*)malloc(pAllocateInfo->descriptorSetCount*sizeof(VkDescriptorSet));
        for (int celRFks=0; celRFks < pAllocateInfo->descriptorSetCount; celRFks++){
            [&]() {
pDescriptorSets[celRFks]=deserialize_VkDescriptorSet(data_json["members"]["pDescriptorSets"]["members"][celRFks]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkAllocateDescriptorSets)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkAllocateDescriptorSets");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkAllocateDescriptorSets)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkAllocateDescriptorSets");
    }  
    
auto return_value=call_function(device, pAllocateInfo, pDescriptorSets);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_EFBHohZ=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pAllocateInfo"]=[&]() {
    json return_CYBYCGD=json({});
    
        if (pAllocateInfo==NULL){
            return_CYBYCGD["null"]=true;
            return return_CYBYCGD;
        }
        return_CYBYCGD=[&]() {
    json return_zVAfwao=json({});
    return serialize_VkDescriptorSetAllocateInfo(*pAllocateInfo);}();
return return_CYBYCGD;}();
result["members"]["pDescriptorSets"]=[&]() {
    json return_BZsDUBG=json({});
    
        if (pDescriptorSets==NULL){
            return_BZsDUBG["null"]=true;
            return return_BZsDUBG;
        }
        
        return_BZsDUBG["members"]={};
        for(int BZsDUBG=0; BZsDUBG < pAllocateInfo->descriptorSetCount; BZsDUBG++){
            json temp;
            temp=[&]() {
    json return_KBoTTeC=json({});
    return serialize_VkDescriptorSet(pDescriptorSets[BZsDUBG]);}();
            return_BZsDUBG["members"].push_back(temp);
        }
        return return_BZsDUBG;
        }();

        writeToConn(result);
    }

    void handle_vkFreeDescriptorSets(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDescriptorPool descriptorPool
            ;
[&]() {
descriptorPool=deserialize_VkDescriptorPool(data_json["members"]["descriptorPool"]);}();
uint32_t descriptorSetCount
            ;
[&]() {
descriptorSetCount=deserialize_uint32_t(data_json["members"]["descriptorSetCount"]);}();
VkDescriptorSet* pDescriptorSets
        ;
[&]() {
VkDescriptorSet* temp_AFSekdi;[&]() {

        if (data_json["members"]["pDescriptorSets"].contains("null")){
        temp_AFSekdi=NULL;
        return;
        }
    temp_AFSekdi=(VkDescriptorSet*)malloc(descriptorSetCount*sizeof(VkDescriptorSet));
        for (int moIaUHd=0; moIaUHd < descriptorSetCount; moIaUHd++){
            [&]() {
temp_AFSekdi[moIaUHd]=deserialize_VkDescriptorSet(data_json["members"]["pDescriptorSets"]["members"][moIaUHd]);}();;
        }
        }();pDescriptorSets=temp_AFSekdi;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkFreeDescriptorSets)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkFreeDescriptorSets");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkFreeDescriptorSets)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkFreeDescriptorSets");
    }  
    
auto return_value=call_function(device, descriptorPool, descriptorSetCount, pDescriptorSets);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_VbrCljq=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["descriptorPool"]=[&]() {
    json return_WAKJKVb=json({});
    return serialize_VkDescriptorPool(descriptorPool);}();
result["members"]["descriptorSetCount"]=[&]() {
    json return_uMBJpkk=json({});
    return serialize_uint32_t(descriptorSetCount);}();
result["members"]["pDescriptorSets"]=[&]() {
    json return_UhRAJBf=json({});
    
        if (pDescriptorSets==NULL){
            return_UhRAJBf["null"]=true;
            return return_UhRAJBf;
        }
        
        return_UhRAJBf["members"]={};
        for(int UhRAJBf=0; UhRAJBf < descriptorSetCount; UhRAJBf++){
            json temp;
            temp=[&]() {
    json return_otSyrfv=json({});
    return serialize_VkDescriptorSet(pDescriptorSets[UhRAJBf]);}();
            return_UhRAJBf["members"].push_back(temp);
        }
        return return_UhRAJBf;
        }();

        writeToConn(result);
    }

    void handle_vkUpdateDescriptorSets(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
uint32_t descriptorWriteCount
            ;
[&]() {
descriptorWriteCount=deserialize_uint32_t(data_json["members"]["descriptorWriteCount"]);}();
VkWriteDescriptorSet* pDescriptorWrites
            ;
[&]() {
VkWriteDescriptorSet* temp_JrIIEJH;[&]() {

        if (data_json["members"]["pDescriptorWrites"].contains("null")){
        temp_JrIIEJH=NULL;
        return;
        }
    temp_JrIIEJH=(VkWriteDescriptorSet*)malloc(descriptorWriteCount*sizeof(VkWriteDescriptorSet));
        for (int RLwBXEW=0; RLwBXEW < descriptorWriteCount; RLwBXEW++){
            [&]() {
temp_JrIIEJH[RLwBXEW]=deserialize_VkWriteDescriptorSet(data_json["members"]["pDescriptorWrites"]["members"][RLwBXEW]);}();;
        }
        }();pDescriptorWrites=temp_JrIIEJH;}();
uint32_t descriptorCopyCount
            ;
[&]() {
descriptorCopyCount=deserialize_uint32_t(data_json["members"]["descriptorCopyCount"]);}();
VkCopyDescriptorSet* pDescriptorCopies
        ;
[&]() {
VkCopyDescriptorSet* temp_XoRkwVc;[&]() {

        if (data_json["members"]["pDescriptorCopies"].contains("null")){
        temp_XoRkwVc=NULL;
        return;
        }
    temp_XoRkwVc=(VkCopyDescriptorSet*)malloc(descriptorCopyCount*sizeof(VkCopyDescriptorSet));
        for (int ebCMcIl=0; ebCMcIl < descriptorCopyCount; ebCMcIl++){
            [&]() {
temp_XoRkwVc[ebCMcIl]=deserialize_VkCopyDescriptorSet(data_json["members"]["pDescriptorCopies"]["members"][ebCMcIl]);}();;
        }
        }();pDescriptorCopies=temp_XoRkwVc;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkUpdateDescriptorSets)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkUpdateDescriptorSets");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkUpdateDescriptorSets)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkUpdateDescriptorSets");
    }  
    
call_function(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["descriptorWriteCount"]=[&]() {
    json return_XRSXcAe=json({});
    return serialize_uint32_t(descriptorWriteCount);}();
result["members"]["pDescriptorWrites"]=[&]() {
    json return_MCWWHwk=json({});
    
        if (pDescriptorWrites==NULL){
            return_MCWWHwk["null"]=true;
            return return_MCWWHwk;
        }
        
        return_MCWWHwk["members"]={};
        for(int MCWWHwk=0; MCWWHwk < descriptorWriteCount; MCWWHwk++){
            json temp;
            temp=[&]() {
    json return_EyupRlD=json({});
    return serialize_VkWriteDescriptorSet(pDescriptorWrites[MCWWHwk]);}();
            return_MCWWHwk["members"].push_back(temp);
        }
        return return_MCWWHwk;
        }();
result["members"]["descriptorCopyCount"]=[&]() {
    json return_IHWQyau=json({});
    return serialize_uint32_t(descriptorCopyCount);}();
result["members"]["pDescriptorCopies"]=[&]() {
    json return_TvtyTaJ=json({});
    
        if (pDescriptorCopies==NULL){
            return_TvtyTaJ["null"]=true;
            return return_TvtyTaJ;
        }
        
        return_TvtyTaJ["members"]={};
        for(int TvtyTaJ=0; TvtyTaJ < descriptorCopyCount; TvtyTaJ++){
            json temp;
            temp=[&]() {
    json return_NcdDjBM=json({});
    return serialize_VkCopyDescriptorSet(pDescriptorCopies[TvtyTaJ]);}();
            return_TvtyTaJ["members"].push_back(temp);
        }
        return return_TvtyTaJ;
        }();

        writeToConn(result);
    }

    void handle_vkCreateFramebuffer(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkFramebufferCreateInfo* pCreateInfo
            ;
[&]() {
VkFramebufferCreateInfo* temp_mmGOVGe;[&]() {

        if (data_json["members"]["pCreateInfo"].contains("null")){
        temp_mmGOVGe=NULL;
        return;
        }
    temp_mmGOVGe=(VkFramebufferCreateInfo*)malloc(sizeof(VkFramebufferCreateInfo));
[&]() {
*(temp_mmGOVGe)=deserialize_VkFramebufferCreateInfo(data_json["members"]["pCreateInfo"]);}();
}();pCreateInfo=temp_mmGOVGe;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkFramebuffer* pFramebuffer
        ;
[&]() {

        if (data_json["members"]["pFramebuffer"].contains("null")){
        pFramebuffer=NULL;
        return;
        }
    pFramebuffer=(VkFramebuffer*)malloc(sizeof(VkFramebuffer));
[&]() {
*(pFramebuffer)=deserialize_VkFramebuffer(data_json["members"]["pFramebuffer"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreateFramebuffer)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateFramebuffer");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreateFramebuffer)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateFramebuffer");
    }  
    
auto return_value=call_function(device, pCreateInfo, pAllocator, pFramebuffer);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_QWRUEqY=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pCreateInfo"]=[&]() {
    json return_RAKHUHF=json({});
    
        if (pCreateInfo==NULL){
            return_RAKHUHF["null"]=true;
            return return_RAKHUHF;
        }
        return_RAKHUHF=[&]() {
    json return_sLVeYFZ=json({});
    return serialize_VkFramebufferCreateInfo(*pCreateInfo);}();
return return_RAKHUHF;}();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pFramebuffer"]=[&]() {
    json return_kVSxqJO=json({});
    
        if (pFramebuffer==NULL){
            return_kVSxqJO["null"]=true;
            return return_kVSxqJO;
        }
        return_kVSxqJO=[&]() {
    json return_PCMwzib=json({});
    return serialize_VkFramebuffer(*pFramebuffer);}();
return return_kVSxqJO;}();

        writeToConn(result);
    }

    void handle_vkDestroyFramebuffer(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkFramebuffer framebuffer
            ;
[&]() {
framebuffer=deserialize_VkFramebuffer(data_json["members"]["framebuffer"]);}();
VkAllocationCallbacks* pAllocator
        ;
[&]() {
VkAllocationCallbacks* temp_VAmhMvJ;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_VAmhMvJ=NULL;
        return;
        }
    temp_VAmhMvJ=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_VAmhMvJ)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_VAmhMvJ;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkDestroyFramebuffer)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyFramebuffer");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkDestroyFramebuffer)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyFramebuffer");
    }  
    
call_function(device, framebuffer, pAllocator);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["framebuffer"]=[&]() {
    json return_MEXIdZv=json({});
    return serialize_VkFramebuffer(framebuffer);}();
result["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();

        writeToConn(result);
    }

    void handle_vkCreateRenderPass(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkRenderPassCreateInfo* pCreateInfo
            ;
[&]() {
VkRenderPassCreateInfo* temp_XAmBuJj;[&]() {

        if (data_json["members"]["pCreateInfo"].contains("null")){
        temp_XAmBuJj=NULL;
        return;
        }
    temp_XAmBuJj=(VkRenderPassCreateInfo*)malloc(sizeof(VkRenderPassCreateInfo));
[&]() {
*(temp_XAmBuJj)=deserialize_VkRenderPassCreateInfo(data_json["members"]["pCreateInfo"]);}();
}();pCreateInfo=temp_XAmBuJj;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkRenderPass* pRenderPass
        ;
[&]() {

        if (data_json["members"]["pRenderPass"].contains("null")){
        pRenderPass=NULL;
        return;
        }
    pRenderPass=(VkRenderPass*)malloc(sizeof(VkRenderPass));
[&]() {
*(pRenderPass)=deserialize_VkRenderPass(data_json["members"]["pRenderPass"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreateRenderPass)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateRenderPass");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreateRenderPass)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateRenderPass");
    }  
    
auto return_value=call_function(device, pCreateInfo, pAllocator, pRenderPass);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_pjbaHCx=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pCreateInfo"]=[&]() {
    json return_CxYukJa=json({});
    
        if (pCreateInfo==NULL){
            return_CxYukJa["null"]=true;
            return return_CxYukJa;
        }
        return_CxYukJa=[&]() {
    json return_QYGsApC=json({});
    return serialize_VkRenderPassCreateInfo(*pCreateInfo);}();
return return_CxYukJa;}();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pRenderPass"]=[&]() {
    json return_TnevtBk=json({});
    
        if (pRenderPass==NULL){
            return_TnevtBk["null"]=true;
            return return_TnevtBk;
        }
        return_TnevtBk=[&]() {
    json return_fRCidTE=json({});
    return serialize_VkRenderPass(*pRenderPass);}();
return return_TnevtBk;}();

        writeToConn(result);
    }

    void handle_vkDestroyRenderPass(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkRenderPass renderPass
            ;
[&]() {
renderPass=deserialize_VkRenderPass(data_json["members"]["renderPass"]);}();
VkAllocationCallbacks* pAllocator
        ;
[&]() {
VkAllocationCallbacks* temp_VAmhMvJ;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_VAmhMvJ=NULL;
        return;
        }
    temp_VAmhMvJ=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_VAmhMvJ)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_VAmhMvJ;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkDestroyRenderPass)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyRenderPass");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkDestroyRenderPass)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyRenderPass");
    }  
    
call_function(device, renderPass, pAllocator);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["renderPass"]=[&]() {
    json return_EuRkpxU=json({});
    return serialize_VkRenderPass(renderPass);}();
result["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();

        writeToConn(result);
    }

    void handle_vkGetRenderAreaGranularity(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkRenderPass renderPass
            ;
[&]() {
renderPass=deserialize_VkRenderPass(data_json["members"]["renderPass"]);}();
VkExtent2D* pGranularity
        ;
[&]() {

        if (data_json["members"]["pGranularity"].contains("null")){
        pGranularity=NULL;
        return;
        }
    pGranularity=(VkExtent2D*)malloc(sizeof(VkExtent2D));
[&]() {
*(pGranularity)=deserialize_VkExtent2D(data_json["members"]["pGranularity"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetRenderAreaGranularity)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetRenderAreaGranularity");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetRenderAreaGranularity)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetRenderAreaGranularity");
    }  
    
call_function(device, renderPass, pGranularity);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["renderPass"]=[&]() {
    json return_EuRkpxU=json({});
    return serialize_VkRenderPass(renderPass);}();
result["members"]["pGranularity"]=[&]() {
    json return_INpWsMF=json({});
    
        if (pGranularity==NULL){
            return_INpWsMF["null"]=true;
            return return_INpWsMF;
        }
        return_INpWsMF=[&]() {
    json return_lAVJuzw=json({});
    return serialize_VkExtent2D(*pGranularity);}();
return return_INpWsMF;}();

        writeToConn(result);
    }

    void handle_vkGetRenderingAreaGranularityKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkRenderingAreaInfoKHR* pRenderingAreaInfo
            ;
[&]() {
VkRenderingAreaInfoKHR* temp_YBsmfed;[&]() {

        if (data_json["members"]["pRenderingAreaInfo"].contains("null")){
        temp_YBsmfed=NULL;
        return;
        }
    temp_YBsmfed=(VkRenderingAreaInfoKHR*)malloc(sizeof(VkRenderingAreaInfoKHR));
[&]() {
*(temp_YBsmfed)=deserialize_VkRenderingAreaInfoKHR(data_json["members"]["pRenderingAreaInfo"]);}();
}();pRenderingAreaInfo=temp_YBsmfed;}();
VkExtent2D* pGranularity
        ;
[&]() {

        if (data_json["members"]["pGranularity"].contains("null")){
        pGranularity=NULL;
        return;
        }
    pGranularity=(VkExtent2D*)malloc(sizeof(VkExtent2D));
[&]() {
*(pGranularity)=deserialize_VkExtent2D(data_json["members"]["pGranularity"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetRenderingAreaGranularityKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetRenderingAreaGranularityKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetRenderingAreaGranularityKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetRenderingAreaGranularityKHR");
    }  
    
call_function(device, pRenderingAreaInfo, pGranularity);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pRenderingAreaInfo"]=[&]() {
    json return_IOIQAsx=json({});
    
        if (pRenderingAreaInfo==NULL){
            return_IOIQAsx["null"]=true;
            return return_IOIQAsx;
        }
        return_IOIQAsx=[&]() {
    json return_WfYzRNa=json({});
    return serialize_VkRenderingAreaInfoKHR(*pRenderingAreaInfo);}();
return return_IOIQAsx;}();
result["members"]["pGranularity"]=[&]() {
    json return_INpWsMF=json({});
    
        if (pGranularity==NULL){
            return_INpWsMF["null"]=true;
            return return_INpWsMF;
        }
        return_INpWsMF=[&]() {
    json return_lAVJuzw=json({});
    return serialize_VkExtent2D(*pGranularity);}();
return return_INpWsMF;}();

        writeToConn(result);
    }

    void handle_vkCreateCommandPool(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkCommandPoolCreateInfo* pCreateInfo
            ;
[&]() {
VkCommandPoolCreateInfo* temp_SikoPJA;[&]() {

        if (data_json["members"]["pCreateInfo"].contains("null")){
        temp_SikoPJA=NULL;
        return;
        }
    temp_SikoPJA=(VkCommandPoolCreateInfo*)malloc(sizeof(VkCommandPoolCreateInfo));
[&]() {
*(temp_SikoPJA)=deserialize_VkCommandPoolCreateInfo(data_json["members"]["pCreateInfo"]);}();
}();pCreateInfo=temp_SikoPJA;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkCommandPool* pCommandPool
        ;
[&]() {

        if (data_json["members"]["pCommandPool"].contains("null")){
        pCommandPool=NULL;
        return;
        }
    pCommandPool=(VkCommandPool*)malloc(sizeof(VkCommandPool));
[&]() {
*(pCommandPool)=deserialize_VkCommandPool(data_json["members"]["pCommandPool"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreateCommandPool)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateCommandPool");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreateCommandPool)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateCommandPool");
    }  
    
auto return_value=call_function(device, pCreateInfo, pAllocator, pCommandPool);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_yeutSWz=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pCreateInfo"]=[&]() {
    json return_jDuJcUb=json({});
    
        if (pCreateInfo==NULL){
            return_jDuJcUb["null"]=true;
            return return_jDuJcUb;
        }
        return_jDuJcUb=[&]() {
    json return_mWqUZUp=json({});
    return serialize_VkCommandPoolCreateInfo(*pCreateInfo);}();
return return_jDuJcUb;}();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pCommandPool"]=[&]() {
    json return_QWAExWc=json({});
    
        if (pCommandPool==NULL){
            return_QWAExWc["null"]=true;
            return return_QWAExWc;
        }
        return_QWAExWc=[&]() {
    json return_nYwoDtn=json({});
    return serialize_VkCommandPool(*pCommandPool);}();
return return_QWAExWc;}();

        writeToConn(result);
    }

    void handle_vkDestroyCommandPool(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkCommandPool commandPool
            ;
[&]() {
commandPool=deserialize_VkCommandPool(data_json["members"]["commandPool"]);}();
VkAllocationCallbacks* pAllocator
        ;
[&]() {
VkAllocationCallbacks* temp_VAmhMvJ;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_VAmhMvJ=NULL;
        return;
        }
    temp_VAmhMvJ=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_VAmhMvJ)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_VAmhMvJ;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkDestroyCommandPool)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyCommandPool");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkDestroyCommandPool)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyCommandPool");
    }  
    
call_function(device, commandPool, pAllocator);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["commandPool"]=[&]() {
    json return_EDvrdif=json({});
    return serialize_VkCommandPool(commandPool);}();
result["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();

        writeToConn(result);
    }

    void handle_vkResetCommandPool(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkCommandPool commandPool
            ;
[&]() {
commandPool=deserialize_VkCommandPool(data_json["members"]["commandPool"]);}();
VkCommandPoolResetFlags flags
        ;
[&]() {
flags=deserialize_VkCommandPoolResetFlags(data_json["members"]["flags"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkResetCommandPool)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkResetCommandPool");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkResetCommandPool)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkResetCommandPool");
    }  
    
auto return_value=call_function(device, commandPool, flags);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_IAdPffB=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["commandPool"]=[&]() {
    json return_EDvrdif=json({});
    return serialize_VkCommandPool(commandPool);}();
result["members"]["flags"]=[&]() {
    json return_okPyRYU=json({});
    return serialize_VkCommandPoolResetFlags(flags);}();

        writeToConn(result);
    }

    void handle_vkAllocateCommandBuffers(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkCommandBufferAllocateInfo* pAllocateInfo
            ;
[&]() {
VkCommandBufferAllocateInfo* temp_uqQrOUw;[&]() {

        if (data_json["members"]["pAllocateInfo"].contains("null")){
        temp_uqQrOUw=NULL;
        return;
        }
    temp_uqQrOUw=(VkCommandBufferAllocateInfo*)malloc(sizeof(VkCommandBufferAllocateInfo));
[&]() {
*(temp_uqQrOUw)=deserialize_VkCommandBufferAllocateInfo(data_json["members"]["pAllocateInfo"]);}();
}();pAllocateInfo=temp_uqQrOUw;}();
VkCommandBuffer* pCommandBuffers
        ;
[&]() {

        if (data_json["members"]["pCommandBuffers"].contains("null")){
        pCommandBuffers=NULL;
        return;
        }
    pCommandBuffers=(VkCommandBuffer*)malloc(pAllocateInfo->commandBufferCount*sizeof(VkCommandBuffer));
        for (int RjvhSml=0; RjvhSml < pAllocateInfo->commandBufferCount; RjvhSml++){
            [&]() {
pCommandBuffers[RjvhSml]=deserialize_VkCommandBuffer(data_json["members"]["pCommandBuffers"]["members"][RjvhSml]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkAllocateCommandBuffers)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkAllocateCommandBuffers");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkAllocateCommandBuffers)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkAllocateCommandBuffers");
    }  
    
auto return_value=call_function(device, pAllocateInfo, pCommandBuffers);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_RODmHBY=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pAllocateInfo"]=[&]() {
    json return_FKIgwJs=json({});
    
        if (pAllocateInfo==NULL){
            return_FKIgwJs["null"]=true;
            return return_FKIgwJs;
        }
        return_FKIgwJs=[&]() {
    json return_qEJmQuf=json({});
    return serialize_VkCommandBufferAllocateInfo(*pAllocateInfo);}();
return return_FKIgwJs;}();
result["members"]["pCommandBuffers"]=[&]() {
    json return_IAoUjgm=json({});
    
        if (pCommandBuffers==NULL){
            return_IAoUjgm["null"]=true;
            return return_IAoUjgm;
        }
        
        return_IAoUjgm["members"]={};
        for(int IAoUjgm=0; IAoUjgm < pAllocateInfo->commandBufferCount; IAoUjgm++){
            json temp;
            temp=[&]() {
    json return_zjIsCPY=json({});
    return serialize_VkCommandBuffer(pCommandBuffers[IAoUjgm]);}();
            return_IAoUjgm["members"].push_back(temp);
        }
        return return_IAoUjgm;
        }();

        writeToConn(result);
    }

    void handle_vkFreeCommandBuffers(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkCommandPool commandPool
            ;
[&]() {
commandPool=deserialize_VkCommandPool(data_json["members"]["commandPool"]);}();
uint32_t commandBufferCount
            ;
[&]() {
commandBufferCount=deserialize_uint32_t(data_json["members"]["commandBufferCount"]);}();
VkCommandBuffer* pCommandBuffers
        ;
[&]() {
VkCommandBuffer* temp_CLYJejR;[&]() {

        if (data_json["members"]["pCommandBuffers"].contains("null")){
        temp_CLYJejR=NULL;
        return;
        }
    temp_CLYJejR=(VkCommandBuffer*)malloc(commandBufferCount*sizeof(VkCommandBuffer));
        for (int uuFiKTX=0; uuFiKTX < commandBufferCount; uuFiKTX++){
            [&]() {
temp_CLYJejR[uuFiKTX]=deserialize_VkCommandBuffer(data_json["members"]["pCommandBuffers"]["members"][uuFiKTX]);}();;
        }
        }();pCommandBuffers=temp_CLYJejR;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkFreeCommandBuffers)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkFreeCommandBuffers");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkFreeCommandBuffers)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkFreeCommandBuffers");
    }  
    
call_function(device, commandPool, commandBufferCount, pCommandBuffers);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["commandPool"]=[&]() {
    json return_EDvrdif=json({});
    return serialize_VkCommandPool(commandPool);}();
result["members"]["commandBufferCount"]=[&]() {
    json return_NawsLFi=json({});
    return serialize_uint32_t(commandBufferCount);}();
result["members"]["pCommandBuffers"]=[&]() {
    json return_ePeHCNc=json({});
    
        if (pCommandBuffers==NULL){
            return_ePeHCNc["null"]=true;
            return return_ePeHCNc;
        }
        
        return_ePeHCNc["members"]={};
        for(int ePeHCNc=0; ePeHCNc < commandBufferCount; ePeHCNc++){
            json temp;
            temp=[&]() {
    json return_IWPPXyt=json({});
    return serialize_VkCommandBuffer(pCommandBuffers[ePeHCNc]);}();
            return_ePeHCNc["members"].push_back(temp);
        }
        return return_ePeHCNc;
        }();

        writeToConn(result);
    }

    void handle_vkBeginCommandBuffer(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkCommandBufferBeginInfo* pBeginInfo
            ;
[&]() {
VkCommandBufferBeginInfo* temp_uEfgtSH;[&]() {

        if (data_json["members"]["pBeginInfo"].contains("null")){
        temp_uEfgtSH=NULL;
        return;
        }
    temp_uEfgtSH=(VkCommandBufferBeginInfo*)malloc(sizeof(VkCommandBufferBeginInfo));
[&]() {
*(temp_uEfgtSH)=deserialize_VkCommandBufferBeginInfo(data_json["members"]["pBeginInfo"]);}();
}();pBeginInfo=temp_uEfgtSH;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkBeginCommandBuffer)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkBeginCommandBuffer");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkBeginCommandBuffer)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkBeginCommandBuffer");
    }  
    
auto return_value=call_function(commandBuffer, pBeginInfo);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_yGKujeG=json({});
    return serialize_VkResult(return_value);}();
result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pBeginInfo"]=[&]() {
    json return_UNpLxBG=json({});
    
        if (pBeginInfo==NULL){
            return_UNpLxBG["null"]=true;
            return return_UNpLxBG;
        }
        return_UNpLxBG=[&]() {
    json return_AXQzLUT=json({});
    return serialize_VkCommandBufferBeginInfo(*pBeginInfo);}();
return return_UNpLxBG;}();

        writeToConn(result);
    }

    void handle_vkEndCommandBuffer(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkEndCommandBuffer)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkEndCommandBuffer");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkEndCommandBuffer)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkEndCommandBuffer");
    }  
    
auto return_value=call_function(commandBuffer);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_lksEEHk=json({});
    return serialize_VkResult(return_value);}();
result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();

        writeToConn(result);
    }

    void handle_vkResetCommandBuffer(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkCommandBufferResetFlags flags
            ;
[&]() {
flags=deserialize_VkCommandBufferResetFlags(data_json["members"]["flags"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkResetCommandBuffer)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkResetCommandBuffer");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkResetCommandBuffer)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkResetCommandBuffer");
    }  
    
auto return_value=call_function(commandBuffer, flags);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_Wwvvyja=json({});
    return serialize_VkResult(return_value);}();
result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["flags"]=[&]() {
    json return_dAuRGiZ=json({});
    return serialize_VkCommandBufferResetFlags(flags);}();

        writeToConn(result);
    }

    void handle_vkCmdBindPipeline(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkPipelineBindPoint pipelineBindPoint
            ;
[&]() {
pipelineBindPoint=deserialize_VkPipelineBindPoint(data_json["members"]["pipelineBindPoint"]);}();
VkPipeline pipeline
        ;
[&]() {
pipeline=deserialize_VkPipeline(data_json["members"]["pipeline"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdBindPipeline)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBindPipeline");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdBindPipeline)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBindPipeline");
    }  
    
call_function(commandBuffer, pipelineBindPoint, pipeline);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pipelineBindPoint"]=[&]() {
    json return_wEDWbiR=json({});
    return serialize_VkPipelineBindPoint(pipelineBindPoint);}();
result["members"]["pipeline"]=[&]() {
    json return_ynaKrOY=json({});
    return serialize_VkPipeline(pipeline);}();

        writeToConn(result);
    }

    void handle_vkCmdSetAttachmentFeedbackLoopEnableEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkImageAspectFlags aspectMask
        ;
[&]() {
aspectMask=deserialize_VkImageAspectFlags(data_json["members"]["aspectMask"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetAttachmentFeedbackLoopEnableEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetAttachmentFeedbackLoopEnableEXT");
    }  
    
call_function(commandBuffer, aspectMask);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["aspectMask"]=[&]() {
    json return_KcpFVpC=json({});
    return serialize_VkImageAspectFlags(aspectMask);}();

        writeToConn(result);
    }

    void handle_vkCmdSetViewport(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t firstViewport
            ;
[&]() {
firstViewport=deserialize_uint32_t(data_json["members"]["firstViewport"]);}();
uint32_t viewportCount
            ;
[&]() {
viewportCount=deserialize_uint32_t(data_json["members"]["viewportCount"]);}();
VkViewport* pViewports
        ;
[&]() {
VkViewport* temp_IJKezsu;[&]() {

        if (data_json["members"]["pViewports"].contains("null")){
        temp_IJKezsu=NULL;
        return;
        }
    temp_IJKezsu=(VkViewport*)malloc(viewportCount*sizeof(VkViewport));
        for (int GYeKiNp=0; GYeKiNp < viewportCount; GYeKiNp++){
            [&]() {
temp_IJKezsu[GYeKiNp]=deserialize_VkViewport(data_json["members"]["pViewports"]["members"][GYeKiNp]);}();;
        }
        }();pViewports=temp_IJKezsu;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetViewport)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetViewport");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetViewport)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetViewport");
    }  
    
call_function(commandBuffer, firstViewport, viewportCount, pViewports);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["firstViewport"]=[&]() {
    json return_zZVDUCF=json({});
    return serialize_uint32_t(firstViewport);}();
result["members"]["viewportCount"]=[&]() {
    json return_pDFybJm=json({});
    return serialize_uint32_t(viewportCount);}();
result["members"]["pViewports"]=[&]() {
    json return_wNAxnoK=json({});
    
        if (pViewports==NULL){
            return_wNAxnoK["null"]=true;
            return return_wNAxnoK;
        }
        
        return_wNAxnoK["members"]={};
        for(int wNAxnoK=0; wNAxnoK < viewportCount; wNAxnoK++){
            json temp;
            temp=[&]() {
    json return_HSUHymr=json({});
    return serialize_VkViewport(pViewports[wNAxnoK]);}();
            return_wNAxnoK["members"].push_back(temp);
        }
        return return_wNAxnoK;
        }();

        writeToConn(result);
    }

    void handle_vkCmdSetScissor(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t firstScissor
            ;
[&]() {
firstScissor=deserialize_uint32_t(data_json["members"]["firstScissor"]);}();
uint32_t scissorCount
            ;
[&]() {
scissorCount=deserialize_uint32_t(data_json["members"]["scissorCount"]);}();
VkRect2D* pScissors
        ;
[&]() {
VkRect2D* temp_AUGsNjr;[&]() {

        if (data_json["members"]["pScissors"].contains("null")){
        temp_AUGsNjr=NULL;
        return;
        }
    temp_AUGsNjr=(VkRect2D*)malloc(scissorCount*sizeof(VkRect2D));
        for (int ShmRGyZ=0; ShmRGyZ < scissorCount; ShmRGyZ++){
            [&]() {
temp_AUGsNjr[ShmRGyZ]=deserialize_VkRect2D(data_json["members"]["pScissors"]["members"][ShmRGyZ]);}();;
        }
        }();pScissors=temp_AUGsNjr;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetScissor)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetScissor");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetScissor)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetScissor");
    }  
    
call_function(commandBuffer, firstScissor, scissorCount, pScissors);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["firstScissor"]=[&]() {
    json return_AAhOHcB=json({});
    return serialize_uint32_t(firstScissor);}();
result["members"]["scissorCount"]=[&]() {
    json return_aFbyEkl=json({});
    return serialize_uint32_t(scissorCount);}();
result["members"]["pScissors"]=[&]() {
    json return_HoUaZsF=json({});
    
        if (pScissors==NULL){
            return_HoUaZsF["null"]=true;
            return return_HoUaZsF;
        }
        
        return_HoUaZsF["members"]={};
        for(int HoUaZsF=0; HoUaZsF < scissorCount; HoUaZsF++){
            json temp;
            temp=[&]() {
    json return_fcbwury=json({});
    return serialize_VkRect2D(pScissors[HoUaZsF]);}();
            return_HoUaZsF["members"].push_back(temp);
        }
        return return_HoUaZsF;
        }();

        writeToConn(result);
    }

    void handle_vkCmdSetLineWidth(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
float lineWidth
        ;
[&]() {
lineWidth=deserialize_float(data_json["members"]["lineWidth"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetLineWidth)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetLineWidth");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetLineWidth)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetLineWidth");
    }  
    
call_function(commandBuffer, lineWidth);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["lineWidth"]=[&]() {
    json return_wNAzdge=json({});
    return serialize_float(lineWidth);}();

        writeToConn(result);
    }

    void handle_vkCmdSetDepthBias(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
float depthBiasConstantFactor
            ;
[&]() {
depthBiasConstantFactor=deserialize_float(data_json["members"]["depthBiasConstantFactor"]);}();
float depthBiasClamp
            ;
[&]() {
depthBiasClamp=deserialize_float(data_json["members"]["depthBiasClamp"]);}();
float depthBiasSlopeFactor
        ;
[&]() {
depthBiasSlopeFactor=deserialize_float(data_json["members"]["depthBiasSlopeFactor"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetDepthBias)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetDepthBias");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetDepthBias)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetDepthBias");
    }  
    
call_function(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["depthBiasConstantFactor"]=[&]() {
    json return_WuwJAKQ=json({});
    return serialize_float(depthBiasConstantFactor);}();
result["members"]["depthBiasClamp"]=[&]() {
    json return_EglyjHR=json({});
    return serialize_float(depthBiasClamp);}();
result["members"]["depthBiasSlopeFactor"]=[&]() {
    json return_IIhBUvi=json({});
    return serialize_float(depthBiasSlopeFactor);}();

        writeToConn(result);
    }

    void handle_vkCmdSetBlendConstants(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
float blendConstants[4]
        ;
[&]() {

        for (int ZLThqOe=0; ZLThqOe < 4; ZLThqOe++){
            [&]() {
float temp_xOjjxVh;[&]() {
temp_xOjjxVh=deserialize_float(data_json["members"]["blendConstants"]["members"][ZLThqOe]);}();blendConstants[ZLThqOe]=temp_xOjjxVh;}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetBlendConstants)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetBlendConstants");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetBlendConstants)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetBlendConstants");
    }  
    
call_function(commandBuffer, blendConstants);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["blendConstants"]=[&]() {
    json return_IAtxqfI=json({});
    
        return_IAtxqfI["members"]={};
        for(int IAtxqfI=0; IAtxqfI < 4; IAtxqfI++){
            json temp;
            temp=[&]() {
    json return_ztxUpOj=json({});
    return serialize_float(blendConstants[IAtxqfI]);}();
            return_IAtxqfI["members"].push_back(temp);
        }
        return return_IAtxqfI;
        }();

        writeToConn(result);
    }

    void handle_vkCmdSetDepthBounds(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
float minDepthBounds
            ;
[&]() {
minDepthBounds=deserialize_float(data_json["members"]["minDepthBounds"]);}();
float maxDepthBounds
        ;
[&]() {
maxDepthBounds=deserialize_float(data_json["members"]["maxDepthBounds"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetDepthBounds)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetDepthBounds");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetDepthBounds)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetDepthBounds");
    }  
    
call_function(commandBuffer, minDepthBounds, maxDepthBounds);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["minDepthBounds"]=[&]() {
    json return_rZnwtvf=json({});
    return serialize_float(minDepthBounds);}();
result["members"]["maxDepthBounds"]=[&]() {
    json return_PRZvSRH=json({});
    return serialize_float(maxDepthBounds);}();

        writeToConn(result);
    }

    void handle_vkCmdSetStencilCompareMask(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkStencilFaceFlags faceMask
            ;
[&]() {
faceMask=deserialize_VkStencilFaceFlags(data_json["members"]["faceMask"]);}();
uint32_t compareMask
        ;
[&]() {
compareMask=deserialize_uint32_t(data_json["members"]["compareMask"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetStencilCompareMask)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetStencilCompareMask");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetStencilCompareMask)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetStencilCompareMask");
    }  
    
call_function(commandBuffer, faceMask, compareMask);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["faceMask"]=[&]() {
    json return_zgrwSjb=json({});
    return serialize_VkStencilFaceFlags(faceMask);}();
result["members"]["compareMask"]=[&]() {
    json return_zWpLGYv=json({});
    return serialize_uint32_t(compareMask);}();

        writeToConn(result);
    }

    void handle_vkCmdSetStencilWriteMask(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkStencilFaceFlags faceMask
            ;
[&]() {
faceMask=deserialize_VkStencilFaceFlags(data_json["members"]["faceMask"]);}();
uint32_t writeMask
        ;
[&]() {
writeMask=deserialize_uint32_t(data_json["members"]["writeMask"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetStencilWriteMask)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetStencilWriteMask");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetStencilWriteMask)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetStencilWriteMask");
    }  
    
call_function(commandBuffer, faceMask, writeMask);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["faceMask"]=[&]() {
    json return_zgrwSjb=json({});
    return serialize_VkStencilFaceFlags(faceMask);}();
result["members"]["writeMask"]=[&]() {
    json return_XGnbTTe=json({});
    return serialize_uint32_t(writeMask);}();

        writeToConn(result);
    }

    void handle_vkCmdSetStencilReference(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkStencilFaceFlags faceMask
            ;
[&]() {
faceMask=deserialize_VkStencilFaceFlags(data_json["members"]["faceMask"]);}();
uint32_t reference
        ;
[&]() {
reference=deserialize_uint32_t(data_json["members"]["reference"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetStencilReference)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetStencilReference");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetStencilReference)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetStencilReference");
    }  
    
call_function(commandBuffer, faceMask, reference);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["faceMask"]=[&]() {
    json return_zgrwSjb=json({});
    return serialize_VkStencilFaceFlags(faceMask);}();
result["members"]["reference"]=[&]() {
    json return_SvICbQi=json({});
    return serialize_uint32_t(reference);}();

        writeToConn(result);
    }

    void handle_vkCmdBindDescriptorSets(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkPipelineBindPoint pipelineBindPoint
            ;
[&]() {
pipelineBindPoint=deserialize_VkPipelineBindPoint(data_json["members"]["pipelineBindPoint"]);}();
VkPipelineLayout layout
            ;
[&]() {
layout=deserialize_VkPipelineLayout(data_json["members"]["layout"]);}();
uint32_t firstSet
            ;
[&]() {
firstSet=deserialize_uint32_t(data_json["members"]["firstSet"]);}();
uint32_t descriptorSetCount
            ;
[&]() {
descriptorSetCount=deserialize_uint32_t(data_json["members"]["descriptorSetCount"]);}();
VkDescriptorSet* pDescriptorSets
            ;
[&]() {
VkDescriptorSet* temp_wCASQio;[&]() {

        if (data_json["members"]["pDescriptorSets"].contains("null")){
        temp_wCASQio=NULL;
        return;
        }
    temp_wCASQio=(VkDescriptorSet*)malloc(descriptorSetCount*sizeof(VkDescriptorSet));
        for (int vodTIEv=0; vodTIEv < descriptorSetCount; vodTIEv++){
            [&]() {
temp_wCASQio[vodTIEv]=deserialize_VkDescriptorSet(data_json["members"]["pDescriptorSets"]["members"][vodTIEv]);}();;
        }
        }();pDescriptorSets=temp_wCASQio;}();
uint32_t dynamicOffsetCount
            ;
[&]() {
dynamicOffsetCount=deserialize_uint32_t(data_json["members"]["dynamicOffsetCount"]);}();
uint32_t* pDynamicOffsets
        ;
[&]() {
uint32_t* temp_iFLYWVY;[&]() {

        if (data_json["members"]["pDynamicOffsets"].contains("null")){
        temp_iFLYWVY=NULL;
        return;
        }
    temp_iFLYWVY=(uint32_t*)malloc(dynamicOffsetCount*sizeof(uint32_t));
        for (int hoxdCOd=0; hoxdCOd < dynamicOffsetCount; hoxdCOd++){
            [&]() {
temp_iFLYWVY[hoxdCOd]=deserialize_uint32_t(data_json["members"]["pDynamicOffsets"]["members"][hoxdCOd]);}();;
        }
        }();pDynamicOffsets=temp_iFLYWVY;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdBindDescriptorSets)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBindDescriptorSets");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdBindDescriptorSets)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBindDescriptorSets");
    }  
    
call_function(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pipelineBindPoint"]=[&]() {
    json return_wEDWbiR=json({});
    return serialize_VkPipelineBindPoint(pipelineBindPoint);}();
result["members"]["layout"]=[&]() {
    json return_PdiawKY=json({});
    return serialize_VkPipelineLayout(layout);}();
result["members"]["firstSet"]=[&]() {
    json return_YqLcKAn=json({});
    return serialize_uint32_t(firstSet);}();
result["members"]["descriptorSetCount"]=[&]() {
    json return_uMBJpkk=json({});
    return serialize_uint32_t(descriptorSetCount);}();
result["members"]["pDescriptorSets"]=[&]() {
    json return_ukafnUk=json({});
    
        if (pDescriptorSets==NULL){
            return_ukafnUk["null"]=true;
            return return_ukafnUk;
        }
        
        return_ukafnUk["members"]={};
        for(int ukafnUk=0; ukafnUk < descriptorSetCount; ukafnUk++){
            json temp;
            temp=[&]() {
    json return_WqNgGSL=json({});
    return serialize_VkDescriptorSet(pDescriptorSets[ukafnUk]);}();
            return_ukafnUk["members"].push_back(temp);
        }
        return return_ukafnUk;
        }();
result["members"]["dynamicOffsetCount"]=[&]() {
    json return_PSMjGUp=json({});
    return serialize_uint32_t(dynamicOffsetCount);}();
result["members"]["pDynamicOffsets"]=[&]() {
    json return_rHVmWOT=json({});
    
        if (pDynamicOffsets==NULL){
            return_rHVmWOT["null"]=true;
            return return_rHVmWOT;
        }
        
        return_rHVmWOT["members"]={};
        for(int rHVmWOT=0; rHVmWOT < dynamicOffsetCount; rHVmWOT++){
            json temp;
            temp=[&]() {
    json return_OplYOlR=json({});
    return serialize_uint32_t(pDynamicOffsets[rHVmWOT]);}();
            return_rHVmWOT["members"].push_back(temp);
        }
        return return_rHVmWOT;
        }();

        writeToConn(result);
    }

    void handle_vkCmdBindIndexBuffer(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBuffer buffer
            ;
[&]() {
buffer=deserialize_VkBuffer(data_json["members"]["buffer"]);}();
VkDeviceSize offset
            ;
[&]() {
[&]() {
offset=deserialize_uint64_t(data_json["members"]["offset"]);}();}();
VkIndexType indexType
        ;
[&]() {
indexType=deserialize_VkIndexType(data_json["members"]["indexType"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdBindIndexBuffer)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBindIndexBuffer");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdBindIndexBuffer)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBindIndexBuffer");
    }  
    
call_function(commandBuffer, buffer, offset, indexType);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["buffer"]=[&]() {
    json return_Fjwvwzv=json({});
    return serialize_VkBuffer(buffer);}();
result["members"]["offset"]=[&]() {
    json return_vTtZMhj=json({});
    return_vTtZMhj=[&]() {
    json return_eEWibmR=json({});
    return serialize_uint64_t(offset);}();return return_vTtZMhj;}();
result["members"]["indexType"]=[&]() {
    json return_VcYhjnj=json({});
    return serialize_VkIndexType(indexType);}();

        writeToConn(result);
    }

    void handle_vkCmdBindVertexBuffers(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t firstBinding
            ;
[&]() {
firstBinding=deserialize_uint32_t(data_json["members"]["firstBinding"]);}();
uint32_t bindingCount
            ;
[&]() {
bindingCount=deserialize_uint32_t(data_json["members"]["bindingCount"]);}();
VkBuffer* pBuffers
            ;
[&]() {
VkBuffer* temp_wjPgLot;[&]() {

        if (data_json["members"]["pBuffers"].contains("null")){
        temp_wjPgLot=NULL;
        return;
        }
    temp_wjPgLot=(VkBuffer*)malloc(bindingCount*sizeof(VkBuffer));
        for (int QWtdPdi=0; QWtdPdi < bindingCount; QWtdPdi++){
            [&]() {
temp_wjPgLot[QWtdPdi]=deserialize_VkBuffer(data_json["members"]["pBuffers"]["members"][QWtdPdi]);}();;
        }
        }();pBuffers=temp_wjPgLot;}();
VkDeviceSize* pOffsets
        ;
[&]() {
VkDeviceSize* temp_fXuGhdz;[&]() {

        if (data_json["members"]["pOffsets"].contains("null")){
        temp_fXuGhdz=NULL;
        return;
        }
    [&]() {

        if (data_json["members"]["pOffsets"].contains("null")){
        temp_fXuGhdz=NULL;
        return;
        }
    temp_fXuGhdz=(uint64_t*)malloc(bindingCount*sizeof(uint64_t));
        for (int YBrawfj=0; YBrawfj < bindingCount; YBrawfj++){
            [&]() {
temp_fXuGhdz[YBrawfj]=deserialize_uint64_t(data_json["members"]["pOffsets"]["members"][YBrawfj]);}();;
        }
        }();}();pOffsets=temp_fXuGhdz;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdBindVertexBuffers)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBindVertexBuffers");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdBindVertexBuffers)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBindVertexBuffers");
    }  
    
call_function(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["firstBinding"]=[&]() {
    json return_JzarCRw=json({});
    return serialize_uint32_t(firstBinding);}();
result["members"]["bindingCount"]=[&]() {
    json return_KKQzFnF=json({});
    return serialize_uint32_t(bindingCount);}();
result["members"]["pBuffers"]=[&]() {
    json return_mLfEgSk=json({});
    
        if (pBuffers==NULL){
            return_mLfEgSk["null"]=true;
            return return_mLfEgSk;
        }
        
        return_mLfEgSk["members"]={};
        for(int mLfEgSk=0; mLfEgSk < bindingCount; mLfEgSk++){
            json temp;
            temp=[&]() {
    json return_sdCvutr=json({});
    return serialize_VkBuffer(pBuffers[mLfEgSk]);}();
            return_mLfEgSk["members"].push_back(temp);
        }
        return return_mLfEgSk;
        }();
result["members"]["pOffsets"]=[&]() {
    json return_vrxKuBD=json({});
    
        if (pOffsets==NULL){
            return_vrxKuBD["null"]=true;
            return return_vrxKuBD;
        }
        
        return_vrxKuBD["members"]={};
        for(int vrxKuBD=0; vrxKuBD < bindingCount; vrxKuBD++){
            json temp;
            temp=[&]() {
    json return_imGoikL=json({});
    return_imGoikL=[&]() {
    json return_KNbZroH=json({});
    return serialize_uint64_t(pOffsets[vrxKuBD]);}();return return_imGoikL;}();
            return_vrxKuBD["members"].push_back(temp);
        }
        return return_vrxKuBD;
        }();

        writeToConn(result);
    }

    void handle_vkCmdDraw(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t vertexCount
            ;
[&]() {
vertexCount=deserialize_uint32_t(data_json["members"]["vertexCount"]);}();
uint32_t instanceCount
            ;
[&]() {
instanceCount=deserialize_uint32_t(data_json["members"]["instanceCount"]);}();
uint32_t firstVertex
            ;
[&]() {
firstVertex=deserialize_uint32_t(data_json["members"]["firstVertex"]);}();
uint32_t firstInstance
        ;
[&]() {
firstInstance=deserialize_uint32_t(data_json["members"]["firstInstance"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdDraw)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDraw");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdDraw)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDraw");
    }  
    
call_function(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["vertexCount"]=[&]() {
    json return_eXADnbI=json({});
    return serialize_uint32_t(vertexCount);}();
result["members"]["instanceCount"]=[&]() {
    json return_esOolQK=json({});
    return serialize_uint32_t(instanceCount);}();
result["members"]["firstVertex"]=[&]() {
    json return_gqZKYBX=json({});
    return serialize_uint32_t(firstVertex);}();
result["members"]["firstInstance"]=[&]() {
    json return_HyClpCH=json({});
    return serialize_uint32_t(firstInstance);}();

        writeToConn(result);
    }

    void handle_vkCmdDrawIndexed(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t indexCount
            ;
[&]() {
indexCount=deserialize_uint32_t(data_json["members"]["indexCount"]);}();
uint32_t instanceCount
            ;
[&]() {
instanceCount=deserialize_uint32_t(data_json["members"]["instanceCount"]);}();
uint32_t firstIndex
            ;
[&]() {
firstIndex=deserialize_uint32_t(data_json["members"]["firstIndex"]);}();
int32_t vertexOffset
            ;
[&]() {
vertexOffset=deserialize_int32_t(data_json["members"]["vertexOffset"]);}();
uint32_t firstInstance
        ;
[&]() {
firstInstance=deserialize_uint32_t(data_json["members"]["firstInstance"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdDrawIndexed)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDrawIndexed");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdDrawIndexed)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDrawIndexed");
    }  
    
call_function(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["indexCount"]=[&]() {
    json return_PXLSkdv=json({});
    return serialize_uint32_t(indexCount);}();
result["members"]["instanceCount"]=[&]() {
    json return_esOolQK=json({});
    return serialize_uint32_t(instanceCount);}();
result["members"]["firstIndex"]=[&]() {
    json return_TPRyOCr=json({});
    return serialize_uint32_t(firstIndex);}();
result["members"]["vertexOffset"]=[&]() {
    json return_cbAqBat=json({});
    return serialize_int32_t(vertexOffset);}();
result["members"]["firstInstance"]=[&]() {
    json return_HyClpCH=json({});
    return serialize_uint32_t(firstInstance);}();

        writeToConn(result);
    }

    void handle_vkCmdDrawMultiEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t drawCount
            ;
[&]() {
drawCount=deserialize_uint32_t(data_json["members"]["drawCount"]);}();
VkMultiDrawInfoEXT* pVertexInfo
            ;
[&]() {
VkMultiDrawInfoEXT* temp_aiNqYfy;[&]() {

        if (data_json["members"]["pVertexInfo"].contains("null")){
        temp_aiNqYfy=NULL;
        return;
        }
    temp_aiNqYfy=(VkMultiDrawInfoEXT*)malloc(drawCount*sizeof(VkMultiDrawInfoEXT));
        for (int vGqvqKH=0; vGqvqKH < drawCount; vGqvqKH++){
            [&]() {
temp_aiNqYfy[vGqvqKH]=deserialize_VkMultiDrawInfoEXT(data_json["members"]["pVertexInfo"]["members"][vGqvqKH]);}();;
        }
        }();pVertexInfo=temp_aiNqYfy;}();
uint32_t instanceCount
            ;
[&]() {
instanceCount=deserialize_uint32_t(data_json["members"]["instanceCount"]);}();
uint32_t firstInstance
            ;
[&]() {
firstInstance=deserialize_uint32_t(data_json["members"]["firstInstance"]);}();
uint32_t stride
        ;
[&]() {
stride=deserialize_uint32_t(data_json["members"]["stride"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdDrawMultiEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDrawMultiEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdDrawMultiEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDrawMultiEXT");
    }  
    
call_function(commandBuffer, drawCount, pVertexInfo, instanceCount, firstInstance, stride);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["drawCount"]=[&]() {
    json return_tDYkDda=json({});
    return serialize_uint32_t(drawCount);}();
result["members"]["pVertexInfo"]=[&]() {
    json return_PLEDCOI=json({});
    
        if (pVertexInfo==NULL){
            return_PLEDCOI["null"]=true;
            return return_PLEDCOI;
        }
        
        return_PLEDCOI["members"]={};
        for(int PLEDCOI=0; PLEDCOI < drawCount; PLEDCOI++){
            json temp;
            temp=[&]() {
    json return_TeEjwMR=json({});
    return serialize_VkMultiDrawInfoEXT(pVertexInfo[PLEDCOI]);}();
            return_PLEDCOI["members"].push_back(temp);
        }
        return return_PLEDCOI;
        }();
result["members"]["instanceCount"]=[&]() {
    json return_esOolQK=json({});
    return serialize_uint32_t(instanceCount);}();
result["members"]["firstInstance"]=[&]() {
    json return_tzucUME=json({});
    return serialize_uint32_t(firstInstance);}();
result["members"]["stride"]=[&]() {
    json return_TkKksoe=json({});
    return serialize_uint32_t(stride);}();

        writeToConn(result);
    }

    void handle_vkCmdDrawMultiIndexedEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t drawCount
            ;
[&]() {
drawCount=deserialize_uint32_t(data_json["members"]["drawCount"]);}();
VkMultiDrawIndexedInfoEXT* pIndexInfo
            ;
[&]() {
VkMultiDrawIndexedInfoEXT* temp_BfTBgQn;[&]() {

        if (data_json["members"]["pIndexInfo"].contains("null")){
        temp_BfTBgQn=NULL;
        return;
        }
    temp_BfTBgQn=(VkMultiDrawIndexedInfoEXT*)malloc(drawCount*sizeof(VkMultiDrawIndexedInfoEXT));
        for (int LmFRKls=0; LmFRKls < drawCount; LmFRKls++){
            [&]() {
temp_BfTBgQn[LmFRKls]=deserialize_VkMultiDrawIndexedInfoEXT(data_json["members"]["pIndexInfo"]["members"][LmFRKls]);}();;
        }
        }();pIndexInfo=temp_BfTBgQn;}();
uint32_t instanceCount
            ;
[&]() {
instanceCount=deserialize_uint32_t(data_json["members"]["instanceCount"]);}();
uint32_t firstInstance
            ;
[&]() {
firstInstance=deserialize_uint32_t(data_json["members"]["firstInstance"]);}();
uint32_t stride
            ;
[&]() {
stride=deserialize_uint32_t(data_json["members"]["stride"]);}();
int32_t* pVertexOffset
        ;
[&]() {
int32_t* temp_gkJtxXz;[&]() {

        if (data_json["members"]["pVertexOffset"].contains("null")){
        temp_gkJtxXz=NULL;
        return;
        }
    temp_gkJtxXz=(int32_t*)malloc(sizeof(int32_t));
[&]() {
*(temp_gkJtxXz)=deserialize_int32_t(data_json["members"]["pVertexOffset"]);}();
}();pVertexOffset=temp_gkJtxXz;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdDrawMultiIndexedEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDrawMultiIndexedEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdDrawMultiIndexedEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDrawMultiIndexedEXT");
    }  
    
call_function(commandBuffer, drawCount, pIndexInfo, instanceCount, firstInstance, stride, pVertexOffset);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["drawCount"]=[&]() {
    json return_tDYkDda=json({});
    return serialize_uint32_t(drawCount);}();
result["members"]["pIndexInfo"]=[&]() {
    json return_HxPimoj=json({});
    
        if (pIndexInfo==NULL){
            return_HxPimoj["null"]=true;
            return return_HxPimoj;
        }
        
        return_HxPimoj["members"]={};
        for(int HxPimoj=0; HxPimoj < drawCount; HxPimoj++){
            json temp;
            temp=[&]() {
    json return_oXUbPan=json({});
    return serialize_VkMultiDrawIndexedInfoEXT(pIndexInfo[HxPimoj]);}();
            return_HxPimoj["members"].push_back(temp);
        }
        return return_HxPimoj;
        }();
result["members"]["instanceCount"]=[&]() {
    json return_esOolQK=json({});
    return serialize_uint32_t(instanceCount);}();
result["members"]["firstInstance"]=[&]() {
    json return_tzucUME=json({});
    return serialize_uint32_t(firstInstance);}();
result["members"]["stride"]=[&]() {
    json return_CdoKfxC=json({});
    return serialize_uint32_t(stride);}();
result["members"]["pVertexOffset"]=[&]() {
    json return_EkkCrxm=json({});
    
        if (pVertexOffset==NULL){
            return_EkkCrxm["null"]=true;
            return return_EkkCrxm;
        }
        return_EkkCrxm=[&]() {
    json return_ItfsUPl=json({});
    return serialize_int32_t(*pVertexOffset);}();
return return_EkkCrxm;}();

        writeToConn(result);
    }

    void handle_vkCmdDrawIndirect(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBuffer buffer
            ;
[&]() {
buffer=deserialize_VkBuffer(data_json["members"]["buffer"]);}();
VkDeviceSize offset
            ;
[&]() {
[&]() {
offset=deserialize_uint64_t(data_json["members"]["offset"]);}();}();
uint32_t drawCount
            ;
[&]() {
drawCount=deserialize_uint32_t(data_json["members"]["drawCount"]);}();
uint32_t stride
        ;
[&]() {
stride=deserialize_uint32_t(data_json["members"]["stride"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdDrawIndirect)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDrawIndirect");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdDrawIndirect)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDrawIndirect");
    }  
    
call_function(commandBuffer, buffer, offset, drawCount, stride);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["buffer"]=[&]() {
    json return_Fjwvwzv=json({});
    return serialize_VkBuffer(buffer);}();
result["members"]["offset"]=[&]() {
    json return_vTtZMhj=json({});
    return_vTtZMhj=[&]() {
    json return_eEWibmR=json({});
    return serialize_uint64_t(offset);}();return return_vTtZMhj;}();
result["members"]["drawCount"]=[&]() {
    json return_tDYkDda=json({});
    return serialize_uint32_t(drawCount);}();
result["members"]["stride"]=[&]() {
    json return_TkKksoe=json({});
    return serialize_uint32_t(stride);}();

        writeToConn(result);
    }

    void handle_vkCmdDrawIndexedIndirect(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBuffer buffer
            ;
[&]() {
buffer=deserialize_VkBuffer(data_json["members"]["buffer"]);}();
VkDeviceSize offset
            ;
[&]() {
[&]() {
offset=deserialize_uint64_t(data_json["members"]["offset"]);}();}();
uint32_t drawCount
            ;
[&]() {
drawCount=deserialize_uint32_t(data_json["members"]["drawCount"]);}();
uint32_t stride
        ;
[&]() {
stride=deserialize_uint32_t(data_json["members"]["stride"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdDrawIndexedIndirect)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDrawIndexedIndirect");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdDrawIndexedIndirect)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDrawIndexedIndirect");
    }  
    
call_function(commandBuffer, buffer, offset, drawCount, stride);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["buffer"]=[&]() {
    json return_Fjwvwzv=json({});
    return serialize_VkBuffer(buffer);}();
result["members"]["offset"]=[&]() {
    json return_vTtZMhj=json({});
    return_vTtZMhj=[&]() {
    json return_eEWibmR=json({});
    return serialize_uint64_t(offset);}();return return_vTtZMhj;}();
result["members"]["drawCount"]=[&]() {
    json return_tDYkDda=json({});
    return serialize_uint32_t(drawCount);}();
result["members"]["stride"]=[&]() {
    json return_TkKksoe=json({});
    return serialize_uint32_t(stride);}();

        writeToConn(result);
    }

    void handle_vkCmdDispatch(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t groupCountX
            ;
[&]() {
groupCountX=deserialize_uint32_t(data_json["members"]["groupCountX"]);}();
uint32_t groupCountY
            ;
[&]() {
groupCountY=deserialize_uint32_t(data_json["members"]["groupCountY"]);}();
uint32_t groupCountZ
        ;
[&]() {
groupCountZ=deserialize_uint32_t(data_json["members"]["groupCountZ"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdDispatch)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDispatch");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdDispatch)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDispatch");
    }  
    
call_function(commandBuffer, groupCountX, groupCountY, groupCountZ);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["groupCountX"]=[&]() {
    json return_BCsqVBT=json({});
    return serialize_uint32_t(groupCountX);}();
result["members"]["groupCountY"]=[&]() {
    json return_PuRhYIE=json({});
    return serialize_uint32_t(groupCountY);}();
result["members"]["groupCountZ"]=[&]() {
    json return_OaBSWyk=json({});
    return serialize_uint32_t(groupCountZ);}();

        writeToConn(result);
    }

    void handle_vkCmdDispatchIndirect(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBuffer buffer
            ;
[&]() {
buffer=deserialize_VkBuffer(data_json["members"]["buffer"]);}();
VkDeviceSize offset
        ;
[&]() {
[&]() {
offset=deserialize_uint64_t(data_json["members"]["offset"]);}();}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdDispatchIndirect)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDispatchIndirect");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdDispatchIndirect)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDispatchIndirect");
    }  
    
call_function(commandBuffer, buffer, offset);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["buffer"]=[&]() {
    json return_Fjwvwzv=json({});
    return serialize_VkBuffer(buffer);}();
result["members"]["offset"]=[&]() {
    json return_ShUjxal=json({});
    return_ShUjxal=[&]() {
    json return_jLgmzaD=json({});
    return serialize_uint64_t(offset);}();return return_ShUjxal;}();

        writeToConn(result);
    }

    void handle_vkCmdSubpassShadingHUAWEI(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
        ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSubpassShadingHUAWEI)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSubpassShadingHUAWEI");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSubpassShadingHUAWEI)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSubpassShadingHUAWEI");
    }  
    
call_function(commandBuffer);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_GVaXYIY=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();

        writeToConn(result);
    }

    void handle_vkCmdDrawClusterHUAWEI(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t groupCountX
            ;
[&]() {
groupCountX=deserialize_uint32_t(data_json["members"]["groupCountX"]);}();
uint32_t groupCountY
            ;
[&]() {
groupCountY=deserialize_uint32_t(data_json["members"]["groupCountY"]);}();
uint32_t groupCountZ
        ;
[&]() {
groupCountZ=deserialize_uint32_t(data_json["members"]["groupCountZ"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdDrawClusterHUAWEI)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDrawClusterHUAWEI");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdDrawClusterHUAWEI)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDrawClusterHUAWEI");
    }  
    
call_function(commandBuffer, groupCountX, groupCountY, groupCountZ);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["groupCountX"]=[&]() {
    json return_BCsqVBT=json({});
    return serialize_uint32_t(groupCountX);}();
result["members"]["groupCountY"]=[&]() {
    json return_PuRhYIE=json({});
    return serialize_uint32_t(groupCountY);}();
result["members"]["groupCountZ"]=[&]() {
    json return_OaBSWyk=json({});
    return serialize_uint32_t(groupCountZ);}();

        writeToConn(result);
    }

    void handle_vkCmdDrawClusterIndirectHUAWEI(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBuffer buffer
            ;
[&]() {
buffer=deserialize_VkBuffer(data_json["members"]["buffer"]);}();
VkDeviceSize offset
        ;
[&]() {
[&]() {
offset=deserialize_uint64_t(data_json["members"]["offset"]);}();}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdDrawClusterIndirectHUAWEI)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDrawClusterIndirectHUAWEI");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdDrawClusterIndirectHUAWEI)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDrawClusterIndirectHUAWEI");
    }  
    
call_function(commandBuffer, buffer, offset);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["buffer"]=[&]() {
    json return_Fjwvwzv=json({});
    return serialize_VkBuffer(buffer);}();
result["members"]["offset"]=[&]() {
    json return_ShUjxal=json({});
    return_ShUjxal=[&]() {
    json return_jLgmzaD=json({});
    return serialize_uint64_t(offset);}();return return_ShUjxal;}();

        writeToConn(result);
    }

    void handle_vkCmdUpdatePipelineIndirectBufferNV(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkPipelineBindPoint           pipelineBindPoint
            ;
[&]() {
pipelineBindPoint=deserialize_VkPipelineBindPoint(data_json["members"]["pipelineBindPoint"]);}();
VkPipeline                    pipeline
        ;
[&]() {
pipeline=deserialize_VkPipeline(data_json["members"]["pipeline"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdUpdatePipelineIndirectBufferNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdUpdatePipelineIndirectBufferNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdUpdatePipelineIndirectBufferNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdUpdatePipelineIndirectBufferNV");
    }  
    
call_function(commandBuffer, pipelineBindPoint, pipeline);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pipelineBindPoint"]=[&]() {
    json return_qFaZuBo=json({});
    return serialize_VkPipelineBindPoint(pipelineBindPoint);}();
result["members"]["pipeline"]=[&]() {
    json return_bGwHFDu=json({});
    return serialize_VkPipeline(pipeline);}();

        writeToConn(result);
    }

    void handle_vkCmdCopyBuffer(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBuffer srcBuffer
            ;
[&]() {
srcBuffer=deserialize_VkBuffer(data_json["members"]["srcBuffer"]);}();
VkBuffer dstBuffer
            ;
[&]() {
dstBuffer=deserialize_VkBuffer(data_json["members"]["dstBuffer"]);}();
uint32_t regionCount
            ;
[&]() {
regionCount=deserialize_uint32_t(data_json["members"]["regionCount"]);}();
VkBufferCopy* pRegions
        ;
[&]() {
VkBufferCopy* temp_zpdOGaU;[&]() {

        if (data_json["members"]["pRegions"].contains("null")){
        temp_zpdOGaU=NULL;
        return;
        }
    temp_zpdOGaU=(VkBufferCopy*)malloc(regionCount*sizeof(VkBufferCopy));
        for (int SqgDlEJ=0; SqgDlEJ < regionCount; SqgDlEJ++){
            [&]() {
temp_zpdOGaU[SqgDlEJ]=deserialize_VkBufferCopy(data_json["members"]["pRegions"]["members"][SqgDlEJ]);}();;
        }
        }();pRegions=temp_zpdOGaU;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdCopyBuffer)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdCopyBuffer");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdCopyBuffer)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdCopyBuffer");
    }  
    
call_function(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["srcBuffer"]=[&]() {
    json return_eYEwbWD=json({});
    return serialize_VkBuffer(srcBuffer);}();
result["members"]["dstBuffer"]=[&]() {
    json return_CcROAZq=json({});
    return serialize_VkBuffer(dstBuffer);}();
result["members"]["regionCount"]=[&]() {
    json return_dxKAhxf=json({});
    return serialize_uint32_t(regionCount);}();
result["members"]["pRegions"]=[&]() {
    json return_MmOgGsb=json({});
    
        if (pRegions==NULL){
            return_MmOgGsb["null"]=true;
            return return_MmOgGsb;
        }
        
        return_MmOgGsb["members"]={};
        for(int MmOgGsb=0; MmOgGsb < regionCount; MmOgGsb++){
            json temp;
            temp=[&]() {
    json return_YzNWmDV=json({});
    return serialize_VkBufferCopy(pRegions[MmOgGsb]);}();
            return_MmOgGsb["members"].push_back(temp);
        }
        return return_MmOgGsb;
        }();

        writeToConn(result);
    }

    void handle_vkCmdCopyImage(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkImage srcImage
            ;
[&]() {
srcImage=deserialize_VkImage(data_json["members"]["srcImage"]);}();
VkImageLayout srcImageLayout
            ;
[&]() {
srcImageLayout=deserialize_VkImageLayout(data_json["members"]["srcImageLayout"]);}();
VkImage dstImage
            ;
[&]() {
dstImage=deserialize_VkImage(data_json["members"]["dstImage"]);}();
VkImageLayout dstImageLayout
            ;
[&]() {
dstImageLayout=deserialize_VkImageLayout(data_json["members"]["dstImageLayout"]);}();
uint32_t regionCount
            ;
[&]() {
regionCount=deserialize_uint32_t(data_json["members"]["regionCount"]);}();
VkImageCopy* pRegions
        ;
[&]() {
VkImageCopy* temp_dstBcAV;[&]() {

        if (data_json["members"]["pRegions"].contains("null")){
        temp_dstBcAV=NULL;
        return;
        }
    temp_dstBcAV=(VkImageCopy*)malloc(regionCount*sizeof(VkImageCopy));
        for (int cmDxNsq=0; cmDxNsq < regionCount; cmDxNsq++){
            [&]() {
temp_dstBcAV[cmDxNsq]=deserialize_VkImageCopy(data_json["members"]["pRegions"]["members"][cmDxNsq]);}();;
        }
        }();pRegions=temp_dstBcAV;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdCopyImage)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdCopyImage");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdCopyImage)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdCopyImage");
    }  
    
call_function(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["srcImage"]=[&]() {
    json return_ttFUXjv=json({});
    return serialize_VkImage(srcImage);}();
result["members"]["srcImageLayout"]=[&]() {
    json return_jSpcGXR=json({});
    return serialize_VkImageLayout(srcImageLayout);}();
result["members"]["dstImage"]=[&]() {
    json return_YrGgULv=json({});
    return serialize_VkImage(dstImage);}();
result["members"]["dstImageLayout"]=[&]() {
    json return_MaoOcTW=json({});
    return serialize_VkImageLayout(dstImageLayout);}();
result["members"]["regionCount"]=[&]() {
    json return_dxKAhxf=json({});
    return serialize_uint32_t(regionCount);}();
result["members"]["pRegions"]=[&]() {
    json return_JtStBSv=json({});
    
        if (pRegions==NULL){
            return_JtStBSv["null"]=true;
            return return_JtStBSv;
        }
        
        return_JtStBSv["members"]={};
        for(int JtStBSv=0; JtStBSv < regionCount; JtStBSv++){
            json temp;
            temp=[&]() {
    json return_xUdVwWX=json({});
    return serialize_VkImageCopy(pRegions[JtStBSv]);}();
            return_JtStBSv["members"].push_back(temp);
        }
        return return_JtStBSv;
        }();

        writeToConn(result);
    }

    void handle_vkCmdBlitImage(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkImage srcImage
            ;
[&]() {
srcImage=deserialize_VkImage(data_json["members"]["srcImage"]);}();
VkImageLayout srcImageLayout
            ;
[&]() {
srcImageLayout=deserialize_VkImageLayout(data_json["members"]["srcImageLayout"]);}();
VkImage dstImage
            ;
[&]() {
dstImage=deserialize_VkImage(data_json["members"]["dstImage"]);}();
VkImageLayout dstImageLayout
            ;
[&]() {
dstImageLayout=deserialize_VkImageLayout(data_json["members"]["dstImageLayout"]);}();
uint32_t regionCount
            ;
[&]() {
regionCount=deserialize_uint32_t(data_json["members"]["regionCount"]);}();
VkImageBlit* pRegions
            ;
[&]() {
VkImageBlit* temp_ExQbOjV;[&]() {

        if (data_json["members"]["pRegions"].contains("null")){
        temp_ExQbOjV=NULL;
        return;
        }
    temp_ExQbOjV=(VkImageBlit*)malloc(regionCount*sizeof(VkImageBlit));
        for (int XMYUdFk=0; XMYUdFk < regionCount; XMYUdFk++){
            [&]() {
temp_ExQbOjV[XMYUdFk]=deserialize_VkImageBlit(data_json["members"]["pRegions"]["members"][XMYUdFk]);}();;
        }
        }();pRegions=temp_ExQbOjV;}();
VkFilter filter
        ;
[&]() {
filter=deserialize_VkFilter(data_json["members"]["filter"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdBlitImage)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBlitImage");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdBlitImage)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBlitImage");
    }  
    
call_function(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["srcImage"]=[&]() {
    json return_ttFUXjv=json({});
    return serialize_VkImage(srcImage);}();
result["members"]["srcImageLayout"]=[&]() {
    json return_jSpcGXR=json({});
    return serialize_VkImageLayout(srcImageLayout);}();
result["members"]["dstImage"]=[&]() {
    json return_YrGgULv=json({});
    return serialize_VkImage(dstImage);}();
result["members"]["dstImageLayout"]=[&]() {
    json return_MaoOcTW=json({});
    return serialize_VkImageLayout(dstImageLayout);}();
result["members"]["regionCount"]=[&]() {
    json return_dxKAhxf=json({});
    return serialize_uint32_t(regionCount);}();
result["members"]["pRegions"]=[&]() {
    json return_IiZqWbk=json({});
    
        if (pRegions==NULL){
            return_IiZqWbk["null"]=true;
            return return_IiZqWbk;
        }
        
        return_IiZqWbk["members"]={};
        for(int IiZqWbk=0; IiZqWbk < regionCount; IiZqWbk++){
            json temp;
            temp=[&]() {
    json return_EpdzwKj=json({});
    return serialize_VkImageBlit(pRegions[IiZqWbk]);}();
            return_IiZqWbk["members"].push_back(temp);
        }
        return return_IiZqWbk;
        }();
result["members"]["filter"]=[&]() {
    json return_zqosFdU=json({});
    return serialize_VkFilter(filter);}();

        writeToConn(result);
    }

    void handle_vkCmdCopyBufferToImage(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBuffer srcBuffer
            ;
[&]() {
srcBuffer=deserialize_VkBuffer(data_json["members"]["srcBuffer"]);}();
VkImage dstImage
            ;
[&]() {
dstImage=deserialize_VkImage(data_json["members"]["dstImage"]);}();
VkImageLayout dstImageLayout
            ;
[&]() {
dstImageLayout=deserialize_VkImageLayout(data_json["members"]["dstImageLayout"]);}();
uint32_t regionCount
            ;
[&]() {
regionCount=deserialize_uint32_t(data_json["members"]["regionCount"]);}();
VkBufferImageCopy* pRegions
        ;
[&]() {
VkBufferImageCopy* temp_Uqaitrj;[&]() {

        if (data_json["members"]["pRegions"].contains("null")){
        temp_Uqaitrj=NULL;
        return;
        }
    temp_Uqaitrj=(VkBufferImageCopy*)malloc(regionCount*sizeof(VkBufferImageCopy));
        for (int EhFzbhg=0; EhFzbhg < regionCount; EhFzbhg++){
            [&]() {
temp_Uqaitrj[EhFzbhg]=deserialize_VkBufferImageCopy(data_json["members"]["pRegions"]["members"][EhFzbhg]);}();;
        }
        }();pRegions=temp_Uqaitrj;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdCopyBufferToImage)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdCopyBufferToImage");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdCopyBufferToImage)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdCopyBufferToImage");
    }  
    
call_function(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["srcBuffer"]=[&]() {
    json return_eYEwbWD=json({});
    return serialize_VkBuffer(srcBuffer);}();
result["members"]["dstImage"]=[&]() {
    json return_YrGgULv=json({});
    return serialize_VkImage(dstImage);}();
result["members"]["dstImageLayout"]=[&]() {
    json return_MaoOcTW=json({});
    return serialize_VkImageLayout(dstImageLayout);}();
result["members"]["regionCount"]=[&]() {
    json return_dxKAhxf=json({});
    return serialize_uint32_t(regionCount);}();
result["members"]["pRegions"]=[&]() {
    json return_aerAosh=json({});
    
        if (pRegions==NULL){
            return_aerAosh["null"]=true;
            return return_aerAosh;
        }
        
        return_aerAosh["members"]={};
        for(int aerAosh=0; aerAosh < regionCount; aerAosh++){
            json temp;
            temp=[&]() {
    json return_aHaUytO=json({});
    return serialize_VkBufferImageCopy(pRegions[aerAosh]);}();
            return_aerAosh["members"].push_back(temp);
        }
        return return_aerAosh;
        }();

        writeToConn(result);
    }

    void handle_vkCmdCopyImageToBuffer(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkImage srcImage
            ;
[&]() {
srcImage=deserialize_VkImage(data_json["members"]["srcImage"]);}();
VkImageLayout srcImageLayout
            ;
[&]() {
srcImageLayout=deserialize_VkImageLayout(data_json["members"]["srcImageLayout"]);}();
VkBuffer dstBuffer
            ;
[&]() {
dstBuffer=deserialize_VkBuffer(data_json["members"]["dstBuffer"]);}();
uint32_t regionCount
            ;
[&]() {
regionCount=deserialize_uint32_t(data_json["members"]["regionCount"]);}();
VkBufferImageCopy* pRegions
        ;
[&]() {
VkBufferImageCopy* temp_Uqaitrj;[&]() {

        if (data_json["members"]["pRegions"].contains("null")){
        temp_Uqaitrj=NULL;
        return;
        }
    temp_Uqaitrj=(VkBufferImageCopy*)malloc(regionCount*sizeof(VkBufferImageCopy));
        for (int EhFzbhg=0; EhFzbhg < regionCount; EhFzbhg++){
            [&]() {
temp_Uqaitrj[EhFzbhg]=deserialize_VkBufferImageCopy(data_json["members"]["pRegions"]["members"][EhFzbhg]);}();;
        }
        }();pRegions=temp_Uqaitrj;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdCopyImageToBuffer)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdCopyImageToBuffer");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdCopyImageToBuffer)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdCopyImageToBuffer");
    }  
    
call_function(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["srcImage"]=[&]() {
    json return_ttFUXjv=json({});
    return serialize_VkImage(srcImage);}();
result["members"]["srcImageLayout"]=[&]() {
    json return_jSpcGXR=json({});
    return serialize_VkImageLayout(srcImageLayout);}();
result["members"]["dstBuffer"]=[&]() {
    json return_CcROAZq=json({});
    return serialize_VkBuffer(dstBuffer);}();
result["members"]["regionCount"]=[&]() {
    json return_dxKAhxf=json({});
    return serialize_uint32_t(regionCount);}();
result["members"]["pRegions"]=[&]() {
    json return_aerAosh=json({});
    
        if (pRegions==NULL){
            return_aerAosh["null"]=true;
            return return_aerAosh;
        }
        
        return_aerAosh["members"]={};
        for(int aerAosh=0; aerAosh < regionCount; aerAosh++){
            json temp;
            temp=[&]() {
    json return_aHaUytO=json({});
    return serialize_VkBufferImageCopy(pRegions[aerAosh]);}();
            return_aerAosh["members"].push_back(temp);
        }
        return return_aerAosh;
        }();

        writeToConn(result);
    }

    void handle_vkCmdCopyMemoryIndirectNV(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkDeviceAddress copyBufferAddress
            ;
[&]() {
[&]() {
copyBufferAddress=deserialize_uint64_t(data_json["members"]["copyBufferAddress"]);}();}();
uint32_t copyCount
            ;
[&]() {
copyCount=deserialize_uint32_t(data_json["members"]["copyCount"]);}();
uint32_t stride
        ;
[&]() {
stride=deserialize_uint32_t(data_json["members"]["stride"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdCopyMemoryIndirectNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdCopyMemoryIndirectNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdCopyMemoryIndirectNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdCopyMemoryIndirectNV");
    }  
    
call_function(commandBuffer, copyBufferAddress, copyCount, stride);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["copyBufferAddress"]=[&]() {
    json return_BmYuuHM=json({});
    return_BmYuuHM=[&]() {
    json return_hBebUNg=json({});
    return serialize_uint64_t(copyBufferAddress);}();return return_BmYuuHM;}();
result["members"]["copyCount"]=[&]() {
    json return_UrUQnTa=json({});
    return serialize_uint32_t(copyCount);}();
result["members"]["stride"]=[&]() {
    json return_TkKksoe=json({});
    return serialize_uint32_t(stride);}();

        writeToConn(result);
    }

    void handle_vkCmdCopyMemoryToImageIndirectNV(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkDeviceAddress copyBufferAddress
            ;
[&]() {
[&]() {
copyBufferAddress=deserialize_uint64_t(data_json["members"]["copyBufferAddress"]);}();}();
uint32_t copyCount
            ;
[&]() {
copyCount=deserialize_uint32_t(data_json["members"]["copyCount"]);}();
uint32_t stride
            ;
[&]() {
stride=deserialize_uint32_t(data_json["members"]["stride"]);}();
VkImage dstImage
            ;
[&]() {
dstImage=deserialize_VkImage(data_json["members"]["dstImage"]);}();
VkImageLayout dstImageLayout
            ;
[&]() {
dstImageLayout=deserialize_VkImageLayout(data_json["members"]["dstImageLayout"]);}();
VkImageSubresourceLayers* pImageSubresources
        ;
[&]() {
VkImageSubresourceLayers* temp_VNmYtle;[&]() {

        if (data_json["members"]["pImageSubresources"].contains("null")){
        temp_VNmYtle=NULL;
        return;
        }
    temp_VNmYtle=(VkImageSubresourceLayers*)malloc(copyCount*sizeof(VkImageSubresourceLayers));
        for (int yXwcxCb=0; yXwcxCb < copyCount; yXwcxCb++){
            [&]() {
temp_VNmYtle[yXwcxCb]=deserialize_VkImageSubresourceLayers(data_json["members"]["pImageSubresources"]["members"][yXwcxCb]);}();;
        }
        }();pImageSubresources=temp_VNmYtle;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdCopyMemoryToImageIndirectNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdCopyMemoryToImageIndirectNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdCopyMemoryToImageIndirectNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdCopyMemoryToImageIndirectNV");
    }  
    
call_function(commandBuffer, copyBufferAddress, copyCount, stride, dstImage, dstImageLayout, pImageSubresources);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["copyBufferAddress"]=[&]() {
    json return_BmYuuHM=json({});
    return_BmYuuHM=[&]() {
    json return_hBebUNg=json({});
    return serialize_uint64_t(copyBufferAddress);}();return return_BmYuuHM;}();
result["members"]["copyCount"]=[&]() {
    json return_UrUQnTa=json({});
    return serialize_uint32_t(copyCount);}();
result["members"]["stride"]=[&]() {
    json return_CdoKfxC=json({});
    return serialize_uint32_t(stride);}();
result["members"]["dstImage"]=[&]() {
    json return_YrGgULv=json({});
    return serialize_VkImage(dstImage);}();
result["members"]["dstImageLayout"]=[&]() {
    json return_MaoOcTW=json({});
    return serialize_VkImageLayout(dstImageLayout);}();
result["members"]["pImageSubresources"]=[&]() {
    json return_NsDydiE=json({});
    
        if (pImageSubresources==NULL){
            return_NsDydiE["null"]=true;
            return return_NsDydiE;
        }
        
        return_NsDydiE["members"]={};
        for(int NsDydiE=0; NsDydiE < copyCount; NsDydiE++){
            json temp;
            temp=[&]() {
    json return_cUUuxJX=json({});
    return serialize_VkImageSubresourceLayers(pImageSubresources[NsDydiE]);}();
            return_NsDydiE["members"].push_back(temp);
        }
        return return_NsDydiE;
        }();

        writeToConn(result);
    }

    void handle_vkCmdUpdateBuffer(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBuffer dstBuffer
            ;
[&]() {
dstBuffer=deserialize_VkBuffer(data_json["members"]["dstBuffer"]);}();
VkDeviceSize dstOffset
            ;
[&]() {
[&]() {
dstOffset=deserialize_uint64_t(data_json["members"]["dstOffset"]);}();}();
VkDeviceSize dataSize
            ;
[&]() {
[&]() {
dataSize=deserialize_uint64_t(data_json["members"]["dataSize"]);}();}();
void* pData
        ;
[&]() {
void* temp_UfbnUEl;[&]() {

        if (data_json["members"]["pData"].contains("null")){
        temp_UfbnUEl=NULL;
        return;
        }
    temp_UfbnUEl=deserialize_void_p(data_json["members"]["pData"]);
}();pData=temp_UfbnUEl;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdUpdateBuffer)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdUpdateBuffer");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdUpdateBuffer)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdUpdateBuffer");
    }  
    
call_function(commandBuffer, dstBuffer, dstOffset, dataSize, pData);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["dstBuffer"]=[&]() {
    json return_CcROAZq=json({});
    return serialize_VkBuffer(dstBuffer);}();
result["members"]["dstOffset"]=[&]() {
    json return_Hccaenu=json({});
    return_Hccaenu=[&]() {
    json return_RfkrhBA=json({});
    return serialize_uint64_t(dstOffset);}();return return_Hccaenu;}();
result["members"]["dataSize"]=[&]() {
    json return_afcGkqb=json({});
    return_afcGkqb=[&]() {
    json return_JwHZINi=json({});
    return serialize_uint64_t(dataSize);}();return return_afcGkqb;}();
result["members"]["pData"]=[&]() {
    json return_wzShuSQ=json({});
    
        if (pData==NULL){
            return_wzShuSQ["null"]=true;
            return return_wzShuSQ;
        }
        return serialize_void_p(pData);
}();

        writeToConn(result);
    }

    void handle_vkCmdFillBuffer(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBuffer dstBuffer
            ;
[&]() {
dstBuffer=deserialize_VkBuffer(data_json["members"]["dstBuffer"]);}();
VkDeviceSize dstOffset
            ;
[&]() {
[&]() {
dstOffset=deserialize_uint64_t(data_json["members"]["dstOffset"]);}();}();
VkDeviceSize size
            ;
[&]() {
[&]() {
size=deserialize_uint64_t(data_json["members"]["size"]);}();}();
uint32_t data
        ;
[&]() {
data=deserialize_uint32_t(data_json["members"]["data"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdFillBuffer)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdFillBuffer");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdFillBuffer)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdFillBuffer");
    }  
    
call_function(commandBuffer, dstBuffer, dstOffset, size, data);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["dstBuffer"]=[&]() {
    json return_CcROAZq=json({});
    return serialize_VkBuffer(dstBuffer);}();
result["members"]["dstOffset"]=[&]() {
    json return_Hccaenu=json({});
    return_Hccaenu=[&]() {
    json return_RfkrhBA=json({});
    return serialize_uint64_t(dstOffset);}();return return_Hccaenu;}();
result["members"]["size"]=[&]() {
    json return_EcDMigR=json({});
    return_EcDMigR=[&]() {
    json return_vDcVgJV=json({});
    return serialize_uint64_t(size);}();return return_EcDMigR;}();
result["members"]["data"]=[&]() {
    json return_PPVKCZS=json({});
    return serialize_uint32_t(data);}();

        writeToConn(result);
    }

    void handle_vkCmdClearColorImage(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkImage image
            ;
[&]() {
image=deserialize_VkImage(data_json["members"]["image"]);}();
VkImageLayout imageLayout
            ;
[&]() {
imageLayout=deserialize_VkImageLayout(data_json["members"]["imageLayout"]);}();
VkClearColorValue* pColor
            ;
[&]() {
VkClearColorValue* temp_KHzkiMk;[&]() {

        if (data_json["members"]["pColor"].contains("null")){
        temp_KHzkiMk=NULL;
        return;
        }
    temp_KHzkiMk=(VkClearColorValue*)malloc(sizeof(VkClearColorValue));
[&]() {
*(temp_KHzkiMk)=deserialize_VkClearColorValue(data_json["members"]["pColor"]);}();
}();pColor=temp_KHzkiMk;}();
uint32_t rangeCount
            ;
[&]() {
rangeCount=deserialize_uint32_t(data_json["members"]["rangeCount"]);}();
VkImageSubresourceRange* pRanges
        ;
[&]() {
VkImageSubresourceRange* temp_RqOHUqm;[&]() {

        if (data_json["members"]["pRanges"].contains("null")){
        temp_RqOHUqm=NULL;
        return;
        }
    temp_RqOHUqm=(VkImageSubresourceRange*)malloc(rangeCount*sizeof(VkImageSubresourceRange));
        for (int gRFDgvN=0; gRFDgvN < rangeCount; gRFDgvN++){
            [&]() {
temp_RqOHUqm[gRFDgvN]=deserialize_VkImageSubresourceRange(data_json["members"]["pRanges"]["members"][gRFDgvN]);}();;
        }
        }();pRanges=temp_RqOHUqm;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdClearColorImage)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdClearColorImage");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdClearColorImage)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdClearColorImage");
    }  
    
call_function(commandBuffer, image, imageLayout, pColor, rangeCount, pRanges);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["image"]=[&]() {
    json return_fgEkUQK=json({});
    return serialize_VkImage(image);}();
result["members"]["imageLayout"]=[&]() {
    json return_eKAjCjh=json({});
    return serialize_VkImageLayout(imageLayout);}();
result["members"]["pColor"]=[&]() {
    json return_SYiLkxh=json({});
    
        if (pColor==NULL){
            return_SYiLkxh["null"]=true;
            return return_SYiLkxh;
        }
        return_SYiLkxh=[&]() {
    json return_KHVYImp=json({});
    return serialize_VkClearColorValue(*pColor);}();
return return_SYiLkxh;}();
result["members"]["rangeCount"]=[&]() {
    json return_kMKRbXK=json({});
    return serialize_uint32_t(rangeCount);}();
result["members"]["pRanges"]=[&]() {
    json return_VlaQKwU=json({});
    
        if (pRanges==NULL){
            return_VlaQKwU["null"]=true;
            return return_VlaQKwU;
        }
        
        return_VlaQKwU["members"]={};
        for(int VlaQKwU=0; VlaQKwU < rangeCount; VlaQKwU++){
            json temp;
            temp=[&]() {
    json return_HgVzjSc=json({});
    return serialize_VkImageSubresourceRange(pRanges[VlaQKwU]);}();
            return_VlaQKwU["members"].push_back(temp);
        }
        return return_VlaQKwU;
        }();

        writeToConn(result);
    }

    void handle_vkCmdClearDepthStencilImage(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkImage image
            ;
[&]() {
image=deserialize_VkImage(data_json["members"]["image"]);}();
VkImageLayout imageLayout
            ;
[&]() {
imageLayout=deserialize_VkImageLayout(data_json["members"]["imageLayout"]);}();
VkClearDepthStencilValue* pDepthStencil
            ;
[&]() {
VkClearDepthStencilValue* temp_ckYNcFj;[&]() {

        if (data_json["members"]["pDepthStencil"].contains("null")){
        temp_ckYNcFj=NULL;
        return;
        }
    temp_ckYNcFj=(VkClearDepthStencilValue*)malloc(sizeof(VkClearDepthStencilValue));
[&]() {
*(temp_ckYNcFj)=deserialize_VkClearDepthStencilValue(data_json["members"]["pDepthStencil"]);}();
}();pDepthStencil=temp_ckYNcFj;}();
uint32_t rangeCount
            ;
[&]() {
rangeCount=deserialize_uint32_t(data_json["members"]["rangeCount"]);}();
VkImageSubresourceRange* pRanges
        ;
[&]() {
VkImageSubresourceRange* temp_RqOHUqm;[&]() {

        if (data_json["members"]["pRanges"].contains("null")){
        temp_RqOHUqm=NULL;
        return;
        }
    temp_RqOHUqm=(VkImageSubresourceRange*)malloc(rangeCount*sizeof(VkImageSubresourceRange));
        for (int gRFDgvN=0; gRFDgvN < rangeCount; gRFDgvN++){
            [&]() {
temp_RqOHUqm[gRFDgvN]=deserialize_VkImageSubresourceRange(data_json["members"]["pRanges"]["members"][gRFDgvN]);}();;
        }
        }();pRanges=temp_RqOHUqm;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdClearDepthStencilImage)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdClearDepthStencilImage");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdClearDepthStencilImage)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdClearDepthStencilImage");
    }  
    
call_function(commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["image"]=[&]() {
    json return_fgEkUQK=json({});
    return serialize_VkImage(image);}();
result["members"]["imageLayout"]=[&]() {
    json return_eKAjCjh=json({});
    return serialize_VkImageLayout(imageLayout);}();
result["members"]["pDepthStencil"]=[&]() {
    json return_daFOvir=json({});
    
        if (pDepthStencil==NULL){
            return_daFOvir["null"]=true;
            return return_daFOvir;
        }
        return_daFOvir=[&]() {
    json return_TTrZzpm=json({});
    return serialize_VkClearDepthStencilValue(*pDepthStencil);}();
return return_daFOvir;}();
result["members"]["rangeCount"]=[&]() {
    json return_kMKRbXK=json({});
    return serialize_uint32_t(rangeCount);}();
result["members"]["pRanges"]=[&]() {
    json return_VlaQKwU=json({});
    
        if (pRanges==NULL){
            return_VlaQKwU["null"]=true;
            return return_VlaQKwU;
        }
        
        return_VlaQKwU["members"]={};
        for(int VlaQKwU=0; VlaQKwU < rangeCount; VlaQKwU++){
            json temp;
            temp=[&]() {
    json return_HgVzjSc=json({});
    return serialize_VkImageSubresourceRange(pRanges[VlaQKwU]);}();
            return_VlaQKwU["members"].push_back(temp);
        }
        return return_VlaQKwU;
        }();

        writeToConn(result);
    }

    void handle_vkCmdClearAttachments(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t attachmentCount
            ;
[&]() {
attachmentCount=deserialize_uint32_t(data_json["members"]["attachmentCount"]);}();
VkClearAttachment* pAttachments
            ;
[&]() {
VkClearAttachment* temp_NPzmvdO;[&]() {

        if (data_json["members"]["pAttachments"].contains("null")){
        temp_NPzmvdO=NULL;
        return;
        }
    temp_NPzmvdO=(VkClearAttachment*)malloc(attachmentCount*sizeof(VkClearAttachment));
        for (int rjIhEUH=0; rjIhEUH < attachmentCount; rjIhEUH++){
            [&]() {
temp_NPzmvdO[rjIhEUH]=deserialize_VkClearAttachment(data_json["members"]["pAttachments"]["members"][rjIhEUH]);}();;
        }
        }();pAttachments=temp_NPzmvdO;}();
uint32_t rectCount
            ;
[&]() {
rectCount=deserialize_uint32_t(data_json["members"]["rectCount"]);}();
VkClearRect* pRects
        ;
[&]() {
VkClearRect* temp_tpwIIiC;[&]() {

        if (data_json["members"]["pRects"].contains("null")){
        temp_tpwIIiC=NULL;
        return;
        }
    temp_tpwIIiC=(VkClearRect*)malloc(rectCount*sizeof(VkClearRect));
        for (int WWGujOr=0; WWGujOr < rectCount; WWGujOr++){
            [&]() {
temp_tpwIIiC[WWGujOr]=deserialize_VkClearRect(data_json["members"]["pRects"]["members"][WWGujOr]);}();;
        }
        }();pRects=temp_tpwIIiC;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdClearAttachments)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdClearAttachments");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdClearAttachments)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdClearAttachments");
    }  
    
call_function(commandBuffer, attachmentCount, pAttachments, rectCount, pRects);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["attachmentCount"]=[&]() {
    json return_RLrTJzT=json({});
    return serialize_uint32_t(attachmentCount);}();
result["members"]["pAttachments"]=[&]() {
    json return_UYQjYbd=json({});
    
        if (pAttachments==NULL){
            return_UYQjYbd["null"]=true;
            return return_UYQjYbd;
        }
        
        return_UYQjYbd["members"]={};
        for(int UYQjYbd=0; UYQjYbd < attachmentCount; UYQjYbd++){
            json temp;
            temp=[&]() {
    json return_wFuMYyg=json({});
    return serialize_VkClearAttachment(pAttachments[UYQjYbd]);}();
            return_UYQjYbd["members"].push_back(temp);
        }
        return return_UYQjYbd;
        }();
result["members"]["rectCount"]=[&]() {
    json return_JAbOCSN=json({});
    return serialize_uint32_t(rectCount);}();
result["members"]["pRects"]=[&]() {
    json return_qjcpCdc=json({});
    
        if (pRects==NULL){
            return_qjcpCdc["null"]=true;
            return return_qjcpCdc;
        }
        
        return_qjcpCdc["members"]={};
        for(int qjcpCdc=0; qjcpCdc < rectCount; qjcpCdc++){
            json temp;
            temp=[&]() {
    json return_hhecOQj=json({});
    return serialize_VkClearRect(pRects[qjcpCdc]);}();
            return_qjcpCdc["members"].push_back(temp);
        }
        return return_qjcpCdc;
        }();

        writeToConn(result);
    }

    void handle_vkCmdResolveImage(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkImage srcImage
            ;
[&]() {
srcImage=deserialize_VkImage(data_json["members"]["srcImage"]);}();
VkImageLayout srcImageLayout
            ;
[&]() {
srcImageLayout=deserialize_VkImageLayout(data_json["members"]["srcImageLayout"]);}();
VkImage dstImage
            ;
[&]() {
dstImage=deserialize_VkImage(data_json["members"]["dstImage"]);}();
VkImageLayout dstImageLayout
            ;
[&]() {
dstImageLayout=deserialize_VkImageLayout(data_json["members"]["dstImageLayout"]);}();
uint32_t regionCount
            ;
[&]() {
regionCount=deserialize_uint32_t(data_json["members"]["regionCount"]);}();
VkImageResolve* pRegions
        ;
[&]() {
VkImageResolve* temp_ZAktmIh;[&]() {

        if (data_json["members"]["pRegions"].contains("null")){
        temp_ZAktmIh=NULL;
        return;
        }
    temp_ZAktmIh=(VkImageResolve*)malloc(regionCount*sizeof(VkImageResolve));
        for (int LZaFUHG=0; LZaFUHG < regionCount; LZaFUHG++){
            [&]() {
temp_ZAktmIh[LZaFUHG]=deserialize_VkImageResolve(data_json["members"]["pRegions"]["members"][LZaFUHG]);}();;
        }
        }();pRegions=temp_ZAktmIh;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdResolveImage)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdResolveImage");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdResolveImage)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdResolveImage");
    }  
    
call_function(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["srcImage"]=[&]() {
    json return_ttFUXjv=json({});
    return serialize_VkImage(srcImage);}();
result["members"]["srcImageLayout"]=[&]() {
    json return_jSpcGXR=json({});
    return serialize_VkImageLayout(srcImageLayout);}();
result["members"]["dstImage"]=[&]() {
    json return_YrGgULv=json({});
    return serialize_VkImage(dstImage);}();
result["members"]["dstImageLayout"]=[&]() {
    json return_MaoOcTW=json({});
    return serialize_VkImageLayout(dstImageLayout);}();
result["members"]["regionCount"]=[&]() {
    json return_dxKAhxf=json({});
    return serialize_uint32_t(regionCount);}();
result["members"]["pRegions"]=[&]() {
    json return_NdlfwMH=json({});
    
        if (pRegions==NULL){
            return_NdlfwMH["null"]=true;
            return return_NdlfwMH;
        }
        
        return_NdlfwMH["members"]={};
        for(int NdlfwMH=0; NdlfwMH < regionCount; NdlfwMH++){
            json temp;
            temp=[&]() {
    json return_IojYFlC=json({});
    return serialize_VkImageResolve(pRegions[NdlfwMH]);}();
            return_NdlfwMH["members"].push_back(temp);
        }
        return return_NdlfwMH;
        }();

        writeToConn(result);
    }

    void handle_vkCmdSetEvent(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkEvent event
            ;
[&]() {
event=deserialize_VkEvent(data_json["members"]["event"]);}();
VkPipelineStageFlags stageMask
        ;
[&]() {
stageMask=deserialize_VkPipelineStageFlags(data_json["members"]["stageMask"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetEvent)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetEvent");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetEvent)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetEvent");
    }  
    
call_function(commandBuffer, event, stageMask);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["event"]=[&]() {
    json return_LAeltAe=json({});
    return serialize_VkEvent(event);}();
result["members"]["stageMask"]=[&]() {
    json return_olqbFGe=json({});
    return serialize_VkPipelineStageFlags(stageMask);}();

        writeToConn(result);
    }

    void handle_vkCmdResetEvent(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkEvent event
            ;
[&]() {
event=deserialize_VkEvent(data_json["members"]["event"]);}();
VkPipelineStageFlags stageMask
        ;
[&]() {
stageMask=deserialize_VkPipelineStageFlags(data_json["members"]["stageMask"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdResetEvent)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdResetEvent");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdResetEvent)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdResetEvent");
    }  
    
call_function(commandBuffer, event, stageMask);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["event"]=[&]() {
    json return_LAeltAe=json({});
    return serialize_VkEvent(event);}();
result["members"]["stageMask"]=[&]() {
    json return_olqbFGe=json({});
    return serialize_VkPipelineStageFlags(stageMask);}();

        writeToConn(result);
    }

    void handle_vkCmdWaitEvents(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t eventCount
            ;
[&]() {
eventCount=deserialize_uint32_t(data_json["members"]["eventCount"]);}();
VkEvent* pEvents
            ;
[&]() {
VkEvent* temp_tXNsqDu;[&]() {

        if (data_json["members"]["pEvents"].contains("null")){
        temp_tXNsqDu=NULL;
        return;
        }
    temp_tXNsqDu=(VkEvent*)malloc(eventCount*sizeof(VkEvent));
        for (int lpktshm=0; lpktshm < eventCount; lpktshm++){
            [&]() {
temp_tXNsqDu[lpktshm]=deserialize_VkEvent(data_json["members"]["pEvents"]["members"][lpktshm]);}();;
        }
        }();pEvents=temp_tXNsqDu;}();
VkPipelineStageFlags srcStageMask
            ;
[&]() {
srcStageMask=deserialize_VkPipelineStageFlags(data_json["members"]["srcStageMask"]);}();
VkPipelineStageFlags dstStageMask
            ;
[&]() {
dstStageMask=deserialize_VkPipelineStageFlags(data_json["members"]["dstStageMask"]);}();
uint32_t memoryBarrierCount
            ;
[&]() {
memoryBarrierCount=deserialize_uint32_t(data_json["members"]["memoryBarrierCount"]);}();
VkMemoryBarrier* pMemoryBarriers
            ;
[&]() {
VkMemoryBarrier* temp_OZtjfZp;[&]() {

        if (data_json["members"]["pMemoryBarriers"].contains("null")){
        temp_OZtjfZp=NULL;
        return;
        }
    temp_OZtjfZp=(VkMemoryBarrier*)malloc(memoryBarrierCount*sizeof(VkMemoryBarrier));
        for (int NPCXceX=0; NPCXceX < memoryBarrierCount; NPCXceX++){
            [&]() {
temp_OZtjfZp[NPCXceX]=deserialize_VkMemoryBarrier(data_json["members"]["pMemoryBarriers"]["members"][NPCXceX]);}();;
        }
        }();pMemoryBarriers=temp_OZtjfZp;}();
uint32_t bufferMemoryBarrierCount
            ;
[&]() {
bufferMemoryBarrierCount=deserialize_uint32_t(data_json["members"]["bufferMemoryBarrierCount"]);}();
VkBufferMemoryBarrier* pBufferMemoryBarriers
            ;
[&]() {
VkBufferMemoryBarrier* temp_SdfaRJG;[&]() {

        if (data_json["members"]["pBufferMemoryBarriers"].contains("null")){
        temp_SdfaRJG=NULL;
        return;
        }
    temp_SdfaRJG=(VkBufferMemoryBarrier*)malloc(bufferMemoryBarrierCount*sizeof(VkBufferMemoryBarrier));
        for (int DNoQZXl=0; DNoQZXl < bufferMemoryBarrierCount; DNoQZXl++){
            [&]() {
temp_SdfaRJG[DNoQZXl]=deserialize_VkBufferMemoryBarrier(data_json["members"]["pBufferMemoryBarriers"]["members"][DNoQZXl]);}();;
        }
        }();pBufferMemoryBarriers=temp_SdfaRJG;}();
uint32_t imageMemoryBarrierCount
            ;
[&]() {
imageMemoryBarrierCount=deserialize_uint32_t(data_json["members"]["imageMemoryBarrierCount"]);}();
VkImageMemoryBarrier* pImageMemoryBarriers
        ;
[&]() {
VkImageMemoryBarrier* temp_nCSzFhY;[&]() {

        if (data_json["members"]["pImageMemoryBarriers"].contains("null")){
        temp_nCSzFhY=NULL;
        return;
        }
    temp_nCSzFhY=(VkImageMemoryBarrier*)malloc(imageMemoryBarrierCount*sizeof(VkImageMemoryBarrier));
        for (int pqmvZMk=0; pqmvZMk < imageMemoryBarrierCount; pqmvZMk++){
            [&]() {
temp_nCSzFhY[pqmvZMk]=deserialize_VkImageMemoryBarrier(data_json["members"]["pImageMemoryBarriers"]["members"][pqmvZMk]);}();;
        }
        }();pImageMemoryBarriers=temp_nCSzFhY;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdWaitEvents)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdWaitEvents");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdWaitEvents)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdWaitEvents");
    }  
    
call_function(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["eventCount"]=[&]() {
    json return_bkwdAgQ=json({});
    return serialize_uint32_t(eventCount);}();
result["members"]["pEvents"]=[&]() {
    json return_PTtibsf=json({});
    
        if (pEvents==NULL){
            return_PTtibsf["null"]=true;
            return return_PTtibsf;
        }
        
        return_PTtibsf["members"]={};
        for(int PTtibsf=0; PTtibsf < eventCount; PTtibsf++){
            json temp;
            temp=[&]() {
    json return_CizVpYM=json({});
    return serialize_VkEvent(pEvents[PTtibsf]);}();
            return_PTtibsf["members"].push_back(temp);
        }
        return return_PTtibsf;
        }();
result["members"]["srcStageMask"]=[&]() {
    json return_QGQMorx=json({});
    return serialize_VkPipelineStageFlags(srcStageMask);}();
result["members"]["dstStageMask"]=[&]() {
    json return_nZwFFwu=json({});
    return serialize_VkPipelineStageFlags(dstStageMask);}();
result["members"]["memoryBarrierCount"]=[&]() {
    json return_VnnqrBL=json({});
    return serialize_uint32_t(memoryBarrierCount);}();
result["members"]["pMemoryBarriers"]=[&]() {
    json return_ijpmWux=json({});
    
        if (pMemoryBarriers==NULL){
            return_ijpmWux["null"]=true;
            return return_ijpmWux;
        }
        
        return_ijpmWux["members"]={};
        for(int ijpmWux=0; ijpmWux < memoryBarrierCount; ijpmWux++){
            json temp;
            temp=[&]() {
    json return_ivxuntr=json({});
    return serialize_VkMemoryBarrier(pMemoryBarriers[ijpmWux]);}();
            return_ijpmWux["members"].push_back(temp);
        }
        return return_ijpmWux;
        }();
result["members"]["bufferMemoryBarrierCount"]=[&]() {
    json return_ncdzUGc=json({});
    return serialize_uint32_t(bufferMemoryBarrierCount);}();
result["members"]["pBufferMemoryBarriers"]=[&]() {
    json return_GiNOBdy=json({});
    
        if (pBufferMemoryBarriers==NULL){
            return_GiNOBdy["null"]=true;
            return return_GiNOBdy;
        }
        
        return_GiNOBdy["members"]={};
        for(int GiNOBdy=0; GiNOBdy < bufferMemoryBarrierCount; GiNOBdy++){
            json temp;
            temp=[&]() {
    json return_UEKITtG=json({});
    return serialize_VkBufferMemoryBarrier(pBufferMemoryBarriers[GiNOBdy]);}();
            return_GiNOBdy["members"].push_back(temp);
        }
        return return_GiNOBdy;
        }();
result["members"]["imageMemoryBarrierCount"]=[&]() {
    json return_lhQvufS=json({});
    return serialize_uint32_t(imageMemoryBarrierCount);}();
result["members"]["pImageMemoryBarriers"]=[&]() {
    json return_aivtoiz=json({});
    
        if (pImageMemoryBarriers==NULL){
            return_aivtoiz["null"]=true;
            return return_aivtoiz;
        }
        
        return_aivtoiz["members"]={};
        for(int aivtoiz=0; aivtoiz < imageMemoryBarrierCount; aivtoiz++){
            json temp;
            temp=[&]() {
    json return_IvBugLr=json({});
    return serialize_VkImageMemoryBarrier(pImageMemoryBarriers[aivtoiz]);}();
            return_aivtoiz["members"].push_back(temp);
        }
        return return_aivtoiz;
        }();

        writeToConn(result);
    }

    void handle_vkCmdPipelineBarrier(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkPipelineStageFlags srcStageMask
            ;
[&]() {
srcStageMask=deserialize_VkPipelineStageFlags(data_json["members"]["srcStageMask"]);}();
VkPipelineStageFlags dstStageMask
            ;
[&]() {
dstStageMask=deserialize_VkPipelineStageFlags(data_json["members"]["dstStageMask"]);}();
VkDependencyFlags dependencyFlags
            ;
[&]() {
dependencyFlags=deserialize_VkDependencyFlags(data_json["members"]["dependencyFlags"]);}();
uint32_t memoryBarrierCount
            ;
[&]() {
memoryBarrierCount=deserialize_uint32_t(data_json["members"]["memoryBarrierCount"]);}();
VkMemoryBarrier* pMemoryBarriers
            ;
[&]() {
VkMemoryBarrier* temp_OZtjfZp;[&]() {

        if (data_json["members"]["pMemoryBarriers"].contains("null")){
        temp_OZtjfZp=NULL;
        return;
        }
    temp_OZtjfZp=(VkMemoryBarrier*)malloc(memoryBarrierCount*sizeof(VkMemoryBarrier));
        for (int NPCXceX=0; NPCXceX < memoryBarrierCount; NPCXceX++){
            [&]() {
temp_OZtjfZp[NPCXceX]=deserialize_VkMemoryBarrier(data_json["members"]["pMemoryBarriers"]["members"][NPCXceX]);}();;
        }
        }();pMemoryBarriers=temp_OZtjfZp;}();
uint32_t bufferMemoryBarrierCount
            ;
[&]() {
bufferMemoryBarrierCount=deserialize_uint32_t(data_json["members"]["bufferMemoryBarrierCount"]);}();
VkBufferMemoryBarrier* pBufferMemoryBarriers
            ;
[&]() {
VkBufferMemoryBarrier* temp_SdfaRJG;[&]() {

        if (data_json["members"]["pBufferMemoryBarriers"].contains("null")){
        temp_SdfaRJG=NULL;
        return;
        }
    temp_SdfaRJG=(VkBufferMemoryBarrier*)malloc(bufferMemoryBarrierCount*sizeof(VkBufferMemoryBarrier));
        for (int DNoQZXl=0; DNoQZXl < bufferMemoryBarrierCount; DNoQZXl++){
            [&]() {
temp_SdfaRJG[DNoQZXl]=deserialize_VkBufferMemoryBarrier(data_json["members"]["pBufferMemoryBarriers"]["members"][DNoQZXl]);}();;
        }
        }();pBufferMemoryBarriers=temp_SdfaRJG;}();
uint32_t imageMemoryBarrierCount
            ;
[&]() {
imageMemoryBarrierCount=deserialize_uint32_t(data_json["members"]["imageMemoryBarrierCount"]);}();
VkImageMemoryBarrier* pImageMemoryBarriers
        ;
[&]() {
VkImageMemoryBarrier* temp_nCSzFhY;[&]() {

        if (data_json["members"]["pImageMemoryBarriers"].contains("null")){
        temp_nCSzFhY=NULL;
        return;
        }
    temp_nCSzFhY=(VkImageMemoryBarrier*)malloc(imageMemoryBarrierCount*sizeof(VkImageMemoryBarrier));
        for (int pqmvZMk=0; pqmvZMk < imageMemoryBarrierCount; pqmvZMk++){
            [&]() {
temp_nCSzFhY[pqmvZMk]=deserialize_VkImageMemoryBarrier(data_json["members"]["pImageMemoryBarriers"]["members"][pqmvZMk]);}();;
        }
        }();pImageMemoryBarriers=temp_nCSzFhY;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdPipelineBarrier)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdPipelineBarrier");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdPipelineBarrier)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdPipelineBarrier");
    }  
    
call_function(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["srcStageMask"]=[&]() {
    json return_QGQMorx=json({});
    return serialize_VkPipelineStageFlags(srcStageMask);}();
result["members"]["dstStageMask"]=[&]() {
    json return_nZwFFwu=json({});
    return serialize_VkPipelineStageFlags(dstStageMask);}();
result["members"]["dependencyFlags"]=[&]() {
    json return_ZrlnfsX=json({});
    return serialize_VkDependencyFlags(dependencyFlags);}();
result["members"]["memoryBarrierCount"]=[&]() {
    json return_VnnqrBL=json({});
    return serialize_uint32_t(memoryBarrierCount);}();
result["members"]["pMemoryBarriers"]=[&]() {
    json return_ijpmWux=json({});
    
        if (pMemoryBarriers==NULL){
            return_ijpmWux["null"]=true;
            return return_ijpmWux;
        }
        
        return_ijpmWux["members"]={};
        for(int ijpmWux=0; ijpmWux < memoryBarrierCount; ijpmWux++){
            json temp;
            temp=[&]() {
    json return_ivxuntr=json({});
    return serialize_VkMemoryBarrier(pMemoryBarriers[ijpmWux]);}();
            return_ijpmWux["members"].push_back(temp);
        }
        return return_ijpmWux;
        }();
result["members"]["bufferMemoryBarrierCount"]=[&]() {
    json return_ncdzUGc=json({});
    return serialize_uint32_t(bufferMemoryBarrierCount);}();
result["members"]["pBufferMemoryBarriers"]=[&]() {
    json return_GiNOBdy=json({});
    
        if (pBufferMemoryBarriers==NULL){
            return_GiNOBdy["null"]=true;
            return return_GiNOBdy;
        }
        
        return_GiNOBdy["members"]={};
        for(int GiNOBdy=0; GiNOBdy < bufferMemoryBarrierCount; GiNOBdy++){
            json temp;
            temp=[&]() {
    json return_UEKITtG=json({});
    return serialize_VkBufferMemoryBarrier(pBufferMemoryBarriers[GiNOBdy]);}();
            return_GiNOBdy["members"].push_back(temp);
        }
        return return_GiNOBdy;
        }();
result["members"]["imageMemoryBarrierCount"]=[&]() {
    json return_lhQvufS=json({});
    return serialize_uint32_t(imageMemoryBarrierCount);}();
result["members"]["pImageMemoryBarriers"]=[&]() {
    json return_aivtoiz=json({});
    
        if (pImageMemoryBarriers==NULL){
            return_aivtoiz["null"]=true;
            return return_aivtoiz;
        }
        
        return_aivtoiz["members"]={};
        for(int aivtoiz=0; aivtoiz < imageMemoryBarrierCount; aivtoiz++){
            json temp;
            temp=[&]() {
    json return_IvBugLr=json({});
    return serialize_VkImageMemoryBarrier(pImageMemoryBarriers[aivtoiz]);}();
            return_aivtoiz["members"].push_back(temp);
        }
        return return_aivtoiz;
        }();

        writeToConn(result);
    }

    void handle_vkCmdBeginQuery(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkQueryPool queryPool
            ;
[&]() {
queryPool=deserialize_VkQueryPool(data_json["members"]["queryPool"]);}();
uint32_t query
            ;
[&]() {
query=deserialize_uint32_t(data_json["members"]["query"]);}();
VkQueryControlFlags flags
        ;
[&]() {
flags=deserialize_VkQueryControlFlags(data_json["members"]["flags"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdBeginQuery)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBeginQuery");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdBeginQuery)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBeginQuery");
    }  
    
call_function(commandBuffer, queryPool, query, flags);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["queryPool"]=[&]() {
    json return_hLGHCzh=json({});
    return serialize_VkQueryPool(queryPool);}();
result["members"]["query"]=[&]() {
    json return_NtquCQL=json({});
    return serialize_uint32_t(query);}();
result["members"]["flags"]=[&]() {
    json return_zYxUeJx=json({});
    return serialize_VkQueryControlFlags(flags);}();

        writeToConn(result);
    }

    void handle_vkCmdEndQuery(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkQueryPool queryPool
            ;
[&]() {
queryPool=deserialize_VkQueryPool(data_json["members"]["queryPool"]);}();
uint32_t query
        ;
[&]() {
query=deserialize_uint32_t(data_json["members"]["query"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdEndQuery)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdEndQuery");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdEndQuery)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdEndQuery");
    }  
    
call_function(commandBuffer, queryPool, query);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["queryPool"]=[&]() {
    json return_hLGHCzh=json({});
    return serialize_VkQueryPool(queryPool);}();
result["members"]["query"]=[&]() {
    json return_fhEpMvz=json({});
    return serialize_uint32_t(query);}();

        writeToConn(result);
    }

    void handle_vkCmdBeginConditionalRenderingEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkConditionalRenderingBeginInfoEXT* pConditionalRenderingBegin
        ;
[&]() {
VkConditionalRenderingBeginInfoEXT* temp_DrkoCMd;[&]() {

        if (data_json["members"]["pConditionalRenderingBegin"].contains("null")){
        temp_DrkoCMd=NULL;
        return;
        }
    temp_DrkoCMd=(VkConditionalRenderingBeginInfoEXT*)malloc(sizeof(VkConditionalRenderingBeginInfoEXT));
[&]() {
*(temp_DrkoCMd)=deserialize_VkConditionalRenderingBeginInfoEXT(data_json["members"]["pConditionalRenderingBegin"]);}();
}();pConditionalRenderingBegin=temp_DrkoCMd;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdBeginConditionalRenderingEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBeginConditionalRenderingEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdBeginConditionalRenderingEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBeginConditionalRenderingEXT");
    }  
    
call_function(commandBuffer, pConditionalRenderingBegin);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pConditionalRenderingBegin"]=[&]() {
    json return_CoegtaT=json({});
    
        if (pConditionalRenderingBegin==NULL){
            return_CoegtaT["null"]=true;
            return return_CoegtaT;
        }
        return_CoegtaT=[&]() {
    json return_UmMKkku=json({});
    return serialize_VkConditionalRenderingBeginInfoEXT(*pConditionalRenderingBegin);}();
return return_CoegtaT;}();

        writeToConn(result);
    }

    void handle_vkCmdEndConditionalRenderingEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
        ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdEndConditionalRenderingEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdEndConditionalRenderingEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdEndConditionalRenderingEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdEndConditionalRenderingEXT");
    }  
    
call_function(commandBuffer);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_GVaXYIY=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();

        writeToConn(result);
    }

    void handle_vkCmdResetQueryPool(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkQueryPool queryPool
            ;
[&]() {
queryPool=deserialize_VkQueryPool(data_json["members"]["queryPool"]);}();
uint32_t firstQuery
            ;
[&]() {
firstQuery=deserialize_uint32_t(data_json["members"]["firstQuery"]);}();
uint32_t queryCount
        ;
[&]() {
queryCount=deserialize_uint32_t(data_json["members"]["queryCount"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdResetQueryPool)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdResetQueryPool");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdResetQueryPool)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdResetQueryPool");
    }  
    
call_function(commandBuffer, queryPool, firstQuery, queryCount);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["queryPool"]=[&]() {
    json return_hLGHCzh=json({});
    return serialize_VkQueryPool(queryPool);}();
result["members"]["firstQuery"]=[&]() {
    json return_NDUBmTE=json({});
    return serialize_uint32_t(firstQuery);}();
result["members"]["queryCount"]=[&]() {
    json return_uMPzGuZ=json({});
    return serialize_uint32_t(queryCount);}();

        writeToConn(result);
    }

    void handle_vkCmdWriteTimestamp(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkPipelineStageFlagBits pipelineStage
            ;
[&]() {
pipelineStage=deserialize_VkPipelineStageFlagBits(data_json["members"]["pipelineStage"]);}();
VkQueryPool queryPool
            ;
[&]() {
queryPool=deserialize_VkQueryPool(data_json["members"]["queryPool"]);}();
uint32_t query
        ;
[&]() {
query=deserialize_uint32_t(data_json["members"]["query"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdWriteTimestamp)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdWriteTimestamp");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdWriteTimestamp)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdWriteTimestamp");
    }  
    
call_function(commandBuffer, pipelineStage, queryPool, query);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pipelineStage"]=[&]() {
    json return_zuwjquI=json({});
    return serialize_VkPipelineStageFlagBits(pipelineStage);}();
result["members"]["queryPool"]=[&]() {
    json return_hLGHCzh=json({});
    return serialize_VkQueryPool(queryPool);}();
result["members"]["query"]=[&]() {
    json return_fhEpMvz=json({});
    return serialize_uint32_t(query);}();

        writeToConn(result);
    }

    void handle_vkCmdCopyQueryPoolResults(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkQueryPool queryPool
            ;
[&]() {
queryPool=deserialize_VkQueryPool(data_json["members"]["queryPool"]);}();
uint32_t firstQuery
            ;
[&]() {
firstQuery=deserialize_uint32_t(data_json["members"]["firstQuery"]);}();
uint32_t queryCount
            ;
[&]() {
queryCount=deserialize_uint32_t(data_json["members"]["queryCount"]);}();
VkBuffer dstBuffer
            ;
[&]() {
dstBuffer=deserialize_VkBuffer(data_json["members"]["dstBuffer"]);}();
VkDeviceSize dstOffset
            ;
[&]() {
[&]() {
dstOffset=deserialize_uint64_t(data_json["members"]["dstOffset"]);}();}();
VkDeviceSize stride
            ;
[&]() {
[&]() {
stride=deserialize_uint64_t(data_json["members"]["stride"]);}();}();
VkQueryResultFlags flags
        ;
[&]() {
flags=deserialize_VkQueryResultFlags(data_json["members"]["flags"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdCopyQueryPoolResults)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdCopyQueryPoolResults");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdCopyQueryPoolResults)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdCopyQueryPoolResults");
    }  
    
call_function(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["queryPool"]=[&]() {
    json return_hLGHCzh=json({});
    return serialize_VkQueryPool(queryPool);}();
result["members"]["firstQuery"]=[&]() {
    json return_NDUBmTE=json({});
    return serialize_uint32_t(firstQuery);}();
result["members"]["queryCount"]=[&]() {
    json return_qTWGWQh=json({});
    return serialize_uint32_t(queryCount);}();
result["members"]["dstBuffer"]=[&]() {
    json return_CcROAZq=json({});
    return serialize_VkBuffer(dstBuffer);}();
result["members"]["dstOffset"]=[&]() {
    json return_Hccaenu=json({});
    return_Hccaenu=[&]() {
    json return_RfkrhBA=json({});
    return serialize_uint64_t(dstOffset);}();return return_Hccaenu;}();
result["members"]["stride"]=[&]() {
    json return_MQAmiOM=json({});
    return_MQAmiOM=[&]() {
    json return_jeGZpau=json({});
    return serialize_uint64_t(stride);}();return return_MQAmiOM;}();
result["members"]["flags"]=[&]() {
    json return_ZmykXqP=json({});
    return serialize_VkQueryResultFlags(flags);}();

        writeToConn(result);
    }

    void handle_vkCmdPushConstants(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkPipelineLayout layout
            ;
[&]() {
layout=deserialize_VkPipelineLayout(data_json["members"]["layout"]);}();
VkShaderStageFlags stageFlags
            ;
[&]() {
stageFlags=deserialize_VkShaderStageFlags(data_json["members"]["stageFlags"]);}();
uint32_t offset
            ;
[&]() {
offset=deserialize_uint32_t(data_json["members"]["offset"]);}();
uint32_t size
            ;
[&]() {
size=deserialize_uint32_t(data_json["members"]["size"]);}();
void* pValues
        ;
[&]() {
void* temp_jdgMsUN;[&]() {

        if (data_json["members"]["pValues"].contains("null")){
        temp_jdgMsUN=NULL;
        return;
        }
    temp_jdgMsUN=deserialize_void_p(data_json["members"]["pValues"]);
}();pValues=temp_jdgMsUN;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdPushConstants)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdPushConstants");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdPushConstants)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdPushConstants");
    }  
    
call_function(commandBuffer, layout, stageFlags, offset, size, pValues);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["layout"]=[&]() {
    json return_PdiawKY=json({});
    return serialize_VkPipelineLayout(layout);}();
result["members"]["stageFlags"]=[&]() {
    json return_lohgMKa=json({});
    return serialize_VkShaderStageFlags(stageFlags);}();
result["members"]["offset"]=[&]() {
    json return_SEjaTey=json({});
    return serialize_uint32_t(offset);}();
result["members"]["size"]=[&]() {
    json return_wrJNIth=json({});
    return serialize_uint32_t(size);}();
result["members"]["pValues"]=[&]() {
    json return_sRPPxyU=json({});
    
        if (pValues==NULL){
            return_sRPPxyU["null"]=true;
            return return_sRPPxyU;
        }
        return serialize_void_p(pValues);
}();

        writeToConn(result);
    }

    void handle_vkCmdBeginRenderPass(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkRenderPassBeginInfo* pRenderPassBegin
            ;
[&]() {
VkRenderPassBeginInfo* temp_rUfgIJR;[&]() {

        if (data_json["members"]["pRenderPassBegin"].contains("null")){
        temp_rUfgIJR=NULL;
        return;
        }
    temp_rUfgIJR=(VkRenderPassBeginInfo*)malloc(sizeof(VkRenderPassBeginInfo));
[&]() {
*(temp_rUfgIJR)=deserialize_VkRenderPassBeginInfo(data_json["members"]["pRenderPassBegin"]);}();
}();pRenderPassBegin=temp_rUfgIJR;}();
VkSubpassContents contents
        ;
[&]() {
contents=deserialize_VkSubpassContents(data_json["members"]["contents"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdBeginRenderPass)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBeginRenderPass");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdBeginRenderPass)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBeginRenderPass");
    }  
    
call_function(commandBuffer, pRenderPassBegin, contents);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pRenderPassBegin"]=[&]() {
    json return_PcbbZJT=json({});
    
        if (pRenderPassBegin==NULL){
            return_PcbbZJT["null"]=true;
            return return_PcbbZJT;
        }
        return_PcbbZJT=[&]() {
    json return_GvjTABU=json({});
    return serialize_VkRenderPassBeginInfo(*pRenderPassBegin);}();
return return_PcbbZJT;}();
result["members"]["contents"]=[&]() {
    json return_uSmUlHK=json({});
    return serialize_VkSubpassContents(contents);}();

        writeToConn(result);
    }

    void handle_vkCmdNextSubpass(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkSubpassContents contents
        ;
[&]() {
contents=deserialize_VkSubpassContents(data_json["members"]["contents"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdNextSubpass)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdNextSubpass");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdNextSubpass)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdNextSubpass");
    }  
    
call_function(commandBuffer, contents);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["contents"]=[&]() {
    json return_uSmUlHK=json({});
    return serialize_VkSubpassContents(contents);}();

        writeToConn(result);
    }

    void handle_vkCmdEndRenderPass(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
        ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdEndRenderPass)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdEndRenderPass");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdEndRenderPass)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdEndRenderPass");
    }  
    
call_function(commandBuffer);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_GVaXYIY=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();

        writeToConn(result);
    }

    void handle_vkCmdExecuteCommands(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t commandBufferCount
            ;
[&]() {
commandBufferCount=deserialize_uint32_t(data_json["members"]["commandBufferCount"]);}();
VkCommandBuffer* pCommandBuffers
        ;
[&]() {
VkCommandBuffer* temp_CLYJejR;[&]() {

        if (data_json["members"]["pCommandBuffers"].contains("null")){
        temp_CLYJejR=NULL;
        return;
        }
    temp_CLYJejR=(VkCommandBuffer*)malloc(commandBufferCount*sizeof(VkCommandBuffer));
        for (int uuFiKTX=0; uuFiKTX < commandBufferCount; uuFiKTX++){
            [&]() {
temp_CLYJejR[uuFiKTX]=deserialize_VkCommandBuffer(data_json["members"]["pCommandBuffers"]["members"][uuFiKTX]);}();;
        }
        }();pCommandBuffers=temp_CLYJejR;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdExecuteCommands)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdExecuteCommands");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdExecuteCommands)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdExecuteCommands");
    }  
    
call_function(commandBuffer, commandBufferCount, pCommandBuffers);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["commandBufferCount"]=[&]() {
    json return_NawsLFi=json({});
    return serialize_uint32_t(commandBufferCount);}();
result["members"]["pCommandBuffers"]=[&]() {
    json return_ePeHCNc=json({});
    
        if (pCommandBuffers==NULL){
            return_ePeHCNc["null"]=true;
            return return_ePeHCNc;
        }
        
        return_ePeHCNc["members"]={};
        for(int ePeHCNc=0; ePeHCNc < commandBufferCount; ePeHCNc++){
            json temp;
            temp=[&]() {
    json return_IWPPXyt=json({});
    return serialize_VkCommandBuffer(pCommandBuffers[ePeHCNc]);}();
            return_ePeHCNc["members"].push_back(temp);
        }
        return return_ePeHCNc;
        }();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceDisplayPropertiesKHR(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
uint32_t* pPropertyCount
            ;
[&]() {

        if (data_json["members"]["pPropertyCount"].contains("null")){
        pPropertyCount=NULL;
        return;
        }
    pPropertyCount=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pPropertyCount)=deserialize_uint32_t(data_json["members"]["pPropertyCount"]);}();
}();
VkDisplayPropertiesKHR* pProperties
        ;
[&]() {

        if (data_json["members"]["pProperties"].contains("null")){
        pProperties=NULL;
        return;
        }
    pProperties=(VkDisplayPropertiesKHR*)malloc(*pPropertyCount*sizeof(VkDisplayPropertiesKHR));
        for (int UBGIEdq=0; UBGIEdq < *pPropertyCount; UBGIEdq++){
            [&]() {
pProperties[UBGIEdq]=deserialize_VkDisplayPropertiesKHR(data_json["members"]["pProperties"]["members"][UBGIEdq]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceDisplayPropertiesKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceDisplayPropertiesKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceDisplayPropertiesKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceDisplayPropertiesKHR");
    }  
    
auto return_value=call_function(physicalDevice, pPropertyCount, pProperties);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_FwBmhEQ=json({});
    return serialize_VkResult(return_value);}();
result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["pPropertyCount"]=[&]() {
    json return_MnYOHdG=json({});
    
        if (pPropertyCount==NULL){
            return_MnYOHdG["null"]=true;
            return return_MnYOHdG;
        }
        return_MnYOHdG=[&]() {
    json return_rPOmKzR=json({});
    return serialize_uint32_t(*pPropertyCount);}();
return return_MnYOHdG;}();
result["members"]["pProperties"]=[&]() {
    json return_WyCktqv=json({});
    
        if (pProperties==NULL){
            return_WyCktqv["null"]=true;
            return return_WyCktqv;
        }
        
        return_WyCktqv["members"]={};
        for(int WyCktqv=0; WyCktqv < *pPropertyCount; WyCktqv++){
            json temp;
            temp=[&]() {
    json return_hoghlxT=json({});
    return serialize_VkDisplayPropertiesKHR(pProperties[WyCktqv]);}();
            return_WyCktqv["members"].push_back(temp);
        }
        return return_WyCktqv;
        }();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceDisplayPlanePropertiesKHR(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
uint32_t* pPropertyCount
            ;
[&]() {

        if (data_json["members"]["pPropertyCount"].contains("null")){
        pPropertyCount=NULL;
        return;
        }
    pPropertyCount=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pPropertyCount)=deserialize_uint32_t(data_json["members"]["pPropertyCount"]);}();
}();
VkDisplayPlanePropertiesKHR* pProperties
        ;
[&]() {

        if (data_json["members"]["pProperties"].contains("null")){
        pProperties=NULL;
        return;
        }
    pProperties=(VkDisplayPlanePropertiesKHR*)malloc(*pPropertyCount*sizeof(VkDisplayPlanePropertiesKHR));
        for (int rwzloiI=0; rwzloiI < *pPropertyCount; rwzloiI++){
            [&]() {
pProperties[rwzloiI]=deserialize_VkDisplayPlanePropertiesKHR(data_json["members"]["pProperties"]["members"][rwzloiI]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceDisplayPlanePropertiesKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceDisplayPlanePropertiesKHR");
    }  
    
auto return_value=call_function(physicalDevice, pPropertyCount, pProperties);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_ezPdwpM=json({});
    return serialize_VkResult(return_value);}();
result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["pPropertyCount"]=[&]() {
    json return_MnYOHdG=json({});
    
        if (pPropertyCount==NULL){
            return_MnYOHdG["null"]=true;
            return return_MnYOHdG;
        }
        return_MnYOHdG=[&]() {
    json return_rPOmKzR=json({});
    return serialize_uint32_t(*pPropertyCount);}();
return return_MnYOHdG;}();
result["members"]["pProperties"]=[&]() {
    json return_CRFtHYc=json({});
    
        if (pProperties==NULL){
            return_CRFtHYc["null"]=true;
            return return_CRFtHYc;
        }
        
        return_CRFtHYc["members"]={};
        for(int CRFtHYc=0; CRFtHYc < *pPropertyCount; CRFtHYc++){
            json temp;
            temp=[&]() {
    json return_nAgEiJp=json({});
    return serialize_VkDisplayPlanePropertiesKHR(pProperties[CRFtHYc]);}();
            return_CRFtHYc["members"].push_back(temp);
        }
        return return_CRFtHYc;
        }();

        writeToConn(result);
    }

    void handle_vkGetDisplayPlaneSupportedDisplaysKHR(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
uint32_t planeIndex
            ;
[&]() {
planeIndex=deserialize_uint32_t(data_json["members"]["planeIndex"]);}();
uint32_t* pDisplayCount
            ;
[&]() {

        if (data_json["members"]["pDisplayCount"].contains("null")){
        pDisplayCount=NULL;
        return;
        }
    pDisplayCount=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pDisplayCount)=deserialize_uint32_t(data_json["members"]["pDisplayCount"]);}();
}();
VkDisplayKHR* pDisplays
        ;
[&]() {

        if (data_json["members"]["pDisplays"].contains("null")){
        pDisplays=NULL;
        return;
        }
    pDisplays=(VkDisplayKHR*)malloc(*pDisplayCount*sizeof(VkDisplayKHR));
        for (int MLGOxnI=0; MLGOxnI < *pDisplayCount; MLGOxnI++){
            [&]() {
pDisplays[MLGOxnI]=deserialize_VkDisplayKHR(data_json["members"]["pDisplays"]["members"][MLGOxnI]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetDisplayPlaneSupportedDisplaysKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDisplayPlaneSupportedDisplaysKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetDisplayPlaneSupportedDisplaysKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDisplayPlaneSupportedDisplaysKHR");
    }  
    
auto return_value=call_function(physicalDevice, planeIndex, pDisplayCount, pDisplays);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_ohWRrun=json({});
    return serialize_VkResult(return_value);}();
result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["planeIndex"]=[&]() {
    json return_pLmQZqp=json({});
    return serialize_uint32_t(planeIndex);}();
result["members"]["pDisplayCount"]=[&]() {
    json return_emepijq=json({});
    
        if (pDisplayCount==NULL){
            return_emepijq["null"]=true;
            return return_emepijq;
        }
        return_emepijq=[&]() {
    json return_sKSuTKG=json({});
    return serialize_uint32_t(*pDisplayCount);}();
return return_emepijq;}();
result["members"]["pDisplays"]=[&]() {
    json return_kYsBfUG=json({});
    
        if (pDisplays==NULL){
            return_kYsBfUG["null"]=true;
            return return_kYsBfUG;
        }
        
        return_kYsBfUG["members"]={};
        for(int kYsBfUG=0; kYsBfUG < *pDisplayCount; kYsBfUG++){
            json temp;
            temp=[&]() {
    json return_UOIyNaO=json({});
    return serialize_VkDisplayKHR(pDisplays[kYsBfUG]);}();
            return_kYsBfUG["members"].push_back(temp);
        }
        return return_kYsBfUG;
        }();

        writeToConn(result);
    }

    void handle_vkGetDisplayModePropertiesKHR(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
VkDisplayKHR display
            ;
[&]() {
display=deserialize_VkDisplayKHR(data_json["members"]["display"]);}();
uint32_t* pPropertyCount
            ;
[&]() {

        if (data_json["members"]["pPropertyCount"].contains("null")){
        pPropertyCount=NULL;
        return;
        }
    pPropertyCount=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pPropertyCount)=deserialize_uint32_t(data_json["members"]["pPropertyCount"]);}();
}();
VkDisplayModePropertiesKHR* pProperties
        ;
[&]() {

        if (data_json["members"]["pProperties"].contains("null")){
        pProperties=NULL;
        return;
        }
    pProperties=(VkDisplayModePropertiesKHR*)malloc(*pPropertyCount*sizeof(VkDisplayModePropertiesKHR));
        for (int QDvRyaa=0; QDvRyaa < *pPropertyCount; QDvRyaa++){
            [&]() {
pProperties[QDvRyaa]=deserialize_VkDisplayModePropertiesKHR(data_json["members"]["pProperties"]["members"][QDvRyaa]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetDisplayModePropertiesKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDisplayModePropertiesKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetDisplayModePropertiesKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDisplayModePropertiesKHR");
    }  
    
auto return_value=call_function(physicalDevice, display, pPropertyCount, pProperties);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_olTnYzD=json({});
    return serialize_VkResult(return_value);}();
result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["display"]=[&]() {
    json return_wRgwvSz=json({});
    return serialize_VkDisplayKHR(display);}();
result["members"]["pPropertyCount"]=[&]() {
    json return_MnYOHdG=json({});
    
        if (pPropertyCount==NULL){
            return_MnYOHdG["null"]=true;
            return return_MnYOHdG;
        }
        return_MnYOHdG=[&]() {
    json return_rPOmKzR=json({});
    return serialize_uint32_t(*pPropertyCount);}();
return return_MnYOHdG;}();
result["members"]["pProperties"]=[&]() {
    json return_aCIIlcU=json({});
    
        if (pProperties==NULL){
            return_aCIIlcU["null"]=true;
            return return_aCIIlcU;
        }
        
        return_aCIIlcU["members"]={};
        for(int aCIIlcU=0; aCIIlcU < *pPropertyCount; aCIIlcU++){
            json temp;
            temp=[&]() {
    json return_kTXxNty=json({});
    return serialize_VkDisplayModePropertiesKHR(pProperties[aCIIlcU]);}();
            return_aCIIlcU["members"].push_back(temp);
        }
        return return_aCIIlcU;
        }();

        writeToConn(result);
    }

    void handle_vkCreateDisplayModeKHR(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
VkDisplayKHR display
            ;
[&]() {
display=deserialize_VkDisplayKHR(data_json["members"]["display"]);}();
VkDisplayModeCreateInfoKHR* pCreateInfo
            ;
[&]() {
VkDisplayModeCreateInfoKHR* temp_MeGtvMU;[&]() {

        if (data_json["members"]["pCreateInfo"].contains("null")){
        temp_MeGtvMU=NULL;
        return;
        }
    temp_MeGtvMU=(VkDisplayModeCreateInfoKHR*)malloc(sizeof(VkDisplayModeCreateInfoKHR));
[&]() {
*(temp_MeGtvMU)=deserialize_VkDisplayModeCreateInfoKHR(data_json["members"]["pCreateInfo"]);}();
}();pCreateInfo=temp_MeGtvMU;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkDisplayModeKHR* pMode
        ;
[&]() {

        if (data_json["members"]["pMode"].contains("null")){
        pMode=NULL;
        return;
        }
    pMode=(VkDisplayModeKHR*)malloc(sizeof(VkDisplayModeKHR));
[&]() {
*(pMode)=deserialize_VkDisplayModeKHR(data_json["members"]["pMode"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreateDisplayModeKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateDisplayModeKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreateDisplayModeKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateDisplayModeKHR");
    }  
    
auto return_value=call_function(physicalDevice, display, pCreateInfo, pAllocator, pMode);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_ykxAoBL=json({});
    return serialize_VkResult(return_value);}();
result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["display"]=[&]() {
    json return_wRgwvSz=json({});
    return serialize_VkDisplayKHR(display);}();
result["members"]["pCreateInfo"]=[&]() {
    json return_yEqMAWn=json({});
    
        if (pCreateInfo==NULL){
            return_yEqMAWn["null"]=true;
            return return_yEqMAWn;
        }
        return_yEqMAWn=[&]() {
    json return_rsTveED=json({});
    return serialize_VkDisplayModeCreateInfoKHR(*pCreateInfo);}();
return return_yEqMAWn;}();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pMode"]=[&]() {
    json return_RHdXMGo=json({});
    
        if (pMode==NULL){
            return_RHdXMGo["null"]=true;
            return return_RHdXMGo;
        }
        return_RHdXMGo=[&]() {
    json return_RaoGGxe=json({});
    return serialize_VkDisplayModeKHR(*pMode);}();
return return_RHdXMGo;}();

        writeToConn(result);
    }

    void handle_vkGetDisplayPlaneCapabilitiesKHR(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
VkDisplayModeKHR mode
            ;
[&]() {
mode=deserialize_VkDisplayModeKHR(data_json["members"]["mode"]);}();
uint32_t planeIndex
            ;
[&]() {
planeIndex=deserialize_uint32_t(data_json["members"]["planeIndex"]);}();
VkDisplayPlaneCapabilitiesKHR* pCapabilities
        ;
[&]() {

        if (data_json["members"]["pCapabilities"].contains("null")){
        pCapabilities=NULL;
        return;
        }
    pCapabilities=(VkDisplayPlaneCapabilitiesKHR*)malloc(sizeof(VkDisplayPlaneCapabilitiesKHR));
[&]() {
*(pCapabilities)=deserialize_VkDisplayPlaneCapabilitiesKHR(data_json["members"]["pCapabilities"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetDisplayPlaneCapabilitiesKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDisplayPlaneCapabilitiesKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetDisplayPlaneCapabilitiesKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDisplayPlaneCapabilitiesKHR");
    }  
    
auto return_value=call_function(physicalDevice, mode, planeIndex, pCapabilities);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_QuCPHhW=json({});
    return serialize_VkResult(return_value);}();
result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["mode"]=[&]() {
    json return_ahROFwI=json({});
    return serialize_VkDisplayModeKHR(mode);}();
result["members"]["planeIndex"]=[&]() {
    json return_pLmQZqp=json({});
    return serialize_uint32_t(planeIndex);}();
result["members"]["pCapabilities"]=[&]() {
    json return_PQtFORm=json({});
    
        if (pCapabilities==NULL){
            return_PQtFORm["null"]=true;
            return return_PQtFORm;
        }
        return_PQtFORm=[&]() {
    json return_WEonLXN=json({});
    return serialize_VkDisplayPlaneCapabilitiesKHR(*pCapabilities);}();
return return_PQtFORm;}();

        writeToConn(result);
    }

    void handle_vkCreateDisplayPlaneSurfaceKHR(json data_json){
    //Will only be called by the server
    
VkInstance instance
            ;
[&]() {
instance=deserialize_VkInstance(data_json["members"]["instance"]);}();
VkDisplaySurfaceCreateInfoKHR* pCreateInfo
            ;
[&]() {
VkDisplaySurfaceCreateInfoKHR* temp_rVloVFQ;[&]() {

        if (data_json["members"]["pCreateInfo"].contains("null")){
        temp_rVloVFQ=NULL;
        return;
        }
    temp_rVloVFQ=(VkDisplaySurfaceCreateInfoKHR*)malloc(sizeof(VkDisplaySurfaceCreateInfoKHR));
[&]() {
*(temp_rVloVFQ)=deserialize_VkDisplaySurfaceCreateInfoKHR(data_json["members"]["pCreateInfo"]);}();
}();pCreateInfo=temp_rVloVFQ;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkSurfaceKHR* pSurface
        ;
[&]() {

        if (data_json["members"]["pSurface"].contains("null")){
        pSurface=NULL;
        return;
        }
    pSurface=(VkSurfaceKHR*)malloc(sizeof(VkSurfaceKHR));
[&]() {
*(pSurface)=deserialize_VkSurfaceKHR(data_json["members"]["pSurface"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreateDisplayPlaneSurfaceKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateDisplayPlaneSurfaceKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreateDisplayPlaneSurfaceKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateDisplayPlaneSurfaceKHR");
    }  
    
auto return_value=call_function(instance, pCreateInfo, pAllocator, pSurface);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_jcraLRm=json({});
    return serialize_VkResult(return_value);}();
result["members"]["instance"]=[&]() {
    json return_uDnIwUL=json({});
    return serialize_VkInstance(instance);}();
result["members"]["pCreateInfo"]=[&]() {
    json return_aerhYLr=json({});
    
        if (pCreateInfo==NULL){
            return_aerhYLr["null"]=true;
            return return_aerhYLr;
        }
        return_aerhYLr=[&]() {
    json return_yAayUXa=json({});
    return serialize_VkDisplaySurfaceCreateInfoKHR(*pCreateInfo);}();
return return_aerhYLr;}();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pSurface"]=[&]() {
    json return_BdLSuHF=json({});
    
        if (pSurface==NULL){
            return_BdLSuHF["null"]=true;
            return return_BdLSuHF;
        }
        return_BdLSuHF=[&]() {
    json return_WuReHBv=json({});
    return serialize_VkSurfaceKHR(*pSurface);}();
return return_BdLSuHF;}();

        writeToConn(result);
    }

    void handle_vkCreateSharedSwapchainsKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
uint32_t swapchainCount
            ;
[&]() {
swapchainCount=deserialize_uint32_t(data_json["members"]["swapchainCount"]);}();
VkSwapchainCreateInfoKHR* pCreateInfos
            ;
[&]() {
VkSwapchainCreateInfoKHR* temp_PFeoxMr;[&]() {

        if (data_json["members"]["pCreateInfos"].contains("null")){
        temp_PFeoxMr=NULL;
        return;
        }
    temp_PFeoxMr=(VkSwapchainCreateInfoKHR*)malloc(swapchainCount*sizeof(VkSwapchainCreateInfoKHR));
        for (int ZCjszGb=0; ZCjszGb < swapchainCount; ZCjszGb++){
            [&]() {
temp_PFeoxMr[ZCjszGb]=deserialize_VkSwapchainCreateInfoKHR(data_json["members"]["pCreateInfos"]["members"][ZCjszGb]);}();;
        }
        }();pCreateInfos=temp_PFeoxMr;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkSwapchainKHR* pSwapchains
        ;
[&]() {

        if (data_json["members"]["pSwapchains"].contains("null")){
        pSwapchains=NULL;
        return;
        }
    pSwapchains=(VkSwapchainKHR*)malloc(swapchainCount*sizeof(VkSwapchainKHR));
        for (int jPhrDDx=0; jPhrDDx < swapchainCount; jPhrDDx++){
            [&]() {
pSwapchains[jPhrDDx]=deserialize_VkSwapchainKHR(data_json["members"]["pSwapchains"]["members"][jPhrDDx]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreateSharedSwapchainsKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateSharedSwapchainsKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreateSharedSwapchainsKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateSharedSwapchainsKHR");
    }  
    
auto return_value=call_function(device, swapchainCount, pCreateInfos, pAllocator, pSwapchains);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_payBToK=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["swapchainCount"]=[&]() {
    json return_dVrIDXh=json({});
    return serialize_uint32_t(swapchainCount);}();
result["members"]["pCreateInfos"]=[&]() {
    json return_cWCcaIF=json({});
    
        if (pCreateInfos==NULL){
            return_cWCcaIF["null"]=true;
            return return_cWCcaIF;
        }
        
        return_cWCcaIF["members"]={};
        for(int cWCcaIF=0; cWCcaIF < swapchainCount; cWCcaIF++){
            json temp;
            temp=[&]() {
    json return_FAZyrzN=json({});
    return serialize_VkSwapchainCreateInfoKHR(pCreateInfos[cWCcaIF]);}();
            return_cWCcaIF["members"].push_back(temp);
        }
        return return_cWCcaIF;
        }();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pSwapchains"]=[&]() {
    json return_hZpWdBc=json({});
    
        if (pSwapchains==NULL){
            return_hZpWdBc["null"]=true;
            return return_hZpWdBc;
        }
        
        return_hZpWdBc["members"]={};
        for(int hZpWdBc=0; hZpWdBc < swapchainCount; hZpWdBc++){
            json temp;
            temp=[&]() {
    json return_QEHRfRL=json({});
    return serialize_VkSwapchainKHR(pSwapchains[hZpWdBc]);}();
            return_hZpWdBc["members"].push_back(temp);
        }
        return return_hZpWdBc;
        }();

        writeToConn(result);
    }

    void handle_vkDestroySurfaceKHR(json data_json){
    //Will only be called by the server
    
VkInstance instance
            ;
[&]() {
instance=deserialize_VkInstance(data_json["members"]["instance"]);}();
VkSurfaceKHR surface
            ;
[&]() {
surface=deserialize_VkSurfaceKHR(data_json["members"]["surface"]);}();
VkAllocationCallbacks* pAllocator
        ;
[&]() {
VkAllocationCallbacks* temp_VAmhMvJ;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_VAmhMvJ=NULL;
        return;
        }
    temp_VAmhMvJ=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_VAmhMvJ)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_VAmhMvJ;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkDestroySurfaceKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroySurfaceKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkDestroySurfaceKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroySurfaceKHR");
    }  
    
call_function(instance, surface, pAllocator);
json result=json({});
        result["type"]="Response";
    

result["members"]["instance"]=[&]() {
    json return_uDnIwUL=json({});
    return serialize_VkInstance(instance);}();
result["members"]["surface"]=[&]() {
    json return_pHWfgmh=json({});
    return serialize_VkSurfaceKHR(surface);}();
result["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceSurfaceSupportKHR(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
uint32_t queueFamilyIndex
            ;
[&]() {
queueFamilyIndex=deserialize_uint32_t(data_json["members"]["queueFamilyIndex"]);}();
VkSurfaceKHR surface
            ;
[&]() {
surface=deserialize_VkSurfaceKHR(data_json["members"]["surface"]);}();
VkBool32* pSupported
        ;
[&]() {

        if (data_json["members"]["pSupported"].contains("null")){
        pSupported=NULL;
        return;
        }
    [&]() {

        if (data_json["members"]["pSupported"].contains("null")){
        pSupported=NULL;
        return;
        }
    pSupported=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pSupported)=deserialize_uint32_t(data_json["members"]["pSupported"]);}();
}();}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceSurfaceSupportKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceSurfaceSupportKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceSurfaceSupportKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceSurfaceSupportKHR");
    }  
    
auto return_value=call_function(physicalDevice, queueFamilyIndex, surface, pSupported);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_TzJCQFe=json({});
    return serialize_VkResult(return_value);}();
result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["queueFamilyIndex"]=[&]() {
    json return_lNjYgkI=json({});
    return serialize_uint32_t(queueFamilyIndex);}();
result["members"]["surface"]=[&]() {
    json return_pHWfgmh=json({});
    return serialize_VkSurfaceKHR(surface);}();
result["members"]["pSupported"]=[&]() {
    json return_gsABEHm=json({});
    
        if (pSupported==NULL){
            return_gsABEHm["null"]=true;
            return return_gsABEHm;
        }
        return_gsABEHm=[&]() {
    json return_ZKqZggs=json({});
    return_ZKqZggs=[&]() {
    json return_elqzmrf=json({});
    return serialize_uint32_t(*pSupported);}();return return_ZKqZggs;}();
return return_gsABEHm;}();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceSurfaceCapabilitiesKHR(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
VkSurfaceKHR surface
            ;
[&]() {
surface=deserialize_VkSurfaceKHR(data_json["members"]["surface"]);}();
VkSurfaceCapabilitiesKHR* pSurfaceCapabilities
        ;
[&]() {

        if (data_json["members"]["pSurfaceCapabilities"].contains("null")){
        pSurfaceCapabilities=NULL;
        return;
        }
    pSurfaceCapabilities=(VkSurfaceCapabilitiesKHR*)malloc(sizeof(VkSurfaceCapabilitiesKHR));
[&]() {
*(pSurfaceCapabilities)=deserialize_VkSurfaceCapabilitiesKHR(data_json["members"]["pSurfaceCapabilities"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceSurfaceCapabilitiesKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceSurfaceCapabilitiesKHR");
    }  
    
auto return_value=call_function(physicalDevice, surface, pSurfaceCapabilities);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_ZbyKflU=json({});
    return serialize_VkResult(return_value);}();
result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["surface"]=[&]() {
    json return_pHWfgmh=json({});
    return serialize_VkSurfaceKHR(surface);}();
result["members"]["pSurfaceCapabilities"]=[&]() {
    json return_WbBdQJC=json({});
    
        if (pSurfaceCapabilities==NULL){
            return_WbBdQJC["null"]=true;
            return return_WbBdQJC;
        }
        return_WbBdQJC=[&]() {
    json return_nMlEfnD=json({});
    return serialize_VkSurfaceCapabilitiesKHR(*pSurfaceCapabilities);}();
return return_WbBdQJC;}();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceSurfaceFormatsKHR(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
VkSurfaceKHR surface
            ;
[&]() {
surface=deserialize_VkSurfaceKHR(data_json["members"]["surface"]);}();
uint32_t* pSurfaceFormatCount
            ;
[&]() {

        if (data_json["members"]["pSurfaceFormatCount"].contains("null")){
        pSurfaceFormatCount=NULL;
        return;
        }
    pSurfaceFormatCount=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pSurfaceFormatCount)=deserialize_uint32_t(data_json["members"]["pSurfaceFormatCount"]);}();
}();
VkSurfaceFormatKHR* pSurfaceFormats
        ;
[&]() {

        if (data_json["members"]["pSurfaceFormats"].contains("null")){
        pSurfaceFormats=NULL;
        return;
        }
    pSurfaceFormats=(VkSurfaceFormatKHR*)malloc(*pSurfaceFormatCount*sizeof(VkSurfaceFormatKHR));
        for (int KiUeXCt=0; KiUeXCt < *pSurfaceFormatCount; KiUeXCt++){
            [&]() {
pSurfaceFormats[KiUeXCt]=deserialize_VkSurfaceFormatKHR(data_json["members"]["pSurfaceFormats"]["members"][KiUeXCt]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceSurfaceFormatsKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceSurfaceFormatsKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceSurfaceFormatsKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceSurfaceFormatsKHR");
    }  
    
auto return_value=call_function(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_uDGqiiz=json({});
    return serialize_VkResult(return_value);}();
result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["surface"]=[&]() {
    json return_pHWfgmh=json({});
    return serialize_VkSurfaceKHR(surface);}();
result["members"]["pSurfaceFormatCount"]=[&]() {
    json return_ZQIGOcP=json({});
    
        if (pSurfaceFormatCount==NULL){
            return_ZQIGOcP["null"]=true;
            return return_ZQIGOcP;
        }
        return_ZQIGOcP=[&]() {
    json return_dNAZxxw=json({});
    return serialize_uint32_t(*pSurfaceFormatCount);}();
return return_ZQIGOcP;}();
result["members"]["pSurfaceFormats"]=[&]() {
    json return_BuynUjl=json({});
    
        if (pSurfaceFormats==NULL){
            return_BuynUjl["null"]=true;
            return return_BuynUjl;
        }
        
        return_BuynUjl["members"]={};
        for(int BuynUjl=0; BuynUjl < *pSurfaceFormatCount; BuynUjl++){
            json temp;
            temp=[&]() {
    json return_XHquuSV=json({});
    return serialize_VkSurfaceFormatKHR(pSurfaceFormats[BuynUjl]);}();
            return_BuynUjl["members"].push_back(temp);
        }
        return return_BuynUjl;
        }();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceSurfacePresentModesKHR(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
VkSurfaceKHR surface
            ;
[&]() {
surface=deserialize_VkSurfaceKHR(data_json["members"]["surface"]);}();
uint32_t* pPresentModeCount
            ;
[&]() {

        if (data_json["members"]["pPresentModeCount"].contains("null")){
        pPresentModeCount=NULL;
        return;
        }
    pPresentModeCount=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pPresentModeCount)=deserialize_uint32_t(data_json["members"]["pPresentModeCount"]);}();
}();
VkPresentModeKHR* pPresentModes
        ;
[&]() {

        if (data_json["members"]["pPresentModes"].contains("null")){
        pPresentModes=NULL;
        return;
        }
    pPresentModes=(VkPresentModeKHR*)malloc(*pPresentModeCount*sizeof(VkPresentModeKHR));
        for (int CEqIrxM=0; CEqIrxM < *pPresentModeCount; CEqIrxM++){
            [&]() {
pPresentModes[CEqIrxM]=deserialize_VkPresentModeKHR(data_json["members"]["pPresentModes"]["members"][CEqIrxM]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceSurfacePresentModesKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceSurfacePresentModesKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceSurfacePresentModesKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceSurfacePresentModesKHR");
    }  
    
auto return_value=call_function(physicalDevice, surface, pPresentModeCount, pPresentModes);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_MeBbWAd=json({});
    return serialize_VkResult(return_value);}();
result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["surface"]=[&]() {
    json return_pHWfgmh=json({});
    return serialize_VkSurfaceKHR(surface);}();
result["members"]["pPresentModeCount"]=[&]() {
    json return_qCDEAzN=json({});
    
        if (pPresentModeCount==NULL){
            return_qCDEAzN["null"]=true;
            return return_qCDEAzN;
        }
        return_qCDEAzN=[&]() {
    json return_BUUSuWp=json({});
    return serialize_uint32_t(*pPresentModeCount);}();
return return_qCDEAzN;}();
result["members"]["pPresentModes"]=[&]() {
    json return_xKLPCrW=json({});
    
        if (pPresentModes==NULL){
            return_xKLPCrW["null"]=true;
            return return_xKLPCrW;
        }
        
        return_xKLPCrW["members"]={};
        for(int xKLPCrW=0; xKLPCrW < *pPresentModeCount; xKLPCrW++){
            json temp;
            temp=[&]() {
    json return_ZbxQDoQ=json({});
    return serialize_VkPresentModeKHR(pPresentModes[xKLPCrW]);}();
            return_xKLPCrW["members"].push_back(temp);
        }
        return return_xKLPCrW;
        }();

        writeToConn(result);
    }

    void handle_vkCreateSwapchainKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkSwapchainCreateInfoKHR* pCreateInfo
            ;
[&]() {
VkSwapchainCreateInfoKHR* temp_tGLJnYU;[&]() {

        if (data_json["members"]["pCreateInfo"].contains("null")){
        temp_tGLJnYU=NULL;
        return;
        }
    temp_tGLJnYU=(VkSwapchainCreateInfoKHR*)malloc(sizeof(VkSwapchainCreateInfoKHR));
[&]() {
*(temp_tGLJnYU)=deserialize_VkSwapchainCreateInfoKHR(data_json["members"]["pCreateInfo"]);}();
}();pCreateInfo=temp_tGLJnYU;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkSwapchainKHR* pSwapchain
        ;
[&]() {

        if (data_json["members"]["pSwapchain"].contains("null")){
        pSwapchain=NULL;
        return;
        }
    pSwapchain=(VkSwapchainKHR*)malloc(sizeof(VkSwapchainKHR));
[&]() {
*(pSwapchain)=deserialize_VkSwapchainKHR(data_json["members"]["pSwapchain"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreateSwapchainKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateSwapchainKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreateSwapchainKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateSwapchainKHR");
    }  
    
auto return_value=call_function(device, pCreateInfo, pAllocator, pSwapchain);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_KbQRxQO=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pCreateInfo"]=[&]() {
    json return_GEguosI=json({});
    
        if (pCreateInfo==NULL){
            return_GEguosI["null"]=true;
            return return_GEguosI;
        }
        return_GEguosI=[&]() {
    json return_XhvHQRi=json({});
    return serialize_VkSwapchainCreateInfoKHR(*pCreateInfo);}();
return return_GEguosI;}();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pSwapchain"]=[&]() {
    json return_OhNzlXU=json({});
    
        if (pSwapchain==NULL){
            return_OhNzlXU["null"]=true;
            return return_OhNzlXU;
        }
        return_OhNzlXU=[&]() {
    json return_bZaUOZC=json({});
    return serialize_VkSwapchainKHR(*pSwapchain);}();
return return_OhNzlXU;}();

        writeToConn(result);
    }

    void handle_vkDestroySwapchainKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkSwapchainKHR swapchain
            ;
[&]() {
swapchain=deserialize_VkSwapchainKHR(data_json["members"]["swapchain"]);}();
VkAllocationCallbacks* pAllocator
        ;
[&]() {
VkAllocationCallbacks* temp_VAmhMvJ;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_VAmhMvJ=NULL;
        return;
        }
    temp_VAmhMvJ=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_VAmhMvJ)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_VAmhMvJ;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkDestroySwapchainKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroySwapchainKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkDestroySwapchainKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroySwapchainKHR");
    }  
    
call_function(device, swapchain, pAllocator);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["swapchain"]=[&]() {
    json return_pJrgkgd=json({});
    return serialize_VkSwapchainKHR(swapchain);}();
result["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();

        writeToConn(result);
    }

    void handle_vkGetSwapchainImagesKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkSwapchainKHR swapchain
            ;
[&]() {
swapchain=deserialize_VkSwapchainKHR(data_json["members"]["swapchain"]);}();
uint32_t* pSwapchainImageCount
            ;
[&]() {

        if (data_json["members"]["pSwapchainImageCount"].contains("null")){
        pSwapchainImageCount=NULL;
        return;
        }
    pSwapchainImageCount=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pSwapchainImageCount)=deserialize_uint32_t(data_json["members"]["pSwapchainImageCount"]);}();
}();
VkImage* pSwapchainImages
        ;
[&]() {

        if (data_json["members"]["pSwapchainImages"].contains("null")){
        pSwapchainImages=NULL;
        return;
        }
    pSwapchainImages=(VkImage*)malloc(*pSwapchainImageCount*sizeof(VkImage));
        for (int ZSksaOD=0; ZSksaOD < *pSwapchainImageCount; ZSksaOD++){
            [&]() {
pSwapchainImages[ZSksaOD]=deserialize_VkImage(data_json["members"]["pSwapchainImages"]["members"][ZSksaOD]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetSwapchainImagesKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetSwapchainImagesKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetSwapchainImagesKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetSwapchainImagesKHR");
    }  
    
auto return_value=call_function(device, swapchain, pSwapchainImageCount, pSwapchainImages);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_GfBubbO=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["swapchain"]=[&]() {
    json return_pJrgkgd=json({});
    return serialize_VkSwapchainKHR(swapchain);}();
result["members"]["pSwapchainImageCount"]=[&]() {
    json return_odSaCDd=json({});
    
        if (pSwapchainImageCount==NULL){
            return_odSaCDd["null"]=true;
            return return_odSaCDd;
        }
        return_odSaCDd=[&]() {
    json return_wgEuOHH=json({});
    return serialize_uint32_t(*pSwapchainImageCount);}();
return return_odSaCDd;}();
result["members"]["pSwapchainImages"]=[&]() {
    json return_XkQEyed=json({});
    
        if (pSwapchainImages==NULL){
            return_XkQEyed["null"]=true;
            return return_XkQEyed;
        }
        
        return_XkQEyed["members"]={};
        for(int XkQEyed=0; XkQEyed < *pSwapchainImageCount; XkQEyed++){
            json temp;
            temp=[&]() {
    json return_emjHPVX=json({});
    return serialize_VkImage(pSwapchainImages[XkQEyed]);}();
            return_XkQEyed["members"].push_back(temp);
        }
        return return_XkQEyed;
        }();

        writeToConn(result);
    }

    void handle_vkAcquireNextImageKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkSwapchainKHR swapchain
            ;
[&]() {
swapchain=deserialize_VkSwapchainKHR(data_json["members"]["swapchain"]);}();
uint64_t timeout
            ;
[&]() {
timeout=deserialize_uint64_t(data_json["members"]["timeout"]);}();
VkSemaphore semaphore
            ;
[&]() {
semaphore=deserialize_VkSemaphore(data_json["members"]["semaphore"]);}();
VkFence fence
            ;
[&]() {
fence=deserialize_VkFence(data_json["members"]["fence"]);}();
uint32_t* pImageIndex
        ;
[&]() {

        if (data_json["members"]["pImageIndex"].contains("null")){
        pImageIndex=NULL;
        return;
        }
    pImageIndex=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pImageIndex)=deserialize_uint32_t(data_json["members"]["pImageIndex"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkAcquireNextImageKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkAcquireNextImageKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkAcquireNextImageKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkAcquireNextImageKHR");
    }  
    
auto return_value=call_function(device, swapchain, timeout, semaphore, fence, pImageIndex);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_aIwLVXz=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["swapchain"]=[&]() {
    json return_pJrgkgd=json({});
    return serialize_VkSwapchainKHR(swapchain);}();
result["members"]["timeout"]=[&]() {
    json return_VItDAuq=json({});
    return serialize_uint64_t(timeout);}();
result["members"]["semaphore"]=[&]() {
    json return_NeBBGDW=json({});
    return serialize_VkSemaphore(semaphore);}();
result["members"]["fence"]=[&]() {
    json return_uUveTbE=json({});
    return serialize_VkFence(fence);}();
result["members"]["pImageIndex"]=[&]() {
    json return_wAoznVg=json({});
    
        if (pImageIndex==NULL){
            return_wAoznVg["null"]=true;
            return return_wAoznVg;
        }
        return_wAoznVg=[&]() {
    json return_flfHmxH=json({});
    return serialize_uint32_t(*pImageIndex);}();
return return_wAoznVg;}();

        writeToConn(result);
    }

    void handle_vkQueuePresentKHR(json data_json){
    //Will only be called by the server
    
VkQueue queue
            ;
[&]() {
queue=deserialize_VkQueue(data_json["members"]["queue"]);}();
VkPresentInfoKHR* pPresentInfo
        ;
[&]() {
VkPresentInfoKHR* temp_eMwVcVr;[&]() {

        if (data_json["members"]["pPresentInfo"].contains("null")){
        temp_eMwVcVr=NULL;
        return;
        }
    temp_eMwVcVr=(VkPresentInfoKHR*)malloc(sizeof(VkPresentInfoKHR));
[&]() {
*(temp_eMwVcVr)=deserialize_VkPresentInfoKHR(data_json["members"]["pPresentInfo"]);}();
}();pPresentInfo=temp_eMwVcVr;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkQueuePresentKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkQueuePresentKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkQueuePresentKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkQueuePresentKHR");
    }  
    
auto return_value=call_function(queue, pPresentInfo);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_iGTkMXK=json({});
    return serialize_VkResult(return_value);}();
result["members"]["queue"]=[&]() {
    json return_KYhcIBS=json({});
    return serialize_VkQueue(queue);}();
result["members"]["pPresentInfo"]=[&]() {
    json return_XMpJnBv=json({});
    
        if (pPresentInfo==NULL){
            return_XMpJnBv["null"]=true;
            return return_XMpJnBv;
        }
        return_XMpJnBv=[&]() {
    json return_nBsNMoC=json({});
    return serialize_VkPresentInfoKHR(*pPresentInfo);}();
return return_XMpJnBv;}();

        writeToConn(result);
    }

    void handle_vkCreateXlibSurfaceKHR(json data_json){
    //Will only be called by the server
    
VkInstance instance
            ;
[&]() {
instance=deserialize_VkInstance(data_json["members"]["instance"]);}();
VkXlibSurfaceCreateInfoKHR* pCreateInfo
            ;
[&]() {
VkXlibSurfaceCreateInfoKHR* temp_uotJbFk;[&]() {

        if (data_json["members"]["pCreateInfo"].contains("null")){
        temp_uotJbFk=NULL;
        return;
        }
    temp_uotJbFk=(VkXlibSurfaceCreateInfoKHR*)malloc(sizeof(VkXlibSurfaceCreateInfoKHR));
[&]() {
*(temp_uotJbFk)=deserialize_VkXlibSurfaceCreateInfoKHR(data_json["members"]["pCreateInfo"]);}();
}();pCreateInfo=temp_uotJbFk;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkSurfaceKHR* pSurface
        ;
[&]() {

        if (data_json["members"]["pSurface"].contains("null")){
        pSurface=NULL;
        return;
        }
    pSurface=(VkSurfaceKHR*)malloc(sizeof(VkSurfaceKHR));
[&]() {
*(pSurface)=deserialize_VkSurfaceKHR(data_json["members"]["pSurface"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreateXlibSurfaceKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateXlibSurfaceKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreateXlibSurfaceKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateXlibSurfaceKHR");
    }  
    
auto return_value=call_function(instance, pCreateInfo, pAllocator, pSurface);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_WhrlgBs=json({});
    return serialize_VkResult(return_value);}();
result["members"]["instance"]=[&]() {
    json return_uDnIwUL=json({});
    return serialize_VkInstance(instance);}();
result["members"]["pCreateInfo"]=[&]() {
    json return_tOUkcbG=json({});
    
        if (pCreateInfo==NULL){
            return_tOUkcbG["null"]=true;
            return return_tOUkcbG;
        }
        return_tOUkcbG=[&]() {
    json return_aROjvrD=json({});
    return serialize_VkXlibSurfaceCreateInfoKHR(*pCreateInfo);}();
return return_tOUkcbG;}();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pSurface"]=[&]() {
    json return_BdLSuHF=json({});
    
        if (pSurface==NULL){
            return_BdLSuHF["null"]=true;
            return return_BdLSuHF;
        }
        return_BdLSuHF=[&]() {
    json return_WuReHBv=json({});
    return serialize_VkSurfaceKHR(*pSurface);}();
return return_BdLSuHF;}();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceXlibPresentationSupportKHR(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
uint32_t queueFamilyIndex
            ;
[&]() {
queueFamilyIndex=deserialize_uint32_t(data_json["members"]["queueFamilyIndex"]);}();
Display* dpy
            ;
[&]() {

        if (data_json["members"]["dpy"].contains("null")){
        dpy=NULL;
        return;
        }
    dpy=deserialize_Display_p(data_json["members"]["dpy"]);
}();
VisualID visualID
        ;
[&]() {
visualID=deserialize_VisualID(data_json["members"]["visualID"]);
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceXlibPresentationSupportKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceXlibPresentationSupportKHR");
    }  
    
auto return_value=call_function(physicalDevice, queueFamilyIndex, dpy, visualID);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_XkKvNID=json({});
    return_XkKvNID=[&]() {
    json return_SDQktXb=json({});
    return serialize_uint32_t(return_value);}();return return_XkKvNID;}();
result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["queueFamilyIndex"]=[&]() {
    json return_lNjYgkI=json({});
    return serialize_uint32_t(queueFamilyIndex);}();
result["members"]["dpy"]=[&]() {
    json return_VYfuXHk=json({});
    
        if (dpy==NULL){
            return_VYfuXHk["null"]=true;
            return return_VYfuXHk;
        }
        return serialize_Display_p(dpy);
}();
result["members"]["visualID"]=[&]() {
    json return_kBqdhfR=json({});
    return serialize_VisualID(visualID);
}();

        writeToConn(result);
    }

    void handle_vkCreateXcbSurfaceKHR(json data_json){
    //Will only be called by the server
    
VkInstance instance
            ;
[&]() {
instance=deserialize_VkInstance(data_json["members"]["instance"]);}();
VkXcbSurfaceCreateInfoKHR* pCreateInfo
            ;
[&]() {
VkXcbSurfaceCreateInfoKHR* temp_AlHZCPE;[&]() {

        if (data_json["members"]["pCreateInfo"].contains("null")){
        temp_AlHZCPE=NULL;
        return;
        }
    temp_AlHZCPE=(VkXcbSurfaceCreateInfoKHR*)malloc(sizeof(VkXcbSurfaceCreateInfoKHR));
[&]() {
*(temp_AlHZCPE)=deserialize_VkXcbSurfaceCreateInfoKHR(data_json["members"]["pCreateInfo"]);}();
}();pCreateInfo=temp_AlHZCPE;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkSurfaceKHR* pSurface
        ;
[&]() {

        if (data_json["members"]["pSurface"].contains("null")){
        pSurface=NULL;
        return;
        }
    pSurface=(VkSurfaceKHR*)malloc(sizeof(VkSurfaceKHR));
[&]() {
*(pSurface)=deserialize_VkSurfaceKHR(data_json["members"]["pSurface"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreateXcbSurfaceKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateXcbSurfaceKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreateXcbSurfaceKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateXcbSurfaceKHR");
    }  
    
auto return_value=call_function(instance, pCreateInfo, pAllocator, pSurface);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_zbpIArF=json({});
    return serialize_VkResult(return_value);}();
result["members"]["instance"]=[&]() {
    json return_uDnIwUL=json({});
    return serialize_VkInstance(instance);}();
result["members"]["pCreateInfo"]=[&]() {
    json return_EVPSMLN=json({});
    
        if (pCreateInfo==NULL){
            return_EVPSMLN["null"]=true;
            return return_EVPSMLN;
        }
        return_EVPSMLN=[&]() {
    json return_dqBqdSz=json({});
    return serialize_VkXcbSurfaceCreateInfoKHR(*pCreateInfo);}();
return return_EVPSMLN;}();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pSurface"]=[&]() {
    json return_BdLSuHF=json({});
    
        if (pSurface==NULL){
            return_BdLSuHF["null"]=true;
            return return_BdLSuHF;
        }
        return_BdLSuHF=[&]() {
    json return_WuReHBv=json({});
    return serialize_VkSurfaceKHR(*pSurface);}();
return return_BdLSuHF;}();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceXcbPresentationSupportKHR(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
uint32_t queueFamilyIndex
            ;
[&]() {
queueFamilyIndex=deserialize_uint32_t(data_json["members"]["queueFamilyIndex"]);}();
xcb_connection_t* connection
            ;
[&]() {

        if (data_json["members"]["connection"].contains("null")){
        connection=NULL;
        return;
        }
    connection=deserialize_xcb_connection_t_p(data_json["members"]["connection"]);
}();
xcb_visualid_t visual_id
        ;
[&]() {
visual_id=deserialize_xcb_visualid_t(data_json["members"]["visual_id"]);
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceXcbPresentationSupportKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceXcbPresentationSupportKHR");
    }  
    
auto return_value=call_function(physicalDevice, queueFamilyIndex, connection, visual_id);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_eoBznge=json({});
    return_eoBznge=[&]() {
    json return_UfVBnbm=json({});
    return serialize_uint32_t(return_value);}();return return_eoBznge;}();
result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["queueFamilyIndex"]=[&]() {
    json return_lNjYgkI=json({});
    return serialize_uint32_t(queueFamilyIndex);}();
result["members"]["connection"]=[&]() {
    json return_oWcBqNw=json({});
    
        if (connection==NULL){
            return_oWcBqNw["null"]=true;
            return return_oWcBqNw;
        }
        return serialize_xcb_connection_t_p(connection);
}();
result["members"]["visual_id"]=[&]() {
    json return_qrzURDB=json({});
    return serialize_xcb_visualid_t(visual_id);
}();

        writeToConn(result);
    }

    void handle_vkCreateDebugReportCallbackEXT(json data_json){
    //Will only be called by the server
    
VkInstance instance
            ;
[&]() {
instance=deserialize_VkInstance(data_json["members"]["instance"]);}();
VkDebugReportCallbackCreateInfoEXT* pCreateInfo
            ;
[&]() {
VkDebugReportCallbackCreateInfoEXT* temp_bAfIctd;[&]() {

        if (data_json["members"]["pCreateInfo"].contains("null")){
        temp_bAfIctd=NULL;
        return;
        }
    temp_bAfIctd=(VkDebugReportCallbackCreateInfoEXT*)malloc(sizeof(VkDebugReportCallbackCreateInfoEXT));
[&]() {
*(temp_bAfIctd)=deserialize_VkDebugReportCallbackCreateInfoEXT(data_json["members"]["pCreateInfo"]);}();
}();pCreateInfo=temp_bAfIctd;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkDebugReportCallbackEXT* pCallback
        ;
[&]() {

        if (data_json["members"]["pCallback"].contains("null")){
        pCallback=NULL;
        return;
        }
    pCallback=(VkDebugReportCallbackEXT*)malloc(sizeof(VkDebugReportCallbackEXT));
[&]() {
*(pCallback)=deserialize_VkDebugReportCallbackEXT(data_json["members"]["pCallback"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreateDebugReportCallbackEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateDebugReportCallbackEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreateDebugReportCallbackEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateDebugReportCallbackEXT");
    }  
    
auto return_value=call_function(instance, pCreateInfo, pAllocator, pCallback);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_FVSwupl=json({});
    return serialize_VkResult(return_value);}();
result["members"]["instance"]=[&]() {
    json return_uDnIwUL=json({});
    return serialize_VkInstance(instance);}();
result["members"]["pCreateInfo"]=[&]() {
    json return_FQoIVNe=json({});
    
        if (pCreateInfo==NULL){
            return_FQoIVNe["null"]=true;
            return return_FQoIVNe;
        }
        return_FQoIVNe=[&]() {
    json return_qonxkhn=json({});
    return serialize_VkDebugReportCallbackCreateInfoEXT(*pCreateInfo);}();
return return_FQoIVNe;}();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pCallback"]=[&]() {
    json return_hctiRyW=json({});
    
        if (pCallback==NULL){
            return_hctiRyW["null"]=true;
            return return_hctiRyW;
        }
        return_hctiRyW=[&]() {
    json return_kjgmEwC=json({});
    return serialize_VkDebugReportCallbackEXT(*pCallback);}();
return return_hctiRyW;}();

        writeToConn(result);
    }

    void handle_vkDestroyDebugReportCallbackEXT(json data_json){
    //Will only be called by the server
    
VkInstance instance
            ;
[&]() {
instance=deserialize_VkInstance(data_json["members"]["instance"]);}();
VkDebugReportCallbackEXT callback
            ;
[&]() {
callback=deserialize_VkDebugReportCallbackEXT(data_json["members"]["callback"]);}();
VkAllocationCallbacks* pAllocator
        ;
[&]() {
VkAllocationCallbacks* temp_VAmhMvJ;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_VAmhMvJ=NULL;
        return;
        }
    temp_VAmhMvJ=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_VAmhMvJ)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_VAmhMvJ;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkDestroyDebugReportCallbackEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyDebugReportCallbackEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkDestroyDebugReportCallbackEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyDebugReportCallbackEXT");
    }  
    
call_function(instance, callback, pAllocator);
json result=json({});
        result["type"]="Response";
    

result["members"]["instance"]=[&]() {
    json return_uDnIwUL=json({});
    return serialize_VkInstance(instance);}();
result["members"]["callback"]=[&]() {
    json return_XHTbUxf=json({});
    return serialize_VkDebugReportCallbackEXT(callback);}();
result["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();

        writeToConn(result);
    }

    void handle_vkDebugReportMessageEXT(json data_json){
    //Will only be called by the server
    
VkInstance instance
            ;
[&]() {
instance=deserialize_VkInstance(data_json["members"]["instance"]);}();
VkDebugReportFlagsEXT flags
            ;
[&]() {
flags=deserialize_VkDebugReportFlagsEXT(data_json["members"]["flags"]);}();
VkDebugReportObjectTypeEXT objectType
            ;
[&]() {
objectType=deserialize_VkDebugReportObjectTypeEXT(data_json["members"]["objectType"]);}();
uint64_t object
            ;
[&]() {
object=deserialize_uint64_t(data_json["members"]["object"]);}();
size_t location
            ;
[&]() {
location=deserialize_size_t(data_json["members"]["location"]);}();
int32_t messageCode
            ;
[&]() {
messageCode=deserialize_int32_t(data_json["members"]["messageCode"]);}();
char* pLayerPrefix
            ;
[&]() {
char* temp_UPbMKRN;[&]() {

        if (data_json["members"]["pLayerPrefix"].contains("null")){
        temp_UPbMKRN=NULL;
        return;
        }
    temp_UPbMKRN=deserialize_char_p(data_json["members"]["pLayerPrefix"]);
}();pLayerPrefix=temp_UPbMKRN;}();
char* pMessage
        ;
[&]() {
char* temp_axNqXUF;[&]() {

        if (data_json["members"]["pMessage"].contains("null")){
        temp_axNqXUF=NULL;
        return;
        }
    temp_axNqXUF=deserialize_char_p(data_json["members"]["pMessage"]);
}();pMessage=temp_axNqXUF;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkDebugReportMessageEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDebugReportMessageEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkDebugReportMessageEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDebugReportMessageEXT");
    }  
    
call_function(instance, flags, objectType, object, location, messageCode, pLayerPrefix, pMessage);
json result=json({});
        result["type"]="Response";
    

result["members"]["instance"]=[&]() {
    json return_uDnIwUL=json({});
    return serialize_VkInstance(instance);}();
result["members"]["flags"]=[&]() {
    json return_rqHfggr=json({});
    return serialize_VkDebugReportFlagsEXT(flags);}();
result["members"]["objectType"]=[&]() {
    json return_VGMSlIW=json({});
    return serialize_VkDebugReportObjectTypeEXT(objectType);}();
result["members"]["object"]=[&]() {
    json return_deCbFZT=json({});
    return serialize_uint64_t(object);}();
result["members"]["location"]=[&]() {
    json return_BdulNHM=json({});
    return serialize_size_t(location);}();
result["members"]["messageCode"]=[&]() {
    json return_YTUBKTd=json({});
    return serialize_int32_t(messageCode);}();
result["members"]["pLayerPrefix"]=[&]() {
    json return_HiVuHWN=json({});
    
        if (pLayerPrefix==NULL){
            return_HiVuHWN["null"]=true;
            return return_HiVuHWN;
        }
        return serialize_char_p(pLayerPrefix);
}();
result["members"]["pMessage"]=[&]() {
    json return_cTmvEKt=json({});
    
        if (pMessage==NULL){
            return_cTmvEKt["null"]=true;
            return return_cTmvEKt;
        }
        return serialize_char_p(pMessage);
}();

        writeToConn(result);
    }

    void handle_vkDebugMarkerSetObjectNameEXT(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDebugMarkerObjectNameInfoEXT* pNameInfo
        ;
[&]() {
VkDebugMarkerObjectNameInfoEXT* temp_yctxuvV;[&]() {

        if (data_json["members"]["pNameInfo"].contains("null")){
        temp_yctxuvV=NULL;
        return;
        }
    temp_yctxuvV=(VkDebugMarkerObjectNameInfoEXT*)malloc(sizeof(VkDebugMarkerObjectNameInfoEXT));
[&]() {
*(temp_yctxuvV)=deserialize_VkDebugMarkerObjectNameInfoEXT(data_json["members"]["pNameInfo"]);}();
}();pNameInfo=temp_yctxuvV;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkDebugMarkerSetObjectNameEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDebugMarkerSetObjectNameEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkDebugMarkerSetObjectNameEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDebugMarkerSetObjectNameEXT");
    }  
    
auto return_value=call_function(device, pNameInfo);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_FEETetP=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pNameInfo"]=[&]() {
    json return_WkpwAIZ=json({});
    
        if (pNameInfo==NULL){
            return_WkpwAIZ["null"]=true;
            return return_WkpwAIZ;
        }
        return_WkpwAIZ=[&]() {
    json return_Exubmxl=json({});
    return serialize_VkDebugMarkerObjectNameInfoEXT(*pNameInfo);}();
return return_WkpwAIZ;}();

        writeToConn(result);
    }

    void handle_vkDebugMarkerSetObjectTagEXT(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDebugMarkerObjectTagInfoEXT* pTagInfo
        ;
[&]() {
VkDebugMarkerObjectTagInfoEXT* temp_rOTjxEE;[&]() {

        if (data_json["members"]["pTagInfo"].contains("null")){
        temp_rOTjxEE=NULL;
        return;
        }
    temp_rOTjxEE=(VkDebugMarkerObjectTagInfoEXT*)malloc(sizeof(VkDebugMarkerObjectTagInfoEXT));
[&]() {
*(temp_rOTjxEE)=deserialize_VkDebugMarkerObjectTagInfoEXT(data_json["members"]["pTagInfo"]);}();
}();pTagInfo=temp_rOTjxEE;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkDebugMarkerSetObjectTagEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDebugMarkerSetObjectTagEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkDebugMarkerSetObjectTagEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDebugMarkerSetObjectTagEXT");
    }  
    
auto return_value=call_function(device, pTagInfo);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_LApgTuZ=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pTagInfo"]=[&]() {
    json return_CMFOmcQ=json({});
    
        if (pTagInfo==NULL){
            return_CMFOmcQ["null"]=true;
            return return_CMFOmcQ;
        }
        return_CMFOmcQ=[&]() {
    json return_VGzjeff=json({});
    return serialize_VkDebugMarkerObjectTagInfoEXT(*pTagInfo);}();
return return_CMFOmcQ;}();

        writeToConn(result);
    }

    void handle_vkCmdDebugMarkerBeginEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkDebugMarkerMarkerInfoEXT* pMarkerInfo
        ;
[&]() {
VkDebugMarkerMarkerInfoEXT* temp_PwiFIPO;[&]() {

        if (data_json["members"]["pMarkerInfo"].contains("null")){
        temp_PwiFIPO=NULL;
        return;
        }
    temp_PwiFIPO=(VkDebugMarkerMarkerInfoEXT*)malloc(sizeof(VkDebugMarkerMarkerInfoEXT));
[&]() {
*(temp_PwiFIPO)=deserialize_VkDebugMarkerMarkerInfoEXT(data_json["members"]["pMarkerInfo"]);}();
}();pMarkerInfo=temp_PwiFIPO;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdDebugMarkerBeginEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDebugMarkerBeginEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdDebugMarkerBeginEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDebugMarkerBeginEXT");
    }  
    
call_function(commandBuffer, pMarkerInfo);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pMarkerInfo"]=[&]() {
    json return_jQLIdBb=json({});
    
        if (pMarkerInfo==NULL){
            return_jQLIdBb["null"]=true;
            return return_jQLIdBb;
        }
        return_jQLIdBb=[&]() {
    json return_OgewjvM=json({});
    return serialize_VkDebugMarkerMarkerInfoEXT(*pMarkerInfo);}();
return return_jQLIdBb;}();

        writeToConn(result);
    }

    void handle_vkCmdDebugMarkerEndEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
        ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdDebugMarkerEndEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDebugMarkerEndEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdDebugMarkerEndEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDebugMarkerEndEXT");
    }  
    
call_function(commandBuffer);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_GVaXYIY=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();

        writeToConn(result);
    }

    void handle_vkCmdDebugMarkerInsertEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkDebugMarkerMarkerInfoEXT* pMarkerInfo
        ;
[&]() {
VkDebugMarkerMarkerInfoEXT* temp_PwiFIPO;[&]() {

        if (data_json["members"]["pMarkerInfo"].contains("null")){
        temp_PwiFIPO=NULL;
        return;
        }
    temp_PwiFIPO=(VkDebugMarkerMarkerInfoEXT*)malloc(sizeof(VkDebugMarkerMarkerInfoEXT));
[&]() {
*(temp_PwiFIPO)=deserialize_VkDebugMarkerMarkerInfoEXT(data_json["members"]["pMarkerInfo"]);}();
}();pMarkerInfo=temp_PwiFIPO;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdDebugMarkerInsertEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDebugMarkerInsertEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdDebugMarkerInsertEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDebugMarkerInsertEXT");
    }  
    
call_function(commandBuffer, pMarkerInfo);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pMarkerInfo"]=[&]() {
    json return_jQLIdBb=json({});
    
        if (pMarkerInfo==NULL){
            return_jQLIdBb["null"]=true;
            return return_jQLIdBb;
        }
        return_jQLIdBb=[&]() {
    json return_OgewjvM=json({});
    return serialize_VkDebugMarkerMarkerInfoEXT(*pMarkerInfo);}();
return return_jQLIdBb;}();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceExternalImageFormatPropertiesNV(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
VkFormat format
            ;
[&]() {
format=deserialize_VkFormat(data_json["members"]["format"]);}();
VkImageType type
            ;
[&]() {
type=deserialize_VkImageType(data_json["members"]["type"]);}();
VkImageTiling tiling
            ;
[&]() {
tiling=deserialize_VkImageTiling(data_json["members"]["tiling"]);}();
VkImageUsageFlags usage
            ;
[&]() {
usage=deserialize_VkImageUsageFlags(data_json["members"]["usage"]);}();
VkImageCreateFlags flags
            ;
[&]() {
flags=deserialize_VkImageCreateFlags(data_json["members"]["flags"]);}();
VkExternalMemoryHandleTypeFlagsNV externalHandleType
            ;
[&]() {
externalHandleType=deserialize_VkExternalMemoryHandleTypeFlagsNV(data_json["members"]["externalHandleType"]);}();
VkExternalImageFormatPropertiesNV* pExternalImageFormatProperties
        ;
[&]() {

        if (data_json["members"]["pExternalImageFormatProperties"].contains("null")){
        pExternalImageFormatProperties=NULL;
        return;
        }
    pExternalImageFormatProperties=(VkExternalImageFormatPropertiesNV*)malloc(sizeof(VkExternalImageFormatPropertiesNV));
[&]() {
*(pExternalImageFormatProperties)=deserialize_VkExternalImageFormatPropertiesNV(data_json["members"]["pExternalImageFormatProperties"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceExternalImageFormatPropertiesNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceExternalImageFormatPropertiesNV");
    }  
    
auto return_value=call_function(physicalDevice, format, type, tiling, usage, flags, externalHandleType, pExternalImageFormatProperties);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_TqnnDaG=json({});
    return serialize_VkResult(return_value);}();
result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["format"]=[&]() {
    json return_ESSNhLl=json({});
    return serialize_VkFormat(format);}();
result["members"]["type"]=[&]() {
    json return_riYevWa=json({});
    return serialize_VkImageType(type);}();
result["members"]["tiling"]=[&]() {
    json return_UkQGtiM=json({});
    return serialize_VkImageTiling(tiling);}();
result["members"]["usage"]=[&]() {
    json return_QwDsmvQ=json({});
    return serialize_VkImageUsageFlags(usage);}();
result["members"]["flags"]=[&]() {
    json return_tBBADJd=json({});
    return serialize_VkImageCreateFlags(flags);}();
result["members"]["externalHandleType"]=[&]() {
    json return_TWDCpIY=json({});
    return serialize_VkExternalMemoryHandleTypeFlagsNV(externalHandleType);}();
result["members"]["pExternalImageFormatProperties"]=[&]() {
    json return_UJDXnOW=json({});
    
        if (pExternalImageFormatProperties==NULL){
            return_UJDXnOW["null"]=true;
            return return_UJDXnOW;
        }
        return_UJDXnOW=[&]() {
    json return_GOMLzBJ=json({});
    return serialize_VkExternalImageFormatPropertiesNV(*pExternalImageFormatProperties);}();
return return_UJDXnOW;}();

        writeToConn(result);
    }

    void handle_vkCmdExecuteGeneratedCommandsNV(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBool32 isPreprocessed
            ;
[&]() {
[&]() {
isPreprocessed=deserialize_uint32_t(data_json["members"]["isPreprocessed"]);}();}();
VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo
        ;
[&]() {
VkGeneratedCommandsInfoNV* temp_VldPwUs;[&]() {

        if (data_json["members"]["pGeneratedCommandsInfo"].contains("null")){
        temp_VldPwUs=NULL;
        return;
        }
    temp_VldPwUs=(VkGeneratedCommandsInfoNV*)malloc(sizeof(VkGeneratedCommandsInfoNV));
[&]() {
*(temp_VldPwUs)=deserialize_VkGeneratedCommandsInfoNV(data_json["members"]["pGeneratedCommandsInfo"]);}();
}();pGeneratedCommandsInfo=temp_VldPwUs;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdExecuteGeneratedCommandsNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdExecuteGeneratedCommandsNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdExecuteGeneratedCommandsNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdExecuteGeneratedCommandsNV");
    }  
    
call_function(commandBuffer, isPreprocessed, pGeneratedCommandsInfo);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["isPreprocessed"]=[&]() {
    json return_sHlZIcK=json({});
    return_sHlZIcK=[&]() {
    json return_dtwKEQL=json({});
    return serialize_uint32_t(isPreprocessed);}();return return_sHlZIcK;}();
result["members"]["pGeneratedCommandsInfo"]=[&]() {
    json return_qcgHLcQ=json({});
    
        if (pGeneratedCommandsInfo==NULL){
            return_qcgHLcQ["null"]=true;
            return return_qcgHLcQ;
        }
        return_qcgHLcQ=[&]() {
    json return_bZkkiMJ=json({});
    return serialize_VkGeneratedCommandsInfoNV(*pGeneratedCommandsInfo);}();
return return_qcgHLcQ;}();

        writeToConn(result);
    }

    void handle_vkCmdPreprocessGeneratedCommandsNV(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo
        ;
[&]() {
VkGeneratedCommandsInfoNV* temp_VldPwUs;[&]() {

        if (data_json["members"]["pGeneratedCommandsInfo"].contains("null")){
        temp_VldPwUs=NULL;
        return;
        }
    temp_VldPwUs=(VkGeneratedCommandsInfoNV*)malloc(sizeof(VkGeneratedCommandsInfoNV));
[&]() {
*(temp_VldPwUs)=deserialize_VkGeneratedCommandsInfoNV(data_json["members"]["pGeneratedCommandsInfo"]);}();
}();pGeneratedCommandsInfo=temp_VldPwUs;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdPreprocessGeneratedCommandsNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdPreprocessGeneratedCommandsNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdPreprocessGeneratedCommandsNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdPreprocessGeneratedCommandsNV");
    }  
    
call_function(commandBuffer, pGeneratedCommandsInfo);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pGeneratedCommandsInfo"]=[&]() {
    json return_qcgHLcQ=json({});
    
        if (pGeneratedCommandsInfo==NULL){
            return_qcgHLcQ["null"]=true;
            return return_qcgHLcQ;
        }
        return_qcgHLcQ=[&]() {
    json return_bZkkiMJ=json({});
    return serialize_VkGeneratedCommandsInfoNV(*pGeneratedCommandsInfo);}();
return return_qcgHLcQ;}();

        writeToConn(result);
    }

    void handle_vkCmdBindPipelineShaderGroupNV(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkPipelineBindPoint pipelineBindPoint
            ;
[&]() {
pipelineBindPoint=deserialize_VkPipelineBindPoint(data_json["members"]["pipelineBindPoint"]);}();
VkPipeline pipeline
            ;
[&]() {
pipeline=deserialize_VkPipeline(data_json["members"]["pipeline"]);}();
uint32_t groupIndex
        ;
[&]() {
groupIndex=deserialize_uint32_t(data_json["members"]["groupIndex"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdBindPipelineShaderGroupNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBindPipelineShaderGroupNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdBindPipelineShaderGroupNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBindPipelineShaderGroupNV");
    }  
    
call_function(commandBuffer, pipelineBindPoint, pipeline, groupIndex);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pipelineBindPoint"]=[&]() {
    json return_wEDWbiR=json({});
    return serialize_VkPipelineBindPoint(pipelineBindPoint);}();
result["members"]["pipeline"]=[&]() {
    json return_xIUyQCN=json({});
    return serialize_VkPipeline(pipeline);}();
result["members"]["groupIndex"]=[&]() {
    json return_owUItMx=json({});
    return serialize_uint32_t(groupIndex);}();

        writeToConn(result);
    }

    void handle_vkGetGeneratedCommandsMemoryRequirementsNV(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkGeneratedCommandsMemoryRequirementsInfoNV* pInfo
            ;
[&]() {
VkGeneratedCommandsMemoryRequirementsInfoNV* temp_bbjqTte;[&]() {

        if (data_json["members"]["pInfo"].contains("null")){
        temp_bbjqTte=NULL;
        return;
        }
    temp_bbjqTte=(VkGeneratedCommandsMemoryRequirementsInfoNV*)malloc(sizeof(VkGeneratedCommandsMemoryRequirementsInfoNV));
[&]() {
*(temp_bbjqTte)=deserialize_VkGeneratedCommandsMemoryRequirementsInfoNV(data_json["members"]["pInfo"]);}();
}();pInfo=temp_bbjqTte;}();
VkMemoryRequirements2* pMemoryRequirements
        ;
[&]() {

        if (data_json["members"]["pMemoryRequirements"].contains("null")){
        pMemoryRequirements=NULL;
        return;
        }
    pMemoryRequirements=(VkMemoryRequirements2*)malloc(sizeof(VkMemoryRequirements2));
[&]() {
*(pMemoryRequirements)=deserialize_VkMemoryRequirements2(data_json["members"]["pMemoryRequirements"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetGeneratedCommandsMemoryRequirementsNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetGeneratedCommandsMemoryRequirementsNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetGeneratedCommandsMemoryRequirementsNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetGeneratedCommandsMemoryRequirementsNV");
    }  
    
call_function(device, pInfo, pMemoryRequirements);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pInfo"]=[&]() {
    json return_gfBYqCt=json({});
    
        if (pInfo==NULL){
            return_gfBYqCt["null"]=true;
            return return_gfBYqCt;
        }
        return_gfBYqCt=[&]() {
    json return_HOItjJh=json({});
    return serialize_VkGeneratedCommandsMemoryRequirementsInfoNV(*pInfo);}();
return return_gfBYqCt;}();
result["members"]["pMemoryRequirements"]=[&]() {
    json return_aEBODbS=json({});
    
        if (pMemoryRequirements==NULL){
            return_aEBODbS["null"]=true;
            return return_aEBODbS;
        }
        return_aEBODbS=[&]() {
    json return_hGmebmD=json({});
    return serialize_VkMemoryRequirements2(*pMemoryRequirements);}();
return return_aEBODbS;}();

        writeToConn(result);
    }

    void handle_vkCreateIndirectCommandsLayoutNV(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkIndirectCommandsLayoutCreateInfoNV* pCreateInfo
            ;
[&]() {
VkIndirectCommandsLayoutCreateInfoNV* temp_KfyZahJ;[&]() {

        if (data_json["members"]["pCreateInfo"].contains("null")){
        temp_KfyZahJ=NULL;
        return;
        }
    temp_KfyZahJ=(VkIndirectCommandsLayoutCreateInfoNV*)malloc(sizeof(VkIndirectCommandsLayoutCreateInfoNV));
[&]() {
*(temp_KfyZahJ)=deserialize_VkIndirectCommandsLayoutCreateInfoNV(data_json["members"]["pCreateInfo"]);}();
}();pCreateInfo=temp_KfyZahJ;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkIndirectCommandsLayoutNV* pIndirectCommandsLayout
        ;
[&]() {

        if (data_json["members"]["pIndirectCommandsLayout"].contains("null")){
        pIndirectCommandsLayout=NULL;
        return;
        }
    pIndirectCommandsLayout=(VkIndirectCommandsLayoutNV*)malloc(sizeof(VkIndirectCommandsLayoutNV));
[&]() {
*(pIndirectCommandsLayout)=deserialize_VkIndirectCommandsLayoutNV(data_json["members"]["pIndirectCommandsLayout"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreateIndirectCommandsLayoutNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateIndirectCommandsLayoutNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreateIndirectCommandsLayoutNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateIndirectCommandsLayoutNV");
    }  
    
auto return_value=call_function(device, pCreateInfo, pAllocator, pIndirectCommandsLayout);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_zaIYheg=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pCreateInfo"]=[&]() {
    json return_hOyWrxA=json({});
    
        if (pCreateInfo==NULL){
            return_hOyWrxA["null"]=true;
            return return_hOyWrxA;
        }
        return_hOyWrxA=[&]() {
    json return_nMdolfS=json({});
    return serialize_VkIndirectCommandsLayoutCreateInfoNV(*pCreateInfo);}();
return return_hOyWrxA;}();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pIndirectCommandsLayout"]=[&]() {
    json return_nBIslMF=json({});
    
        if (pIndirectCommandsLayout==NULL){
            return_nBIslMF["null"]=true;
            return return_nBIslMF;
        }
        return_nBIslMF=[&]() {
    json return_qhkwaTp=json({});
    return serialize_VkIndirectCommandsLayoutNV(*pIndirectCommandsLayout);}();
return return_nBIslMF;}();

        writeToConn(result);
    }

    void handle_vkDestroyIndirectCommandsLayoutNV(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkIndirectCommandsLayoutNV indirectCommandsLayout
            ;
[&]() {
indirectCommandsLayout=deserialize_VkIndirectCommandsLayoutNV(data_json["members"]["indirectCommandsLayout"]);}();
VkAllocationCallbacks* pAllocator
        ;
[&]() {
VkAllocationCallbacks* temp_VAmhMvJ;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_VAmhMvJ=NULL;
        return;
        }
    temp_VAmhMvJ=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_VAmhMvJ)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_VAmhMvJ;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkDestroyIndirectCommandsLayoutNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyIndirectCommandsLayoutNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkDestroyIndirectCommandsLayoutNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyIndirectCommandsLayoutNV");
    }  
    
call_function(device, indirectCommandsLayout, pAllocator);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["indirectCommandsLayout"]=[&]() {
    json return_isBMNzy=json({});
    return serialize_VkIndirectCommandsLayoutNV(indirectCommandsLayout);}();
result["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceFeatures2(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
VkPhysicalDeviceFeatures2* pFeatures
        ;
[&]() {

        if (data_json["members"]["pFeatures"].contains("null")){
        pFeatures=NULL;
        return;
        }
    pFeatures=(VkPhysicalDeviceFeatures2*)malloc(sizeof(VkPhysicalDeviceFeatures2));
[&]() {
*(pFeatures)=deserialize_VkPhysicalDeviceFeatures2(data_json["members"]["pFeatures"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceFeatures2)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceFeatures2");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceFeatures2)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceFeatures2");
    }  
    
call_function(physicalDevice, pFeatures);
json result=json({});
        result["type"]="Response";
    

result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["pFeatures"]=[&]() {
    json return_NLaVJyq=json({});
    
        if (pFeatures==NULL){
            return_NLaVJyq["null"]=true;
            return return_NLaVJyq;
        }
        return_NLaVJyq=[&]() {
    json return_BFIJfhU=json({});
    return serialize_VkPhysicalDeviceFeatures2(*pFeatures);}();
return return_NLaVJyq;}();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceFeatures2KHR(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
VkPhysicalDeviceFeatures2* pFeatures
        ;
[&]() {

        if (data_json["members"]["pFeatures"].contains("null")){
        pFeatures=NULL;
        return;
        }
    pFeatures=(VkPhysicalDeviceFeatures2*)malloc(sizeof(VkPhysicalDeviceFeatures2));
[&]() {
*(pFeatures)=deserialize_VkPhysicalDeviceFeatures2(data_json["members"]["pFeatures"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceFeatures2KHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceFeatures2KHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceFeatures2KHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceFeatures2KHR");
    }  
    
call_function(physicalDevice, pFeatures);
json result=json({});
        result["type"]="Response";
    

result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["pFeatures"]=[&]() {
    json return_NLaVJyq=json({});
    
        if (pFeatures==NULL){
            return_NLaVJyq["null"]=true;
            return return_NLaVJyq;
        }
        return_NLaVJyq=[&]() {
    json return_BFIJfhU=json({});
    return serialize_VkPhysicalDeviceFeatures2(*pFeatures);}();
return return_NLaVJyq;}();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceProperties2(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
VkPhysicalDeviceProperties2* pProperties
        ;
[&]() {

        if (data_json["members"]["pProperties"].contains("null")){
        pProperties=NULL;
        return;
        }
    pProperties=(VkPhysicalDeviceProperties2*)malloc(sizeof(VkPhysicalDeviceProperties2));
[&]() {
*(pProperties)=deserialize_VkPhysicalDeviceProperties2(data_json["members"]["pProperties"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceProperties2)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceProperties2");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceProperties2)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceProperties2");
    }  
    
call_function(physicalDevice, pProperties);
json result=json({});
        result["type"]="Response";
    

result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["pProperties"]=[&]() {
    json return_akDLFmv=json({});
    
        if (pProperties==NULL){
            return_akDLFmv["null"]=true;
            return return_akDLFmv;
        }
        return_akDLFmv=[&]() {
    json return_oliZJjR=json({});
    return serialize_VkPhysicalDeviceProperties2(*pProperties);}();
return return_akDLFmv;}();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceProperties2KHR(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
VkPhysicalDeviceProperties2* pProperties
        ;
[&]() {

        if (data_json["members"]["pProperties"].contains("null")){
        pProperties=NULL;
        return;
        }
    pProperties=(VkPhysicalDeviceProperties2*)malloc(sizeof(VkPhysicalDeviceProperties2));
[&]() {
*(pProperties)=deserialize_VkPhysicalDeviceProperties2(data_json["members"]["pProperties"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceProperties2KHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceProperties2KHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceProperties2KHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceProperties2KHR");
    }  
    
call_function(physicalDevice, pProperties);
json result=json({});
        result["type"]="Response";
    

result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["pProperties"]=[&]() {
    json return_akDLFmv=json({});
    
        if (pProperties==NULL){
            return_akDLFmv["null"]=true;
            return return_akDLFmv;
        }
        return_akDLFmv=[&]() {
    json return_oliZJjR=json({});
    return serialize_VkPhysicalDeviceProperties2(*pProperties);}();
return return_akDLFmv;}();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceFormatProperties2(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
VkFormat format
            ;
[&]() {
format=deserialize_VkFormat(data_json["members"]["format"]);}();
VkFormatProperties2* pFormatProperties
        ;
[&]() {

        if (data_json["members"]["pFormatProperties"].contains("null")){
        pFormatProperties=NULL;
        return;
        }
    pFormatProperties=(VkFormatProperties2*)malloc(sizeof(VkFormatProperties2));
[&]() {
*(pFormatProperties)=deserialize_VkFormatProperties2(data_json["members"]["pFormatProperties"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceFormatProperties2)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceFormatProperties2");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceFormatProperties2)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceFormatProperties2");
    }  
    
call_function(physicalDevice, format, pFormatProperties);
json result=json({});
        result["type"]="Response";
    

result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["format"]=[&]() {
    json return_ESSNhLl=json({});
    return serialize_VkFormat(format);}();
result["members"]["pFormatProperties"]=[&]() {
    json return_kdtZRLw=json({});
    
        if (pFormatProperties==NULL){
            return_kdtZRLw["null"]=true;
            return return_kdtZRLw;
        }
        return_kdtZRLw=[&]() {
    json return_ZoDOlkj=json({});
    return serialize_VkFormatProperties2(*pFormatProperties);}();
return return_kdtZRLw;}();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceFormatProperties2KHR(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
VkFormat format
            ;
[&]() {
format=deserialize_VkFormat(data_json["members"]["format"]);}();
VkFormatProperties2* pFormatProperties
        ;
[&]() {

        if (data_json["members"]["pFormatProperties"].contains("null")){
        pFormatProperties=NULL;
        return;
        }
    pFormatProperties=(VkFormatProperties2*)malloc(sizeof(VkFormatProperties2));
[&]() {
*(pFormatProperties)=deserialize_VkFormatProperties2(data_json["members"]["pFormatProperties"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceFormatProperties2KHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceFormatProperties2KHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceFormatProperties2KHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceFormatProperties2KHR");
    }  
    
call_function(physicalDevice, format, pFormatProperties);
json result=json({});
        result["type"]="Response";
    

result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["format"]=[&]() {
    json return_ESSNhLl=json({});
    return serialize_VkFormat(format);}();
result["members"]["pFormatProperties"]=[&]() {
    json return_kdtZRLw=json({});
    
        if (pFormatProperties==NULL){
            return_kdtZRLw["null"]=true;
            return return_kdtZRLw;
        }
        return_kdtZRLw=[&]() {
    json return_ZoDOlkj=json({});
    return serialize_VkFormatProperties2(*pFormatProperties);}();
return return_kdtZRLw;}();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceImageFormatProperties2(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo
            ;
[&]() {
VkPhysicalDeviceImageFormatInfo2* temp_jbtCLrc;[&]() {

        if (data_json["members"]["pImageFormatInfo"].contains("null")){
        temp_jbtCLrc=NULL;
        return;
        }
    temp_jbtCLrc=(VkPhysicalDeviceImageFormatInfo2*)malloc(sizeof(VkPhysicalDeviceImageFormatInfo2));
[&]() {
*(temp_jbtCLrc)=deserialize_VkPhysicalDeviceImageFormatInfo2(data_json["members"]["pImageFormatInfo"]);}();
}();pImageFormatInfo=temp_jbtCLrc;}();
VkImageFormatProperties2* pImageFormatProperties
        ;
[&]() {

        if (data_json["members"]["pImageFormatProperties"].contains("null")){
        pImageFormatProperties=NULL;
        return;
        }
    pImageFormatProperties=(VkImageFormatProperties2*)malloc(sizeof(VkImageFormatProperties2));
[&]() {
*(pImageFormatProperties)=deserialize_VkImageFormatProperties2(data_json["members"]["pImageFormatProperties"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceImageFormatProperties2)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceImageFormatProperties2");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceImageFormatProperties2)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceImageFormatProperties2");
    }  
    
auto return_value=call_function(physicalDevice, pImageFormatInfo, pImageFormatProperties);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_GtVdFqF=json({});
    return serialize_VkResult(return_value);}();
result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["pImageFormatInfo"]=[&]() {
    json return_oEYtuYJ=json({});
    
        if (pImageFormatInfo==NULL){
            return_oEYtuYJ["null"]=true;
            return return_oEYtuYJ;
        }
        return_oEYtuYJ=[&]() {
    json return_VnTCWix=json({});
    return serialize_VkPhysicalDeviceImageFormatInfo2(*pImageFormatInfo);}();
return return_oEYtuYJ;}();
result["members"]["pImageFormatProperties"]=[&]() {
    json return_FmCXoHs=json({});
    
        if (pImageFormatProperties==NULL){
            return_FmCXoHs["null"]=true;
            return return_FmCXoHs;
        }
        return_FmCXoHs=[&]() {
    json return_bLkYmfT=json({});
    return serialize_VkImageFormatProperties2(*pImageFormatProperties);}();
return return_FmCXoHs;}();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceImageFormatProperties2KHR(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo
            ;
[&]() {
VkPhysicalDeviceImageFormatInfo2* temp_jbtCLrc;[&]() {

        if (data_json["members"]["pImageFormatInfo"].contains("null")){
        temp_jbtCLrc=NULL;
        return;
        }
    temp_jbtCLrc=(VkPhysicalDeviceImageFormatInfo2*)malloc(sizeof(VkPhysicalDeviceImageFormatInfo2));
[&]() {
*(temp_jbtCLrc)=deserialize_VkPhysicalDeviceImageFormatInfo2(data_json["members"]["pImageFormatInfo"]);}();
}();pImageFormatInfo=temp_jbtCLrc;}();
VkImageFormatProperties2* pImageFormatProperties
        ;
[&]() {

        if (data_json["members"]["pImageFormatProperties"].contains("null")){
        pImageFormatProperties=NULL;
        return;
        }
    pImageFormatProperties=(VkImageFormatProperties2*)malloc(sizeof(VkImageFormatProperties2));
[&]() {
*(pImageFormatProperties)=deserialize_VkImageFormatProperties2(data_json["members"]["pImageFormatProperties"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceImageFormatProperties2KHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceImageFormatProperties2KHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceImageFormatProperties2KHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceImageFormatProperties2KHR");
    }  
    
auto return_value=call_function(physicalDevice, pImageFormatInfo, pImageFormatProperties);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_sQLLtAt=json({});
    return serialize_VkResult(return_value);}();
result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["pImageFormatInfo"]=[&]() {
    json return_oEYtuYJ=json({});
    
        if (pImageFormatInfo==NULL){
            return_oEYtuYJ["null"]=true;
            return return_oEYtuYJ;
        }
        return_oEYtuYJ=[&]() {
    json return_VnTCWix=json({});
    return serialize_VkPhysicalDeviceImageFormatInfo2(*pImageFormatInfo);}();
return return_oEYtuYJ;}();
result["members"]["pImageFormatProperties"]=[&]() {
    json return_FmCXoHs=json({});
    
        if (pImageFormatProperties==NULL){
            return_FmCXoHs["null"]=true;
            return return_FmCXoHs;
        }
        return_FmCXoHs=[&]() {
    json return_bLkYmfT=json({});
    return serialize_VkImageFormatProperties2(*pImageFormatProperties);}();
return return_FmCXoHs;}();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceQueueFamilyProperties2(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
uint32_t* pQueueFamilyPropertyCount
            ;
[&]() {

        if (data_json["members"]["pQueueFamilyPropertyCount"].contains("null")){
        pQueueFamilyPropertyCount=NULL;
        return;
        }
    pQueueFamilyPropertyCount=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pQueueFamilyPropertyCount)=deserialize_uint32_t(data_json["members"]["pQueueFamilyPropertyCount"]);}();
}();
VkQueueFamilyProperties2* pQueueFamilyProperties
        ;
[&]() {

        if (data_json["members"]["pQueueFamilyProperties"].contains("null")){
        pQueueFamilyProperties=NULL;
        return;
        }
    pQueueFamilyProperties=(VkQueueFamilyProperties2*)malloc(*pQueueFamilyPropertyCount*sizeof(VkQueueFamilyProperties2));
        for (int iRalRZs=0; iRalRZs < *pQueueFamilyPropertyCount; iRalRZs++){
            [&]() {
pQueueFamilyProperties[iRalRZs]=deserialize_VkQueueFamilyProperties2(data_json["members"]["pQueueFamilyProperties"]["members"][iRalRZs]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceQueueFamilyProperties2)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceQueueFamilyProperties2");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceQueueFamilyProperties2)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceQueueFamilyProperties2");
    }  
    
call_function(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
json result=json({});
        result["type"]="Response";
    

result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["pQueueFamilyPropertyCount"]=[&]() {
    json return_SBlrxix=json({});
    
        if (pQueueFamilyPropertyCount==NULL){
            return_SBlrxix["null"]=true;
            return return_SBlrxix;
        }
        return_SBlrxix=[&]() {
    json return_xdCcTRD=json({});
    return serialize_uint32_t(*pQueueFamilyPropertyCount);}();
return return_SBlrxix;}();
result["members"]["pQueueFamilyProperties"]=[&]() {
    json return_mZepHDG=json({});
    
        if (pQueueFamilyProperties==NULL){
            return_mZepHDG["null"]=true;
            return return_mZepHDG;
        }
        
        return_mZepHDG["members"]={};
        for(int mZepHDG=0; mZepHDG < *pQueueFamilyPropertyCount; mZepHDG++){
            json temp;
            temp=[&]() {
    json return_xkrnQpZ=json({});
    return serialize_VkQueueFamilyProperties2(pQueueFamilyProperties[mZepHDG]);}();
            return_mZepHDG["members"].push_back(temp);
        }
        return return_mZepHDG;
        }();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceQueueFamilyProperties2KHR(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
uint32_t* pQueueFamilyPropertyCount
            ;
[&]() {

        if (data_json["members"]["pQueueFamilyPropertyCount"].contains("null")){
        pQueueFamilyPropertyCount=NULL;
        return;
        }
    pQueueFamilyPropertyCount=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pQueueFamilyPropertyCount)=deserialize_uint32_t(data_json["members"]["pQueueFamilyPropertyCount"]);}();
}();
VkQueueFamilyProperties2* pQueueFamilyProperties
        ;
[&]() {

        if (data_json["members"]["pQueueFamilyProperties"].contains("null")){
        pQueueFamilyProperties=NULL;
        return;
        }
    pQueueFamilyProperties=(VkQueueFamilyProperties2*)malloc(*pQueueFamilyPropertyCount*sizeof(VkQueueFamilyProperties2));
        for (int iRalRZs=0; iRalRZs < *pQueueFamilyPropertyCount; iRalRZs++){
            [&]() {
pQueueFamilyProperties[iRalRZs]=deserialize_VkQueueFamilyProperties2(data_json["members"]["pQueueFamilyProperties"]["members"][iRalRZs]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceQueueFamilyProperties2KHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceQueueFamilyProperties2KHR");
    }  
    
call_function(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
json result=json({});
        result["type"]="Response";
    

result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["pQueueFamilyPropertyCount"]=[&]() {
    json return_SBlrxix=json({});
    
        if (pQueueFamilyPropertyCount==NULL){
            return_SBlrxix["null"]=true;
            return return_SBlrxix;
        }
        return_SBlrxix=[&]() {
    json return_xdCcTRD=json({});
    return serialize_uint32_t(*pQueueFamilyPropertyCount);}();
return return_SBlrxix;}();
result["members"]["pQueueFamilyProperties"]=[&]() {
    json return_mZepHDG=json({});
    
        if (pQueueFamilyProperties==NULL){
            return_mZepHDG["null"]=true;
            return return_mZepHDG;
        }
        
        return_mZepHDG["members"]={};
        for(int mZepHDG=0; mZepHDG < *pQueueFamilyPropertyCount; mZepHDG++){
            json temp;
            temp=[&]() {
    json return_xkrnQpZ=json({});
    return serialize_VkQueueFamilyProperties2(pQueueFamilyProperties[mZepHDG]);}();
            return_mZepHDG["members"].push_back(temp);
        }
        return return_mZepHDG;
        }();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceMemoryProperties2(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
VkPhysicalDeviceMemoryProperties2* pMemoryProperties
        ;
[&]() {

        if (data_json["members"]["pMemoryProperties"].contains("null")){
        pMemoryProperties=NULL;
        return;
        }
    pMemoryProperties=(VkPhysicalDeviceMemoryProperties2*)malloc(sizeof(VkPhysicalDeviceMemoryProperties2));
[&]() {
*(pMemoryProperties)=deserialize_VkPhysicalDeviceMemoryProperties2(data_json["members"]["pMemoryProperties"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceMemoryProperties2)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceMemoryProperties2");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceMemoryProperties2)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceMemoryProperties2");
    }  
    
call_function(physicalDevice, pMemoryProperties);
json result=json({});
        result["type"]="Response";
    

result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["pMemoryProperties"]=[&]() {
    json return_OIWnyZP=json({});
    
        if (pMemoryProperties==NULL){
            return_OIWnyZP["null"]=true;
            return return_OIWnyZP;
        }
        return_OIWnyZP=[&]() {
    json return_glSWjgX=json({});
    return serialize_VkPhysicalDeviceMemoryProperties2(*pMemoryProperties);}();
return return_OIWnyZP;}();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceMemoryProperties2KHR(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
VkPhysicalDeviceMemoryProperties2* pMemoryProperties
        ;
[&]() {

        if (data_json["members"]["pMemoryProperties"].contains("null")){
        pMemoryProperties=NULL;
        return;
        }
    pMemoryProperties=(VkPhysicalDeviceMemoryProperties2*)malloc(sizeof(VkPhysicalDeviceMemoryProperties2));
[&]() {
*(pMemoryProperties)=deserialize_VkPhysicalDeviceMemoryProperties2(data_json["members"]["pMemoryProperties"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceMemoryProperties2KHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceMemoryProperties2KHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceMemoryProperties2KHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceMemoryProperties2KHR");
    }  
    
call_function(physicalDevice, pMemoryProperties);
json result=json({});
        result["type"]="Response";
    

result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["pMemoryProperties"]=[&]() {
    json return_OIWnyZP=json({});
    
        if (pMemoryProperties==NULL){
            return_OIWnyZP["null"]=true;
            return return_OIWnyZP;
        }
        return_OIWnyZP=[&]() {
    json return_glSWjgX=json({});
    return serialize_VkPhysicalDeviceMemoryProperties2(*pMemoryProperties);}();
return return_OIWnyZP;}();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceSparseImageFormatProperties2(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo
            ;
[&]() {
VkPhysicalDeviceSparseImageFormatInfo2* temp_QmLfNMq;[&]() {

        if (data_json["members"]["pFormatInfo"].contains("null")){
        temp_QmLfNMq=NULL;
        return;
        }
    temp_QmLfNMq=(VkPhysicalDeviceSparseImageFormatInfo2*)malloc(sizeof(VkPhysicalDeviceSparseImageFormatInfo2));
[&]() {
*(temp_QmLfNMq)=deserialize_VkPhysicalDeviceSparseImageFormatInfo2(data_json["members"]["pFormatInfo"]);}();
}();pFormatInfo=temp_QmLfNMq;}();
uint32_t* pPropertyCount
            ;
[&]() {

        if (data_json["members"]["pPropertyCount"].contains("null")){
        pPropertyCount=NULL;
        return;
        }
    pPropertyCount=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pPropertyCount)=deserialize_uint32_t(data_json["members"]["pPropertyCount"]);}();
}();
VkSparseImageFormatProperties2* pProperties
        ;
[&]() {

        if (data_json["members"]["pProperties"].contains("null")){
        pProperties=NULL;
        return;
        }
    pProperties=(VkSparseImageFormatProperties2*)malloc(*pPropertyCount*sizeof(VkSparseImageFormatProperties2));
        for (int qluzKbT=0; qluzKbT < *pPropertyCount; qluzKbT++){
            [&]() {
pProperties[qluzKbT]=deserialize_VkSparseImageFormatProperties2(data_json["members"]["pProperties"]["members"][qluzKbT]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceSparseImageFormatProperties2)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceSparseImageFormatProperties2");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceSparseImageFormatProperties2)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceSparseImageFormatProperties2");
    }  
    
call_function(physicalDevice, pFormatInfo, pPropertyCount, pProperties);
json result=json({});
        result["type"]="Response";
    

result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["pFormatInfo"]=[&]() {
    json return_cZilSvu=json({});
    
        if (pFormatInfo==NULL){
            return_cZilSvu["null"]=true;
            return return_cZilSvu;
        }
        return_cZilSvu=[&]() {
    json return_EsBfdpl=json({});
    return serialize_VkPhysicalDeviceSparseImageFormatInfo2(*pFormatInfo);}();
return return_cZilSvu;}();
result["members"]["pPropertyCount"]=[&]() {
    json return_MnYOHdG=json({});
    
        if (pPropertyCount==NULL){
            return_MnYOHdG["null"]=true;
            return return_MnYOHdG;
        }
        return_MnYOHdG=[&]() {
    json return_rPOmKzR=json({});
    return serialize_uint32_t(*pPropertyCount);}();
return return_MnYOHdG;}();
result["members"]["pProperties"]=[&]() {
    json return_THzQZnc=json({});
    
        if (pProperties==NULL){
            return_THzQZnc["null"]=true;
            return return_THzQZnc;
        }
        
        return_THzQZnc["members"]={};
        for(int THzQZnc=0; THzQZnc < *pPropertyCount; THzQZnc++){
            json temp;
            temp=[&]() {
    json return_WzJLjrV=json({});
    return serialize_VkSparseImageFormatProperties2(pProperties[THzQZnc]);}();
            return_THzQZnc["members"].push_back(temp);
        }
        return return_THzQZnc;
        }();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceSparseImageFormatProperties2KHR(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo
            ;
[&]() {
VkPhysicalDeviceSparseImageFormatInfo2* temp_QmLfNMq;[&]() {

        if (data_json["members"]["pFormatInfo"].contains("null")){
        temp_QmLfNMq=NULL;
        return;
        }
    temp_QmLfNMq=(VkPhysicalDeviceSparseImageFormatInfo2*)malloc(sizeof(VkPhysicalDeviceSparseImageFormatInfo2));
[&]() {
*(temp_QmLfNMq)=deserialize_VkPhysicalDeviceSparseImageFormatInfo2(data_json["members"]["pFormatInfo"]);}();
}();pFormatInfo=temp_QmLfNMq;}();
uint32_t* pPropertyCount
            ;
[&]() {

        if (data_json["members"]["pPropertyCount"].contains("null")){
        pPropertyCount=NULL;
        return;
        }
    pPropertyCount=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pPropertyCount)=deserialize_uint32_t(data_json["members"]["pPropertyCount"]);}();
}();
VkSparseImageFormatProperties2* pProperties
        ;
[&]() {

        if (data_json["members"]["pProperties"].contains("null")){
        pProperties=NULL;
        return;
        }
    pProperties=(VkSparseImageFormatProperties2*)malloc(*pPropertyCount*sizeof(VkSparseImageFormatProperties2));
        for (int qluzKbT=0; qluzKbT < *pPropertyCount; qluzKbT++){
            [&]() {
pProperties[qluzKbT]=deserialize_VkSparseImageFormatProperties2(data_json["members"]["pProperties"]["members"][qluzKbT]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceSparseImageFormatProperties2KHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceSparseImageFormatProperties2KHR");
    }  
    
call_function(physicalDevice, pFormatInfo, pPropertyCount, pProperties);
json result=json({});
        result["type"]="Response";
    

result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["pFormatInfo"]=[&]() {
    json return_cZilSvu=json({});
    
        if (pFormatInfo==NULL){
            return_cZilSvu["null"]=true;
            return return_cZilSvu;
        }
        return_cZilSvu=[&]() {
    json return_EsBfdpl=json({});
    return serialize_VkPhysicalDeviceSparseImageFormatInfo2(*pFormatInfo);}();
return return_cZilSvu;}();
result["members"]["pPropertyCount"]=[&]() {
    json return_MnYOHdG=json({});
    
        if (pPropertyCount==NULL){
            return_MnYOHdG["null"]=true;
            return return_MnYOHdG;
        }
        return_MnYOHdG=[&]() {
    json return_rPOmKzR=json({});
    return serialize_uint32_t(*pPropertyCount);}();
return return_MnYOHdG;}();
result["members"]["pProperties"]=[&]() {
    json return_THzQZnc=json({});
    
        if (pProperties==NULL){
            return_THzQZnc["null"]=true;
            return return_THzQZnc;
        }
        
        return_THzQZnc["members"]={};
        for(int THzQZnc=0; THzQZnc < *pPropertyCount; THzQZnc++){
            json temp;
            temp=[&]() {
    json return_WzJLjrV=json({});
    return serialize_VkSparseImageFormatProperties2(pProperties[THzQZnc]);}();
            return_THzQZnc["members"].push_back(temp);
        }
        return return_THzQZnc;
        }();

        writeToConn(result);
    }

    void handle_vkCmdPushDescriptorSetKHR(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkPipelineBindPoint pipelineBindPoint
            ;
[&]() {
pipelineBindPoint=deserialize_VkPipelineBindPoint(data_json["members"]["pipelineBindPoint"]);}();
VkPipelineLayout layout
            ;
[&]() {
layout=deserialize_VkPipelineLayout(data_json["members"]["layout"]);}();
uint32_t set
            ;
[&]() {
set=deserialize_uint32_t(data_json["members"]["set"]);}();
uint32_t descriptorWriteCount
            ;
[&]() {
descriptorWriteCount=deserialize_uint32_t(data_json["members"]["descriptorWriteCount"]);}();
VkWriteDescriptorSet* pDescriptorWrites
        ;
[&]() {
VkWriteDescriptorSet* temp_lCbPOPR;[&]() {

        if (data_json["members"]["pDescriptorWrites"].contains("null")){
        temp_lCbPOPR=NULL;
        return;
        }
    temp_lCbPOPR=(VkWriteDescriptorSet*)malloc(descriptorWriteCount*sizeof(VkWriteDescriptorSet));
        for (int NCSUctF=0; NCSUctF < descriptorWriteCount; NCSUctF++){
            [&]() {
temp_lCbPOPR[NCSUctF]=deserialize_VkWriteDescriptorSet(data_json["members"]["pDescriptorWrites"]["members"][NCSUctF]);}();;
        }
        }();pDescriptorWrites=temp_lCbPOPR;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdPushDescriptorSetKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdPushDescriptorSetKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdPushDescriptorSetKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdPushDescriptorSetKHR");
    }  
    
call_function(commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, pDescriptorWrites);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pipelineBindPoint"]=[&]() {
    json return_wEDWbiR=json({});
    return serialize_VkPipelineBindPoint(pipelineBindPoint);}();
result["members"]["layout"]=[&]() {
    json return_PdiawKY=json({});
    return serialize_VkPipelineLayout(layout);}();
result["members"]["set"]=[&]() {
    json return_GklIuIu=json({});
    return serialize_uint32_t(set);}();
result["members"]["descriptorWriteCount"]=[&]() {
    json return_XRSXcAe=json({});
    return serialize_uint32_t(descriptorWriteCount);}();
result["members"]["pDescriptorWrites"]=[&]() {
    json return_OrQuICm=json({});
    
        if (pDescriptorWrites==NULL){
            return_OrQuICm["null"]=true;
            return return_OrQuICm;
        }
        
        return_OrQuICm["members"]={};
        for(int OrQuICm=0; OrQuICm < descriptorWriteCount; OrQuICm++){
            json temp;
            temp=[&]() {
    json return_gGESsvI=json({});
    return serialize_VkWriteDescriptorSet(pDescriptorWrites[OrQuICm]);}();
            return_OrQuICm["members"].push_back(temp);
        }
        return return_OrQuICm;
        }();

        writeToConn(result);
    }

    void handle_vkTrimCommandPool(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkCommandPool commandPool
            ;
[&]() {
commandPool=deserialize_VkCommandPool(data_json["members"]["commandPool"]);}();
VkCommandPoolTrimFlags flags
        ;
[&]() {
flags=deserialize_VkCommandPoolTrimFlags(data_json["members"]["flags"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkTrimCommandPool)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkTrimCommandPool");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkTrimCommandPool)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkTrimCommandPool");
    }  
    
call_function(device, commandPool, flags);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["commandPool"]=[&]() {
    json return_EDvrdif=json({});
    return serialize_VkCommandPool(commandPool);}();
result["members"]["flags"]=[&]() {
    json return_jdckBfa=json({});
    return serialize_VkCommandPoolTrimFlags(flags);}();

        writeToConn(result);
    }

    void handle_vkTrimCommandPoolKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkCommandPool commandPool
            ;
[&]() {
commandPool=deserialize_VkCommandPool(data_json["members"]["commandPool"]);}();
VkCommandPoolTrimFlags flags
        ;
[&]() {
flags=deserialize_VkCommandPoolTrimFlags(data_json["members"]["flags"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkTrimCommandPoolKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkTrimCommandPoolKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkTrimCommandPoolKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkTrimCommandPoolKHR");
    }  
    
call_function(device, commandPool, flags);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["commandPool"]=[&]() {
    json return_EDvrdif=json({});
    return serialize_VkCommandPool(commandPool);}();
result["members"]["flags"]=[&]() {
    json return_jdckBfa=json({});
    return serialize_VkCommandPoolTrimFlags(flags);}();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceExternalBufferProperties(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo
            ;
[&]() {
VkPhysicalDeviceExternalBufferInfo* temp_NFrSKMQ;[&]() {

        if (data_json["members"]["pExternalBufferInfo"].contains("null")){
        temp_NFrSKMQ=NULL;
        return;
        }
    temp_NFrSKMQ=(VkPhysicalDeviceExternalBufferInfo*)malloc(sizeof(VkPhysicalDeviceExternalBufferInfo));
[&]() {
*(temp_NFrSKMQ)=deserialize_VkPhysicalDeviceExternalBufferInfo(data_json["members"]["pExternalBufferInfo"]);}();
}();pExternalBufferInfo=temp_NFrSKMQ;}();
VkExternalBufferProperties* pExternalBufferProperties
        ;
[&]() {

        if (data_json["members"]["pExternalBufferProperties"].contains("null")){
        pExternalBufferProperties=NULL;
        return;
        }
    pExternalBufferProperties=(VkExternalBufferProperties*)malloc(sizeof(VkExternalBufferProperties));
[&]() {
*(pExternalBufferProperties)=deserialize_VkExternalBufferProperties(data_json["members"]["pExternalBufferProperties"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceExternalBufferProperties)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceExternalBufferProperties");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceExternalBufferProperties)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceExternalBufferProperties");
    }  
    
call_function(physicalDevice, pExternalBufferInfo, pExternalBufferProperties);
json result=json({});
        result["type"]="Response";
    

result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["pExternalBufferInfo"]=[&]() {
    json return_muUCuZR=json({});
    
        if (pExternalBufferInfo==NULL){
            return_muUCuZR["null"]=true;
            return return_muUCuZR;
        }
        return_muUCuZR=[&]() {
    json return_kRHbBTW=json({});
    return serialize_VkPhysicalDeviceExternalBufferInfo(*pExternalBufferInfo);}();
return return_muUCuZR;}();
result["members"]["pExternalBufferProperties"]=[&]() {
    json return_vRsFjhU=json({});
    
        if (pExternalBufferProperties==NULL){
            return_vRsFjhU["null"]=true;
            return return_vRsFjhU;
        }
        return_vRsFjhU=[&]() {
    json return_tXvafZc=json({});
    return serialize_VkExternalBufferProperties(*pExternalBufferProperties);}();
return return_vRsFjhU;}();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceExternalBufferPropertiesKHR(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo
            ;
[&]() {
VkPhysicalDeviceExternalBufferInfo* temp_NFrSKMQ;[&]() {

        if (data_json["members"]["pExternalBufferInfo"].contains("null")){
        temp_NFrSKMQ=NULL;
        return;
        }
    temp_NFrSKMQ=(VkPhysicalDeviceExternalBufferInfo*)malloc(sizeof(VkPhysicalDeviceExternalBufferInfo));
[&]() {
*(temp_NFrSKMQ)=deserialize_VkPhysicalDeviceExternalBufferInfo(data_json["members"]["pExternalBufferInfo"]);}();
}();pExternalBufferInfo=temp_NFrSKMQ;}();
VkExternalBufferProperties* pExternalBufferProperties
        ;
[&]() {

        if (data_json["members"]["pExternalBufferProperties"].contains("null")){
        pExternalBufferProperties=NULL;
        return;
        }
    pExternalBufferProperties=(VkExternalBufferProperties*)malloc(sizeof(VkExternalBufferProperties));
[&]() {
*(pExternalBufferProperties)=deserialize_VkExternalBufferProperties(data_json["members"]["pExternalBufferProperties"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceExternalBufferPropertiesKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceExternalBufferPropertiesKHR");
    }  
    
call_function(physicalDevice, pExternalBufferInfo, pExternalBufferProperties);
json result=json({});
        result["type"]="Response";
    

result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["pExternalBufferInfo"]=[&]() {
    json return_muUCuZR=json({});
    
        if (pExternalBufferInfo==NULL){
            return_muUCuZR["null"]=true;
            return return_muUCuZR;
        }
        return_muUCuZR=[&]() {
    json return_kRHbBTW=json({});
    return serialize_VkPhysicalDeviceExternalBufferInfo(*pExternalBufferInfo);}();
return return_muUCuZR;}();
result["members"]["pExternalBufferProperties"]=[&]() {
    json return_vRsFjhU=json({});
    
        if (pExternalBufferProperties==NULL){
            return_vRsFjhU["null"]=true;
            return return_vRsFjhU;
        }
        return_vRsFjhU=[&]() {
    json return_tXvafZc=json({});
    return serialize_VkExternalBufferProperties(*pExternalBufferProperties);}();
return return_vRsFjhU;}();

        writeToConn(result);
    }

    void handle_vkGetMemoryFdKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkMemoryGetFdInfoKHR* pGetFdInfo
            ;
[&]() {
VkMemoryGetFdInfoKHR* temp_umGleaO;[&]() {

        if (data_json["members"]["pGetFdInfo"].contains("null")){
        temp_umGleaO=NULL;
        return;
        }
    temp_umGleaO=(VkMemoryGetFdInfoKHR*)malloc(sizeof(VkMemoryGetFdInfoKHR));
[&]() {
*(temp_umGleaO)=deserialize_VkMemoryGetFdInfoKHR(data_json["members"]["pGetFdInfo"]);}();
}();pGetFdInfo=temp_umGleaO;}();
int* pFd
        ;
[&]() {

        if (data_json["members"]["pFd"].contains("null")){
        pFd=NULL;
        return;
        }
    pFd=(int*)malloc(sizeof(int));
[&]() {
*(pFd)=deserialize_int(data_json["members"]["pFd"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetMemoryFdKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetMemoryFdKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetMemoryFdKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetMemoryFdKHR");
    }  
    
auto return_value=call_function(device, pGetFdInfo, pFd);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_PCMyTAX=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pGetFdInfo"]=[&]() {
    json return_CPnSOOE=json({});
    
        if (pGetFdInfo==NULL){
            return_CPnSOOE["null"]=true;
            return return_CPnSOOE;
        }
        return_CPnSOOE=[&]() {
    json return_uZKQMxd=json({});
    return serialize_VkMemoryGetFdInfoKHR(*pGetFdInfo);}();
return return_CPnSOOE;}();
result["members"]["pFd"]=[&]() {
    json return_purnqnB=json({});
    
        if (pFd==NULL){
            return_purnqnB["null"]=true;
            return return_purnqnB;
        }
        return_purnqnB=[&]() {
    json return_ONesJYf=json({});
    return serialize_int(*pFd);}();
return return_purnqnB;}();

        writeToConn(result);
    }

    void handle_vkGetMemoryFdPropertiesKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkExternalMemoryHandleTypeFlagBits handleType
            ;
[&]() {
handleType=deserialize_VkExternalMemoryHandleTypeFlagBits(data_json["members"]["handleType"]);}();
int fd
            ;
[&]() {
fd=deserialize_int(data_json["members"]["fd"]);}();
VkMemoryFdPropertiesKHR* pMemoryFdProperties
        ;
[&]() {

        if (data_json["members"]["pMemoryFdProperties"].contains("null")){
        pMemoryFdProperties=NULL;
        return;
        }
    pMemoryFdProperties=(VkMemoryFdPropertiesKHR*)malloc(sizeof(VkMemoryFdPropertiesKHR));
[&]() {
*(pMemoryFdProperties)=deserialize_VkMemoryFdPropertiesKHR(data_json["members"]["pMemoryFdProperties"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetMemoryFdPropertiesKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetMemoryFdPropertiesKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetMemoryFdPropertiesKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetMemoryFdPropertiesKHR");
    }  
    
auto return_value=call_function(device, handleType, fd, pMemoryFdProperties);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_JEaEdpi=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["handleType"]=[&]() {
    json return_ZfjPdbS=json({});
    return serialize_VkExternalMemoryHandleTypeFlagBits(handleType);}();
result["members"]["fd"]=[&]() {
    json return_OXCTdCv=json({});
    return serialize_int(fd);}();
result["members"]["pMemoryFdProperties"]=[&]() {
    json return_zdZgrpr=json({});
    
        if (pMemoryFdProperties==NULL){
            return_zdZgrpr["null"]=true;
            return return_zdZgrpr;
        }
        return_zdZgrpr=[&]() {
    json return_XTFhDel=json({});
    return serialize_VkMemoryFdPropertiesKHR(*pMemoryFdProperties);}();
return return_zdZgrpr;}();

        writeToConn(result);
    }

    void handle_vkGetMemoryRemoteAddressNV(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkMemoryGetRemoteAddressInfoNV* pMemoryGetRemoteAddressInfo
            ;
[&]() {
VkMemoryGetRemoteAddressInfoNV* temp_TBVCuSX;[&]() {

        if (data_json["members"]["pMemoryGetRemoteAddressInfo"].contains("null")){
        temp_TBVCuSX=NULL;
        return;
        }
    temp_TBVCuSX=(VkMemoryGetRemoteAddressInfoNV*)malloc(sizeof(VkMemoryGetRemoteAddressInfoNV));
[&]() {
*(temp_TBVCuSX)=deserialize_VkMemoryGetRemoteAddressInfoNV(data_json["members"]["pMemoryGetRemoteAddressInfo"]);}();
}();pMemoryGetRemoteAddressInfo=temp_TBVCuSX;}();
VkRemoteAddressNV* pAddress
        ;
[&]() {

        if (data_json["members"]["pAddress"].contains("null")){
        pAddress=NULL;
        return;
        }
    [&]() {

        if (data_json["members"]["pAddress"].contains("null")){
        pAddress=NULL;
        return;
        }
    pAddress=(void**)malloc(sizeof(void*));
[&]() {

        if (data_json["members"]["pAddress"].contains("null")){
        *(pAddress)=NULL;
        return;
        }
    *(pAddress)=deserialize_void_p(data_json["members"]["pAddress"]);
}();
}();}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetMemoryRemoteAddressNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetMemoryRemoteAddressNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetMemoryRemoteAddressNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetMemoryRemoteAddressNV");
    }  
    
auto return_value=call_function(device, pMemoryGetRemoteAddressInfo, pAddress);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_hZVfpkr=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pMemoryGetRemoteAddressInfo"]=[&]() {
    json return_mupPqGK=json({});
    
        if (pMemoryGetRemoteAddressInfo==NULL){
            return_mupPqGK["null"]=true;
            return return_mupPqGK;
        }
        return_mupPqGK=[&]() {
    json return_hKmyxdb=json({});
    return serialize_VkMemoryGetRemoteAddressInfoNV(*pMemoryGetRemoteAddressInfo);}();
return return_mupPqGK;}();
result["members"]["pAddress"]=[&]() {
    json return_OJpMSoy=json({});
    
        if (pAddress==NULL){
            return_OJpMSoy["null"]=true;
            return return_OJpMSoy;
        }
        return_OJpMSoy=[&]() {
    json return_eHgaHDY=json({});
    return_eHgaHDY=[&]() {
    json return_sHFWjQs=json({});
    
        if (*pAddress==NULL){
            return_sHFWjQs["null"]=true;
            return return_sHFWjQs;
        }
        return serialize_void_p(*pAddress);
}();return return_eHgaHDY;}();
return return_OJpMSoy;}();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceExternalSemaphoreProperties(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo
            ;
[&]() {
VkPhysicalDeviceExternalSemaphoreInfo* temp_hzhoxyS;[&]() {

        if (data_json["members"]["pExternalSemaphoreInfo"].contains("null")){
        temp_hzhoxyS=NULL;
        return;
        }
    temp_hzhoxyS=(VkPhysicalDeviceExternalSemaphoreInfo*)malloc(sizeof(VkPhysicalDeviceExternalSemaphoreInfo));
[&]() {
*(temp_hzhoxyS)=deserialize_VkPhysicalDeviceExternalSemaphoreInfo(data_json["members"]["pExternalSemaphoreInfo"]);}();
}();pExternalSemaphoreInfo=temp_hzhoxyS;}();
VkExternalSemaphoreProperties* pExternalSemaphoreProperties
        ;
[&]() {

        if (data_json["members"]["pExternalSemaphoreProperties"].contains("null")){
        pExternalSemaphoreProperties=NULL;
        return;
        }
    pExternalSemaphoreProperties=(VkExternalSemaphoreProperties*)malloc(sizeof(VkExternalSemaphoreProperties));
[&]() {
*(pExternalSemaphoreProperties)=deserialize_VkExternalSemaphoreProperties(data_json["members"]["pExternalSemaphoreProperties"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceExternalSemaphoreProperties)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceExternalSemaphoreProperties");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceExternalSemaphoreProperties)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceExternalSemaphoreProperties");
    }  
    
call_function(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
json result=json({});
        result["type"]="Response";
    

result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["pExternalSemaphoreInfo"]=[&]() {
    json return_vrtHjRW=json({});
    
        if (pExternalSemaphoreInfo==NULL){
            return_vrtHjRW["null"]=true;
            return return_vrtHjRW;
        }
        return_vrtHjRW=[&]() {
    json return_bwiwvum=json({});
    return serialize_VkPhysicalDeviceExternalSemaphoreInfo(*pExternalSemaphoreInfo);}();
return return_vrtHjRW;}();
result["members"]["pExternalSemaphoreProperties"]=[&]() {
    json return_kExcklQ=json({});
    
        if (pExternalSemaphoreProperties==NULL){
            return_kExcklQ["null"]=true;
            return return_kExcklQ;
        }
        return_kExcklQ=[&]() {
    json return_fTouPxC=json({});
    return serialize_VkExternalSemaphoreProperties(*pExternalSemaphoreProperties);}();
return return_kExcklQ;}();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo
            ;
[&]() {
VkPhysicalDeviceExternalSemaphoreInfo* temp_hzhoxyS;[&]() {

        if (data_json["members"]["pExternalSemaphoreInfo"].contains("null")){
        temp_hzhoxyS=NULL;
        return;
        }
    temp_hzhoxyS=(VkPhysicalDeviceExternalSemaphoreInfo*)malloc(sizeof(VkPhysicalDeviceExternalSemaphoreInfo));
[&]() {
*(temp_hzhoxyS)=deserialize_VkPhysicalDeviceExternalSemaphoreInfo(data_json["members"]["pExternalSemaphoreInfo"]);}();
}();pExternalSemaphoreInfo=temp_hzhoxyS;}();
VkExternalSemaphoreProperties* pExternalSemaphoreProperties
        ;
[&]() {

        if (data_json["members"]["pExternalSemaphoreProperties"].contains("null")){
        pExternalSemaphoreProperties=NULL;
        return;
        }
    pExternalSemaphoreProperties=(VkExternalSemaphoreProperties*)malloc(sizeof(VkExternalSemaphoreProperties));
[&]() {
*(pExternalSemaphoreProperties)=deserialize_VkExternalSemaphoreProperties(data_json["members"]["pExternalSemaphoreProperties"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceExternalSemaphorePropertiesKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceExternalSemaphorePropertiesKHR");
    }  
    
call_function(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
json result=json({});
        result["type"]="Response";
    

result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["pExternalSemaphoreInfo"]=[&]() {
    json return_vrtHjRW=json({});
    
        if (pExternalSemaphoreInfo==NULL){
            return_vrtHjRW["null"]=true;
            return return_vrtHjRW;
        }
        return_vrtHjRW=[&]() {
    json return_bwiwvum=json({});
    return serialize_VkPhysicalDeviceExternalSemaphoreInfo(*pExternalSemaphoreInfo);}();
return return_vrtHjRW;}();
result["members"]["pExternalSemaphoreProperties"]=[&]() {
    json return_kExcklQ=json({});
    
        if (pExternalSemaphoreProperties==NULL){
            return_kExcklQ["null"]=true;
            return return_kExcklQ;
        }
        return_kExcklQ=[&]() {
    json return_fTouPxC=json({});
    return serialize_VkExternalSemaphoreProperties(*pExternalSemaphoreProperties);}();
return return_kExcklQ;}();

        writeToConn(result);
    }

    void handle_vkGetSemaphoreFdKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkSemaphoreGetFdInfoKHR* pGetFdInfo
            ;
[&]() {
VkSemaphoreGetFdInfoKHR* temp_KOHPcxa;[&]() {

        if (data_json["members"]["pGetFdInfo"].contains("null")){
        temp_KOHPcxa=NULL;
        return;
        }
    temp_KOHPcxa=(VkSemaphoreGetFdInfoKHR*)malloc(sizeof(VkSemaphoreGetFdInfoKHR));
[&]() {
*(temp_KOHPcxa)=deserialize_VkSemaphoreGetFdInfoKHR(data_json["members"]["pGetFdInfo"]);}();
}();pGetFdInfo=temp_KOHPcxa;}();
int* pFd
        ;
[&]() {

        if (data_json["members"]["pFd"].contains("null")){
        pFd=NULL;
        return;
        }
    pFd=(int*)malloc(sizeof(int));
[&]() {
*(pFd)=deserialize_int(data_json["members"]["pFd"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetSemaphoreFdKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetSemaphoreFdKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetSemaphoreFdKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetSemaphoreFdKHR");
    }  
    
auto return_value=call_function(device, pGetFdInfo, pFd);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_BSogZbD=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pGetFdInfo"]=[&]() {
    json return_tpMGEUJ=json({});
    
        if (pGetFdInfo==NULL){
            return_tpMGEUJ["null"]=true;
            return return_tpMGEUJ;
        }
        return_tpMGEUJ=[&]() {
    json return_jqOIInM=json({});
    return serialize_VkSemaphoreGetFdInfoKHR(*pGetFdInfo);}();
return return_tpMGEUJ;}();
result["members"]["pFd"]=[&]() {
    json return_purnqnB=json({});
    
        if (pFd==NULL){
            return_purnqnB["null"]=true;
            return return_purnqnB;
        }
        return_purnqnB=[&]() {
    json return_ONesJYf=json({});
    return serialize_int(*pFd);}();
return return_purnqnB;}();

        writeToConn(result);
    }

    void handle_vkImportSemaphoreFdKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkImportSemaphoreFdInfoKHR* pImportSemaphoreFdInfo
        ;
[&]() {
VkImportSemaphoreFdInfoKHR* temp_iCKqDvq;[&]() {

        if (data_json["members"]["pImportSemaphoreFdInfo"].contains("null")){
        temp_iCKqDvq=NULL;
        return;
        }
    temp_iCKqDvq=(VkImportSemaphoreFdInfoKHR*)malloc(sizeof(VkImportSemaphoreFdInfoKHR));
[&]() {
*(temp_iCKqDvq)=deserialize_VkImportSemaphoreFdInfoKHR(data_json["members"]["pImportSemaphoreFdInfo"]);}();
}();pImportSemaphoreFdInfo=temp_iCKqDvq;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkImportSemaphoreFdKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkImportSemaphoreFdKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkImportSemaphoreFdKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkImportSemaphoreFdKHR");
    }  
    
auto return_value=call_function(device, pImportSemaphoreFdInfo);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_imHJtsY=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pImportSemaphoreFdInfo"]=[&]() {
    json return_jeeivUs=json({});
    
        if (pImportSemaphoreFdInfo==NULL){
            return_jeeivUs["null"]=true;
            return return_jeeivUs;
        }
        return_jeeivUs=[&]() {
    json return_dGFXqrp=json({});
    return serialize_VkImportSemaphoreFdInfoKHR(*pImportSemaphoreFdInfo);}();
return return_jeeivUs;}();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceExternalFenceProperties(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo
            ;
[&]() {
VkPhysicalDeviceExternalFenceInfo* temp_smBXrcW;[&]() {

        if (data_json["members"]["pExternalFenceInfo"].contains("null")){
        temp_smBXrcW=NULL;
        return;
        }
    temp_smBXrcW=(VkPhysicalDeviceExternalFenceInfo*)malloc(sizeof(VkPhysicalDeviceExternalFenceInfo));
[&]() {
*(temp_smBXrcW)=deserialize_VkPhysicalDeviceExternalFenceInfo(data_json["members"]["pExternalFenceInfo"]);}();
}();pExternalFenceInfo=temp_smBXrcW;}();
VkExternalFenceProperties* pExternalFenceProperties
        ;
[&]() {

        if (data_json["members"]["pExternalFenceProperties"].contains("null")){
        pExternalFenceProperties=NULL;
        return;
        }
    pExternalFenceProperties=(VkExternalFenceProperties*)malloc(sizeof(VkExternalFenceProperties));
[&]() {
*(pExternalFenceProperties)=deserialize_VkExternalFenceProperties(data_json["members"]["pExternalFenceProperties"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceExternalFenceProperties)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceExternalFenceProperties");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceExternalFenceProperties)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceExternalFenceProperties");
    }  
    
call_function(physicalDevice, pExternalFenceInfo, pExternalFenceProperties);
json result=json({});
        result["type"]="Response";
    

result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["pExternalFenceInfo"]=[&]() {
    json return_YgGWsov=json({});
    
        if (pExternalFenceInfo==NULL){
            return_YgGWsov["null"]=true;
            return return_YgGWsov;
        }
        return_YgGWsov=[&]() {
    json return_AmsvgYJ=json({});
    return serialize_VkPhysicalDeviceExternalFenceInfo(*pExternalFenceInfo);}();
return return_YgGWsov;}();
result["members"]["pExternalFenceProperties"]=[&]() {
    json return_RpWaOtS=json({});
    
        if (pExternalFenceProperties==NULL){
            return_RpWaOtS["null"]=true;
            return return_RpWaOtS;
        }
        return_RpWaOtS=[&]() {
    json return_vRnhrJR=json({});
    return serialize_VkExternalFenceProperties(*pExternalFenceProperties);}();
return return_RpWaOtS;}();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceExternalFencePropertiesKHR(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo
            ;
[&]() {
VkPhysicalDeviceExternalFenceInfo* temp_smBXrcW;[&]() {

        if (data_json["members"]["pExternalFenceInfo"].contains("null")){
        temp_smBXrcW=NULL;
        return;
        }
    temp_smBXrcW=(VkPhysicalDeviceExternalFenceInfo*)malloc(sizeof(VkPhysicalDeviceExternalFenceInfo));
[&]() {
*(temp_smBXrcW)=deserialize_VkPhysicalDeviceExternalFenceInfo(data_json["members"]["pExternalFenceInfo"]);}();
}();pExternalFenceInfo=temp_smBXrcW;}();
VkExternalFenceProperties* pExternalFenceProperties
        ;
[&]() {

        if (data_json["members"]["pExternalFenceProperties"].contains("null")){
        pExternalFenceProperties=NULL;
        return;
        }
    pExternalFenceProperties=(VkExternalFenceProperties*)malloc(sizeof(VkExternalFenceProperties));
[&]() {
*(pExternalFenceProperties)=deserialize_VkExternalFenceProperties(data_json["members"]["pExternalFenceProperties"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceExternalFencePropertiesKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceExternalFencePropertiesKHR");
    }  
    
call_function(physicalDevice, pExternalFenceInfo, pExternalFenceProperties);
json result=json({});
        result["type"]="Response";
    

result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["pExternalFenceInfo"]=[&]() {
    json return_YgGWsov=json({});
    
        if (pExternalFenceInfo==NULL){
            return_YgGWsov["null"]=true;
            return return_YgGWsov;
        }
        return_YgGWsov=[&]() {
    json return_AmsvgYJ=json({});
    return serialize_VkPhysicalDeviceExternalFenceInfo(*pExternalFenceInfo);}();
return return_YgGWsov;}();
result["members"]["pExternalFenceProperties"]=[&]() {
    json return_RpWaOtS=json({});
    
        if (pExternalFenceProperties==NULL){
            return_RpWaOtS["null"]=true;
            return return_RpWaOtS;
        }
        return_RpWaOtS=[&]() {
    json return_vRnhrJR=json({});
    return serialize_VkExternalFenceProperties(*pExternalFenceProperties);}();
return return_RpWaOtS;}();

        writeToConn(result);
    }

    void handle_vkGetFenceFdKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkFenceGetFdInfoKHR* pGetFdInfo
            ;
[&]() {
VkFenceGetFdInfoKHR* temp_ioukkox;[&]() {

        if (data_json["members"]["pGetFdInfo"].contains("null")){
        temp_ioukkox=NULL;
        return;
        }
    temp_ioukkox=(VkFenceGetFdInfoKHR*)malloc(sizeof(VkFenceGetFdInfoKHR));
[&]() {
*(temp_ioukkox)=deserialize_VkFenceGetFdInfoKHR(data_json["members"]["pGetFdInfo"]);}();
}();pGetFdInfo=temp_ioukkox;}();
int* pFd
        ;
[&]() {

        if (data_json["members"]["pFd"].contains("null")){
        pFd=NULL;
        return;
        }
    pFd=(int*)malloc(sizeof(int));
[&]() {
*(pFd)=deserialize_int(data_json["members"]["pFd"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetFenceFdKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetFenceFdKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetFenceFdKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetFenceFdKHR");
    }  
    
auto return_value=call_function(device, pGetFdInfo, pFd);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_zbMvUMB=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pGetFdInfo"]=[&]() {
    json return_lsgFOxz=json({});
    
        if (pGetFdInfo==NULL){
            return_lsgFOxz["null"]=true;
            return return_lsgFOxz;
        }
        return_lsgFOxz=[&]() {
    json return_bnshtvy=json({});
    return serialize_VkFenceGetFdInfoKHR(*pGetFdInfo);}();
return return_lsgFOxz;}();
result["members"]["pFd"]=[&]() {
    json return_purnqnB=json({});
    
        if (pFd==NULL){
            return_purnqnB["null"]=true;
            return return_purnqnB;
        }
        return_purnqnB=[&]() {
    json return_ONesJYf=json({});
    return serialize_int(*pFd);}();
return return_purnqnB;}();

        writeToConn(result);
    }

    void handle_vkImportFenceFdKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkImportFenceFdInfoKHR* pImportFenceFdInfo
        ;
[&]() {
VkImportFenceFdInfoKHR* temp_fyLEItG;[&]() {

        if (data_json["members"]["pImportFenceFdInfo"].contains("null")){
        temp_fyLEItG=NULL;
        return;
        }
    temp_fyLEItG=(VkImportFenceFdInfoKHR*)malloc(sizeof(VkImportFenceFdInfoKHR));
[&]() {
*(temp_fyLEItG)=deserialize_VkImportFenceFdInfoKHR(data_json["members"]["pImportFenceFdInfo"]);}();
}();pImportFenceFdInfo=temp_fyLEItG;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkImportFenceFdKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkImportFenceFdKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkImportFenceFdKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkImportFenceFdKHR");
    }  
    
auto return_value=call_function(device, pImportFenceFdInfo);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_PmkUfAY=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pImportFenceFdInfo"]=[&]() {
    json return_XHYjhuK=json({});
    
        if (pImportFenceFdInfo==NULL){
            return_XHYjhuK["null"]=true;
            return return_XHYjhuK;
        }
        return_XHYjhuK=[&]() {
    json return_ofsLYWC=json({});
    return serialize_VkImportFenceFdInfoKHR(*pImportFenceFdInfo);}();
return return_XHYjhuK;}();

        writeToConn(result);
    }

    void handle_vkReleaseDisplayEXT(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
VkDisplayKHR display
        ;
[&]() {
display=deserialize_VkDisplayKHR(data_json["members"]["display"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkReleaseDisplayEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkReleaseDisplayEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkReleaseDisplayEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkReleaseDisplayEXT");
    }  
    
auto return_value=call_function(physicalDevice, display);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_olBiMmg=json({});
    return serialize_VkResult(return_value);}();
result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["display"]=[&]() {
    json return_iLJAKDL=json({});
    return serialize_VkDisplayKHR(display);}();

        writeToConn(result);
    }

    void handle_vkDisplayPowerControlEXT(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDisplayKHR display
            ;
[&]() {
display=deserialize_VkDisplayKHR(data_json["members"]["display"]);}();
VkDisplayPowerInfoEXT* pDisplayPowerInfo
        ;
[&]() {
VkDisplayPowerInfoEXT* temp_FYgegfp;[&]() {

        if (data_json["members"]["pDisplayPowerInfo"].contains("null")){
        temp_FYgegfp=NULL;
        return;
        }
    temp_FYgegfp=(VkDisplayPowerInfoEXT*)malloc(sizeof(VkDisplayPowerInfoEXT));
[&]() {
*(temp_FYgegfp)=deserialize_VkDisplayPowerInfoEXT(data_json["members"]["pDisplayPowerInfo"]);}();
}();pDisplayPowerInfo=temp_FYgegfp;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkDisplayPowerControlEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDisplayPowerControlEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkDisplayPowerControlEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDisplayPowerControlEXT");
    }  
    
auto return_value=call_function(device, display, pDisplayPowerInfo);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_FlYGeMZ=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["display"]=[&]() {
    json return_wRgwvSz=json({});
    return serialize_VkDisplayKHR(display);}();
result["members"]["pDisplayPowerInfo"]=[&]() {
    json return_jxnhUCX=json({});
    
        if (pDisplayPowerInfo==NULL){
            return_jxnhUCX["null"]=true;
            return return_jxnhUCX;
        }
        return_jxnhUCX=[&]() {
    json return_TZGwWTc=json({});
    return serialize_VkDisplayPowerInfoEXT(*pDisplayPowerInfo);}();
return return_jxnhUCX;}();

        writeToConn(result);
    }

    void handle_vkRegisterDeviceEventEXT(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDeviceEventInfoEXT* pDeviceEventInfo
            ;
[&]() {
VkDeviceEventInfoEXT* temp_MdJXAXG;[&]() {

        if (data_json["members"]["pDeviceEventInfo"].contains("null")){
        temp_MdJXAXG=NULL;
        return;
        }
    temp_MdJXAXG=(VkDeviceEventInfoEXT*)malloc(sizeof(VkDeviceEventInfoEXT));
[&]() {
*(temp_MdJXAXG)=deserialize_VkDeviceEventInfoEXT(data_json["members"]["pDeviceEventInfo"]);}();
}();pDeviceEventInfo=temp_MdJXAXG;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkFence* pFence
        ;
[&]() {

        if (data_json["members"]["pFence"].contains("null")){
        pFence=NULL;
        return;
        }
    pFence=(VkFence*)malloc(sizeof(VkFence));
[&]() {
*(pFence)=deserialize_VkFence(data_json["members"]["pFence"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkRegisterDeviceEventEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkRegisterDeviceEventEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkRegisterDeviceEventEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkRegisterDeviceEventEXT");
    }  
    
auto return_value=call_function(device, pDeviceEventInfo, pAllocator, pFence);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_hjYHzOd=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pDeviceEventInfo"]=[&]() {
    json return_aTybDne=json({});
    
        if (pDeviceEventInfo==NULL){
            return_aTybDne["null"]=true;
            return return_aTybDne;
        }
        return_aTybDne=[&]() {
    json return_eqskCNS=json({});
    return serialize_VkDeviceEventInfoEXT(*pDeviceEventInfo);}();
return return_aTybDne;}();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pFence"]=[&]() {
    json return_zBsTPmH=json({});
    
        if (pFence==NULL){
            return_zBsTPmH["null"]=true;
            return return_zBsTPmH;
        }
        return_zBsTPmH=[&]() {
    json return_WJcpXwr=json({});
    return serialize_VkFence(*pFence);}();
return return_zBsTPmH;}();

        writeToConn(result);
    }

    void handle_vkRegisterDisplayEventEXT(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDisplayKHR display
            ;
[&]() {
display=deserialize_VkDisplayKHR(data_json["members"]["display"]);}();
VkDisplayEventInfoEXT* pDisplayEventInfo
            ;
[&]() {
VkDisplayEventInfoEXT* temp_pJeRdtI;[&]() {

        if (data_json["members"]["pDisplayEventInfo"].contains("null")){
        temp_pJeRdtI=NULL;
        return;
        }
    temp_pJeRdtI=(VkDisplayEventInfoEXT*)malloc(sizeof(VkDisplayEventInfoEXT));
[&]() {
*(temp_pJeRdtI)=deserialize_VkDisplayEventInfoEXT(data_json["members"]["pDisplayEventInfo"]);}();
}();pDisplayEventInfo=temp_pJeRdtI;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkFence* pFence
        ;
[&]() {

        if (data_json["members"]["pFence"].contains("null")){
        pFence=NULL;
        return;
        }
    pFence=(VkFence*)malloc(sizeof(VkFence));
[&]() {
*(pFence)=deserialize_VkFence(data_json["members"]["pFence"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkRegisterDisplayEventEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkRegisterDisplayEventEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkRegisterDisplayEventEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkRegisterDisplayEventEXT");
    }  
    
auto return_value=call_function(device, display, pDisplayEventInfo, pAllocator, pFence);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_pZQgnbK=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["display"]=[&]() {
    json return_wRgwvSz=json({});
    return serialize_VkDisplayKHR(display);}();
result["members"]["pDisplayEventInfo"]=[&]() {
    json return_lXIeJaY=json({});
    
        if (pDisplayEventInfo==NULL){
            return_lXIeJaY["null"]=true;
            return return_lXIeJaY;
        }
        return_lXIeJaY=[&]() {
    json return_dBLOqbi=json({});
    return serialize_VkDisplayEventInfoEXT(*pDisplayEventInfo);}();
return return_lXIeJaY;}();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pFence"]=[&]() {
    json return_zBsTPmH=json({});
    
        if (pFence==NULL){
            return_zBsTPmH["null"]=true;
            return return_zBsTPmH;
        }
        return_zBsTPmH=[&]() {
    json return_WJcpXwr=json({});
    return serialize_VkFence(*pFence);}();
return return_zBsTPmH;}();

        writeToConn(result);
    }

    void handle_vkGetSwapchainCounterEXT(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkSwapchainKHR swapchain
            ;
[&]() {
swapchain=deserialize_VkSwapchainKHR(data_json["members"]["swapchain"]);}();
VkSurfaceCounterFlagBitsEXT counter
            ;
[&]() {
counter=deserialize_VkSurfaceCounterFlagBitsEXT(data_json["members"]["counter"]);}();
uint64_t* pCounterValue
        ;
[&]() {

        if (data_json["members"]["pCounterValue"].contains("null")){
        pCounterValue=NULL;
        return;
        }
    pCounterValue=(uint64_t*)malloc(sizeof(uint64_t));
[&]() {
*(pCounterValue)=deserialize_uint64_t(data_json["members"]["pCounterValue"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetSwapchainCounterEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetSwapchainCounterEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetSwapchainCounterEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetSwapchainCounterEXT");
    }  
    
auto return_value=call_function(device, swapchain, counter, pCounterValue);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_pwwpQIg=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["swapchain"]=[&]() {
    json return_pJrgkgd=json({});
    return serialize_VkSwapchainKHR(swapchain);}();
result["members"]["counter"]=[&]() {
    json return_XoaLHsF=json({});
    return serialize_VkSurfaceCounterFlagBitsEXT(counter);}();
result["members"]["pCounterValue"]=[&]() {
    json return_NekDqlp=json({});
    
        if (pCounterValue==NULL){
            return_NekDqlp["null"]=true;
            return return_NekDqlp;
        }
        return_NekDqlp=[&]() {
    json return_lGyozzp=json({});
    return serialize_uint64_t(*pCounterValue);}();
return return_NekDqlp;}();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceSurfaceCapabilities2EXT(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
VkSurfaceKHR surface
            ;
[&]() {
surface=deserialize_VkSurfaceKHR(data_json["members"]["surface"]);}();
VkSurfaceCapabilities2EXT* pSurfaceCapabilities
        ;
[&]() {

        if (data_json["members"]["pSurfaceCapabilities"].contains("null")){
        pSurfaceCapabilities=NULL;
        return;
        }
    pSurfaceCapabilities=(VkSurfaceCapabilities2EXT*)malloc(sizeof(VkSurfaceCapabilities2EXT));
[&]() {
*(pSurfaceCapabilities)=deserialize_VkSurfaceCapabilities2EXT(data_json["members"]["pSurfaceCapabilities"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceSurfaceCapabilities2EXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceSurfaceCapabilities2EXT");
    }  
    
auto return_value=call_function(physicalDevice, surface, pSurfaceCapabilities);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_axOcXci=json({});
    return serialize_VkResult(return_value);}();
result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["surface"]=[&]() {
    json return_pHWfgmh=json({});
    return serialize_VkSurfaceKHR(surface);}();
result["members"]["pSurfaceCapabilities"]=[&]() {
    json return_lVVGnrS=json({});
    
        if (pSurfaceCapabilities==NULL){
            return_lVVGnrS["null"]=true;
            return return_lVVGnrS;
        }
        return_lVVGnrS=[&]() {
    json return_vGrXvsb=json({});
    return serialize_VkSurfaceCapabilities2EXT(*pSurfaceCapabilities);}();
return return_lVVGnrS;}();

        writeToConn(result);
    }

    void handle_vkEnumeratePhysicalDeviceGroups(json data_json){
    //Will only be called by the server
    
VkInstance instance
            ;
[&]() {
instance=deserialize_VkInstance(data_json["members"]["instance"]);}();
uint32_t* pPhysicalDeviceGroupCount
            ;
[&]() {

        if (data_json["members"]["pPhysicalDeviceGroupCount"].contains("null")){
        pPhysicalDeviceGroupCount=NULL;
        return;
        }
    pPhysicalDeviceGroupCount=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pPhysicalDeviceGroupCount)=deserialize_uint32_t(data_json["members"]["pPhysicalDeviceGroupCount"]);}();
}();
VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties
        ;
[&]() {

        if (data_json["members"]["pPhysicalDeviceGroupProperties"].contains("null")){
        pPhysicalDeviceGroupProperties=NULL;
        return;
        }
    pPhysicalDeviceGroupProperties=(VkPhysicalDeviceGroupProperties*)malloc(*pPhysicalDeviceGroupCount*sizeof(VkPhysicalDeviceGroupProperties));
        for (int CDZYMPR=0; CDZYMPR < *pPhysicalDeviceGroupCount; CDZYMPR++){
            [&]() {
pPhysicalDeviceGroupProperties[CDZYMPR]=deserialize_VkPhysicalDeviceGroupProperties(data_json["members"]["pPhysicalDeviceGroupProperties"]["members"][CDZYMPR]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkEnumeratePhysicalDeviceGroups)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkEnumeratePhysicalDeviceGroups");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkEnumeratePhysicalDeviceGroups)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkEnumeratePhysicalDeviceGroups");
    }  
    
auto return_value=call_function(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_ZQyzodw=json({});
    return serialize_VkResult(return_value);}();
result["members"]["instance"]=[&]() {
    json return_uDnIwUL=json({});
    return serialize_VkInstance(instance);}();
result["members"]["pPhysicalDeviceGroupCount"]=[&]() {
    json return_rckhlsR=json({});
    
        if (pPhysicalDeviceGroupCount==NULL){
            return_rckhlsR["null"]=true;
            return return_rckhlsR;
        }
        return_rckhlsR=[&]() {
    json return_nUYgnis=json({});
    return serialize_uint32_t(*pPhysicalDeviceGroupCount);}();
return return_rckhlsR;}();
result["members"]["pPhysicalDeviceGroupProperties"]=[&]() {
    json return_ZCzUUyX=json({});
    
        if (pPhysicalDeviceGroupProperties==NULL){
            return_ZCzUUyX["null"]=true;
            return return_ZCzUUyX;
        }
        
        return_ZCzUUyX["members"]={};
        for(int ZCzUUyX=0; ZCzUUyX < *pPhysicalDeviceGroupCount; ZCzUUyX++){
            json temp;
            temp=[&]() {
    json return_QMtGBGd=json({});
    return serialize_VkPhysicalDeviceGroupProperties(pPhysicalDeviceGroupProperties[ZCzUUyX]);}();
            return_ZCzUUyX["members"].push_back(temp);
        }
        return return_ZCzUUyX;
        }();

        writeToConn(result);
    }

    void handle_vkEnumeratePhysicalDeviceGroupsKHR(json data_json){
    //Will only be called by the server
    
VkInstance instance
            ;
[&]() {
instance=deserialize_VkInstance(data_json["members"]["instance"]);}();
uint32_t* pPhysicalDeviceGroupCount
            ;
[&]() {

        if (data_json["members"]["pPhysicalDeviceGroupCount"].contains("null")){
        pPhysicalDeviceGroupCount=NULL;
        return;
        }
    pPhysicalDeviceGroupCount=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pPhysicalDeviceGroupCount)=deserialize_uint32_t(data_json["members"]["pPhysicalDeviceGroupCount"]);}();
}();
VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties
        ;
[&]() {

        if (data_json["members"]["pPhysicalDeviceGroupProperties"].contains("null")){
        pPhysicalDeviceGroupProperties=NULL;
        return;
        }
    pPhysicalDeviceGroupProperties=(VkPhysicalDeviceGroupProperties*)malloc(*pPhysicalDeviceGroupCount*sizeof(VkPhysicalDeviceGroupProperties));
        for (int CDZYMPR=0; CDZYMPR < *pPhysicalDeviceGroupCount; CDZYMPR++){
            [&]() {
pPhysicalDeviceGroupProperties[CDZYMPR]=deserialize_VkPhysicalDeviceGroupProperties(data_json["members"]["pPhysicalDeviceGroupProperties"]["members"][CDZYMPR]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkEnumeratePhysicalDeviceGroupsKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkEnumeratePhysicalDeviceGroupsKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkEnumeratePhysicalDeviceGroupsKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkEnumeratePhysicalDeviceGroupsKHR");
    }  
    
auto return_value=call_function(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_NqwUGxg=json({});
    return serialize_VkResult(return_value);}();
result["members"]["instance"]=[&]() {
    json return_uDnIwUL=json({});
    return serialize_VkInstance(instance);}();
result["members"]["pPhysicalDeviceGroupCount"]=[&]() {
    json return_rckhlsR=json({});
    
        if (pPhysicalDeviceGroupCount==NULL){
            return_rckhlsR["null"]=true;
            return return_rckhlsR;
        }
        return_rckhlsR=[&]() {
    json return_nUYgnis=json({});
    return serialize_uint32_t(*pPhysicalDeviceGroupCount);}();
return return_rckhlsR;}();
result["members"]["pPhysicalDeviceGroupProperties"]=[&]() {
    json return_ZCzUUyX=json({});
    
        if (pPhysicalDeviceGroupProperties==NULL){
            return_ZCzUUyX["null"]=true;
            return return_ZCzUUyX;
        }
        
        return_ZCzUUyX["members"]={};
        for(int ZCzUUyX=0; ZCzUUyX < *pPhysicalDeviceGroupCount; ZCzUUyX++){
            json temp;
            temp=[&]() {
    json return_QMtGBGd=json({});
    return serialize_VkPhysicalDeviceGroupProperties(pPhysicalDeviceGroupProperties[ZCzUUyX]);}();
            return_ZCzUUyX["members"].push_back(temp);
        }
        return return_ZCzUUyX;
        }();

        writeToConn(result);
    }

    void handle_vkGetDeviceGroupPeerMemoryFeatures(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
uint32_t heapIndex
            ;
[&]() {
heapIndex=deserialize_uint32_t(data_json["members"]["heapIndex"]);}();
uint32_t localDeviceIndex
            ;
[&]() {
localDeviceIndex=deserialize_uint32_t(data_json["members"]["localDeviceIndex"]);}();
uint32_t remoteDeviceIndex
            ;
[&]() {
remoteDeviceIndex=deserialize_uint32_t(data_json["members"]["remoteDeviceIndex"]);}();
VkPeerMemoryFeatureFlags* pPeerMemoryFeatures
        ;
[&]() {

        if (data_json["members"]["pPeerMemoryFeatures"].contains("null")){
        pPeerMemoryFeatures=NULL;
        return;
        }
    pPeerMemoryFeatures=(VkPeerMemoryFeatureFlags*)malloc(sizeof(VkPeerMemoryFeatureFlags));
[&]() {
*(pPeerMemoryFeatures)=deserialize_VkPeerMemoryFeatureFlags(data_json["members"]["pPeerMemoryFeatures"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetDeviceGroupPeerMemoryFeatures)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDeviceGroupPeerMemoryFeatures");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetDeviceGroupPeerMemoryFeatures)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDeviceGroupPeerMemoryFeatures");
    }  
    
call_function(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["heapIndex"]=[&]() {
    json return_dCXMENZ=json({});
    return serialize_uint32_t(heapIndex);}();
result["members"]["localDeviceIndex"]=[&]() {
    json return_EaAFmUr=json({});
    return serialize_uint32_t(localDeviceIndex);}();
result["members"]["remoteDeviceIndex"]=[&]() {
    json return_JGKeMlP=json({});
    return serialize_uint32_t(remoteDeviceIndex);}();
result["members"]["pPeerMemoryFeatures"]=[&]() {
    json return_BeDVtEx=json({});
    
        if (pPeerMemoryFeatures==NULL){
            return_BeDVtEx["null"]=true;
            return return_BeDVtEx;
        }
        return_BeDVtEx=[&]() {
    json return_PPthqkz=json({});
    return serialize_VkPeerMemoryFeatureFlags(*pPeerMemoryFeatures);}();
return return_BeDVtEx;}();

        writeToConn(result);
    }

    void handle_vkGetDeviceGroupPeerMemoryFeaturesKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
uint32_t heapIndex
            ;
[&]() {
heapIndex=deserialize_uint32_t(data_json["members"]["heapIndex"]);}();
uint32_t localDeviceIndex
            ;
[&]() {
localDeviceIndex=deserialize_uint32_t(data_json["members"]["localDeviceIndex"]);}();
uint32_t remoteDeviceIndex
            ;
[&]() {
remoteDeviceIndex=deserialize_uint32_t(data_json["members"]["remoteDeviceIndex"]);}();
VkPeerMemoryFeatureFlags* pPeerMemoryFeatures
        ;
[&]() {

        if (data_json["members"]["pPeerMemoryFeatures"].contains("null")){
        pPeerMemoryFeatures=NULL;
        return;
        }
    pPeerMemoryFeatures=(VkPeerMemoryFeatureFlags*)malloc(sizeof(VkPeerMemoryFeatureFlags));
[&]() {
*(pPeerMemoryFeatures)=deserialize_VkPeerMemoryFeatureFlags(data_json["members"]["pPeerMemoryFeatures"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDeviceGroupPeerMemoryFeaturesKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDeviceGroupPeerMemoryFeaturesKHR");
    }  
    
call_function(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["heapIndex"]=[&]() {
    json return_dCXMENZ=json({});
    return serialize_uint32_t(heapIndex);}();
result["members"]["localDeviceIndex"]=[&]() {
    json return_EaAFmUr=json({});
    return serialize_uint32_t(localDeviceIndex);}();
result["members"]["remoteDeviceIndex"]=[&]() {
    json return_JGKeMlP=json({});
    return serialize_uint32_t(remoteDeviceIndex);}();
result["members"]["pPeerMemoryFeatures"]=[&]() {
    json return_BeDVtEx=json({});
    
        if (pPeerMemoryFeatures==NULL){
            return_BeDVtEx["null"]=true;
            return return_BeDVtEx;
        }
        return_BeDVtEx=[&]() {
    json return_PPthqkz=json({});
    return serialize_VkPeerMemoryFeatureFlags(*pPeerMemoryFeatures);}();
return return_BeDVtEx;}();

        writeToConn(result);
    }

    void handle_vkBindBufferMemory2(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
uint32_t bindInfoCount
            ;
[&]() {
bindInfoCount=deserialize_uint32_t(data_json["members"]["bindInfoCount"]);}();
VkBindBufferMemoryInfo* pBindInfos
        ;
[&]() {
VkBindBufferMemoryInfo* temp_iAygGbe;[&]() {

        if (data_json["members"]["pBindInfos"].contains("null")){
        temp_iAygGbe=NULL;
        return;
        }
    temp_iAygGbe=(VkBindBufferMemoryInfo*)malloc(bindInfoCount*sizeof(VkBindBufferMemoryInfo));
        for (int YaXtRFN=0; YaXtRFN < bindInfoCount; YaXtRFN++){
            [&]() {
temp_iAygGbe[YaXtRFN]=deserialize_VkBindBufferMemoryInfo(data_json["members"]["pBindInfos"]["members"][YaXtRFN]);}();;
        }
        }();pBindInfos=temp_iAygGbe;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkBindBufferMemory2)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkBindBufferMemory2");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkBindBufferMemory2)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkBindBufferMemory2");
    }  
    
auto return_value=call_function(device, bindInfoCount, pBindInfos);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_seAEaxi=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["bindInfoCount"]=[&]() {
    json return_nEBKnUd=json({});
    return serialize_uint32_t(bindInfoCount);}();
result["members"]["pBindInfos"]=[&]() {
    json return_ceTTvTZ=json({});
    
        if (pBindInfos==NULL){
            return_ceTTvTZ["null"]=true;
            return return_ceTTvTZ;
        }
        
        return_ceTTvTZ["members"]={};
        for(int ceTTvTZ=0; ceTTvTZ < bindInfoCount; ceTTvTZ++){
            json temp;
            temp=[&]() {
    json return_QoLuBuw=json({});
    return serialize_VkBindBufferMemoryInfo(pBindInfos[ceTTvTZ]);}();
            return_ceTTvTZ["members"].push_back(temp);
        }
        return return_ceTTvTZ;
        }();

        writeToConn(result);
    }

    void handle_vkBindBufferMemory2KHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
uint32_t bindInfoCount
            ;
[&]() {
bindInfoCount=deserialize_uint32_t(data_json["members"]["bindInfoCount"]);}();
VkBindBufferMemoryInfo* pBindInfos
        ;
[&]() {
VkBindBufferMemoryInfo* temp_iAygGbe;[&]() {

        if (data_json["members"]["pBindInfos"].contains("null")){
        temp_iAygGbe=NULL;
        return;
        }
    temp_iAygGbe=(VkBindBufferMemoryInfo*)malloc(bindInfoCount*sizeof(VkBindBufferMemoryInfo));
        for (int YaXtRFN=0; YaXtRFN < bindInfoCount; YaXtRFN++){
            [&]() {
temp_iAygGbe[YaXtRFN]=deserialize_VkBindBufferMemoryInfo(data_json["members"]["pBindInfos"]["members"][YaXtRFN]);}();;
        }
        }();pBindInfos=temp_iAygGbe;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkBindBufferMemory2KHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkBindBufferMemory2KHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkBindBufferMemory2KHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkBindBufferMemory2KHR");
    }  
    
auto return_value=call_function(device, bindInfoCount, pBindInfos);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_zxFMCay=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["bindInfoCount"]=[&]() {
    json return_nEBKnUd=json({});
    return serialize_uint32_t(bindInfoCount);}();
result["members"]["pBindInfos"]=[&]() {
    json return_ceTTvTZ=json({});
    
        if (pBindInfos==NULL){
            return_ceTTvTZ["null"]=true;
            return return_ceTTvTZ;
        }
        
        return_ceTTvTZ["members"]={};
        for(int ceTTvTZ=0; ceTTvTZ < bindInfoCount; ceTTvTZ++){
            json temp;
            temp=[&]() {
    json return_QoLuBuw=json({});
    return serialize_VkBindBufferMemoryInfo(pBindInfos[ceTTvTZ]);}();
            return_ceTTvTZ["members"].push_back(temp);
        }
        return return_ceTTvTZ;
        }();

        writeToConn(result);
    }

    void handle_vkBindImageMemory2(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
uint32_t bindInfoCount
            ;
[&]() {
bindInfoCount=deserialize_uint32_t(data_json["members"]["bindInfoCount"]);}();
VkBindImageMemoryInfo* pBindInfos
        ;
[&]() {
VkBindImageMemoryInfo* temp_KigsdDE;[&]() {

        if (data_json["members"]["pBindInfos"].contains("null")){
        temp_KigsdDE=NULL;
        return;
        }
    temp_KigsdDE=(VkBindImageMemoryInfo*)malloc(bindInfoCount*sizeof(VkBindImageMemoryInfo));
        for (int ZtXlOnn=0; ZtXlOnn < bindInfoCount; ZtXlOnn++){
            [&]() {
temp_KigsdDE[ZtXlOnn]=deserialize_VkBindImageMemoryInfo(data_json["members"]["pBindInfos"]["members"][ZtXlOnn]);}();;
        }
        }();pBindInfos=temp_KigsdDE;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkBindImageMemory2)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkBindImageMemory2");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkBindImageMemory2)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkBindImageMemory2");
    }  
    
auto return_value=call_function(device, bindInfoCount, pBindInfos);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_cobxXde=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["bindInfoCount"]=[&]() {
    json return_nEBKnUd=json({});
    return serialize_uint32_t(bindInfoCount);}();
result["members"]["pBindInfos"]=[&]() {
    json return_JFDeQkX=json({});
    
        if (pBindInfos==NULL){
            return_JFDeQkX["null"]=true;
            return return_JFDeQkX;
        }
        
        return_JFDeQkX["members"]={};
        for(int JFDeQkX=0; JFDeQkX < bindInfoCount; JFDeQkX++){
            json temp;
            temp=[&]() {
    json return_NMwMEVF=json({});
    return serialize_VkBindImageMemoryInfo(pBindInfos[JFDeQkX]);}();
            return_JFDeQkX["members"].push_back(temp);
        }
        return return_JFDeQkX;
        }();

        writeToConn(result);
    }

    void handle_vkBindImageMemory2KHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
uint32_t bindInfoCount
            ;
[&]() {
bindInfoCount=deserialize_uint32_t(data_json["members"]["bindInfoCount"]);}();
VkBindImageMemoryInfo* pBindInfos
        ;
[&]() {
VkBindImageMemoryInfo* temp_KigsdDE;[&]() {

        if (data_json["members"]["pBindInfos"].contains("null")){
        temp_KigsdDE=NULL;
        return;
        }
    temp_KigsdDE=(VkBindImageMemoryInfo*)malloc(bindInfoCount*sizeof(VkBindImageMemoryInfo));
        for (int ZtXlOnn=0; ZtXlOnn < bindInfoCount; ZtXlOnn++){
            [&]() {
temp_KigsdDE[ZtXlOnn]=deserialize_VkBindImageMemoryInfo(data_json["members"]["pBindInfos"]["members"][ZtXlOnn]);}();;
        }
        }();pBindInfos=temp_KigsdDE;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkBindImageMemory2KHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkBindImageMemory2KHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkBindImageMemory2KHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkBindImageMemory2KHR");
    }  
    
auto return_value=call_function(device, bindInfoCount, pBindInfos);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_CWRjIRn=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["bindInfoCount"]=[&]() {
    json return_nEBKnUd=json({});
    return serialize_uint32_t(bindInfoCount);}();
result["members"]["pBindInfos"]=[&]() {
    json return_JFDeQkX=json({});
    
        if (pBindInfos==NULL){
            return_JFDeQkX["null"]=true;
            return return_JFDeQkX;
        }
        
        return_JFDeQkX["members"]={};
        for(int JFDeQkX=0; JFDeQkX < bindInfoCount; JFDeQkX++){
            json temp;
            temp=[&]() {
    json return_NMwMEVF=json({});
    return serialize_VkBindImageMemoryInfo(pBindInfos[JFDeQkX]);}();
            return_JFDeQkX["members"].push_back(temp);
        }
        return return_JFDeQkX;
        }();

        writeToConn(result);
    }

    void handle_vkCmdSetDeviceMask(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t deviceMask
        ;
[&]() {
deviceMask=deserialize_uint32_t(data_json["members"]["deviceMask"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetDeviceMask)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetDeviceMask");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetDeviceMask)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetDeviceMask");
    }  
    
call_function(commandBuffer, deviceMask);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["deviceMask"]=[&]() {
    json return_AVXudcw=json({});
    return serialize_uint32_t(deviceMask);}();

        writeToConn(result);
    }

    void handle_vkCmdSetDeviceMaskKHR(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t deviceMask
        ;
[&]() {
deviceMask=deserialize_uint32_t(data_json["members"]["deviceMask"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetDeviceMaskKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetDeviceMaskKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetDeviceMaskKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetDeviceMaskKHR");
    }  
    
call_function(commandBuffer, deviceMask);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["deviceMask"]=[&]() {
    json return_AVXudcw=json({});
    return serialize_uint32_t(deviceMask);}();

        writeToConn(result);
    }

    void handle_vkGetDeviceGroupPresentCapabilitiesKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities
        ;
[&]() {

        if (data_json["members"]["pDeviceGroupPresentCapabilities"].contains("null")){
        pDeviceGroupPresentCapabilities=NULL;
        return;
        }
    pDeviceGroupPresentCapabilities=(VkDeviceGroupPresentCapabilitiesKHR*)malloc(sizeof(VkDeviceGroupPresentCapabilitiesKHR));
[&]() {
*(pDeviceGroupPresentCapabilities)=deserialize_VkDeviceGroupPresentCapabilitiesKHR(data_json["members"]["pDeviceGroupPresentCapabilities"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetDeviceGroupPresentCapabilitiesKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDeviceGroupPresentCapabilitiesKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetDeviceGroupPresentCapabilitiesKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDeviceGroupPresentCapabilitiesKHR");
    }  
    
auto return_value=call_function(device, pDeviceGroupPresentCapabilities);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_DUYxcBV=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pDeviceGroupPresentCapabilities"]=[&]() {
    json return_dljCelU=json({});
    
        if (pDeviceGroupPresentCapabilities==NULL){
            return_dljCelU["null"]=true;
            return return_dljCelU;
        }
        return_dljCelU=[&]() {
    json return_UrpHRQN=json({});
    return serialize_VkDeviceGroupPresentCapabilitiesKHR(*pDeviceGroupPresentCapabilities);}();
return return_dljCelU;}();

        writeToConn(result);
    }

    void handle_vkGetDeviceGroupSurfacePresentModesKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkSurfaceKHR surface
            ;
[&]() {
surface=deserialize_VkSurfaceKHR(data_json["members"]["surface"]);}();
VkDeviceGroupPresentModeFlagsKHR* pModes
        ;
[&]() {

        if (data_json["members"]["pModes"].contains("null")){
        pModes=NULL;
        return;
        }
    pModes=(VkDeviceGroupPresentModeFlagsKHR*)malloc(sizeof(VkDeviceGroupPresentModeFlagsKHR));
[&]() {
*(pModes)=deserialize_VkDeviceGroupPresentModeFlagsKHR(data_json["members"]["pModes"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetDeviceGroupSurfacePresentModesKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDeviceGroupSurfacePresentModesKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetDeviceGroupSurfacePresentModesKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDeviceGroupSurfacePresentModesKHR");
    }  
    
auto return_value=call_function(device, surface, pModes);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_FzhcczT=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["surface"]=[&]() {
    json return_pHWfgmh=json({});
    return serialize_VkSurfaceKHR(surface);}();
result["members"]["pModes"]=[&]() {
    json return_eSGSKjz=json({});
    
        if (pModes==NULL){
            return_eSGSKjz["null"]=true;
            return return_eSGSKjz;
        }
        return_eSGSKjz=[&]() {
    json return_nTCRZmH=json({});
    return serialize_VkDeviceGroupPresentModeFlagsKHR(*pModes);}();
return return_eSGSKjz;}();

        writeToConn(result);
    }

    void handle_vkAcquireNextImage2KHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkAcquireNextImageInfoKHR* pAcquireInfo
            ;
[&]() {
VkAcquireNextImageInfoKHR* temp_BIhpHKr;[&]() {

        if (data_json["members"]["pAcquireInfo"].contains("null")){
        temp_BIhpHKr=NULL;
        return;
        }
    temp_BIhpHKr=(VkAcquireNextImageInfoKHR*)malloc(sizeof(VkAcquireNextImageInfoKHR));
[&]() {
*(temp_BIhpHKr)=deserialize_VkAcquireNextImageInfoKHR(data_json["members"]["pAcquireInfo"]);}();
}();pAcquireInfo=temp_BIhpHKr;}();
uint32_t* pImageIndex
        ;
[&]() {

        if (data_json["members"]["pImageIndex"].contains("null")){
        pImageIndex=NULL;
        return;
        }
    pImageIndex=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pImageIndex)=deserialize_uint32_t(data_json["members"]["pImageIndex"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkAcquireNextImage2KHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkAcquireNextImage2KHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkAcquireNextImage2KHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkAcquireNextImage2KHR");
    }  
    
auto return_value=call_function(device, pAcquireInfo, pImageIndex);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_nnZNndr=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pAcquireInfo"]=[&]() {
    json return_HPTwCeq=json({});
    
        if (pAcquireInfo==NULL){
            return_HPTwCeq["null"]=true;
            return return_HPTwCeq;
        }
        return_HPTwCeq=[&]() {
    json return_rKKlAZI=json({});
    return serialize_VkAcquireNextImageInfoKHR(*pAcquireInfo);}();
return return_HPTwCeq;}();
result["members"]["pImageIndex"]=[&]() {
    json return_wAoznVg=json({});
    
        if (pImageIndex==NULL){
            return_wAoznVg["null"]=true;
            return return_wAoznVg;
        }
        return_wAoznVg=[&]() {
    json return_flfHmxH=json({});
    return serialize_uint32_t(*pImageIndex);}();
return return_wAoznVg;}();

        writeToConn(result);
    }

    void handle_vkCmdDispatchBase(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t baseGroupX
            ;
[&]() {
baseGroupX=deserialize_uint32_t(data_json["members"]["baseGroupX"]);}();
uint32_t baseGroupY
            ;
[&]() {
baseGroupY=deserialize_uint32_t(data_json["members"]["baseGroupY"]);}();
uint32_t baseGroupZ
            ;
[&]() {
baseGroupZ=deserialize_uint32_t(data_json["members"]["baseGroupZ"]);}();
uint32_t groupCountX
            ;
[&]() {
groupCountX=deserialize_uint32_t(data_json["members"]["groupCountX"]);}();
uint32_t groupCountY
            ;
[&]() {
groupCountY=deserialize_uint32_t(data_json["members"]["groupCountY"]);}();
uint32_t groupCountZ
        ;
[&]() {
groupCountZ=deserialize_uint32_t(data_json["members"]["groupCountZ"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdDispatchBase)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDispatchBase");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdDispatchBase)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDispatchBase");
    }  
    
call_function(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["baseGroupX"]=[&]() {
    json return_JCJCWCu=json({});
    return serialize_uint32_t(baseGroupX);}();
result["members"]["baseGroupY"]=[&]() {
    json return_mKAghTp=json({});
    return serialize_uint32_t(baseGroupY);}();
result["members"]["baseGroupZ"]=[&]() {
    json return_ddpFUZV=json({});
    return serialize_uint32_t(baseGroupZ);}();
result["members"]["groupCountX"]=[&]() {
    json return_BCsqVBT=json({});
    return serialize_uint32_t(groupCountX);}();
result["members"]["groupCountY"]=[&]() {
    json return_PuRhYIE=json({});
    return serialize_uint32_t(groupCountY);}();
result["members"]["groupCountZ"]=[&]() {
    json return_OaBSWyk=json({});
    return serialize_uint32_t(groupCountZ);}();

        writeToConn(result);
    }

    void handle_vkCmdDispatchBaseKHR(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t baseGroupX
            ;
[&]() {
baseGroupX=deserialize_uint32_t(data_json["members"]["baseGroupX"]);}();
uint32_t baseGroupY
            ;
[&]() {
baseGroupY=deserialize_uint32_t(data_json["members"]["baseGroupY"]);}();
uint32_t baseGroupZ
            ;
[&]() {
baseGroupZ=deserialize_uint32_t(data_json["members"]["baseGroupZ"]);}();
uint32_t groupCountX
            ;
[&]() {
groupCountX=deserialize_uint32_t(data_json["members"]["groupCountX"]);}();
uint32_t groupCountY
            ;
[&]() {
groupCountY=deserialize_uint32_t(data_json["members"]["groupCountY"]);}();
uint32_t groupCountZ
        ;
[&]() {
groupCountZ=deserialize_uint32_t(data_json["members"]["groupCountZ"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdDispatchBaseKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDispatchBaseKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdDispatchBaseKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDispatchBaseKHR");
    }  
    
call_function(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["baseGroupX"]=[&]() {
    json return_JCJCWCu=json({});
    return serialize_uint32_t(baseGroupX);}();
result["members"]["baseGroupY"]=[&]() {
    json return_mKAghTp=json({});
    return serialize_uint32_t(baseGroupY);}();
result["members"]["baseGroupZ"]=[&]() {
    json return_ddpFUZV=json({});
    return serialize_uint32_t(baseGroupZ);}();
result["members"]["groupCountX"]=[&]() {
    json return_BCsqVBT=json({});
    return serialize_uint32_t(groupCountX);}();
result["members"]["groupCountY"]=[&]() {
    json return_PuRhYIE=json({});
    return serialize_uint32_t(groupCountY);}();
result["members"]["groupCountZ"]=[&]() {
    json return_OaBSWyk=json({});
    return serialize_uint32_t(groupCountZ);}();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDevicePresentRectanglesKHR(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
VkSurfaceKHR surface
            ;
[&]() {
surface=deserialize_VkSurfaceKHR(data_json["members"]["surface"]);}();
uint32_t* pRectCount
            ;
[&]() {

        if (data_json["members"]["pRectCount"].contains("null")){
        pRectCount=NULL;
        return;
        }
    pRectCount=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pRectCount)=deserialize_uint32_t(data_json["members"]["pRectCount"]);}();
}();
VkRect2D* pRects
        ;
[&]() {

        if (data_json["members"]["pRects"].contains("null")){
        pRects=NULL;
        return;
        }
    pRects=(VkRect2D*)malloc(*pRectCount*sizeof(VkRect2D));
        for (int CdGhzqR=0; CdGhzqR < *pRectCount; CdGhzqR++){
            [&]() {
pRects[CdGhzqR]=deserialize_VkRect2D(data_json["members"]["pRects"]["members"][CdGhzqR]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDevicePresentRectanglesKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDevicePresentRectanglesKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDevicePresentRectanglesKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDevicePresentRectanglesKHR");
    }  
    
auto return_value=call_function(physicalDevice, surface, pRectCount, pRects);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_QFIyNnK=json({});
    return serialize_VkResult(return_value);}();
result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["surface"]=[&]() {
    json return_pHWfgmh=json({});
    return serialize_VkSurfaceKHR(surface);}();
result["members"]["pRectCount"]=[&]() {
    json return_qXTpPvD=json({});
    
        if (pRectCount==NULL){
            return_qXTpPvD["null"]=true;
            return return_qXTpPvD;
        }
        return_qXTpPvD=[&]() {
    json return_lpjtWNe=json({});
    return serialize_uint32_t(*pRectCount);}();
return return_qXTpPvD;}();
result["members"]["pRects"]=[&]() {
    json return_DcRxHgA=json({});
    
        if (pRects==NULL){
            return_DcRxHgA["null"]=true;
            return return_DcRxHgA;
        }
        
        return_DcRxHgA["members"]={};
        for(int DcRxHgA=0; DcRxHgA < *pRectCount; DcRxHgA++){
            json temp;
            temp=[&]() {
    json return_WVICqte=json({});
    return serialize_VkRect2D(pRects[DcRxHgA]);}();
            return_DcRxHgA["members"].push_back(temp);
        }
        return return_DcRxHgA;
        }();

        writeToConn(result);
    }

    void handle_vkCreateDescriptorUpdateTemplate(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDescriptorUpdateTemplateCreateInfo* pCreateInfo
            ;
[&]() {
VkDescriptorUpdateTemplateCreateInfo* temp_ezczMTa;[&]() {

        if (data_json["members"]["pCreateInfo"].contains("null")){
        temp_ezczMTa=NULL;
        return;
        }
    temp_ezczMTa=(VkDescriptorUpdateTemplateCreateInfo*)malloc(sizeof(VkDescriptorUpdateTemplateCreateInfo));
[&]() {
*(temp_ezczMTa)=deserialize_VkDescriptorUpdateTemplateCreateInfo(data_json["members"]["pCreateInfo"]);}();
}();pCreateInfo=temp_ezczMTa;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate
        ;
[&]() {

        if (data_json["members"]["pDescriptorUpdateTemplate"].contains("null")){
        pDescriptorUpdateTemplate=NULL;
        return;
        }
    pDescriptorUpdateTemplate=(VkDescriptorUpdateTemplate*)malloc(sizeof(VkDescriptorUpdateTemplate));
[&]() {
*(pDescriptorUpdateTemplate)=deserialize_VkDescriptorUpdateTemplate(data_json["members"]["pDescriptorUpdateTemplate"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreateDescriptorUpdateTemplate)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateDescriptorUpdateTemplate");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreateDescriptorUpdateTemplate)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateDescriptorUpdateTemplate");
    }  
    
auto return_value=call_function(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_cXHfeES=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pCreateInfo"]=[&]() {
    json return_hTQEFse=json({});
    
        if (pCreateInfo==NULL){
            return_hTQEFse["null"]=true;
            return return_hTQEFse;
        }
        return_hTQEFse=[&]() {
    json return_yhilPlm=json({});
    return serialize_VkDescriptorUpdateTemplateCreateInfo(*pCreateInfo);}();
return return_hTQEFse;}();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pDescriptorUpdateTemplate"]=[&]() {
    json return_gtnBaaU=json({});
    
        if (pDescriptorUpdateTemplate==NULL){
            return_gtnBaaU["null"]=true;
            return return_gtnBaaU;
        }
        return_gtnBaaU=[&]() {
    json return_niXXoRW=json({});
    return serialize_VkDescriptorUpdateTemplate(*pDescriptorUpdateTemplate);}();
return return_gtnBaaU;}();

        writeToConn(result);
    }

    void handle_vkCreateDescriptorUpdateTemplateKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDescriptorUpdateTemplateCreateInfo* pCreateInfo
            ;
[&]() {
VkDescriptorUpdateTemplateCreateInfo* temp_ezczMTa;[&]() {

        if (data_json["members"]["pCreateInfo"].contains("null")){
        temp_ezczMTa=NULL;
        return;
        }
    temp_ezczMTa=(VkDescriptorUpdateTemplateCreateInfo*)malloc(sizeof(VkDescriptorUpdateTemplateCreateInfo));
[&]() {
*(temp_ezczMTa)=deserialize_VkDescriptorUpdateTemplateCreateInfo(data_json["members"]["pCreateInfo"]);}();
}();pCreateInfo=temp_ezczMTa;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate
        ;
[&]() {

        if (data_json["members"]["pDescriptorUpdateTemplate"].contains("null")){
        pDescriptorUpdateTemplate=NULL;
        return;
        }
    pDescriptorUpdateTemplate=(VkDescriptorUpdateTemplate*)malloc(sizeof(VkDescriptorUpdateTemplate));
[&]() {
*(pDescriptorUpdateTemplate)=deserialize_VkDescriptorUpdateTemplate(data_json["members"]["pDescriptorUpdateTemplate"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreateDescriptorUpdateTemplateKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateDescriptorUpdateTemplateKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreateDescriptorUpdateTemplateKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateDescriptorUpdateTemplateKHR");
    }  
    
auto return_value=call_function(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_nKlbiVY=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pCreateInfo"]=[&]() {
    json return_hTQEFse=json({});
    
        if (pCreateInfo==NULL){
            return_hTQEFse["null"]=true;
            return return_hTQEFse;
        }
        return_hTQEFse=[&]() {
    json return_yhilPlm=json({});
    return serialize_VkDescriptorUpdateTemplateCreateInfo(*pCreateInfo);}();
return return_hTQEFse;}();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pDescriptorUpdateTemplate"]=[&]() {
    json return_gtnBaaU=json({});
    
        if (pDescriptorUpdateTemplate==NULL){
            return_gtnBaaU["null"]=true;
            return return_gtnBaaU;
        }
        return_gtnBaaU=[&]() {
    json return_niXXoRW=json({});
    return serialize_VkDescriptorUpdateTemplate(*pDescriptorUpdateTemplate);}();
return return_gtnBaaU;}();

        writeToConn(result);
    }

    void handle_vkDestroyDescriptorUpdateTemplate(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDescriptorUpdateTemplate descriptorUpdateTemplate
            ;
[&]() {
descriptorUpdateTemplate=deserialize_VkDescriptorUpdateTemplate(data_json["members"]["descriptorUpdateTemplate"]);}();
VkAllocationCallbacks* pAllocator
        ;
[&]() {
VkAllocationCallbacks* temp_VAmhMvJ;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_VAmhMvJ=NULL;
        return;
        }
    temp_VAmhMvJ=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_VAmhMvJ)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_VAmhMvJ;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkDestroyDescriptorUpdateTemplate)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyDescriptorUpdateTemplate");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkDestroyDescriptorUpdateTemplate)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyDescriptorUpdateTemplate");
    }  
    
call_function(device, descriptorUpdateTemplate, pAllocator);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["descriptorUpdateTemplate"]=[&]() {
    json return_PlwoVFz=json({});
    return serialize_VkDescriptorUpdateTemplate(descriptorUpdateTemplate);}();
result["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();

        writeToConn(result);
    }

    void handle_vkDestroyDescriptorUpdateTemplateKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDescriptorUpdateTemplate descriptorUpdateTemplate
            ;
[&]() {
descriptorUpdateTemplate=deserialize_VkDescriptorUpdateTemplate(data_json["members"]["descriptorUpdateTemplate"]);}();
VkAllocationCallbacks* pAllocator
        ;
[&]() {
VkAllocationCallbacks* temp_VAmhMvJ;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_VAmhMvJ=NULL;
        return;
        }
    temp_VAmhMvJ=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_VAmhMvJ)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_VAmhMvJ;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkDestroyDescriptorUpdateTemplateKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyDescriptorUpdateTemplateKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkDestroyDescriptorUpdateTemplateKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyDescriptorUpdateTemplateKHR");
    }  
    
call_function(device, descriptorUpdateTemplate, pAllocator);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["descriptorUpdateTemplate"]=[&]() {
    json return_PlwoVFz=json({});
    return serialize_VkDescriptorUpdateTemplate(descriptorUpdateTemplate);}();
result["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();

        writeToConn(result);
    }

    void handle_vkUpdateDescriptorSetWithTemplate(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDescriptorSet descriptorSet
            ;
[&]() {
descriptorSet=deserialize_VkDescriptorSet(data_json["members"]["descriptorSet"]);}();
VkDescriptorUpdateTemplate descriptorUpdateTemplate
            ;
[&]() {
descriptorUpdateTemplate=deserialize_VkDescriptorUpdateTemplate(data_json["members"]["descriptorUpdateTemplate"]);}();
void* pData
        ;
[&]() {
void* temp_ZfOKPBK;[&]() {

        if (data_json["members"]["pData"].contains("null")){
        temp_ZfOKPBK=NULL;
        return;
        }
    temp_ZfOKPBK=deserialize_void_p(data_json["members"]["pData"]);
}();pData=temp_ZfOKPBK;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkUpdateDescriptorSetWithTemplate)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkUpdateDescriptorSetWithTemplate");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkUpdateDescriptorSetWithTemplate)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkUpdateDescriptorSetWithTemplate");
    }  
    
call_function(device, descriptorSet, descriptorUpdateTemplate, pData);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["descriptorSet"]=[&]() {
    json return_BDcvznl=json({});
    return serialize_VkDescriptorSet(descriptorSet);}();
result["members"]["descriptorUpdateTemplate"]=[&]() {
    json return_PlwoVFz=json({});
    return serialize_VkDescriptorUpdateTemplate(descriptorUpdateTemplate);}();
result["members"]["pData"]=[&]() {
    json return_WJrszUi=json({});
    
        if (pData==NULL){
            return_WJrszUi["null"]=true;
            return return_WJrszUi;
        }
        return serialize_void_p(pData);
}();

        writeToConn(result);
    }

    void handle_vkUpdateDescriptorSetWithTemplateKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDescriptorSet descriptorSet
            ;
[&]() {
descriptorSet=deserialize_VkDescriptorSet(data_json["members"]["descriptorSet"]);}();
VkDescriptorUpdateTemplate descriptorUpdateTemplate
            ;
[&]() {
descriptorUpdateTemplate=deserialize_VkDescriptorUpdateTemplate(data_json["members"]["descriptorUpdateTemplate"]);}();
void* pData
        ;
[&]() {
void* temp_ZfOKPBK;[&]() {

        if (data_json["members"]["pData"].contains("null")){
        temp_ZfOKPBK=NULL;
        return;
        }
    temp_ZfOKPBK=deserialize_void_p(data_json["members"]["pData"]);
}();pData=temp_ZfOKPBK;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkUpdateDescriptorSetWithTemplateKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkUpdateDescriptorSetWithTemplateKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkUpdateDescriptorSetWithTemplateKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkUpdateDescriptorSetWithTemplateKHR");
    }  
    
call_function(device, descriptorSet, descriptorUpdateTemplate, pData);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["descriptorSet"]=[&]() {
    json return_BDcvznl=json({});
    return serialize_VkDescriptorSet(descriptorSet);}();
result["members"]["descriptorUpdateTemplate"]=[&]() {
    json return_PlwoVFz=json({});
    return serialize_VkDescriptorUpdateTemplate(descriptorUpdateTemplate);}();
result["members"]["pData"]=[&]() {
    json return_WJrszUi=json({});
    
        if (pData==NULL){
            return_WJrszUi["null"]=true;
            return return_WJrszUi;
        }
        return serialize_void_p(pData);
}();

        writeToConn(result);
    }

    void handle_vkCmdPushDescriptorSetWithTemplateKHR(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkDescriptorUpdateTemplate descriptorUpdateTemplate
            ;
[&]() {
descriptorUpdateTemplate=deserialize_VkDescriptorUpdateTemplate(data_json["members"]["descriptorUpdateTemplate"]);}();
VkPipelineLayout layout
            ;
[&]() {
layout=deserialize_VkPipelineLayout(data_json["members"]["layout"]);}();
uint32_t set
            ;
[&]() {
set=deserialize_uint32_t(data_json["members"]["set"]);}();
void* pData
        ;
[&]() {
void* temp_ZfOKPBK;[&]() {

        if (data_json["members"]["pData"].contains("null")){
        temp_ZfOKPBK=NULL;
        return;
        }
    temp_ZfOKPBK=deserialize_void_p(data_json["members"]["pData"]);
}();pData=temp_ZfOKPBK;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdPushDescriptorSetWithTemplateKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdPushDescriptorSetWithTemplateKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdPushDescriptorSetWithTemplateKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdPushDescriptorSetWithTemplateKHR");
    }  
    
call_function(commandBuffer, descriptorUpdateTemplate, layout, set, pData);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["descriptorUpdateTemplate"]=[&]() {
    json return_PlwoVFz=json({});
    return serialize_VkDescriptorUpdateTemplate(descriptorUpdateTemplate);}();
result["members"]["layout"]=[&]() {
    json return_PdiawKY=json({});
    return serialize_VkPipelineLayout(layout);}();
result["members"]["set"]=[&]() {
    json return_GklIuIu=json({});
    return serialize_uint32_t(set);}();
result["members"]["pData"]=[&]() {
    json return_WJrszUi=json({});
    
        if (pData==NULL){
            return_WJrszUi["null"]=true;
            return return_WJrszUi;
        }
        return serialize_void_p(pData);
}();

        writeToConn(result);
    }

    void handle_vkSetHdrMetadataEXT(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
uint32_t swapchainCount
            ;
[&]() {
swapchainCount=deserialize_uint32_t(data_json["members"]["swapchainCount"]);}();
VkSwapchainKHR* pSwapchains
            ;
[&]() {
VkSwapchainKHR* temp_WHUKAjn;[&]() {

        if (data_json["members"]["pSwapchains"].contains("null")){
        temp_WHUKAjn=NULL;
        return;
        }
    temp_WHUKAjn=(VkSwapchainKHR*)malloc(swapchainCount*sizeof(VkSwapchainKHR));
        for (int uJGumHd=0; uJGumHd < swapchainCount; uJGumHd++){
            [&]() {
temp_WHUKAjn[uJGumHd]=deserialize_VkSwapchainKHR(data_json["members"]["pSwapchains"]["members"][uJGumHd]);}();;
        }
        }();pSwapchains=temp_WHUKAjn;}();
VkHdrMetadataEXT* pMetadata
        ;
[&]() {
VkHdrMetadataEXT* temp_FVBGSkQ;[&]() {

        if (data_json["members"]["pMetadata"].contains("null")){
        temp_FVBGSkQ=NULL;
        return;
        }
    temp_FVBGSkQ=(VkHdrMetadataEXT*)malloc(swapchainCount*sizeof(VkHdrMetadataEXT));
        for (int jBPBrew=0; jBPBrew < swapchainCount; jBPBrew++){
            [&]() {
temp_FVBGSkQ[jBPBrew]=deserialize_VkHdrMetadataEXT(data_json["members"]["pMetadata"]["members"][jBPBrew]);}();;
        }
        }();pMetadata=temp_FVBGSkQ;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkSetHdrMetadataEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkSetHdrMetadataEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkSetHdrMetadataEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkSetHdrMetadataEXT");
    }  
    
call_function(device, swapchainCount, pSwapchains, pMetadata);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["swapchainCount"]=[&]() {
    json return_dVrIDXh=json({});
    return serialize_uint32_t(swapchainCount);}();
result["members"]["pSwapchains"]=[&]() {
    json return_NEhxscZ=json({});
    
        if (pSwapchains==NULL){
            return_NEhxscZ["null"]=true;
            return return_NEhxscZ;
        }
        
        return_NEhxscZ["members"]={};
        for(int NEhxscZ=0; NEhxscZ < swapchainCount; NEhxscZ++){
            json temp;
            temp=[&]() {
    json return_kwGAIvt=json({});
    return serialize_VkSwapchainKHR(pSwapchains[NEhxscZ]);}();
            return_NEhxscZ["members"].push_back(temp);
        }
        return return_NEhxscZ;
        }();
result["members"]["pMetadata"]=[&]() {
    json return_xFHRbEo=json({});
    
        if (pMetadata==NULL){
            return_xFHRbEo["null"]=true;
            return return_xFHRbEo;
        }
        
        return_xFHRbEo["members"]={};
        for(int xFHRbEo=0; xFHRbEo < swapchainCount; xFHRbEo++){
            json temp;
            temp=[&]() {
    json return_SQUdDyG=json({});
    return serialize_VkHdrMetadataEXT(pMetadata[xFHRbEo]);}();
            return_xFHRbEo["members"].push_back(temp);
        }
        return return_xFHRbEo;
        }();

        writeToConn(result);
    }

    void handle_vkGetSwapchainStatusKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkSwapchainKHR swapchain
        ;
[&]() {
swapchain=deserialize_VkSwapchainKHR(data_json["members"]["swapchain"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetSwapchainStatusKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetSwapchainStatusKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetSwapchainStatusKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetSwapchainStatusKHR");
    }  
    
auto return_value=call_function(device, swapchain);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_DTbwxMO=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["swapchain"]=[&]() {
    json return_zIgOjVA=json({});
    return serialize_VkSwapchainKHR(swapchain);}();

        writeToConn(result);
    }

    void handle_vkGetRefreshCycleDurationGOOGLE(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkSwapchainKHR swapchain
            ;
[&]() {
swapchain=deserialize_VkSwapchainKHR(data_json["members"]["swapchain"]);}();
VkRefreshCycleDurationGOOGLE* pDisplayTimingProperties
        ;
[&]() {

        if (data_json["members"]["pDisplayTimingProperties"].contains("null")){
        pDisplayTimingProperties=NULL;
        return;
        }
    pDisplayTimingProperties=(VkRefreshCycleDurationGOOGLE*)malloc(sizeof(VkRefreshCycleDurationGOOGLE));
[&]() {
*(pDisplayTimingProperties)=deserialize_VkRefreshCycleDurationGOOGLE(data_json["members"]["pDisplayTimingProperties"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetRefreshCycleDurationGOOGLE)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetRefreshCycleDurationGOOGLE");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetRefreshCycleDurationGOOGLE)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetRefreshCycleDurationGOOGLE");
    }  
    
auto return_value=call_function(device, swapchain, pDisplayTimingProperties);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_uHzTTUq=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["swapchain"]=[&]() {
    json return_pJrgkgd=json({});
    return serialize_VkSwapchainKHR(swapchain);}();
result["members"]["pDisplayTimingProperties"]=[&]() {
    json return_qKcuXbY=json({});
    
        if (pDisplayTimingProperties==NULL){
            return_qKcuXbY["null"]=true;
            return return_qKcuXbY;
        }
        return_qKcuXbY=[&]() {
    json return_uOoqFpQ=json({});
    return serialize_VkRefreshCycleDurationGOOGLE(*pDisplayTimingProperties);}();
return return_qKcuXbY;}();

        writeToConn(result);
    }

    void handle_vkGetPastPresentationTimingGOOGLE(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkSwapchainKHR swapchain
            ;
[&]() {
swapchain=deserialize_VkSwapchainKHR(data_json["members"]["swapchain"]);}();
uint32_t* pPresentationTimingCount
            ;
[&]() {

        if (data_json["members"]["pPresentationTimingCount"].contains("null")){
        pPresentationTimingCount=NULL;
        return;
        }
    pPresentationTimingCount=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pPresentationTimingCount)=deserialize_uint32_t(data_json["members"]["pPresentationTimingCount"]);}();
}();
VkPastPresentationTimingGOOGLE* pPresentationTimings
        ;
[&]() {

        if (data_json["members"]["pPresentationTimings"].contains("null")){
        pPresentationTimings=NULL;
        return;
        }
    pPresentationTimings=(VkPastPresentationTimingGOOGLE*)malloc(*pPresentationTimingCount*sizeof(VkPastPresentationTimingGOOGLE));
        for (int pkcplTt=0; pkcplTt < *pPresentationTimingCount; pkcplTt++){
            [&]() {
pPresentationTimings[pkcplTt]=deserialize_VkPastPresentationTimingGOOGLE(data_json["members"]["pPresentationTimings"]["members"][pkcplTt]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPastPresentationTimingGOOGLE)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPastPresentationTimingGOOGLE");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPastPresentationTimingGOOGLE)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPastPresentationTimingGOOGLE");
    }  
    
auto return_value=call_function(device, swapchain, pPresentationTimingCount, pPresentationTimings);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_kFGaWXh=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["swapchain"]=[&]() {
    json return_pJrgkgd=json({});
    return serialize_VkSwapchainKHR(swapchain);}();
result["members"]["pPresentationTimingCount"]=[&]() {
    json return_lsIaBBc=json({});
    
        if (pPresentationTimingCount==NULL){
            return_lsIaBBc["null"]=true;
            return return_lsIaBBc;
        }
        return_lsIaBBc=[&]() {
    json return_oVeWZVA=json({});
    return serialize_uint32_t(*pPresentationTimingCount);}();
return return_lsIaBBc;}();
result["members"]["pPresentationTimings"]=[&]() {
    json return_EWUOiFE=json({});
    
        if (pPresentationTimings==NULL){
            return_EWUOiFE["null"]=true;
            return return_EWUOiFE;
        }
        
        return_EWUOiFE["members"]={};
        for(int EWUOiFE=0; EWUOiFE < *pPresentationTimingCount; EWUOiFE++){
            json temp;
            temp=[&]() {
    json return_eqekKFy=json({});
    return serialize_VkPastPresentationTimingGOOGLE(pPresentationTimings[EWUOiFE]);}();
            return_EWUOiFE["members"].push_back(temp);
        }
        return return_EWUOiFE;
        }();

        writeToConn(result);
    }

    void handle_vkCmdSetViewportWScalingNV(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t firstViewport
            ;
[&]() {
firstViewport=deserialize_uint32_t(data_json["members"]["firstViewport"]);}();
uint32_t viewportCount
            ;
[&]() {
viewportCount=deserialize_uint32_t(data_json["members"]["viewportCount"]);}();
VkViewportWScalingNV* pViewportWScalings
        ;
[&]() {
VkViewportWScalingNV* temp_PLPhyyP;[&]() {

        if (data_json["members"]["pViewportWScalings"].contains("null")){
        temp_PLPhyyP=NULL;
        return;
        }
    temp_PLPhyyP=(VkViewportWScalingNV*)malloc(viewportCount*sizeof(VkViewportWScalingNV));
        for (int eSpWfre=0; eSpWfre < viewportCount; eSpWfre++){
            [&]() {
temp_PLPhyyP[eSpWfre]=deserialize_VkViewportWScalingNV(data_json["members"]["pViewportWScalings"]["members"][eSpWfre]);}();;
        }
        }();pViewportWScalings=temp_PLPhyyP;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetViewportWScalingNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetViewportWScalingNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetViewportWScalingNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetViewportWScalingNV");
    }  
    
call_function(commandBuffer, firstViewport, viewportCount, pViewportWScalings);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["firstViewport"]=[&]() {
    json return_zZVDUCF=json({});
    return serialize_uint32_t(firstViewport);}();
result["members"]["viewportCount"]=[&]() {
    json return_pDFybJm=json({});
    return serialize_uint32_t(viewportCount);}();
result["members"]["pViewportWScalings"]=[&]() {
    json return_OEePdax=json({});
    
        if (pViewportWScalings==NULL){
            return_OEePdax["null"]=true;
            return return_OEePdax;
        }
        
        return_OEePdax["members"]={};
        for(int OEePdax=0; OEePdax < viewportCount; OEePdax++){
            json temp;
            temp=[&]() {
    json return_qlPYRZJ=json({});
    return serialize_VkViewportWScalingNV(pViewportWScalings[OEePdax]);}();
            return_OEePdax["members"].push_back(temp);
        }
        return return_OEePdax;
        }();

        writeToConn(result);
    }

    void handle_vkCmdSetDiscardRectangleEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t firstDiscardRectangle
            ;
[&]() {
firstDiscardRectangle=deserialize_uint32_t(data_json["members"]["firstDiscardRectangle"]);}();
uint32_t discardRectangleCount
            ;
[&]() {
discardRectangleCount=deserialize_uint32_t(data_json["members"]["discardRectangleCount"]);}();
VkRect2D* pDiscardRectangles
        ;
[&]() {
VkRect2D* temp_ZGpMoov;[&]() {

        if (data_json["members"]["pDiscardRectangles"].contains("null")){
        temp_ZGpMoov=NULL;
        return;
        }
    temp_ZGpMoov=(VkRect2D*)malloc(discardRectangleCount*sizeof(VkRect2D));
        for (int pTlGmeB=0; pTlGmeB < discardRectangleCount; pTlGmeB++){
            [&]() {
temp_ZGpMoov[pTlGmeB]=deserialize_VkRect2D(data_json["members"]["pDiscardRectangles"]["members"][pTlGmeB]);}();;
        }
        }();pDiscardRectangles=temp_ZGpMoov;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetDiscardRectangleEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetDiscardRectangleEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetDiscardRectangleEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetDiscardRectangleEXT");
    }  
    
call_function(commandBuffer, firstDiscardRectangle, discardRectangleCount, pDiscardRectangles);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["firstDiscardRectangle"]=[&]() {
    json return_gwTWrOQ=json({});
    return serialize_uint32_t(firstDiscardRectangle);}();
result["members"]["discardRectangleCount"]=[&]() {
    json return_AcMqNLo=json({});
    return serialize_uint32_t(discardRectangleCount);}();
result["members"]["pDiscardRectangles"]=[&]() {
    json return_IYYaqXK=json({});
    
        if (pDiscardRectangles==NULL){
            return_IYYaqXK["null"]=true;
            return return_IYYaqXK;
        }
        
        return_IYYaqXK["members"]={};
        for(int IYYaqXK=0; IYYaqXK < discardRectangleCount; IYYaqXK++){
            json temp;
            temp=[&]() {
    json return_TDZblgQ=json({});
    return serialize_VkRect2D(pDiscardRectangles[IYYaqXK]);}();
            return_IYYaqXK["members"].push_back(temp);
        }
        return return_IYYaqXK;
        }();

        writeToConn(result);
    }

    void handle_vkCmdSetDiscardRectangleEnableEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBool32 discardRectangleEnable
        ;
[&]() {
[&]() {
discardRectangleEnable=deserialize_uint32_t(data_json["members"]["discardRectangleEnable"]);}();}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetDiscardRectangleEnableEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetDiscardRectangleEnableEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetDiscardRectangleEnableEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetDiscardRectangleEnableEXT");
    }  
    
call_function(commandBuffer, discardRectangleEnable);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["discardRectangleEnable"]=[&]() {
    json return_GNyjEHV=json({});
    return_GNyjEHV=[&]() {
    json return_ZVEmrBQ=json({});
    return serialize_uint32_t(discardRectangleEnable);}();return return_GNyjEHV;}();

        writeToConn(result);
    }

    void handle_vkCmdSetDiscardRectangleModeEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkDiscardRectangleModeEXT discardRectangleMode
        ;
[&]() {
discardRectangleMode=deserialize_VkDiscardRectangleModeEXT(data_json["members"]["discardRectangleMode"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetDiscardRectangleModeEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetDiscardRectangleModeEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetDiscardRectangleModeEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetDiscardRectangleModeEXT");
    }  
    
call_function(commandBuffer, discardRectangleMode);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["discardRectangleMode"]=[&]() {
    json return_lbSRFNX=json({});
    return serialize_VkDiscardRectangleModeEXT(discardRectangleMode);}();

        writeToConn(result);
    }

    void handle_vkCmdSetSampleLocationsEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkSampleLocationsInfoEXT* pSampleLocationsInfo
        ;
[&]() {
VkSampleLocationsInfoEXT* temp_pmdZVxG;[&]() {

        if (data_json["members"]["pSampleLocationsInfo"].contains("null")){
        temp_pmdZVxG=NULL;
        return;
        }
    temp_pmdZVxG=(VkSampleLocationsInfoEXT*)malloc(sizeof(VkSampleLocationsInfoEXT));
[&]() {
*(temp_pmdZVxG)=deserialize_VkSampleLocationsInfoEXT(data_json["members"]["pSampleLocationsInfo"]);}();
}();pSampleLocationsInfo=temp_pmdZVxG;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetSampleLocationsEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetSampleLocationsEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetSampleLocationsEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetSampleLocationsEXT");
    }  
    
call_function(commandBuffer, pSampleLocationsInfo);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pSampleLocationsInfo"]=[&]() {
    json return_kwFhXKV=json({});
    
        if (pSampleLocationsInfo==NULL){
            return_kwFhXKV["null"]=true;
            return return_kwFhXKV;
        }
        return_kwFhXKV=[&]() {
    json return_LwDCgvR=json({});
    return serialize_VkSampleLocationsInfoEXT(*pSampleLocationsInfo);}();
return return_kwFhXKV;}();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceMultisamplePropertiesEXT(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
VkSampleCountFlagBits samples
            ;
[&]() {
samples=deserialize_VkSampleCountFlagBits(data_json["members"]["samples"]);}();
VkMultisamplePropertiesEXT* pMultisampleProperties
        ;
[&]() {

        if (data_json["members"]["pMultisampleProperties"].contains("null")){
        pMultisampleProperties=NULL;
        return;
        }
    pMultisampleProperties=(VkMultisamplePropertiesEXT*)malloc(sizeof(VkMultisamplePropertiesEXT));
[&]() {
*(pMultisampleProperties)=deserialize_VkMultisamplePropertiesEXT(data_json["members"]["pMultisampleProperties"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceMultisamplePropertiesEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceMultisamplePropertiesEXT");
    }  
    
call_function(physicalDevice, samples, pMultisampleProperties);
json result=json({});
        result["type"]="Response";
    

result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["samples"]=[&]() {
    json return_EMNaydU=json({});
    return serialize_VkSampleCountFlagBits(samples);}();
result["members"]["pMultisampleProperties"]=[&]() {
    json return_PREXSTI=json({});
    
        if (pMultisampleProperties==NULL){
            return_PREXSTI["null"]=true;
            return return_PREXSTI;
        }
        return_PREXSTI=[&]() {
    json return_zTNeaPy=json({});
    return serialize_VkMultisamplePropertiesEXT(*pMultisampleProperties);}();
return return_PREXSTI;}();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceSurfaceCapabilities2KHR(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo
            ;
[&]() {
VkPhysicalDeviceSurfaceInfo2KHR* temp_tfmmLsj;[&]() {

        if (data_json["members"]["pSurfaceInfo"].contains("null")){
        temp_tfmmLsj=NULL;
        return;
        }
    temp_tfmmLsj=(VkPhysicalDeviceSurfaceInfo2KHR*)malloc(sizeof(VkPhysicalDeviceSurfaceInfo2KHR));
[&]() {
*(temp_tfmmLsj)=deserialize_VkPhysicalDeviceSurfaceInfo2KHR(data_json["members"]["pSurfaceInfo"]);}();
}();pSurfaceInfo=temp_tfmmLsj;}();
VkSurfaceCapabilities2KHR* pSurfaceCapabilities
        ;
[&]() {

        if (data_json["members"]["pSurfaceCapabilities"].contains("null")){
        pSurfaceCapabilities=NULL;
        return;
        }
    pSurfaceCapabilities=(VkSurfaceCapabilities2KHR*)malloc(sizeof(VkSurfaceCapabilities2KHR));
[&]() {
*(pSurfaceCapabilities)=deserialize_VkSurfaceCapabilities2KHR(data_json["members"]["pSurfaceCapabilities"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceSurfaceCapabilities2KHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceSurfaceCapabilities2KHR");
    }  
    
auto return_value=call_function(physicalDevice, pSurfaceInfo, pSurfaceCapabilities);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_SfvlBqi=json({});
    return serialize_VkResult(return_value);}();
result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["pSurfaceInfo"]=[&]() {
    json return_Lucdtqn=json({});
    
        if (pSurfaceInfo==NULL){
            return_Lucdtqn["null"]=true;
            return return_Lucdtqn;
        }
        return_Lucdtqn=[&]() {
    json return_tsDtFzO=json({});
    return serialize_VkPhysicalDeviceSurfaceInfo2KHR(*pSurfaceInfo);}();
return return_Lucdtqn;}();
result["members"]["pSurfaceCapabilities"]=[&]() {
    json return_YAklVrf=json({});
    
        if (pSurfaceCapabilities==NULL){
            return_YAklVrf["null"]=true;
            return return_YAklVrf;
        }
        return_YAklVrf=[&]() {
    json return_VoSbADg=json({});
    return serialize_VkSurfaceCapabilities2KHR(*pSurfaceCapabilities);}();
return return_YAklVrf;}();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceSurfaceFormats2KHR(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo
            ;
[&]() {
VkPhysicalDeviceSurfaceInfo2KHR* temp_tfmmLsj;[&]() {

        if (data_json["members"]["pSurfaceInfo"].contains("null")){
        temp_tfmmLsj=NULL;
        return;
        }
    temp_tfmmLsj=(VkPhysicalDeviceSurfaceInfo2KHR*)malloc(sizeof(VkPhysicalDeviceSurfaceInfo2KHR));
[&]() {
*(temp_tfmmLsj)=deserialize_VkPhysicalDeviceSurfaceInfo2KHR(data_json["members"]["pSurfaceInfo"]);}();
}();pSurfaceInfo=temp_tfmmLsj;}();
uint32_t* pSurfaceFormatCount
            ;
[&]() {

        if (data_json["members"]["pSurfaceFormatCount"].contains("null")){
        pSurfaceFormatCount=NULL;
        return;
        }
    pSurfaceFormatCount=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pSurfaceFormatCount)=deserialize_uint32_t(data_json["members"]["pSurfaceFormatCount"]);}();
}();
VkSurfaceFormat2KHR* pSurfaceFormats
        ;
[&]() {

        if (data_json["members"]["pSurfaceFormats"].contains("null")){
        pSurfaceFormats=NULL;
        return;
        }
    pSurfaceFormats=(VkSurfaceFormat2KHR*)malloc(*pSurfaceFormatCount*sizeof(VkSurfaceFormat2KHR));
        for (int gMdnmiq=0; gMdnmiq < *pSurfaceFormatCount; gMdnmiq++){
            [&]() {
pSurfaceFormats[gMdnmiq]=deserialize_VkSurfaceFormat2KHR(data_json["members"]["pSurfaceFormats"]["members"][gMdnmiq]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceSurfaceFormats2KHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceSurfaceFormats2KHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceSurfaceFormats2KHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceSurfaceFormats2KHR");
    }  
    
auto return_value=call_function(physicalDevice, pSurfaceInfo, pSurfaceFormatCount, pSurfaceFormats);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_EuTBpyz=json({});
    return serialize_VkResult(return_value);}();
result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["pSurfaceInfo"]=[&]() {
    json return_Lucdtqn=json({});
    
        if (pSurfaceInfo==NULL){
            return_Lucdtqn["null"]=true;
            return return_Lucdtqn;
        }
        return_Lucdtqn=[&]() {
    json return_tsDtFzO=json({});
    return serialize_VkPhysicalDeviceSurfaceInfo2KHR(*pSurfaceInfo);}();
return return_Lucdtqn;}();
result["members"]["pSurfaceFormatCount"]=[&]() {
    json return_ZQIGOcP=json({});
    
        if (pSurfaceFormatCount==NULL){
            return_ZQIGOcP["null"]=true;
            return return_ZQIGOcP;
        }
        return_ZQIGOcP=[&]() {
    json return_dNAZxxw=json({});
    return serialize_uint32_t(*pSurfaceFormatCount);}();
return return_ZQIGOcP;}();
result["members"]["pSurfaceFormats"]=[&]() {
    json return_nsnfPfK=json({});
    
        if (pSurfaceFormats==NULL){
            return_nsnfPfK["null"]=true;
            return return_nsnfPfK;
        }
        
        return_nsnfPfK["members"]={};
        for(int nsnfPfK=0; nsnfPfK < *pSurfaceFormatCount; nsnfPfK++){
            json temp;
            temp=[&]() {
    json return_ippkfhi=json({});
    return serialize_VkSurfaceFormat2KHR(pSurfaceFormats[nsnfPfK]);}();
            return_nsnfPfK["members"].push_back(temp);
        }
        return return_nsnfPfK;
        }();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceDisplayProperties2KHR(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
uint32_t* pPropertyCount
            ;
[&]() {

        if (data_json["members"]["pPropertyCount"].contains("null")){
        pPropertyCount=NULL;
        return;
        }
    pPropertyCount=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pPropertyCount)=deserialize_uint32_t(data_json["members"]["pPropertyCount"]);}();
}();
VkDisplayProperties2KHR* pProperties
        ;
[&]() {

        if (data_json["members"]["pProperties"].contains("null")){
        pProperties=NULL;
        return;
        }
    pProperties=(VkDisplayProperties2KHR*)malloc(*pPropertyCount*sizeof(VkDisplayProperties2KHR));
        for (int WknXjpT=0; WknXjpT < *pPropertyCount; WknXjpT++){
            [&]() {
pProperties[WknXjpT]=deserialize_VkDisplayProperties2KHR(data_json["members"]["pProperties"]["members"][WknXjpT]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceDisplayProperties2KHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceDisplayProperties2KHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceDisplayProperties2KHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceDisplayProperties2KHR");
    }  
    
auto return_value=call_function(physicalDevice, pPropertyCount, pProperties);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_ZAwCJvj=json({});
    return serialize_VkResult(return_value);}();
result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["pPropertyCount"]=[&]() {
    json return_MnYOHdG=json({});
    
        if (pPropertyCount==NULL){
            return_MnYOHdG["null"]=true;
            return return_MnYOHdG;
        }
        return_MnYOHdG=[&]() {
    json return_rPOmKzR=json({});
    return serialize_uint32_t(*pPropertyCount);}();
return return_MnYOHdG;}();
result["members"]["pProperties"]=[&]() {
    json return_AQbkzIN=json({});
    
        if (pProperties==NULL){
            return_AQbkzIN["null"]=true;
            return return_AQbkzIN;
        }
        
        return_AQbkzIN["members"]={};
        for(int AQbkzIN=0; AQbkzIN < *pPropertyCount; AQbkzIN++){
            json temp;
            temp=[&]() {
    json return_YyuosqA=json({});
    return serialize_VkDisplayProperties2KHR(pProperties[AQbkzIN]);}();
            return_AQbkzIN["members"].push_back(temp);
        }
        return return_AQbkzIN;
        }();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceDisplayPlaneProperties2KHR(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
uint32_t* pPropertyCount
            ;
[&]() {

        if (data_json["members"]["pPropertyCount"].contains("null")){
        pPropertyCount=NULL;
        return;
        }
    pPropertyCount=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pPropertyCount)=deserialize_uint32_t(data_json["members"]["pPropertyCount"]);}();
}();
VkDisplayPlaneProperties2KHR* pProperties
        ;
[&]() {

        if (data_json["members"]["pProperties"].contains("null")){
        pProperties=NULL;
        return;
        }
    pProperties=(VkDisplayPlaneProperties2KHR*)malloc(*pPropertyCount*sizeof(VkDisplayPlaneProperties2KHR));
        for (int OVSjNyk=0; OVSjNyk < *pPropertyCount; OVSjNyk++){
            [&]() {
pProperties[OVSjNyk]=deserialize_VkDisplayPlaneProperties2KHR(data_json["members"]["pProperties"]["members"][OVSjNyk]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceDisplayPlaneProperties2KHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceDisplayPlaneProperties2KHR");
    }  
    
auto return_value=call_function(physicalDevice, pPropertyCount, pProperties);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_JFxjSUI=json({});
    return serialize_VkResult(return_value);}();
result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["pPropertyCount"]=[&]() {
    json return_MnYOHdG=json({});
    
        if (pPropertyCount==NULL){
            return_MnYOHdG["null"]=true;
            return return_MnYOHdG;
        }
        return_MnYOHdG=[&]() {
    json return_rPOmKzR=json({});
    return serialize_uint32_t(*pPropertyCount);}();
return return_MnYOHdG;}();
result["members"]["pProperties"]=[&]() {
    json return_tVqYOWi=json({});
    
        if (pProperties==NULL){
            return_tVqYOWi["null"]=true;
            return return_tVqYOWi;
        }
        
        return_tVqYOWi["members"]={};
        for(int tVqYOWi=0; tVqYOWi < *pPropertyCount; tVqYOWi++){
            json temp;
            temp=[&]() {
    json return_qtKqPRF=json({});
    return serialize_VkDisplayPlaneProperties2KHR(pProperties[tVqYOWi]);}();
            return_tVqYOWi["members"].push_back(temp);
        }
        return return_tVqYOWi;
        }();

        writeToConn(result);
    }

    void handle_vkGetDisplayModeProperties2KHR(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
VkDisplayKHR display
            ;
[&]() {
display=deserialize_VkDisplayKHR(data_json["members"]["display"]);}();
uint32_t* pPropertyCount
            ;
[&]() {

        if (data_json["members"]["pPropertyCount"].contains("null")){
        pPropertyCount=NULL;
        return;
        }
    pPropertyCount=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pPropertyCount)=deserialize_uint32_t(data_json["members"]["pPropertyCount"]);}();
}();
VkDisplayModeProperties2KHR* pProperties
        ;
[&]() {

        if (data_json["members"]["pProperties"].contains("null")){
        pProperties=NULL;
        return;
        }
    pProperties=(VkDisplayModeProperties2KHR*)malloc(*pPropertyCount*sizeof(VkDisplayModeProperties2KHR));
        for (int TqWqslp=0; TqWqslp < *pPropertyCount; TqWqslp++){
            [&]() {
pProperties[TqWqslp]=deserialize_VkDisplayModeProperties2KHR(data_json["members"]["pProperties"]["members"][TqWqslp]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetDisplayModeProperties2KHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDisplayModeProperties2KHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetDisplayModeProperties2KHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDisplayModeProperties2KHR");
    }  
    
auto return_value=call_function(physicalDevice, display, pPropertyCount, pProperties);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_QzuFBDT=json({});
    return serialize_VkResult(return_value);}();
result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["display"]=[&]() {
    json return_wRgwvSz=json({});
    return serialize_VkDisplayKHR(display);}();
result["members"]["pPropertyCount"]=[&]() {
    json return_MnYOHdG=json({});
    
        if (pPropertyCount==NULL){
            return_MnYOHdG["null"]=true;
            return return_MnYOHdG;
        }
        return_MnYOHdG=[&]() {
    json return_rPOmKzR=json({});
    return serialize_uint32_t(*pPropertyCount);}();
return return_MnYOHdG;}();
result["members"]["pProperties"]=[&]() {
    json return_AmdBXBf=json({});
    
        if (pProperties==NULL){
            return_AmdBXBf["null"]=true;
            return return_AmdBXBf;
        }
        
        return_AmdBXBf["members"]={};
        for(int AmdBXBf=0; AmdBXBf < *pPropertyCount; AmdBXBf++){
            json temp;
            temp=[&]() {
    json return_HuMPrJh=json({});
    return serialize_VkDisplayModeProperties2KHR(pProperties[AmdBXBf]);}();
            return_AmdBXBf["members"].push_back(temp);
        }
        return return_AmdBXBf;
        }();

        writeToConn(result);
    }

    void handle_vkGetDisplayPlaneCapabilities2KHR(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
VkDisplayPlaneInfo2KHR* pDisplayPlaneInfo
            ;
[&]() {
VkDisplayPlaneInfo2KHR* temp_hSkxzYe;[&]() {

        if (data_json["members"]["pDisplayPlaneInfo"].contains("null")){
        temp_hSkxzYe=NULL;
        return;
        }
    temp_hSkxzYe=(VkDisplayPlaneInfo2KHR*)malloc(sizeof(VkDisplayPlaneInfo2KHR));
[&]() {
*(temp_hSkxzYe)=deserialize_VkDisplayPlaneInfo2KHR(data_json["members"]["pDisplayPlaneInfo"]);}();
}();pDisplayPlaneInfo=temp_hSkxzYe;}();
VkDisplayPlaneCapabilities2KHR* pCapabilities
        ;
[&]() {

        if (data_json["members"]["pCapabilities"].contains("null")){
        pCapabilities=NULL;
        return;
        }
    pCapabilities=(VkDisplayPlaneCapabilities2KHR*)malloc(sizeof(VkDisplayPlaneCapabilities2KHR));
[&]() {
*(pCapabilities)=deserialize_VkDisplayPlaneCapabilities2KHR(data_json["members"]["pCapabilities"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetDisplayPlaneCapabilities2KHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDisplayPlaneCapabilities2KHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetDisplayPlaneCapabilities2KHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDisplayPlaneCapabilities2KHR");
    }  
    
auto return_value=call_function(physicalDevice, pDisplayPlaneInfo, pCapabilities);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_mCeCAgE=json({});
    return serialize_VkResult(return_value);}();
result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["pDisplayPlaneInfo"]=[&]() {
    json return_PAguIfD=json({});
    
        if (pDisplayPlaneInfo==NULL){
            return_PAguIfD["null"]=true;
            return return_PAguIfD;
        }
        return_PAguIfD=[&]() {
    json return_LnimCFA=json({});
    return serialize_VkDisplayPlaneInfo2KHR(*pDisplayPlaneInfo);}();
return return_PAguIfD;}();
result["members"]["pCapabilities"]=[&]() {
    json return_RosOiXm=json({});
    
        if (pCapabilities==NULL){
            return_RosOiXm["null"]=true;
            return return_RosOiXm;
        }
        return_RosOiXm=[&]() {
    json return_YQNpBIC=json({});
    return serialize_VkDisplayPlaneCapabilities2KHR(*pCapabilities);}();
return return_RosOiXm;}();

        writeToConn(result);
    }

    void handle_vkGetBufferMemoryRequirements2(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkBufferMemoryRequirementsInfo2* pInfo
            ;
[&]() {
VkBufferMemoryRequirementsInfo2* temp_ptJPSDz;[&]() {

        if (data_json["members"]["pInfo"].contains("null")){
        temp_ptJPSDz=NULL;
        return;
        }
    temp_ptJPSDz=(VkBufferMemoryRequirementsInfo2*)malloc(sizeof(VkBufferMemoryRequirementsInfo2));
[&]() {
*(temp_ptJPSDz)=deserialize_VkBufferMemoryRequirementsInfo2(data_json["members"]["pInfo"]);}();
}();pInfo=temp_ptJPSDz;}();
VkMemoryRequirements2* pMemoryRequirements
        ;
[&]() {

        if (data_json["members"]["pMemoryRequirements"].contains("null")){
        pMemoryRequirements=NULL;
        return;
        }
    pMemoryRequirements=(VkMemoryRequirements2*)malloc(sizeof(VkMemoryRequirements2));
[&]() {
*(pMemoryRequirements)=deserialize_VkMemoryRequirements2(data_json["members"]["pMemoryRequirements"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetBufferMemoryRequirements2)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetBufferMemoryRequirements2");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetBufferMemoryRequirements2)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetBufferMemoryRequirements2");
    }  
    
call_function(device, pInfo, pMemoryRequirements);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pInfo"]=[&]() {
    json return_ZQiaFNN=json({});
    
        if (pInfo==NULL){
            return_ZQiaFNN["null"]=true;
            return return_ZQiaFNN;
        }
        return_ZQiaFNN=[&]() {
    json return_ygJSYsp=json({});
    return serialize_VkBufferMemoryRequirementsInfo2(*pInfo);}();
return return_ZQiaFNN;}();
result["members"]["pMemoryRequirements"]=[&]() {
    json return_aEBODbS=json({});
    
        if (pMemoryRequirements==NULL){
            return_aEBODbS["null"]=true;
            return return_aEBODbS;
        }
        return_aEBODbS=[&]() {
    json return_hGmebmD=json({});
    return serialize_VkMemoryRequirements2(*pMemoryRequirements);}();
return return_aEBODbS;}();

        writeToConn(result);
    }

    void handle_vkGetBufferMemoryRequirements2KHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkBufferMemoryRequirementsInfo2* pInfo
            ;
[&]() {
VkBufferMemoryRequirementsInfo2* temp_ptJPSDz;[&]() {

        if (data_json["members"]["pInfo"].contains("null")){
        temp_ptJPSDz=NULL;
        return;
        }
    temp_ptJPSDz=(VkBufferMemoryRequirementsInfo2*)malloc(sizeof(VkBufferMemoryRequirementsInfo2));
[&]() {
*(temp_ptJPSDz)=deserialize_VkBufferMemoryRequirementsInfo2(data_json["members"]["pInfo"]);}();
}();pInfo=temp_ptJPSDz;}();
VkMemoryRequirements2* pMemoryRequirements
        ;
[&]() {

        if (data_json["members"]["pMemoryRequirements"].contains("null")){
        pMemoryRequirements=NULL;
        return;
        }
    pMemoryRequirements=(VkMemoryRequirements2*)malloc(sizeof(VkMemoryRequirements2));
[&]() {
*(pMemoryRequirements)=deserialize_VkMemoryRequirements2(data_json["members"]["pMemoryRequirements"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetBufferMemoryRequirements2KHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetBufferMemoryRequirements2KHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetBufferMemoryRequirements2KHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetBufferMemoryRequirements2KHR");
    }  
    
call_function(device, pInfo, pMemoryRequirements);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pInfo"]=[&]() {
    json return_ZQiaFNN=json({});
    
        if (pInfo==NULL){
            return_ZQiaFNN["null"]=true;
            return return_ZQiaFNN;
        }
        return_ZQiaFNN=[&]() {
    json return_ygJSYsp=json({});
    return serialize_VkBufferMemoryRequirementsInfo2(*pInfo);}();
return return_ZQiaFNN;}();
result["members"]["pMemoryRequirements"]=[&]() {
    json return_aEBODbS=json({});
    
        if (pMemoryRequirements==NULL){
            return_aEBODbS["null"]=true;
            return return_aEBODbS;
        }
        return_aEBODbS=[&]() {
    json return_hGmebmD=json({});
    return serialize_VkMemoryRequirements2(*pMemoryRequirements);}();
return return_aEBODbS;}();

        writeToConn(result);
    }

    void handle_vkGetImageMemoryRequirements2(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkImageMemoryRequirementsInfo2* pInfo
            ;
[&]() {
VkImageMemoryRequirementsInfo2* temp_iVQhTVc;[&]() {

        if (data_json["members"]["pInfo"].contains("null")){
        temp_iVQhTVc=NULL;
        return;
        }
    temp_iVQhTVc=(VkImageMemoryRequirementsInfo2*)malloc(sizeof(VkImageMemoryRequirementsInfo2));
[&]() {
*(temp_iVQhTVc)=deserialize_VkImageMemoryRequirementsInfo2(data_json["members"]["pInfo"]);}();
}();pInfo=temp_iVQhTVc;}();
VkMemoryRequirements2* pMemoryRequirements
        ;
[&]() {

        if (data_json["members"]["pMemoryRequirements"].contains("null")){
        pMemoryRequirements=NULL;
        return;
        }
    pMemoryRequirements=(VkMemoryRequirements2*)malloc(sizeof(VkMemoryRequirements2));
[&]() {
*(pMemoryRequirements)=deserialize_VkMemoryRequirements2(data_json["members"]["pMemoryRequirements"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetImageMemoryRequirements2)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetImageMemoryRequirements2");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetImageMemoryRequirements2)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetImageMemoryRequirements2");
    }  
    
call_function(device, pInfo, pMemoryRequirements);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pInfo"]=[&]() {
    json return_dFkNZCM=json({});
    
        if (pInfo==NULL){
            return_dFkNZCM["null"]=true;
            return return_dFkNZCM;
        }
        return_dFkNZCM=[&]() {
    json return_BdGgtuU=json({});
    return serialize_VkImageMemoryRequirementsInfo2(*pInfo);}();
return return_dFkNZCM;}();
result["members"]["pMemoryRequirements"]=[&]() {
    json return_aEBODbS=json({});
    
        if (pMemoryRequirements==NULL){
            return_aEBODbS["null"]=true;
            return return_aEBODbS;
        }
        return_aEBODbS=[&]() {
    json return_hGmebmD=json({});
    return serialize_VkMemoryRequirements2(*pMemoryRequirements);}();
return return_aEBODbS;}();

        writeToConn(result);
    }

    void handle_vkGetImageMemoryRequirements2KHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkImageMemoryRequirementsInfo2* pInfo
            ;
[&]() {
VkImageMemoryRequirementsInfo2* temp_iVQhTVc;[&]() {

        if (data_json["members"]["pInfo"].contains("null")){
        temp_iVQhTVc=NULL;
        return;
        }
    temp_iVQhTVc=(VkImageMemoryRequirementsInfo2*)malloc(sizeof(VkImageMemoryRequirementsInfo2));
[&]() {
*(temp_iVQhTVc)=deserialize_VkImageMemoryRequirementsInfo2(data_json["members"]["pInfo"]);}();
}();pInfo=temp_iVQhTVc;}();
VkMemoryRequirements2* pMemoryRequirements
        ;
[&]() {

        if (data_json["members"]["pMemoryRequirements"].contains("null")){
        pMemoryRequirements=NULL;
        return;
        }
    pMemoryRequirements=(VkMemoryRequirements2*)malloc(sizeof(VkMemoryRequirements2));
[&]() {
*(pMemoryRequirements)=deserialize_VkMemoryRequirements2(data_json["members"]["pMemoryRequirements"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetImageMemoryRequirements2KHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetImageMemoryRequirements2KHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetImageMemoryRequirements2KHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetImageMemoryRequirements2KHR");
    }  
    
call_function(device, pInfo, pMemoryRequirements);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pInfo"]=[&]() {
    json return_dFkNZCM=json({});
    
        if (pInfo==NULL){
            return_dFkNZCM["null"]=true;
            return return_dFkNZCM;
        }
        return_dFkNZCM=[&]() {
    json return_BdGgtuU=json({});
    return serialize_VkImageMemoryRequirementsInfo2(*pInfo);}();
return return_dFkNZCM;}();
result["members"]["pMemoryRequirements"]=[&]() {
    json return_aEBODbS=json({});
    
        if (pMemoryRequirements==NULL){
            return_aEBODbS["null"]=true;
            return return_aEBODbS;
        }
        return_aEBODbS=[&]() {
    json return_hGmebmD=json({});
    return serialize_VkMemoryRequirements2(*pMemoryRequirements);}();
return return_aEBODbS;}();

        writeToConn(result);
    }

    void handle_vkGetImageSparseMemoryRequirements2(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkImageSparseMemoryRequirementsInfo2* pInfo
            ;
[&]() {
VkImageSparseMemoryRequirementsInfo2* temp_DWGApCb;[&]() {

        if (data_json["members"]["pInfo"].contains("null")){
        temp_DWGApCb=NULL;
        return;
        }
    temp_DWGApCb=(VkImageSparseMemoryRequirementsInfo2*)malloc(sizeof(VkImageSparseMemoryRequirementsInfo2));
[&]() {
*(temp_DWGApCb)=deserialize_VkImageSparseMemoryRequirementsInfo2(data_json["members"]["pInfo"]);}();
}();pInfo=temp_DWGApCb;}();
uint32_t* pSparseMemoryRequirementCount
            ;
[&]() {

        if (data_json["members"]["pSparseMemoryRequirementCount"].contains("null")){
        pSparseMemoryRequirementCount=NULL;
        return;
        }
    pSparseMemoryRequirementCount=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pSparseMemoryRequirementCount)=deserialize_uint32_t(data_json["members"]["pSparseMemoryRequirementCount"]);}();
}();
VkSparseImageMemoryRequirements2* pSparseMemoryRequirements
        ;
[&]() {

        if (data_json["members"]["pSparseMemoryRequirements"].contains("null")){
        pSparseMemoryRequirements=NULL;
        return;
        }
    pSparseMemoryRequirements=(VkSparseImageMemoryRequirements2*)malloc(*pSparseMemoryRequirementCount*sizeof(VkSparseImageMemoryRequirements2));
        for (int xriUdCT=0; xriUdCT < *pSparseMemoryRequirementCount; xriUdCT++){
            [&]() {
pSparseMemoryRequirements[xriUdCT]=deserialize_VkSparseImageMemoryRequirements2(data_json["members"]["pSparseMemoryRequirements"]["members"][xriUdCT]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetImageSparseMemoryRequirements2)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetImageSparseMemoryRequirements2");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetImageSparseMemoryRequirements2)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetImageSparseMemoryRequirements2");
    }  
    
call_function(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pInfo"]=[&]() {
    json return_ZLvwpLF=json({});
    
        if (pInfo==NULL){
            return_ZLvwpLF["null"]=true;
            return return_ZLvwpLF;
        }
        return_ZLvwpLF=[&]() {
    json return_hgioKrs=json({});
    return serialize_VkImageSparseMemoryRequirementsInfo2(*pInfo);}();
return return_ZLvwpLF;}();
result["members"]["pSparseMemoryRequirementCount"]=[&]() {
    json return_HoOHmri=json({});
    
        if (pSparseMemoryRequirementCount==NULL){
            return_HoOHmri["null"]=true;
            return return_HoOHmri;
        }
        return_HoOHmri=[&]() {
    json return_auEoviK=json({});
    return serialize_uint32_t(*pSparseMemoryRequirementCount);}();
return return_HoOHmri;}();
result["members"]["pSparseMemoryRequirements"]=[&]() {
    json return_iRLsorw=json({});
    
        if (pSparseMemoryRequirements==NULL){
            return_iRLsorw["null"]=true;
            return return_iRLsorw;
        }
        
        return_iRLsorw["members"]={};
        for(int iRLsorw=0; iRLsorw < *pSparseMemoryRequirementCount; iRLsorw++){
            json temp;
            temp=[&]() {
    json return_hRAaTcF=json({});
    return serialize_VkSparseImageMemoryRequirements2(pSparseMemoryRequirements[iRLsorw]);}();
            return_iRLsorw["members"].push_back(temp);
        }
        return return_iRLsorw;
        }();

        writeToConn(result);
    }

    void handle_vkGetImageSparseMemoryRequirements2KHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkImageSparseMemoryRequirementsInfo2* pInfo
            ;
[&]() {
VkImageSparseMemoryRequirementsInfo2* temp_DWGApCb;[&]() {

        if (data_json["members"]["pInfo"].contains("null")){
        temp_DWGApCb=NULL;
        return;
        }
    temp_DWGApCb=(VkImageSparseMemoryRequirementsInfo2*)malloc(sizeof(VkImageSparseMemoryRequirementsInfo2));
[&]() {
*(temp_DWGApCb)=deserialize_VkImageSparseMemoryRequirementsInfo2(data_json["members"]["pInfo"]);}();
}();pInfo=temp_DWGApCb;}();
uint32_t* pSparseMemoryRequirementCount
            ;
[&]() {

        if (data_json["members"]["pSparseMemoryRequirementCount"].contains("null")){
        pSparseMemoryRequirementCount=NULL;
        return;
        }
    pSparseMemoryRequirementCount=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pSparseMemoryRequirementCount)=deserialize_uint32_t(data_json["members"]["pSparseMemoryRequirementCount"]);}();
}();
VkSparseImageMemoryRequirements2* pSparseMemoryRequirements
        ;
[&]() {

        if (data_json["members"]["pSparseMemoryRequirements"].contains("null")){
        pSparseMemoryRequirements=NULL;
        return;
        }
    pSparseMemoryRequirements=(VkSparseImageMemoryRequirements2*)malloc(*pSparseMemoryRequirementCount*sizeof(VkSparseImageMemoryRequirements2));
        for (int xriUdCT=0; xriUdCT < *pSparseMemoryRequirementCount; xriUdCT++){
            [&]() {
pSparseMemoryRequirements[xriUdCT]=deserialize_VkSparseImageMemoryRequirements2(data_json["members"]["pSparseMemoryRequirements"]["members"][xriUdCT]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetImageSparseMemoryRequirements2KHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetImageSparseMemoryRequirements2KHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetImageSparseMemoryRequirements2KHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetImageSparseMemoryRequirements2KHR");
    }  
    
call_function(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pInfo"]=[&]() {
    json return_ZLvwpLF=json({});
    
        if (pInfo==NULL){
            return_ZLvwpLF["null"]=true;
            return return_ZLvwpLF;
        }
        return_ZLvwpLF=[&]() {
    json return_hgioKrs=json({});
    return serialize_VkImageSparseMemoryRequirementsInfo2(*pInfo);}();
return return_ZLvwpLF;}();
result["members"]["pSparseMemoryRequirementCount"]=[&]() {
    json return_HoOHmri=json({});
    
        if (pSparseMemoryRequirementCount==NULL){
            return_HoOHmri["null"]=true;
            return return_HoOHmri;
        }
        return_HoOHmri=[&]() {
    json return_auEoviK=json({});
    return serialize_uint32_t(*pSparseMemoryRequirementCount);}();
return return_HoOHmri;}();
result["members"]["pSparseMemoryRequirements"]=[&]() {
    json return_iRLsorw=json({});
    
        if (pSparseMemoryRequirements==NULL){
            return_iRLsorw["null"]=true;
            return return_iRLsorw;
        }
        
        return_iRLsorw["members"]={};
        for(int iRLsorw=0; iRLsorw < *pSparseMemoryRequirementCount; iRLsorw++){
            json temp;
            temp=[&]() {
    json return_hRAaTcF=json({});
    return serialize_VkSparseImageMemoryRequirements2(pSparseMemoryRequirements[iRLsorw]);}();
            return_iRLsorw["members"].push_back(temp);
        }
        return return_iRLsorw;
        }();

        writeToConn(result);
    }

    void handle_vkGetDeviceBufferMemoryRequirements(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDeviceBufferMemoryRequirements* pInfo
            ;
[&]() {
VkDeviceBufferMemoryRequirements* temp_TdAetmO;[&]() {

        if (data_json["members"]["pInfo"].contains("null")){
        temp_TdAetmO=NULL;
        return;
        }
    temp_TdAetmO=(VkDeviceBufferMemoryRequirements*)malloc(sizeof(VkDeviceBufferMemoryRequirements));
[&]() {
*(temp_TdAetmO)=deserialize_VkDeviceBufferMemoryRequirements(data_json["members"]["pInfo"]);}();
}();pInfo=temp_TdAetmO;}();
VkMemoryRequirements2* pMemoryRequirements
        ;
[&]() {

        if (data_json["members"]["pMemoryRequirements"].contains("null")){
        pMemoryRequirements=NULL;
        return;
        }
    pMemoryRequirements=(VkMemoryRequirements2*)malloc(sizeof(VkMemoryRequirements2));
[&]() {
*(pMemoryRequirements)=deserialize_VkMemoryRequirements2(data_json["members"]["pMemoryRequirements"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetDeviceBufferMemoryRequirements)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDeviceBufferMemoryRequirements");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetDeviceBufferMemoryRequirements)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDeviceBufferMemoryRequirements");
    }  
    
call_function(device, pInfo, pMemoryRequirements);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pInfo"]=[&]() {
    json return_azJPowA=json({});
    
        if (pInfo==NULL){
            return_azJPowA["null"]=true;
            return return_azJPowA;
        }
        return_azJPowA=[&]() {
    json return_GNbYvZr=json({});
    return serialize_VkDeviceBufferMemoryRequirements(*pInfo);}();
return return_azJPowA;}();
result["members"]["pMemoryRequirements"]=[&]() {
    json return_aEBODbS=json({});
    
        if (pMemoryRequirements==NULL){
            return_aEBODbS["null"]=true;
            return return_aEBODbS;
        }
        return_aEBODbS=[&]() {
    json return_hGmebmD=json({});
    return serialize_VkMemoryRequirements2(*pMemoryRequirements);}();
return return_aEBODbS;}();

        writeToConn(result);
    }

    void handle_vkGetDeviceBufferMemoryRequirementsKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDeviceBufferMemoryRequirements* pInfo
            ;
[&]() {
VkDeviceBufferMemoryRequirements* temp_TdAetmO;[&]() {

        if (data_json["members"]["pInfo"].contains("null")){
        temp_TdAetmO=NULL;
        return;
        }
    temp_TdAetmO=(VkDeviceBufferMemoryRequirements*)malloc(sizeof(VkDeviceBufferMemoryRequirements));
[&]() {
*(temp_TdAetmO)=deserialize_VkDeviceBufferMemoryRequirements(data_json["members"]["pInfo"]);}();
}();pInfo=temp_TdAetmO;}();
VkMemoryRequirements2* pMemoryRequirements
        ;
[&]() {

        if (data_json["members"]["pMemoryRequirements"].contains("null")){
        pMemoryRequirements=NULL;
        return;
        }
    pMemoryRequirements=(VkMemoryRequirements2*)malloc(sizeof(VkMemoryRequirements2));
[&]() {
*(pMemoryRequirements)=deserialize_VkMemoryRequirements2(data_json["members"]["pMemoryRequirements"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetDeviceBufferMemoryRequirementsKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDeviceBufferMemoryRequirementsKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetDeviceBufferMemoryRequirementsKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDeviceBufferMemoryRequirementsKHR");
    }  
    
call_function(device, pInfo, pMemoryRequirements);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pInfo"]=[&]() {
    json return_azJPowA=json({});
    
        if (pInfo==NULL){
            return_azJPowA["null"]=true;
            return return_azJPowA;
        }
        return_azJPowA=[&]() {
    json return_GNbYvZr=json({});
    return serialize_VkDeviceBufferMemoryRequirements(*pInfo);}();
return return_azJPowA;}();
result["members"]["pMemoryRequirements"]=[&]() {
    json return_aEBODbS=json({});
    
        if (pMemoryRequirements==NULL){
            return_aEBODbS["null"]=true;
            return return_aEBODbS;
        }
        return_aEBODbS=[&]() {
    json return_hGmebmD=json({});
    return serialize_VkMemoryRequirements2(*pMemoryRequirements);}();
return return_aEBODbS;}();

        writeToConn(result);
    }

    void handle_vkGetDeviceImageMemoryRequirements(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDeviceImageMemoryRequirements* pInfo
            ;
[&]() {
VkDeviceImageMemoryRequirements* temp_fFAMpIW;[&]() {

        if (data_json["members"]["pInfo"].contains("null")){
        temp_fFAMpIW=NULL;
        return;
        }
    temp_fFAMpIW=(VkDeviceImageMemoryRequirements*)malloc(sizeof(VkDeviceImageMemoryRequirements));
[&]() {
*(temp_fFAMpIW)=deserialize_VkDeviceImageMemoryRequirements(data_json["members"]["pInfo"]);}();
}();pInfo=temp_fFAMpIW;}();
VkMemoryRequirements2* pMemoryRequirements
        ;
[&]() {

        if (data_json["members"]["pMemoryRequirements"].contains("null")){
        pMemoryRequirements=NULL;
        return;
        }
    pMemoryRequirements=(VkMemoryRequirements2*)malloc(sizeof(VkMemoryRequirements2));
[&]() {
*(pMemoryRequirements)=deserialize_VkMemoryRequirements2(data_json["members"]["pMemoryRequirements"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetDeviceImageMemoryRequirements)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDeviceImageMemoryRequirements");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetDeviceImageMemoryRequirements)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDeviceImageMemoryRequirements");
    }  
    
call_function(device, pInfo, pMemoryRequirements);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pInfo"]=[&]() {
    json return_XfvUMPP=json({});
    
        if (pInfo==NULL){
            return_XfvUMPP["null"]=true;
            return return_XfvUMPP;
        }
        return_XfvUMPP=[&]() {
    json return_tLUfmzr=json({});
    return serialize_VkDeviceImageMemoryRequirements(*pInfo);}();
return return_XfvUMPP;}();
result["members"]["pMemoryRequirements"]=[&]() {
    json return_aEBODbS=json({});
    
        if (pMemoryRequirements==NULL){
            return_aEBODbS["null"]=true;
            return return_aEBODbS;
        }
        return_aEBODbS=[&]() {
    json return_hGmebmD=json({});
    return serialize_VkMemoryRequirements2(*pMemoryRequirements);}();
return return_aEBODbS;}();

        writeToConn(result);
    }

    void handle_vkGetDeviceImageMemoryRequirementsKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDeviceImageMemoryRequirements* pInfo
            ;
[&]() {
VkDeviceImageMemoryRequirements* temp_fFAMpIW;[&]() {

        if (data_json["members"]["pInfo"].contains("null")){
        temp_fFAMpIW=NULL;
        return;
        }
    temp_fFAMpIW=(VkDeviceImageMemoryRequirements*)malloc(sizeof(VkDeviceImageMemoryRequirements));
[&]() {
*(temp_fFAMpIW)=deserialize_VkDeviceImageMemoryRequirements(data_json["members"]["pInfo"]);}();
}();pInfo=temp_fFAMpIW;}();
VkMemoryRequirements2* pMemoryRequirements
        ;
[&]() {

        if (data_json["members"]["pMemoryRequirements"].contains("null")){
        pMemoryRequirements=NULL;
        return;
        }
    pMemoryRequirements=(VkMemoryRequirements2*)malloc(sizeof(VkMemoryRequirements2));
[&]() {
*(pMemoryRequirements)=deserialize_VkMemoryRequirements2(data_json["members"]["pMemoryRequirements"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetDeviceImageMemoryRequirementsKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDeviceImageMemoryRequirementsKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetDeviceImageMemoryRequirementsKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDeviceImageMemoryRequirementsKHR");
    }  
    
call_function(device, pInfo, pMemoryRequirements);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pInfo"]=[&]() {
    json return_XfvUMPP=json({});
    
        if (pInfo==NULL){
            return_XfvUMPP["null"]=true;
            return return_XfvUMPP;
        }
        return_XfvUMPP=[&]() {
    json return_tLUfmzr=json({});
    return serialize_VkDeviceImageMemoryRequirements(*pInfo);}();
return return_XfvUMPP;}();
result["members"]["pMemoryRequirements"]=[&]() {
    json return_aEBODbS=json({});
    
        if (pMemoryRequirements==NULL){
            return_aEBODbS["null"]=true;
            return return_aEBODbS;
        }
        return_aEBODbS=[&]() {
    json return_hGmebmD=json({});
    return serialize_VkMemoryRequirements2(*pMemoryRequirements);}();
return return_aEBODbS;}();

        writeToConn(result);
    }

    void handle_vkGetDeviceImageSparseMemoryRequirements(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDeviceImageMemoryRequirements* pInfo
            ;
[&]() {
VkDeviceImageMemoryRequirements* temp_fFAMpIW;[&]() {

        if (data_json["members"]["pInfo"].contains("null")){
        temp_fFAMpIW=NULL;
        return;
        }
    temp_fFAMpIW=(VkDeviceImageMemoryRequirements*)malloc(sizeof(VkDeviceImageMemoryRequirements));
[&]() {
*(temp_fFAMpIW)=deserialize_VkDeviceImageMemoryRequirements(data_json["members"]["pInfo"]);}();
}();pInfo=temp_fFAMpIW;}();
uint32_t* pSparseMemoryRequirementCount
            ;
[&]() {

        if (data_json["members"]["pSparseMemoryRequirementCount"].contains("null")){
        pSparseMemoryRequirementCount=NULL;
        return;
        }
    pSparseMemoryRequirementCount=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pSparseMemoryRequirementCount)=deserialize_uint32_t(data_json["members"]["pSparseMemoryRequirementCount"]);}();
}();
VkSparseImageMemoryRequirements2* pSparseMemoryRequirements
        ;
[&]() {

        if (data_json["members"]["pSparseMemoryRequirements"].contains("null")){
        pSparseMemoryRequirements=NULL;
        return;
        }
    pSparseMemoryRequirements=(VkSparseImageMemoryRequirements2*)malloc(*pSparseMemoryRequirementCount*sizeof(VkSparseImageMemoryRequirements2));
        for (int xriUdCT=0; xriUdCT < *pSparseMemoryRequirementCount; xriUdCT++){
            [&]() {
pSparseMemoryRequirements[xriUdCT]=deserialize_VkSparseImageMemoryRequirements2(data_json["members"]["pSparseMemoryRequirements"]["members"][xriUdCT]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetDeviceImageSparseMemoryRequirements)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDeviceImageSparseMemoryRequirements");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetDeviceImageSparseMemoryRequirements)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDeviceImageSparseMemoryRequirements");
    }  
    
call_function(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pInfo"]=[&]() {
    json return_XfvUMPP=json({});
    
        if (pInfo==NULL){
            return_XfvUMPP["null"]=true;
            return return_XfvUMPP;
        }
        return_XfvUMPP=[&]() {
    json return_tLUfmzr=json({});
    return serialize_VkDeviceImageMemoryRequirements(*pInfo);}();
return return_XfvUMPP;}();
result["members"]["pSparseMemoryRequirementCount"]=[&]() {
    json return_HoOHmri=json({});
    
        if (pSparseMemoryRequirementCount==NULL){
            return_HoOHmri["null"]=true;
            return return_HoOHmri;
        }
        return_HoOHmri=[&]() {
    json return_auEoviK=json({});
    return serialize_uint32_t(*pSparseMemoryRequirementCount);}();
return return_HoOHmri;}();
result["members"]["pSparseMemoryRequirements"]=[&]() {
    json return_iRLsorw=json({});
    
        if (pSparseMemoryRequirements==NULL){
            return_iRLsorw["null"]=true;
            return return_iRLsorw;
        }
        
        return_iRLsorw["members"]={};
        for(int iRLsorw=0; iRLsorw < *pSparseMemoryRequirementCount; iRLsorw++){
            json temp;
            temp=[&]() {
    json return_hRAaTcF=json({});
    return serialize_VkSparseImageMemoryRequirements2(pSparseMemoryRequirements[iRLsorw]);}();
            return_iRLsorw["members"].push_back(temp);
        }
        return return_iRLsorw;
        }();

        writeToConn(result);
    }

    void handle_vkGetDeviceImageSparseMemoryRequirementsKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDeviceImageMemoryRequirements* pInfo
            ;
[&]() {
VkDeviceImageMemoryRequirements* temp_fFAMpIW;[&]() {

        if (data_json["members"]["pInfo"].contains("null")){
        temp_fFAMpIW=NULL;
        return;
        }
    temp_fFAMpIW=(VkDeviceImageMemoryRequirements*)malloc(sizeof(VkDeviceImageMemoryRequirements));
[&]() {
*(temp_fFAMpIW)=deserialize_VkDeviceImageMemoryRequirements(data_json["members"]["pInfo"]);}();
}();pInfo=temp_fFAMpIW;}();
uint32_t* pSparseMemoryRequirementCount
            ;
[&]() {

        if (data_json["members"]["pSparseMemoryRequirementCount"].contains("null")){
        pSparseMemoryRequirementCount=NULL;
        return;
        }
    pSparseMemoryRequirementCount=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pSparseMemoryRequirementCount)=deserialize_uint32_t(data_json["members"]["pSparseMemoryRequirementCount"]);}();
}();
VkSparseImageMemoryRequirements2* pSparseMemoryRequirements
        ;
[&]() {

        if (data_json["members"]["pSparseMemoryRequirements"].contains("null")){
        pSparseMemoryRequirements=NULL;
        return;
        }
    pSparseMemoryRequirements=(VkSparseImageMemoryRequirements2*)malloc(*pSparseMemoryRequirementCount*sizeof(VkSparseImageMemoryRequirements2));
        for (int xriUdCT=0; xriUdCT < *pSparseMemoryRequirementCount; xriUdCT++){
            [&]() {
pSparseMemoryRequirements[xriUdCT]=deserialize_VkSparseImageMemoryRequirements2(data_json["members"]["pSparseMemoryRequirements"]["members"][xriUdCT]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetDeviceImageSparseMemoryRequirementsKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDeviceImageSparseMemoryRequirementsKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetDeviceImageSparseMemoryRequirementsKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDeviceImageSparseMemoryRequirementsKHR");
    }  
    
call_function(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pInfo"]=[&]() {
    json return_XfvUMPP=json({});
    
        if (pInfo==NULL){
            return_XfvUMPP["null"]=true;
            return return_XfvUMPP;
        }
        return_XfvUMPP=[&]() {
    json return_tLUfmzr=json({});
    return serialize_VkDeviceImageMemoryRequirements(*pInfo);}();
return return_XfvUMPP;}();
result["members"]["pSparseMemoryRequirementCount"]=[&]() {
    json return_HoOHmri=json({});
    
        if (pSparseMemoryRequirementCount==NULL){
            return_HoOHmri["null"]=true;
            return return_HoOHmri;
        }
        return_HoOHmri=[&]() {
    json return_auEoviK=json({});
    return serialize_uint32_t(*pSparseMemoryRequirementCount);}();
return return_HoOHmri;}();
result["members"]["pSparseMemoryRequirements"]=[&]() {
    json return_iRLsorw=json({});
    
        if (pSparseMemoryRequirements==NULL){
            return_iRLsorw["null"]=true;
            return return_iRLsorw;
        }
        
        return_iRLsorw["members"]={};
        for(int iRLsorw=0; iRLsorw < *pSparseMemoryRequirementCount; iRLsorw++){
            json temp;
            temp=[&]() {
    json return_hRAaTcF=json({});
    return serialize_VkSparseImageMemoryRequirements2(pSparseMemoryRequirements[iRLsorw]);}();
            return_iRLsorw["members"].push_back(temp);
        }
        return return_iRLsorw;
        }();

        writeToConn(result);
    }

    void handle_vkCreateSamplerYcbcrConversion(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkSamplerYcbcrConversionCreateInfo* pCreateInfo
            ;
[&]() {
VkSamplerYcbcrConversionCreateInfo* temp_nrrmWsA;[&]() {

        if (data_json["members"]["pCreateInfo"].contains("null")){
        temp_nrrmWsA=NULL;
        return;
        }
    temp_nrrmWsA=(VkSamplerYcbcrConversionCreateInfo*)malloc(sizeof(VkSamplerYcbcrConversionCreateInfo));
[&]() {
*(temp_nrrmWsA)=deserialize_VkSamplerYcbcrConversionCreateInfo(data_json["members"]["pCreateInfo"]);}();
}();pCreateInfo=temp_nrrmWsA;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkSamplerYcbcrConversion* pYcbcrConversion
        ;
[&]() {

        if (data_json["members"]["pYcbcrConversion"].contains("null")){
        pYcbcrConversion=NULL;
        return;
        }
    pYcbcrConversion=(VkSamplerYcbcrConversion*)malloc(sizeof(VkSamplerYcbcrConversion));
[&]() {
*(pYcbcrConversion)=deserialize_VkSamplerYcbcrConversion(data_json["members"]["pYcbcrConversion"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreateSamplerYcbcrConversion)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateSamplerYcbcrConversion");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreateSamplerYcbcrConversion)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateSamplerYcbcrConversion");
    }  
    
auto return_value=call_function(device, pCreateInfo, pAllocator, pYcbcrConversion);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_RAjMBpb=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pCreateInfo"]=[&]() {
    json return_hdhefTH=json({});
    
        if (pCreateInfo==NULL){
            return_hdhefTH["null"]=true;
            return return_hdhefTH;
        }
        return_hdhefTH=[&]() {
    json return_rrGxmFU=json({});
    return serialize_VkSamplerYcbcrConversionCreateInfo(*pCreateInfo);}();
return return_hdhefTH;}();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pYcbcrConversion"]=[&]() {
    json return_lClrQTW=json({});
    
        if (pYcbcrConversion==NULL){
            return_lClrQTW["null"]=true;
            return return_lClrQTW;
        }
        return_lClrQTW=[&]() {
    json return_ZQLuRXM=json({});
    return serialize_VkSamplerYcbcrConversion(*pYcbcrConversion);}();
return return_lClrQTW;}();

        writeToConn(result);
    }

    void handle_vkCreateSamplerYcbcrConversionKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkSamplerYcbcrConversionCreateInfo* pCreateInfo
            ;
[&]() {
VkSamplerYcbcrConversionCreateInfo* temp_nrrmWsA;[&]() {

        if (data_json["members"]["pCreateInfo"].contains("null")){
        temp_nrrmWsA=NULL;
        return;
        }
    temp_nrrmWsA=(VkSamplerYcbcrConversionCreateInfo*)malloc(sizeof(VkSamplerYcbcrConversionCreateInfo));
[&]() {
*(temp_nrrmWsA)=deserialize_VkSamplerYcbcrConversionCreateInfo(data_json["members"]["pCreateInfo"]);}();
}();pCreateInfo=temp_nrrmWsA;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkSamplerYcbcrConversion* pYcbcrConversion
        ;
[&]() {

        if (data_json["members"]["pYcbcrConversion"].contains("null")){
        pYcbcrConversion=NULL;
        return;
        }
    pYcbcrConversion=(VkSamplerYcbcrConversion*)malloc(sizeof(VkSamplerYcbcrConversion));
[&]() {
*(pYcbcrConversion)=deserialize_VkSamplerYcbcrConversion(data_json["members"]["pYcbcrConversion"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreateSamplerYcbcrConversionKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateSamplerYcbcrConversionKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreateSamplerYcbcrConversionKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateSamplerYcbcrConversionKHR");
    }  
    
auto return_value=call_function(device, pCreateInfo, pAllocator, pYcbcrConversion);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_kwDSYcW=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pCreateInfo"]=[&]() {
    json return_hdhefTH=json({});
    
        if (pCreateInfo==NULL){
            return_hdhefTH["null"]=true;
            return return_hdhefTH;
        }
        return_hdhefTH=[&]() {
    json return_rrGxmFU=json({});
    return serialize_VkSamplerYcbcrConversionCreateInfo(*pCreateInfo);}();
return return_hdhefTH;}();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pYcbcrConversion"]=[&]() {
    json return_lClrQTW=json({});
    
        if (pYcbcrConversion==NULL){
            return_lClrQTW["null"]=true;
            return return_lClrQTW;
        }
        return_lClrQTW=[&]() {
    json return_ZQLuRXM=json({});
    return serialize_VkSamplerYcbcrConversion(*pYcbcrConversion);}();
return return_lClrQTW;}();

        writeToConn(result);
    }

    void handle_vkDestroySamplerYcbcrConversion(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkSamplerYcbcrConversion ycbcrConversion
            ;
[&]() {
ycbcrConversion=deserialize_VkSamplerYcbcrConversion(data_json["members"]["ycbcrConversion"]);}();
VkAllocationCallbacks* pAllocator
        ;
[&]() {
VkAllocationCallbacks* temp_VAmhMvJ;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_VAmhMvJ=NULL;
        return;
        }
    temp_VAmhMvJ=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_VAmhMvJ)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_VAmhMvJ;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkDestroySamplerYcbcrConversion)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroySamplerYcbcrConversion");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkDestroySamplerYcbcrConversion)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroySamplerYcbcrConversion");
    }  
    
call_function(device, ycbcrConversion, pAllocator);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["ycbcrConversion"]=[&]() {
    json return_urCDhJJ=json({});
    return serialize_VkSamplerYcbcrConversion(ycbcrConversion);}();
result["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();

        writeToConn(result);
    }

    void handle_vkDestroySamplerYcbcrConversionKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkSamplerYcbcrConversion ycbcrConversion
            ;
[&]() {
ycbcrConversion=deserialize_VkSamplerYcbcrConversion(data_json["members"]["ycbcrConversion"]);}();
VkAllocationCallbacks* pAllocator
        ;
[&]() {
VkAllocationCallbacks* temp_VAmhMvJ;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_VAmhMvJ=NULL;
        return;
        }
    temp_VAmhMvJ=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_VAmhMvJ)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_VAmhMvJ;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkDestroySamplerYcbcrConversionKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroySamplerYcbcrConversionKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkDestroySamplerYcbcrConversionKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroySamplerYcbcrConversionKHR");
    }  
    
call_function(device, ycbcrConversion, pAllocator);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["ycbcrConversion"]=[&]() {
    json return_urCDhJJ=json({});
    return serialize_VkSamplerYcbcrConversion(ycbcrConversion);}();
result["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();

        writeToConn(result);
    }

    void handle_vkGetDeviceQueue2(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDeviceQueueInfo2* pQueueInfo
            ;
[&]() {
VkDeviceQueueInfo2* temp_tLaXoCX;[&]() {

        if (data_json["members"]["pQueueInfo"].contains("null")){
        temp_tLaXoCX=NULL;
        return;
        }
    temp_tLaXoCX=(VkDeviceQueueInfo2*)malloc(sizeof(VkDeviceQueueInfo2));
[&]() {
*(temp_tLaXoCX)=deserialize_VkDeviceQueueInfo2(data_json["members"]["pQueueInfo"]);}();
}();pQueueInfo=temp_tLaXoCX;}();
VkQueue* pQueue
        ;
[&]() {

        if (data_json["members"]["pQueue"].contains("null")){
        pQueue=NULL;
        return;
        }
    pQueue=(VkQueue*)malloc(sizeof(VkQueue));
[&]() {
*(pQueue)=deserialize_VkQueue(data_json["members"]["pQueue"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetDeviceQueue2)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDeviceQueue2");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetDeviceQueue2)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDeviceQueue2");
    }  
    
call_function(device, pQueueInfo, pQueue);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pQueueInfo"]=[&]() {
    json return_RBMnySx=json({});
    
        if (pQueueInfo==NULL){
            return_RBMnySx["null"]=true;
            return return_RBMnySx;
        }
        return_RBMnySx=[&]() {
    json return_nUzFkAr=json({});
    return serialize_VkDeviceQueueInfo2(*pQueueInfo);}();
return return_RBMnySx;}();
result["members"]["pQueue"]=[&]() {
    json return_WCWxniJ=json({});
    
        if (pQueue==NULL){
            return_WCWxniJ["null"]=true;
            return return_WCWxniJ;
        }
        return_WCWxniJ=[&]() {
    json return_NsjiHxF=json({});
    return serialize_VkQueue(*pQueue);}();
return return_WCWxniJ;}();

        writeToConn(result);
    }

    void handle_vkCreateValidationCacheEXT(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkValidationCacheCreateInfoEXT* pCreateInfo
            ;
[&]() {
VkValidationCacheCreateInfoEXT* temp_lNRqYGW;[&]() {

        if (data_json["members"]["pCreateInfo"].contains("null")){
        temp_lNRqYGW=NULL;
        return;
        }
    temp_lNRqYGW=(VkValidationCacheCreateInfoEXT*)malloc(sizeof(VkValidationCacheCreateInfoEXT));
[&]() {
*(temp_lNRqYGW)=deserialize_VkValidationCacheCreateInfoEXT(data_json["members"]["pCreateInfo"]);}();
}();pCreateInfo=temp_lNRqYGW;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkValidationCacheEXT* pValidationCache
        ;
[&]() {

        if (data_json["members"]["pValidationCache"].contains("null")){
        pValidationCache=NULL;
        return;
        }
    pValidationCache=(VkValidationCacheEXT*)malloc(sizeof(VkValidationCacheEXT));
[&]() {
*(pValidationCache)=deserialize_VkValidationCacheEXT(data_json["members"]["pValidationCache"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreateValidationCacheEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateValidationCacheEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreateValidationCacheEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateValidationCacheEXT");
    }  
    
auto return_value=call_function(device, pCreateInfo, pAllocator, pValidationCache);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_IksoYEV=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pCreateInfo"]=[&]() {
    json return_vHvwxxp=json({});
    
        if (pCreateInfo==NULL){
            return_vHvwxxp["null"]=true;
            return return_vHvwxxp;
        }
        return_vHvwxxp=[&]() {
    json return_FXyxAMF=json({});
    return serialize_VkValidationCacheCreateInfoEXT(*pCreateInfo);}();
return return_vHvwxxp;}();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pValidationCache"]=[&]() {
    json return_gwTOVQJ=json({});
    
        if (pValidationCache==NULL){
            return_gwTOVQJ["null"]=true;
            return return_gwTOVQJ;
        }
        return_gwTOVQJ=[&]() {
    json return_FjUsjMy=json({});
    return serialize_VkValidationCacheEXT(*pValidationCache);}();
return return_gwTOVQJ;}();

        writeToConn(result);
    }

    void handle_vkDestroyValidationCacheEXT(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkValidationCacheEXT validationCache
            ;
[&]() {
validationCache=deserialize_VkValidationCacheEXT(data_json["members"]["validationCache"]);}();
VkAllocationCallbacks* pAllocator
        ;
[&]() {
VkAllocationCallbacks* temp_VAmhMvJ;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_VAmhMvJ=NULL;
        return;
        }
    temp_VAmhMvJ=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_VAmhMvJ)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_VAmhMvJ;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkDestroyValidationCacheEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyValidationCacheEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkDestroyValidationCacheEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyValidationCacheEXT");
    }  
    
call_function(device, validationCache, pAllocator);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["validationCache"]=[&]() {
    json return_QCMJpoc=json({});
    return serialize_VkValidationCacheEXT(validationCache);}();
result["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();

        writeToConn(result);
    }

    void handle_vkGetValidationCacheDataEXT(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkValidationCacheEXT validationCache
            ;
[&]() {
validationCache=deserialize_VkValidationCacheEXT(data_json["members"]["validationCache"]);}();
size_t* pDataSize
            ;
[&]() {

        if (data_json["members"]["pDataSize"].contains("null")){
        pDataSize=NULL;
        return;
        }
    pDataSize=(size_t*)malloc(sizeof(size_t));
[&]() {
*(pDataSize)=deserialize_size_t(data_json["members"]["pDataSize"]);}();
}();
void* pData
        ;
[&]() {

        if (data_json["members"]["pData"].contains("null")){
        pData=NULL;
        return;
        }
    pData=deserialize_void_p(data_json["members"]["pData"]);
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetValidationCacheDataEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetValidationCacheDataEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetValidationCacheDataEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetValidationCacheDataEXT");
    }  
    
auto return_value=call_function(device, validationCache, pDataSize, pData);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_UVolKko=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["validationCache"]=[&]() {
    json return_QCMJpoc=json({});
    return serialize_VkValidationCacheEXT(validationCache);}();
result["members"]["pDataSize"]=[&]() {
    json return_DeyPpRh=json({});
    
        if (pDataSize==NULL){
            return_DeyPpRh["null"]=true;
            return return_DeyPpRh;
        }
        return_DeyPpRh=[&]() {
    json return_ffvzSRv=json({});
    return serialize_size_t(*pDataSize);}();
return return_DeyPpRh;}();
result["members"]["pData"]=[&]() {
    json return_MOqETBu=json({});
    
        if (pData==NULL){
            return_MOqETBu["null"]=true;
            return return_MOqETBu;
        }
        return serialize_void_p(pData);
}();

        writeToConn(result);
    }

    void handle_vkMergeValidationCachesEXT(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkValidationCacheEXT dstCache
            ;
[&]() {
dstCache=deserialize_VkValidationCacheEXT(data_json["members"]["dstCache"]);}();
uint32_t srcCacheCount
            ;
[&]() {
srcCacheCount=deserialize_uint32_t(data_json["members"]["srcCacheCount"]);}();
VkValidationCacheEXT* pSrcCaches
        ;
[&]() {
VkValidationCacheEXT* temp_lnvZKMH;[&]() {

        if (data_json["members"]["pSrcCaches"].contains("null")){
        temp_lnvZKMH=NULL;
        return;
        }
    temp_lnvZKMH=(VkValidationCacheEXT*)malloc(srcCacheCount*sizeof(VkValidationCacheEXT));
        for (int UosrcFa=0; UosrcFa < srcCacheCount; UosrcFa++){
            [&]() {
temp_lnvZKMH[UosrcFa]=deserialize_VkValidationCacheEXT(data_json["members"]["pSrcCaches"]["members"][UosrcFa]);}();;
        }
        }();pSrcCaches=temp_lnvZKMH;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkMergeValidationCachesEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkMergeValidationCachesEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkMergeValidationCachesEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkMergeValidationCachesEXT");
    }  
    
auto return_value=call_function(device, dstCache, srcCacheCount, pSrcCaches);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_ILTJdPQ=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["dstCache"]=[&]() {
    json return_YrSEdOD=json({});
    return serialize_VkValidationCacheEXT(dstCache);}();
result["members"]["srcCacheCount"]=[&]() {
    json return_agrMtpa=json({});
    return serialize_uint32_t(srcCacheCount);}();
result["members"]["pSrcCaches"]=[&]() {
    json return_NhjxrOm=json({});
    
        if (pSrcCaches==NULL){
            return_NhjxrOm["null"]=true;
            return return_NhjxrOm;
        }
        
        return_NhjxrOm["members"]={};
        for(int NhjxrOm=0; NhjxrOm < srcCacheCount; NhjxrOm++){
            json temp;
            temp=[&]() {
    json return_UxJKTXX=json({});
    return serialize_VkValidationCacheEXT(pSrcCaches[NhjxrOm]);}();
            return_NhjxrOm["members"].push_back(temp);
        }
        return return_NhjxrOm;
        }();

        writeToConn(result);
    }

    void handle_vkGetDescriptorSetLayoutSupport(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDescriptorSetLayoutCreateInfo* pCreateInfo
            ;
[&]() {
VkDescriptorSetLayoutCreateInfo* temp_EtrEDqi;[&]() {

        if (data_json["members"]["pCreateInfo"].contains("null")){
        temp_EtrEDqi=NULL;
        return;
        }
    temp_EtrEDqi=(VkDescriptorSetLayoutCreateInfo*)malloc(sizeof(VkDescriptorSetLayoutCreateInfo));
[&]() {
*(temp_EtrEDqi)=deserialize_VkDescriptorSetLayoutCreateInfo(data_json["members"]["pCreateInfo"]);}();
}();pCreateInfo=temp_EtrEDqi;}();
VkDescriptorSetLayoutSupport* pSupport
        ;
[&]() {

        if (data_json["members"]["pSupport"].contains("null")){
        pSupport=NULL;
        return;
        }
    pSupport=(VkDescriptorSetLayoutSupport*)malloc(sizeof(VkDescriptorSetLayoutSupport));
[&]() {
*(pSupport)=deserialize_VkDescriptorSetLayoutSupport(data_json["members"]["pSupport"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetDescriptorSetLayoutSupport)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDescriptorSetLayoutSupport");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetDescriptorSetLayoutSupport)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDescriptorSetLayoutSupport");
    }  
    
call_function(device, pCreateInfo, pSupport);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pCreateInfo"]=[&]() {
    json return_DbQjwWK=json({});
    
        if (pCreateInfo==NULL){
            return_DbQjwWK["null"]=true;
            return return_DbQjwWK;
        }
        return_DbQjwWK=[&]() {
    json return_vQZpbNT=json({});
    return serialize_VkDescriptorSetLayoutCreateInfo(*pCreateInfo);}();
return return_DbQjwWK;}();
result["members"]["pSupport"]=[&]() {
    json return_RLuZPkt=json({});
    
        if (pSupport==NULL){
            return_RLuZPkt["null"]=true;
            return return_RLuZPkt;
        }
        return_RLuZPkt=[&]() {
    json return_WFJIsPM=json({});
    return serialize_VkDescriptorSetLayoutSupport(*pSupport);}();
return return_RLuZPkt;}();

        writeToConn(result);
    }

    void handle_vkGetDescriptorSetLayoutSupportKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDescriptorSetLayoutCreateInfo* pCreateInfo
            ;
[&]() {
VkDescriptorSetLayoutCreateInfo* temp_EtrEDqi;[&]() {

        if (data_json["members"]["pCreateInfo"].contains("null")){
        temp_EtrEDqi=NULL;
        return;
        }
    temp_EtrEDqi=(VkDescriptorSetLayoutCreateInfo*)malloc(sizeof(VkDescriptorSetLayoutCreateInfo));
[&]() {
*(temp_EtrEDqi)=deserialize_VkDescriptorSetLayoutCreateInfo(data_json["members"]["pCreateInfo"]);}();
}();pCreateInfo=temp_EtrEDqi;}();
VkDescriptorSetLayoutSupport* pSupport
        ;
[&]() {

        if (data_json["members"]["pSupport"].contains("null")){
        pSupport=NULL;
        return;
        }
    pSupport=(VkDescriptorSetLayoutSupport*)malloc(sizeof(VkDescriptorSetLayoutSupport));
[&]() {
*(pSupport)=deserialize_VkDescriptorSetLayoutSupport(data_json["members"]["pSupport"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetDescriptorSetLayoutSupportKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDescriptorSetLayoutSupportKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetDescriptorSetLayoutSupportKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDescriptorSetLayoutSupportKHR");
    }  
    
call_function(device, pCreateInfo, pSupport);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pCreateInfo"]=[&]() {
    json return_DbQjwWK=json({});
    
        if (pCreateInfo==NULL){
            return_DbQjwWK["null"]=true;
            return return_DbQjwWK;
        }
        return_DbQjwWK=[&]() {
    json return_vQZpbNT=json({});
    return serialize_VkDescriptorSetLayoutCreateInfo(*pCreateInfo);}();
return return_DbQjwWK;}();
result["members"]["pSupport"]=[&]() {
    json return_RLuZPkt=json({});
    
        if (pSupport==NULL){
            return_RLuZPkt["null"]=true;
            return return_RLuZPkt;
        }
        return_RLuZPkt=[&]() {
    json return_WFJIsPM=json({});
    return serialize_VkDescriptorSetLayoutSupport(*pSupport);}();
return return_RLuZPkt;}();

        writeToConn(result);
    }

    void handle_vkGetShaderInfoAMD(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkPipeline pipeline
            ;
[&]() {
pipeline=deserialize_VkPipeline(data_json["members"]["pipeline"]);}();
VkShaderStageFlagBits shaderStage
            ;
[&]() {
shaderStage=deserialize_VkShaderStageFlagBits(data_json["members"]["shaderStage"]);}();
VkShaderInfoTypeAMD infoType
            ;
[&]() {
infoType=deserialize_VkShaderInfoTypeAMD(data_json["members"]["infoType"]);}();
size_t* pInfoSize
            ;
[&]() {

        if (data_json["members"]["pInfoSize"].contains("null")){
        pInfoSize=NULL;
        return;
        }
    pInfoSize=(size_t*)malloc(sizeof(size_t));
[&]() {
*(pInfoSize)=deserialize_size_t(data_json["members"]["pInfoSize"]);}();
}();
void* pInfo
        ;
[&]() {

        if (data_json["members"]["pInfo"].contains("null")){
        pInfo=NULL;
        return;
        }
    pInfo=deserialize_void_p(data_json["members"]["pInfo"]);
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetShaderInfoAMD)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetShaderInfoAMD");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetShaderInfoAMD)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetShaderInfoAMD");
    }  
    
auto return_value=call_function(device, pipeline, shaderStage, infoType, pInfoSize, pInfo);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_tccuYcQ=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pipeline"]=[&]() {
    json return_xIUyQCN=json({});
    return serialize_VkPipeline(pipeline);}();
result["members"]["shaderStage"]=[&]() {
    json return_WnCdRPH=json({});
    return serialize_VkShaderStageFlagBits(shaderStage);}();
result["members"]["infoType"]=[&]() {
    json return_ZxWKiTr=json({});
    return serialize_VkShaderInfoTypeAMD(infoType);}();
result["members"]["pInfoSize"]=[&]() {
    json return_KUPLRHW=json({});
    
        if (pInfoSize==NULL){
            return_KUPLRHW["null"]=true;
            return return_KUPLRHW;
        }
        return_KUPLRHW=[&]() {
    json return_uoeGvBd=json({});
    return serialize_size_t(*pInfoSize);}();
return return_KUPLRHW;}();
result["members"]["pInfo"]=[&]() {
    json return_qcUUUDM=json({});
    
        if (pInfo==NULL){
            return_qcUUUDM["null"]=true;
            return return_qcUUUDM;
        }
        return serialize_void_p(pInfo);
}();

        writeToConn(result);
    }

    void handle_vkSetLocalDimmingAMD(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkSwapchainKHR swapChain
            ;
[&]() {
swapChain=deserialize_VkSwapchainKHR(data_json["members"]["swapChain"]);}();
VkBool32 localDimmingEnable
        ;
[&]() {
[&]() {
localDimmingEnable=deserialize_uint32_t(data_json["members"]["localDimmingEnable"]);}();}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkSetLocalDimmingAMD)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkSetLocalDimmingAMD");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkSetLocalDimmingAMD)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkSetLocalDimmingAMD");
    }  
    
call_function(device, swapChain, localDimmingEnable);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["swapChain"]=[&]() {
    json return_PeXJhje=json({});
    return serialize_VkSwapchainKHR(swapChain);}();
result["members"]["localDimmingEnable"]=[&]() {
    json return_gsXxvNE=json({});
    return_gsXxvNE=[&]() {
    json return_eUeubzD=json({});
    return serialize_uint32_t(localDimmingEnable);}();return return_gsXxvNE;}();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
uint32_t* pTimeDomainCount
            ;
[&]() {

        if (data_json["members"]["pTimeDomainCount"].contains("null")){
        pTimeDomainCount=NULL;
        return;
        }
    pTimeDomainCount=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pTimeDomainCount)=deserialize_uint32_t(data_json["members"]["pTimeDomainCount"]);}();
}();
VkTimeDomainEXT* pTimeDomains
        ;
[&]() {

        if (data_json["members"]["pTimeDomains"].contains("null")){
        pTimeDomains=NULL;
        return;
        }
    pTimeDomains=(VkTimeDomainEXT*)malloc(*pTimeDomainCount*sizeof(VkTimeDomainEXT));
        for (int tAsaVZV=0; tAsaVZV < *pTimeDomainCount; tAsaVZV++){
            [&]() {
pTimeDomains[tAsaVZV]=deserialize_VkTimeDomainEXT(data_json["members"]["pTimeDomains"]["members"][tAsaVZV]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceCalibrateableTimeDomainsEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceCalibrateableTimeDomainsEXT");
    }  
    
auto return_value=call_function(physicalDevice, pTimeDomainCount, pTimeDomains);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_UFovXvH=json({});
    return serialize_VkResult(return_value);}();
result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["pTimeDomainCount"]=[&]() {
    json return_AxwjReb=json({});
    
        if (pTimeDomainCount==NULL){
            return_AxwjReb["null"]=true;
            return return_AxwjReb;
        }
        return_AxwjReb=[&]() {
    json return_PVfsOkd=json({});
    return serialize_uint32_t(*pTimeDomainCount);}();
return return_AxwjReb;}();
result["members"]["pTimeDomains"]=[&]() {
    json return_AfevBYr=json({});
    
        if (pTimeDomains==NULL){
            return_AfevBYr["null"]=true;
            return return_AfevBYr;
        }
        
        return_AfevBYr["members"]={};
        for(int AfevBYr=0; AfevBYr < *pTimeDomainCount; AfevBYr++){
            json temp;
            temp=[&]() {
    json return_rMZzNXw=json({});
    return serialize_VkTimeDomainEXT(pTimeDomains[AfevBYr]);}();
            return_AfevBYr["members"].push_back(temp);
        }
        return return_AfevBYr;
        }();

        writeToConn(result);
    }

    void handle_vkGetCalibratedTimestampsEXT(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
uint32_t timestampCount
            ;
[&]() {
timestampCount=deserialize_uint32_t(data_json["members"]["timestampCount"]);}();
VkCalibratedTimestampInfoEXT* pTimestampInfos
            ;
[&]() {
VkCalibratedTimestampInfoEXT* temp_qYZBSzi;[&]() {

        if (data_json["members"]["pTimestampInfos"].contains("null")){
        temp_qYZBSzi=NULL;
        return;
        }
    temp_qYZBSzi=(VkCalibratedTimestampInfoEXT*)malloc(timestampCount*sizeof(VkCalibratedTimestampInfoEXT));
        for (int TByXzUE=0; TByXzUE < timestampCount; TByXzUE++){
            [&]() {
temp_qYZBSzi[TByXzUE]=deserialize_VkCalibratedTimestampInfoEXT(data_json["members"]["pTimestampInfos"]["members"][TByXzUE]);}();;
        }
        }();pTimestampInfos=temp_qYZBSzi;}();
uint64_t* pTimestamps
            ;
[&]() {

        if (data_json["members"]["pTimestamps"].contains("null")){
        pTimestamps=NULL;
        return;
        }
    pTimestamps=(uint64_t*)malloc(timestampCount*sizeof(uint64_t));
        for (int EIZgEpA=0; EIZgEpA < timestampCount; EIZgEpA++){
            [&]() {
pTimestamps[EIZgEpA]=deserialize_uint64_t(data_json["members"]["pTimestamps"]["members"][EIZgEpA]);}();;
        }
        }();
uint64_t* pMaxDeviation
        ;
[&]() {

        if (data_json["members"]["pMaxDeviation"].contains("null")){
        pMaxDeviation=NULL;
        return;
        }
    pMaxDeviation=(uint64_t*)malloc(sizeof(uint64_t));
[&]() {
*(pMaxDeviation)=deserialize_uint64_t(data_json["members"]["pMaxDeviation"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetCalibratedTimestampsEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetCalibratedTimestampsEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetCalibratedTimestampsEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetCalibratedTimestampsEXT");
    }  
    
auto return_value=call_function(device, timestampCount, pTimestampInfos, pTimestamps, pMaxDeviation);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_ImqfPFd=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["timestampCount"]=[&]() {
    json return_fQlIzBf=json({});
    return serialize_uint32_t(timestampCount);}();
result["members"]["pTimestampInfos"]=[&]() {
    json return_CXeOIVu=json({});
    
        if (pTimestampInfos==NULL){
            return_CXeOIVu["null"]=true;
            return return_CXeOIVu;
        }
        
        return_CXeOIVu["members"]={};
        for(int CXeOIVu=0; CXeOIVu < timestampCount; CXeOIVu++){
            json temp;
            temp=[&]() {
    json return_wVKqfWO=json({});
    return serialize_VkCalibratedTimestampInfoEXT(pTimestampInfos[CXeOIVu]);}();
            return_CXeOIVu["members"].push_back(temp);
        }
        return return_CXeOIVu;
        }();
result["members"]["pTimestamps"]=[&]() {
    json return_RvqbfBY=json({});
    
        if (pTimestamps==NULL){
            return_RvqbfBY["null"]=true;
            return return_RvqbfBY;
        }
        
        return_RvqbfBY["members"]={};
        for(int RvqbfBY=0; RvqbfBY < timestampCount; RvqbfBY++){
            json temp;
            temp=[&]() {
    json return_ITGUnvH=json({});
    return serialize_uint64_t(pTimestamps[RvqbfBY]);}();
            return_RvqbfBY["members"].push_back(temp);
        }
        return return_RvqbfBY;
        }();
result["members"]["pMaxDeviation"]=[&]() {
    json return_mAcbwvC=json({});
    
        if (pMaxDeviation==NULL){
            return_mAcbwvC["null"]=true;
            return return_mAcbwvC;
        }
        return_mAcbwvC=[&]() {
    json return_RNPMlFZ=json({});
    return serialize_uint64_t(*pMaxDeviation);}();
return return_mAcbwvC;}();

        writeToConn(result);
    }

    void handle_vkSetDebugUtilsObjectNameEXT(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDebugUtilsObjectNameInfoEXT* pNameInfo
        ;
[&]() {
VkDebugUtilsObjectNameInfoEXT* temp_yFzObLB;[&]() {

        if (data_json["members"]["pNameInfo"].contains("null")){
        temp_yFzObLB=NULL;
        return;
        }
    temp_yFzObLB=(VkDebugUtilsObjectNameInfoEXT*)malloc(sizeof(VkDebugUtilsObjectNameInfoEXT));
[&]() {
*(temp_yFzObLB)=deserialize_VkDebugUtilsObjectNameInfoEXT(data_json["members"]["pNameInfo"]);}();
}();pNameInfo=temp_yFzObLB;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkSetDebugUtilsObjectNameEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkSetDebugUtilsObjectNameEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkSetDebugUtilsObjectNameEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkSetDebugUtilsObjectNameEXT");
    }  
    
auto return_value=call_function(device, pNameInfo);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_gLaCYmm=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pNameInfo"]=[&]() {
    json return_YLVgCDA=json({});
    
        if (pNameInfo==NULL){
            return_YLVgCDA["null"]=true;
            return return_YLVgCDA;
        }
        return_YLVgCDA=[&]() {
    json return_MipETWW=json({});
    return serialize_VkDebugUtilsObjectNameInfoEXT(*pNameInfo);}();
return return_YLVgCDA;}();

        writeToConn(result);
    }

    void handle_vkSetDebugUtilsObjectTagEXT(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDebugUtilsObjectTagInfoEXT* pTagInfo
        ;
[&]() {
VkDebugUtilsObjectTagInfoEXT* temp_JNeLoQn;[&]() {

        if (data_json["members"]["pTagInfo"].contains("null")){
        temp_JNeLoQn=NULL;
        return;
        }
    temp_JNeLoQn=(VkDebugUtilsObjectTagInfoEXT*)malloc(sizeof(VkDebugUtilsObjectTagInfoEXT));
[&]() {
*(temp_JNeLoQn)=deserialize_VkDebugUtilsObjectTagInfoEXT(data_json["members"]["pTagInfo"]);}();
}();pTagInfo=temp_JNeLoQn;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkSetDebugUtilsObjectTagEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkSetDebugUtilsObjectTagEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkSetDebugUtilsObjectTagEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkSetDebugUtilsObjectTagEXT");
    }  
    
auto return_value=call_function(device, pTagInfo);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_dNAatBz=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pTagInfo"]=[&]() {
    json return_HWYOysZ=json({});
    
        if (pTagInfo==NULL){
            return_HWYOysZ["null"]=true;
            return return_HWYOysZ;
        }
        return_HWYOysZ=[&]() {
    json return_ACwQoAG=json({});
    return serialize_VkDebugUtilsObjectTagInfoEXT(*pTagInfo);}();
return return_HWYOysZ;}();

        writeToConn(result);
    }

    void handle_vkQueueBeginDebugUtilsLabelEXT(json data_json){
    //Will only be called by the server
    
VkQueue queue
            ;
[&]() {
queue=deserialize_VkQueue(data_json["members"]["queue"]);}();
VkDebugUtilsLabelEXT* pLabelInfo
        ;
[&]() {
VkDebugUtilsLabelEXT* temp_KxrRhZs;[&]() {

        if (data_json["members"]["pLabelInfo"].contains("null")){
        temp_KxrRhZs=NULL;
        return;
        }
    temp_KxrRhZs=(VkDebugUtilsLabelEXT*)malloc(sizeof(VkDebugUtilsLabelEXT));
[&]() {
*(temp_KxrRhZs)=deserialize_VkDebugUtilsLabelEXT(data_json["members"]["pLabelInfo"]);}();
}();pLabelInfo=temp_KxrRhZs;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkQueueBeginDebugUtilsLabelEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkQueueBeginDebugUtilsLabelEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkQueueBeginDebugUtilsLabelEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkQueueBeginDebugUtilsLabelEXT");
    }  
    
call_function(queue, pLabelInfo);
json result=json({});
        result["type"]="Response";
    

result["members"]["queue"]=[&]() {
    json return_KYhcIBS=json({});
    return serialize_VkQueue(queue);}();
result["members"]["pLabelInfo"]=[&]() {
    json return_QfllhgL=json({});
    
        if (pLabelInfo==NULL){
            return_QfllhgL["null"]=true;
            return return_QfllhgL;
        }
        return_QfllhgL=[&]() {
    json return_SWoyDNv=json({});
    return serialize_VkDebugUtilsLabelEXT(*pLabelInfo);}();
return return_QfllhgL;}();

        writeToConn(result);
    }

    void handle_vkQueueEndDebugUtilsLabelEXT(json data_json){
    //Will only be called by the server
    
VkQueue queue
        ;
[&]() {
queue=deserialize_VkQueue(data_json["members"]["queue"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkQueueEndDebugUtilsLabelEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkQueueEndDebugUtilsLabelEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkQueueEndDebugUtilsLabelEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkQueueEndDebugUtilsLabelEXT");
    }  
    
call_function(queue);
json result=json({});
        result["type"]="Response";
    

result["members"]["queue"]=[&]() {
    json return_sfVGawV=json({});
    return serialize_VkQueue(queue);}();

        writeToConn(result);
    }

    void handle_vkQueueInsertDebugUtilsLabelEXT(json data_json){
    //Will only be called by the server
    
VkQueue queue
            ;
[&]() {
queue=deserialize_VkQueue(data_json["members"]["queue"]);}();
VkDebugUtilsLabelEXT* pLabelInfo
        ;
[&]() {
VkDebugUtilsLabelEXT* temp_KxrRhZs;[&]() {

        if (data_json["members"]["pLabelInfo"].contains("null")){
        temp_KxrRhZs=NULL;
        return;
        }
    temp_KxrRhZs=(VkDebugUtilsLabelEXT*)malloc(sizeof(VkDebugUtilsLabelEXT));
[&]() {
*(temp_KxrRhZs)=deserialize_VkDebugUtilsLabelEXT(data_json["members"]["pLabelInfo"]);}();
}();pLabelInfo=temp_KxrRhZs;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkQueueInsertDebugUtilsLabelEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkQueueInsertDebugUtilsLabelEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkQueueInsertDebugUtilsLabelEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkQueueInsertDebugUtilsLabelEXT");
    }  
    
call_function(queue, pLabelInfo);
json result=json({});
        result["type"]="Response";
    

result["members"]["queue"]=[&]() {
    json return_KYhcIBS=json({});
    return serialize_VkQueue(queue);}();
result["members"]["pLabelInfo"]=[&]() {
    json return_QfllhgL=json({});
    
        if (pLabelInfo==NULL){
            return_QfllhgL["null"]=true;
            return return_QfllhgL;
        }
        return_QfllhgL=[&]() {
    json return_SWoyDNv=json({});
    return serialize_VkDebugUtilsLabelEXT(*pLabelInfo);}();
return return_QfllhgL;}();

        writeToConn(result);
    }

    void handle_vkCmdBeginDebugUtilsLabelEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkDebugUtilsLabelEXT* pLabelInfo
        ;
[&]() {
VkDebugUtilsLabelEXT* temp_KxrRhZs;[&]() {

        if (data_json["members"]["pLabelInfo"].contains("null")){
        temp_KxrRhZs=NULL;
        return;
        }
    temp_KxrRhZs=(VkDebugUtilsLabelEXT*)malloc(sizeof(VkDebugUtilsLabelEXT));
[&]() {
*(temp_KxrRhZs)=deserialize_VkDebugUtilsLabelEXT(data_json["members"]["pLabelInfo"]);}();
}();pLabelInfo=temp_KxrRhZs;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdBeginDebugUtilsLabelEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBeginDebugUtilsLabelEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdBeginDebugUtilsLabelEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBeginDebugUtilsLabelEXT");
    }  
    
call_function(commandBuffer, pLabelInfo);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pLabelInfo"]=[&]() {
    json return_QfllhgL=json({});
    
        if (pLabelInfo==NULL){
            return_QfllhgL["null"]=true;
            return return_QfllhgL;
        }
        return_QfllhgL=[&]() {
    json return_SWoyDNv=json({});
    return serialize_VkDebugUtilsLabelEXT(*pLabelInfo);}();
return return_QfllhgL;}();

        writeToConn(result);
    }

    void handle_vkCmdEndDebugUtilsLabelEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
        ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdEndDebugUtilsLabelEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdEndDebugUtilsLabelEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdEndDebugUtilsLabelEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdEndDebugUtilsLabelEXT");
    }  
    
call_function(commandBuffer);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_GVaXYIY=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();

        writeToConn(result);
    }

    void handle_vkCmdInsertDebugUtilsLabelEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkDebugUtilsLabelEXT* pLabelInfo
        ;
[&]() {
VkDebugUtilsLabelEXT* temp_KxrRhZs;[&]() {

        if (data_json["members"]["pLabelInfo"].contains("null")){
        temp_KxrRhZs=NULL;
        return;
        }
    temp_KxrRhZs=(VkDebugUtilsLabelEXT*)malloc(sizeof(VkDebugUtilsLabelEXT));
[&]() {
*(temp_KxrRhZs)=deserialize_VkDebugUtilsLabelEXT(data_json["members"]["pLabelInfo"]);}();
}();pLabelInfo=temp_KxrRhZs;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdInsertDebugUtilsLabelEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdInsertDebugUtilsLabelEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdInsertDebugUtilsLabelEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdInsertDebugUtilsLabelEXT");
    }  
    
call_function(commandBuffer, pLabelInfo);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pLabelInfo"]=[&]() {
    json return_QfllhgL=json({});
    
        if (pLabelInfo==NULL){
            return_QfllhgL["null"]=true;
            return return_QfllhgL;
        }
        return_QfllhgL=[&]() {
    json return_SWoyDNv=json({});
    return serialize_VkDebugUtilsLabelEXT(*pLabelInfo);}();
return return_QfllhgL;}();

        writeToConn(result);
    }

    void handle_vkCreateDebugUtilsMessengerEXT(json data_json){
    //Will only be called by the server
    
VkInstance instance
            ;
[&]() {
instance=deserialize_VkInstance(data_json["members"]["instance"]);}();
VkDebugUtilsMessengerCreateInfoEXT* pCreateInfo
            ;
[&]() {
VkDebugUtilsMessengerCreateInfoEXT* temp_AckaOCy;[&]() {

        if (data_json["members"]["pCreateInfo"].contains("null")){
        temp_AckaOCy=NULL;
        return;
        }
    temp_AckaOCy=(VkDebugUtilsMessengerCreateInfoEXT*)malloc(sizeof(VkDebugUtilsMessengerCreateInfoEXT));
[&]() {
*(temp_AckaOCy)=deserialize_VkDebugUtilsMessengerCreateInfoEXT(data_json["members"]["pCreateInfo"]);}();
}();pCreateInfo=temp_AckaOCy;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkDebugUtilsMessengerEXT* pMessenger
        ;
[&]() {

        if (data_json["members"]["pMessenger"].contains("null")){
        pMessenger=NULL;
        return;
        }
    pMessenger=(VkDebugUtilsMessengerEXT*)malloc(sizeof(VkDebugUtilsMessengerEXT));
[&]() {
*(pMessenger)=deserialize_VkDebugUtilsMessengerEXT(data_json["members"]["pMessenger"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreateDebugUtilsMessengerEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateDebugUtilsMessengerEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreateDebugUtilsMessengerEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateDebugUtilsMessengerEXT");
    }  
    
auto return_value=call_function(instance, pCreateInfo, pAllocator, pMessenger);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_FkohjhQ=json({});
    return serialize_VkResult(return_value);}();
result["members"]["instance"]=[&]() {
    json return_uDnIwUL=json({});
    return serialize_VkInstance(instance);}();
result["members"]["pCreateInfo"]=[&]() {
    json return_cRzxKgy=json({});
    
        if (pCreateInfo==NULL){
            return_cRzxKgy["null"]=true;
            return return_cRzxKgy;
        }
        return_cRzxKgy=[&]() {
    json return_kUNkfty=json({});
    return serialize_VkDebugUtilsMessengerCreateInfoEXT(*pCreateInfo);}();
return return_cRzxKgy;}();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pMessenger"]=[&]() {
    json return_ZCRusdY=json({});
    
        if (pMessenger==NULL){
            return_ZCRusdY["null"]=true;
            return return_ZCRusdY;
        }
        return_ZCRusdY=[&]() {
    json return_KfGiSKV=json({});
    return serialize_VkDebugUtilsMessengerEXT(*pMessenger);}();
return return_ZCRusdY;}();

        writeToConn(result);
    }

    void handle_vkDestroyDebugUtilsMessengerEXT(json data_json){
    //Will only be called by the server
    
VkInstance instance
            ;
[&]() {
instance=deserialize_VkInstance(data_json["members"]["instance"]);}();
VkDebugUtilsMessengerEXT messenger
            ;
[&]() {
messenger=deserialize_VkDebugUtilsMessengerEXT(data_json["members"]["messenger"]);}();
VkAllocationCallbacks* pAllocator
        ;
[&]() {
VkAllocationCallbacks* temp_VAmhMvJ;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_VAmhMvJ=NULL;
        return;
        }
    temp_VAmhMvJ=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_VAmhMvJ)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_VAmhMvJ;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkDestroyDebugUtilsMessengerEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyDebugUtilsMessengerEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkDestroyDebugUtilsMessengerEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyDebugUtilsMessengerEXT");
    }  
    
call_function(instance, messenger, pAllocator);
json result=json({});
        result["type"]="Response";
    

result["members"]["instance"]=[&]() {
    json return_uDnIwUL=json({});
    return serialize_VkInstance(instance);}();
result["members"]["messenger"]=[&]() {
    json return_XFdKcnL=json({});
    return serialize_VkDebugUtilsMessengerEXT(messenger);}();
result["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();

        writeToConn(result);
    }

    void handle_vkSubmitDebugUtilsMessageEXT(json data_json){
    //Will only be called by the server
    
VkInstance instance
            ;
[&]() {
instance=deserialize_VkInstance(data_json["members"]["instance"]);}();
VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity
            ;
[&]() {
messageSeverity=deserialize_VkDebugUtilsMessageSeverityFlagBitsEXT(data_json["members"]["messageSeverity"]);}();
VkDebugUtilsMessageTypeFlagsEXT messageTypes
            ;
[&]() {
messageTypes=deserialize_VkDebugUtilsMessageTypeFlagsEXT(data_json["members"]["messageTypes"]);}();
VkDebugUtilsMessengerCallbackDataEXT* pCallbackData
        ;
[&]() {
VkDebugUtilsMessengerCallbackDataEXT* temp_qrOZJYX;[&]() {

        if (data_json["members"]["pCallbackData"].contains("null")){
        temp_qrOZJYX=NULL;
        return;
        }
    temp_qrOZJYX=(VkDebugUtilsMessengerCallbackDataEXT*)malloc(sizeof(VkDebugUtilsMessengerCallbackDataEXT));
[&]() {
*(temp_qrOZJYX)=deserialize_VkDebugUtilsMessengerCallbackDataEXT(data_json["members"]["pCallbackData"]);}();
}();pCallbackData=temp_qrOZJYX;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkSubmitDebugUtilsMessageEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkSubmitDebugUtilsMessageEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkSubmitDebugUtilsMessageEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkSubmitDebugUtilsMessageEXT");
    }  
    
call_function(instance, messageSeverity, messageTypes, pCallbackData);
json result=json({});
        result["type"]="Response";
    

result["members"]["instance"]=[&]() {
    json return_uDnIwUL=json({});
    return serialize_VkInstance(instance);}();
result["members"]["messageSeverity"]=[&]() {
    json return_jQnYuTr=json({});
    return serialize_VkDebugUtilsMessageSeverityFlagBitsEXT(messageSeverity);}();
result["members"]["messageTypes"]=[&]() {
    json return_xYqUWaX=json({});
    return serialize_VkDebugUtilsMessageTypeFlagsEXT(messageTypes);}();
result["members"]["pCallbackData"]=[&]() {
    json return_gnnYNco=json({});
    
        if (pCallbackData==NULL){
            return_gnnYNco["null"]=true;
            return return_gnnYNco;
        }
        return_gnnYNco=[&]() {
    json return_XgvhkWm=json({});
    return serialize_VkDebugUtilsMessengerCallbackDataEXT(*pCallbackData);}();
return return_gnnYNco;}();

        writeToConn(result);
    }

    void handle_vkGetMemoryHostPointerPropertiesEXT(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkExternalMemoryHandleTypeFlagBits handleType
            ;
[&]() {
handleType=deserialize_VkExternalMemoryHandleTypeFlagBits(data_json["members"]["handleType"]);}();
void* pHostPointer
            ;
[&]() {
void* temp_LPRHtvk;[&]() {

        if (data_json["members"]["pHostPointer"].contains("null")){
        temp_LPRHtvk=NULL;
        return;
        }
    temp_LPRHtvk=deserialize_void_p(data_json["members"]["pHostPointer"]);
}();pHostPointer=temp_LPRHtvk;}();
VkMemoryHostPointerPropertiesEXT* pMemoryHostPointerProperties
        ;
[&]() {

        if (data_json["members"]["pMemoryHostPointerProperties"].contains("null")){
        pMemoryHostPointerProperties=NULL;
        return;
        }
    pMemoryHostPointerProperties=(VkMemoryHostPointerPropertiesEXT*)malloc(sizeof(VkMemoryHostPointerPropertiesEXT));
[&]() {
*(pMemoryHostPointerProperties)=deserialize_VkMemoryHostPointerPropertiesEXT(data_json["members"]["pMemoryHostPointerProperties"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetMemoryHostPointerPropertiesEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetMemoryHostPointerPropertiesEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetMemoryHostPointerPropertiesEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetMemoryHostPointerPropertiesEXT");
    }  
    
auto return_value=call_function(device, handleType, pHostPointer, pMemoryHostPointerProperties);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_EDTjvyb=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["handleType"]=[&]() {
    json return_ZfjPdbS=json({});
    return serialize_VkExternalMemoryHandleTypeFlagBits(handleType);}();
result["members"]["pHostPointer"]=[&]() {
    json return_WXbmMtZ=json({});
    
        if (pHostPointer==NULL){
            return_WXbmMtZ["null"]=true;
            return return_WXbmMtZ;
        }
        return serialize_void_p(pHostPointer);
}();
result["members"]["pMemoryHostPointerProperties"]=[&]() {
    json return_NWIiYEs=json({});
    
        if (pMemoryHostPointerProperties==NULL){
            return_NWIiYEs["null"]=true;
            return return_NWIiYEs;
        }
        return_NWIiYEs=[&]() {
    json return_jMzjxpR=json({});
    return serialize_VkMemoryHostPointerPropertiesEXT(*pMemoryHostPointerProperties);}();
return return_NWIiYEs;}();

        writeToConn(result);
    }

    void handle_vkCmdWriteBufferMarkerAMD(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkPipelineStageFlagBits pipelineStage
            ;
[&]() {
pipelineStage=deserialize_VkPipelineStageFlagBits(data_json["members"]["pipelineStage"]);}();
VkBuffer dstBuffer
            ;
[&]() {
dstBuffer=deserialize_VkBuffer(data_json["members"]["dstBuffer"]);}();
VkDeviceSize dstOffset
            ;
[&]() {
[&]() {
dstOffset=deserialize_uint64_t(data_json["members"]["dstOffset"]);}();}();
uint32_t marker
        ;
[&]() {
marker=deserialize_uint32_t(data_json["members"]["marker"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdWriteBufferMarkerAMD)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdWriteBufferMarkerAMD");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdWriteBufferMarkerAMD)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdWriteBufferMarkerAMD");
    }  
    
call_function(commandBuffer, pipelineStage, dstBuffer, dstOffset, marker);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pipelineStage"]=[&]() {
    json return_zuwjquI=json({});
    return serialize_VkPipelineStageFlagBits(pipelineStage);}();
result["members"]["dstBuffer"]=[&]() {
    json return_CcROAZq=json({});
    return serialize_VkBuffer(dstBuffer);}();
result["members"]["dstOffset"]=[&]() {
    json return_Hccaenu=json({});
    return_Hccaenu=[&]() {
    json return_RfkrhBA=json({});
    return serialize_uint64_t(dstOffset);}();return return_Hccaenu;}();
result["members"]["marker"]=[&]() {
    json return_pGdkgqF=json({});
    return serialize_uint32_t(marker);}();

        writeToConn(result);
    }

    void handle_vkCreateRenderPass2(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkRenderPassCreateInfo2* pCreateInfo
            ;
[&]() {
VkRenderPassCreateInfo2* temp_jFjZnYh;[&]() {

        if (data_json["members"]["pCreateInfo"].contains("null")){
        temp_jFjZnYh=NULL;
        return;
        }
    temp_jFjZnYh=(VkRenderPassCreateInfo2*)malloc(sizeof(VkRenderPassCreateInfo2));
[&]() {
*(temp_jFjZnYh)=deserialize_VkRenderPassCreateInfo2(data_json["members"]["pCreateInfo"]);}();
}();pCreateInfo=temp_jFjZnYh;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkRenderPass* pRenderPass
        ;
[&]() {

        if (data_json["members"]["pRenderPass"].contains("null")){
        pRenderPass=NULL;
        return;
        }
    pRenderPass=(VkRenderPass*)malloc(sizeof(VkRenderPass));
[&]() {
*(pRenderPass)=deserialize_VkRenderPass(data_json["members"]["pRenderPass"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreateRenderPass2)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateRenderPass2");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreateRenderPass2)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateRenderPass2");
    }  
    
auto return_value=call_function(device, pCreateInfo, pAllocator, pRenderPass);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_GQixAUq=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pCreateInfo"]=[&]() {
    json return_mHsWrMp=json({});
    
        if (pCreateInfo==NULL){
            return_mHsWrMp["null"]=true;
            return return_mHsWrMp;
        }
        return_mHsWrMp=[&]() {
    json return_lxRYfgY=json({});
    return serialize_VkRenderPassCreateInfo2(*pCreateInfo);}();
return return_mHsWrMp;}();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pRenderPass"]=[&]() {
    json return_TnevtBk=json({});
    
        if (pRenderPass==NULL){
            return_TnevtBk["null"]=true;
            return return_TnevtBk;
        }
        return_TnevtBk=[&]() {
    json return_fRCidTE=json({});
    return serialize_VkRenderPass(*pRenderPass);}();
return return_TnevtBk;}();

        writeToConn(result);
    }

    void handle_vkCreateRenderPass2KHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkRenderPassCreateInfo2* pCreateInfo
            ;
[&]() {
VkRenderPassCreateInfo2* temp_jFjZnYh;[&]() {

        if (data_json["members"]["pCreateInfo"].contains("null")){
        temp_jFjZnYh=NULL;
        return;
        }
    temp_jFjZnYh=(VkRenderPassCreateInfo2*)malloc(sizeof(VkRenderPassCreateInfo2));
[&]() {
*(temp_jFjZnYh)=deserialize_VkRenderPassCreateInfo2(data_json["members"]["pCreateInfo"]);}();
}();pCreateInfo=temp_jFjZnYh;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkRenderPass* pRenderPass
        ;
[&]() {

        if (data_json["members"]["pRenderPass"].contains("null")){
        pRenderPass=NULL;
        return;
        }
    pRenderPass=(VkRenderPass*)malloc(sizeof(VkRenderPass));
[&]() {
*(pRenderPass)=deserialize_VkRenderPass(data_json["members"]["pRenderPass"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreateRenderPass2KHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateRenderPass2KHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreateRenderPass2KHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateRenderPass2KHR");
    }  
    
auto return_value=call_function(device, pCreateInfo, pAllocator, pRenderPass);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_FRdWvko=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pCreateInfo"]=[&]() {
    json return_mHsWrMp=json({});
    
        if (pCreateInfo==NULL){
            return_mHsWrMp["null"]=true;
            return return_mHsWrMp;
        }
        return_mHsWrMp=[&]() {
    json return_lxRYfgY=json({});
    return serialize_VkRenderPassCreateInfo2(*pCreateInfo);}();
return return_mHsWrMp;}();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pRenderPass"]=[&]() {
    json return_TnevtBk=json({});
    
        if (pRenderPass==NULL){
            return_TnevtBk["null"]=true;
            return return_TnevtBk;
        }
        return_TnevtBk=[&]() {
    json return_fRCidTE=json({});
    return serialize_VkRenderPass(*pRenderPass);}();
return return_TnevtBk;}();

        writeToConn(result);
    }

    void handle_vkCmdBeginRenderPass2(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkRenderPassBeginInfo*      pRenderPassBegin
            ;
[&]() {
VkRenderPassBeginInfo* temp_FQjLmnr;[&]() {

        if (data_json["members"]["pRenderPassBegin"].contains("null")){
        temp_FQjLmnr=NULL;
        return;
        }
    temp_FQjLmnr=(VkRenderPassBeginInfo*)malloc(sizeof(VkRenderPassBeginInfo));
[&]() {
*(temp_FQjLmnr)=deserialize_VkRenderPassBeginInfo(data_json["members"]["pRenderPassBegin"]);}();
}();pRenderPassBegin=temp_FQjLmnr;}();
VkSubpassBeginInfo*      pSubpassBeginInfo
        ;
[&]() {
VkSubpassBeginInfo* temp_NWXnZYw;[&]() {

        if (data_json["members"]["pSubpassBeginInfo"].contains("null")){
        temp_NWXnZYw=NULL;
        return;
        }
    temp_NWXnZYw=(VkSubpassBeginInfo*)malloc(sizeof(VkSubpassBeginInfo));
[&]() {
*(temp_NWXnZYw)=deserialize_VkSubpassBeginInfo(data_json["members"]["pSubpassBeginInfo"]);}();
}();pSubpassBeginInfo=temp_NWXnZYw;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdBeginRenderPass2)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBeginRenderPass2");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdBeginRenderPass2)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBeginRenderPass2");
    }  
    
call_function(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pRenderPassBegin"]=[&]() {
    json return_EfjxAfe=json({});
    
        if (pRenderPassBegin==NULL){
            return_EfjxAfe["null"]=true;
            return return_EfjxAfe;
        }
        return_EfjxAfe=[&]() {
    json return_YgBLuHT=json({});
    return serialize_VkRenderPassBeginInfo(*pRenderPassBegin);}();
return return_EfjxAfe;}();
result["members"]["pSubpassBeginInfo"]=[&]() {
    json return_CLoPPjt=json({});
    
        if (pSubpassBeginInfo==NULL){
            return_CLoPPjt["null"]=true;
            return return_CLoPPjt;
        }
        return_CLoPPjt=[&]() {
    json return_YJISrcL=json({});
    return serialize_VkSubpassBeginInfo(*pSubpassBeginInfo);}();
return return_CLoPPjt;}();

        writeToConn(result);
    }

    void handle_vkCmdBeginRenderPass2KHR(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkRenderPassBeginInfo*      pRenderPassBegin
            ;
[&]() {
VkRenderPassBeginInfo* temp_FQjLmnr;[&]() {

        if (data_json["members"]["pRenderPassBegin"].contains("null")){
        temp_FQjLmnr=NULL;
        return;
        }
    temp_FQjLmnr=(VkRenderPassBeginInfo*)malloc(sizeof(VkRenderPassBeginInfo));
[&]() {
*(temp_FQjLmnr)=deserialize_VkRenderPassBeginInfo(data_json["members"]["pRenderPassBegin"]);}();
}();pRenderPassBegin=temp_FQjLmnr;}();
VkSubpassBeginInfo*      pSubpassBeginInfo
        ;
[&]() {
VkSubpassBeginInfo* temp_NWXnZYw;[&]() {

        if (data_json["members"]["pSubpassBeginInfo"].contains("null")){
        temp_NWXnZYw=NULL;
        return;
        }
    temp_NWXnZYw=(VkSubpassBeginInfo*)malloc(sizeof(VkSubpassBeginInfo));
[&]() {
*(temp_NWXnZYw)=deserialize_VkSubpassBeginInfo(data_json["members"]["pSubpassBeginInfo"]);}();
}();pSubpassBeginInfo=temp_NWXnZYw;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdBeginRenderPass2KHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBeginRenderPass2KHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdBeginRenderPass2KHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBeginRenderPass2KHR");
    }  
    
call_function(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pRenderPassBegin"]=[&]() {
    json return_EfjxAfe=json({});
    
        if (pRenderPassBegin==NULL){
            return_EfjxAfe["null"]=true;
            return return_EfjxAfe;
        }
        return_EfjxAfe=[&]() {
    json return_YgBLuHT=json({});
    return serialize_VkRenderPassBeginInfo(*pRenderPassBegin);}();
return return_EfjxAfe;}();
result["members"]["pSubpassBeginInfo"]=[&]() {
    json return_CLoPPjt=json({});
    
        if (pSubpassBeginInfo==NULL){
            return_CLoPPjt["null"]=true;
            return return_CLoPPjt;
        }
        return_CLoPPjt=[&]() {
    json return_YJISrcL=json({});
    return serialize_VkSubpassBeginInfo(*pSubpassBeginInfo);}();
return return_CLoPPjt;}();

        writeToConn(result);
    }

    void handle_vkCmdNextSubpass2(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkSubpassBeginInfo*      pSubpassBeginInfo
            ;
[&]() {
VkSubpassBeginInfo* temp_NGMLaTZ;[&]() {

        if (data_json["members"]["pSubpassBeginInfo"].contains("null")){
        temp_NGMLaTZ=NULL;
        return;
        }
    temp_NGMLaTZ=(VkSubpassBeginInfo*)malloc(sizeof(VkSubpassBeginInfo));
[&]() {
*(temp_NGMLaTZ)=deserialize_VkSubpassBeginInfo(data_json["members"]["pSubpassBeginInfo"]);}();
}();pSubpassBeginInfo=temp_NGMLaTZ;}();
VkSubpassEndInfo*        pSubpassEndInfo
        ;
[&]() {
VkSubpassEndInfo* temp_YigCSXn;[&]() {

        if (data_json["members"]["pSubpassEndInfo"].contains("null")){
        temp_YigCSXn=NULL;
        return;
        }
    temp_YigCSXn=(VkSubpassEndInfo*)malloc(sizeof(VkSubpassEndInfo));
[&]() {
*(temp_YigCSXn)=deserialize_VkSubpassEndInfo(data_json["members"]["pSubpassEndInfo"]);}();
}();pSubpassEndInfo=temp_YigCSXn;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdNextSubpass2)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdNextSubpass2");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdNextSubpass2)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdNextSubpass2");
    }  
    
call_function(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pSubpassBeginInfo"]=[&]() {
    json return_XBrSGWX=json({});
    
        if (pSubpassBeginInfo==NULL){
            return_XBrSGWX["null"]=true;
            return return_XBrSGWX;
        }
        return_XBrSGWX=[&]() {
    json return_xIWLlee=json({});
    return serialize_VkSubpassBeginInfo(*pSubpassBeginInfo);}();
return return_XBrSGWX;}();
result["members"]["pSubpassEndInfo"]=[&]() {
    json return_pzJYPYs=json({});
    
        if (pSubpassEndInfo==NULL){
            return_pzJYPYs["null"]=true;
            return return_pzJYPYs;
        }
        return_pzJYPYs=[&]() {
    json return_yCxVMln=json({});
    return serialize_VkSubpassEndInfo(*pSubpassEndInfo);}();
return return_pzJYPYs;}();

        writeToConn(result);
    }

    void handle_vkCmdNextSubpass2KHR(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkSubpassBeginInfo*      pSubpassBeginInfo
            ;
[&]() {
VkSubpassBeginInfo* temp_NGMLaTZ;[&]() {

        if (data_json["members"]["pSubpassBeginInfo"].contains("null")){
        temp_NGMLaTZ=NULL;
        return;
        }
    temp_NGMLaTZ=(VkSubpassBeginInfo*)malloc(sizeof(VkSubpassBeginInfo));
[&]() {
*(temp_NGMLaTZ)=deserialize_VkSubpassBeginInfo(data_json["members"]["pSubpassBeginInfo"]);}();
}();pSubpassBeginInfo=temp_NGMLaTZ;}();
VkSubpassEndInfo*        pSubpassEndInfo
        ;
[&]() {
VkSubpassEndInfo* temp_YigCSXn;[&]() {

        if (data_json["members"]["pSubpassEndInfo"].contains("null")){
        temp_YigCSXn=NULL;
        return;
        }
    temp_YigCSXn=(VkSubpassEndInfo*)malloc(sizeof(VkSubpassEndInfo));
[&]() {
*(temp_YigCSXn)=deserialize_VkSubpassEndInfo(data_json["members"]["pSubpassEndInfo"]);}();
}();pSubpassEndInfo=temp_YigCSXn;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdNextSubpass2KHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdNextSubpass2KHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdNextSubpass2KHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdNextSubpass2KHR");
    }  
    
call_function(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pSubpassBeginInfo"]=[&]() {
    json return_XBrSGWX=json({});
    
        if (pSubpassBeginInfo==NULL){
            return_XBrSGWX["null"]=true;
            return return_XBrSGWX;
        }
        return_XBrSGWX=[&]() {
    json return_xIWLlee=json({});
    return serialize_VkSubpassBeginInfo(*pSubpassBeginInfo);}();
return return_XBrSGWX;}();
result["members"]["pSubpassEndInfo"]=[&]() {
    json return_pzJYPYs=json({});
    
        if (pSubpassEndInfo==NULL){
            return_pzJYPYs["null"]=true;
            return return_pzJYPYs;
        }
        return_pzJYPYs=[&]() {
    json return_yCxVMln=json({});
    return serialize_VkSubpassEndInfo(*pSubpassEndInfo);}();
return return_pzJYPYs;}();

        writeToConn(result);
    }

    void handle_vkCmdEndRenderPass2(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkSubpassEndInfo*        pSubpassEndInfo
        ;
[&]() {
VkSubpassEndInfo* temp_YigCSXn;[&]() {

        if (data_json["members"]["pSubpassEndInfo"].contains("null")){
        temp_YigCSXn=NULL;
        return;
        }
    temp_YigCSXn=(VkSubpassEndInfo*)malloc(sizeof(VkSubpassEndInfo));
[&]() {
*(temp_YigCSXn)=deserialize_VkSubpassEndInfo(data_json["members"]["pSubpassEndInfo"]);}();
}();pSubpassEndInfo=temp_YigCSXn;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdEndRenderPass2)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdEndRenderPass2");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdEndRenderPass2)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdEndRenderPass2");
    }  
    
call_function(commandBuffer, pSubpassEndInfo);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pSubpassEndInfo"]=[&]() {
    json return_pzJYPYs=json({});
    
        if (pSubpassEndInfo==NULL){
            return_pzJYPYs["null"]=true;
            return return_pzJYPYs;
        }
        return_pzJYPYs=[&]() {
    json return_yCxVMln=json({});
    return serialize_VkSubpassEndInfo(*pSubpassEndInfo);}();
return return_pzJYPYs;}();

        writeToConn(result);
    }

    void handle_vkCmdEndRenderPass2KHR(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkSubpassEndInfo*        pSubpassEndInfo
        ;
[&]() {
VkSubpassEndInfo* temp_YigCSXn;[&]() {

        if (data_json["members"]["pSubpassEndInfo"].contains("null")){
        temp_YigCSXn=NULL;
        return;
        }
    temp_YigCSXn=(VkSubpassEndInfo*)malloc(sizeof(VkSubpassEndInfo));
[&]() {
*(temp_YigCSXn)=deserialize_VkSubpassEndInfo(data_json["members"]["pSubpassEndInfo"]);}();
}();pSubpassEndInfo=temp_YigCSXn;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdEndRenderPass2KHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdEndRenderPass2KHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdEndRenderPass2KHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdEndRenderPass2KHR");
    }  
    
call_function(commandBuffer, pSubpassEndInfo);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pSubpassEndInfo"]=[&]() {
    json return_pzJYPYs=json({});
    
        if (pSubpassEndInfo==NULL){
            return_pzJYPYs["null"]=true;
            return return_pzJYPYs;
        }
        return_pzJYPYs=[&]() {
    json return_yCxVMln=json({});
    return serialize_VkSubpassEndInfo(*pSubpassEndInfo);}();
return return_pzJYPYs;}();

        writeToConn(result);
    }

    void handle_vkGetSemaphoreCounterValue(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkSemaphore semaphore
            ;
[&]() {
semaphore=deserialize_VkSemaphore(data_json["members"]["semaphore"]);}();
uint64_t* pValue
        ;
[&]() {

        if (data_json["members"]["pValue"].contains("null")){
        pValue=NULL;
        return;
        }
    pValue=(uint64_t*)malloc(sizeof(uint64_t));
[&]() {
*(pValue)=deserialize_uint64_t(data_json["members"]["pValue"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetSemaphoreCounterValue)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetSemaphoreCounterValue");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetSemaphoreCounterValue)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetSemaphoreCounterValue");
    }  
    
auto return_value=call_function(device, semaphore, pValue);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_OCUPcIi=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["semaphore"]=[&]() {
    json return_NeBBGDW=json({});
    return serialize_VkSemaphore(semaphore);}();
result["members"]["pValue"]=[&]() {
    json return_SkZiOMx=json({});
    
        if (pValue==NULL){
            return_SkZiOMx["null"]=true;
            return return_SkZiOMx;
        }
        return_SkZiOMx=[&]() {
    json return_RtvooWd=json({});
    return serialize_uint64_t(*pValue);}();
return return_SkZiOMx;}();

        writeToConn(result);
    }

    void handle_vkGetSemaphoreCounterValueKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkSemaphore semaphore
            ;
[&]() {
semaphore=deserialize_VkSemaphore(data_json["members"]["semaphore"]);}();
uint64_t* pValue
        ;
[&]() {

        if (data_json["members"]["pValue"].contains("null")){
        pValue=NULL;
        return;
        }
    pValue=(uint64_t*)malloc(sizeof(uint64_t));
[&]() {
*(pValue)=deserialize_uint64_t(data_json["members"]["pValue"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetSemaphoreCounterValueKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetSemaphoreCounterValueKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetSemaphoreCounterValueKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetSemaphoreCounterValueKHR");
    }  
    
auto return_value=call_function(device, semaphore, pValue);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_efGFkpG=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["semaphore"]=[&]() {
    json return_NeBBGDW=json({});
    return serialize_VkSemaphore(semaphore);}();
result["members"]["pValue"]=[&]() {
    json return_SkZiOMx=json({});
    
        if (pValue==NULL){
            return_SkZiOMx["null"]=true;
            return return_SkZiOMx;
        }
        return_SkZiOMx=[&]() {
    json return_RtvooWd=json({});
    return serialize_uint64_t(*pValue);}();
return return_SkZiOMx;}();

        writeToConn(result);
    }

    void handle_vkWaitSemaphores(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkSemaphoreWaitInfo* pWaitInfo
            ;
[&]() {
VkSemaphoreWaitInfo* temp_jZIjine;[&]() {

        if (data_json["members"]["pWaitInfo"].contains("null")){
        temp_jZIjine=NULL;
        return;
        }
    temp_jZIjine=(VkSemaphoreWaitInfo*)malloc(sizeof(VkSemaphoreWaitInfo));
[&]() {
*(temp_jZIjine)=deserialize_VkSemaphoreWaitInfo(data_json["members"]["pWaitInfo"]);}();
}();pWaitInfo=temp_jZIjine;}();
uint64_t timeout
        ;
[&]() {
timeout=deserialize_uint64_t(data_json["members"]["timeout"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkWaitSemaphores)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkWaitSemaphores");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkWaitSemaphores)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkWaitSemaphores");
    }  
    
auto return_value=call_function(device, pWaitInfo, timeout);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_rDKaFgT=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pWaitInfo"]=[&]() {
    json return_GcqlCML=json({});
    
        if (pWaitInfo==NULL){
            return_GcqlCML["null"]=true;
            return return_GcqlCML;
        }
        return_GcqlCML=[&]() {
    json return_wwBbQyu=json({});
    return serialize_VkSemaphoreWaitInfo(*pWaitInfo);}();
return return_GcqlCML;}();
result["members"]["timeout"]=[&]() {
    json return_CYRKadv=json({});
    return serialize_uint64_t(timeout);}();

        writeToConn(result);
    }

    void handle_vkWaitSemaphoresKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkSemaphoreWaitInfo* pWaitInfo
            ;
[&]() {
VkSemaphoreWaitInfo* temp_jZIjine;[&]() {

        if (data_json["members"]["pWaitInfo"].contains("null")){
        temp_jZIjine=NULL;
        return;
        }
    temp_jZIjine=(VkSemaphoreWaitInfo*)malloc(sizeof(VkSemaphoreWaitInfo));
[&]() {
*(temp_jZIjine)=deserialize_VkSemaphoreWaitInfo(data_json["members"]["pWaitInfo"]);}();
}();pWaitInfo=temp_jZIjine;}();
uint64_t timeout
        ;
[&]() {
timeout=deserialize_uint64_t(data_json["members"]["timeout"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkWaitSemaphoresKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkWaitSemaphoresKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkWaitSemaphoresKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkWaitSemaphoresKHR");
    }  
    
auto return_value=call_function(device, pWaitInfo, timeout);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_KvfTeio=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pWaitInfo"]=[&]() {
    json return_GcqlCML=json({});
    
        if (pWaitInfo==NULL){
            return_GcqlCML["null"]=true;
            return return_GcqlCML;
        }
        return_GcqlCML=[&]() {
    json return_wwBbQyu=json({});
    return serialize_VkSemaphoreWaitInfo(*pWaitInfo);}();
return return_GcqlCML;}();
result["members"]["timeout"]=[&]() {
    json return_CYRKadv=json({});
    return serialize_uint64_t(timeout);}();

        writeToConn(result);
    }

    void handle_vkSignalSemaphore(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkSemaphoreSignalInfo* pSignalInfo
        ;
[&]() {
VkSemaphoreSignalInfo* temp_Vnifgsv;[&]() {

        if (data_json["members"]["pSignalInfo"].contains("null")){
        temp_Vnifgsv=NULL;
        return;
        }
    temp_Vnifgsv=(VkSemaphoreSignalInfo*)malloc(sizeof(VkSemaphoreSignalInfo));
[&]() {
*(temp_Vnifgsv)=deserialize_VkSemaphoreSignalInfo(data_json["members"]["pSignalInfo"]);}();
}();pSignalInfo=temp_Vnifgsv;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkSignalSemaphore)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkSignalSemaphore");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkSignalSemaphore)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkSignalSemaphore");
    }  
    
auto return_value=call_function(device, pSignalInfo);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_SnHWBOc=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pSignalInfo"]=[&]() {
    json return_HVHlwUx=json({});
    
        if (pSignalInfo==NULL){
            return_HVHlwUx["null"]=true;
            return return_HVHlwUx;
        }
        return_HVHlwUx=[&]() {
    json return_XZuTQco=json({});
    return serialize_VkSemaphoreSignalInfo(*pSignalInfo);}();
return return_HVHlwUx;}();

        writeToConn(result);
    }

    void handle_vkSignalSemaphoreKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkSemaphoreSignalInfo* pSignalInfo
        ;
[&]() {
VkSemaphoreSignalInfo* temp_Vnifgsv;[&]() {

        if (data_json["members"]["pSignalInfo"].contains("null")){
        temp_Vnifgsv=NULL;
        return;
        }
    temp_Vnifgsv=(VkSemaphoreSignalInfo*)malloc(sizeof(VkSemaphoreSignalInfo));
[&]() {
*(temp_Vnifgsv)=deserialize_VkSemaphoreSignalInfo(data_json["members"]["pSignalInfo"]);}();
}();pSignalInfo=temp_Vnifgsv;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkSignalSemaphoreKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkSignalSemaphoreKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkSignalSemaphoreKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkSignalSemaphoreKHR");
    }  
    
auto return_value=call_function(device, pSignalInfo);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_AUbamYP=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pSignalInfo"]=[&]() {
    json return_HVHlwUx=json({});
    
        if (pSignalInfo==NULL){
            return_HVHlwUx["null"]=true;
            return return_HVHlwUx;
        }
        return_HVHlwUx=[&]() {
    json return_XZuTQco=json({});
    return serialize_VkSemaphoreSignalInfo(*pSignalInfo);}();
return return_HVHlwUx;}();

        writeToConn(result);
    }

    void handle_vkCmdDrawIndirectCount(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBuffer buffer
            ;
[&]() {
buffer=deserialize_VkBuffer(data_json["members"]["buffer"]);}();
VkDeviceSize offset
            ;
[&]() {
[&]() {
offset=deserialize_uint64_t(data_json["members"]["offset"]);}();}();
VkBuffer countBuffer
            ;
[&]() {
countBuffer=deserialize_VkBuffer(data_json["members"]["countBuffer"]);}();
VkDeviceSize countBufferOffset
            ;
[&]() {
[&]() {
countBufferOffset=deserialize_uint64_t(data_json["members"]["countBufferOffset"]);}();}();
uint32_t maxDrawCount
            ;
[&]() {
maxDrawCount=deserialize_uint32_t(data_json["members"]["maxDrawCount"]);}();
uint32_t stride
        ;
[&]() {
stride=deserialize_uint32_t(data_json["members"]["stride"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdDrawIndirectCount)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDrawIndirectCount");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdDrawIndirectCount)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDrawIndirectCount");
    }  
    
call_function(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["buffer"]=[&]() {
    json return_Fjwvwzv=json({});
    return serialize_VkBuffer(buffer);}();
result["members"]["offset"]=[&]() {
    json return_vTtZMhj=json({});
    return_vTtZMhj=[&]() {
    json return_eEWibmR=json({});
    return serialize_uint64_t(offset);}();return return_vTtZMhj;}();
result["members"]["countBuffer"]=[&]() {
    json return_thNJVdM=json({});
    return serialize_VkBuffer(countBuffer);}();
result["members"]["countBufferOffset"]=[&]() {
    json return_TrBaFUo=json({});
    return_TrBaFUo=[&]() {
    json return_xhKrPKX=json({});
    return serialize_uint64_t(countBufferOffset);}();return return_TrBaFUo;}();
result["members"]["maxDrawCount"]=[&]() {
    json return_HpcjsyV=json({});
    return serialize_uint32_t(maxDrawCount);}();
result["members"]["stride"]=[&]() {
    json return_TkKksoe=json({});
    return serialize_uint32_t(stride);}();

        writeToConn(result);
    }

    void handle_vkCmdDrawIndirectCountKHR(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBuffer buffer
            ;
[&]() {
buffer=deserialize_VkBuffer(data_json["members"]["buffer"]);}();
VkDeviceSize offset
            ;
[&]() {
[&]() {
offset=deserialize_uint64_t(data_json["members"]["offset"]);}();}();
VkBuffer countBuffer
            ;
[&]() {
countBuffer=deserialize_VkBuffer(data_json["members"]["countBuffer"]);}();
VkDeviceSize countBufferOffset
            ;
[&]() {
[&]() {
countBufferOffset=deserialize_uint64_t(data_json["members"]["countBufferOffset"]);}();}();
uint32_t maxDrawCount
            ;
[&]() {
maxDrawCount=deserialize_uint32_t(data_json["members"]["maxDrawCount"]);}();
uint32_t stride
        ;
[&]() {
stride=deserialize_uint32_t(data_json["members"]["stride"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdDrawIndirectCountKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDrawIndirectCountKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdDrawIndirectCountKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDrawIndirectCountKHR");
    }  
    
call_function(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["buffer"]=[&]() {
    json return_Fjwvwzv=json({});
    return serialize_VkBuffer(buffer);}();
result["members"]["offset"]=[&]() {
    json return_vTtZMhj=json({});
    return_vTtZMhj=[&]() {
    json return_eEWibmR=json({});
    return serialize_uint64_t(offset);}();return return_vTtZMhj;}();
result["members"]["countBuffer"]=[&]() {
    json return_thNJVdM=json({});
    return serialize_VkBuffer(countBuffer);}();
result["members"]["countBufferOffset"]=[&]() {
    json return_TrBaFUo=json({});
    return_TrBaFUo=[&]() {
    json return_xhKrPKX=json({});
    return serialize_uint64_t(countBufferOffset);}();return return_TrBaFUo;}();
result["members"]["maxDrawCount"]=[&]() {
    json return_HpcjsyV=json({});
    return serialize_uint32_t(maxDrawCount);}();
result["members"]["stride"]=[&]() {
    json return_TkKksoe=json({});
    return serialize_uint32_t(stride);}();

        writeToConn(result);
    }

    void handle_vkCmdDrawIndirectCountAMD(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBuffer buffer
            ;
[&]() {
buffer=deserialize_VkBuffer(data_json["members"]["buffer"]);}();
VkDeviceSize offset
            ;
[&]() {
[&]() {
offset=deserialize_uint64_t(data_json["members"]["offset"]);}();}();
VkBuffer countBuffer
            ;
[&]() {
countBuffer=deserialize_VkBuffer(data_json["members"]["countBuffer"]);}();
VkDeviceSize countBufferOffset
            ;
[&]() {
[&]() {
countBufferOffset=deserialize_uint64_t(data_json["members"]["countBufferOffset"]);}();}();
uint32_t maxDrawCount
            ;
[&]() {
maxDrawCount=deserialize_uint32_t(data_json["members"]["maxDrawCount"]);}();
uint32_t stride
        ;
[&]() {
stride=deserialize_uint32_t(data_json["members"]["stride"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdDrawIndirectCountAMD)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDrawIndirectCountAMD");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdDrawIndirectCountAMD)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDrawIndirectCountAMD");
    }  
    
call_function(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["buffer"]=[&]() {
    json return_Fjwvwzv=json({});
    return serialize_VkBuffer(buffer);}();
result["members"]["offset"]=[&]() {
    json return_vTtZMhj=json({});
    return_vTtZMhj=[&]() {
    json return_eEWibmR=json({});
    return serialize_uint64_t(offset);}();return return_vTtZMhj;}();
result["members"]["countBuffer"]=[&]() {
    json return_thNJVdM=json({});
    return serialize_VkBuffer(countBuffer);}();
result["members"]["countBufferOffset"]=[&]() {
    json return_TrBaFUo=json({});
    return_TrBaFUo=[&]() {
    json return_xhKrPKX=json({});
    return serialize_uint64_t(countBufferOffset);}();return return_TrBaFUo;}();
result["members"]["maxDrawCount"]=[&]() {
    json return_HpcjsyV=json({});
    return serialize_uint32_t(maxDrawCount);}();
result["members"]["stride"]=[&]() {
    json return_TkKksoe=json({});
    return serialize_uint32_t(stride);}();

        writeToConn(result);
    }

    void handle_vkCmdDrawIndexedIndirectCount(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBuffer buffer
            ;
[&]() {
buffer=deserialize_VkBuffer(data_json["members"]["buffer"]);}();
VkDeviceSize offset
            ;
[&]() {
[&]() {
offset=deserialize_uint64_t(data_json["members"]["offset"]);}();}();
VkBuffer countBuffer
            ;
[&]() {
countBuffer=deserialize_VkBuffer(data_json["members"]["countBuffer"]);}();
VkDeviceSize countBufferOffset
            ;
[&]() {
[&]() {
countBufferOffset=deserialize_uint64_t(data_json["members"]["countBufferOffset"]);}();}();
uint32_t maxDrawCount
            ;
[&]() {
maxDrawCount=deserialize_uint32_t(data_json["members"]["maxDrawCount"]);}();
uint32_t stride
        ;
[&]() {
stride=deserialize_uint32_t(data_json["members"]["stride"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdDrawIndexedIndirectCount)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDrawIndexedIndirectCount");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdDrawIndexedIndirectCount)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDrawIndexedIndirectCount");
    }  
    
call_function(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["buffer"]=[&]() {
    json return_Fjwvwzv=json({});
    return serialize_VkBuffer(buffer);}();
result["members"]["offset"]=[&]() {
    json return_vTtZMhj=json({});
    return_vTtZMhj=[&]() {
    json return_eEWibmR=json({});
    return serialize_uint64_t(offset);}();return return_vTtZMhj;}();
result["members"]["countBuffer"]=[&]() {
    json return_thNJVdM=json({});
    return serialize_VkBuffer(countBuffer);}();
result["members"]["countBufferOffset"]=[&]() {
    json return_TrBaFUo=json({});
    return_TrBaFUo=[&]() {
    json return_xhKrPKX=json({});
    return serialize_uint64_t(countBufferOffset);}();return return_TrBaFUo;}();
result["members"]["maxDrawCount"]=[&]() {
    json return_HpcjsyV=json({});
    return serialize_uint32_t(maxDrawCount);}();
result["members"]["stride"]=[&]() {
    json return_TkKksoe=json({});
    return serialize_uint32_t(stride);}();

        writeToConn(result);
    }

    void handle_vkCmdDrawIndexedIndirectCountKHR(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBuffer buffer
            ;
[&]() {
buffer=deserialize_VkBuffer(data_json["members"]["buffer"]);}();
VkDeviceSize offset
            ;
[&]() {
[&]() {
offset=deserialize_uint64_t(data_json["members"]["offset"]);}();}();
VkBuffer countBuffer
            ;
[&]() {
countBuffer=deserialize_VkBuffer(data_json["members"]["countBuffer"]);}();
VkDeviceSize countBufferOffset
            ;
[&]() {
[&]() {
countBufferOffset=deserialize_uint64_t(data_json["members"]["countBufferOffset"]);}();}();
uint32_t maxDrawCount
            ;
[&]() {
maxDrawCount=deserialize_uint32_t(data_json["members"]["maxDrawCount"]);}();
uint32_t stride
        ;
[&]() {
stride=deserialize_uint32_t(data_json["members"]["stride"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdDrawIndexedIndirectCountKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDrawIndexedIndirectCountKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdDrawIndexedIndirectCountKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDrawIndexedIndirectCountKHR");
    }  
    
call_function(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["buffer"]=[&]() {
    json return_Fjwvwzv=json({});
    return serialize_VkBuffer(buffer);}();
result["members"]["offset"]=[&]() {
    json return_vTtZMhj=json({});
    return_vTtZMhj=[&]() {
    json return_eEWibmR=json({});
    return serialize_uint64_t(offset);}();return return_vTtZMhj;}();
result["members"]["countBuffer"]=[&]() {
    json return_thNJVdM=json({});
    return serialize_VkBuffer(countBuffer);}();
result["members"]["countBufferOffset"]=[&]() {
    json return_TrBaFUo=json({});
    return_TrBaFUo=[&]() {
    json return_xhKrPKX=json({});
    return serialize_uint64_t(countBufferOffset);}();return return_TrBaFUo;}();
result["members"]["maxDrawCount"]=[&]() {
    json return_HpcjsyV=json({});
    return serialize_uint32_t(maxDrawCount);}();
result["members"]["stride"]=[&]() {
    json return_TkKksoe=json({});
    return serialize_uint32_t(stride);}();

        writeToConn(result);
    }

    void handle_vkCmdDrawIndexedIndirectCountAMD(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBuffer buffer
            ;
[&]() {
buffer=deserialize_VkBuffer(data_json["members"]["buffer"]);}();
VkDeviceSize offset
            ;
[&]() {
[&]() {
offset=deserialize_uint64_t(data_json["members"]["offset"]);}();}();
VkBuffer countBuffer
            ;
[&]() {
countBuffer=deserialize_VkBuffer(data_json["members"]["countBuffer"]);}();
VkDeviceSize countBufferOffset
            ;
[&]() {
[&]() {
countBufferOffset=deserialize_uint64_t(data_json["members"]["countBufferOffset"]);}();}();
uint32_t maxDrawCount
            ;
[&]() {
maxDrawCount=deserialize_uint32_t(data_json["members"]["maxDrawCount"]);}();
uint32_t stride
        ;
[&]() {
stride=deserialize_uint32_t(data_json["members"]["stride"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdDrawIndexedIndirectCountAMD)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDrawIndexedIndirectCountAMD");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdDrawIndexedIndirectCountAMD)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDrawIndexedIndirectCountAMD");
    }  
    
call_function(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["buffer"]=[&]() {
    json return_Fjwvwzv=json({});
    return serialize_VkBuffer(buffer);}();
result["members"]["offset"]=[&]() {
    json return_vTtZMhj=json({});
    return_vTtZMhj=[&]() {
    json return_eEWibmR=json({});
    return serialize_uint64_t(offset);}();return return_vTtZMhj;}();
result["members"]["countBuffer"]=[&]() {
    json return_thNJVdM=json({});
    return serialize_VkBuffer(countBuffer);}();
result["members"]["countBufferOffset"]=[&]() {
    json return_TrBaFUo=json({});
    return_TrBaFUo=[&]() {
    json return_xhKrPKX=json({});
    return serialize_uint64_t(countBufferOffset);}();return return_TrBaFUo;}();
result["members"]["maxDrawCount"]=[&]() {
    json return_HpcjsyV=json({});
    return serialize_uint32_t(maxDrawCount);}();
result["members"]["stride"]=[&]() {
    json return_TkKksoe=json({});
    return serialize_uint32_t(stride);}();

        writeToConn(result);
    }

    void handle_vkCmdSetCheckpointNV(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
void* pCheckpointMarker
        ;
[&]() {
void* temp_VaNobWO;[&]() {

        if (data_json["members"]["pCheckpointMarker"].contains("null")){
        temp_VaNobWO=NULL;
        return;
        }
    temp_VaNobWO=deserialize_void_p(data_json["members"]["pCheckpointMarker"]);
}();pCheckpointMarker=temp_VaNobWO;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetCheckpointNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetCheckpointNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetCheckpointNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetCheckpointNV");
    }  
    
call_function(commandBuffer, pCheckpointMarker);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pCheckpointMarker"]=[&]() {
    json return_qCRgzCw=json({});
    
        if (pCheckpointMarker==NULL){
            return_qCRgzCw["null"]=true;
            return return_qCRgzCw;
        }
        return serialize_void_p(pCheckpointMarker);
}();

        writeToConn(result);
    }

    void handle_vkGetQueueCheckpointDataNV(json data_json){
    //Will only be called by the server
    
VkQueue queue
            ;
[&]() {
queue=deserialize_VkQueue(data_json["members"]["queue"]);}();
uint32_t* pCheckpointDataCount
            ;
[&]() {

        if (data_json["members"]["pCheckpointDataCount"].contains("null")){
        pCheckpointDataCount=NULL;
        return;
        }
    pCheckpointDataCount=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pCheckpointDataCount)=deserialize_uint32_t(data_json["members"]["pCheckpointDataCount"]);}();
}();
VkCheckpointDataNV* pCheckpointData
        ;
[&]() {

        if (data_json["members"]["pCheckpointData"].contains("null")){
        pCheckpointData=NULL;
        return;
        }
    pCheckpointData=(VkCheckpointDataNV*)malloc(*pCheckpointDataCount*sizeof(VkCheckpointDataNV));
        for (int LNhNgVq=0; LNhNgVq < *pCheckpointDataCount; LNhNgVq++){
            [&]() {
pCheckpointData[LNhNgVq]=deserialize_VkCheckpointDataNV(data_json["members"]["pCheckpointData"]["members"][LNhNgVq]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetQueueCheckpointDataNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetQueueCheckpointDataNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetQueueCheckpointDataNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetQueueCheckpointDataNV");
    }  
    
call_function(queue, pCheckpointDataCount, pCheckpointData);
json result=json({});
        result["type"]="Response";
    

result["members"]["queue"]=[&]() {
    json return_KYhcIBS=json({});
    return serialize_VkQueue(queue);}();
result["members"]["pCheckpointDataCount"]=[&]() {
    json return_eEWDbVZ=json({});
    
        if (pCheckpointDataCount==NULL){
            return_eEWDbVZ["null"]=true;
            return return_eEWDbVZ;
        }
        return_eEWDbVZ=[&]() {
    json return_UKDbbYU=json({});
    return serialize_uint32_t(*pCheckpointDataCount);}();
return return_eEWDbVZ;}();
result["members"]["pCheckpointData"]=[&]() {
    json return_mSstNmc=json({});
    
        if (pCheckpointData==NULL){
            return_mSstNmc["null"]=true;
            return return_mSstNmc;
        }
        
        return_mSstNmc["members"]={};
        for(int mSstNmc=0; mSstNmc < *pCheckpointDataCount; mSstNmc++){
            json temp;
            temp=[&]() {
    json return_WCHKdpS=json({});
    return serialize_VkCheckpointDataNV(pCheckpointData[mSstNmc]);}();
            return_mSstNmc["members"].push_back(temp);
        }
        return return_mSstNmc;
        }();

        writeToConn(result);
    }

    void handle_vkCmdBindTransformFeedbackBuffersEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t firstBinding
            ;
[&]() {
firstBinding=deserialize_uint32_t(data_json["members"]["firstBinding"]);}();
uint32_t bindingCount
            ;
[&]() {
bindingCount=deserialize_uint32_t(data_json["members"]["bindingCount"]);}();
VkBuffer* pBuffers
            ;
[&]() {
VkBuffer* temp_wjPgLot;[&]() {

        if (data_json["members"]["pBuffers"].contains("null")){
        temp_wjPgLot=NULL;
        return;
        }
    temp_wjPgLot=(VkBuffer*)malloc(bindingCount*sizeof(VkBuffer));
        for (int QWtdPdi=0; QWtdPdi < bindingCount; QWtdPdi++){
            [&]() {
temp_wjPgLot[QWtdPdi]=deserialize_VkBuffer(data_json["members"]["pBuffers"]["members"][QWtdPdi]);}();;
        }
        }();pBuffers=temp_wjPgLot;}();
VkDeviceSize* pOffsets
            ;
[&]() {
VkDeviceSize* temp_KWuBsZc;[&]() {

        if (data_json["members"]["pOffsets"].contains("null")){
        temp_KWuBsZc=NULL;
        return;
        }
    [&]() {

        if (data_json["members"]["pOffsets"].contains("null")){
        temp_KWuBsZc=NULL;
        return;
        }
    temp_KWuBsZc=(uint64_t*)malloc(bindingCount*sizeof(uint64_t));
        for (int aYejgNL=0; aYejgNL < bindingCount; aYejgNL++){
            [&]() {
temp_KWuBsZc[aYejgNL]=deserialize_uint64_t(data_json["members"]["pOffsets"]["members"][aYejgNL]);}();;
        }
        }();}();pOffsets=temp_KWuBsZc;}();
VkDeviceSize* pSizes
        ;
[&]() {
VkDeviceSize* temp_dwJlipO;[&]() {

        if (data_json["members"]["pSizes"].contains("null")){
        temp_dwJlipO=NULL;
        return;
        }
    [&]() {

        if (data_json["members"]["pSizes"].contains("null")){
        temp_dwJlipO=NULL;
        return;
        }
    temp_dwJlipO=(uint64_t*)malloc(bindingCount*sizeof(uint64_t));
        for (int aPTJall=0; aPTJall < bindingCount; aPTJall++){
            [&]() {
temp_dwJlipO[aPTJall]=deserialize_uint64_t(data_json["members"]["pSizes"]["members"][aPTJall]);}();;
        }
        }();}();pSizes=temp_dwJlipO;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdBindTransformFeedbackBuffersEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBindTransformFeedbackBuffersEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdBindTransformFeedbackBuffersEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBindTransformFeedbackBuffersEXT");
    }  
    
call_function(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["firstBinding"]=[&]() {
    json return_JzarCRw=json({});
    return serialize_uint32_t(firstBinding);}();
result["members"]["bindingCount"]=[&]() {
    json return_KKQzFnF=json({});
    return serialize_uint32_t(bindingCount);}();
result["members"]["pBuffers"]=[&]() {
    json return_mLfEgSk=json({});
    
        if (pBuffers==NULL){
            return_mLfEgSk["null"]=true;
            return return_mLfEgSk;
        }
        
        return_mLfEgSk["members"]={};
        for(int mLfEgSk=0; mLfEgSk < bindingCount; mLfEgSk++){
            json temp;
            temp=[&]() {
    json return_sdCvutr=json({});
    return serialize_VkBuffer(pBuffers[mLfEgSk]);}();
            return_mLfEgSk["members"].push_back(temp);
        }
        return return_mLfEgSk;
        }();
result["members"]["pOffsets"]=[&]() {
    json return_esRfpyF=json({});
    
        if (pOffsets==NULL){
            return_esRfpyF["null"]=true;
            return return_esRfpyF;
        }
        
        return_esRfpyF["members"]={};
        for(int esRfpyF=0; esRfpyF < bindingCount; esRfpyF++){
            json temp;
            temp=[&]() {
    json return_sWZhkpG=json({});
    return_sWZhkpG=[&]() {
    json return_hRuQZpF=json({});
    return serialize_uint64_t(pOffsets[esRfpyF]);}();return return_sWZhkpG;}();
            return_esRfpyF["members"].push_back(temp);
        }
        return return_esRfpyF;
        }();
result["members"]["pSizes"]=[&]() {
    json return_mVDKkyS=json({});
    
        if (pSizes==NULL){
            return_mVDKkyS["null"]=true;
            return return_mVDKkyS;
        }
        
        return_mVDKkyS["members"]={};
        for(int mVDKkyS=0; mVDKkyS < bindingCount; mVDKkyS++){
            json temp;
            temp=[&]() {
    json return_lOVNMLW=json({});
    return_lOVNMLW=[&]() {
    json return_kZliHYx=json({});
    return serialize_uint64_t(pSizes[mVDKkyS]);}();return return_lOVNMLW;}();
            return_mVDKkyS["members"].push_back(temp);
        }
        return return_mVDKkyS;
        }();

        writeToConn(result);
    }

    void handle_vkCmdBeginTransformFeedbackEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t firstCounterBuffer
            ;
[&]() {
firstCounterBuffer=deserialize_uint32_t(data_json["members"]["firstCounterBuffer"]);}();
uint32_t counterBufferCount
            ;
[&]() {
counterBufferCount=deserialize_uint32_t(data_json["members"]["counterBufferCount"]);}();
VkBuffer* pCounterBuffers
            ;
[&]() {
VkBuffer* temp_PvwFGfu;[&]() {

        if (data_json["members"]["pCounterBuffers"].contains("null")){
        temp_PvwFGfu=NULL;
        return;
        }
    temp_PvwFGfu=(VkBuffer*)malloc(counterBufferCount*sizeof(VkBuffer));
        for (int DCiWzVM=0; DCiWzVM < counterBufferCount; DCiWzVM++){
            [&]() {
temp_PvwFGfu[DCiWzVM]=deserialize_VkBuffer(data_json["members"]["pCounterBuffers"]["members"][DCiWzVM]);}();;
        }
        }();pCounterBuffers=temp_PvwFGfu;}();
VkDeviceSize* pCounterBufferOffsets
        ;
[&]() {
VkDeviceSize* temp_nDsstbh;[&]() {

        if (data_json["members"]["pCounterBufferOffsets"].contains("null")){
        temp_nDsstbh=NULL;
        return;
        }
    [&]() {

        if (data_json["members"]["pCounterBufferOffsets"].contains("null")){
        temp_nDsstbh=NULL;
        return;
        }
    temp_nDsstbh=(uint64_t*)malloc(counterBufferCount*sizeof(uint64_t));
        for (int YdHrYhD=0; YdHrYhD < counterBufferCount; YdHrYhD++){
            [&]() {
temp_nDsstbh[YdHrYhD]=deserialize_uint64_t(data_json["members"]["pCounterBufferOffsets"]["members"][YdHrYhD]);}();;
        }
        }();}();pCounterBufferOffsets=temp_nDsstbh;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdBeginTransformFeedbackEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBeginTransformFeedbackEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdBeginTransformFeedbackEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBeginTransformFeedbackEXT");
    }  
    
call_function(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["firstCounterBuffer"]=[&]() {
    json return_geBeGPE=json({});
    return serialize_uint32_t(firstCounterBuffer);}();
result["members"]["counterBufferCount"]=[&]() {
    json return_zhOOlbT=json({});
    return serialize_uint32_t(counterBufferCount);}();
result["members"]["pCounterBuffers"]=[&]() {
    json return_HOIiIpu=json({});
    
        if (pCounterBuffers==NULL){
            return_HOIiIpu["null"]=true;
            return return_HOIiIpu;
        }
        
        return_HOIiIpu["members"]={};
        for(int HOIiIpu=0; HOIiIpu < counterBufferCount; HOIiIpu++){
            json temp;
            temp=[&]() {
    json return_lTaMwCI=json({});
    return serialize_VkBuffer(pCounterBuffers[HOIiIpu]);}();
            return_HOIiIpu["members"].push_back(temp);
        }
        return return_HOIiIpu;
        }();
result["members"]["pCounterBufferOffsets"]=[&]() {
    json return_cSdHcxS=json({});
    
        if (pCounterBufferOffsets==NULL){
            return_cSdHcxS["null"]=true;
            return return_cSdHcxS;
        }
        
        return_cSdHcxS["members"]={};
        for(int cSdHcxS=0; cSdHcxS < counterBufferCount; cSdHcxS++){
            json temp;
            temp=[&]() {
    json return_gBEMEmP=json({});
    return_gBEMEmP=[&]() {
    json return_UCHxNRw=json({});
    return serialize_uint64_t(pCounterBufferOffsets[cSdHcxS]);}();return return_gBEMEmP;}();
            return_cSdHcxS["members"].push_back(temp);
        }
        return return_cSdHcxS;
        }();

        writeToConn(result);
    }

    void handle_vkCmdEndTransformFeedbackEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t firstCounterBuffer
            ;
[&]() {
firstCounterBuffer=deserialize_uint32_t(data_json["members"]["firstCounterBuffer"]);}();
uint32_t counterBufferCount
            ;
[&]() {
counterBufferCount=deserialize_uint32_t(data_json["members"]["counterBufferCount"]);}();
VkBuffer* pCounterBuffers
            ;
[&]() {
VkBuffer* temp_PvwFGfu;[&]() {

        if (data_json["members"]["pCounterBuffers"].contains("null")){
        temp_PvwFGfu=NULL;
        return;
        }
    temp_PvwFGfu=(VkBuffer*)malloc(counterBufferCount*sizeof(VkBuffer));
        for (int DCiWzVM=0; DCiWzVM < counterBufferCount; DCiWzVM++){
            [&]() {
temp_PvwFGfu[DCiWzVM]=deserialize_VkBuffer(data_json["members"]["pCounterBuffers"]["members"][DCiWzVM]);}();;
        }
        }();pCounterBuffers=temp_PvwFGfu;}();
VkDeviceSize* pCounterBufferOffsets
        ;
[&]() {
VkDeviceSize* temp_nDsstbh;[&]() {

        if (data_json["members"]["pCounterBufferOffsets"].contains("null")){
        temp_nDsstbh=NULL;
        return;
        }
    [&]() {

        if (data_json["members"]["pCounterBufferOffsets"].contains("null")){
        temp_nDsstbh=NULL;
        return;
        }
    temp_nDsstbh=(uint64_t*)malloc(counterBufferCount*sizeof(uint64_t));
        for (int YdHrYhD=0; YdHrYhD < counterBufferCount; YdHrYhD++){
            [&]() {
temp_nDsstbh[YdHrYhD]=deserialize_uint64_t(data_json["members"]["pCounterBufferOffsets"]["members"][YdHrYhD]);}();;
        }
        }();}();pCounterBufferOffsets=temp_nDsstbh;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdEndTransformFeedbackEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdEndTransformFeedbackEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdEndTransformFeedbackEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdEndTransformFeedbackEXT");
    }  
    
call_function(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["firstCounterBuffer"]=[&]() {
    json return_geBeGPE=json({});
    return serialize_uint32_t(firstCounterBuffer);}();
result["members"]["counterBufferCount"]=[&]() {
    json return_zhOOlbT=json({});
    return serialize_uint32_t(counterBufferCount);}();
result["members"]["pCounterBuffers"]=[&]() {
    json return_HOIiIpu=json({});
    
        if (pCounterBuffers==NULL){
            return_HOIiIpu["null"]=true;
            return return_HOIiIpu;
        }
        
        return_HOIiIpu["members"]={};
        for(int HOIiIpu=0; HOIiIpu < counterBufferCount; HOIiIpu++){
            json temp;
            temp=[&]() {
    json return_lTaMwCI=json({});
    return serialize_VkBuffer(pCounterBuffers[HOIiIpu]);}();
            return_HOIiIpu["members"].push_back(temp);
        }
        return return_HOIiIpu;
        }();
result["members"]["pCounterBufferOffsets"]=[&]() {
    json return_cSdHcxS=json({});
    
        if (pCounterBufferOffsets==NULL){
            return_cSdHcxS["null"]=true;
            return return_cSdHcxS;
        }
        
        return_cSdHcxS["members"]={};
        for(int cSdHcxS=0; cSdHcxS < counterBufferCount; cSdHcxS++){
            json temp;
            temp=[&]() {
    json return_gBEMEmP=json({});
    return_gBEMEmP=[&]() {
    json return_UCHxNRw=json({});
    return serialize_uint64_t(pCounterBufferOffsets[cSdHcxS]);}();return return_gBEMEmP;}();
            return_cSdHcxS["members"].push_back(temp);
        }
        return return_cSdHcxS;
        }();

        writeToConn(result);
    }

    void handle_vkCmdBeginQueryIndexedEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkQueryPool queryPool
            ;
[&]() {
queryPool=deserialize_VkQueryPool(data_json["members"]["queryPool"]);}();
uint32_t query
            ;
[&]() {
query=deserialize_uint32_t(data_json["members"]["query"]);}();
VkQueryControlFlags flags
            ;
[&]() {
flags=deserialize_VkQueryControlFlags(data_json["members"]["flags"]);}();
uint32_t index
        ;
[&]() {
index=deserialize_uint32_t(data_json["members"]["index"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdBeginQueryIndexedEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBeginQueryIndexedEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdBeginQueryIndexedEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBeginQueryIndexedEXT");
    }  
    
call_function(commandBuffer, queryPool, query, flags, index);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["queryPool"]=[&]() {
    json return_hLGHCzh=json({});
    return serialize_VkQueryPool(queryPool);}();
result["members"]["query"]=[&]() {
    json return_NtquCQL=json({});
    return serialize_uint32_t(query);}();
result["members"]["flags"]=[&]() {
    json return_TfeulOL=json({});
    return serialize_VkQueryControlFlags(flags);}();
result["members"]["index"]=[&]() {
    json return_dMdKGtU=json({});
    return serialize_uint32_t(index);}();

        writeToConn(result);
    }

    void handle_vkCmdEndQueryIndexedEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkQueryPool queryPool
            ;
[&]() {
queryPool=deserialize_VkQueryPool(data_json["members"]["queryPool"]);}();
uint32_t query
            ;
[&]() {
query=deserialize_uint32_t(data_json["members"]["query"]);}();
uint32_t index
        ;
[&]() {
index=deserialize_uint32_t(data_json["members"]["index"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdEndQueryIndexedEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdEndQueryIndexedEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdEndQueryIndexedEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdEndQueryIndexedEXT");
    }  
    
call_function(commandBuffer, queryPool, query, index);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["queryPool"]=[&]() {
    json return_hLGHCzh=json({});
    return serialize_VkQueryPool(queryPool);}();
result["members"]["query"]=[&]() {
    json return_NtquCQL=json({});
    return serialize_uint32_t(query);}();
result["members"]["index"]=[&]() {
    json return_dMdKGtU=json({});
    return serialize_uint32_t(index);}();

        writeToConn(result);
    }

    void handle_vkCmdDrawIndirectByteCountEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t instanceCount
            ;
[&]() {
instanceCount=deserialize_uint32_t(data_json["members"]["instanceCount"]);}();
uint32_t firstInstance
            ;
[&]() {
firstInstance=deserialize_uint32_t(data_json["members"]["firstInstance"]);}();
VkBuffer counterBuffer
            ;
[&]() {
counterBuffer=deserialize_VkBuffer(data_json["members"]["counterBuffer"]);}();
VkDeviceSize counterBufferOffset
            ;
[&]() {
[&]() {
counterBufferOffset=deserialize_uint64_t(data_json["members"]["counterBufferOffset"]);}();}();
uint32_t counterOffset
            ;
[&]() {
counterOffset=deserialize_uint32_t(data_json["members"]["counterOffset"]);}();
uint32_t vertexStride
        ;
[&]() {
vertexStride=deserialize_uint32_t(data_json["members"]["vertexStride"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdDrawIndirectByteCountEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDrawIndirectByteCountEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdDrawIndirectByteCountEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDrawIndirectByteCountEXT");
    }  
    
call_function(commandBuffer, instanceCount, firstInstance, counterBuffer, counterBufferOffset, counterOffset, vertexStride);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["instanceCount"]=[&]() {
    json return_esOolQK=json({});
    return serialize_uint32_t(instanceCount);}();
result["members"]["firstInstance"]=[&]() {
    json return_tzucUME=json({});
    return serialize_uint32_t(firstInstance);}();
result["members"]["counterBuffer"]=[&]() {
    json return_rcCIiHq=json({});
    return serialize_VkBuffer(counterBuffer);}();
result["members"]["counterBufferOffset"]=[&]() {
    json return_zztdzmN=json({});
    return_zztdzmN=[&]() {
    json return_ngurqzU=json({});
    return serialize_uint64_t(counterBufferOffset);}();return return_zztdzmN;}();
result["members"]["counterOffset"]=[&]() {
    json return_pkGqJHc=json({});
    return serialize_uint32_t(counterOffset);}();
result["members"]["vertexStride"]=[&]() {
    json return_QTjdEBY=json({});
    return serialize_uint32_t(vertexStride);}();

        writeToConn(result);
    }

    void handle_vkCmdSetExclusiveScissorNV(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t firstExclusiveScissor
            ;
[&]() {
firstExclusiveScissor=deserialize_uint32_t(data_json["members"]["firstExclusiveScissor"]);}();
uint32_t exclusiveScissorCount
            ;
[&]() {
exclusiveScissorCount=deserialize_uint32_t(data_json["members"]["exclusiveScissorCount"]);}();
VkRect2D* pExclusiveScissors
        ;
[&]() {
VkRect2D* temp_ycTZPYf;[&]() {

        if (data_json["members"]["pExclusiveScissors"].contains("null")){
        temp_ycTZPYf=NULL;
        return;
        }
    temp_ycTZPYf=(VkRect2D*)malloc(exclusiveScissorCount*sizeof(VkRect2D));
        for (int rzZjHcO=0; rzZjHcO < exclusiveScissorCount; rzZjHcO++){
            [&]() {
temp_ycTZPYf[rzZjHcO]=deserialize_VkRect2D(data_json["members"]["pExclusiveScissors"]["members"][rzZjHcO]);}();;
        }
        }();pExclusiveScissors=temp_ycTZPYf;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetExclusiveScissorNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetExclusiveScissorNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetExclusiveScissorNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetExclusiveScissorNV");
    }  
    
call_function(commandBuffer, firstExclusiveScissor, exclusiveScissorCount, pExclusiveScissors);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["firstExclusiveScissor"]=[&]() {
    json return_eglWzBy=json({});
    return serialize_uint32_t(firstExclusiveScissor);}();
result["members"]["exclusiveScissorCount"]=[&]() {
    json return_BELFdqe=json({});
    return serialize_uint32_t(exclusiveScissorCount);}();
result["members"]["pExclusiveScissors"]=[&]() {
    json return_SriNWmm=json({});
    
        if (pExclusiveScissors==NULL){
            return_SriNWmm["null"]=true;
            return return_SriNWmm;
        }
        
        return_SriNWmm["members"]={};
        for(int SriNWmm=0; SriNWmm < exclusiveScissorCount; SriNWmm++){
            json temp;
            temp=[&]() {
    json return_JjSKlxj=json({});
    return serialize_VkRect2D(pExclusiveScissors[SriNWmm]);}();
            return_SriNWmm["members"].push_back(temp);
        }
        return return_SriNWmm;
        }();

        writeToConn(result);
    }

    void handle_vkCmdSetExclusiveScissorEnableNV(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t firstExclusiveScissor
            ;
[&]() {
firstExclusiveScissor=deserialize_uint32_t(data_json["members"]["firstExclusiveScissor"]);}();
uint32_t exclusiveScissorCount
            ;
[&]() {
exclusiveScissorCount=deserialize_uint32_t(data_json["members"]["exclusiveScissorCount"]);}();
VkBool32* pExclusiveScissorEnables
        ;
[&]() {
VkBool32* temp_XfHoIMG;[&]() {

        if (data_json["members"]["pExclusiveScissorEnables"].contains("null")){
        temp_XfHoIMG=NULL;
        return;
        }
    [&]() {

        if (data_json["members"]["pExclusiveScissorEnables"].contains("null")){
        temp_XfHoIMG=NULL;
        return;
        }
    temp_XfHoIMG=(uint32_t*)malloc(exclusiveScissorCount*sizeof(uint32_t));
        for (int wcAONDz=0; wcAONDz < exclusiveScissorCount; wcAONDz++){
            [&]() {
temp_XfHoIMG[wcAONDz]=deserialize_uint32_t(data_json["members"]["pExclusiveScissorEnables"]["members"][wcAONDz]);}();;
        }
        }();}();pExclusiveScissorEnables=temp_XfHoIMG;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetExclusiveScissorEnableNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetExclusiveScissorEnableNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetExclusiveScissorEnableNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetExclusiveScissorEnableNV");
    }  
    
call_function(commandBuffer, firstExclusiveScissor, exclusiveScissorCount, pExclusiveScissorEnables);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["firstExclusiveScissor"]=[&]() {
    json return_eglWzBy=json({});
    return serialize_uint32_t(firstExclusiveScissor);}();
result["members"]["exclusiveScissorCount"]=[&]() {
    json return_BELFdqe=json({});
    return serialize_uint32_t(exclusiveScissorCount);}();
result["members"]["pExclusiveScissorEnables"]=[&]() {
    json return_AgWOaGE=json({});
    
        if (pExclusiveScissorEnables==NULL){
            return_AgWOaGE["null"]=true;
            return return_AgWOaGE;
        }
        
        return_AgWOaGE["members"]={};
        for(int AgWOaGE=0; AgWOaGE < exclusiveScissorCount; AgWOaGE++){
            json temp;
            temp=[&]() {
    json return_rwjsvth=json({});
    return_rwjsvth=[&]() {
    json return_fFMxzOA=json({});
    return serialize_uint32_t(pExclusiveScissorEnables[AgWOaGE]);}();return return_rwjsvth;}();
            return_AgWOaGE["members"].push_back(temp);
        }
        return return_AgWOaGE;
        }();

        writeToConn(result);
    }

    void handle_vkCmdBindShadingRateImageNV(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkImageView imageView
            ;
[&]() {
imageView=deserialize_VkImageView(data_json["members"]["imageView"]);}();
VkImageLayout imageLayout
        ;
[&]() {
imageLayout=deserialize_VkImageLayout(data_json["members"]["imageLayout"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdBindShadingRateImageNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBindShadingRateImageNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdBindShadingRateImageNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBindShadingRateImageNV");
    }  
    
call_function(commandBuffer, imageView, imageLayout);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["imageView"]=[&]() {
    json return_TXEDCEI=json({});
    return serialize_VkImageView(imageView);}();
result["members"]["imageLayout"]=[&]() {
    json return_VWPBLHf=json({});
    return serialize_VkImageLayout(imageLayout);}();

        writeToConn(result);
    }

    void handle_vkCmdSetViewportShadingRatePaletteNV(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t firstViewport
            ;
[&]() {
firstViewport=deserialize_uint32_t(data_json["members"]["firstViewport"]);}();
uint32_t viewportCount
            ;
[&]() {
viewportCount=deserialize_uint32_t(data_json["members"]["viewportCount"]);}();
VkShadingRatePaletteNV* pShadingRatePalettes
        ;
[&]() {
VkShadingRatePaletteNV* temp_ylIthak;[&]() {

        if (data_json["members"]["pShadingRatePalettes"].contains("null")){
        temp_ylIthak=NULL;
        return;
        }
    temp_ylIthak=(VkShadingRatePaletteNV*)malloc(viewportCount*sizeof(VkShadingRatePaletteNV));
        for (int WDjHaQc=0; WDjHaQc < viewportCount; WDjHaQc++){
            [&]() {
temp_ylIthak[WDjHaQc]=deserialize_VkShadingRatePaletteNV(data_json["members"]["pShadingRatePalettes"]["members"][WDjHaQc]);}();;
        }
        }();pShadingRatePalettes=temp_ylIthak;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetViewportShadingRatePaletteNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetViewportShadingRatePaletteNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetViewportShadingRatePaletteNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetViewportShadingRatePaletteNV");
    }  
    
call_function(commandBuffer, firstViewport, viewportCount, pShadingRatePalettes);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["firstViewport"]=[&]() {
    json return_zZVDUCF=json({});
    return serialize_uint32_t(firstViewport);}();
result["members"]["viewportCount"]=[&]() {
    json return_pDFybJm=json({});
    return serialize_uint32_t(viewportCount);}();
result["members"]["pShadingRatePalettes"]=[&]() {
    json return_fXiOHDa=json({});
    
        if (pShadingRatePalettes==NULL){
            return_fXiOHDa["null"]=true;
            return return_fXiOHDa;
        }
        
        return_fXiOHDa["members"]={};
        for(int fXiOHDa=0; fXiOHDa < viewportCount; fXiOHDa++){
            json temp;
            temp=[&]() {
    json return_kCMraaK=json({});
    return serialize_VkShadingRatePaletteNV(pShadingRatePalettes[fXiOHDa]);}();
            return_fXiOHDa["members"].push_back(temp);
        }
        return return_fXiOHDa;
        }();

        writeToConn(result);
    }

    void handle_vkCmdSetCoarseSampleOrderNV(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkCoarseSampleOrderTypeNV sampleOrderType
            ;
[&]() {
sampleOrderType=deserialize_VkCoarseSampleOrderTypeNV(data_json["members"]["sampleOrderType"]);}();
uint32_t customSampleOrderCount
            ;
[&]() {
customSampleOrderCount=deserialize_uint32_t(data_json["members"]["customSampleOrderCount"]);}();
VkCoarseSampleOrderCustomNV* pCustomSampleOrders
        ;
[&]() {
VkCoarseSampleOrderCustomNV* temp_QpGgdSD;[&]() {

        if (data_json["members"]["pCustomSampleOrders"].contains("null")){
        temp_QpGgdSD=NULL;
        return;
        }
    temp_QpGgdSD=(VkCoarseSampleOrderCustomNV*)malloc(customSampleOrderCount*sizeof(VkCoarseSampleOrderCustomNV));
        for (int CyESAIu=0; CyESAIu < customSampleOrderCount; CyESAIu++){
            [&]() {
temp_QpGgdSD[CyESAIu]=deserialize_VkCoarseSampleOrderCustomNV(data_json["members"]["pCustomSampleOrders"]["members"][CyESAIu]);}();;
        }
        }();pCustomSampleOrders=temp_QpGgdSD;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetCoarseSampleOrderNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetCoarseSampleOrderNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetCoarseSampleOrderNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetCoarseSampleOrderNV");
    }  
    
call_function(commandBuffer, sampleOrderType, customSampleOrderCount, pCustomSampleOrders);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["sampleOrderType"]=[&]() {
    json return_vDLCHIp=json({});
    return serialize_VkCoarseSampleOrderTypeNV(sampleOrderType);}();
result["members"]["customSampleOrderCount"]=[&]() {
    json return_RgkihMk=json({});
    return serialize_uint32_t(customSampleOrderCount);}();
result["members"]["pCustomSampleOrders"]=[&]() {
    json return_bdDmLBo=json({});
    
        if (pCustomSampleOrders==NULL){
            return_bdDmLBo["null"]=true;
            return return_bdDmLBo;
        }
        
        return_bdDmLBo["members"]={};
        for(int bdDmLBo=0; bdDmLBo < customSampleOrderCount; bdDmLBo++){
            json temp;
            temp=[&]() {
    json return_AEcoccS=json({});
    return serialize_VkCoarseSampleOrderCustomNV(pCustomSampleOrders[bdDmLBo]);}();
            return_bdDmLBo["members"].push_back(temp);
        }
        return return_bdDmLBo;
        }();

        writeToConn(result);
    }

    void handle_vkCmdDrawMeshTasksNV(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t taskCount
            ;
[&]() {
taskCount=deserialize_uint32_t(data_json["members"]["taskCount"]);}();
uint32_t firstTask
        ;
[&]() {
firstTask=deserialize_uint32_t(data_json["members"]["firstTask"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdDrawMeshTasksNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDrawMeshTasksNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdDrawMeshTasksNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDrawMeshTasksNV");
    }  
    
call_function(commandBuffer, taskCount, firstTask);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["taskCount"]=[&]() {
    json return_LoPNKjn=json({});
    return serialize_uint32_t(taskCount);}();
result["members"]["firstTask"]=[&]() {
    json return_riSVVrx=json({});
    return serialize_uint32_t(firstTask);}();

        writeToConn(result);
    }

    void handle_vkCmdDrawMeshTasksIndirectNV(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBuffer buffer
            ;
[&]() {
buffer=deserialize_VkBuffer(data_json["members"]["buffer"]);}();
VkDeviceSize offset
            ;
[&]() {
[&]() {
offset=deserialize_uint64_t(data_json["members"]["offset"]);}();}();
uint32_t drawCount
            ;
[&]() {
drawCount=deserialize_uint32_t(data_json["members"]["drawCount"]);}();
uint32_t stride
        ;
[&]() {
stride=deserialize_uint32_t(data_json["members"]["stride"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdDrawMeshTasksIndirectNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDrawMeshTasksIndirectNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdDrawMeshTasksIndirectNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDrawMeshTasksIndirectNV");
    }  
    
call_function(commandBuffer, buffer, offset, drawCount, stride);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["buffer"]=[&]() {
    json return_Fjwvwzv=json({});
    return serialize_VkBuffer(buffer);}();
result["members"]["offset"]=[&]() {
    json return_vTtZMhj=json({});
    return_vTtZMhj=[&]() {
    json return_eEWibmR=json({});
    return serialize_uint64_t(offset);}();return return_vTtZMhj;}();
result["members"]["drawCount"]=[&]() {
    json return_tDYkDda=json({});
    return serialize_uint32_t(drawCount);}();
result["members"]["stride"]=[&]() {
    json return_TkKksoe=json({});
    return serialize_uint32_t(stride);}();

        writeToConn(result);
    }

    void handle_vkCmdDrawMeshTasksIndirectCountNV(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBuffer buffer
            ;
[&]() {
buffer=deserialize_VkBuffer(data_json["members"]["buffer"]);}();
VkDeviceSize offset
            ;
[&]() {
[&]() {
offset=deserialize_uint64_t(data_json["members"]["offset"]);}();}();
VkBuffer countBuffer
            ;
[&]() {
countBuffer=deserialize_VkBuffer(data_json["members"]["countBuffer"]);}();
VkDeviceSize countBufferOffset
            ;
[&]() {
[&]() {
countBufferOffset=deserialize_uint64_t(data_json["members"]["countBufferOffset"]);}();}();
uint32_t maxDrawCount
            ;
[&]() {
maxDrawCount=deserialize_uint32_t(data_json["members"]["maxDrawCount"]);}();
uint32_t stride
        ;
[&]() {
stride=deserialize_uint32_t(data_json["members"]["stride"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdDrawMeshTasksIndirectCountNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDrawMeshTasksIndirectCountNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdDrawMeshTasksIndirectCountNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDrawMeshTasksIndirectCountNV");
    }  
    
call_function(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["buffer"]=[&]() {
    json return_Fjwvwzv=json({});
    return serialize_VkBuffer(buffer);}();
result["members"]["offset"]=[&]() {
    json return_vTtZMhj=json({});
    return_vTtZMhj=[&]() {
    json return_eEWibmR=json({});
    return serialize_uint64_t(offset);}();return return_vTtZMhj;}();
result["members"]["countBuffer"]=[&]() {
    json return_thNJVdM=json({});
    return serialize_VkBuffer(countBuffer);}();
result["members"]["countBufferOffset"]=[&]() {
    json return_TrBaFUo=json({});
    return_TrBaFUo=[&]() {
    json return_xhKrPKX=json({});
    return serialize_uint64_t(countBufferOffset);}();return return_TrBaFUo;}();
result["members"]["maxDrawCount"]=[&]() {
    json return_HpcjsyV=json({});
    return serialize_uint32_t(maxDrawCount);}();
result["members"]["stride"]=[&]() {
    json return_TkKksoe=json({});
    return serialize_uint32_t(stride);}();

        writeToConn(result);
    }

    void handle_vkCmdDrawMeshTasksEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t groupCountX
            ;
[&]() {
groupCountX=deserialize_uint32_t(data_json["members"]["groupCountX"]);}();
uint32_t groupCountY
            ;
[&]() {
groupCountY=deserialize_uint32_t(data_json["members"]["groupCountY"]);}();
uint32_t groupCountZ
        ;
[&]() {
groupCountZ=deserialize_uint32_t(data_json["members"]["groupCountZ"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdDrawMeshTasksEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDrawMeshTasksEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdDrawMeshTasksEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDrawMeshTasksEXT");
    }  
    
call_function(commandBuffer, groupCountX, groupCountY, groupCountZ);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["groupCountX"]=[&]() {
    json return_BCsqVBT=json({});
    return serialize_uint32_t(groupCountX);}();
result["members"]["groupCountY"]=[&]() {
    json return_PuRhYIE=json({});
    return serialize_uint32_t(groupCountY);}();
result["members"]["groupCountZ"]=[&]() {
    json return_OaBSWyk=json({});
    return serialize_uint32_t(groupCountZ);}();

        writeToConn(result);
    }

    void handle_vkCmdDrawMeshTasksIndirectEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBuffer buffer
            ;
[&]() {
buffer=deserialize_VkBuffer(data_json["members"]["buffer"]);}();
VkDeviceSize offset
            ;
[&]() {
[&]() {
offset=deserialize_uint64_t(data_json["members"]["offset"]);}();}();
uint32_t drawCount
            ;
[&]() {
drawCount=deserialize_uint32_t(data_json["members"]["drawCount"]);}();
uint32_t stride
        ;
[&]() {
stride=deserialize_uint32_t(data_json["members"]["stride"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdDrawMeshTasksIndirectEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDrawMeshTasksIndirectEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdDrawMeshTasksIndirectEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDrawMeshTasksIndirectEXT");
    }  
    
call_function(commandBuffer, buffer, offset, drawCount, stride);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["buffer"]=[&]() {
    json return_Fjwvwzv=json({});
    return serialize_VkBuffer(buffer);}();
result["members"]["offset"]=[&]() {
    json return_vTtZMhj=json({});
    return_vTtZMhj=[&]() {
    json return_eEWibmR=json({});
    return serialize_uint64_t(offset);}();return return_vTtZMhj;}();
result["members"]["drawCount"]=[&]() {
    json return_tDYkDda=json({});
    return serialize_uint32_t(drawCount);}();
result["members"]["stride"]=[&]() {
    json return_TkKksoe=json({});
    return serialize_uint32_t(stride);}();

        writeToConn(result);
    }

    void handle_vkCmdDrawMeshTasksIndirectCountEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBuffer buffer
            ;
[&]() {
buffer=deserialize_VkBuffer(data_json["members"]["buffer"]);}();
VkDeviceSize offset
            ;
[&]() {
[&]() {
offset=deserialize_uint64_t(data_json["members"]["offset"]);}();}();
VkBuffer countBuffer
            ;
[&]() {
countBuffer=deserialize_VkBuffer(data_json["members"]["countBuffer"]);}();
VkDeviceSize countBufferOffset
            ;
[&]() {
[&]() {
countBufferOffset=deserialize_uint64_t(data_json["members"]["countBufferOffset"]);}();}();
uint32_t maxDrawCount
            ;
[&]() {
maxDrawCount=deserialize_uint32_t(data_json["members"]["maxDrawCount"]);}();
uint32_t stride
        ;
[&]() {
stride=deserialize_uint32_t(data_json["members"]["stride"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdDrawMeshTasksIndirectCountEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDrawMeshTasksIndirectCountEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdDrawMeshTasksIndirectCountEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDrawMeshTasksIndirectCountEXT");
    }  
    
call_function(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["buffer"]=[&]() {
    json return_Fjwvwzv=json({});
    return serialize_VkBuffer(buffer);}();
result["members"]["offset"]=[&]() {
    json return_vTtZMhj=json({});
    return_vTtZMhj=[&]() {
    json return_eEWibmR=json({});
    return serialize_uint64_t(offset);}();return return_vTtZMhj;}();
result["members"]["countBuffer"]=[&]() {
    json return_thNJVdM=json({});
    return serialize_VkBuffer(countBuffer);}();
result["members"]["countBufferOffset"]=[&]() {
    json return_TrBaFUo=json({});
    return_TrBaFUo=[&]() {
    json return_xhKrPKX=json({});
    return serialize_uint64_t(countBufferOffset);}();return return_TrBaFUo;}();
result["members"]["maxDrawCount"]=[&]() {
    json return_HpcjsyV=json({});
    return serialize_uint32_t(maxDrawCount);}();
result["members"]["stride"]=[&]() {
    json return_TkKksoe=json({});
    return serialize_uint32_t(stride);}();

        writeToConn(result);
    }

    void handle_vkCompileDeferredNV(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkPipeline pipeline
            ;
[&]() {
pipeline=deserialize_VkPipeline(data_json["members"]["pipeline"]);}();
uint32_t shader
        ;
[&]() {
shader=deserialize_uint32_t(data_json["members"]["shader"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCompileDeferredNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCompileDeferredNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCompileDeferredNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCompileDeferredNV");
    }  
    
auto return_value=call_function(device, pipeline, shader);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_aRpUhFJ=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pipeline"]=[&]() {
    json return_xIUyQCN=json({});
    return serialize_VkPipeline(pipeline);}();
result["members"]["shader"]=[&]() {
    json return_kPurEfy=json({});
    return serialize_uint32_t(shader);}();

        writeToConn(result);
    }

    void handle_vkCreateAccelerationStructureNV(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkAccelerationStructureCreateInfoNV* pCreateInfo
            ;
[&]() {
VkAccelerationStructureCreateInfoNV* temp_glIUEeB;[&]() {

        if (data_json["members"]["pCreateInfo"].contains("null")){
        temp_glIUEeB=NULL;
        return;
        }
    temp_glIUEeB=(VkAccelerationStructureCreateInfoNV*)malloc(sizeof(VkAccelerationStructureCreateInfoNV));
[&]() {
*(temp_glIUEeB)=deserialize_VkAccelerationStructureCreateInfoNV(data_json["members"]["pCreateInfo"]);}();
}();pCreateInfo=temp_glIUEeB;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkAccelerationStructureNV* pAccelerationStructure
        ;
[&]() {

        if (data_json["members"]["pAccelerationStructure"].contains("null")){
        pAccelerationStructure=NULL;
        return;
        }
    pAccelerationStructure=(VkAccelerationStructureNV*)malloc(sizeof(VkAccelerationStructureNV));
[&]() {
*(pAccelerationStructure)=deserialize_VkAccelerationStructureNV(data_json["members"]["pAccelerationStructure"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreateAccelerationStructureNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateAccelerationStructureNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreateAccelerationStructureNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateAccelerationStructureNV");
    }  
    
auto return_value=call_function(device, pCreateInfo, pAllocator, pAccelerationStructure);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_GYzuuCx=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pCreateInfo"]=[&]() {
    json return_QHGzvOB=json({});
    
        if (pCreateInfo==NULL){
            return_QHGzvOB["null"]=true;
            return return_QHGzvOB;
        }
        return_QHGzvOB=[&]() {
    json return_HvfPXhs=json({});
    return serialize_VkAccelerationStructureCreateInfoNV(*pCreateInfo);}();
return return_QHGzvOB;}();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pAccelerationStructure"]=[&]() {
    json return_OUUStUb=json({});
    
        if (pAccelerationStructure==NULL){
            return_OUUStUb["null"]=true;
            return return_OUUStUb;
        }
        return_OUUStUb=[&]() {
    json return_hgQLQrQ=json({});
    return serialize_VkAccelerationStructureNV(*pAccelerationStructure);}();
return return_OUUStUb;}();

        writeToConn(result);
    }

    void handle_vkCmdBindInvocationMaskHUAWEI(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkImageView imageView
            ;
[&]() {
imageView=deserialize_VkImageView(data_json["members"]["imageView"]);}();
VkImageLayout imageLayout
        ;
[&]() {
imageLayout=deserialize_VkImageLayout(data_json["members"]["imageLayout"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdBindInvocationMaskHUAWEI)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBindInvocationMaskHUAWEI");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdBindInvocationMaskHUAWEI)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBindInvocationMaskHUAWEI");
    }  
    
call_function(commandBuffer, imageView, imageLayout);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["imageView"]=[&]() {
    json return_TXEDCEI=json({});
    return serialize_VkImageView(imageView);}();
result["members"]["imageLayout"]=[&]() {
    json return_VWPBLHf=json({});
    return serialize_VkImageLayout(imageLayout);}();

        writeToConn(result);
    }

    void handle_vkDestroyAccelerationStructureKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkAccelerationStructureKHR accelerationStructure
            ;
[&]() {
accelerationStructure=deserialize_VkAccelerationStructureKHR(data_json["members"]["accelerationStructure"]);}();
VkAllocationCallbacks* pAllocator
        ;
[&]() {
VkAllocationCallbacks* temp_VAmhMvJ;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_VAmhMvJ=NULL;
        return;
        }
    temp_VAmhMvJ=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_VAmhMvJ)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_VAmhMvJ;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkDestroyAccelerationStructureKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyAccelerationStructureKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkDestroyAccelerationStructureKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyAccelerationStructureKHR");
    }  
    
call_function(device, accelerationStructure, pAllocator);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["accelerationStructure"]=[&]() {
    json return_ovGXAXW=json({});
    return serialize_VkAccelerationStructureKHR(accelerationStructure);}();
result["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();

        writeToConn(result);
    }

    void handle_vkDestroyAccelerationStructureNV(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkAccelerationStructureNV accelerationStructure
            ;
[&]() {
accelerationStructure=deserialize_VkAccelerationStructureNV(data_json["members"]["accelerationStructure"]);}();
VkAllocationCallbacks* pAllocator
        ;
[&]() {
VkAllocationCallbacks* temp_VAmhMvJ;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_VAmhMvJ=NULL;
        return;
        }
    temp_VAmhMvJ=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_VAmhMvJ)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_VAmhMvJ;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkDestroyAccelerationStructureNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyAccelerationStructureNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkDestroyAccelerationStructureNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyAccelerationStructureNV");
    }  
    
call_function(device, accelerationStructure, pAllocator);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["accelerationStructure"]=[&]() {
    json return_rkmFIkM=json({});
    return serialize_VkAccelerationStructureNV(accelerationStructure);}();
result["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();

        writeToConn(result);
    }

    void handle_vkGetAccelerationStructureMemoryRequirementsNV(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkAccelerationStructureMemoryRequirementsInfoNV* pInfo
            ;
[&]() {
VkAccelerationStructureMemoryRequirementsInfoNV* temp_zPIWbLt;[&]() {

        if (data_json["members"]["pInfo"].contains("null")){
        temp_zPIWbLt=NULL;
        return;
        }
    temp_zPIWbLt=(VkAccelerationStructureMemoryRequirementsInfoNV*)malloc(sizeof(VkAccelerationStructureMemoryRequirementsInfoNV));
[&]() {
*(temp_zPIWbLt)=deserialize_VkAccelerationStructureMemoryRequirementsInfoNV(data_json["members"]["pInfo"]);}();
}();pInfo=temp_zPIWbLt;}();
VkMemoryRequirements2KHR* pMemoryRequirements
        ;
[&]() {

        if (data_json["members"]["pMemoryRequirements"].contains("null")){
        pMemoryRequirements=NULL;
        return;
        }
    pMemoryRequirements=(VkMemoryRequirements2KHR*)malloc(sizeof(VkMemoryRequirements2KHR));
[&]() {
*(pMemoryRequirements)=deserialize_VkMemoryRequirements2KHR(data_json["members"]["pMemoryRequirements"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetAccelerationStructureMemoryRequirementsNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetAccelerationStructureMemoryRequirementsNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetAccelerationStructureMemoryRequirementsNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetAccelerationStructureMemoryRequirementsNV");
    }  
    
call_function(device, pInfo, pMemoryRequirements);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pInfo"]=[&]() {
    json return_uolFqCu=json({});
    
        if (pInfo==NULL){
            return_uolFqCu["null"]=true;
            return return_uolFqCu;
        }
        return_uolFqCu=[&]() {
    json return_rYaMKkD=json({});
    return serialize_VkAccelerationStructureMemoryRequirementsInfoNV(*pInfo);}();
return return_uolFqCu;}();
result["members"]["pMemoryRequirements"]=[&]() {
    json return_sgoXXWQ=json({});
    
        if (pMemoryRequirements==NULL){
            return_sgoXXWQ["null"]=true;
            return return_sgoXXWQ;
        }
        return_sgoXXWQ=[&]() {
    json return_GFyVRIH=json({});
    return serialize_VkMemoryRequirements2KHR(*pMemoryRequirements);}();
return return_sgoXXWQ;}();

        writeToConn(result);
    }

    void handle_vkBindAccelerationStructureMemoryNV(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
uint32_t bindInfoCount
            ;
[&]() {
bindInfoCount=deserialize_uint32_t(data_json["members"]["bindInfoCount"]);}();
VkBindAccelerationStructureMemoryInfoNV* pBindInfos
        ;
[&]() {
VkBindAccelerationStructureMemoryInfoNV* temp_TFoNHdD;[&]() {

        if (data_json["members"]["pBindInfos"].contains("null")){
        temp_TFoNHdD=NULL;
        return;
        }
    temp_TFoNHdD=(VkBindAccelerationStructureMemoryInfoNV*)malloc(bindInfoCount*sizeof(VkBindAccelerationStructureMemoryInfoNV));
        for (int TIcAbLu=0; TIcAbLu < bindInfoCount; TIcAbLu++){
            [&]() {
temp_TFoNHdD[TIcAbLu]=deserialize_VkBindAccelerationStructureMemoryInfoNV(data_json["members"]["pBindInfos"]["members"][TIcAbLu]);}();;
        }
        }();pBindInfos=temp_TFoNHdD;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkBindAccelerationStructureMemoryNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkBindAccelerationStructureMemoryNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkBindAccelerationStructureMemoryNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkBindAccelerationStructureMemoryNV");
    }  
    
auto return_value=call_function(device, bindInfoCount, pBindInfos);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_cFIWpXJ=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["bindInfoCount"]=[&]() {
    json return_nEBKnUd=json({});
    return serialize_uint32_t(bindInfoCount);}();
result["members"]["pBindInfos"]=[&]() {
    json return_dMgTFoy=json({});
    
        if (pBindInfos==NULL){
            return_dMgTFoy["null"]=true;
            return return_dMgTFoy;
        }
        
        return_dMgTFoy["members"]={};
        for(int dMgTFoy=0; dMgTFoy < bindInfoCount; dMgTFoy++){
            json temp;
            temp=[&]() {
    json return_njGghCw=json({});
    return serialize_VkBindAccelerationStructureMemoryInfoNV(pBindInfos[dMgTFoy]);}();
            return_dMgTFoy["members"].push_back(temp);
        }
        return return_dMgTFoy;
        }();

        writeToConn(result);
    }

    void handle_vkCmdCopyAccelerationStructureNV(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkAccelerationStructureNV dst
            ;
[&]() {
dst=deserialize_VkAccelerationStructureNV(data_json["members"]["dst"]);}();
VkAccelerationStructureNV src
            ;
[&]() {
src=deserialize_VkAccelerationStructureNV(data_json["members"]["src"]);}();
VkCopyAccelerationStructureModeKHR mode
        ;
[&]() {
mode=deserialize_VkCopyAccelerationStructureModeKHR(data_json["members"]["mode"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdCopyAccelerationStructureNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdCopyAccelerationStructureNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdCopyAccelerationStructureNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdCopyAccelerationStructureNV");
    }  
    
call_function(commandBuffer, dst, src, mode);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["dst"]=[&]() {
    json return_oiVovyG=json({});
    return serialize_VkAccelerationStructureNV(dst);}();
result["members"]["src"]=[&]() {
    json return_HZibFqs=json({});
    return serialize_VkAccelerationStructureNV(src);}();
result["members"]["mode"]=[&]() {
    json return_UGYAeSh=json({});
    return serialize_VkCopyAccelerationStructureModeKHR(mode);}();

        writeToConn(result);
    }

    void handle_vkCmdCopyAccelerationStructureKHR(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkCopyAccelerationStructureInfoKHR* pInfo
        ;
[&]() {
VkCopyAccelerationStructureInfoKHR* temp_oBXPFST;[&]() {

        if (data_json["members"]["pInfo"].contains("null")){
        temp_oBXPFST=NULL;
        return;
        }
    temp_oBXPFST=(VkCopyAccelerationStructureInfoKHR*)malloc(sizeof(VkCopyAccelerationStructureInfoKHR));
[&]() {
*(temp_oBXPFST)=deserialize_VkCopyAccelerationStructureInfoKHR(data_json["members"]["pInfo"]);}();
}();pInfo=temp_oBXPFST;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdCopyAccelerationStructureKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdCopyAccelerationStructureKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdCopyAccelerationStructureKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdCopyAccelerationStructureKHR");
    }  
    
call_function(commandBuffer, pInfo);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pInfo"]=[&]() {
    json return_QZQfWxf=json({});
    
        if (pInfo==NULL){
            return_QZQfWxf["null"]=true;
            return return_QZQfWxf;
        }
        return_QZQfWxf=[&]() {
    json return_CYXvkHX=json({});
    return serialize_VkCopyAccelerationStructureInfoKHR(*pInfo);}();
return return_QZQfWxf;}();

        writeToConn(result);
    }

    void handle_vkCopyAccelerationStructureKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDeferredOperationKHR deferredOperation
            ;
[&]() {
deferredOperation=deserialize_VkDeferredOperationKHR(data_json["members"]["deferredOperation"]);}();
VkCopyAccelerationStructureInfoKHR* pInfo
        ;
[&]() {
VkCopyAccelerationStructureInfoKHR* temp_oBXPFST;[&]() {

        if (data_json["members"]["pInfo"].contains("null")){
        temp_oBXPFST=NULL;
        return;
        }
    temp_oBXPFST=(VkCopyAccelerationStructureInfoKHR*)malloc(sizeof(VkCopyAccelerationStructureInfoKHR));
[&]() {
*(temp_oBXPFST)=deserialize_VkCopyAccelerationStructureInfoKHR(data_json["members"]["pInfo"]);}();
}();pInfo=temp_oBXPFST;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCopyAccelerationStructureKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCopyAccelerationStructureKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCopyAccelerationStructureKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCopyAccelerationStructureKHR");
    }  
    
auto return_value=call_function(device, deferredOperation, pInfo);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_iQpexFR=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["deferredOperation"]=[&]() {
    json return_zJwBFEh=json({});
    return serialize_VkDeferredOperationKHR(deferredOperation);}();
result["members"]["pInfo"]=[&]() {
    json return_QZQfWxf=json({});
    
        if (pInfo==NULL){
            return_QZQfWxf["null"]=true;
            return return_QZQfWxf;
        }
        return_QZQfWxf=[&]() {
    json return_CYXvkHX=json({});
    return serialize_VkCopyAccelerationStructureInfoKHR(*pInfo);}();
return return_QZQfWxf;}();

        writeToConn(result);
    }

    void handle_vkCmdCopyAccelerationStructureToMemoryKHR(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkCopyAccelerationStructureToMemoryInfoKHR* pInfo
        ;
[&]() {
VkCopyAccelerationStructureToMemoryInfoKHR* temp_zgeATyc;[&]() {

        if (data_json["members"]["pInfo"].contains("null")){
        temp_zgeATyc=NULL;
        return;
        }
    temp_zgeATyc=(VkCopyAccelerationStructureToMemoryInfoKHR*)malloc(sizeof(VkCopyAccelerationStructureToMemoryInfoKHR));
[&]() {
*(temp_zgeATyc)=deserialize_VkCopyAccelerationStructureToMemoryInfoKHR(data_json["members"]["pInfo"]);}();
}();pInfo=temp_zgeATyc;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdCopyAccelerationStructureToMemoryKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdCopyAccelerationStructureToMemoryKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdCopyAccelerationStructureToMemoryKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdCopyAccelerationStructureToMemoryKHR");
    }  
    
call_function(commandBuffer, pInfo);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pInfo"]=[&]() {
    json return_UbSBUTG=json({});
    
        if (pInfo==NULL){
            return_UbSBUTG["null"]=true;
            return return_UbSBUTG;
        }
        return_UbSBUTG=[&]() {
    json return_bLQFDoY=json({});
    return serialize_VkCopyAccelerationStructureToMemoryInfoKHR(*pInfo);}();
return return_UbSBUTG;}();

        writeToConn(result);
    }

    void handle_vkCopyAccelerationStructureToMemoryKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDeferredOperationKHR deferredOperation
            ;
[&]() {
deferredOperation=deserialize_VkDeferredOperationKHR(data_json["members"]["deferredOperation"]);}();
VkCopyAccelerationStructureToMemoryInfoKHR* pInfo
        ;
[&]() {
VkCopyAccelerationStructureToMemoryInfoKHR* temp_zgeATyc;[&]() {

        if (data_json["members"]["pInfo"].contains("null")){
        temp_zgeATyc=NULL;
        return;
        }
    temp_zgeATyc=(VkCopyAccelerationStructureToMemoryInfoKHR*)malloc(sizeof(VkCopyAccelerationStructureToMemoryInfoKHR));
[&]() {
*(temp_zgeATyc)=deserialize_VkCopyAccelerationStructureToMemoryInfoKHR(data_json["members"]["pInfo"]);}();
}();pInfo=temp_zgeATyc;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCopyAccelerationStructureToMemoryKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCopyAccelerationStructureToMemoryKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCopyAccelerationStructureToMemoryKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCopyAccelerationStructureToMemoryKHR");
    }  
    
auto return_value=call_function(device, deferredOperation, pInfo);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_ielkqYy=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["deferredOperation"]=[&]() {
    json return_zJwBFEh=json({});
    return serialize_VkDeferredOperationKHR(deferredOperation);}();
result["members"]["pInfo"]=[&]() {
    json return_UbSBUTG=json({});
    
        if (pInfo==NULL){
            return_UbSBUTG["null"]=true;
            return return_UbSBUTG;
        }
        return_UbSBUTG=[&]() {
    json return_bLQFDoY=json({});
    return serialize_VkCopyAccelerationStructureToMemoryInfoKHR(*pInfo);}();
return return_UbSBUTG;}();

        writeToConn(result);
    }

    void handle_vkCmdCopyMemoryToAccelerationStructureKHR(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkCopyMemoryToAccelerationStructureInfoKHR* pInfo
        ;
[&]() {
VkCopyMemoryToAccelerationStructureInfoKHR* temp_EnEWDgy;[&]() {

        if (data_json["members"]["pInfo"].contains("null")){
        temp_EnEWDgy=NULL;
        return;
        }
    temp_EnEWDgy=(VkCopyMemoryToAccelerationStructureInfoKHR*)malloc(sizeof(VkCopyMemoryToAccelerationStructureInfoKHR));
[&]() {
*(temp_EnEWDgy)=deserialize_VkCopyMemoryToAccelerationStructureInfoKHR(data_json["members"]["pInfo"]);}();
}();pInfo=temp_EnEWDgy;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdCopyMemoryToAccelerationStructureKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdCopyMemoryToAccelerationStructureKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdCopyMemoryToAccelerationStructureKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdCopyMemoryToAccelerationStructureKHR");
    }  
    
call_function(commandBuffer, pInfo);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pInfo"]=[&]() {
    json return_XBqtfOw=json({});
    
        if (pInfo==NULL){
            return_XBqtfOw["null"]=true;
            return return_XBqtfOw;
        }
        return_XBqtfOw=[&]() {
    json return_WveWJBj=json({});
    return serialize_VkCopyMemoryToAccelerationStructureInfoKHR(*pInfo);}();
return return_XBqtfOw;}();

        writeToConn(result);
    }

    void handle_vkCopyMemoryToAccelerationStructureKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDeferredOperationKHR deferredOperation
            ;
[&]() {
deferredOperation=deserialize_VkDeferredOperationKHR(data_json["members"]["deferredOperation"]);}();
VkCopyMemoryToAccelerationStructureInfoKHR* pInfo
        ;
[&]() {
VkCopyMemoryToAccelerationStructureInfoKHR* temp_EnEWDgy;[&]() {

        if (data_json["members"]["pInfo"].contains("null")){
        temp_EnEWDgy=NULL;
        return;
        }
    temp_EnEWDgy=(VkCopyMemoryToAccelerationStructureInfoKHR*)malloc(sizeof(VkCopyMemoryToAccelerationStructureInfoKHR));
[&]() {
*(temp_EnEWDgy)=deserialize_VkCopyMemoryToAccelerationStructureInfoKHR(data_json["members"]["pInfo"]);}();
}();pInfo=temp_EnEWDgy;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCopyMemoryToAccelerationStructureKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCopyMemoryToAccelerationStructureKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCopyMemoryToAccelerationStructureKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCopyMemoryToAccelerationStructureKHR");
    }  
    
auto return_value=call_function(device, deferredOperation, pInfo);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_dtpWWBW=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["deferredOperation"]=[&]() {
    json return_zJwBFEh=json({});
    return serialize_VkDeferredOperationKHR(deferredOperation);}();
result["members"]["pInfo"]=[&]() {
    json return_XBqtfOw=json({});
    
        if (pInfo==NULL){
            return_XBqtfOw["null"]=true;
            return return_XBqtfOw;
        }
        return_XBqtfOw=[&]() {
    json return_WveWJBj=json({});
    return serialize_VkCopyMemoryToAccelerationStructureInfoKHR(*pInfo);}();
return return_XBqtfOw;}();

        writeToConn(result);
    }

    void handle_vkCmdWriteAccelerationStructuresPropertiesKHR(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t accelerationStructureCount
            ;
[&]() {
accelerationStructureCount=deserialize_uint32_t(data_json["members"]["accelerationStructureCount"]);}();
VkAccelerationStructureKHR* pAccelerationStructures
            ;
[&]() {
VkAccelerationStructureKHR* temp_HwywSiD;[&]() {

        if (data_json["members"]["pAccelerationStructures"].contains("null")){
        temp_HwywSiD=NULL;
        return;
        }
    temp_HwywSiD=(VkAccelerationStructureKHR*)malloc(accelerationStructureCount*sizeof(VkAccelerationStructureKHR));
        for (int vdkwsfv=0; vdkwsfv < accelerationStructureCount; vdkwsfv++){
            [&]() {
temp_HwywSiD[vdkwsfv]=deserialize_VkAccelerationStructureKHR(data_json["members"]["pAccelerationStructures"]["members"][vdkwsfv]);}();;
        }
        }();pAccelerationStructures=temp_HwywSiD;}();
VkQueryType queryType
            ;
[&]() {
queryType=deserialize_VkQueryType(data_json["members"]["queryType"]);}();
VkQueryPool queryPool
            ;
[&]() {
queryPool=deserialize_VkQueryPool(data_json["members"]["queryPool"]);}();
uint32_t firstQuery
        ;
[&]() {
firstQuery=deserialize_uint32_t(data_json["members"]["firstQuery"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdWriteAccelerationStructuresPropertiesKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdWriteAccelerationStructuresPropertiesKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdWriteAccelerationStructuresPropertiesKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdWriteAccelerationStructuresPropertiesKHR");
    }  
    
call_function(commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["accelerationStructureCount"]=[&]() {
    json return_uZBOMkp=json({});
    return serialize_uint32_t(accelerationStructureCount);}();
result["members"]["pAccelerationStructures"]=[&]() {
    json return_nkEYnKy=json({});
    
        if (pAccelerationStructures==NULL){
            return_nkEYnKy["null"]=true;
            return return_nkEYnKy;
        }
        
        return_nkEYnKy["members"]={};
        for(int nkEYnKy=0; nkEYnKy < accelerationStructureCount; nkEYnKy++){
            json temp;
            temp=[&]() {
    json return_bnpjJYl=json({});
    return serialize_VkAccelerationStructureKHR(pAccelerationStructures[nkEYnKy]);}();
            return_nkEYnKy["members"].push_back(temp);
        }
        return return_nkEYnKy;
        }();
result["members"]["queryType"]=[&]() {
    json return_wXKRLGm=json({});
    return serialize_VkQueryType(queryType);}();
result["members"]["queryPool"]=[&]() {
    json return_hLGHCzh=json({});
    return serialize_VkQueryPool(queryPool);}();
result["members"]["firstQuery"]=[&]() {
    json return_uiTbigF=json({});
    return serialize_uint32_t(firstQuery);}();

        writeToConn(result);
    }

    void handle_vkCmdWriteAccelerationStructuresPropertiesNV(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t accelerationStructureCount
            ;
[&]() {
accelerationStructureCount=deserialize_uint32_t(data_json["members"]["accelerationStructureCount"]);}();
VkAccelerationStructureNV* pAccelerationStructures
            ;
[&]() {
VkAccelerationStructureNV* temp_GOdUmkE;[&]() {

        if (data_json["members"]["pAccelerationStructures"].contains("null")){
        temp_GOdUmkE=NULL;
        return;
        }
    temp_GOdUmkE=(VkAccelerationStructureNV*)malloc(accelerationStructureCount*sizeof(VkAccelerationStructureNV));
        for (int FIUAEZM=0; FIUAEZM < accelerationStructureCount; FIUAEZM++){
            [&]() {
temp_GOdUmkE[FIUAEZM]=deserialize_VkAccelerationStructureNV(data_json["members"]["pAccelerationStructures"]["members"][FIUAEZM]);}();;
        }
        }();pAccelerationStructures=temp_GOdUmkE;}();
VkQueryType queryType
            ;
[&]() {
queryType=deserialize_VkQueryType(data_json["members"]["queryType"]);}();
VkQueryPool queryPool
            ;
[&]() {
queryPool=deserialize_VkQueryPool(data_json["members"]["queryPool"]);}();
uint32_t firstQuery
        ;
[&]() {
firstQuery=deserialize_uint32_t(data_json["members"]["firstQuery"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdWriteAccelerationStructuresPropertiesNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdWriteAccelerationStructuresPropertiesNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdWriteAccelerationStructuresPropertiesNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdWriteAccelerationStructuresPropertiesNV");
    }  
    
call_function(commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["accelerationStructureCount"]=[&]() {
    json return_uZBOMkp=json({});
    return serialize_uint32_t(accelerationStructureCount);}();
result["members"]["pAccelerationStructures"]=[&]() {
    json return_pIFnKId=json({});
    
        if (pAccelerationStructures==NULL){
            return_pIFnKId["null"]=true;
            return return_pIFnKId;
        }
        
        return_pIFnKId["members"]={};
        for(int pIFnKId=0; pIFnKId < accelerationStructureCount; pIFnKId++){
            json temp;
            temp=[&]() {
    json return_lDIpmuK=json({});
    return serialize_VkAccelerationStructureNV(pAccelerationStructures[pIFnKId]);}();
            return_pIFnKId["members"].push_back(temp);
        }
        return return_pIFnKId;
        }();
result["members"]["queryType"]=[&]() {
    json return_wXKRLGm=json({});
    return serialize_VkQueryType(queryType);}();
result["members"]["queryPool"]=[&]() {
    json return_hLGHCzh=json({});
    return serialize_VkQueryPool(queryPool);}();
result["members"]["firstQuery"]=[&]() {
    json return_uiTbigF=json({});
    return serialize_uint32_t(firstQuery);}();

        writeToConn(result);
    }

    void handle_vkCmdBuildAccelerationStructureNV(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkAccelerationStructureInfoNV* pInfo
            ;
[&]() {
VkAccelerationStructureInfoNV* temp_xFsDVnQ;[&]() {

        if (data_json["members"]["pInfo"].contains("null")){
        temp_xFsDVnQ=NULL;
        return;
        }
    temp_xFsDVnQ=(VkAccelerationStructureInfoNV*)malloc(sizeof(VkAccelerationStructureInfoNV));
[&]() {
*(temp_xFsDVnQ)=deserialize_VkAccelerationStructureInfoNV(data_json["members"]["pInfo"]);}();
}();pInfo=temp_xFsDVnQ;}();
VkBuffer instanceData
            ;
[&]() {
instanceData=deserialize_VkBuffer(data_json["members"]["instanceData"]);}();
VkDeviceSize instanceOffset
            ;
[&]() {
[&]() {
instanceOffset=deserialize_uint64_t(data_json["members"]["instanceOffset"]);}();}();
VkBool32 update
            ;
[&]() {
[&]() {
update=deserialize_uint32_t(data_json["members"]["update"]);}();}();
VkAccelerationStructureNV dst
            ;
[&]() {
dst=deserialize_VkAccelerationStructureNV(data_json["members"]["dst"]);}();
VkAccelerationStructureNV src
            ;
[&]() {
src=deserialize_VkAccelerationStructureNV(data_json["members"]["src"]);}();
VkBuffer scratch
            ;
[&]() {
scratch=deserialize_VkBuffer(data_json["members"]["scratch"]);}();
VkDeviceSize scratchOffset
        ;
[&]() {
[&]() {
scratchOffset=deserialize_uint64_t(data_json["members"]["scratchOffset"]);}();}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdBuildAccelerationStructureNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBuildAccelerationStructureNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdBuildAccelerationStructureNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBuildAccelerationStructureNV");
    }  
    
call_function(commandBuffer, pInfo, instanceData, instanceOffset, update, dst, src, scratch, scratchOffset);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pInfo"]=[&]() {
    json return_zEchnlc=json({});
    
        if (pInfo==NULL){
            return_zEchnlc["null"]=true;
            return return_zEchnlc;
        }
        return_zEchnlc=[&]() {
    json return_pRSEkqO=json({});
    return serialize_VkAccelerationStructureInfoNV(*pInfo);}();
return return_zEchnlc;}();
result["members"]["instanceData"]=[&]() {
    json return_fiKNiQi=json({});
    return serialize_VkBuffer(instanceData);}();
result["members"]["instanceOffset"]=[&]() {
    json return_ShKmWts=json({});
    return_ShKmWts=[&]() {
    json return_hsbCtXu=json({});
    return serialize_uint64_t(instanceOffset);}();return return_ShKmWts;}();
result["members"]["update"]=[&]() {
    json return_iAxnBTf=json({});
    return_iAxnBTf=[&]() {
    json return_hKRwamK=json({});
    return serialize_uint32_t(update);}();return return_iAxnBTf;}();
result["members"]["dst"]=[&]() {
    json return_oiVovyG=json({});
    return serialize_VkAccelerationStructureNV(dst);}();
result["members"]["src"]=[&]() {
    json return_HZibFqs=json({});
    return serialize_VkAccelerationStructureNV(src);}();
result["members"]["scratch"]=[&]() {
    json return_vNfNINw=json({});
    return serialize_VkBuffer(scratch);}();
result["members"]["scratchOffset"]=[&]() {
    json return_ttEtZbd=json({});
    return_ttEtZbd=[&]() {
    json return_ShpZlgu=json({});
    return serialize_uint64_t(scratchOffset);}();return return_ttEtZbd;}();

        writeToConn(result);
    }

    void handle_vkWriteAccelerationStructuresPropertiesKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
uint32_t accelerationStructureCount
            ;
[&]() {
accelerationStructureCount=deserialize_uint32_t(data_json["members"]["accelerationStructureCount"]);}();
VkAccelerationStructureKHR* pAccelerationStructures
            ;
[&]() {
VkAccelerationStructureKHR* temp_HwywSiD;[&]() {

        if (data_json["members"]["pAccelerationStructures"].contains("null")){
        temp_HwywSiD=NULL;
        return;
        }
    temp_HwywSiD=(VkAccelerationStructureKHR*)malloc(accelerationStructureCount*sizeof(VkAccelerationStructureKHR));
        for (int vdkwsfv=0; vdkwsfv < accelerationStructureCount; vdkwsfv++){
            [&]() {
temp_HwywSiD[vdkwsfv]=deserialize_VkAccelerationStructureKHR(data_json["members"]["pAccelerationStructures"]["members"][vdkwsfv]);}();;
        }
        }();pAccelerationStructures=temp_HwywSiD;}();
VkQueryType  queryType
            ;
[&]() {
queryType=deserialize_VkQueryType(data_json["members"]["queryType"]);}();
size_t       dataSize
            ;
[&]() {
dataSize=deserialize_size_t(data_json["members"]["dataSize"]);}();
void* pData
            ;
[&]() {

        if (data_json["members"]["pData"].contains("null")){
        pData=NULL;
        return;
        }
    pData=deserialize_void_p(data_json["members"]["pData"]);
}();
size_t stride
        ;
[&]() {
stride=deserialize_size_t(data_json["members"]["stride"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkWriteAccelerationStructuresPropertiesKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkWriteAccelerationStructuresPropertiesKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkWriteAccelerationStructuresPropertiesKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkWriteAccelerationStructuresPropertiesKHR");
    }  
    
auto return_value=call_function(device, accelerationStructureCount, pAccelerationStructures, queryType, dataSize, pData, stride);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_IdAhyfj=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["accelerationStructureCount"]=[&]() {
    json return_uZBOMkp=json({});
    return serialize_uint32_t(accelerationStructureCount);}();
result["members"]["pAccelerationStructures"]=[&]() {
    json return_nkEYnKy=json({});
    
        if (pAccelerationStructures==NULL){
            return_nkEYnKy["null"]=true;
            return return_nkEYnKy;
        }
        
        return_nkEYnKy["members"]={};
        for(int nkEYnKy=0; nkEYnKy < accelerationStructureCount; nkEYnKy++){
            json temp;
            temp=[&]() {
    json return_bnpjJYl=json({});
    return serialize_VkAccelerationStructureKHR(pAccelerationStructures[nkEYnKy]);}();
            return_nkEYnKy["members"].push_back(temp);
        }
        return return_nkEYnKy;
        }();
result["members"]["queryType"]=[&]() {
    json return_WQjFQIb=json({});
    return serialize_VkQueryType(queryType);}();
result["members"]["dataSize"]=[&]() {
    json return_ocxeENf=json({});
    return serialize_size_t(dataSize);}();
result["members"]["pData"]=[&]() {
    json return_uMNHZoi=json({});
    
        if (pData==NULL){
            return_uMNHZoi["null"]=true;
            return return_uMNHZoi;
        }
        return serialize_void_p(pData);
}();
result["members"]["stride"]=[&]() {
    json return_LQXemmN=json({});
    return serialize_size_t(stride);}();

        writeToConn(result);
    }

    void handle_vkCmdTraceRaysKHR(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable
            ;
[&]() {
VkStridedDeviceAddressRegionKHR* temp_pthcKti;[&]() {

        if (data_json["members"]["pRaygenShaderBindingTable"].contains("null")){
        temp_pthcKti=NULL;
        return;
        }
    temp_pthcKti=(VkStridedDeviceAddressRegionKHR*)malloc(sizeof(VkStridedDeviceAddressRegionKHR));
[&]() {
*(temp_pthcKti)=deserialize_VkStridedDeviceAddressRegionKHR(data_json["members"]["pRaygenShaderBindingTable"]);}();
}();pRaygenShaderBindingTable=temp_pthcKti;}();
VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable
            ;
[&]() {
VkStridedDeviceAddressRegionKHR* temp_Ietjvjp;[&]() {

        if (data_json["members"]["pMissShaderBindingTable"].contains("null")){
        temp_Ietjvjp=NULL;
        return;
        }
    temp_Ietjvjp=(VkStridedDeviceAddressRegionKHR*)malloc(sizeof(VkStridedDeviceAddressRegionKHR));
[&]() {
*(temp_Ietjvjp)=deserialize_VkStridedDeviceAddressRegionKHR(data_json["members"]["pMissShaderBindingTable"]);}();
}();pMissShaderBindingTable=temp_Ietjvjp;}();
VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable
            ;
[&]() {
VkStridedDeviceAddressRegionKHR* temp_uKmPwYB;[&]() {

        if (data_json["members"]["pHitShaderBindingTable"].contains("null")){
        temp_uKmPwYB=NULL;
        return;
        }
    temp_uKmPwYB=(VkStridedDeviceAddressRegionKHR*)malloc(sizeof(VkStridedDeviceAddressRegionKHR));
[&]() {
*(temp_uKmPwYB)=deserialize_VkStridedDeviceAddressRegionKHR(data_json["members"]["pHitShaderBindingTable"]);}();
}();pHitShaderBindingTable=temp_uKmPwYB;}();
VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable
            ;
[&]() {
VkStridedDeviceAddressRegionKHR* temp_ZkENQyN;[&]() {

        if (data_json["members"]["pCallableShaderBindingTable"].contains("null")){
        temp_ZkENQyN=NULL;
        return;
        }
    temp_ZkENQyN=(VkStridedDeviceAddressRegionKHR*)malloc(sizeof(VkStridedDeviceAddressRegionKHR));
[&]() {
*(temp_ZkENQyN)=deserialize_VkStridedDeviceAddressRegionKHR(data_json["members"]["pCallableShaderBindingTable"]);}();
}();pCallableShaderBindingTable=temp_ZkENQyN;}();
uint32_t width
            ;
[&]() {
width=deserialize_uint32_t(data_json["members"]["width"]);}();
uint32_t height
            ;
[&]() {
height=deserialize_uint32_t(data_json["members"]["height"]);}();
uint32_t depth
        ;
[&]() {
depth=deserialize_uint32_t(data_json["members"]["depth"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdTraceRaysKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdTraceRaysKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdTraceRaysKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdTraceRaysKHR");
    }  
    
call_function(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, width, height, depth);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pRaygenShaderBindingTable"]=[&]() {
    json return_ovMxhry=json({});
    
        if (pRaygenShaderBindingTable==NULL){
            return_ovMxhry["null"]=true;
            return return_ovMxhry;
        }
        return_ovMxhry=[&]() {
    json return_PJQqQIU=json({});
    return serialize_VkStridedDeviceAddressRegionKHR(*pRaygenShaderBindingTable);}();
return return_ovMxhry;}();
result["members"]["pMissShaderBindingTable"]=[&]() {
    json return_FnwCNhh=json({});
    
        if (pMissShaderBindingTable==NULL){
            return_FnwCNhh["null"]=true;
            return return_FnwCNhh;
        }
        return_FnwCNhh=[&]() {
    json return_CTZxbuR=json({});
    return serialize_VkStridedDeviceAddressRegionKHR(*pMissShaderBindingTable);}();
return return_FnwCNhh;}();
result["members"]["pHitShaderBindingTable"]=[&]() {
    json return_CWpPDRZ=json({});
    
        if (pHitShaderBindingTable==NULL){
            return_CWpPDRZ["null"]=true;
            return return_CWpPDRZ;
        }
        return_CWpPDRZ=[&]() {
    json return_HQpDGRG=json({});
    return serialize_VkStridedDeviceAddressRegionKHR(*pHitShaderBindingTable);}();
return return_CWpPDRZ;}();
result["members"]["pCallableShaderBindingTable"]=[&]() {
    json return_DKflgoV=json({});
    
        if (pCallableShaderBindingTable==NULL){
            return_DKflgoV["null"]=true;
            return return_DKflgoV;
        }
        return_DKflgoV=[&]() {
    json return_PwmuDmK=json({});
    return serialize_VkStridedDeviceAddressRegionKHR(*pCallableShaderBindingTable);}();
return return_DKflgoV;}();
result["members"]["width"]=[&]() {
    json return_FLfchzm=json({});
    return serialize_uint32_t(width);}();
result["members"]["height"]=[&]() {
    json return_qhQceRR=json({});
    return serialize_uint32_t(height);}();
result["members"]["depth"]=[&]() {
    json return_jHWxEop=json({});
    return serialize_uint32_t(depth);}();

        writeToConn(result);
    }

    void handle_vkCmdTraceRaysNV(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBuffer raygenShaderBindingTableBuffer
            ;
[&]() {
raygenShaderBindingTableBuffer=deserialize_VkBuffer(data_json["members"]["raygenShaderBindingTableBuffer"]);}();
VkDeviceSize raygenShaderBindingOffset
            ;
[&]() {
[&]() {
raygenShaderBindingOffset=deserialize_uint64_t(data_json["members"]["raygenShaderBindingOffset"]);}();}();
VkBuffer missShaderBindingTableBuffer
            ;
[&]() {
missShaderBindingTableBuffer=deserialize_VkBuffer(data_json["members"]["missShaderBindingTableBuffer"]);}();
VkDeviceSize missShaderBindingOffset
            ;
[&]() {
[&]() {
missShaderBindingOffset=deserialize_uint64_t(data_json["members"]["missShaderBindingOffset"]);}();}();
VkDeviceSize missShaderBindingStride
            ;
[&]() {
[&]() {
missShaderBindingStride=deserialize_uint64_t(data_json["members"]["missShaderBindingStride"]);}();}();
VkBuffer hitShaderBindingTableBuffer
            ;
[&]() {
hitShaderBindingTableBuffer=deserialize_VkBuffer(data_json["members"]["hitShaderBindingTableBuffer"]);}();
VkDeviceSize hitShaderBindingOffset
            ;
[&]() {
[&]() {
hitShaderBindingOffset=deserialize_uint64_t(data_json["members"]["hitShaderBindingOffset"]);}();}();
VkDeviceSize hitShaderBindingStride
            ;
[&]() {
[&]() {
hitShaderBindingStride=deserialize_uint64_t(data_json["members"]["hitShaderBindingStride"]);}();}();
VkBuffer callableShaderBindingTableBuffer
            ;
[&]() {
callableShaderBindingTableBuffer=deserialize_VkBuffer(data_json["members"]["callableShaderBindingTableBuffer"]);}();
VkDeviceSize callableShaderBindingOffset
            ;
[&]() {
[&]() {
callableShaderBindingOffset=deserialize_uint64_t(data_json["members"]["callableShaderBindingOffset"]);}();}();
VkDeviceSize callableShaderBindingStride
            ;
[&]() {
[&]() {
callableShaderBindingStride=deserialize_uint64_t(data_json["members"]["callableShaderBindingStride"]);}();}();
uint32_t width
            ;
[&]() {
width=deserialize_uint32_t(data_json["members"]["width"]);}();
uint32_t height
            ;
[&]() {
height=deserialize_uint32_t(data_json["members"]["height"]);}();
uint32_t depth
        ;
[&]() {
depth=deserialize_uint32_t(data_json["members"]["depth"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdTraceRaysNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdTraceRaysNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdTraceRaysNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdTraceRaysNV");
    }  
    
call_function(commandBuffer, raygenShaderBindingTableBuffer, raygenShaderBindingOffset, missShaderBindingTableBuffer, missShaderBindingOffset, missShaderBindingStride, hitShaderBindingTableBuffer, hitShaderBindingOffset, hitShaderBindingStride, callableShaderBindingTableBuffer, callableShaderBindingOffset, callableShaderBindingStride, width, height, depth);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["raygenShaderBindingTableBuffer"]=[&]() {
    json return_yYiZjgK=json({});
    return serialize_VkBuffer(raygenShaderBindingTableBuffer);}();
result["members"]["raygenShaderBindingOffset"]=[&]() {
    json return_naPCpCz=json({});
    return_naPCpCz=[&]() {
    json return_HIflnCm=json({});
    return serialize_uint64_t(raygenShaderBindingOffset);}();return return_naPCpCz;}();
result["members"]["missShaderBindingTableBuffer"]=[&]() {
    json return_jxUlsMI=json({});
    return serialize_VkBuffer(missShaderBindingTableBuffer);}();
result["members"]["missShaderBindingOffset"]=[&]() {
    json return_uziqWWk=json({});
    return_uziqWWk=[&]() {
    json return_pmnolQm=json({});
    return serialize_uint64_t(missShaderBindingOffset);}();return return_uziqWWk;}();
result["members"]["missShaderBindingStride"]=[&]() {
    json return_iCMGLnr=json({});
    return_iCMGLnr=[&]() {
    json return_sSDxlWL=json({});
    return serialize_uint64_t(missShaderBindingStride);}();return return_iCMGLnr;}();
result["members"]["hitShaderBindingTableBuffer"]=[&]() {
    json return_lbNDgRB=json({});
    return serialize_VkBuffer(hitShaderBindingTableBuffer);}();
result["members"]["hitShaderBindingOffset"]=[&]() {
    json return_irSRrzx=json({});
    return_irSRrzx=[&]() {
    json return_mZfsEtS=json({});
    return serialize_uint64_t(hitShaderBindingOffset);}();return return_irSRrzx;}();
result["members"]["hitShaderBindingStride"]=[&]() {
    json return_xuASJjr=json({});
    return_xuASJjr=[&]() {
    json return_fgLyxzH=json({});
    return serialize_uint64_t(hitShaderBindingStride);}();return return_xuASJjr;}();
result["members"]["callableShaderBindingTableBuffer"]=[&]() {
    json return_yvuNELH=json({});
    return serialize_VkBuffer(callableShaderBindingTableBuffer);}();
result["members"]["callableShaderBindingOffset"]=[&]() {
    json return_SGvXKbw=json({});
    return_SGvXKbw=[&]() {
    json return_nPfGRBg=json({});
    return serialize_uint64_t(callableShaderBindingOffset);}();return return_SGvXKbw;}();
result["members"]["callableShaderBindingStride"]=[&]() {
    json return_IrnYgla=json({});
    return_IrnYgla=[&]() {
    json return_tdEmoHb=json({});
    return serialize_uint64_t(callableShaderBindingStride);}();return return_IrnYgla;}();
result["members"]["width"]=[&]() {
    json return_FLfchzm=json({});
    return serialize_uint32_t(width);}();
result["members"]["height"]=[&]() {
    json return_qhQceRR=json({});
    return serialize_uint32_t(height);}();
result["members"]["depth"]=[&]() {
    json return_jHWxEop=json({});
    return serialize_uint32_t(depth);}();

        writeToConn(result);
    }

    void handle_vkGetRayTracingShaderGroupHandlesKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkPipeline pipeline
            ;
[&]() {
pipeline=deserialize_VkPipeline(data_json["members"]["pipeline"]);}();
uint32_t firstGroup
            ;
[&]() {
firstGroup=deserialize_uint32_t(data_json["members"]["firstGroup"]);}();
uint32_t groupCount
            ;
[&]() {
groupCount=deserialize_uint32_t(data_json["members"]["groupCount"]);}();
size_t dataSize
            ;
[&]() {
dataSize=deserialize_size_t(data_json["members"]["dataSize"]);}();
void* pData
        ;
[&]() {

        if (data_json["members"]["pData"].contains("null")){
        pData=NULL;
        return;
        }
    pData=deserialize_void_p(data_json["members"]["pData"]);
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetRayTracingShaderGroupHandlesKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetRayTracingShaderGroupHandlesKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetRayTracingShaderGroupHandlesKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetRayTracingShaderGroupHandlesKHR");
    }  
    
auto return_value=call_function(device, pipeline, firstGroup, groupCount, dataSize, pData);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_nSKzGMf=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pipeline"]=[&]() {
    json return_xIUyQCN=json({});
    return serialize_VkPipeline(pipeline);}();
result["members"]["firstGroup"]=[&]() {
    json return_JAcxNPa=json({});
    return serialize_uint32_t(firstGroup);}();
result["members"]["groupCount"]=[&]() {
    json return_dyouaca=json({});
    return serialize_uint32_t(groupCount);}();
result["members"]["dataSize"]=[&]() {
    json return_mCuLMQj=json({});
    return serialize_size_t(dataSize);}();
result["members"]["pData"]=[&]() {
    json return_SWOVaNE=json({});
    
        if (pData==NULL){
            return_SWOVaNE["null"]=true;
            return return_SWOVaNE;
        }
        return serialize_void_p(pData);
}();

        writeToConn(result);
    }

    void handle_vkGetRayTracingShaderGroupHandlesNV(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkPipeline pipeline
            ;
[&]() {
pipeline=deserialize_VkPipeline(data_json["members"]["pipeline"]);}();
uint32_t firstGroup
            ;
[&]() {
firstGroup=deserialize_uint32_t(data_json["members"]["firstGroup"]);}();
uint32_t groupCount
            ;
[&]() {
groupCount=deserialize_uint32_t(data_json["members"]["groupCount"]);}();
size_t dataSize
            ;
[&]() {
dataSize=deserialize_size_t(data_json["members"]["dataSize"]);}();
void* pData
        ;
[&]() {

        if (data_json["members"]["pData"].contains("null")){
        pData=NULL;
        return;
        }
    pData=deserialize_void_p(data_json["members"]["pData"]);
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetRayTracingShaderGroupHandlesNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetRayTracingShaderGroupHandlesNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetRayTracingShaderGroupHandlesNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetRayTracingShaderGroupHandlesNV");
    }  
    
auto return_value=call_function(device, pipeline, firstGroup, groupCount, dataSize, pData);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_NZUAwiC=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pipeline"]=[&]() {
    json return_xIUyQCN=json({});
    return serialize_VkPipeline(pipeline);}();
result["members"]["firstGroup"]=[&]() {
    json return_JAcxNPa=json({});
    return serialize_uint32_t(firstGroup);}();
result["members"]["groupCount"]=[&]() {
    json return_dyouaca=json({});
    return serialize_uint32_t(groupCount);}();
result["members"]["dataSize"]=[&]() {
    json return_mCuLMQj=json({});
    return serialize_size_t(dataSize);}();
result["members"]["pData"]=[&]() {
    json return_SWOVaNE=json({});
    
        if (pData==NULL){
            return_SWOVaNE["null"]=true;
            return return_SWOVaNE;
        }
        return serialize_void_p(pData);
}();

        writeToConn(result);
    }

    void handle_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkPipeline pipeline
            ;
[&]() {
pipeline=deserialize_VkPipeline(data_json["members"]["pipeline"]);}();
uint32_t firstGroup
            ;
[&]() {
firstGroup=deserialize_uint32_t(data_json["members"]["firstGroup"]);}();
uint32_t groupCount
            ;
[&]() {
groupCount=deserialize_uint32_t(data_json["members"]["groupCount"]);}();
size_t dataSize
            ;
[&]() {
dataSize=deserialize_size_t(data_json["members"]["dataSize"]);}();
void* pData
        ;
[&]() {

        if (data_json["members"]["pData"].contains("null")){
        pData=NULL;
        return;
        }
    pData=deserialize_void_p(data_json["members"]["pData"]);
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetRayTracingCaptureReplayShaderGroupHandlesKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetRayTracingCaptureReplayShaderGroupHandlesKHR");
    }  
    
auto return_value=call_function(device, pipeline, firstGroup, groupCount, dataSize, pData);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_ksgKmsT=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pipeline"]=[&]() {
    json return_xIUyQCN=json({});
    return serialize_VkPipeline(pipeline);}();
result["members"]["firstGroup"]=[&]() {
    json return_JAcxNPa=json({});
    return serialize_uint32_t(firstGroup);}();
result["members"]["groupCount"]=[&]() {
    json return_dyouaca=json({});
    return serialize_uint32_t(groupCount);}();
result["members"]["dataSize"]=[&]() {
    json return_mCuLMQj=json({});
    return serialize_size_t(dataSize);}();
result["members"]["pData"]=[&]() {
    json return_SWOVaNE=json({});
    
        if (pData==NULL){
            return_SWOVaNE["null"]=true;
            return return_SWOVaNE;
        }
        return serialize_void_p(pData);
}();

        writeToConn(result);
    }

    void handle_vkGetAccelerationStructureHandleNV(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkAccelerationStructureNV accelerationStructure
            ;
[&]() {
accelerationStructure=deserialize_VkAccelerationStructureNV(data_json["members"]["accelerationStructure"]);}();
size_t dataSize
            ;
[&]() {
dataSize=deserialize_size_t(data_json["members"]["dataSize"]);}();
void* pData
        ;
[&]() {

        if (data_json["members"]["pData"].contains("null")){
        pData=NULL;
        return;
        }
    pData=deserialize_void_p(data_json["members"]["pData"]);
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetAccelerationStructureHandleNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetAccelerationStructureHandleNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetAccelerationStructureHandleNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetAccelerationStructureHandleNV");
    }  
    
auto return_value=call_function(device, accelerationStructure, dataSize, pData);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_QFFJaqX=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["accelerationStructure"]=[&]() {
    json return_rkmFIkM=json({});
    return serialize_VkAccelerationStructureNV(accelerationStructure);}();
result["members"]["dataSize"]=[&]() {
    json return_mCuLMQj=json({});
    return serialize_size_t(dataSize);}();
result["members"]["pData"]=[&]() {
    json return_SWOVaNE=json({});
    
        if (pData==NULL){
            return_SWOVaNE["null"]=true;
            return return_SWOVaNE;
        }
        return serialize_void_p(pData);
}();

        writeToConn(result);
    }

    void handle_vkCreateRayTracingPipelinesNV(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkPipelineCache pipelineCache
            ;
[&]() {
pipelineCache=deserialize_VkPipelineCache(data_json["members"]["pipelineCache"]);}();
uint32_t createInfoCount
            ;
[&]() {
createInfoCount=deserialize_uint32_t(data_json["members"]["createInfoCount"]);}();
VkRayTracingPipelineCreateInfoNV* pCreateInfos
            ;
[&]() {
VkRayTracingPipelineCreateInfoNV* temp_vwnPzwu;[&]() {

        if (data_json["members"]["pCreateInfos"].contains("null")){
        temp_vwnPzwu=NULL;
        return;
        }
    temp_vwnPzwu=(VkRayTracingPipelineCreateInfoNV*)malloc(createInfoCount*sizeof(VkRayTracingPipelineCreateInfoNV));
        for (int ygNFBIR=0; ygNFBIR < createInfoCount; ygNFBIR++){
            [&]() {
temp_vwnPzwu[ygNFBIR]=deserialize_VkRayTracingPipelineCreateInfoNV(data_json["members"]["pCreateInfos"]["members"][ygNFBIR]);}();;
        }
        }();pCreateInfos=temp_vwnPzwu;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkPipeline* pPipelines
        ;
[&]() {

        if (data_json["members"]["pPipelines"].contains("null")){
        pPipelines=NULL;
        return;
        }
    pPipelines=(VkPipeline*)malloc(createInfoCount*sizeof(VkPipeline));
        for (int TBqpkOr=0; TBqpkOr < createInfoCount; TBqpkOr++){
            [&]() {
pPipelines[TBqpkOr]=deserialize_VkPipeline(data_json["members"]["pPipelines"]["members"][TBqpkOr]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreateRayTracingPipelinesNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateRayTracingPipelinesNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreateRayTracingPipelinesNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateRayTracingPipelinesNV");
    }  
    
auto return_value=call_function(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_HDFdGrU=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pipelineCache"]=[&]() {
    json return_sRQlJCP=json({});
    return serialize_VkPipelineCache(pipelineCache);}();
result["members"]["createInfoCount"]=[&]() {
    json return_cRiHaUT=json({});
    return serialize_uint32_t(createInfoCount);}();
result["members"]["pCreateInfos"]=[&]() {
    json return_uVtulgk=json({});
    
        if (pCreateInfos==NULL){
            return_uVtulgk["null"]=true;
            return return_uVtulgk;
        }
        
        return_uVtulgk["members"]={};
        for(int uVtulgk=0; uVtulgk < createInfoCount; uVtulgk++){
            json temp;
            temp=[&]() {
    json return_usuknva=json({});
    return serialize_VkRayTracingPipelineCreateInfoNV(pCreateInfos[uVtulgk]);}();
            return_uVtulgk["members"].push_back(temp);
        }
        return return_uVtulgk;
        }();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pPipelines"]=[&]() {
    json return_kBzHgXu=json({});
    
        if (pPipelines==NULL){
            return_kBzHgXu["null"]=true;
            return return_kBzHgXu;
        }
        
        return_kBzHgXu["members"]={};
        for(int kBzHgXu=0; kBzHgXu < createInfoCount; kBzHgXu++){
            json temp;
            temp=[&]() {
    json return_EvuMoqq=json({});
    return serialize_VkPipeline(pPipelines[kBzHgXu]);}();
            return_kBzHgXu["members"].push_back(temp);
        }
        return return_kBzHgXu;
        }();

        writeToConn(result);
    }

    void handle_vkCreateRayTracingPipelinesKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDeferredOperationKHR deferredOperation
            ;
[&]() {
deferredOperation=deserialize_VkDeferredOperationKHR(data_json["members"]["deferredOperation"]);}();
VkPipelineCache pipelineCache
            ;
[&]() {
pipelineCache=deserialize_VkPipelineCache(data_json["members"]["pipelineCache"]);}();
uint32_t createInfoCount
            ;
[&]() {
createInfoCount=deserialize_uint32_t(data_json["members"]["createInfoCount"]);}();
VkRayTracingPipelineCreateInfoKHR* pCreateInfos
            ;
[&]() {
VkRayTracingPipelineCreateInfoKHR* temp_LciEKPq;[&]() {

        if (data_json["members"]["pCreateInfos"].contains("null")){
        temp_LciEKPq=NULL;
        return;
        }
    temp_LciEKPq=(VkRayTracingPipelineCreateInfoKHR*)malloc(createInfoCount*sizeof(VkRayTracingPipelineCreateInfoKHR));
        for (int uxxzJFr=0; uxxzJFr < createInfoCount; uxxzJFr++){
            [&]() {
temp_LciEKPq[uxxzJFr]=deserialize_VkRayTracingPipelineCreateInfoKHR(data_json["members"]["pCreateInfos"]["members"][uxxzJFr]);}();;
        }
        }();pCreateInfos=temp_LciEKPq;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkPipeline* pPipelines
        ;
[&]() {

        if (data_json["members"]["pPipelines"].contains("null")){
        pPipelines=NULL;
        return;
        }
    pPipelines=(VkPipeline*)malloc(createInfoCount*sizeof(VkPipeline));
        for (int TBqpkOr=0; TBqpkOr < createInfoCount; TBqpkOr++){
            [&]() {
pPipelines[TBqpkOr]=deserialize_VkPipeline(data_json["members"]["pPipelines"]["members"][TBqpkOr]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreateRayTracingPipelinesKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateRayTracingPipelinesKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreateRayTracingPipelinesKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateRayTracingPipelinesKHR");
    }  
    
auto return_value=call_function(device, deferredOperation, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_nmgFSwN=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["deferredOperation"]=[&]() {
    json return_zJwBFEh=json({});
    return serialize_VkDeferredOperationKHR(deferredOperation);}();
result["members"]["pipelineCache"]=[&]() {
    json return_sRQlJCP=json({});
    return serialize_VkPipelineCache(pipelineCache);}();
result["members"]["createInfoCount"]=[&]() {
    json return_cRiHaUT=json({});
    return serialize_uint32_t(createInfoCount);}();
result["members"]["pCreateInfos"]=[&]() {
    json return_nOOeENZ=json({});
    
        if (pCreateInfos==NULL){
            return_nOOeENZ["null"]=true;
            return return_nOOeENZ;
        }
        
        return_nOOeENZ["members"]={};
        for(int nOOeENZ=0; nOOeENZ < createInfoCount; nOOeENZ++){
            json temp;
            temp=[&]() {
    json return_vnJZNDw=json({});
    return serialize_VkRayTracingPipelineCreateInfoKHR(pCreateInfos[nOOeENZ]);}();
            return_nOOeENZ["members"].push_back(temp);
        }
        return return_nOOeENZ;
        }();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pPipelines"]=[&]() {
    json return_kBzHgXu=json({});
    
        if (pPipelines==NULL){
            return_kBzHgXu["null"]=true;
            return return_kBzHgXu;
        }
        
        return_kBzHgXu["members"]={};
        for(int kBzHgXu=0; kBzHgXu < createInfoCount; kBzHgXu++){
            json temp;
            temp=[&]() {
    json return_EvuMoqq=json({});
    return serialize_VkPipeline(pPipelines[kBzHgXu]);}();
            return_kBzHgXu["members"].push_back(temp);
        }
        return return_kBzHgXu;
        }();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
uint32_t* pPropertyCount
            ;
[&]() {

        if (data_json["members"]["pPropertyCount"].contains("null")){
        pPropertyCount=NULL;
        return;
        }
    pPropertyCount=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pPropertyCount)=deserialize_uint32_t(data_json["members"]["pPropertyCount"]);}();
}();
VkCooperativeMatrixPropertiesNV* pProperties
        ;
[&]() {

        if (data_json["members"]["pProperties"].contains("null")){
        pProperties=NULL;
        return;
        }
    pProperties=(VkCooperativeMatrixPropertiesNV*)malloc(*pPropertyCount*sizeof(VkCooperativeMatrixPropertiesNV));
        for (int jwnPQmH=0; jwnPQmH < *pPropertyCount; jwnPQmH++){
            [&]() {
pProperties[jwnPQmH]=deserialize_VkCooperativeMatrixPropertiesNV(data_json["members"]["pProperties"]["members"][jwnPQmH]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceCooperativeMatrixPropertiesNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceCooperativeMatrixPropertiesNV");
    }  
    
auto return_value=call_function(physicalDevice, pPropertyCount, pProperties);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_pKlsObJ=json({});
    return serialize_VkResult(return_value);}();
result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["pPropertyCount"]=[&]() {
    json return_MnYOHdG=json({});
    
        if (pPropertyCount==NULL){
            return_MnYOHdG["null"]=true;
            return return_MnYOHdG;
        }
        return_MnYOHdG=[&]() {
    json return_rPOmKzR=json({});
    return serialize_uint32_t(*pPropertyCount);}();
return return_MnYOHdG;}();
result["members"]["pProperties"]=[&]() {
    json return_shCwBnn=json({});
    
        if (pProperties==NULL){
            return_shCwBnn["null"]=true;
            return return_shCwBnn;
        }
        
        return_shCwBnn["members"]={};
        for(int shCwBnn=0; shCwBnn < *pPropertyCount; shCwBnn++){
            json temp;
            temp=[&]() {
    json return_VPqqROx=json({});
    return serialize_VkCooperativeMatrixPropertiesNV(pProperties[shCwBnn]);}();
            return_shCwBnn["members"].push_back(temp);
        }
        return return_shCwBnn;
        }();

        writeToConn(result);
    }

    void handle_vkCmdTraceRaysIndirectKHR(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable
            ;
[&]() {
VkStridedDeviceAddressRegionKHR* temp_pthcKti;[&]() {

        if (data_json["members"]["pRaygenShaderBindingTable"].contains("null")){
        temp_pthcKti=NULL;
        return;
        }
    temp_pthcKti=(VkStridedDeviceAddressRegionKHR*)malloc(sizeof(VkStridedDeviceAddressRegionKHR));
[&]() {
*(temp_pthcKti)=deserialize_VkStridedDeviceAddressRegionKHR(data_json["members"]["pRaygenShaderBindingTable"]);}();
}();pRaygenShaderBindingTable=temp_pthcKti;}();
VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable
            ;
[&]() {
VkStridedDeviceAddressRegionKHR* temp_Ietjvjp;[&]() {

        if (data_json["members"]["pMissShaderBindingTable"].contains("null")){
        temp_Ietjvjp=NULL;
        return;
        }
    temp_Ietjvjp=(VkStridedDeviceAddressRegionKHR*)malloc(sizeof(VkStridedDeviceAddressRegionKHR));
[&]() {
*(temp_Ietjvjp)=deserialize_VkStridedDeviceAddressRegionKHR(data_json["members"]["pMissShaderBindingTable"]);}();
}();pMissShaderBindingTable=temp_Ietjvjp;}();
VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable
            ;
[&]() {
VkStridedDeviceAddressRegionKHR* temp_uKmPwYB;[&]() {

        if (data_json["members"]["pHitShaderBindingTable"].contains("null")){
        temp_uKmPwYB=NULL;
        return;
        }
    temp_uKmPwYB=(VkStridedDeviceAddressRegionKHR*)malloc(sizeof(VkStridedDeviceAddressRegionKHR));
[&]() {
*(temp_uKmPwYB)=deserialize_VkStridedDeviceAddressRegionKHR(data_json["members"]["pHitShaderBindingTable"]);}();
}();pHitShaderBindingTable=temp_uKmPwYB;}();
VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable
            ;
[&]() {
VkStridedDeviceAddressRegionKHR* temp_ZkENQyN;[&]() {

        if (data_json["members"]["pCallableShaderBindingTable"].contains("null")){
        temp_ZkENQyN=NULL;
        return;
        }
    temp_ZkENQyN=(VkStridedDeviceAddressRegionKHR*)malloc(sizeof(VkStridedDeviceAddressRegionKHR));
[&]() {
*(temp_ZkENQyN)=deserialize_VkStridedDeviceAddressRegionKHR(data_json["members"]["pCallableShaderBindingTable"]);}();
}();pCallableShaderBindingTable=temp_ZkENQyN;}();
VkDeviceAddress indirectDeviceAddress
        ;
[&]() {
[&]() {
indirectDeviceAddress=deserialize_uint64_t(data_json["members"]["indirectDeviceAddress"]);}();}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdTraceRaysIndirectKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdTraceRaysIndirectKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdTraceRaysIndirectKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdTraceRaysIndirectKHR");
    }  
    
call_function(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, indirectDeviceAddress);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pRaygenShaderBindingTable"]=[&]() {
    json return_ovMxhry=json({});
    
        if (pRaygenShaderBindingTable==NULL){
            return_ovMxhry["null"]=true;
            return return_ovMxhry;
        }
        return_ovMxhry=[&]() {
    json return_PJQqQIU=json({});
    return serialize_VkStridedDeviceAddressRegionKHR(*pRaygenShaderBindingTable);}();
return return_ovMxhry;}();
result["members"]["pMissShaderBindingTable"]=[&]() {
    json return_FnwCNhh=json({});
    
        if (pMissShaderBindingTable==NULL){
            return_FnwCNhh["null"]=true;
            return return_FnwCNhh;
        }
        return_FnwCNhh=[&]() {
    json return_CTZxbuR=json({});
    return serialize_VkStridedDeviceAddressRegionKHR(*pMissShaderBindingTable);}();
return return_FnwCNhh;}();
result["members"]["pHitShaderBindingTable"]=[&]() {
    json return_CWpPDRZ=json({});
    
        if (pHitShaderBindingTable==NULL){
            return_CWpPDRZ["null"]=true;
            return return_CWpPDRZ;
        }
        return_CWpPDRZ=[&]() {
    json return_HQpDGRG=json({});
    return serialize_VkStridedDeviceAddressRegionKHR(*pHitShaderBindingTable);}();
return return_CWpPDRZ;}();
result["members"]["pCallableShaderBindingTable"]=[&]() {
    json return_DKflgoV=json({});
    
        if (pCallableShaderBindingTable==NULL){
            return_DKflgoV["null"]=true;
            return return_DKflgoV;
        }
        return_DKflgoV=[&]() {
    json return_PwmuDmK=json({});
    return serialize_VkStridedDeviceAddressRegionKHR(*pCallableShaderBindingTable);}();
return return_DKflgoV;}();
result["members"]["indirectDeviceAddress"]=[&]() {
    json return_qpqHZzS=json({});
    return_qpqHZzS=[&]() {
    json return_EltxpPH=json({});
    return serialize_uint64_t(indirectDeviceAddress);}();return return_qpqHZzS;}();

        writeToConn(result);
    }

    void handle_vkCmdTraceRaysIndirect2KHR(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkDeviceAddress indirectDeviceAddress
        ;
[&]() {
[&]() {
indirectDeviceAddress=deserialize_uint64_t(data_json["members"]["indirectDeviceAddress"]);}();}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdTraceRaysIndirect2KHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdTraceRaysIndirect2KHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdTraceRaysIndirect2KHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdTraceRaysIndirect2KHR");
    }  
    
call_function(commandBuffer, indirectDeviceAddress);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["indirectDeviceAddress"]=[&]() {
    json return_qpqHZzS=json({});
    return_qpqHZzS=[&]() {
    json return_EltxpPH=json({});
    return serialize_uint64_t(indirectDeviceAddress);}();return return_qpqHZzS;}();

        writeToConn(result);
    }

    void handle_vkGetDeviceAccelerationStructureCompatibilityKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkAccelerationStructureVersionInfoKHR* pVersionInfo
            ;
[&]() {
VkAccelerationStructureVersionInfoKHR* temp_nyrNysN;[&]() {

        if (data_json["members"]["pVersionInfo"].contains("null")){
        temp_nyrNysN=NULL;
        return;
        }
    temp_nyrNysN=(VkAccelerationStructureVersionInfoKHR*)malloc(sizeof(VkAccelerationStructureVersionInfoKHR));
[&]() {
*(temp_nyrNysN)=deserialize_VkAccelerationStructureVersionInfoKHR(data_json["members"]["pVersionInfo"]);}();
}();pVersionInfo=temp_nyrNysN;}();
VkAccelerationStructureCompatibilityKHR* pCompatibility
        ;
[&]() {

        if (data_json["members"]["pCompatibility"].contains("null")){
        pCompatibility=NULL;
        return;
        }
    pCompatibility=(VkAccelerationStructureCompatibilityKHR*)malloc(sizeof(VkAccelerationStructureCompatibilityKHR));
[&]() {
*(pCompatibility)=deserialize_VkAccelerationStructureCompatibilityKHR(data_json["members"]["pCompatibility"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetDeviceAccelerationStructureCompatibilityKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDeviceAccelerationStructureCompatibilityKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetDeviceAccelerationStructureCompatibilityKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDeviceAccelerationStructureCompatibilityKHR");
    }  
    
call_function(device, pVersionInfo, pCompatibility);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pVersionInfo"]=[&]() {
    json return_kqLSIBb=json({});
    
        if (pVersionInfo==NULL){
            return_kqLSIBb["null"]=true;
            return return_kqLSIBb;
        }
        return_kqLSIBb=[&]() {
    json return_zSnDpwP=json({});
    return serialize_VkAccelerationStructureVersionInfoKHR(*pVersionInfo);}();
return return_kqLSIBb;}();
result["members"]["pCompatibility"]=[&]() {
    json return_pFzhFrX=json({});
    
        if (pCompatibility==NULL){
            return_pFzhFrX["null"]=true;
            return return_pFzhFrX;
        }
        return_pFzhFrX=[&]() {
    json return_rJRBcNi=json({});
    return serialize_VkAccelerationStructureCompatibilityKHR(*pCompatibility);}();
return return_pFzhFrX;}();

        writeToConn(result);
    }

    void handle_vkGetRayTracingShaderGroupStackSizeKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkPipeline pipeline
            ;
[&]() {
pipeline=deserialize_VkPipeline(data_json["members"]["pipeline"]);}();
uint32_t group
            ;
[&]() {
group=deserialize_uint32_t(data_json["members"]["group"]);}();
VkShaderGroupShaderKHR groupShader
        ;
[&]() {
groupShader=deserialize_VkShaderGroupShaderKHR(data_json["members"]["groupShader"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetRayTracingShaderGroupStackSizeKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetRayTracingShaderGroupStackSizeKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetRayTracingShaderGroupStackSizeKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetRayTracingShaderGroupStackSizeKHR");
    }  
    
auto return_value=call_function(device, pipeline, group, groupShader);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_PkcnuIL=json({});
    return_PkcnuIL=[&]() {
    json return_PxeQIiA=json({});
    return serialize_uint64_t(return_value);}();return return_PkcnuIL;}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pipeline"]=[&]() {
    json return_xIUyQCN=json({});
    return serialize_VkPipeline(pipeline);}();
result["members"]["group"]=[&]() {
    json return_xTPVAxI=json({});
    return serialize_uint32_t(group);}();
result["members"]["groupShader"]=[&]() {
    json return_oHnLhUe=json({});
    return serialize_VkShaderGroupShaderKHR(groupShader);}();

        writeToConn(result);
    }

    void handle_vkCmdSetRayTracingPipelineStackSizeKHR(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t pipelineStackSize
        ;
[&]() {
pipelineStackSize=deserialize_uint32_t(data_json["members"]["pipelineStackSize"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetRayTracingPipelineStackSizeKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetRayTracingPipelineStackSizeKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetRayTracingPipelineStackSizeKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetRayTracingPipelineStackSizeKHR");
    }  
    
call_function(commandBuffer, pipelineStackSize);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pipelineStackSize"]=[&]() {
    json return_CXJZzXP=json({});
    return serialize_uint32_t(pipelineStackSize);}();

        writeToConn(result);
    }

    void handle_vkGetImageViewHandleNVX(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkImageViewHandleInfoNVX* pInfo
        ;
[&]() {
VkImageViewHandleInfoNVX* temp_RiHBMkk;[&]() {

        if (data_json["members"]["pInfo"].contains("null")){
        temp_RiHBMkk=NULL;
        return;
        }
    temp_RiHBMkk=(VkImageViewHandleInfoNVX*)malloc(sizeof(VkImageViewHandleInfoNVX));
[&]() {
*(temp_RiHBMkk)=deserialize_VkImageViewHandleInfoNVX(data_json["members"]["pInfo"]);}();
}();pInfo=temp_RiHBMkk;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetImageViewHandleNVX)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetImageViewHandleNVX");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetImageViewHandleNVX)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetImageViewHandleNVX");
    }  
    
auto return_value=call_function(device, pInfo);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_mCHneol=json({});
    return serialize_uint32_t(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pInfo"]=[&]() {
    json return_wRfjyoW=json({});
    
        if (pInfo==NULL){
            return_wRfjyoW["null"]=true;
            return return_wRfjyoW;
        }
        return_wRfjyoW=[&]() {
    json return_zKZAobN=json({});
    return serialize_VkImageViewHandleInfoNVX(*pInfo);}();
return return_wRfjyoW;}();

        writeToConn(result);
    }

    void handle_vkGetImageViewAddressNVX(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkImageView imageView
            ;
[&]() {
imageView=deserialize_VkImageView(data_json["members"]["imageView"]);}();
VkImageViewAddressPropertiesNVX* pProperties
        ;
[&]() {

        if (data_json["members"]["pProperties"].contains("null")){
        pProperties=NULL;
        return;
        }
    pProperties=(VkImageViewAddressPropertiesNVX*)malloc(sizeof(VkImageViewAddressPropertiesNVX));
[&]() {
*(pProperties)=deserialize_VkImageViewAddressPropertiesNVX(data_json["members"]["pProperties"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetImageViewAddressNVX)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetImageViewAddressNVX");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetImageViewAddressNVX)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetImageViewAddressNVX");
    }  
    
auto return_value=call_function(device, imageView, pProperties);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_AYywksw=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["imageView"]=[&]() {
    json return_TXEDCEI=json({});
    return serialize_VkImageView(imageView);}();
result["members"]["pProperties"]=[&]() {
    json return_TUehTTT=json({});
    
        if (pProperties==NULL){
            return_TUehTTT["null"]=true;
            return return_TUehTTT;
        }
        return_TUehTTT=[&]() {
    json return_ODrqQdQ=json({});
    return serialize_VkImageViewAddressPropertiesNVX(*pProperties);}();
return return_TUehTTT;}();

        writeToConn(result);
    }

    void handle_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
uint32_t queueFamilyIndex
            ;
[&]() {
queueFamilyIndex=deserialize_uint32_t(data_json["members"]["queueFamilyIndex"]);}();
uint32_t* pCounterCount
            ;
[&]() {

        if (data_json["members"]["pCounterCount"].contains("null")){
        pCounterCount=NULL;
        return;
        }
    pCounterCount=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pCounterCount)=deserialize_uint32_t(data_json["members"]["pCounterCount"]);}();
}();
VkPerformanceCounterKHR* pCounters
            ;
[&]() {

        if (data_json["members"]["pCounters"].contains("null")){
        pCounters=NULL;
        return;
        }
    pCounters=(VkPerformanceCounterKHR*)malloc(*pCounterCount*sizeof(VkPerformanceCounterKHR));
        for (int UPYrUfM=0; UPYrUfM < *pCounterCount; UPYrUfM++){
            [&]() {
pCounters[UPYrUfM]=deserialize_VkPerformanceCounterKHR(data_json["members"]["pCounters"]["members"][UPYrUfM]);}();;
        }
        }();
VkPerformanceCounterDescriptionKHR* pCounterDescriptions
        ;
[&]() {

        if (data_json["members"]["pCounterDescriptions"].contains("null")){
        pCounterDescriptions=NULL;
        return;
        }
    pCounterDescriptions=(VkPerformanceCounterDescriptionKHR*)malloc(*pCounterCount*sizeof(VkPerformanceCounterDescriptionKHR));
        for (int ZJAqfBK=0; ZJAqfBK < *pCounterCount; ZJAqfBK++){
            [&]() {
pCounterDescriptions[ZJAqfBK]=deserialize_VkPerformanceCounterDescriptionKHR(data_json["members"]["pCounterDescriptions"]["members"][ZJAqfBK]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR");
    }  
    
auto return_value=call_function(physicalDevice, queueFamilyIndex, pCounterCount, pCounters, pCounterDescriptions);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_QpvcVXL=json({});
    return serialize_VkResult(return_value);}();
result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["queueFamilyIndex"]=[&]() {
    json return_lNjYgkI=json({});
    return serialize_uint32_t(queueFamilyIndex);}();
result["members"]["pCounterCount"]=[&]() {
    json return_oPyRbUV=json({});
    
        if (pCounterCount==NULL){
            return_oPyRbUV["null"]=true;
            return return_oPyRbUV;
        }
        return_oPyRbUV=[&]() {
    json return_NBGwjon=json({});
    return serialize_uint32_t(*pCounterCount);}();
return return_oPyRbUV;}();
result["members"]["pCounters"]=[&]() {
    json return_EIjpIbv=json({});
    
        if (pCounters==NULL){
            return_EIjpIbv["null"]=true;
            return return_EIjpIbv;
        }
        
        return_EIjpIbv["members"]={};
        for(int EIjpIbv=0; EIjpIbv < *pCounterCount; EIjpIbv++){
            json temp;
            temp=[&]() {
    json return_DKxveuA=json({});
    return serialize_VkPerformanceCounterKHR(pCounters[EIjpIbv]);}();
            return_EIjpIbv["members"].push_back(temp);
        }
        return return_EIjpIbv;
        }();
result["members"]["pCounterDescriptions"]=[&]() {
    json return_FhfvHxi=json({});
    
        if (pCounterDescriptions==NULL){
            return_FhfvHxi["null"]=true;
            return return_FhfvHxi;
        }
        
        return_FhfvHxi["members"]={};
        for(int FhfvHxi=0; FhfvHxi < *pCounterCount; FhfvHxi++){
            json temp;
            temp=[&]() {
    json return_jtABVnr=json({});
    return serialize_VkPerformanceCounterDescriptionKHR(pCounterDescriptions[FhfvHxi]);}();
            return_FhfvHxi["members"].push_back(temp);
        }
        return return_FhfvHxi;
        }();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
VkQueryPoolPerformanceCreateInfoKHR* pPerformanceQueryCreateInfo
            ;
[&]() {
VkQueryPoolPerformanceCreateInfoKHR* temp_SSEJioJ;[&]() {

        if (data_json["members"]["pPerformanceQueryCreateInfo"].contains("null")){
        temp_SSEJioJ=NULL;
        return;
        }
    temp_SSEJioJ=(VkQueryPoolPerformanceCreateInfoKHR*)malloc(sizeof(VkQueryPoolPerformanceCreateInfoKHR));
[&]() {
*(temp_SSEJioJ)=deserialize_VkQueryPoolPerformanceCreateInfoKHR(data_json["members"]["pPerformanceQueryCreateInfo"]);}();
}();pPerformanceQueryCreateInfo=temp_SSEJioJ;}();
uint32_t* pNumPasses
        ;
[&]() {

        if (data_json["members"]["pNumPasses"].contains("null")){
        pNumPasses=NULL;
        return;
        }
    pNumPasses=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pNumPasses)=deserialize_uint32_t(data_json["members"]["pNumPasses"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR");
    }  
    
call_function(physicalDevice, pPerformanceQueryCreateInfo, pNumPasses);
json result=json({});
        result["type"]="Response";
    

result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["pPerformanceQueryCreateInfo"]=[&]() {
    json return_HdYvhTs=json({});
    
        if (pPerformanceQueryCreateInfo==NULL){
            return_HdYvhTs["null"]=true;
            return return_HdYvhTs;
        }
        return_HdYvhTs=[&]() {
    json return_ewXtyvx=json({});
    return serialize_VkQueryPoolPerformanceCreateInfoKHR(*pPerformanceQueryCreateInfo);}();
return return_HdYvhTs;}();
result["members"]["pNumPasses"]=[&]() {
    json return_NECAfdR=json({});
    
        if (pNumPasses==NULL){
            return_NECAfdR["null"]=true;
            return return_NECAfdR;
        }
        return_NECAfdR=[&]() {
    json return_ycHAJvu=json({});
    return serialize_uint32_t(*pNumPasses);}();
return return_NECAfdR;}();

        writeToConn(result);
    }

    void handle_vkAcquireProfilingLockKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkAcquireProfilingLockInfoKHR* pInfo
        ;
[&]() {
VkAcquireProfilingLockInfoKHR* temp_jtFXpRs;[&]() {

        if (data_json["members"]["pInfo"].contains("null")){
        temp_jtFXpRs=NULL;
        return;
        }
    temp_jtFXpRs=(VkAcquireProfilingLockInfoKHR*)malloc(sizeof(VkAcquireProfilingLockInfoKHR));
[&]() {
*(temp_jtFXpRs)=deserialize_VkAcquireProfilingLockInfoKHR(data_json["members"]["pInfo"]);}();
}();pInfo=temp_jtFXpRs;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkAcquireProfilingLockKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkAcquireProfilingLockKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkAcquireProfilingLockKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkAcquireProfilingLockKHR");
    }  
    
auto return_value=call_function(device, pInfo);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_jooouoy=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pInfo"]=[&]() {
    json return_PvvMlSF=json({});
    
        if (pInfo==NULL){
            return_PvvMlSF["null"]=true;
            return return_PvvMlSF;
        }
        return_PvvMlSF=[&]() {
    json return_OBbeGbH=json({});
    return serialize_VkAcquireProfilingLockInfoKHR(*pInfo);}();
return return_PvvMlSF;}();

        writeToConn(result);
    }

    void handle_vkReleaseProfilingLockKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
        ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkReleaseProfilingLockKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkReleaseProfilingLockKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkReleaseProfilingLockKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkReleaseProfilingLockKHR");
    }  
    
call_function(device);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_ZkFakia=json({});
    return serialize_VkDevice(device);}();

        writeToConn(result);
    }

    void handle_vkGetImageDrmFormatModifierPropertiesEXT(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkImage image
            ;
[&]() {
image=deserialize_VkImage(data_json["members"]["image"]);}();
VkImageDrmFormatModifierPropertiesEXT* pProperties
        ;
[&]() {

        if (data_json["members"]["pProperties"].contains("null")){
        pProperties=NULL;
        return;
        }
    pProperties=(VkImageDrmFormatModifierPropertiesEXT*)malloc(sizeof(VkImageDrmFormatModifierPropertiesEXT));
[&]() {
*(pProperties)=deserialize_VkImageDrmFormatModifierPropertiesEXT(data_json["members"]["pProperties"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetImageDrmFormatModifierPropertiesEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetImageDrmFormatModifierPropertiesEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetImageDrmFormatModifierPropertiesEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetImageDrmFormatModifierPropertiesEXT");
    }  
    
auto return_value=call_function(device, image, pProperties);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_PPKnkVY=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["image"]=[&]() {
    json return_fgEkUQK=json({});
    return serialize_VkImage(image);}();
result["members"]["pProperties"]=[&]() {
    json return_NsUKWEd=json({});
    
        if (pProperties==NULL){
            return_NsUKWEd["null"]=true;
            return return_NsUKWEd;
        }
        return_NsUKWEd=[&]() {
    json return_XzXKleg=json({});
    return serialize_VkImageDrmFormatModifierPropertiesEXT(*pProperties);}();
return return_NsUKWEd;}();

        writeToConn(result);
    }

    void handle_vkGetBufferOpaqueCaptureAddress(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkBufferDeviceAddressInfo* pInfo
        ;
[&]() {
VkBufferDeviceAddressInfo* temp_HNHOaLm;[&]() {

        if (data_json["members"]["pInfo"].contains("null")){
        temp_HNHOaLm=NULL;
        return;
        }
    temp_HNHOaLm=(VkBufferDeviceAddressInfo*)malloc(sizeof(VkBufferDeviceAddressInfo));
[&]() {
*(temp_HNHOaLm)=deserialize_VkBufferDeviceAddressInfo(data_json["members"]["pInfo"]);}();
}();pInfo=temp_HNHOaLm;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetBufferOpaqueCaptureAddress)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetBufferOpaqueCaptureAddress");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetBufferOpaqueCaptureAddress)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetBufferOpaqueCaptureAddress");
    }  
    
auto return_value=call_function(device, pInfo);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_UikCDgJ=json({});
    return serialize_uint64_t(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pInfo"]=[&]() {
    json return_oEfTpxK=json({});
    
        if (pInfo==NULL){
            return_oEfTpxK["null"]=true;
            return return_oEfTpxK;
        }
        return_oEfTpxK=[&]() {
    json return_pUqNezH=json({});
    return serialize_VkBufferDeviceAddressInfo(*pInfo);}();
return return_oEfTpxK;}();

        writeToConn(result);
    }

    void handle_vkGetBufferOpaqueCaptureAddressKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkBufferDeviceAddressInfo* pInfo
        ;
[&]() {
VkBufferDeviceAddressInfo* temp_HNHOaLm;[&]() {

        if (data_json["members"]["pInfo"].contains("null")){
        temp_HNHOaLm=NULL;
        return;
        }
    temp_HNHOaLm=(VkBufferDeviceAddressInfo*)malloc(sizeof(VkBufferDeviceAddressInfo));
[&]() {
*(temp_HNHOaLm)=deserialize_VkBufferDeviceAddressInfo(data_json["members"]["pInfo"]);}();
}();pInfo=temp_HNHOaLm;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetBufferOpaqueCaptureAddressKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetBufferOpaqueCaptureAddressKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetBufferOpaqueCaptureAddressKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetBufferOpaqueCaptureAddressKHR");
    }  
    
auto return_value=call_function(device, pInfo);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_hwUrHVL=json({});
    return serialize_uint64_t(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pInfo"]=[&]() {
    json return_oEfTpxK=json({});
    
        if (pInfo==NULL){
            return_oEfTpxK["null"]=true;
            return return_oEfTpxK;
        }
        return_oEfTpxK=[&]() {
    json return_pUqNezH=json({});
    return serialize_VkBufferDeviceAddressInfo(*pInfo);}();
return return_oEfTpxK;}();

        writeToConn(result);
    }

    void handle_vkGetBufferDeviceAddress(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkBufferDeviceAddressInfo* pInfo
        ;
[&]() {
VkBufferDeviceAddressInfo* temp_HNHOaLm;[&]() {

        if (data_json["members"]["pInfo"].contains("null")){
        temp_HNHOaLm=NULL;
        return;
        }
    temp_HNHOaLm=(VkBufferDeviceAddressInfo*)malloc(sizeof(VkBufferDeviceAddressInfo));
[&]() {
*(temp_HNHOaLm)=deserialize_VkBufferDeviceAddressInfo(data_json["members"]["pInfo"]);}();
}();pInfo=temp_HNHOaLm;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetBufferDeviceAddress)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetBufferDeviceAddress");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetBufferDeviceAddress)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetBufferDeviceAddress");
    }  
    
auto return_value=call_function(device, pInfo);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_fcVQyFh=json({});
    return_fcVQyFh=[&]() {
    json return_sCwbSHP=json({});
    return serialize_uint64_t(return_value);}();return return_fcVQyFh;}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pInfo"]=[&]() {
    json return_oEfTpxK=json({});
    
        if (pInfo==NULL){
            return_oEfTpxK["null"]=true;
            return return_oEfTpxK;
        }
        return_oEfTpxK=[&]() {
    json return_pUqNezH=json({});
    return serialize_VkBufferDeviceAddressInfo(*pInfo);}();
return return_oEfTpxK;}();

        writeToConn(result);
    }

    void handle_vkGetBufferDeviceAddressKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkBufferDeviceAddressInfo* pInfo
        ;
[&]() {
VkBufferDeviceAddressInfo* temp_HNHOaLm;[&]() {

        if (data_json["members"]["pInfo"].contains("null")){
        temp_HNHOaLm=NULL;
        return;
        }
    temp_HNHOaLm=(VkBufferDeviceAddressInfo*)malloc(sizeof(VkBufferDeviceAddressInfo));
[&]() {
*(temp_HNHOaLm)=deserialize_VkBufferDeviceAddressInfo(data_json["members"]["pInfo"]);}();
}();pInfo=temp_HNHOaLm;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetBufferDeviceAddressKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetBufferDeviceAddressKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetBufferDeviceAddressKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetBufferDeviceAddressKHR");
    }  
    
auto return_value=call_function(device, pInfo);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_tbNZiHk=json({});
    return_tbNZiHk=[&]() {
    json return_dnCtneE=json({});
    return serialize_uint64_t(return_value);}();return return_tbNZiHk;}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pInfo"]=[&]() {
    json return_oEfTpxK=json({});
    
        if (pInfo==NULL){
            return_oEfTpxK["null"]=true;
            return return_oEfTpxK;
        }
        return_oEfTpxK=[&]() {
    json return_pUqNezH=json({});
    return serialize_VkBufferDeviceAddressInfo(*pInfo);}();
return return_oEfTpxK;}();

        writeToConn(result);
    }

    void handle_vkGetBufferDeviceAddressEXT(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkBufferDeviceAddressInfo* pInfo
        ;
[&]() {
VkBufferDeviceAddressInfo* temp_HNHOaLm;[&]() {

        if (data_json["members"]["pInfo"].contains("null")){
        temp_HNHOaLm=NULL;
        return;
        }
    temp_HNHOaLm=(VkBufferDeviceAddressInfo*)malloc(sizeof(VkBufferDeviceAddressInfo));
[&]() {
*(temp_HNHOaLm)=deserialize_VkBufferDeviceAddressInfo(data_json["members"]["pInfo"]);}();
}();pInfo=temp_HNHOaLm;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetBufferDeviceAddressEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetBufferDeviceAddressEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetBufferDeviceAddressEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetBufferDeviceAddressEXT");
    }  
    
auto return_value=call_function(device, pInfo);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_BPxVizS=json({});
    return_BPxVizS=[&]() {
    json return_KfoQvdo=json({});
    return serialize_uint64_t(return_value);}();return return_BPxVizS;}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pInfo"]=[&]() {
    json return_oEfTpxK=json({});
    
        if (pInfo==NULL){
            return_oEfTpxK["null"]=true;
            return return_oEfTpxK;
        }
        return_oEfTpxK=[&]() {
    json return_pUqNezH=json({});
    return serialize_VkBufferDeviceAddressInfo(*pInfo);}();
return return_oEfTpxK;}();

        writeToConn(result);
    }

    void handle_vkCreateHeadlessSurfaceEXT(json data_json){
    //Will only be called by the server
    
VkInstance instance
            ;
[&]() {
instance=deserialize_VkInstance(data_json["members"]["instance"]);}();
VkHeadlessSurfaceCreateInfoEXT* pCreateInfo
            ;
[&]() {
VkHeadlessSurfaceCreateInfoEXT* temp_WgrvIur;[&]() {

        if (data_json["members"]["pCreateInfo"].contains("null")){
        temp_WgrvIur=NULL;
        return;
        }
    temp_WgrvIur=(VkHeadlessSurfaceCreateInfoEXT*)malloc(sizeof(VkHeadlessSurfaceCreateInfoEXT));
[&]() {
*(temp_WgrvIur)=deserialize_VkHeadlessSurfaceCreateInfoEXT(data_json["members"]["pCreateInfo"]);}();
}();pCreateInfo=temp_WgrvIur;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkSurfaceKHR* pSurface
        ;
[&]() {

        if (data_json["members"]["pSurface"].contains("null")){
        pSurface=NULL;
        return;
        }
    pSurface=(VkSurfaceKHR*)malloc(sizeof(VkSurfaceKHR));
[&]() {
*(pSurface)=deserialize_VkSurfaceKHR(data_json["members"]["pSurface"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreateHeadlessSurfaceEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateHeadlessSurfaceEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreateHeadlessSurfaceEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateHeadlessSurfaceEXT");
    }  
    
auto return_value=call_function(instance, pCreateInfo, pAllocator, pSurface);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_IpwaqWw=json({});
    return serialize_VkResult(return_value);}();
result["members"]["instance"]=[&]() {
    json return_uDnIwUL=json({});
    return serialize_VkInstance(instance);}();
result["members"]["pCreateInfo"]=[&]() {
    json return_LeBhbUW=json({});
    
        if (pCreateInfo==NULL){
            return_LeBhbUW["null"]=true;
            return return_LeBhbUW;
        }
        return_LeBhbUW=[&]() {
    json return_Itysrmz=json({});
    return serialize_VkHeadlessSurfaceCreateInfoEXT(*pCreateInfo);}();
return return_LeBhbUW;}();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pSurface"]=[&]() {
    json return_BdLSuHF=json({});
    
        if (pSurface==NULL){
            return_BdLSuHF["null"]=true;
            return return_BdLSuHF;
        }
        return_BdLSuHF=[&]() {
    json return_WuReHBv=json({});
    return serialize_VkSurfaceKHR(*pSurface);}();
return return_BdLSuHF;}();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
uint32_t* pCombinationCount
            ;
[&]() {

        if (data_json["members"]["pCombinationCount"].contains("null")){
        pCombinationCount=NULL;
        return;
        }
    pCombinationCount=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pCombinationCount)=deserialize_uint32_t(data_json["members"]["pCombinationCount"]);}();
}();
VkFramebufferMixedSamplesCombinationNV* pCombinations
        ;
[&]() {

        if (data_json["members"]["pCombinations"].contains("null")){
        pCombinations=NULL;
        return;
        }
    pCombinations=(VkFramebufferMixedSamplesCombinationNV*)malloc(*pCombinationCount*sizeof(VkFramebufferMixedSamplesCombinationNV));
        for (int cxuNuHa=0; cxuNuHa < *pCombinationCount; cxuNuHa++){
            [&]() {
pCombinations[cxuNuHa]=deserialize_VkFramebufferMixedSamplesCombinationNV(data_json["members"]["pCombinations"]["members"][cxuNuHa]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV");
    }  
    
auto return_value=call_function(physicalDevice, pCombinationCount, pCombinations);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_GHVnUeq=json({});
    return serialize_VkResult(return_value);}();
result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["pCombinationCount"]=[&]() {
    json return_bIGXtAz=json({});
    
        if (pCombinationCount==NULL){
            return_bIGXtAz["null"]=true;
            return return_bIGXtAz;
        }
        return_bIGXtAz=[&]() {
    json return_WFpfPvy=json({});
    return serialize_uint32_t(*pCombinationCount);}();
return return_bIGXtAz;}();
result["members"]["pCombinations"]=[&]() {
    json return_uJJqVND=json({});
    
        if (pCombinations==NULL){
            return_uJJqVND["null"]=true;
            return return_uJJqVND;
        }
        
        return_uJJqVND["members"]={};
        for(int uJJqVND=0; uJJqVND < *pCombinationCount; uJJqVND++){
            json temp;
            temp=[&]() {
    json return_GCepRzv=json({});
    return serialize_VkFramebufferMixedSamplesCombinationNV(pCombinations[uJJqVND]);}();
            return_uJJqVND["members"].push_back(temp);
        }
        return return_uJJqVND;
        }();

        writeToConn(result);
    }

    void handle_vkInitializePerformanceApiINTEL(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkInitializePerformanceApiInfoINTEL* pInitializeInfo
        ;
[&]() {
VkInitializePerformanceApiInfoINTEL* temp_AFpAiXs;[&]() {

        if (data_json["members"]["pInitializeInfo"].contains("null")){
        temp_AFpAiXs=NULL;
        return;
        }
    temp_AFpAiXs=(VkInitializePerformanceApiInfoINTEL*)malloc(sizeof(VkInitializePerformanceApiInfoINTEL));
[&]() {
*(temp_AFpAiXs)=deserialize_VkInitializePerformanceApiInfoINTEL(data_json["members"]["pInitializeInfo"]);}();
}();pInitializeInfo=temp_AFpAiXs;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkInitializePerformanceApiINTEL)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkInitializePerformanceApiINTEL");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkInitializePerformanceApiINTEL)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkInitializePerformanceApiINTEL");
    }  
    
auto return_value=call_function(device, pInitializeInfo);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_PzuyCLL=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pInitializeInfo"]=[&]() {
    json return_CovSjPo=json({});
    
        if (pInitializeInfo==NULL){
            return_CovSjPo["null"]=true;
            return return_CovSjPo;
        }
        return_CovSjPo=[&]() {
    json return_ZraxxKc=json({});
    return serialize_VkInitializePerformanceApiInfoINTEL(*pInitializeInfo);}();
return return_CovSjPo;}();

        writeToConn(result);
    }

    void handle_vkUninitializePerformanceApiINTEL(json data_json){
    //Will only be called by the server
    
VkDevice device
        ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkUninitializePerformanceApiINTEL)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkUninitializePerformanceApiINTEL");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkUninitializePerformanceApiINTEL)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkUninitializePerformanceApiINTEL");
    }  
    
call_function(device);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_ZkFakia=json({});
    return serialize_VkDevice(device);}();

        writeToConn(result);
    }

    void handle_vkCmdSetPerformanceMarkerINTEL(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkPerformanceMarkerInfoINTEL* pMarkerInfo
        ;
[&]() {
VkPerformanceMarkerInfoINTEL* temp_bOJRhrV;[&]() {

        if (data_json["members"]["pMarkerInfo"].contains("null")){
        temp_bOJRhrV=NULL;
        return;
        }
    temp_bOJRhrV=(VkPerformanceMarkerInfoINTEL*)malloc(sizeof(VkPerformanceMarkerInfoINTEL));
[&]() {
*(temp_bOJRhrV)=deserialize_VkPerformanceMarkerInfoINTEL(data_json["members"]["pMarkerInfo"]);}();
}();pMarkerInfo=temp_bOJRhrV;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetPerformanceMarkerINTEL)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetPerformanceMarkerINTEL");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetPerformanceMarkerINTEL)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetPerformanceMarkerINTEL");
    }  
    
auto return_value=call_function(commandBuffer, pMarkerInfo);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_jcgFfQs=json({});
    return serialize_VkResult(return_value);}();
result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pMarkerInfo"]=[&]() {
    json return_wkrGWmk=json({});
    
        if (pMarkerInfo==NULL){
            return_wkrGWmk["null"]=true;
            return return_wkrGWmk;
        }
        return_wkrGWmk=[&]() {
    json return_sqrEfUj=json({});
    return serialize_VkPerformanceMarkerInfoINTEL(*pMarkerInfo);}();
return return_wkrGWmk;}();

        writeToConn(result);
    }

    void handle_vkCmdSetPerformanceStreamMarkerINTEL(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkPerformanceStreamMarkerInfoINTEL* pMarkerInfo
        ;
[&]() {
VkPerformanceStreamMarkerInfoINTEL* temp_XuxCBMZ;[&]() {

        if (data_json["members"]["pMarkerInfo"].contains("null")){
        temp_XuxCBMZ=NULL;
        return;
        }
    temp_XuxCBMZ=(VkPerformanceStreamMarkerInfoINTEL*)malloc(sizeof(VkPerformanceStreamMarkerInfoINTEL));
[&]() {
*(temp_XuxCBMZ)=deserialize_VkPerformanceStreamMarkerInfoINTEL(data_json["members"]["pMarkerInfo"]);}();
}();pMarkerInfo=temp_XuxCBMZ;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetPerformanceStreamMarkerINTEL)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetPerformanceStreamMarkerINTEL");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetPerformanceStreamMarkerINTEL)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetPerformanceStreamMarkerINTEL");
    }  
    
auto return_value=call_function(commandBuffer, pMarkerInfo);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_PTYIaYZ=json({});
    return serialize_VkResult(return_value);}();
result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pMarkerInfo"]=[&]() {
    json return_kGNypPg=json({});
    
        if (pMarkerInfo==NULL){
            return_kGNypPg["null"]=true;
            return return_kGNypPg;
        }
        return_kGNypPg=[&]() {
    json return_LizgTJX=json({});
    return serialize_VkPerformanceStreamMarkerInfoINTEL(*pMarkerInfo);}();
return return_kGNypPg;}();

        writeToConn(result);
    }

    void handle_vkCmdSetPerformanceOverrideINTEL(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkPerformanceOverrideInfoINTEL* pOverrideInfo
        ;
[&]() {
VkPerformanceOverrideInfoINTEL* temp_ECYmcJv;[&]() {

        if (data_json["members"]["pOverrideInfo"].contains("null")){
        temp_ECYmcJv=NULL;
        return;
        }
    temp_ECYmcJv=(VkPerformanceOverrideInfoINTEL*)malloc(sizeof(VkPerformanceOverrideInfoINTEL));
[&]() {
*(temp_ECYmcJv)=deserialize_VkPerformanceOverrideInfoINTEL(data_json["members"]["pOverrideInfo"]);}();
}();pOverrideInfo=temp_ECYmcJv;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetPerformanceOverrideINTEL)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetPerformanceOverrideINTEL");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetPerformanceOverrideINTEL)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetPerformanceOverrideINTEL");
    }  
    
auto return_value=call_function(commandBuffer, pOverrideInfo);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_QZmxNRV=json({});
    return serialize_VkResult(return_value);}();
result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pOverrideInfo"]=[&]() {
    json return_HHdsdYE=json({});
    
        if (pOverrideInfo==NULL){
            return_HHdsdYE["null"]=true;
            return return_HHdsdYE;
        }
        return_HHdsdYE=[&]() {
    json return_BQQPrcm=json({});
    return serialize_VkPerformanceOverrideInfoINTEL(*pOverrideInfo);}();
return return_HHdsdYE;}();

        writeToConn(result);
    }

    void handle_vkAcquirePerformanceConfigurationINTEL(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkPerformanceConfigurationAcquireInfoINTEL* pAcquireInfo
            ;
[&]() {
VkPerformanceConfigurationAcquireInfoINTEL* temp_gbXRovb;[&]() {

        if (data_json["members"]["pAcquireInfo"].contains("null")){
        temp_gbXRovb=NULL;
        return;
        }
    temp_gbXRovb=(VkPerformanceConfigurationAcquireInfoINTEL*)malloc(sizeof(VkPerformanceConfigurationAcquireInfoINTEL));
[&]() {
*(temp_gbXRovb)=deserialize_VkPerformanceConfigurationAcquireInfoINTEL(data_json["members"]["pAcquireInfo"]);}();
}();pAcquireInfo=temp_gbXRovb;}();
VkPerformanceConfigurationINTEL* pConfiguration
        ;
[&]() {

        if (data_json["members"]["pConfiguration"].contains("null")){
        pConfiguration=NULL;
        return;
        }
    pConfiguration=(VkPerformanceConfigurationINTEL*)malloc(sizeof(VkPerformanceConfigurationINTEL));
[&]() {
*(pConfiguration)=deserialize_VkPerformanceConfigurationINTEL(data_json["members"]["pConfiguration"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkAcquirePerformanceConfigurationINTEL)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkAcquirePerformanceConfigurationINTEL");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkAcquirePerformanceConfigurationINTEL)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkAcquirePerformanceConfigurationINTEL");
    }  
    
auto return_value=call_function(device, pAcquireInfo, pConfiguration);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_jlqbRlk=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pAcquireInfo"]=[&]() {
    json return_gJOhvLs=json({});
    
        if (pAcquireInfo==NULL){
            return_gJOhvLs["null"]=true;
            return return_gJOhvLs;
        }
        return_gJOhvLs=[&]() {
    json return_GRhiEBK=json({});
    return serialize_VkPerformanceConfigurationAcquireInfoINTEL(*pAcquireInfo);}();
return return_gJOhvLs;}();
result["members"]["pConfiguration"]=[&]() {
    json return_zYnksFs=json({});
    
        if (pConfiguration==NULL){
            return_zYnksFs["null"]=true;
            return return_zYnksFs;
        }
        return_zYnksFs=[&]() {
    json return_UNGoqvL=json({});
    return serialize_VkPerformanceConfigurationINTEL(*pConfiguration);}();
return return_zYnksFs;}();

        writeToConn(result);
    }

    void handle_vkReleasePerformanceConfigurationINTEL(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkPerformanceConfigurationINTEL configuration
        ;
[&]() {
configuration=deserialize_VkPerformanceConfigurationINTEL(data_json["members"]["configuration"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkReleasePerformanceConfigurationINTEL)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkReleasePerformanceConfigurationINTEL");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkReleasePerformanceConfigurationINTEL)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkReleasePerformanceConfigurationINTEL");
    }  
    
auto return_value=call_function(device, configuration);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_KGafawm=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["configuration"]=[&]() {
    json return_swIsNOn=json({});
    return serialize_VkPerformanceConfigurationINTEL(configuration);}();

        writeToConn(result);
    }

    void handle_vkQueueSetPerformanceConfigurationINTEL(json data_json){
    //Will only be called by the server
    
VkQueue queue
            ;
[&]() {
queue=deserialize_VkQueue(data_json["members"]["queue"]);}();
VkPerformanceConfigurationINTEL configuration
        ;
[&]() {
configuration=deserialize_VkPerformanceConfigurationINTEL(data_json["members"]["configuration"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkQueueSetPerformanceConfigurationINTEL)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkQueueSetPerformanceConfigurationINTEL");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkQueueSetPerformanceConfigurationINTEL)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkQueueSetPerformanceConfigurationINTEL");
    }  
    
auto return_value=call_function(queue, configuration);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_MEmfAwM=json({});
    return serialize_VkResult(return_value);}();
result["members"]["queue"]=[&]() {
    json return_KYhcIBS=json({});
    return serialize_VkQueue(queue);}();
result["members"]["configuration"]=[&]() {
    json return_swIsNOn=json({});
    return serialize_VkPerformanceConfigurationINTEL(configuration);}();

        writeToConn(result);
    }

    void handle_vkGetPerformanceParameterINTEL(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkPerformanceParameterTypeINTEL parameter
            ;
[&]() {
parameter=deserialize_VkPerformanceParameterTypeINTEL(data_json["members"]["parameter"]);}();
VkPerformanceValueINTEL* pValue
        ;
[&]() {

        if (data_json["members"]["pValue"].contains("null")){
        pValue=NULL;
        return;
        }
    pValue=(VkPerformanceValueINTEL*)malloc(sizeof(VkPerformanceValueINTEL));
[&]() {
*(pValue)=deserialize_VkPerformanceValueINTEL(data_json["members"]["pValue"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPerformanceParameterINTEL)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPerformanceParameterINTEL");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPerformanceParameterINTEL)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPerformanceParameterINTEL");
    }  
    
auto return_value=call_function(device, parameter, pValue);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_rclOchN=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["parameter"]=[&]() {
    json return_LpjyNtP=json({});
    return serialize_VkPerformanceParameterTypeINTEL(parameter);}();
result["members"]["pValue"]=[&]() {
    json return_qndEXiC=json({});
    
        if (pValue==NULL){
            return_qndEXiC["null"]=true;
            return return_qndEXiC;
        }
        return_qndEXiC=[&]() {
    json return_GDYyVfl=json({});
    return serialize_VkPerformanceValueINTEL(*pValue);}();
return return_qndEXiC;}();

        writeToConn(result);
    }

    void handle_vkGetDeviceMemoryOpaqueCaptureAddress(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo
        ;
[&]() {
VkDeviceMemoryOpaqueCaptureAddressInfo* temp_MxeEOZJ;[&]() {

        if (data_json["members"]["pInfo"].contains("null")){
        temp_MxeEOZJ=NULL;
        return;
        }
    temp_MxeEOZJ=(VkDeviceMemoryOpaqueCaptureAddressInfo*)malloc(sizeof(VkDeviceMemoryOpaqueCaptureAddressInfo));
[&]() {
*(temp_MxeEOZJ)=deserialize_VkDeviceMemoryOpaqueCaptureAddressInfo(data_json["members"]["pInfo"]);}();
}();pInfo=temp_MxeEOZJ;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetDeviceMemoryOpaqueCaptureAddress)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDeviceMemoryOpaqueCaptureAddress");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetDeviceMemoryOpaqueCaptureAddress)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDeviceMemoryOpaqueCaptureAddress");
    }  
    
auto return_value=call_function(device, pInfo);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_RwzNPDB=json({});
    return serialize_uint64_t(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pInfo"]=[&]() {
    json return_VEmTKsL=json({});
    
        if (pInfo==NULL){
            return_VEmTKsL["null"]=true;
            return return_VEmTKsL;
        }
        return_VEmTKsL=[&]() {
    json return_iErkadK=json({});
    return serialize_VkDeviceMemoryOpaqueCaptureAddressInfo(*pInfo);}();
return return_VEmTKsL;}();

        writeToConn(result);
    }

    void handle_vkGetDeviceMemoryOpaqueCaptureAddressKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo
        ;
[&]() {
VkDeviceMemoryOpaqueCaptureAddressInfo* temp_MxeEOZJ;[&]() {

        if (data_json["members"]["pInfo"].contains("null")){
        temp_MxeEOZJ=NULL;
        return;
        }
    temp_MxeEOZJ=(VkDeviceMemoryOpaqueCaptureAddressInfo*)malloc(sizeof(VkDeviceMemoryOpaqueCaptureAddressInfo));
[&]() {
*(temp_MxeEOZJ)=deserialize_VkDeviceMemoryOpaqueCaptureAddressInfo(data_json["members"]["pInfo"]);}();
}();pInfo=temp_MxeEOZJ;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDeviceMemoryOpaqueCaptureAddressKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDeviceMemoryOpaqueCaptureAddressKHR");
    }  
    
auto return_value=call_function(device, pInfo);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_kcuUpLm=json({});
    return serialize_uint64_t(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pInfo"]=[&]() {
    json return_VEmTKsL=json({});
    
        if (pInfo==NULL){
            return_VEmTKsL["null"]=true;
            return return_VEmTKsL;
        }
        return_VEmTKsL=[&]() {
    json return_iErkadK=json({});
    return serialize_VkDeviceMemoryOpaqueCaptureAddressInfo(*pInfo);}();
return return_VEmTKsL;}();

        writeToConn(result);
    }

    void handle_vkGetPipelineExecutablePropertiesKHR(json data_json){
    //Will only be called by the server
    
VkDevice                        device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkPipelineInfoKHR*        pPipelineInfo
            ;
[&]() {
VkPipelineInfoKHR* temp_kZvXFgk;[&]() {

        if (data_json["members"]["pPipelineInfo"].contains("null")){
        temp_kZvXFgk=NULL;
        return;
        }
    temp_kZvXFgk=(VkPipelineInfoKHR*)malloc(sizeof(VkPipelineInfoKHR));
[&]() {
*(temp_kZvXFgk)=deserialize_VkPipelineInfoKHR(data_json["members"]["pPipelineInfo"]);}();
}();pPipelineInfo=temp_kZvXFgk;}();
uint32_t* pExecutableCount
            ;
[&]() {

        if (data_json["members"]["pExecutableCount"].contains("null")){
        pExecutableCount=NULL;
        return;
        }
    pExecutableCount=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pExecutableCount)=deserialize_uint32_t(data_json["members"]["pExecutableCount"]);}();
}();
VkPipelineExecutablePropertiesKHR* pProperties
        ;
[&]() {

        if (data_json["members"]["pProperties"].contains("null")){
        pProperties=NULL;
        return;
        }
    pProperties=(VkPipelineExecutablePropertiesKHR*)malloc(*pExecutableCount*sizeof(VkPipelineExecutablePropertiesKHR));
        for (int SQlJMLs=0; SQlJMLs < *pExecutableCount; SQlJMLs++){
            [&]() {
pProperties[SQlJMLs]=deserialize_VkPipelineExecutablePropertiesKHR(data_json["members"]["pProperties"]["members"][SQlJMLs]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPipelineExecutablePropertiesKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPipelineExecutablePropertiesKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPipelineExecutablePropertiesKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPipelineExecutablePropertiesKHR");
    }  
    
auto return_value=call_function(device, pPipelineInfo, pExecutableCount, pProperties);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_xdsSeGA=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_gfYkxqS=json({});
    return serialize_VkDevice(device);}();
result["members"]["pPipelineInfo"]=[&]() {
    json return_HwyBGwa=json({});
    
        if (pPipelineInfo==NULL){
            return_HwyBGwa["null"]=true;
            return return_HwyBGwa;
        }
        return_HwyBGwa=[&]() {
    json return_TLfnwTW=json({});
    return serialize_VkPipelineInfoKHR(*pPipelineInfo);}();
return return_HwyBGwa;}();
result["members"]["pExecutableCount"]=[&]() {
    json return_LkLaFMy=json({});
    
        if (pExecutableCount==NULL){
            return_LkLaFMy["null"]=true;
            return return_LkLaFMy;
        }
        return_LkLaFMy=[&]() {
    json return_QiRcvmU=json({});
    return serialize_uint32_t(*pExecutableCount);}();
return return_LkLaFMy;}();
result["members"]["pProperties"]=[&]() {
    json return_MfBMWZU=json({});
    
        if (pProperties==NULL){
            return_MfBMWZU["null"]=true;
            return return_MfBMWZU;
        }
        
        return_MfBMWZU["members"]={};
        for(int MfBMWZU=0; MfBMWZU < *pExecutableCount; MfBMWZU++){
            json temp;
            temp=[&]() {
    json return_qZWFlaZ=json({});
    return serialize_VkPipelineExecutablePropertiesKHR(pProperties[MfBMWZU]);}();
            return_MfBMWZU["members"].push_back(temp);
        }
        return return_MfBMWZU;
        }();

        writeToConn(result);
    }

    void handle_vkGetPipelineExecutableStatisticsKHR(json data_json){
    //Will only be called by the server
    
VkDevice                        device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkPipelineExecutableInfoKHR*  pExecutableInfo
            ;
[&]() {
VkPipelineExecutableInfoKHR* temp_PbQSMej;[&]() {

        if (data_json["members"]["pExecutableInfo"].contains("null")){
        temp_PbQSMej=NULL;
        return;
        }
    temp_PbQSMej=(VkPipelineExecutableInfoKHR*)malloc(sizeof(VkPipelineExecutableInfoKHR));
[&]() {
*(temp_PbQSMej)=deserialize_VkPipelineExecutableInfoKHR(data_json["members"]["pExecutableInfo"]);}();
}();pExecutableInfo=temp_PbQSMej;}();
uint32_t* pStatisticCount
            ;
[&]() {

        if (data_json["members"]["pStatisticCount"].contains("null")){
        pStatisticCount=NULL;
        return;
        }
    pStatisticCount=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pStatisticCount)=deserialize_uint32_t(data_json["members"]["pStatisticCount"]);}();
}();
VkPipelineExecutableStatisticKHR* pStatistics
        ;
[&]() {

        if (data_json["members"]["pStatistics"].contains("null")){
        pStatistics=NULL;
        return;
        }
    pStatistics=(VkPipelineExecutableStatisticKHR*)malloc(*pStatisticCount*sizeof(VkPipelineExecutableStatisticKHR));
        for (int cVcJlLP=0; cVcJlLP < *pStatisticCount; cVcJlLP++){
            [&]() {
pStatistics[cVcJlLP]=deserialize_VkPipelineExecutableStatisticKHR(data_json["members"]["pStatistics"]["members"][cVcJlLP]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPipelineExecutableStatisticsKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPipelineExecutableStatisticsKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPipelineExecutableStatisticsKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPipelineExecutableStatisticsKHR");
    }  
    
auto return_value=call_function(device, pExecutableInfo, pStatisticCount, pStatistics);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_IDohYwO=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_gfYkxqS=json({});
    return serialize_VkDevice(device);}();
result["members"]["pExecutableInfo"]=[&]() {
    json return_tEKaePe=json({});
    
        if (pExecutableInfo==NULL){
            return_tEKaePe["null"]=true;
            return return_tEKaePe;
        }
        return_tEKaePe=[&]() {
    json return_FTuApiV=json({});
    return serialize_VkPipelineExecutableInfoKHR(*pExecutableInfo);}();
return return_tEKaePe;}();
result["members"]["pStatisticCount"]=[&]() {
    json return_VzPQOCh=json({});
    
        if (pStatisticCount==NULL){
            return_VzPQOCh["null"]=true;
            return return_VzPQOCh;
        }
        return_VzPQOCh=[&]() {
    json return_BZTRrPz=json({});
    return serialize_uint32_t(*pStatisticCount);}();
return return_VzPQOCh;}();
result["members"]["pStatistics"]=[&]() {
    json return_PgeZbCC=json({});
    
        if (pStatistics==NULL){
            return_PgeZbCC["null"]=true;
            return return_PgeZbCC;
        }
        
        return_PgeZbCC["members"]={};
        for(int PgeZbCC=0; PgeZbCC < *pStatisticCount; PgeZbCC++){
            json temp;
            temp=[&]() {
    json return_QdNNlyg=json({});
    return serialize_VkPipelineExecutableStatisticKHR(pStatistics[PgeZbCC]);}();
            return_PgeZbCC["members"].push_back(temp);
        }
        return return_PgeZbCC;
        }();

        writeToConn(result);
    }

    void handle_vkGetPipelineExecutableInternalRepresentationsKHR(json data_json){
    //Will only be called by the server
    
VkDevice                        device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkPipelineExecutableInfoKHR*  pExecutableInfo
            ;
[&]() {
VkPipelineExecutableInfoKHR* temp_PbQSMej;[&]() {

        if (data_json["members"]["pExecutableInfo"].contains("null")){
        temp_PbQSMej=NULL;
        return;
        }
    temp_PbQSMej=(VkPipelineExecutableInfoKHR*)malloc(sizeof(VkPipelineExecutableInfoKHR));
[&]() {
*(temp_PbQSMej)=deserialize_VkPipelineExecutableInfoKHR(data_json["members"]["pExecutableInfo"]);}();
}();pExecutableInfo=temp_PbQSMej;}();
uint32_t* pInternalRepresentationCount
            ;
[&]() {

        if (data_json["members"]["pInternalRepresentationCount"].contains("null")){
        pInternalRepresentationCount=NULL;
        return;
        }
    pInternalRepresentationCount=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pInternalRepresentationCount)=deserialize_uint32_t(data_json["members"]["pInternalRepresentationCount"]);}();
}();
VkPipelineExecutableInternalRepresentationKHR* pInternalRepresentations
        ;
[&]() {

        if (data_json["members"]["pInternalRepresentations"].contains("null")){
        pInternalRepresentations=NULL;
        return;
        }
    pInternalRepresentations=(VkPipelineExecutableInternalRepresentationKHR*)malloc(*pInternalRepresentationCount*sizeof(VkPipelineExecutableInternalRepresentationKHR));
        for (int SUWOXxY=0; SUWOXxY < *pInternalRepresentationCount; SUWOXxY++){
            [&]() {
pInternalRepresentations[SUWOXxY]=deserialize_VkPipelineExecutableInternalRepresentationKHR(data_json["members"]["pInternalRepresentations"]["members"][SUWOXxY]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPipelineExecutableInternalRepresentationsKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPipelineExecutableInternalRepresentationsKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPipelineExecutableInternalRepresentationsKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPipelineExecutableInternalRepresentationsKHR");
    }  
    
auto return_value=call_function(device, pExecutableInfo, pInternalRepresentationCount, pInternalRepresentations);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_edaTtdN=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_gfYkxqS=json({});
    return serialize_VkDevice(device);}();
result["members"]["pExecutableInfo"]=[&]() {
    json return_tEKaePe=json({});
    
        if (pExecutableInfo==NULL){
            return_tEKaePe["null"]=true;
            return return_tEKaePe;
        }
        return_tEKaePe=[&]() {
    json return_FTuApiV=json({});
    return serialize_VkPipelineExecutableInfoKHR(*pExecutableInfo);}();
return return_tEKaePe;}();
result["members"]["pInternalRepresentationCount"]=[&]() {
    json return_bDuryxI=json({});
    
        if (pInternalRepresentationCount==NULL){
            return_bDuryxI["null"]=true;
            return return_bDuryxI;
        }
        return_bDuryxI=[&]() {
    json return_ITcWWaQ=json({});
    return serialize_uint32_t(*pInternalRepresentationCount);}();
return return_bDuryxI;}();
result["members"]["pInternalRepresentations"]=[&]() {
    json return_SLcxFBK=json({});
    
        if (pInternalRepresentations==NULL){
            return_SLcxFBK["null"]=true;
            return return_SLcxFBK;
        }
        
        return_SLcxFBK["members"]={};
        for(int SLcxFBK=0; SLcxFBK < *pInternalRepresentationCount; SLcxFBK++){
            json temp;
            temp=[&]() {
    json return_cNvmAUw=json({});
    return serialize_VkPipelineExecutableInternalRepresentationKHR(pInternalRepresentations[SLcxFBK]);}();
            return_SLcxFBK["members"].push_back(temp);
        }
        return return_SLcxFBK;
        }();

        writeToConn(result);
    }

    void handle_vkCmdSetLineStippleEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t lineStippleFactor
            ;
[&]() {
lineStippleFactor=deserialize_uint32_t(data_json["members"]["lineStippleFactor"]);}();
uint16_t lineStipplePattern
        ;
[&]() {
lineStipplePattern=deserialize_uint16_t(data_json["members"]["lineStipplePattern"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetLineStippleEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetLineStippleEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetLineStippleEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetLineStippleEXT");
    }  
    
call_function(commandBuffer, lineStippleFactor, lineStipplePattern);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["lineStippleFactor"]=[&]() {
    json return_fFBaCJi=json({});
    return serialize_uint32_t(lineStippleFactor);}();
result["members"]["lineStipplePattern"]=[&]() {
    json return_ssNNuVt=json({});
    return serialize_uint16_t(lineStipplePattern);}();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceToolProperties(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
uint32_t* pToolCount
            ;
[&]() {

        if (data_json["members"]["pToolCount"].contains("null")){
        pToolCount=NULL;
        return;
        }
    pToolCount=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pToolCount)=deserialize_uint32_t(data_json["members"]["pToolCount"]);}();
}();
VkPhysicalDeviceToolProperties* pToolProperties
        ;
[&]() {

        if (data_json["members"]["pToolProperties"].contains("null")){
        pToolProperties=NULL;
        return;
        }
    pToolProperties=(VkPhysicalDeviceToolProperties*)malloc(*pToolCount*sizeof(VkPhysicalDeviceToolProperties));
        for (int xsoSeNS=0; xsoSeNS < *pToolCount; xsoSeNS++){
            [&]() {
pToolProperties[xsoSeNS]=deserialize_VkPhysicalDeviceToolProperties(data_json["members"]["pToolProperties"]["members"][xsoSeNS]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceToolProperties)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceToolProperties");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceToolProperties)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceToolProperties");
    }  
    
auto return_value=call_function(physicalDevice, pToolCount, pToolProperties);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_JDdrgkO=json({});
    return serialize_VkResult(return_value);}();
result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["pToolCount"]=[&]() {
    json return_FgrrCOe=json({});
    
        if (pToolCount==NULL){
            return_FgrrCOe["null"]=true;
            return return_FgrrCOe;
        }
        return_FgrrCOe=[&]() {
    json return_ScTAvyk=json({});
    return serialize_uint32_t(*pToolCount);}();
return return_FgrrCOe;}();
result["members"]["pToolProperties"]=[&]() {
    json return_MwoqEkr=json({});
    
        if (pToolProperties==NULL){
            return_MwoqEkr["null"]=true;
            return return_MwoqEkr;
        }
        
        return_MwoqEkr["members"]={};
        for(int MwoqEkr=0; MwoqEkr < *pToolCount; MwoqEkr++){
            json temp;
            temp=[&]() {
    json return_ezdcFdP=json({});
    return serialize_VkPhysicalDeviceToolProperties(pToolProperties[MwoqEkr]);}();
            return_MwoqEkr["members"].push_back(temp);
        }
        return return_MwoqEkr;
        }();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceToolPropertiesEXT(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
uint32_t* pToolCount
            ;
[&]() {

        if (data_json["members"]["pToolCount"].contains("null")){
        pToolCount=NULL;
        return;
        }
    pToolCount=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pToolCount)=deserialize_uint32_t(data_json["members"]["pToolCount"]);}();
}();
VkPhysicalDeviceToolProperties* pToolProperties
        ;
[&]() {

        if (data_json["members"]["pToolProperties"].contains("null")){
        pToolProperties=NULL;
        return;
        }
    pToolProperties=(VkPhysicalDeviceToolProperties*)malloc(*pToolCount*sizeof(VkPhysicalDeviceToolProperties));
        for (int xsoSeNS=0; xsoSeNS < *pToolCount; xsoSeNS++){
            [&]() {
pToolProperties[xsoSeNS]=deserialize_VkPhysicalDeviceToolProperties(data_json["members"]["pToolProperties"]["members"][xsoSeNS]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceToolPropertiesEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceToolPropertiesEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceToolPropertiesEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceToolPropertiesEXT");
    }  
    
auto return_value=call_function(physicalDevice, pToolCount, pToolProperties);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_ObnmuCa=json({});
    return serialize_VkResult(return_value);}();
result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["pToolCount"]=[&]() {
    json return_FgrrCOe=json({});
    
        if (pToolCount==NULL){
            return_FgrrCOe["null"]=true;
            return return_FgrrCOe;
        }
        return_FgrrCOe=[&]() {
    json return_ScTAvyk=json({});
    return serialize_uint32_t(*pToolCount);}();
return return_FgrrCOe;}();
result["members"]["pToolProperties"]=[&]() {
    json return_MwoqEkr=json({});
    
        if (pToolProperties==NULL){
            return_MwoqEkr["null"]=true;
            return return_MwoqEkr;
        }
        
        return_MwoqEkr["members"]={};
        for(int MwoqEkr=0; MwoqEkr < *pToolCount; MwoqEkr++){
            json temp;
            temp=[&]() {
    json return_ezdcFdP=json({});
    return serialize_VkPhysicalDeviceToolProperties(pToolProperties[MwoqEkr]);}();
            return_MwoqEkr["members"].push_back(temp);
        }
        return return_MwoqEkr;
        }();

        writeToConn(result);
    }

    void handle_vkCreateAccelerationStructureKHR(json data_json){
    //Will only be called by the server
    
VkDevice                                           device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkAccelerationStructureCreateInfoKHR*        pCreateInfo
            ;
[&]() {
VkAccelerationStructureCreateInfoKHR* temp_HjYqmoY;[&]() {

        if (data_json["members"]["pCreateInfo"].contains("null")){
        temp_HjYqmoY=NULL;
        return;
        }
    temp_HjYqmoY=(VkAccelerationStructureCreateInfoKHR*)malloc(sizeof(VkAccelerationStructureCreateInfoKHR));
[&]() {
*(temp_HjYqmoY)=deserialize_VkAccelerationStructureCreateInfoKHR(data_json["members"]["pCreateInfo"]);}();
}();pCreateInfo=temp_HjYqmoY;}();
VkAllocationCallbacks*       pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_dbwOdKg;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_dbwOdKg=NULL;
        return;
        }
    temp_dbwOdKg=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_dbwOdKg)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_dbwOdKg;}();
VkAccelerationStructureKHR*                        pAccelerationStructure
        ;
[&]() {

        if (data_json["members"]["pAccelerationStructure"].contains("null")){
        pAccelerationStructure=NULL;
        return;
        }
    pAccelerationStructure=(VkAccelerationStructureKHR*)malloc(sizeof(VkAccelerationStructureKHR));
[&]() {
*(pAccelerationStructure)=deserialize_VkAccelerationStructureKHR(data_json["members"]["pAccelerationStructure"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreateAccelerationStructureKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateAccelerationStructureKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreateAccelerationStructureKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateAccelerationStructureKHR");
    }  
    
auto return_value=call_function(device, pCreateInfo, pAllocator, pAccelerationStructure);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_SmprBRP=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_fUuTEWM=json({});
    return serialize_VkDevice(device);}();
result["members"]["pCreateInfo"]=[&]() {
    json return_iJQlCga=json({});
    
        if (pCreateInfo==NULL){
            return_iJQlCga["null"]=true;
            return return_iJQlCga;
        }
        return_iJQlCga=[&]() {
    json return_ibEtlkn=json({});
    return serialize_VkAccelerationStructureCreateInfoKHR(*pCreateInfo);}();
return return_iJQlCga;}();
result["members"]["pAllocator"]=[&]() {
    json return_sNVoEUY=json({});
    
        if (pAllocator==NULL){
            return_sNVoEUY["null"]=true;
            return return_sNVoEUY;
        }
        return_sNVoEUY=[&]() {
    json return_rkNRtqM=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_sNVoEUY;}();
result["members"]["pAccelerationStructure"]=[&]() {
    json return_MTkmBUe=json({});
    
        if (pAccelerationStructure==NULL){
            return_MTkmBUe["null"]=true;
            return return_MTkmBUe;
        }
        return_MTkmBUe=[&]() {
    json return_GaYJnPv=json({});
    return serialize_VkAccelerationStructureKHR(*pAccelerationStructure);}();
return return_MTkmBUe;}();

        writeToConn(result);
    }

    void handle_vkCmdBuildAccelerationStructuresKHR(json data_json){
    //Will only be called by the server
    
VkCommandBuffer                                    commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t infoCount
            ;
[&]() {
infoCount=deserialize_uint32_t(data_json["members"]["infoCount"]);}();
VkAccelerationStructureBuildGeometryInfoKHR* pInfos
            ;
[&]() {
VkAccelerationStructureBuildGeometryInfoKHR* temp_gZRtqMX;[&]() {

        if (data_json["members"]["pInfos"].contains("null")){
        temp_gZRtqMX=NULL;
        return;
        }
    temp_gZRtqMX=(VkAccelerationStructureBuildGeometryInfoKHR*)malloc(infoCount*sizeof(VkAccelerationStructureBuildGeometryInfoKHR));
        for (int MOyRJLF=0; MOyRJLF < infoCount; MOyRJLF++){
            [&]() {
temp_gZRtqMX[MOyRJLF]=deserialize_VkAccelerationStructureBuildGeometryInfoKHR(data_json["members"]["pInfos"]["members"][MOyRJLF]);}();;
        }
        }();pInfos=temp_gZRtqMX;}();
VkAccelerationStructureBuildRangeInfoKHR* const* ppBuildRangeInfos
        ;
[&]() {
VkAccelerationStructureBuildRangeInfoKHR** temp_yYbPZmS;[&]() {

        if (data_json["members"]["ppBuildRangeInfos"].contains("null")){
        temp_yYbPZmS=NULL;
        return;
        }
    temp_yYbPZmS=(VkAccelerationStructureBuildRangeInfoKHR**)malloc(infoCount*sizeof(VkAccelerationStructureBuildRangeInfoKHR*));
        for (int fyKrGWs=0; fyKrGWs < infoCount; fyKrGWs++){
            [&]() {

        if (data_json["members"]["ppBuildRangeInfos"]["members"][fyKrGWs].contains("null")){
        temp_yYbPZmS[fyKrGWs]=NULL;
        return;
        }
    temp_yYbPZmS[fyKrGWs]=(VkAccelerationStructureBuildRangeInfoKHR*)malloc(sizeof(VkAccelerationStructureBuildRangeInfoKHR));
[&]() {
*(temp_yYbPZmS[fyKrGWs])=deserialize_VkAccelerationStructureBuildRangeInfoKHR(data_json["members"]["ppBuildRangeInfos"]["members"][fyKrGWs]);}();
}();;
        }
        }();ppBuildRangeInfos=temp_yYbPZmS;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdBuildAccelerationStructuresKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBuildAccelerationStructuresKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdBuildAccelerationStructuresKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBuildAccelerationStructuresKHR");
    }  
    
call_function(commandBuffer, infoCount, pInfos, ppBuildRangeInfos);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_XLdGYWc=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["infoCount"]=[&]() {
    json return_Wujdqpv=json({});
    return serialize_uint32_t(infoCount);}();
result["members"]["pInfos"]=[&]() {
    json return_TTUtDcj=json({});
    
        if (pInfos==NULL){
            return_TTUtDcj["null"]=true;
            return return_TTUtDcj;
        }
        
        return_TTUtDcj["members"]={};
        for(int TTUtDcj=0; TTUtDcj < infoCount; TTUtDcj++){
            json temp;
            temp=[&]() {
    json return_iixjkyv=json({});
    return serialize_VkAccelerationStructureBuildGeometryInfoKHR(pInfos[TTUtDcj]);}();
            return_TTUtDcj["members"].push_back(temp);
        }
        return return_TTUtDcj;
        }();
result["members"]["ppBuildRangeInfos"]=[&]() {
    json return_FepwNEA=json({});
    
        if (ppBuildRangeInfos==NULL){
            return_FepwNEA["null"]=true;
            return return_FepwNEA;
        }
        
        return_FepwNEA["members"]={};
        for(int FepwNEA=0; FepwNEA < infoCount; FepwNEA++){
            json temp;
            temp=[&]() {
    json return_lHHXjZl=json({});
    
        if (ppBuildRangeInfos[FepwNEA]==NULL){
            return_lHHXjZl["null"]=true;
            return return_lHHXjZl;
        }
        return_lHHXjZl=[&]() {
    json return_HbGBIoh=json({});
    return serialize_VkAccelerationStructureBuildRangeInfoKHR(*ppBuildRangeInfos[FepwNEA]);}();
return return_lHHXjZl;}();
            return_FepwNEA["members"].push_back(temp);
        }
        return return_FepwNEA;
        }();

        writeToConn(result);
    }

    void handle_vkCmdBuildAccelerationStructuresIndirectKHR(json data_json){
    //Will only be called by the server
    
VkCommandBuffer                  commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t                                           infoCount
            ;
[&]() {
infoCount=deserialize_uint32_t(data_json["members"]["infoCount"]);}();
VkAccelerationStructureBuildGeometryInfoKHR* pInfos
            ;
[&]() {
VkAccelerationStructureBuildGeometryInfoKHR* temp_gZRtqMX;[&]() {

        if (data_json["members"]["pInfos"].contains("null")){
        temp_gZRtqMX=NULL;
        return;
        }
    temp_gZRtqMX=(VkAccelerationStructureBuildGeometryInfoKHR*)malloc(infoCount*sizeof(VkAccelerationStructureBuildGeometryInfoKHR));
        for (int MOyRJLF=0; MOyRJLF < infoCount; MOyRJLF++){
            [&]() {
temp_gZRtqMX[MOyRJLF]=deserialize_VkAccelerationStructureBuildGeometryInfoKHR(data_json["members"]["pInfos"]["members"][MOyRJLF]);}();;
        }
        }();pInfos=temp_gZRtqMX;}();
VkDeviceAddress*             pIndirectDeviceAddresses
            ;
[&]() {
VkDeviceAddress* temp_mFFaCZR;[&]() {

        if (data_json["members"]["pIndirectDeviceAddresses"].contains("null")){
        temp_mFFaCZR=NULL;
        return;
        }
    [&]() {

        if (data_json["members"]["pIndirectDeviceAddresses"].contains("null")){
        temp_mFFaCZR=NULL;
        return;
        }
    temp_mFFaCZR=(uint64_t*)malloc(infoCount*sizeof(uint64_t));
        for (int ddfjzMf=0; ddfjzMf < infoCount; ddfjzMf++){
            [&]() {
temp_mFFaCZR[ddfjzMf]=deserialize_uint64_t(data_json["members"]["pIndirectDeviceAddresses"]["members"][ddfjzMf]);}();;
        }
        }();}();pIndirectDeviceAddresses=temp_mFFaCZR;}();
uint32_t*                    pIndirectStrides
            ;
[&]() {
uint32_t* temp_msUQJlI;[&]() {

        if (data_json["members"]["pIndirectStrides"].contains("null")){
        temp_msUQJlI=NULL;
        return;
        }
    temp_msUQJlI=(uint32_t*)malloc(infoCount*sizeof(uint32_t));
        for (int NKhpvrG=0; NKhpvrG < infoCount; NKhpvrG++){
            [&]() {
temp_msUQJlI[NKhpvrG]=deserialize_uint32_t(data_json["members"]["pIndirectStrides"]["members"][NKhpvrG]);}();;
        }
        }();pIndirectStrides=temp_msUQJlI;}();
uint32_t* const*             ppMaxPrimitiveCounts
        ;
[&]() {
uint32_t** temp_topQuBu;[&]() {

        if (data_json["members"]["ppMaxPrimitiveCounts"].contains("null")){
        temp_topQuBu=NULL;
        return;
        }
    temp_topQuBu=(uint32_t**)malloc(infoCount*sizeof(uint32_t*));
        for (int bYkzSld=0; bYkzSld < infoCount; bYkzSld++){
            [&]() {

        if (data_json["members"]["ppMaxPrimitiveCounts"]["members"][bYkzSld].contains("null")){
        temp_topQuBu[bYkzSld]=NULL;
        return;
        }
    temp_topQuBu[bYkzSld]=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(temp_topQuBu[bYkzSld])=deserialize_uint32_t(data_json["members"]["ppMaxPrimitiveCounts"]["members"][bYkzSld]);}();
}();;
        }
        }();ppMaxPrimitiveCounts=temp_topQuBu;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdBuildAccelerationStructuresIndirectKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBuildAccelerationStructuresIndirectKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdBuildAccelerationStructuresIndirectKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBuildAccelerationStructuresIndirectKHR");
    }  
    
call_function(commandBuffer, infoCount, pInfos, pIndirectDeviceAddresses, pIndirectStrides, ppMaxPrimitiveCounts);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_bKSpebt=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["infoCount"]=[&]() {
    json return_OOnmQvH=json({});
    return serialize_uint32_t(infoCount);}();
result["members"]["pInfos"]=[&]() {
    json return_TTUtDcj=json({});
    
        if (pInfos==NULL){
            return_TTUtDcj["null"]=true;
            return return_TTUtDcj;
        }
        
        return_TTUtDcj["members"]={};
        for(int TTUtDcj=0; TTUtDcj < infoCount; TTUtDcj++){
            json temp;
            temp=[&]() {
    json return_iixjkyv=json({});
    return serialize_VkAccelerationStructureBuildGeometryInfoKHR(pInfos[TTUtDcj]);}();
            return_TTUtDcj["members"].push_back(temp);
        }
        return return_TTUtDcj;
        }();
result["members"]["pIndirectDeviceAddresses"]=[&]() {
    json return_OwZsgZX=json({});
    
        if (pIndirectDeviceAddresses==NULL){
            return_OwZsgZX["null"]=true;
            return return_OwZsgZX;
        }
        
        return_OwZsgZX["members"]={};
        for(int OwZsgZX=0; OwZsgZX < infoCount; OwZsgZX++){
            json temp;
            temp=[&]() {
    json return_LCMPzwg=json({});
    return_LCMPzwg=[&]() {
    json return_jkfWtoI=json({});
    return serialize_uint64_t(pIndirectDeviceAddresses[OwZsgZX]);}();return return_LCMPzwg;}();
            return_OwZsgZX["members"].push_back(temp);
        }
        return return_OwZsgZX;
        }();
result["members"]["pIndirectStrides"]=[&]() {
    json return_mFMuFEu=json({});
    
        if (pIndirectStrides==NULL){
            return_mFMuFEu["null"]=true;
            return return_mFMuFEu;
        }
        
        return_mFMuFEu["members"]={};
        for(int mFMuFEu=0; mFMuFEu < infoCount; mFMuFEu++){
            json temp;
            temp=[&]() {
    json return_KlNvzLe=json({});
    return serialize_uint32_t(pIndirectStrides[mFMuFEu]);}();
            return_mFMuFEu["members"].push_back(temp);
        }
        return return_mFMuFEu;
        }();
result["members"]["ppMaxPrimitiveCounts"]=[&]() {
    json return_bjTxLAj=json({});
    
        if (ppMaxPrimitiveCounts==NULL){
            return_bjTxLAj["null"]=true;
            return return_bjTxLAj;
        }
        
        return_bjTxLAj["members"]={};
        for(int bjTxLAj=0; bjTxLAj < infoCount; bjTxLAj++){
            json temp;
            temp=[&]() {
    json return_YCjurkR=json({});
    
        if (ppMaxPrimitiveCounts[bjTxLAj]==NULL){
            return_YCjurkR["null"]=true;
            return return_YCjurkR;
        }
        return_YCjurkR=[&]() {
    json return_wCwXUfM=json({});
    return serialize_uint32_t(*ppMaxPrimitiveCounts[bjTxLAj]);}();
return return_YCjurkR;}();
            return_bjTxLAj["members"].push_back(temp);
        }
        return return_bjTxLAj;
        }();

        writeToConn(result);
    }

    void handle_vkBuildAccelerationStructuresKHR(json data_json){
    //Will only be called by the server
    
VkDevice                                           device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDeferredOperationKHR deferredOperation
            ;
[&]() {
deferredOperation=deserialize_VkDeferredOperationKHR(data_json["members"]["deferredOperation"]);}();
uint32_t infoCount
            ;
[&]() {
infoCount=deserialize_uint32_t(data_json["members"]["infoCount"]);}();
VkAccelerationStructureBuildGeometryInfoKHR* pInfos
            ;
[&]() {
VkAccelerationStructureBuildGeometryInfoKHR* temp_gZRtqMX;[&]() {

        if (data_json["members"]["pInfos"].contains("null")){
        temp_gZRtqMX=NULL;
        return;
        }
    temp_gZRtqMX=(VkAccelerationStructureBuildGeometryInfoKHR*)malloc(infoCount*sizeof(VkAccelerationStructureBuildGeometryInfoKHR));
        for (int MOyRJLF=0; MOyRJLF < infoCount; MOyRJLF++){
            [&]() {
temp_gZRtqMX[MOyRJLF]=deserialize_VkAccelerationStructureBuildGeometryInfoKHR(data_json["members"]["pInfos"]["members"][MOyRJLF]);}();;
        }
        }();pInfos=temp_gZRtqMX;}();
VkAccelerationStructureBuildRangeInfoKHR* const* ppBuildRangeInfos
        ;
[&]() {
VkAccelerationStructureBuildRangeInfoKHR** temp_yYbPZmS;[&]() {

        if (data_json["members"]["ppBuildRangeInfos"].contains("null")){
        temp_yYbPZmS=NULL;
        return;
        }
    temp_yYbPZmS=(VkAccelerationStructureBuildRangeInfoKHR**)malloc(infoCount*sizeof(VkAccelerationStructureBuildRangeInfoKHR*));
        for (int fyKrGWs=0; fyKrGWs < infoCount; fyKrGWs++){
            [&]() {

        if (data_json["members"]["ppBuildRangeInfos"]["members"][fyKrGWs].contains("null")){
        temp_yYbPZmS[fyKrGWs]=NULL;
        return;
        }
    temp_yYbPZmS[fyKrGWs]=(VkAccelerationStructureBuildRangeInfoKHR*)malloc(sizeof(VkAccelerationStructureBuildRangeInfoKHR));
[&]() {
*(temp_yYbPZmS[fyKrGWs])=deserialize_VkAccelerationStructureBuildRangeInfoKHR(data_json["members"]["ppBuildRangeInfos"]["members"][fyKrGWs]);}();
}();;
        }
        }();ppBuildRangeInfos=temp_yYbPZmS;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkBuildAccelerationStructuresKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkBuildAccelerationStructuresKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkBuildAccelerationStructuresKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkBuildAccelerationStructuresKHR");
    }  
    
auto return_value=call_function(device, deferredOperation, infoCount, pInfos, ppBuildRangeInfos);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_CawdFwo=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_fUuTEWM=json({});
    return serialize_VkDevice(device);}();
result["members"]["deferredOperation"]=[&]() {
    json return_zJwBFEh=json({});
    return serialize_VkDeferredOperationKHR(deferredOperation);}();
result["members"]["infoCount"]=[&]() {
    json return_Wujdqpv=json({});
    return serialize_uint32_t(infoCount);}();
result["members"]["pInfos"]=[&]() {
    json return_TTUtDcj=json({});
    
        if (pInfos==NULL){
            return_TTUtDcj["null"]=true;
            return return_TTUtDcj;
        }
        
        return_TTUtDcj["members"]={};
        for(int TTUtDcj=0; TTUtDcj < infoCount; TTUtDcj++){
            json temp;
            temp=[&]() {
    json return_iixjkyv=json({});
    return serialize_VkAccelerationStructureBuildGeometryInfoKHR(pInfos[TTUtDcj]);}();
            return_TTUtDcj["members"].push_back(temp);
        }
        return return_TTUtDcj;
        }();
result["members"]["ppBuildRangeInfos"]=[&]() {
    json return_FepwNEA=json({});
    
        if (ppBuildRangeInfos==NULL){
            return_FepwNEA["null"]=true;
            return return_FepwNEA;
        }
        
        return_FepwNEA["members"]={};
        for(int FepwNEA=0; FepwNEA < infoCount; FepwNEA++){
            json temp;
            temp=[&]() {
    json return_lHHXjZl=json({});
    
        if (ppBuildRangeInfos[FepwNEA]==NULL){
            return_lHHXjZl["null"]=true;
            return return_lHHXjZl;
        }
        return_lHHXjZl=[&]() {
    json return_HbGBIoh=json({});
    return serialize_VkAccelerationStructureBuildRangeInfoKHR(*ppBuildRangeInfos[FepwNEA]);}();
return return_lHHXjZl;}();
            return_FepwNEA["members"].push_back(temp);
        }
        return return_FepwNEA;
        }();

        writeToConn(result);
    }

    void handle_vkGetAccelerationStructureDeviceAddressKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkAccelerationStructureDeviceAddressInfoKHR* pInfo
        ;
[&]() {
VkAccelerationStructureDeviceAddressInfoKHR* temp_vwLCYCI;[&]() {

        if (data_json["members"]["pInfo"].contains("null")){
        temp_vwLCYCI=NULL;
        return;
        }
    temp_vwLCYCI=(VkAccelerationStructureDeviceAddressInfoKHR*)malloc(sizeof(VkAccelerationStructureDeviceAddressInfoKHR));
[&]() {
*(temp_vwLCYCI)=deserialize_VkAccelerationStructureDeviceAddressInfoKHR(data_json["members"]["pInfo"]);}();
}();pInfo=temp_vwLCYCI;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetAccelerationStructureDeviceAddressKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetAccelerationStructureDeviceAddressKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetAccelerationStructureDeviceAddressKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetAccelerationStructureDeviceAddressKHR");
    }  
    
auto return_value=call_function(device, pInfo);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_GHlCHfw=json({});
    return_GHlCHfw=[&]() {
    json return_IOkmPTB=json({});
    return serialize_uint64_t(return_value);}();return return_GHlCHfw;}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pInfo"]=[&]() {
    json return_LRvGJOb=json({});
    
        if (pInfo==NULL){
            return_LRvGJOb["null"]=true;
            return return_LRvGJOb;
        }
        return_LRvGJOb=[&]() {
    json return_aosBGwy=json({});
    return serialize_VkAccelerationStructureDeviceAddressInfoKHR(*pInfo);}();
return return_LRvGJOb;}();

        writeToConn(result);
    }

    void handle_vkCreateDeferredOperationKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkDeferredOperationKHR* pDeferredOperation
        ;
[&]() {

        if (data_json["members"]["pDeferredOperation"].contains("null")){
        pDeferredOperation=NULL;
        return;
        }
    pDeferredOperation=(VkDeferredOperationKHR*)malloc(sizeof(VkDeferredOperationKHR));
[&]() {
*(pDeferredOperation)=deserialize_VkDeferredOperationKHR(data_json["members"]["pDeferredOperation"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreateDeferredOperationKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateDeferredOperationKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreateDeferredOperationKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateDeferredOperationKHR");
    }  
    
auto return_value=call_function(device, pAllocator, pDeferredOperation);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_SYojqod=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pDeferredOperation"]=[&]() {
    json return_CKyJuyJ=json({});
    
        if (pDeferredOperation==NULL){
            return_CKyJuyJ["null"]=true;
            return return_CKyJuyJ;
        }
        return_CKyJuyJ=[&]() {
    json return_LxYeBVp=json({});
    return serialize_VkDeferredOperationKHR(*pDeferredOperation);}();
return return_CKyJuyJ;}();

        writeToConn(result);
    }

    void handle_vkDestroyDeferredOperationKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDeferredOperationKHR operation
            ;
[&]() {
operation=deserialize_VkDeferredOperationKHR(data_json["members"]["operation"]);}();
VkAllocationCallbacks* pAllocator
        ;
[&]() {
VkAllocationCallbacks* temp_VAmhMvJ;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_VAmhMvJ=NULL;
        return;
        }
    temp_VAmhMvJ=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_VAmhMvJ)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_VAmhMvJ;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkDestroyDeferredOperationKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyDeferredOperationKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkDestroyDeferredOperationKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyDeferredOperationKHR");
    }  
    
call_function(device, operation, pAllocator);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["operation"]=[&]() {
    json return_LKUIfnC=json({});
    return serialize_VkDeferredOperationKHR(operation);}();
result["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();

        writeToConn(result);
    }

    void handle_vkGetDeferredOperationMaxConcurrencyKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDeferredOperationKHR operation
        ;
[&]() {
operation=deserialize_VkDeferredOperationKHR(data_json["members"]["operation"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetDeferredOperationMaxConcurrencyKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDeferredOperationMaxConcurrencyKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetDeferredOperationMaxConcurrencyKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDeferredOperationMaxConcurrencyKHR");
    }  
    
auto return_value=call_function(device, operation);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_HevBCyr=json({});
    return serialize_uint32_t(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["operation"]=[&]() {
    json return_PKjUYUb=json({});
    return serialize_VkDeferredOperationKHR(operation);}();

        writeToConn(result);
    }

    void handle_vkGetDeferredOperationResultKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDeferredOperationKHR operation
        ;
[&]() {
operation=deserialize_VkDeferredOperationKHR(data_json["members"]["operation"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetDeferredOperationResultKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDeferredOperationResultKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetDeferredOperationResultKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDeferredOperationResultKHR");
    }  
    
auto return_value=call_function(device, operation);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_ETrMWaL=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["operation"]=[&]() {
    json return_PKjUYUb=json({});
    return serialize_VkDeferredOperationKHR(operation);}();

        writeToConn(result);
    }

    void handle_vkDeferredOperationJoinKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDeferredOperationKHR operation
        ;
[&]() {
operation=deserialize_VkDeferredOperationKHR(data_json["members"]["operation"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkDeferredOperationJoinKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDeferredOperationJoinKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkDeferredOperationJoinKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDeferredOperationJoinKHR");
    }  
    
auto return_value=call_function(device, operation);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_WRSIFOW=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["operation"]=[&]() {
    json return_PKjUYUb=json({});
    return serialize_VkDeferredOperationKHR(operation);}();

        writeToConn(result);
    }

    void handle_vkGetPipelineIndirectMemoryRequirementsNV(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkComputePipelineCreateInfo* pCreateInfo
            ;
[&]() {
VkComputePipelineCreateInfo* temp_wFwnRYm;[&]() {

        if (data_json["members"]["pCreateInfo"].contains("null")){
        temp_wFwnRYm=NULL;
        return;
        }
    temp_wFwnRYm=(VkComputePipelineCreateInfo*)malloc(sizeof(VkComputePipelineCreateInfo));
[&]() {
*(temp_wFwnRYm)=deserialize_VkComputePipelineCreateInfo(data_json["members"]["pCreateInfo"]);}();
}();pCreateInfo=temp_wFwnRYm;}();
VkMemoryRequirements2* pMemoryRequirements
        ;
[&]() {

        if (data_json["members"]["pMemoryRequirements"].contains("null")){
        pMemoryRequirements=NULL;
        return;
        }
    pMemoryRequirements=(VkMemoryRequirements2*)malloc(sizeof(VkMemoryRequirements2));
[&]() {
*(pMemoryRequirements)=deserialize_VkMemoryRequirements2(data_json["members"]["pMemoryRequirements"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPipelineIndirectMemoryRequirementsNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPipelineIndirectMemoryRequirementsNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPipelineIndirectMemoryRequirementsNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPipelineIndirectMemoryRequirementsNV");
    }  
    
call_function(device, pCreateInfo, pMemoryRequirements);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pCreateInfo"]=[&]() {
    json return_IDIAeld=json({});
    
        if (pCreateInfo==NULL){
            return_IDIAeld["null"]=true;
            return return_IDIAeld;
        }
        return_IDIAeld=[&]() {
    json return_AuEVYwy=json({});
    return serialize_VkComputePipelineCreateInfo(*pCreateInfo);}();
return return_IDIAeld;}();
result["members"]["pMemoryRequirements"]=[&]() {
    json return_aEBODbS=json({});
    
        if (pMemoryRequirements==NULL){
            return_aEBODbS["null"]=true;
            return return_aEBODbS;
        }
        return_aEBODbS=[&]() {
    json return_hGmebmD=json({});
    return serialize_VkMemoryRequirements2(*pMemoryRequirements);}();
return return_aEBODbS;}();

        writeToConn(result);
    }

    void handle_vkGetPipelineIndirectDeviceAddressNV(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkPipelineIndirectDeviceAddressInfoNV* pInfo
        ;
[&]() {
VkPipelineIndirectDeviceAddressInfoNV* temp_PVvDOlB;[&]() {

        if (data_json["members"]["pInfo"].contains("null")){
        temp_PVvDOlB=NULL;
        return;
        }
    temp_PVvDOlB=(VkPipelineIndirectDeviceAddressInfoNV*)malloc(sizeof(VkPipelineIndirectDeviceAddressInfoNV));
[&]() {
*(temp_PVvDOlB)=deserialize_VkPipelineIndirectDeviceAddressInfoNV(data_json["members"]["pInfo"]);}();
}();pInfo=temp_PVvDOlB;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPipelineIndirectDeviceAddressNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPipelineIndirectDeviceAddressNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPipelineIndirectDeviceAddressNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPipelineIndirectDeviceAddressNV");
    }  
    
auto return_value=call_function(device, pInfo);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_IfUcZYI=json({});
    return_IfUcZYI=[&]() {
    json return_HUMlnms=json({});
    return serialize_uint64_t(return_value);}();return return_IfUcZYI;}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pInfo"]=[&]() {
    json return_lCiRNLA=json({});
    
        if (pInfo==NULL){
            return_lCiRNLA["null"]=true;
            return return_lCiRNLA;
        }
        return_lCiRNLA=[&]() {
    json return_kmdAoQQ=json({});
    return serialize_VkPipelineIndirectDeviceAddressInfoNV(*pInfo);}();
return return_lCiRNLA;}();

        writeToConn(result);
    }

    void handle_vkCmdSetCullMode(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkCullModeFlags cullMode
        ;
[&]() {
cullMode=deserialize_VkCullModeFlags(data_json["members"]["cullMode"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetCullMode)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetCullMode");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetCullMode)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetCullMode");
    }  
    
call_function(commandBuffer, cullMode);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["cullMode"]=[&]() {
    json return_dAeZuYI=json({});
    return serialize_VkCullModeFlags(cullMode);}();

        writeToConn(result);
    }

    void handle_vkCmdSetCullModeEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkCullModeFlags cullMode
        ;
[&]() {
cullMode=deserialize_VkCullModeFlags(data_json["members"]["cullMode"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetCullModeEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetCullModeEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetCullModeEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetCullModeEXT");
    }  
    
call_function(commandBuffer, cullMode);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["cullMode"]=[&]() {
    json return_dAeZuYI=json({});
    return serialize_VkCullModeFlags(cullMode);}();

        writeToConn(result);
    }

    void handle_vkCmdSetFrontFace(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkFrontFace frontFace
        ;
[&]() {
frontFace=deserialize_VkFrontFace(data_json["members"]["frontFace"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetFrontFace)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetFrontFace");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetFrontFace)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetFrontFace");
    }  
    
call_function(commandBuffer, frontFace);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["frontFace"]=[&]() {
    json return_UMqipcu=json({});
    return serialize_VkFrontFace(frontFace);}();

        writeToConn(result);
    }

    void handle_vkCmdSetFrontFaceEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkFrontFace frontFace
        ;
[&]() {
frontFace=deserialize_VkFrontFace(data_json["members"]["frontFace"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetFrontFaceEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetFrontFaceEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetFrontFaceEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetFrontFaceEXT");
    }  
    
call_function(commandBuffer, frontFace);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["frontFace"]=[&]() {
    json return_UMqipcu=json({});
    return serialize_VkFrontFace(frontFace);}();

        writeToConn(result);
    }

    void handle_vkCmdSetPrimitiveTopology(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkPrimitiveTopology primitiveTopology
        ;
[&]() {
primitiveTopology=deserialize_VkPrimitiveTopology(data_json["members"]["primitiveTopology"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetPrimitiveTopology)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetPrimitiveTopology");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetPrimitiveTopology)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetPrimitiveTopology");
    }  
    
call_function(commandBuffer, primitiveTopology);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["primitiveTopology"]=[&]() {
    json return_DubMBkq=json({});
    return serialize_VkPrimitiveTopology(primitiveTopology);}();

        writeToConn(result);
    }

    void handle_vkCmdSetPrimitiveTopologyEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkPrimitiveTopology primitiveTopology
        ;
[&]() {
primitiveTopology=deserialize_VkPrimitiveTopology(data_json["members"]["primitiveTopology"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetPrimitiveTopologyEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetPrimitiveTopologyEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetPrimitiveTopologyEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetPrimitiveTopologyEXT");
    }  
    
call_function(commandBuffer, primitiveTopology);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["primitiveTopology"]=[&]() {
    json return_DubMBkq=json({});
    return serialize_VkPrimitiveTopology(primitiveTopology);}();

        writeToConn(result);
    }

    void handle_vkCmdSetViewportWithCount(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t viewportCount
            ;
[&]() {
viewportCount=deserialize_uint32_t(data_json["members"]["viewportCount"]);}();
VkViewport* pViewports
        ;
[&]() {
VkViewport* temp_IJKezsu;[&]() {

        if (data_json["members"]["pViewports"].contains("null")){
        temp_IJKezsu=NULL;
        return;
        }
    temp_IJKezsu=(VkViewport*)malloc(viewportCount*sizeof(VkViewport));
        for (int GYeKiNp=0; GYeKiNp < viewportCount; GYeKiNp++){
            [&]() {
temp_IJKezsu[GYeKiNp]=deserialize_VkViewport(data_json["members"]["pViewports"]["members"][GYeKiNp]);}();;
        }
        }();pViewports=temp_IJKezsu;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetViewportWithCount)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetViewportWithCount");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetViewportWithCount)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetViewportWithCount");
    }  
    
call_function(commandBuffer, viewportCount, pViewports);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["viewportCount"]=[&]() {
    json return_pDFybJm=json({});
    return serialize_uint32_t(viewportCount);}();
result["members"]["pViewports"]=[&]() {
    json return_wNAxnoK=json({});
    
        if (pViewports==NULL){
            return_wNAxnoK["null"]=true;
            return return_wNAxnoK;
        }
        
        return_wNAxnoK["members"]={};
        for(int wNAxnoK=0; wNAxnoK < viewportCount; wNAxnoK++){
            json temp;
            temp=[&]() {
    json return_HSUHymr=json({});
    return serialize_VkViewport(pViewports[wNAxnoK]);}();
            return_wNAxnoK["members"].push_back(temp);
        }
        return return_wNAxnoK;
        }();

        writeToConn(result);
    }

    void handle_vkCmdSetViewportWithCountEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t viewportCount
            ;
[&]() {
viewportCount=deserialize_uint32_t(data_json["members"]["viewportCount"]);}();
VkViewport* pViewports
        ;
[&]() {
VkViewport* temp_IJKezsu;[&]() {

        if (data_json["members"]["pViewports"].contains("null")){
        temp_IJKezsu=NULL;
        return;
        }
    temp_IJKezsu=(VkViewport*)malloc(viewportCount*sizeof(VkViewport));
        for (int GYeKiNp=0; GYeKiNp < viewportCount; GYeKiNp++){
            [&]() {
temp_IJKezsu[GYeKiNp]=deserialize_VkViewport(data_json["members"]["pViewports"]["members"][GYeKiNp]);}();;
        }
        }();pViewports=temp_IJKezsu;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetViewportWithCountEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetViewportWithCountEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetViewportWithCountEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetViewportWithCountEXT");
    }  
    
call_function(commandBuffer, viewportCount, pViewports);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["viewportCount"]=[&]() {
    json return_pDFybJm=json({});
    return serialize_uint32_t(viewportCount);}();
result["members"]["pViewports"]=[&]() {
    json return_wNAxnoK=json({});
    
        if (pViewports==NULL){
            return_wNAxnoK["null"]=true;
            return return_wNAxnoK;
        }
        
        return_wNAxnoK["members"]={};
        for(int wNAxnoK=0; wNAxnoK < viewportCount; wNAxnoK++){
            json temp;
            temp=[&]() {
    json return_HSUHymr=json({});
    return serialize_VkViewport(pViewports[wNAxnoK]);}();
            return_wNAxnoK["members"].push_back(temp);
        }
        return return_wNAxnoK;
        }();

        writeToConn(result);
    }

    void handle_vkCmdSetScissorWithCount(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t scissorCount
            ;
[&]() {
scissorCount=deserialize_uint32_t(data_json["members"]["scissorCount"]);}();
VkRect2D* pScissors
        ;
[&]() {
VkRect2D* temp_AUGsNjr;[&]() {

        if (data_json["members"]["pScissors"].contains("null")){
        temp_AUGsNjr=NULL;
        return;
        }
    temp_AUGsNjr=(VkRect2D*)malloc(scissorCount*sizeof(VkRect2D));
        for (int ShmRGyZ=0; ShmRGyZ < scissorCount; ShmRGyZ++){
            [&]() {
temp_AUGsNjr[ShmRGyZ]=deserialize_VkRect2D(data_json["members"]["pScissors"]["members"][ShmRGyZ]);}();;
        }
        }();pScissors=temp_AUGsNjr;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetScissorWithCount)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetScissorWithCount");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetScissorWithCount)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetScissorWithCount");
    }  
    
call_function(commandBuffer, scissorCount, pScissors);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["scissorCount"]=[&]() {
    json return_aFbyEkl=json({});
    return serialize_uint32_t(scissorCount);}();
result["members"]["pScissors"]=[&]() {
    json return_HoUaZsF=json({});
    
        if (pScissors==NULL){
            return_HoUaZsF["null"]=true;
            return return_HoUaZsF;
        }
        
        return_HoUaZsF["members"]={};
        for(int HoUaZsF=0; HoUaZsF < scissorCount; HoUaZsF++){
            json temp;
            temp=[&]() {
    json return_fcbwury=json({});
    return serialize_VkRect2D(pScissors[HoUaZsF]);}();
            return_HoUaZsF["members"].push_back(temp);
        }
        return return_HoUaZsF;
        }();

        writeToConn(result);
    }

    void handle_vkCmdSetScissorWithCountEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t scissorCount
            ;
[&]() {
scissorCount=deserialize_uint32_t(data_json["members"]["scissorCount"]);}();
VkRect2D* pScissors
        ;
[&]() {
VkRect2D* temp_AUGsNjr;[&]() {

        if (data_json["members"]["pScissors"].contains("null")){
        temp_AUGsNjr=NULL;
        return;
        }
    temp_AUGsNjr=(VkRect2D*)malloc(scissorCount*sizeof(VkRect2D));
        for (int ShmRGyZ=0; ShmRGyZ < scissorCount; ShmRGyZ++){
            [&]() {
temp_AUGsNjr[ShmRGyZ]=deserialize_VkRect2D(data_json["members"]["pScissors"]["members"][ShmRGyZ]);}();;
        }
        }();pScissors=temp_AUGsNjr;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetScissorWithCountEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetScissorWithCountEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetScissorWithCountEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetScissorWithCountEXT");
    }  
    
call_function(commandBuffer, scissorCount, pScissors);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["scissorCount"]=[&]() {
    json return_aFbyEkl=json({});
    return serialize_uint32_t(scissorCount);}();
result["members"]["pScissors"]=[&]() {
    json return_HoUaZsF=json({});
    
        if (pScissors==NULL){
            return_HoUaZsF["null"]=true;
            return return_HoUaZsF;
        }
        
        return_HoUaZsF["members"]={};
        for(int HoUaZsF=0; HoUaZsF < scissorCount; HoUaZsF++){
            json temp;
            temp=[&]() {
    json return_fcbwury=json({});
    return serialize_VkRect2D(pScissors[HoUaZsF]);}();
            return_HoUaZsF["members"].push_back(temp);
        }
        return return_HoUaZsF;
        }();

        writeToConn(result);
    }

    void handle_vkCmdBindIndexBuffer2KHR(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBuffer buffer
            ;
[&]() {
buffer=deserialize_VkBuffer(data_json["members"]["buffer"]);}();
VkDeviceSize offset
            ;
[&]() {
[&]() {
offset=deserialize_uint64_t(data_json["members"]["offset"]);}();}();
VkDeviceSize size
            ;
[&]() {
[&]() {
size=deserialize_uint64_t(data_json["members"]["size"]);}();}();
VkIndexType indexType
        ;
[&]() {
indexType=deserialize_VkIndexType(data_json["members"]["indexType"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdBindIndexBuffer2KHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBindIndexBuffer2KHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdBindIndexBuffer2KHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBindIndexBuffer2KHR");
    }  
    
call_function(commandBuffer, buffer, offset, size, indexType);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["buffer"]=[&]() {
    json return_Fjwvwzv=json({});
    return serialize_VkBuffer(buffer);}();
result["members"]["offset"]=[&]() {
    json return_vTtZMhj=json({});
    return_vTtZMhj=[&]() {
    json return_eEWibmR=json({});
    return serialize_uint64_t(offset);}();return return_vTtZMhj;}();
result["members"]["size"]=[&]() {
    json return_EcDMigR=json({});
    return_EcDMigR=[&]() {
    json return_vDcVgJV=json({});
    return serialize_uint64_t(size);}();return return_EcDMigR;}();
result["members"]["indexType"]=[&]() {
    json return_VcYhjnj=json({});
    return serialize_VkIndexType(indexType);}();

        writeToConn(result);
    }

    void handle_vkCmdBindVertexBuffers2(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t firstBinding
            ;
[&]() {
firstBinding=deserialize_uint32_t(data_json["members"]["firstBinding"]);}();
uint32_t bindingCount
            ;
[&]() {
bindingCount=deserialize_uint32_t(data_json["members"]["bindingCount"]);}();
VkBuffer* pBuffers
            ;
[&]() {
VkBuffer* temp_wjPgLot;[&]() {

        if (data_json["members"]["pBuffers"].contains("null")){
        temp_wjPgLot=NULL;
        return;
        }
    temp_wjPgLot=(VkBuffer*)malloc(bindingCount*sizeof(VkBuffer));
        for (int QWtdPdi=0; QWtdPdi < bindingCount; QWtdPdi++){
            [&]() {
temp_wjPgLot[QWtdPdi]=deserialize_VkBuffer(data_json["members"]["pBuffers"]["members"][QWtdPdi]);}();;
        }
        }();pBuffers=temp_wjPgLot;}();
VkDeviceSize* pOffsets
            ;
[&]() {
VkDeviceSize* temp_KWuBsZc;[&]() {

        if (data_json["members"]["pOffsets"].contains("null")){
        temp_KWuBsZc=NULL;
        return;
        }
    [&]() {

        if (data_json["members"]["pOffsets"].contains("null")){
        temp_KWuBsZc=NULL;
        return;
        }
    temp_KWuBsZc=(uint64_t*)malloc(bindingCount*sizeof(uint64_t));
        for (int aYejgNL=0; aYejgNL < bindingCount; aYejgNL++){
            [&]() {
temp_KWuBsZc[aYejgNL]=deserialize_uint64_t(data_json["members"]["pOffsets"]["members"][aYejgNL]);}();;
        }
        }();}();pOffsets=temp_KWuBsZc;}();
VkDeviceSize* pSizes
            ;
[&]() {
VkDeviceSize* temp_bLjaFbS;[&]() {

        if (data_json["members"]["pSizes"].contains("null")){
        temp_bLjaFbS=NULL;
        return;
        }
    [&]() {

        if (data_json["members"]["pSizes"].contains("null")){
        temp_bLjaFbS=NULL;
        return;
        }
    temp_bLjaFbS=(uint64_t*)malloc(bindingCount*sizeof(uint64_t));
        for (int qJIryhS=0; qJIryhS < bindingCount; qJIryhS++){
            [&]() {
temp_bLjaFbS[qJIryhS]=deserialize_uint64_t(data_json["members"]["pSizes"]["members"][qJIryhS]);}();;
        }
        }();}();pSizes=temp_bLjaFbS;}();
VkDeviceSize* pStrides
        ;
[&]() {
VkDeviceSize* temp_wcMluMk;[&]() {

        if (data_json["members"]["pStrides"].contains("null")){
        temp_wcMluMk=NULL;
        return;
        }
    [&]() {

        if (data_json["members"]["pStrides"].contains("null")){
        temp_wcMluMk=NULL;
        return;
        }
    temp_wcMluMk=(uint64_t*)malloc(bindingCount*sizeof(uint64_t));
        for (int EOqGjlQ=0; EOqGjlQ < bindingCount; EOqGjlQ++){
            [&]() {
temp_wcMluMk[EOqGjlQ]=deserialize_uint64_t(data_json["members"]["pStrides"]["members"][EOqGjlQ]);}();;
        }
        }();}();pStrides=temp_wcMluMk;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdBindVertexBuffers2)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBindVertexBuffers2");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdBindVertexBuffers2)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBindVertexBuffers2");
    }  
    
call_function(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["firstBinding"]=[&]() {
    json return_JzarCRw=json({});
    return serialize_uint32_t(firstBinding);}();
result["members"]["bindingCount"]=[&]() {
    json return_KKQzFnF=json({});
    return serialize_uint32_t(bindingCount);}();
result["members"]["pBuffers"]=[&]() {
    json return_mLfEgSk=json({});
    
        if (pBuffers==NULL){
            return_mLfEgSk["null"]=true;
            return return_mLfEgSk;
        }
        
        return_mLfEgSk["members"]={};
        for(int mLfEgSk=0; mLfEgSk < bindingCount; mLfEgSk++){
            json temp;
            temp=[&]() {
    json return_sdCvutr=json({});
    return serialize_VkBuffer(pBuffers[mLfEgSk]);}();
            return_mLfEgSk["members"].push_back(temp);
        }
        return return_mLfEgSk;
        }();
result["members"]["pOffsets"]=[&]() {
    json return_esRfpyF=json({});
    
        if (pOffsets==NULL){
            return_esRfpyF["null"]=true;
            return return_esRfpyF;
        }
        
        return_esRfpyF["members"]={};
        for(int esRfpyF=0; esRfpyF < bindingCount; esRfpyF++){
            json temp;
            temp=[&]() {
    json return_sWZhkpG=json({});
    return_sWZhkpG=[&]() {
    json return_hRuQZpF=json({});
    return serialize_uint64_t(pOffsets[esRfpyF]);}();return return_sWZhkpG;}();
            return_esRfpyF["members"].push_back(temp);
        }
        return return_esRfpyF;
        }();
result["members"]["pSizes"]=[&]() {
    json return_RBHkmii=json({});
    
        if (pSizes==NULL){
            return_RBHkmii["null"]=true;
            return return_RBHkmii;
        }
        
        return_RBHkmii["members"]={};
        for(int RBHkmii=0; RBHkmii < bindingCount; RBHkmii++){
            json temp;
            temp=[&]() {
    json return_tdqWtNc=json({});
    return_tdqWtNc=[&]() {
    json return_rdEpStj=json({});
    return serialize_uint64_t(pSizes[RBHkmii]);}();return return_tdqWtNc;}();
            return_RBHkmii["members"].push_back(temp);
        }
        return return_RBHkmii;
        }();
result["members"]["pStrides"]=[&]() {
    json return_oeZvugE=json({});
    
        if (pStrides==NULL){
            return_oeZvugE["null"]=true;
            return return_oeZvugE;
        }
        
        return_oeZvugE["members"]={};
        for(int oeZvugE=0; oeZvugE < bindingCount; oeZvugE++){
            json temp;
            temp=[&]() {
    json return_VLLWSVC=json({});
    return_VLLWSVC=[&]() {
    json return_bUoPhng=json({});
    return serialize_uint64_t(pStrides[oeZvugE]);}();return return_VLLWSVC;}();
            return_oeZvugE["members"].push_back(temp);
        }
        return return_oeZvugE;
        }();

        writeToConn(result);
    }

    void handle_vkCmdBindVertexBuffers2EXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t firstBinding
            ;
[&]() {
firstBinding=deserialize_uint32_t(data_json["members"]["firstBinding"]);}();
uint32_t bindingCount
            ;
[&]() {
bindingCount=deserialize_uint32_t(data_json["members"]["bindingCount"]);}();
VkBuffer* pBuffers
            ;
[&]() {
VkBuffer* temp_wjPgLot;[&]() {

        if (data_json["members"]["pBuffers"].contains("null")){
        temp_wjPgLot=NULL;
        return;
        }
    temp_wjPgLot=(VkBuffer*)malloc(bindingCount*sizeof(VkBuffer));
        for (int QWtdPdi=0; QWtdPdi < bindingCount; QWtdPdi++){
            [&]() {
temp_wjPgLot[QWtdPdi]=deserialize_VkBuffer(data_json["members"]["pBuffers"]["members"][QWtdPdi]);}();;
        }
        }();pBuffers=temp_wjPgLot;}();
VkDeviceSize* pOffsets
            ;
[&]() {
VkDeviceSize* temp_KWuBsZc;[&]() {

        if (data_json["members"]["pOffsets"].contains("null")){
        temp_KWuBsZc=NULL;
        return;
        }
    [&]() {

        if (data_json["members"]["pOffsets"].contains("null")){
        temp_KWuBsZc=NULL;
        return;
        }
    temp_KWuBsZc=(uint64_t*)malloc(bindingCount*sizeof(uint64_t));
        for (int aYejgNL=0; aYejgNL < bindingCount; aYejgNL++){
            [&]() {
temp_KWuBsZc[aYejgNL]=deserialize_uint64_t(data_json["members"]["pOffsets"]["members"][aYejgNL]);}();;
        }
        }();}();pOffsets=temp_KWuBsZc;}();
VkDeviceSize* pSizes
            ;
[&]() {
VkDeviceSize* temp_bLjaFbS;[&]() {

        if (data_json["members"]["pSizes"].contains("null")){
        temp_bLjaFbS=NULL;
        return;
        }
    [&]() {

        if (data_json["members"]["pSizes"].contains("null")){
        temp_bLjaFbS=NULL;
        return;
        }
    temp_bLjaFbS=(uint64_t*)malloc(bindingCount*sizeof(uint64_t));
        for (int qJIryhS=0; qJIryhS < bindingCount; qJIryhS++){
            [&]() {
temp_bLjaFbS[qJIryhS]=deserialize_uint64_t(data_json["members"]["pSizes"]["members"][qJIryhS]);}();;
        }
        }();}();pSizes=temp_bLjaFbS;}();
VkDeviceSize* pStrides
        ;
[&]() {
VkDeviceSize* temp_wcMluMk;[&]() {

        if (data_json["members"]["pStrides"].contains("null")){
        temp_wcMluMk=NULL;
        return;
        }
    [&]() {

        if (data_json["members"]["pStrides"].contains("null")){
        temp_wcMluMk=NULL;
        return;
        }
    temp_wcMluMk=(uint64_t*)malloc(bindingCount*sizeof(uint64_t));
        for (int EOqGjlQ=0; EOqGjlQ < bindingCount; EOqGjlQ++){
            [&]() {
temp_wcMluMk[EOqGjlQ]=deserialize_uint64_t(data_json["members"]["pStrides"]["members"][EOqGjlQ]);}();;
        }
        }();}();pStrides=temp_wcMluMk;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdBindVertexBuffers2EXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBindVertexBuffers2EXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdBindVertexBuffers2EXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBindVertexBuffers2EXT");
    }  
    
call_function(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["firstBinding"]=[&]() {
    json return_JzarCRw=json({});
    return serialize_uint32_t(firstBinding);}();
result["members"]["bindingCount"]=[&]() {
    json return_KKQzFnF=json({});
    return serialize_uint32_t(bindingCount);}();
result["members"]["pBuffers"]=[&]() {
    json return_mLfEgSk=json({});
    
        if (pBuffers==NULL){
            return_mLfEgSk["null"]=true;
            return return_mLfEgSk;
        }
        
        return_mLfEgSk["members"]={};
        for(int mLfEgSk=0; mLfEgSk < bindingCount; mLfEgSk++){
            json temp;
            temp=[&]() {
    json return_sdCvutr=json({});
    return serialize_VkBuffer(pBuffers[mLfEgSk]);}();
            return_mLfEgSk["members"].push_back(temp);
        }
        return return_mLfEgSk;
        }();
result["members"]["pOffsets"]=[&]() {
    json return_esRfpyF=json({});
    
        if (pOffsets==NULL){
            return_esRfpyF["null"]=true;
            return return_esRfpyF;
        }
        
        return_esRfpyF["members"]={};
        for(int esRfpyF=0; esRfpyF < bindingCount; esRfpyF++){
            json temp;
            temp=[&]() {
    json return_sWZhkpG=json({});
    return_sWZhkpG=[&]() {
    json return_hRuQZpF=json({});
    return serialize_uint64_t(pOffsets[esRfpyF]);}();return return_sWZhkpG;}();
            return_esRfpyF["members"].push_back(temp);
        }
        return return_esRfpyF;
        }();
result["members"]["pSizes"]=[&]() {
    json return_RBHkmii=json({});
    
        if (pSizes==NULL){
            return_RBHkmii["null"]=true;
            return return_RBHkmii;
        }
        
        return_RBHkmii["members"]={};
        for(int RBHkmii=0; RBHkmii < bindingCount; RBHkmii++){
            json temp;
            temp=[&]() {
    json return_tdqWtNc=json({});
    return_tdqWtNc=[&]() {
    json return_rdEpStj=json({});
    return serialize_uint64_t(pSizes[RBHkmii]);}();return return_tdqWtNc;}();
            return_RBHkmii["members"].push_back(temp);
        }
        return return_RBHkmii;
        }();
result["members"]["pStrides"]=[&]() {
    json return_oeZvugE=json({});
    
        if (pStrides==NULL){
            return_oeZvugE["null"]=true;
            return return_oeZvugE;
        }
        
        return_oeZvugE["members"]={};
        for(int oeZvugE=0; oeZvugE < bindingCount; oeZvugE++){
            json temp;
            temp=[&]() {
    json return_VLLWSVC=json({});
    return_VLLWSVC=[&]() {
    json return_bUoPhng=json({});
    return serialize_uint64_t(pStrides[oeZvugE]);}();return return_VLLWSVC;}();
            return_oeZvugE["members"].push_back(temp);
        }
        return return_oeZvugE;
        }();

        writeToConn(result);
    }

    void handle_vkCmdSetDepthTestEnable(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBool32 depthTestEnable
        ;
[&]() {
[&]() {
depthTestEnable=deserialize_uint32_t(data_json["members"]["depthTestEnable"]);}();}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetDepthTestEnable)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetDepthTestEnable");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetDepthTestEnable)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetDepthTestEnable");
    }  
    
call_function(commandBuffer, depthTestEnable);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["depthTestEnable"]=[&]() {
    json return_qYxwYki=json({});
    return_qYxwYki=[&]() {
    json return_tUVNIDV=json({});
    return serialize_uint32_t(depthTestEnable);}();return return_qYxwYki;}();

        writeToConn(result);
    }

    void handle_vkCmdSetDepthTestEnableEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBool32 depthTestEnable
        ;
[&]() {
[&]() {
depthTestEnable=deserialize_uint32_t(data_json["members"]["depthTestEnable"]);}();}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetDepthTestEnableEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetDepthTestEnableEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetDepthTestEnableEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetDepthTestEnableEXT");
    }  
    
call_function(commandBuffer, depthTestEnable);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["depthTestEnable"]=[&]() {
    json return_qYxwYki=json({});
    return_qYxwYki=[&]() {
    json return_tUVNIDV=json({});
    return serialize_uint32_t(depthTestEnable);}();return return_qYxwYki;}();

        writeToConn(result);
    }

    void handle_vkCmdSetDepthWriteEnable(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBool32 depthWriteEnable
        ;
[&]() {
[&]() {
depthWriteEnable=deserialize_uint32_t(data_json["members"]["depthWriteEnable"]);}();}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetDepthWriteEnable)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetDepthWriteEnable");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetDepthWriteEnable)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetDepthWriteEnable");
    }  
    
call_function(commandBuffer, depthWriteEnable);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["depthWriteEnable"]=[&]() {
    json return_busnIZO=json({});
    return_busnIZO=[&]() {
    json return_VqpOVml=json({});
    return serialize_uint32_t(depthWriteEnable);}();return return_busnIZO;}();

        writeToConn(result);
    }

    void handle_vkCmdSetDepthWriteEnableEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBool32 depthWriteEnable
        ;
[&]() {
[&]() {
depthWriteEnable=deserialize_uint32_t(data_json["members"]["depthWriteEnable"]);}();}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetDepthWriteEnableEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetDepthWriteEnableEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetDepthWriteEnableEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetDepthWriteEnableEXT");
    }  
    
call_function(commandBuffer, depthWriteEnable);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["depthWriteEnable"]=[&]() {
    json return_busnIZO=json({});
    return_busnIZO=[&]() {
    json return_VqpOVml=json({});
    return serialize_uint32_t(depthWriteEnable);}();return return_busnIZO;}();

        writeToConn(result);
    }

    void handle_vkCmdSetDepthCompareOp(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkCompareOp depthCompareOp
        ;
[&]() {
depthCompareOp=deserialize_VkCompareOp(data_json["members"]["depthCompareOp"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetDepthCompareOp)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetDepthCompareOp");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetDepthCompareOp)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetDepthCompareOp");
    }  
    
call_function(commandBuffer, depthCompareOp);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["depthCompareOp"]=[&]() {
    json return_XsmHvKq=json({});
    return serialize_VkCompareOp(depthCompareOp);}();

        writeToConn(result);
    }

    void handle_vkCmdSetDepthCompareOpEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkCompareOp depthCompareOp
        ;
[&]() {
depthCompareOp=deserialize_VkCompareOp(data_json["members"]["depthCompareOp"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetDepthCompareOpEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetDepthCompareOpEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetDepthCompareOpEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetDepthCompareOpEXT");
    }  
    
call_function(commandBuffer, depthCompareOp);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["depthCompareOp"]=[&]() {
    json return_XsmHvKq=json({});
    return serialize_VkCompareOp(depthCompareOp);}();

        writeToConn(result);
    }

    void handle_vkCmdSetDepthBoundsTestEnable(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBool32 depthBoundsTestEnable
        ;
[&]() {
[&]() {
depthBoundsTestEnable=deserialize_uint32_t(data_json["members"]["depthBoundsTestEnable"]);}();}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetDepthBoundsTestEnable)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetDepthBoundsTestEnable");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetDepthBoundsTestEnable)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetDepthBoundsTestEnable");
    }  
    
call_function(commandBuffer, depthBoundsTestEnable);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["depthBoundsTestEnable"]=[&]() {
    json return_hQuXotg=json({});
    return_hQuXotg=[&]() {
    json return_nYagQtX=json({});
    return serialize_uint32_t(depthBoundsTestEnable);}();return return_hQuXotg;}();

        writeToConn(result);
    }

    void handle_vkCmdSetDepthBoundsTestEnableEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBool32 depthBoundsTestEnable
        ;
[&]() {
[&]() {
depthBoundsTestEnable=deserialize_uint32_t(data_json["members"]["depthBoundsTestEnable"]);}();}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetDepthBoundsTestEnableEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetDepthBoundsTestEnableEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetDepthBoundsTestEnableEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetDepthBoundsTestEnableEXT");
    }  
    
call_function(commandBuffer, depthBoundsTestEnable);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["depthBoundsTestEnable"]=[&]() {
    json return_hQuXotg=json({});
    return_hQuXotg=[&]() {
    json return_nYagQtX=json({});
    return serialize_uint32_t(depthBoundsTestEnable);}();return return_hQuXotg;}();

        writeToConn(result);
    }

    void handle_vkCmdSetStencilTestEnable(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBool32 stencilTestEnable
        ;
[&]() {
[&]() {
stencilTestEnable=deserialize_uint32_t(data_json["members"]["stencilTestEnable"]);}();}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetStencilTestEnable)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetStencilTestEnable");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetStencilTestEnable)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetStencilTestEnable");
    }  
    
call_function(commandBuffer, stencilTestEnable);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["stencilTestEnable"]=[&]() {
    json return_ObkuCZG=json({});
    return_ObkuCZG=[&]() {
    json return_EnnpddA=json({});
    return serialize_uint32_t(stencilTestEnable);}();return return_ObkuCZG;}();

        writeToConn(result);
    }

    void handle_vkCmdSetStencilTestEnableEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBool32 stencilTestEnable
        ;
[&]() {
[&]() {
stencilTestEnable=deserialize_uint32_t(data_json["members"]["stencilTestEnable"]);}();}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetStencilTestEnableEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetStencilTestEnableEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetStencilTestEnableEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetStencilTestEnableEXT");
    }  
    
call_function(commandBuffer, stencilTestEnable);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["stencilTestEnable"]=[&]() {
    json return_ObkuCZG=json({});
    return_ObkuCZG=[&]() {
    json return_EnnpddA=json({});
    return serialize_uint32_t(stencilTestEnable);}();return return_ObkuCZG;}();

        writeToConn(result);
    }

    void handle_vkCmdSetStencilOp(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkStencilFaceFlags faceMask
            ;
[&]() {
faceMask=deserialize_VkStencilFaceFlags(data_json["members"]["faceMask"]);}();
VkStencilOp failOp
            ;
[&]() {
failOp=deserialize_VkStencilOp(data_json["members"]["failOp"]);}();
VkStencilOp passOp
            ;
[&]() {
passOp=deserialize_VkStencilOp(data_json["members"]["passOp"]);}();
VkStencilOp depthFailOp
            ;
[&]() {
depthFailOp=deserialize_VkStencilOp(data_json["members"]["depthFailOp"]);}();
VkCompareOp compareOp
        ;
[&]() {
compareOp=deserialize_VkCompareOp(data_json["members"]["compareOp"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetStencilOp)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetStencilOp");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetStencilOp)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetStencilOp");
    }  
    
call_function(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["faceMask"]=[&]() {
    json return_zgrwSjb=json({});
    return serialize_VkStencilFaceFlags(faceMask);}();
result["members"]["failOp"]=[&]() {
    json return_FBWQPdC=json({});
    return serialize_VkStencilOp(failOp);}();
result["members"]["passOp"]=[&]() {
    json return_fWFxxZL=json({});
    return serialize_VkStencilOp(passOp);}();
result["members"]["depthFailOp"]=[&]() {
    json return_XXLuRmr=json({});
    return serialize_VkStencilOp(depthFailOp);}();
result["members"]["compareOp"]=[&]() {
    json return_fRQiFEF=json({});
    return serialize_VkCompareOp(compareOp);}();

        writeToConn(result);
    }

    void handle_vkCmdSetStencilOpEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkStencilFaceFlags faceMask
            ;
[&]() {
faceMask=deserialize_VkStencilFaceFlags(data_json["members"]["faceMask"]);}();
VkStencilOp failOp
            ;
[&]() {
failOp=deserialize_VkStencilOp(data_json["members"]["failOp"]);}();
VkStencilOp passOp
            ;
[&]() {
passOp=deserialize_VkStencilOp(data_json["members"]["passOp"]);}();
VkStencilOp depthFailOp
            ;
[&]() {
depthFailOp=deserialize_VkStencilOp(data_json["members"]["depthFailOp"]);}();
VkCompareOp compareOp
        ;
[&]() {
compareOp=deserialize_VkCompareOp(data_json["members"]["compareOp"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetStencilOpEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetStencilOpEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetStencilOpEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetStencilOpEXT");
    }  
    
call_function(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["faceMask"]=[&]() {
    json return_zgrwSjb=json({});
    return serialize_VkStencilFaceFlags(faceMask);}();
result["members"]["failOp"]=[&]() {
    json return_FBWQPdC=json({});
    return serialize_VkStencilOp(failOp);}();
result["members"]["passOp"]=[&]() {
    json return_fWFxxZL=json({});
    return serialize_VkStencilOp(passOp);}();
result["members"]["depthFailOp"]=[&]() {
    json return_XXLuRmr=json({});
    return serialize_VkStencilOp(depthFailOp);}();
result["members"]["compareOp"]=[&]() {
    json return_fRQiFEF=json({});
    return serialize_VkCompareOp(compareOp);}();

        writeToConn(result);
    }

    void handle_vkCmdSetPatchControlPointsEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t patchControlPoints
        ;
[&]() {
patchControlPoints=deserialize_uint32_t(data_json["members"]["patchControlPoints"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetPatchControlPointsEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetPatchControlPointsEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetPatchControlPointsEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetPatchControlPointsEXT");
    }  
    
call_function(commandBuffer, patchControlPoints);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["patchControlPoints"]=[&]() {
    json return_hMXwzbS=json({});
    return serialize_uint32_t(patchControlPoints);}();

        writeToConn(result);
    }

    void handle_vkCmdSetRasterizerDiscardEnable(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBool32 rasterizerDiscardEnable
        ;
[&]() {
[&]() {
rasterizerDiscardEnable=deserialize_uint32_t(data_json["members"]["rasterizerDiscardEnable"]);}();}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetRasterizerDiscardEnable)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetRasterizerDiscardEnable");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetRasterizerDiscardEnable)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetRasterizerDiscardEnable");
    }  
    
call_function(commandBuffer, rasterizerDiscardEnable);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["rasterizerDiscardEnable"]=[&]() {
    json return_aQrQuZN=json({});
    return_aQrQuZN=[&]() {
    json return_nPJPYWH=json({});
    return serialize_uint32_t(rasterizerDiscardEnable);}();return return_aQrQuZN;}();

        writeToConn(result);
    }

    void handle_vkCmdSetRasterizerDiscardEnableEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBool32 rasterizerDiscardEnable
        ;
[&]() {
[&]() {
rasterizerDiscardEnable=deserialize_uint32_t(data_json["members"]["rasterizerDiscardEnable"]);}();}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetRasterizerDiscardEnableEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetRasterizerDiscardEnableEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetRasterizerDiscardEnableEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetRasterizerDiscardEnableEXT");
    }  
    
call_function(commandBuffer, rasterizerDiscardEnable);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["rasterizerDiscardEnable"]=[&]() {
    json return_aQrQuZN=json({});
    return_aQrQuZN=[&]() {
    json return_nPJPYWH=json({});
    return serialize_uint32_t(rasterizerDiscardEnable);}();return return_aQrQuZN;}();

        writeToConn(result);
    }

    void handle_vkCmdSetDepthBiasEnable(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBool32 depthBiasEnable
        ;
[&]() {
[&]() {
depthBiasEnable=deserialize_uint32_t(data_json["members"]["depthBiasEnable"]);}();}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetDepthBiasEnable)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetDepthBiasEnable");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetDepthBiasEnable)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetDepthBiasEnable");
    }  
    
call_function(commandBuffer, depthBiasEnable);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["depthBiasEnable"]=[&]() {
    json return_WNrmSdQ=json({});
    return_WNrmSdQ=[&]() {
    json return_tWEfVWE=json({});
    return serialize_uint32_t(depthBiasEnable);}();return return_WNrmSdQ;}();

        writeToConn(result);
    }

    void handle_vkCmdSetDepthBiasEnableEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBool32 depthBiasEnable
        ;
[&]() {
[&]() {
depthBiasEnable=deserialize_uint32_t(data_json["members"]["depthBiasEnable"]);}();}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetDepthBiasEnableEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetDepthBiasEnableEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetDepthBiasEnableEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetDepthBiasEnableEXT");
    }  
    
call_function(commandBuffer, depthBiasEnable);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["depthBiasEnable"]=[&]() {
    json return_WNrmSdQ=json({});
    return_WNrmSdQ=[&]() {
    json return_tWEfVWE=json({});
    return serialize_uint32_t(depthBiasEnable);}();return return_WNrmSdQ;}();

        writeToConn(result);
    }

    void handle_vkCmdSetLogicOpEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkLogicOp logicOp
        ;
[&]() {
logicOp=deserialize_VkLogicOp(data_json["members"]["logicOp"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetLogicOpEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetLogicOpEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetLogicOpEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetLogicOpEXT");
    }  
    
call_function(commandBuffer, logicOp);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["logicOp"]=[&]() {
    json return_YKivIbb=json({});
    return serialize_VkLogicOp(logicOp);}();

        writeToConn(result);
    }

    void handle_vkCmdSetPrimitiveRestartEnable(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBool32 primitiveRestartEnable
        ;
[&]() {
[&]() {
primitiveRestartEnable=deserialize_uint32_t(data_json["members"]["primitiveRestartEnable"]);}();}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetPrimitiveRestartEnable)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetPrimitiveRestartEnable");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetPrimitiveRestartEnable)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetPrimitiveRestartEnable");
    }  
    
call_function(commandBuffer, primitiveRestartEnable);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["primitiveRestartEnable"]=[&]() {
    json return_EXDlsDK=json({});
    return_EXDlsDK=[&]() {
    json return_tMUubda=json({});
    return serialize_uint32_t(primitiveRestartEnable);}();return return_EXDlsDK;}();

        writeToConn(result);
    }

    void handle_vkCmdSetPrimitiveRestartEnableEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBool32 primitiveRestartEnable
        ;
[&]() {
[&]() {
primitiveRestartEnable=deserialize_uint32_t(data_json["members"]["primitiveRestartEnable"]);}();}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetPrimitiveRestartEnableEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetPrimitiveRestartEnableEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetPrimitiveRestartEnableEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetPrimitiveRestartEnableEXT");
    }  
    
call_function(commandBuffer, primitiveRestartEnable);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["primitiveRestartEnable"]=[&]() {
    json return_EXDlsDK=json({});
    return_EXDlsDK=[&]() {
    json return_tMUubda=json({});
    return serialize_uint32_t(primitiveRestartEnable);}();return return_EXDlsDK;}();

        writeToConn(result);
    }

    void handle_vkCmdSetTessellationDomainOriginEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkTessellationDomainOrigin domainOrigin
        ;
[&]() {
domainOrigin=deserialize_VkTessellationDomainOrigin(data_json["members"]["domainOrigin"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetTessellationDomainOriginEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetTessellationDomainOriginEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetTessellationDomainOriginEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetTessellationDomainOriginEXT");
    }  
    
call_function(commandBuffer, domainOrigin);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["domainOrigin"]=[&]() {
    json return_fpBUivI=json({});
    return serialize_VkTessellationDomainOrigin(domainOrigin);}();

        writeToConn(result);
    }

    void handle_vkCmdSetDepthClampEnableEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBool32 depthClampEnable
        ;
[&]() {
[&]() {
depthClampEnable=deserialize_uint32_t(data_json["members"]["depthClampEnable"]);}();}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetDepthClampEnableEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetDepthClampEnableEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetDepthClampEnableEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetDepthClampEnableEXT");
    }  
    
call_function(commandBuffer, depthClampEnable);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["depthClampEnable"]=[&]() {
    json return_JdgiFAA=json({});
    return_JdgiFAA=[&]() {
    json return_jObEjmU=json({});
    return serialize_uint32_t(depthClampEnable);}();return return_JdgiFAA;}();

        writeToConn(result);
    }

    void handle_vkCmdSetPolygonModeEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkPolygonMode polygonMode
        ;
[&]() {
polygonMode=deserialize_VkPolygonMode(data_json["members"]["polygonMode"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetPolygonModeEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetPolygonModeEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetPolygonModeEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetPolygonModeEXT");
    }  
    
call_function(commandBuffer, polygonMode);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["polygonMode"]=[&]() {
    json return_NNYkWqR=json({});
    return serialize_VkPolygonMode(polygonMode);}();

        writeToConn(result);
    }

    void handle_vkCmdSetRasterizationSamplesEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkSampleCountFlagBits  rasterizationSamples
        ;
[&]() {
rasterizationSamples=deserialize_VkSampleCountFlagBits(data_json["members"]["rasterizationSamples"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetRasterizationSamplesEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetRasterizationSamplesEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetRasterizationSamplesEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetRasterizationSamplesEXT");
    }  
    
call_function(commandBuffer, rasterizationSamples);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["rasterizationSamples"]=[&]() {
    json return_vXvcCRN=json({});
    return serialize_VkSampleCountFlagBits(rasterizationSamples);}();

        writeToConn(result);
    }

    void handle_vkCmdSetSampleMaskEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkSampleCountFlagBits  samples
            ;
[&]() {
samples=deserialize_VkSampleCountFlagBits(data_json["members"]["samples"]);}();
VkSampleMask*    pSampleMask
        ;
[&]() {
VkSampleMask* temp_SJxJQan;[&]() {

        if (data_json["members"]["pSampleMask"].contains("null")){
        temp_SJxJQan=NULL;
        return;
        }
    [&]() {

        if (data_json["members"]["pSampleMask"].contains("null")){
        temp_SJxJQan=NULL;
        return;
        }
    temp_SJxJQan=(uint32_t*)malloc((samples + 31) / 32*sizeof(uint32_t));
        for (int mihOaJj=0; mihOaJj < (samples + 31) / 32; mihOaJj++){
            [&]() {
temp_SJxJQan[mihOaJj]=deserialize_uint32_t(data_json["members"]["pSampleMask"]["members"][mihOaJj]);}();;
        }
        }();}();pSampleMask=temp_SJxJQan;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetSampleMaskEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetSampleMaskEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetSampleMaskEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetSampleMaskEXT");
    }  
    
call_function(commandBuffer, samples, pSampleMask);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["samples"]=[&]() {
    json return_GUZifKZ=json({});
    return serialize_VkSampleCountFlagBits(samples);}();
result["members"]["pSampleMask"]=[&]() {
    json return_mAdzwNS=json({});
    
        if (pSampleMask==NULL){
            return_mAdzwNS["null"]=true;
            return return_mAdzwNS;
        }
        
        return_mAdzwNS["members"]={};
        for(int mAdzwNS=0; mAdzwNS < (samples + 31) / 32; mAdzwNS++){
            json temp;
            temp=[&]() {
    json return_CSUlKtZ=json({});
    return_CSUlKtZ=[&]() {
    json return_yjhXluf=json({});
    return serialize_uint32_t(pSampleMask[mAdzwNS]);}();return return_CSUlKtZ;}();
            return_mAdzwNS["members"].push_back(temp);
        }
        return return_mAdzwNS;
        }();

        writeToConn(result);
    }

    void handle_vkCmdSetAlphaToCoverageEnableEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBool32 alphaToCoverageEnable
        ;
[&]() {
[&]() {
alphaToCoverageEnable=deserialize_uint32_t(data_json["members"]["alphaToCoverageEnable"]);}();}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetAlphaToCoverageEnableEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetAlphaToCoverageEnableEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetAlphaToCoverageEnableEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetAlphaToCoverageEnableEXT");
    }  
    
call_function(commandBuffer, alphaToCoverageEnable);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["alphaToCoverageEnable"]=[&]() {
    json return_yXmeAyB=json({});
    return_yXmeAyB=[&]() {
    json return_lMWBIng=json({});
    return serialize_uint32_t(alphaToCoverageEnable);}();return return_yXmeAyB;}();

        writeToConn(result);
    }

    void handle_vkCmdSetAlphaToOneEnableEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBool32 alphaToOneEnable
        ;
[&]() {
[&]() {
alphaToOneEnable=deserialize_uint32_t(data_json["members"]["alphaToOneEnable"]);}();}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetAlphaToOneEnableEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetAlphaToOneEnableEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetAlphaToOneEnableEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetAlphaToOneEnableEXT");
    }  
    
call_function(commandBuffer, alphaToOneEnable);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["alphaToOneEnable"]=[&]() {
    json return_fBDiLmL=json({});
    return_fBDiLmL=[&]() {
    json return_IRJYATM=json({});
    return serialize_uint32_t(alphaToOneEnable);}();return return_fBDiLmL;}();

        writeToConn(result);
    }

    void handle_vkCmdSetLogicOpEnableEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBool32 logicOpEnable
        ;
[&]() {
[&]() {
logicOpEnable=deserialize_uint32_t(data_json["members"]["logicOpEnable"]);}();}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetLogicOpEnableEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetLogicOpEnableEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetLogicOpEnableEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetLogicOpEnableEXT");
    }  
    
call_function(commandBuffer, logicOpEnable);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["logicOpEnable"]=[&]() {
    json return_OxBMHyB=json({});
    return_OxBMHyB=[&]() {
    json return_GUsjiyw=json({});
    return serialize_uint32_t(logicOpEnable);}();return return_OxBMHyB;}();

        writeToConn(result);
    }

    void handle_vkCmdSetColorBlendEnableEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t firstAttachment
            ;
[&]() {
firstAttachment=deserialize_uint32_t(data_json["members"]["firstAttachment"]);}();
uint32_t attachmentCount
            ;
[&]() {
attachmentCount=deserialize_uint32_t(data_json["members"]["attachmentCount"]);}();
VkBool32* pColorBlendEnables
        ;
[&]() {
VkBool32* temp_GgXcwSL;[&]() {

        if (data_json["members"]["pColorBlendEnables"].contains("null")){
        temp_GgXcwSL=NULL;
        return;
        }
    [&]() {

        if (data_json["members"]["pColorBlendEnables"].contains("null")){
        temp_GgXcwSL=NULL;
        return;
        }
    temp_GgXcwSL=(uint32_t*)malloc(attachmentCount*sizeof(uint32_t));
        for (int kfiRJfG=0; kfiRJfG < attachmentCount; kfiRJfG++){
            [&]() {
temp_GgXcwSL[kfiRJfG]=deserialize_uint32_t(data_json["members"]["pColorBlendEnables"]["members"][kfiRJfG]);}();;
        }
        }();}();pColorBlendEnables=temp_GgXcwSL;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetColorBlendEnableEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetColorBlendEnableEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetColorBlendEnableEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetColorBlendEnableEXT");
    }  
    
call_function(commandBuffer, firstAttachment, attachmentCount, pColorBlendEnables);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["firstAttachment"]=[&]() {
    json return_VUODySw=json({});
    return serialize_uint32_t(firstAttachment);}();
result["members"]["attachmentCount"]=[&]() {
    json return_RLrTJzT=json({});
    return serialize_uint32_t(attachmentCount);}();
result["members"]["pColorBlendEnables"]=[&]() {
    json return_DNHsXon=json({});
    
        if (pColorBlendEnables==NULL){
            return_DNHsXon["null"]=true;
            return return_DNHsXon;
        }
        
        return_DNHsXon["members"]={};
        for(int DNHsXon=0; DNHsXon < attachmentCount; DNHsXon++){
            json temp;
            temp=[&]() {
    json return_rBkDbyH=json({});
    return_rBkDbyH=[&]() {
    json return_nIdADfB=json({});
    return serialize_uint32_t(pColorBlendEnables[DNHsXon]);}();return return_rBkDbyH;}();
            return_DNHsXon["members"].push_back(temp);
        }
        return return_DNHsXon;
        }();

        writeToConn(result);
    }

    void handle_vkCmdSetColorBlendEquationEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t firstAttachment
            ;
[&]() {
firstAttachment=deserialize_uint32_t(data_json["members"]["firstAttachment"]);}();
uint32_t attachmentCount
            ;
[&]() {
attachmentCount=deserialize_uint32_t(data_json["members"]["attachmentCount"]);}();
VkColorBlendEquationEXT* pColorBlendEquations
        ;
[&]() {
VkColorBlendEquationEXT* temp_AoBKxsB;[&]() {

        if (data_json["members"]["pColorBlendEquations"].contains("null")){
        temp_AoBKxsB=NULL;
        return;
        }
    temp_AoBKxsB=(VkColorBlendEquationEXT*)malloc(attachmentCount*sizeof(VkColorBlendEquationEXT));
        for (int hxQLPUt=0; hxQLPUt < attachmentCount; hxQLPUt++){
            [&]() {
temp_AoBKxsB[hxQLPUt]=deserialize_VkColorBlendEquationEXT(data_json["members"]["pColorBlendEquations"]["members"][hxQLPUt]);}();;
        }
        }();pColorBlendEquations=temp_AoBKxsB;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetColorBlendEquationEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetColorBlendEquationEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetColorBlendEquationEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetColorBlendEquationEXT");
    }  
    
call_function(commandBuffer, firstAttachment, attachmentCount, pColorBlendEquations);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["firstAttachment"]=[&]() {
    json return_VUODySw=json({});
    return serialize_uint32_t(firstAttachment);}();
result["members"]["attachmentCount"]=[&]() {
    json return_RLrTJzT=json({});
    return serialize_uint32_t(attachmentCount);}();
result["members"]["pColorBlendEquations"]=[&]() {
    json return_QfnSuhN=json({});
    
        if (pColorBlendEquations==NULL){
            return_QfnSuhN["null"]=true;
            return return_QfnSuhN;
        }
        
        return_QfnSuhN["members"]={};
        for(int QfnSuhN=0; QfnSuhN < attachmentCount; QfnSuhN++){
            json temp;
            temp=[&]() {
    json return_goOAgww=json({});
    return serialize_VkColorBlendEquationEXT(pColorBlendEquations[QfnSuhN]);}();
            return_QfnSuhN["members"].push_back(temp);
        }
        return return_QfnSuhN;
        }();

        writeToConn(result);
    }

    void handle_vkCmdSetColorWriteMaskEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t firstAttachment
            ;
[&]() {
firstAttachment=deserialize_uint32_t(data_json["members"]["firstAttachment"]);}();
uint32_t attachmentCount
            ;
[&]() {
attachmentCount=deserialize_uint32_t(data_json["members"]["attachmentCount"]);}();
VkColorComponentFlags* pColorWriteMasks
        ;
[&]() {
VkColorComponentFlags* temp_fqsNcOh;[&]() {

        if (data_json["members"]["pColorWriteMasks"].contains("null")){
        temp_fqsNcOh=NULL;
        return;
        }
    temp_fqsNcOh=(VkColorComponentFlags*)malloc(attachmentCount*sizeof(VkColorComponentFlags));
        for (int RmVIeny=0; RmVIeny < attachmentCount; RmVIeny++){
            [&]() {
temp_fqsNcOh[RmVIeny]=deserialize_VkColorComponentFlags(data_json["members"]["pColorWriteMasks"]["members"][RmVIeny]);}();;
        }
        }();pColorWriteMasks=temp_fqsNcOh;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetColorWriteMaskEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetColorWriteMaskEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetColorWriteMaskEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetColorWriteMaskEXT");
    }  
    
call_function(commandBuffer, firstAttachment, attachmentCount, pColorWriteMasks);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["firstAttachment"]=[&]() {
    json return_VUODySw=json({});
    return serialize_uint32_t(firstAttachment);}();
result["members"]["attachmentCount"]=[&]() {
    json return_RLrTJzT=json({});
    return serialize_uint32_t(attachmentCount);}();
result["members"]["pColorWriteMasks"]=[&]() {
    json return_DyLrJGy=json({});
    
        if (pColorWriteMasks==NULL){
            return_DyLrJGy["null"]=true;
            return return_DyLrJGy;
        }
        
        return_DyLrJGy["members"]={};
        for(int DyLrJGy=0; DyLrJGy < attachmentCount; DyLrJGy++){
            json temp;
            temp=[&]() {
    json return_JQJNDhM=json({});
    return serialize_VkColorComponentFlags(pColorWriteMasks[DyLrJGy]);}();
            return_DyLrJGy["members"].push_back(temp);
        }
        return return_DyLrJGy;
        }();

        writeToConn(result);
    }

    void handle_vkCmdSetRasterizationStreamEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t rasterizationStream
        ;
[&]() {
rasterizationStream=deserialize_uint32_t(data_json["members"]["rasterizationStream"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetRasterizationStreamEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetRasterizationStreamEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetRasterizationStreamEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetRasterizationStreamEXT");
    }  
    
call_function(commandBuffer, rasterizationStream);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["rasterizationStream"]=[&]() {
    json return_bCzuttw=json({});
    return serialize_uint32_t(rasterizationStream);}();

        writeToConn(result);
    }

    void handle_vkCmdSetConservativeRasterizationModeEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkConservativeRasterizationModeEXT conservativeRasterizationMode
        ;
[&]() {
conservativeRasterizationMode=deserialize_VkConservativeRasterizationModeEXT(data_json["members"]["conservativeRasterizationMode"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetConservativeRasterizationModeEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetConservativeRasterizationModeEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetConservativeRasterizationModeEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetConservativeRasterizationModeEXT");
    }  
    
call_function(commandBuffer, conservativeRasterizationMode);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["conservativeRasterizationMode"]=[&]() {
    json return_DwxCKaT=json({});
    return serialize_VkConservativeRasterizationModeEXT(conservativeRasterizationMode);}();

        writeToConn(result);
    }

    void handle_vkCmdSetExtraPrimitiveOverestimationSizeEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
float extraPrimitiveOverestimationSize
        ;
[&]() {
extraPrimitiveOverestimationSize=deserialize_float(data_json["members"]["extraPrimitiveOverestimationSize"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetExtraPrimitiveOverestimationSizeEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetExtraPrimitiveOverestimationSizeEXT");
    }  
    
call_function(commandBuffer, extraPrimitiveOverestimationSize);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["extraPrimitiveOverestimationSize"]=[&]() {
    json return_DPkmoCg=json({});
    return serialize_float(extraPrimitiveOverestimationSize);}();

        writeToConn(result);
    }

    void handle_vkCmdSetDepthClipEnableEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBool32 depthClipEnable
        ;
[&]() {
[&]() {
depthClipEnable=deserialize_uint32_t(data_json["members"]["depthClipEnable"]);}();}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetDepthClipEnableEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetDepthClipEnableEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetDepthClipEnableEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetDepthClipEnableEXT");
    }  
    
call_function(commandBuffer, depthClipEnable);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["depthClipEnable"]=[&]() {
    json return_AlGABdK=json({});
    return_AlGABdK=[&]() {
    json return_xABTGzX=json({});
    return serialize_uint32_t(depthClipEnable);}();return return_AlGABdK;}();

        writeToConn(result);
    }

    void handle_vkCmdSetSampleLocationsEnableEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBool32 sampleLocationsEnable
        ;
[&]() {
[&]() {
sampleLocationsEnable=deserialize_uint32_t(data_json["members"]["sampleLocationsEnable"]);}();}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetSampleLocationsEnableEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetSampleLocationsEnableEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetSampleLocationsEnableEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetSampleLocationsEnableEXT");
    }  
    
call_function(commandBuffer, sampleLocationsEnable);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["sampleLocationsEnable"]=[&]() {
    json return_rdPCitk=json({});
    return_rdPCitk=[&]() {
    json return_CNhVpIb=json({});
    return serialize_uint32_t(sampleLocationsEnable);}();return return_rdPCitk;}();

        writeToConn(result);
    }

    void handle_vkCmdSetColorBlendAdvancedEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t firstAttachment
            ;
[&]() {
firstAttachment=deserialize_uint32_t(data_json["members"]["firstAttachment"]);}();
uint32_t attachmentCount
            ;
[&]() {
attachmentCount=deserialize_uint32_t(data_json["members"]["attachmentCount"]);}();
VkColorBlendAdvancedEXT* pColorBlendAdvanced
        ;
[&]() {
VkColorBlendAdvancedEXT* temp_VakdAUL;[&]() {

        if (data_json["members"]["pColorBlendAdvanced"].contains("null")){
        temp_VakdAUL=NULL;
        return;
        }
    temp_VakdAUL=(VkColorBlendAdvancedEXT*)malloc(attachmentCount*sizeof(VkColorBlendAdvancedEXT));
        for (int TpdEJNF=0; TpdEJNF < attachmentCount; TpdEJNF++){
            [&]() {
temp_VakdAUL[TpdEJNF]=deserialize_VkColorBlendAdvancedEXT(data_json["members"]["pColorBlendAdvanced"]["members"][TpdEJNF]);}();;
        }
        }();pColorBlendAdvanced=temp_VakdAUL;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetColorBlendAdvancedEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetColorBlendAdvancedEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetColorBlendAdvancedEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetColorBlendAdvancedEXT");
    }  
    
call_function(commandBuffer, firstAttachment, attachmentCount, pColorBlendAdvanced);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["firstAttachment"]=[&]() {
    json return_VUODySw=json({});
    return serialize_uint32_t(firstAttachment);}();
result["members"]["attachmentCount"]=[&]() {
    json return_RLrTJzT=json({});
    return serialize_uint32_t(attachmentCount);}();
result["members"]["pColorBlendAdvanced"]=[&]() {
    json return_eDrJFOf=json({});
    
        if (pColorBlendAdvanced==NULL){
            return_eDrJFOf["null"]=true;
            return return_eDrJFOf;
        }
        
        return_eDrJFOf["members"]={};
        for(int eDrJFOf=0; eDrJFOf < attachmentCount; eDrJFOf++){
            json temp;
            temp=[&]() {
    json return_aBspNNY=json({});
    return serialize_VkColorBlendAdvancedEXT(pColorBlendAdvanced[eDrJFOf]);}();
            return_eDrJFOf["members"].push_back(temp);
        }
        return return_eDrJFOf;
        }();

        writeToConn(result);
    }

    void handle_vkCmdSetProvokingVertexModeEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkProvokingVertexModeEXT provokingVertexMode
        ;
[&]() {
provokingVertexMode=deserialize_VkProvokingVertexModeEXT(data_json["members"]["provokingVertexMode"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetProvokingVertexModeEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetProvokingVertexModeEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetProvokingVertexModeEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetProvokingVertexModeEXT");
    }  
    
call_function(commandBuffer, provokingVertexMode);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["provokingVertexMode"]=[&]() {
    json return_CtlTmjS=json({});
    return serialize_VkProvokingVertexModeEXT(provokingVertexMode);}();

        writeToConn(result);
    }

    void handle_vkCmdSetLineRasterizationModeEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkLineRasterizationModeEXT lineRasterizationMode
        ;
[&]() {
lineRasterizationMode=deserialize_VkLineRasterizationModeEXT(data_json["members"]["lineRasterizationMode"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetLineRasterizationModeEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetLineRasterizationModeEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetLineRasterizationModeEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetLineRasterizationModeEXT");
    }  
    
call_function(commandBuffer, lineRasterizationMode);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["lineRasterizationMode"]=[&]() {
    json return_lTuyzWo=json({});
    return serialize_VkLineRasterizationModeEXT(lineRasterizationMode);}();

        writeToConn(result);
    }

    void handle_vkCmdSetLineStippleEnableEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBool32 stippledLineEnable
        ;
[&]() {
[&]() {
stippledLineEnable=deserialize_uint32_t(data_json["members"]["stippledLineEnable"]);}();}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetLineStippleEnableEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetLineStippleEnableEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetLineStippleEnableEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetLineStippleEnableEXT");
    }  
    
call_function(commandBuffer, stippledLineEnable);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["stippledLineEnable"]=[&]() {
    json return_HynEJkr=json({});
    return_HynEJkr=[&]() {
    json return_BTinZSA=json({});
    return serialize_uint32_t(stippledLineEnable);}();return return_HynEJkr;}();

        writeToConn(result);
    }

    void handle_vkCmdSetDepthClipNegativeOneToOneEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBool32 negativeOneToOne
        ;
[&]() {
[&]() {
negativeOneToOne=deserialize_uint32_t(data_json["members"]["negativeOneToOne"]);}();}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetDepthClipNegativeOneToOneEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetDepthClipNegativeOneToOneEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetDepthClipNegativeOneToOneEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetDepthClipNegativeOneToOneEXT");
    }  
    
call_function(commandBuffer, negativeOneToOne);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["negativeOneToOne"]=[&]() {
    json return_pZfdozP=json({});
    return_pZfdozP=[&]() {
    json return_yWyYPkg=json({});
    return serialize_uint32_t(negativeOneToOne);}();return return_pZfdozP;}();

        writeToConn(result);
    }

    void handle_vkCmdSetViewportWScalingEnableNV(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBool32 viewportWScalingEnable
        ;
[&]() {
[&]() {
viewportWScalingEnable=deserialize_uint32_t(data_json["members"]["viewportWScalingEnable"]);}();}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetViewportWScalingEnableNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetViewportWScalingEnableNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetViewportWScalingEnableNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetViewportWScalingEnableNV");
    }  
    
call_function(commandBuffer, viewportWScalingEnable);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["viewportWScalingEnable"]=[&]() {
    json return_aSezjYo=json({});
    return_aSezjYo=[&]() {
    json return_QbFhHmF=json({});
    return serialize_uint32_t(viewportWScalingEnable);}();return return_aSezjYo;}();

        writeToConn(result);
    }

    void handle_vkCmdSetViewportSwizzleNV(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t firstViewport
            ;
[&]() {
firstViewport=deserialize_uint32_t(data_json["members"]["firstViewport"]);}();
uint32_t viewportCount
            ;
[&]() {
viewportCount=deserialize_uint32_t(data_json["members"]["viewportCount"]);}();
VkViewportSwizzleNV* pViewportSwizzles
        ;
[&]() {
VkViewportSwizzleNV* temp_dhYoTKO;[&]() {

        if (data_json["members"]["pViewportSwizzles"].contains("null")){
        temp_dhYoTKO=NULL;
        return;
        }
    temp_dhYoTKO=(VkViewportSwizzleNV*)malloc(viewportCount*sizeof(VkViewportSwizzleNV));
        for (int KhMZWMz=0; KhMZWMz < viewportCount; KhMZWMz++){
            [&]() {
temp_dhYoTKO[KhMZWMz]=deserialize_VkViewportSwizzleNV(data_json["members"]["pViewportSwizzles"]["members"][KhMZWMz]);}();;
        }
        }();pViewportSwizzles=temp_dhYoTKO;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetViewportSwizzleNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetViewportSwizzleNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetViewportSwizzleNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetViewportSwizzleNV");
    }  
    
call_function(commandBuffer, firstViewport, viewportCount, pViewportSwizzles);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["firstViewport"]=[&]() {
    json return_zZVDUCF=json({});
    return serialize_uint32_t(firstViewport);}();
result["members"]["viewportCount"]=[&]() {
    json return_pDFybJm=json({});
    return serialize_uint32_t(viewportCount);}();
result["members"]["pViewportSwizzles"]=[&]() {
    json return_hBTAvcj=json({});
    
        if (pViewportSwizzles==NULL){
            return_hBTAvcj["null"]=true;
            return return_hBTAvcj;
        }
        
        return_hBTAvcj["members"]={};
        for(int hBTAvcj=0; hBTAvcj < viewportCount; hBTAvcj++){
            json temp;
            temp=[&]() {
    json return_ZPCUgfq=json({});
    return serialize_VkViewportSwizzleNV(pViewportSwizzles[hBTAvcj]);}();
            return_hBTAvcj["members"].push_back(temp);
        }
        return return_hBTAvcj;
        }();

        writeToConn(result);
    }

    void handle_vkCmdSetCoverageToColorEnableNV(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBool32 coverageToColorEnable
        ;
[&]() {
[&]() {
coverageToColorEnable=deserialize_uint32_t(data_json["members"]["coverageToColorEnable"]);}();}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetCoverageToColorEnableNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetCoverageToColorEnableNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetCoverageToColorEnableNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetCoverageToColorEnableNV");
    }  
    
call_function(commandBuffer, coverageToColorEnable);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["coverageToColorEnable"]=[&]() {
    json return_AbmvQhI=json({});
    return_AbmvQhI=[&]() {
    json return_abubMPK=json({});
    return serialize_uint32_t(coverageToColorEnable);}();return return_AbmvQhI;}();

        writeToConn(result);
    }

    void handle_vkCmdSetCoverageToColorLocationNV(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t coverageToColorLocation
        ;
[&]() {
coverageToColorLocation=deserialize_uint32_t(data_json["members"]["coverageToColorLocation"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetCoverageToColorLocationNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetCoverageToColorLocationNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetCoverageToColorLocationNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetCoverageToColorLocationNV");
    }  
    
call_function(commandBuffer, coverageToColorLocation);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["coverageToColorLocation"]=[&]() {
    json return_QwNFKhe=json({});
    return serialize_uint32_t(coverageToColorLocation);}();

        writeToConn(result);
    }

    void handle_vkCmdSetCoverageModulationModeNV(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkCoverageModulationModeNV coverageModulationMode
        ;
[&]() {
coverageModulationMode=deserialize_VkCoverageModulationModeNV(data_json["members"]["coverageModulationMode"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetCoverageModulationModeNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetCoverageModulationModeNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetCoverageModulationModeNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetCoverageModulationModeNV");
    }  
    
call_function(commandBuffer, coverageModulationMode);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["coverageModulationMode"]=[&]() {
    json return_sUViadz=json({});
    return serialize_VkCoverageModulationModeNV(coverageModulationMode);}();

        writeToConn(result);
    }

    void handle_vkCmdSetCoverageModulationTableEnableNV(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBool32 coverageModulationTableEnable
        ;
[&]() {
[&]() {
coverageModulationTableEnable=deserialize_uint32_t(data_json["members"]["coverageModulationTableEnable"]);}();}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetCoverageModulationTableEnableNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetCoverageModulationTableEnableNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetCoverageModulationTableEnableNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetCoverageModulationTableEnableNV");
    }  
    
call_function(commandBuffer, coverageModulationTableEnable);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["coverageModulationTableEnable"]=[&]() {
    json return_tjiTtXU=json({});
    return_tjiTtXU=[&]() {
    json return_kLLGxEa=json({});
    return serialize_uint32_t(coverageModulationTableEnable);}();return return_tjiTtXU;}();

        writeToConn(result);
    }

    void handle_vkCmdSetCoverageModulationTableNV(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t coverageModulationTableCount
            ;
[&]() {
coverageModulationTableCount=deserialize_uint32_t(data_json["members"]["coverageModulationTableCount"]);}();
float* pCoverageModulationTable
        ;
[&]() {
float* temp_cPtrEDk;[&]() {

        if (data_json["members"]["pCoverageModulationTable"].contains("null")){
        temp_cPtrEDk=NULL;
        return;
        }
    temp_cPtrEDk=(float*)malloc(coverageModulationTableCount*sizeof(float));
        for (int FFSweOZ=0; FFSweOZ < coverageModulationTableCount; FFSweOZ++){
            [&]() {
temp_cPtrEDk[FFSweOZ]=deserialize_float(data_json["members"]["pCoverageModulationTable"]["members"][FFSweOZ]);}();;
        }
        }();pCoverageModulationTable=temp_cPtrEDk;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetCoverageModulationTableNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetCoverageModulationTableNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetCoverageModulationTableNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetCoverageModulationTableNV");
    }  
    
call_function(commandBuffer, coverageModulationTableCount, pCoverageModulationTable);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["coverageModulationTableCount"]=[&]() {
    json return_qJlplXz=json({});
    return serialize_uint32_t(coverageModulationTableCount);}();
result["members"]["pCoverageModulationTable"]=[&]() {
    json return_NzQqvGg=json({});
    
        if (pCoverageModulationTable==NULL){
            return_NzQqvGg["null"]=true;
            return return_NzQqvGg;
        }
        
        return_NzQqvGg["members"]={};
        for(int NzQqvGg=0; NzQqvGg < coverageModulationTableCount; NzQqvGg++){
            json temp;
            temp=[&]() {
    json return_yIqJeKk=json({});
    return serialize_float(pCoverageModulationTable[NzQqvGg]);}();
            return_NzQqvGg["members"].push_back(temp);
        }
        return return_NzQqvGg;
        }();

        writeToConn(result);
    }

    void handle_vkCmdSetShadingRateImageEnableNV(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBool32 shadingRateImageEnable
        ;
[&]() {
[&]() {
shadingRateImageEnable=deserialize_uint32_t(data_json["members"]["shadingRateImageEnable"]);}();}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetShadingRateImageEnableNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetShadingRateImageEnableNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetShadingRateImageEnableNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetShadingRateImageEnableNV");
    }  
    
call_function(commandBuffer, shadingRateImageEnable);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["shadingRateImageEnable"]=[&]() {
    json return_hLjlyMs=json({});
    return_hLjlyMs=[&]() {
    json return_KSCsQda=json({});
    return serialize_uint32_t(shadingRateImageEnable);}();return return_hLjlyMs;}();

        writeToConn(result);
    }

    void handle_vkCmdSetCoverageReductionModeNV(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkCoverageReductionModeNV coverageReductionMode
        ;
[&]() {
coverageReductionMode=deserialize_VkCoverageReductionModeNV(data_json["members"]["coverageReductionMode"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetCoverageReductionModeNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetCoverageReductionModeNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetCoverageReductionModeNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetCoverageReductionModeNV");
    }  
    
call_function(commandBuffer, coverageReductionMode);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["coverageReductionMode"]=[&]() {
    json return_XLStYBV=json({});
    return serialize_VkCoverageReductionModeNV(coverageReductionMode);}();

        writeToConn(result);
    }

    void handle_vkCmdSetRepresentativeFragmentTestEnableNV(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBool32 representativeFragmentTestEnable
        ;
[&]() {
[&]() {
representativeFragmentTestEnable=deserialize_uint32_t(data_json["members"]["representativeFragmentTestEnable"]);}();}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetRepresentativeFragmentTestEnableNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetRepresentativeFragmentTestEnableNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetRepresentativeFragmentTestEnableNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetRepresentativeFragmentTestEnableNV");
    }  
    
call_function(commandBuffer, representativeFragmentTestEnable);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["representativeFragmentTestEnable"]=[&]() {
    json return_uGfPNvm=json({});
    return_uGfPNvm=[&]() {
    json return_pmLNcAY=json({});
    return serialize_uint32_t(representativeFragmentTestEnable);}();return return_uGfPNvm;}();

        writeToConn(result);
    }

    void handle_vkCreatePrivateDataSlot(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkPrivateDataSlotCreateInfo* pCreateInfo
            ;
[&]() {
VkPrivateDataSlotCreateInfo* temp_CMozoLf;[&]() {

        if (data_json["members"]["pCreateInfo"].contains("null")){
        temp_CMozoLf=NULL;
        return;
        }
    temp_CMozoLf=(VkPrivateDataSlotCreateInfo*)malloc(sizeof(VkPrivateDataSlotCreateInfo));
[&]() {
*(temp_CMozoLf)=deserialize_VkPrivateDataSlotCreateInfo(data_json["members"]["pCreateInfo"]);}();
}();pCreateInfo=temp_CMozoLf;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkPrivateDataSlot* pPrivateDataSlot
        ;
[&]() {

        if (data_json["members"]["pPrivateDataSlot"].contains("null")){
        pPrivateDataSlot=NULL;
        return;
        }
    pPrivateDataSlot=(VkPrivateDataSlot*)malloc(sizeof(VkPrivateDataSlot));
[&]() {
*(pPrivateDataSlot)=deserialize_VkPrivateDataSlot(data_json["members"]["pPrivateDataSlot"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreatePrivateDataSlot)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreatePrivateDataSlot");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreatePrivateDataSlot)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreatePrivateDataSlot");
    }  
    
auto return_value=call_function(device, pCreateInfo, pAllocator, pPrivateDataSlot);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_rsUUVbU=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pCreateInfo"]=[&]() {
    json return_UKIqoGH=json({});
    
        if (pCreateInfo==NULL){
            return_UKIqoGH["null"]=true;
            return return_UKIqoGH;
        }
        return_UKIqoGH=[&]() {
    json return_kfBqEux=json({});
    return serialize_VkPrivateDataSlotCreateInfo(*pCreateInfo);}();
return return_UKIqoGH;}();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pPrivateDataSlot"]=[&]() {
    json return_WdYulQe=json({});
    
        if (pPrivateDataSlot==NULL){
            return_WdYulQe["null"]=true;
            return return_WdYulQe;
        }
        return_WdYulQe=[&]() {
    json return_KNrfrvF=json({});
    return serialize_VkPrivateDataSlot(*pPrivateDataSlot);}();
return return_WdYulQe;}();

        writeToConn(result);
    }

    void handle_vkCreatePrivateDataSlotEXT(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkPrivateDataSlotCreateInfo* pCreateInfo
            ;
[&]() {
VkPrivateDataSlotCreateInfo* temp_CMozoLf;[&]() {

        if (data_json["members"]["pCreateInfo"].contains("null")){
        temp_CMozoLf=NULL;
        return;
        }
    temp_CMozoLf=(VkPrivateDataSlotCreateInfo*)malloc(sizeof(VkPrivateDataSlotCreateInfo));
[&]() {
*(temp_CMozoLf)=deserialize_VkPrivateDataSlotCreateInfo(data_json["members"]["pCreateInfo"]);}();
}();pCreateInfo=temp_CMozoLf;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkPrivateDataSlot* pPrivateDataSlot
        ;
[&]() {

        if (data_json["members"]["pPrivateDataSlot"].contains("null")){
        pPrivateDataSlot=NULL;
        return;
        }
    pPrivateDataSlot=(VkPrivateDataSlot*)malloc(sizeof(VkPrivateDataSlot));
[&]() {
*(pPrivateDataSlot)=deserialize_VkPrivateDataSlot(data_json["members"]["pPrivateDataSlot"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreatePrivateDataSlotEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreatePrivateDataSlotEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreatePrivateDataSlotEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreatePrivateDataSlotEXT");
    }  
    
auto return_value=call_function(device, pCreateInfo, pAllocator, pPrivateDataSlot);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_wNxgQXG=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pCreateInfo"]=[&]() {
    json return_UKIqoGH=json({});
    
        if (pCreateInfo==NULL){
            return_UKIqoGH["null"]=true;
            return return_UKIqoGH;
        }
        return_UKIqoGH=[&]() {
    json return_kfBqEux=json({});
    return serialize_VkPrivateDataSlotCreateInfo(*pCreateInfo);}();
return return_UKIqoGH;}();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pPrivateDataSlot"]=[&]() {
    json return_WdYulQe=json({});
    
        if (pPrivateDataSlot==NULL){
            return_WdYulQe["null"]=true;
            return return_WdYulQe;
        }
        return_WdYulQe=[&]() {
    json return_KNrfrvF=json({});
    return serialize_VkPrivateDataSlot(*pPrivateDataSlot);}();
return return_WdYulQe;}();

        writeToConn(result);
    }

    void handle_vkDestroyPrivateDataSlot(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkPrivateDataSlot privateDataSlot
            ;
[&]() {
privateDataSlot=deserialize_VkPrivateDataSlot(data_json["members"]["privateDataSlot"]);}();
VkAllocationCallbacks* pAllocator
        ;
[&]() {
VkAllocationCallbacks* temp_VAmhMvJ;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_VAmhMvJ=NULL;
        return;
        }
    temp_VAmhMvJ=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_VAmhMvJ)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_VAmhMvJ;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkDestroyPrivateDataSlot)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyPrivateDataSlot");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkDestroyPrivateDataSlot)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyPrivateDataSlot");
    }  
    
call_function(device, privateDataSlot, pAllocator);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["privateDataSlot"]=[&]() {
    json return_IxSRPBt=json({});
    return serialize_VkPrivateDataSlot(privateDataSlot);}();
result["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();

        writeToConn(result);
    }

    void handle_vkDestroyPrivateDataSlotEXT(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkPrivateDataSlot privateDataSlot
            ;
[&]() {
privateDataSlot=deserialize_VkPrivateDataSlot(data_json["members"]["privateDataSlot"]);}();
VkAllocationCallbacks* pAllocator
        ;
[&]() {
VkAllocationCallbacks* temp_VAmhMvJ;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_VAmhMvJ=NULL;
        return;
        }
    temp_VAmhMvJ=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_VAmhMvJ)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_VAmhMvJ;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkDestroyPrivateDataSlotEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyPrivateDataSlotEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkDestroyPrivateDataSlotEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyPrivateDataSlotEXT");
    }  
    
call_function(device, privateDataSlot, pAllocator);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["privateDataSlot"]=[&]() {
    json return_IxSRPBt=json({});
    return serialize_VkPrivateDataSlot(privateDataSlot);}();
result["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();

        writeToConn(result);
    }

    void handle_vkSetPrivateData(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkObjectType objectType
            ;
[&]() {
objectType=deserialize_VkObjectType(data_json["members"]["objectType"]);}();
uint64_t objectHandle
            ;
[&]() {
objectHandle=deserialize_uint64_t(data_json["members"]["objectHandle"]);}();
VkPrivateDataSlot privateDataSlot
            ;
[&]() {
privateDataSlot=deserialize_VkPrivateDataSlot(data_json["members"]["privateDataSlot"]);}();
uint64_t data
        ;
[&]() {
data=deserialize_uint64_t(data_json["members"]["data"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkSetPrivateData)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkSetPrivateData");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkSetPrivateData)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkSetPrivateData");
    }  
    
auto return_value=call_function(device, objectType, objectHandle, privateDataSlot, data);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_MFnRhjg=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["objectType"]=[&]() {
    json return_FKOHNgI=json({});
    return serialize_VkObjectType(objectType);}();
result["members"]["objectHandle"]=[&]() {
    json return_QENirqr=json({});
    return serialize_uint64_t(objectHandle);}();
result["members"]["privateDataSlot"]=[&]() {
    json return_IxSRPBt=json({});
    return serialize_VkPrivateDataSlot(privateDataSlot);}();
result["members"]["data"]=[&]() {
    json return_UBNkBfg=json({});
    return serialize_uint64_t(data);}();

        writeToConn(result);
    }

    void handle_vkSetPrivateDataEXT(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkObjectType objectType
            ;
[&]() {
objectType=deserialize_VkObjectType(data_json["members"]["objectType"]);}();
uint64_t objectHandle
            ;
[&]() {
objectHandle=deserialize_uint64_t(data_json["members"]["objectHandle"]);}();
VkPrivateDataSlot privateDataSlot
            ;
[&]() {
privateDataSlot=deserialize_VkPrivateDataSlot(data_json["members"]["privateDataSlot"]);}();
uint64_t data
        ;
[&]() {
data=deserialize_uint64_t(data_json["members"]["data"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkSetPrivateDataEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkSetPrivateDataEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkSetPrivateDataEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkSetPrivateDataEXT");
    }  
    
auto return_value=call_function(device, objectType, objectHandle, privateDataSlot, data);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_BTdGZcH=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["objectType"]=[&]() {
    json return_FKOHNgI=json({});
    return serialize_VkObjectType(objectType);}();
result["members"]["objectHandle"]=[&]() {
    json return_QENirqr=json({});
    return serialize_uint64_t(objectHandle);}();
result["members"]["privateDataSlot"]=[&]() {
    json return_IxSRPBt=json({});
    return serialize_VkPrivateDataSlot(privateDataSlot);}();
result["members"]["data"]=[&]() {
    json return_UBNkBfg=json({});
    return serialize_uint64_t(data);}();

        writeToConn(result);
    }

    void handle_vkGetPrivateData(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkObjectType objectType
            ;
[&]() {
objectType=deserialize_VkObjectType(data_json["members"]["objectType"]);}();
uint64_t objectHandle
            ;
[&]() {
objectHandle=deserialize_uint64_t(data_json["members"]["objectHandle"]);}();
VkPrivateDataSlot privateDataSlot
            ;
[&]() {
privateDataSlot=deserialize_VkPrivateDataSlot(data_json["members"]["privateDataSlot"]);}();
uint64_t* pData
        ;
[&]() {

        if (data_json["members"]["pData"].contains("null")){
        pData=NULL;
        return;
        }
    pData=(uint64_t*)malloc(sizeof(uint64_t));
[&]() {
*(pData)=deserialize_uint64_t(data_json["members"]["pData"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPrivateData)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPrivateData");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPrivateData)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPrivateData");
    }  
    
call_function(device, objectType, objectHandle, privateDataSlot, pData);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["objectType"]=[&]() {
    json return_FKOHNgI=json({});
    return serialize_VkObjectType(objectType);}();
result["members"]["objectHandle"]=[&]() {
    json return_QENirqr=json({});
    return serialize_uint64_t(objectHandle);}();
result["members"]["privateDataSlot"]=[&]() {
    json return_IxSRPBt=json({});
    return serialize_VkPrivateDataSlot(privateDataSlot);}();
result["members"]["pData"]=[&]() {
    json return_jFrVNYC=json({});
    
        if (pData==NULL){
            return_jFrVNYC["null"]=true;
            return return_jFrVNYC;
        }
        return_jFrVNYC=[&]() {
    json return_hjoBxyr=json({});
    return serialize_uint64_t(*pData);}();
return return_jFrVNYC;}();

        writeToConn(result);
    }

    void handle_vkGetPrivateDataEXT(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkObjectType objectType
            ;
[&]() {
objectType=deserialize_VkObjectType(data_json["members"]["objectType"]);}();
uint64_t objectHandle
            ;
[&]() {
objectHandle=deserialize_uint64_t(data_json["members"]["objectHandle"]);}();
VkPrivateDataSlot privateDataSlot
            ;
[&]() {
privateDataSlot=deserialize_VkPrivateDataSlot(data_json["members"]["privateDataSlot"]);}();
uint64_t* pData
        ;
[&]() {

        if (data_json["members"]["pData"].contains("null")){
        pData=NULL;
        return;
        }
    pData=(uint64_t*)malloc(sizeof(uint64_t));
[&]() {
*(pData)=deserialize_uint64_t(data_json["members"]["pData"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPrivateDataEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPrivateDataEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPrivateDataEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPrivateDataEXT");
    }  
    
call_function(device, objectType, objectHandle, privateDataSlot, pData);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["objectType"]=[&]() {
    json return_FKOHNgI=json({});
    return serialize_VkObjectType(objectType);}();
result["members"]["objectHandle"]=[&]() {
    json return_QENirqr=json({});
    return serialize_uint64_t(objectHandle);}();
result["members"]["privateDataSlot"]=[&]() {
    json return_IxSRPBt=json({});
    return serialize_VkPrivateDataSlot(privateDataSlot);}();
result["members"]["pData"]=[&]() {
    json return_jFrVNYC=json({});
    
        if (pData==NULL){
            return_jFrVNYC["null"]=true;
            return return_jFrVNYC;
        }
        return_jFrVNYC=[&]() {
    json return_hjoBxyr=json({});
    return serialize_uint64_t(*pData);}();
return return_jFrVNYC;}();

        writeToConn(result);
    }

    void handle_vkCmdCopyBuffer2(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkCopyBufferInfo2* pCopyBufferInfo
        ;
[&]() {
VkCopyBufferInfo2* temp_ZDylqDI;[&]() {

        if (data_json["members"]["pCopyBufferInfo"].contains("null")){
        temp_ZDylqDI=NULL;
        return;
        }
    temp_ZDylqDI=(VkCopyBufferInfo2*)malloc(sizeof(VkCopyBufferInfo2));
[&]() {
*(temp_ZDylqDI)=deserialize_VkCopyBufferInfo2(data_json["members"]["pCopyBufferInfo"]);}();
}();pCopyBufferInfo=temp_ZDylqDI;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdCopyBuffer2)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdCopyBuffer2");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdCopyBuffer2)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdCopyBuffer2");
    }  
    
call_function(commandBuffer, pCopyBufferInfo);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pCopyBufferInfo"]=[&]() {
    json return_WJOqvuo=json({});
    
        if (pCopyBufferInfo==NULL){
            return_WJOqvuo["null"]=true;
            return return_WJOqvuo;
        }
        return_WJOqvuo=[&]() {
    json return_UxOOivS=json({});
    return serialize_VkCopyBufferInfo2(*pCopyBufferInfo);}();
return return_WJOqvuo;}();

        writeToConn(result);
    }

    void handle_vkCmdCopyBuffer2KHR(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkCopyBufferInfo2* pCopyBufferInfo
        ;
[&]() {
VkCopyBufferInfo2* temp_ZDylqDI;[&]() {

        if (data_json["members"]["pCopyBufferInfo"].contains("null")){
        temp_ZDylqDI=NULL;
        return;
        }
    temp_ZDylqDI=(VkCopyBufferInfo2*)malloc(sizeof(VkCopyBufferInfo2));
[&]() {
*(temp_ZDylqDI)=deserialize_VkCopyBufferInfo2(data_json["members"]["pCopyBufferInfo"]);}();
}();pCopyBufferInfo=temp_ZDylqDI;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdCopyBuffer2KHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdCopyBuffer2KHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdCopyBuffer2KHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdCopyBuffer2KHR");
    }  
    
call_function(commandBuffer, pCopyBufferInfo);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pCopyBufferInfo"]=[&]() {
    json return_WJOqvuo=json({});
    
        if (pCopyBufferInfo==NULL){
            return_WJOqvuo["null"]=true;
            return return_WJOqvuo;
        }
        return_WJOqvuo=[&]() {
    json return_UxOOivS=json({});
    return serialize_VkCopyBufferInfo2(*pCopyBufferInfo);}();
return return_WJOqvuo;}();

        writeToConn(result);
    }

    void handle_vkCmdCopyImage2(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkCopyImageInfo2* pCopyImageInfo
        ;
[&]() {
VkCopyImageInfo2* temp_JUKQdDn;[&]() {

        if (data_json["members"]["pCopyImageInfo"].contains("null")){
        temp_JUKQdDn=NULL;
        return;
        }
    temp_JUKQdDn=(VkCopyImageInfo2*)malloc(sizeof(VkCopyImageInfo2));
[&]() {
*(temp_JUKQdDn)=deserialize_VkCopyImageInfo2(data_json["members"]["pCopyImageInfo"]);}();
}();pCopyImageInfo=temp_JUKQdDn;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdCopyImage2)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdCopyImage2");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdCopyImage2)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdCopyImage2");
    }  
    
call_function(commandBuffer, pCopyImageInfo);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pCopyImageInfo"]=[&]() {
    json return_NAsYnFQ=json({});
    
        if (pCopyImageInfo==NULL){
            return_NAsYnFQ["null"]=true;
            return return_NAsYnFQ;
        }
        return_NAsYnFQ=[&]() {
    json return_MUwLGSh=json({});
    return serialize_VkCopyImageInfo2(*pCopyImageInfo);}();
return return_NAsYnFQ;}();

        writeToConn(result);
    }

    void handle_vkCmdCopyImage2KHR(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkCopyImageInfo2* pCopyImageInfo
        ;
[&]() {
VkCopyImageInfo2* temp_JUKQdDn;[&]() {

        if (data_json["members"]["pCopyImageInfo"].contains("null")){
        temp_JUKQdDn=NULL;
        return;
        }
    temp_JUKQdDn=(VkCopyImageInfo2*)malloc(sizeof(VkCopyImageInfo2));
[&]() {
*(temp_JUKQdDn)=deserialize_VkCopyImageInfo2(data_json["members"]["pCopyImageInfo"]);}();
}();pCopyImageInfo=temp_JUKQdDn;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdCopyImage2KHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdCopyImage2KHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdCopyImage2KHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdCopyImage2KHR");
    }  
    
call_function(commandBuffer, pCopyImageInfo);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pCopyImageInfo"]=[&]() {
    json return_NAsYnFQ=json({});
    
        if (pCopyImageInfo==NULL){
            return_NAsYnFQ["null"]=true;
            return return_NAsYnFQ;
        }
        return_NAsYnFQ=[&]() {
    json return_MUwLGSh=json({});
    return serialize_VkCopyImageInfo2(*pCopyImageInfo);}();
return return_NAsYnFQ;}();

        writeToConn(result);
    }

    void handle_vkCmdBlitImage2(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBlitImageInfo2* pBlitImageInfo
        ;
[&]() {
VkBlitImageInfo2* temp_oswYnrn;[&]() {

        if (data_json["members"]["pBlitImageInfo"].contains("null")){
        temp_oswYnrn=NULL;
        return;
        }
    temp_oswYnrn=(VkBlitImageInfo2*)malloc(sizeof(VkBlitImageInfo2));
[&]() {
*(temp_oswYnrn)=deserialize_VkBlitImageInfo2(data_json["members"]["pBlitImageInfo"]);}();
}();pBlitImageInfo=temp_oswYnrn;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdBlitImage2)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBlitImage2");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdBlitImage2)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBlitImage2");
    }  
    
call_function(commandBuffer, pBlitImageInfo);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pBlitImageInfo"]=[&]() {
    json return_TfIvjlb=json({});
    
        if (pBlitImageInfo==NULL){
            return_TfIvjlb["null"]=true;
            return return_TfIvjlb;
        }
        return_TfIvjlb=[&]() {
    json return_VkQeMIx=json({});
    return serialize_VkBlitImageInfo2(*pBlitImageInfo);}();
return return_TfIvjlb;}();

        writeToConn(result);
    }

    void handle_vkCmdBlitImage2KHR(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkBlitImageInfo2* pBlitImageInfo
        ;
[&]() {
VkBlitImageInfo2* temp_oswYnrn;[&]() {

        if (data_json["members"]["pBlitImageInfo"].contains("null")){
        temp_oswYnrn=NULL;
        return;
        }
    temp_oswYnrn=(VkBlitImageInfo2*)malloc(sizeof(VkBlitImageInfo2));
[&]() {
*(temp_oswYnrn)=deserialize_VkBlitImageInfo2(data_json["members"]["pBlitImageInfo"]);}();
}();pBlitImageInfo=temp_oswYnrn;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdBlitImage2KHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBlitImage2KHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdBlitImage2KHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBlitImage2KHR");
    }  
    
call_function(commandBuffer, pBlitImageInfo);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pBlitImageInfo"]=[&]() {
    json return_TfIvjlb=json({});
    
        if (pBlitImageInfo==NULL){
            return_TfIvjlb["null"]=true;
            return return_TfIvjlb;
        }
        return_TfIvjlb=[&]() {
    json return_VkQeMIx=json({});
    return serialize_VkBlitImageInfo2(*pBlitImageInfo);}();
return return_TfIvjlb;}();

        writeToConn(result);
    }

    void handle_vkCmdCopyBufferToImage2(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkCopyBufferToImageInfo2* pCopyBufferToImageInfo
        ;
[&]() {
VkCopyBufferToImageInfo2* temp_rYtQVkr;[&]() {

        if (data_json["members"]["pCopyBufferToImageInfo"].contains("null")){
        temp_rYtQVkr=NULL;
        return;
        }
    temp_rYtQVkr=(VkCopyBufferToImageInfo2*)malloc(sizeof(VkCopyBufferToImageInfo2));
[&]() {
*(temp_rYtQVkr)=deserialize_VkCopyBufferToImageInfo2(data_json["members"]["pCopyBufferToImageInfo"]);}();
}();pCopyBufferToImageInfo=temp_rYtQVkr;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdCopyBufferToImage2)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdCopyBufferToImage2");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdCopyBufferToImage2)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdCopyBufferToImage2");
    }  
    
call_function(commandBuffer, pCopyBufferToImageInfo);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pCopyBufferToImageInfo"]=[&]() {
    json return_BAFniQJ=json({});
    
        if (pCopyBufferToImageInfo==NULL){
            return_BAFniQJ["null"]=true;
            return return_BAFniQJ;
        }
        return_BAFniQJ=[&]() {
    json return_LpmivNp=json({});
    return serialize_VkCopyBufferToImageInfo2(*pCopyBufferToImageInfo);}();
return return_BAFniQJ;}();

        writeToConn(result);
    }

    void handle_vkCmdCopyBufferToImage2KHR(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkCopyBufferToImageInfo2* pCopyBufferToImageInfo
        ;
[&]() {
VkCopyBufferToImageInfo2* temp_rYtQVkr;[&]() {

        if (data_json["members"]["pCopyBufferToImageInfo"].contains("null")){
        temp_rYtQVkr=NULL;
        return;
        }
    temp_rYtQVkr=(VkCopyBufferToImageInfo2*)malloc(sizeof(VkCopyBufferToImageInfo2));
[&]() {
*(temp_rYtQVkr)=deserialize_VkCopyBufferToImageInfo2(data_json["members"]["pCopyBufferToImageInfo"]);}();
}();pCopyBufferToImageInfo=temp_rYtQVkr;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdCopyBufferToImage2KHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdCopyBufferToImage2KHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdCopyBufferToImage2KHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdCopyBufferToImage2KHR");
    }  
    
call_function(commandBuffer, pCopyBufferToImageInfo);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pCopyBufferToImageInfo"]=[&]() {
    json return_BAFniQJ=json({});
    
        if (pCopyBufferToImageInfo==NULL){
            return_BAFniQJ["null"]=true;
            return return_BAFniQJ;
        }
        return_BAFniQJ=[&]() {
    json return_LpmivNp=json({});
    return serialize_VkCopyBufferToImageInfo2(*pCopyBufferToImageInfo);}();
return return_BAFniQJ;}();

        writeToConn(result);
    }

    void handle_vkCmdCopyImageToBuffer2(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkCopyImageToBufferInfo2* pCopyImageToBufferInfo
        ;
[&]() {
VkCopyImageToBufferInfo2* temp_SqALVFh;[&]() {

        if (data_json["members"]["pCopyImageToBufferInfo"].contains("null")){
        temp_SqALVFh=NULL;
        return;
        }
    temp_SqALVFh=(VkCopyImageToBufferInfo2*)malloc(sizeof(VkCopyImageToBufferInfo2));
[&]() {
*(temp_SqALVFh)=deserialize_VkCopyImageToBufferInfo2(data_json["members"]["pCopyImageToBufferInfo"]);}();
}();pCopyImageToBufferInfo=temp_SqALVFh;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdCopyImageToBuffer2)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdCopyImageToBuffer2");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdCopyImageToBuffer2)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdCopyImageToBuffer2");
    }  
    
call_function(commandBuffer, pCopyImageToBufferInfo);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pCopyImageToBufferInfo"]=[&]() {
    json return_giJOUhS=json({});
    
        if (pCopyImageToBufferInfo==NULL){
            return_giJOUhS["null"]=true;
            return return_giJOUhS;
        }
        return_giJOUhS=[&]() {
    json return_vCWCuVZ=json({});
    return serialize_VkCopyImageToBufferInfo2(*pCopyImageToBufferInfo);}();
return return_giJOUhS;}();

        writeToConn(result);
    }

    void handle_vkCmdCopyImageToBuffer2KHR(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkCopyImageToBufferInfo2* pCopyImageToBufferInfo
        ;
[&]() {
VkCopyImageToBufferInfo2* temp_SqALVFh;[&]() {

        if (data_json["members"]["pCopyImageToBufferInfo"].contains("null")){
        temp_SqALVFh=NULL;
        return;
        }
    temp_SqALVFh=(VkCopyImageToBufferInfo2*)malloc(sizeof(VkCopyImageToBufferInfo2));
[&]() {
*(temp_SqALVFh)=deserialize_VkCopyImageToBufferInfo2(data_json["members"]["pCopyImageToBufferInfo"]);}();
}();pCopyImageToBufferInfo=temp_SqALVFh;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdCopyImageToBuffer2KHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdCopyImageToBuffer2KHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdCopyImageToBuffer2KHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdCopyImageToBuffer2KHR");
    }  
    
call_function(commandBuffer, pCopyImageToBufferInfo);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pCopyImageToBufferInfo"]=[&]() {
    json return_giJOUhS=json({});
    
        if (pCopyImageToBufferInfo==NULL){
            return_giJOUhS["null"]=true;
            return return_giJOUhS;
        }
        return_giJOUhS=[&]() {
    json return_vCWCuVZ=json({});
    return serialize_VkCopyImageToBufferInfo2(*pCopyImageToBufferInfo);}();
return return_giJOUhS;}();

        writeToConn(result);
    }

    void handle_vkCmdResolveImage2(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkResolveImageInfo2* pResolveImageInfo
        ;
[&]() {
VkResolveImageInfo2* temp_GbPdFOZ;[&]() {

        if (data_json["members"]["pResolveImageInfo"].contains("null")){
        temp_GbPdFOZ=NULL;
        return;
        }
    temp_GbPdFOZ=(VkResolveImageInfo2*)malloc(sizeof(VkResolveImageInfo2));
[&]() {
*(temp_GbPdFOZ)=deserialize_VkResolveImageInfo2(data_json["members"]["pResolveImageInfo"]);}();
}();pResolveImageInfo=temp_GbPdFOZ;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdResolveImage2)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdResolveImage2");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdResolveImage2)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdResolveImage2");
    }  
    
call_function(commandBuffer, pResolveImageInfo);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pResolveImageInfo"]=[&]() {
    json return_DoRDwhn=json({});
    
        if (pResolveImageInfo==NULL){
            return_DoRDwhn["null"]=true;
            return return_DoRDwhn;
        }
        return_DoRDwhn=[&]() {
    json return_TrXxkcS=json({});
    return serialize_VkResolveImageInfo2(*pResolveImageInfo);}();
return return_DoRDwhn;}();

        writeToConn(result);
    }

    void handle_vkCmdResolveImage2KHR(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkResolveImageInfo2* pResolveImageInfo
        ;
[&]() {
VkResolveImageInfo2* temp_GbPdFOZ;[&]() {

        if (data_json["members"]["pResolveImageInfo"].contains("null")){
        temp_GbPdFOZ=NULL;
        return;
        }
    temp_GbPdFOZ=(VkResolveImageInfo2*)malloc(sizeof(VkResolveImageInfo2));
[&]() {
*(temp_GbPdFOZ)=deserialize_VkResolveImageInfo2(data_json["members"]["pResolveImageInfo"]);}();
}();pResolveImageInfo=temp_GbPdFOZ;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdResolveImage2KHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdResolveImage2KHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdResolveImage2KHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdResolveImage2KHR");
    }  
    
call_function(commandBuffer, pResolveImageInfo);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pResolveImageInfo"]=[&]() {
    json return_DoRDwhn=json({});
    
        if (pResolveImageInfo==NULL){
            return_DoRDwhn["null"]=true;
            return return_DoRDwhn;
        }
        return_DoRDwhn=[&]() {
    json return_TrXxkcS=json({});
    return serialize_VkResolveImageInfo2(*pResolveImageInfo);}();
return return_DoRDwhn;}();

        writeToConn(result);
    }

    void handle_vkCmdSetFragmentShadingRateKHR(json data_json){
    //Will only be called by the server
    
VkCommandBuffer           commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkExtent2D*                           pFragmentSize
            ;
[&]() {
VkExtent2D* temp_WVAgiJV;[&]() {

        if (data_json["members"]["pFragmentSize"].contains("null")){
        temp_WVAgiJV=NULL;
        return;
        }
    temp_WVAgiJV=(VkExtent2D*)malloc(sizeof(VkExtent2D));
[&]() {
*(temp_WVAgiJV)=deserialize_VkExtent2D(data_json["members"]["pFragmentSize"]);}();
}();pFragmentSize=temp_WVAgiJV;}();
VkFragmentShadingRateCombinerOpKHR    combinerOps[2]
        ;
[&]() {

        for (int lYiIulB=0; lYiIulB < 2; lYiIulB++){
            [&]() {
VkFragmentShadingRateCombinerOpKHR temp_ILiuENk;[&]() {
temp_ILiuENk=deserialize_VkFragmentShadingRateCombinerOpKHR(data_json["members"]["combinerOps"]["members"][lYiIulB]);}();combinerOps[lYiIulB]=temp_ILiuENk;}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetFragmentShadingRateKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetFragmentShadingRateKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetFragmentShadingRateKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetFragmentShadingRateKHR");
    }  
    
call_function(commandBuffer, pFragmentSize, combinerOps);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_xppcZEe=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pFragmentSize"]=[&]() {
    json return_zJznnYs=json({});
    
        if (pFragmentSize==NULL){
            return_zJznnYs["null"]=true;
            return return_zJznnYs;
        }
        return_zJznnYs=[&]() {
    json return_qoUHOWY=json({});
    return serialize_VkExtent2D(*pFragmentSize);}();
return return_zJznnYs;}();
result["members"]["combinerOps"]=[&]() {
    json return_LNemlte=json({});
    
        return_LNemlte["members"]={};
        for(int LNemlte=0; LNemlte < 2; LNemlte++){
            json temp;
            temp=[&]() {
    json return_MsuTaUl=json({});
    return serialize_VkFragmentShadingRateCombinerOpKHR(combinerOps[LNemlte]);}();
            return_LNemlte["members"].push_back(temp);
        }
        return return_LNemlte;
        }();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceFragmentShadingRatesKHR(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
uint32_t* pFragmentShadingRateCount
            ;
[&]() {

        if (data_json["members"]["pFragmentShadingRateCount"].contains("null")){
        pFragmentShadingRateCount=NULL;
        return;
        }
    pFragmentShadingRateCount=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pFragmentShadingRateCount)=deserialize_uint32_t(data_json["members"]["pFragmentShadingRateCount"]);}();
}();
VkPhysicalDeviceFragmentShadingRateKHR* pFragmentShadingRates
        ;
[&]() {

        if (data_json["members"]["pFragmentShadingRates"].contains("null")){
        pFragmentShadingRates=NULL;
        return;
        }
    pFragmentShadingRates=(VkPhysicalDeviceFragmentShadingRateKHR*)malloc(*pFragmentShadingRateCount*sizeof(VkPhysicalDeviceFragmentShadingRateKHR));
        for (int NNjEFkV=0; NNjEFkV < *pFragmentShadingRateCount; NNjEFkV++){
            [&]() {
pFragmentShadingRates[NNjEFkV]=deserialize_VkPhysicalDeviceFragmentShadingRateKHR(data_json["members"]["pFragmentShadingRates"]["members"][NNjEFkV]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceFragmentShadingRatesKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceFragmentShadingRatesKHR");
    }  
    
auto return_value=call_function(physicalDevice, pFragmentShadingRateCount, pFragmentShadingRates);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_YlGGyqd=json({});
    return serialize_VkResult(return_value);}();
result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["pFragmentShadingRateCount"]=[&]() {
    json return_uHuUHdU=json({});
    
        if (pFragmentShadingRateCount==NULL){
            return_uHuUHdU["null"]=true;
            return return_uHuUHdU;
        }
        return_uHuUHdU=[&]() {
    json return_jCtTEZy=json({});
    return serialize_uint32_t(*pFragmentShadingRateCount);}();
return return_uHuUHdU;}();
result["members"]["pFragmentShadingRates"]=[&]() {
    json return_HQFayFb=json({});
    
        if (pFragmentShadingRates==NULL){
            return_HQFayFb["null"]=true;
            return return_HQFayFb;
        }
        
        return_HQFayFb["members"]={};
        for(int HQFayFb=0; HQFayFb < *pFragmentShadingRateCount; HQFayFb++){
            json temp;
            temp=[&]() {
    json return_HszRaLD=json({});
    return serialize_VkPhysicalDeviceFragmentShadingRateKHR(pFragmentShadingRates[HQFayFb]);}();
            return_HQFayFb["members"].push_back(temp);
        }
        return return_HQFayFb;
        }();

        writeToConn(result);
    }

    void handle_vkCmdSetFragmentShadingRateEnumNV(json data_json){
    //Will only be called by the server
    
VkCommandBuffer           commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkFragmentShadingRateNV                     shadingRate
            ;
[&]() {
shadingRate=deserialize_VkFragmentShadingRateNV(data_json["members"]["shadingRate"]);}();
VkFragmentShadingRateCombinerOpKHR    combinerOps[2]
        ;
[&]() {

        for (int lYiIulB=0; lYiIulB < 2; lYiIulB++){
            [&]() {
VkFragmentShadingRateCombinerOpKHR temp_ILiuENk;[&]() {
temp_ILiuENk=deserialize_VkFragmentShadingRateCombinerOpKHR(data_json["members"]["combinerOps"]["members"][lYiIulB]);}();combinerOps[lYiIulB]=temp_ILiuENk;}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetFragmentShadingRateEnumNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetFragmentShadingRateEnumNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetFragmentShadingRateEnumNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetFragmentShadingRateEnumNV");
    }  
    
call_function(commandBuffer, shadingRate, combinerOps);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_xppcZEe=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["shadingRate"]=[&]() {
    json return_WOshTwT=json({});
    return serialize_VkFragmentShadingRateNV(shadingRate);}();
result["members"]["combinerOps"]=[&]() {
    json return_LNemlte=json({});
    
        return_LNemlte["members"]={};
        for(int LNemlte=0; LNemlte < 2; LNemlte++){
            json temp;
            temp=[&]() {
    json return_MsuTaUl=json({});
    return serialize_VkFragmentShadingRateCombinerOpKHR(combinerOps[LNemlte]);}();
            return_LNemlte["members"].push_back(temp);
        }
        return return_LNemlte;
        }();

        writeToConn(result);
    }

    void handle_vkGetAccelerationStructureBuildSizesKHR(json data_json){
    //Will only be called by the server
    
VkDevice                                            device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkAccelerationStructureBuildTypeKHR                 buildType
            ;
[&]() {
buildType=deserialize_VkAccelerationStructureBuildTypeKHR(data_json["members"]["buildType"]);}();
VkAccelerationStructureBuildGeometryInfoKHR*  pBuildInfo
            ;
[&]() {
VkAccelerationStructureBuildGeometryInfoKHR* temp_HkFteJK;[&]() {

        if (data_json["members"]["pBuildInfo"].contains("null")){
        temp_HkFteJK=NULL;
        return;
        }
    temp_HkFteJK=(VkAccelerationStructureBuildGeometryInfoKHR*)malloc(sizeof(VkAccelerationStructureBuildGeometryInfoKHR));
[&]() {
*(temp_HkFteJK)=deserialize_VkAccelerationStructureBuildGeometryInfoKHR(data_json["members"]["pBuildInfo"]);}();
}();pBuildInfo=temp_HkFteJK;}();
uint32_t*  pMaxPrimitiveCounts
            ;
[&]() {
uint32_t* temp_lRITgYE;[&]() {

        if (data_json["members"]["pMaxPrimitiveCounts"].contains("null")){
        temp_lRITgYE=NULL;
        return;
        }
    temp_lRITgYE=(uint32_t*)malloc(pBuildInfo->geometryCount*sizeof(uint32_t));
        for (int teMvqsG=0; teMvqsG < pBuildInfo->geometryCount; teMvqsG++){
            [&]() {
temp_lRITgYE[teMvqsG]=deserialize_uint32_t(data_json["members"]["pMaxPrimitiveCounts"]["members"][teMvqsG]);}();;
        }
        }();pMaxPrimitiveCounts=temp_lRITgYE;}();
VkAccelerationStructureBuildSizesInfoKHR*           pSizeInfo
        ;
[&]() {

        if (data_json["members"]["pSizeInfo"].contains("null")){
        pSizeInfo=NULL;
        return;
        }
    pSizeInfo=(VkAccelerationStructureBuildSizesInfoKHR*)malloc(sizeof(VkAccelerationStructureBuildSizesInfoKHR));
[&]() {
*(pSizeInfo)=deserialize_VkAccelerationStructureBuildSizesInfoKHR(data_json["members"]["pSizeInfo"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetAccelerationStructureBuildSizesKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetAccelerationStructureBuildSizesKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetAccelerationStructureBuildSizesKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetAccelerationStructureBuildSizesKHR");
    }  
    
call_function(device, buildType, pBuildInfo, pMaxPrimitiveCounts, pSizeInfo);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_hNzkaKt=json({});
    return serialize_VkDevice(device);}();
result["members"]["buildType"]=[&]() {
    json return_kfIIDlQ=json({});
    return serialize_VkAccelerationStructureBuildTypeKHR(buildType);}();
result["members"]["pBuildInfo"]=[&]() {
    json return_mtYeHhm=json({});
    
        if (pBuildInfo==NULL){
            return_mtYeHhm["null"]=true;
            return return_mtYeHhm;
        }
        return_mtYeHhm=[&]() {
    json return_SEVqHCs=json({});
    return serialize_VkAccelerationStructureBuildGeometryInfoKHR(*pBuildInfo);}();
return return_mtYeHhm;}();
result["members"]["pMaxPrimitiveCounts"]=[&]() {
    json return_PomaCLF=json({});
    
        if (pMaxPrimitiveCounts==NULL){
            return_PomaCLF["null"]=true;
            return return_PomaCLF;
        }
        
        return_PomaCLF["members"]={};
        for(int PomaCLF=0; PomaCLF < pBuildInfo->geometryCount; PomaCLF++){
            json temp;
            temp=[&]() {
    json return_RRTYYEU=json({});
    return serialize_uint32_t(pMaxPrimitiveCounts[PomaCLF]);}();
            return_PomaCLF["members"].push_back(temp);
        }
        return return_PomaCLF;
        }();
result["members"]["pSizeInfo"]=[&]() {
    json return_pwVaXgY=json({});
    
        if (pSizeInfo==NULL){
            return_pwVaXgY["null"]=true;
            return return_pwVaXgY;
        }
        return_pwVaXgY=[&]() {
    json return_lvnSQDn=json({});
    return serialize_VkAccelerationStructureBuildSizesInfoKHR(*pSizeInfo);}();
return return_pwVaXgY;}();

        writeToConn(result);
    }

    void handle_vkCmdSetVertexInputEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t vertexBindingDescriptionCount
            ;
[&]() {
vertexBindingDescriptionCount=deserialize_uint32_t(data_json["members"]["vertexBindingDescriptionCount"]);}();
VkVertexInputBindingDescription2EXT* pVertexBindingDescriptions
            ;
[&]() {
VkVertexInputBindingDescription2EXT* temp_ZJoAdzN;[&]() {

        if (data_json["members"]["pVertexBindingDescriptions"].contains("null")){
        temp_ZJoAdzN=NULL;
        return;
        }
    temp_ZJoAdzN=(VkVertexInputBindingDescription2EXT*)malloc(vertexBindingDescriptionCount*sizeof(VkVertexInputBindingDescription2EXT));
        for (int JTWRmFL=0; JTWRmFL < vertexBindingDescriptionCount; JTWRmFL++){
            [&]() {
temp_ZJoAdzN[JTWRmFL]=deserialize_VkVertexInputBindingDescription2EXT(data_json["members"]["pVertexBindingDescriptions"]["members"][JTWRmFL]);}();;
        }
        }();pVertexBindingDescriptions=temp_ZJoAdzN;}();
uint32_t vertexAttributeDescriptionCount
            ;
[&]() {
vertexAttributeDescriptionCount=deserialize_uint32_t(data_json["members"]["vertexAttributeDescriptionCount"]);}();
VkVertexInputAttributeDescription2EXT* pVertexAttributeDescriptions
        ;
[&]() {
VkVertexInputAttributeDescription2EXT* temp_ieqEfob;[&]() {

        if (data_json["members"]["pVertexAttributeDescriptions"].contains("null")){
        temp_ieqEfob=NULL;
        return;
        }
    temp_ieqEfob=(VkVertexInputAttributeDescription2EXT*)malloc(vertexAttributeDescriptionCount*sizeof(VkVertexInputAttributeDescription2EXT));
        for (int rEocSYt=0; rEocSYt < vertexAttributeDescriptionCount; rEocSYt++){
            [&]() {
temp_ieqEfob[rEocSYt]=deserialize_VkVertexInputAttributeDescription2EXT(data_json["members"]["pVertexAttributeDescriptions"]["members"][rEocSYt]);}();;
        }
        }();pVertexAttributeDescriptions=temp_ieqEfob;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetVertexInputEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetVertexInputEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetVertexInputEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetVertexInputEXT");
    }  
    
call_function(commandBuffer, vertexBindingDescriptionCount, pVertexBindingDescriptions, vertexAttributeDescriptionCount, pVertexAttributeDescriptions);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["vertexBindingDescriptionCount"]=[&]() {
    json return_wjHVkdR=json({});
    return serialize_uint32_t(vertexBindingDescriptionCount);}();
result["members"]["pVertexBindingDescriptions"]=[&]() {
    json return_xczWBKo=json({});
    
        if (pVertexBindingDescriptions==NULL){
            return_xczWBKo["null"]=true;
            return return_xczWBKo;
        }
        
        return_xczWBKo["members"]={};
        for(int xczWBKo=0; xczWBKo < vertexBindingDescriptionCount; xczWBKo++){
            json temp;
            temp=[&]() {
    json return_dRINQvs=json({});
    return serialize_VkVertexInputBindingDescription2EXT(pVertexBindingDescriptions[xczWBKo]);}();
            return_xczWBKo["members"].push_back(temp);
        }
        return return_xczWBKo;
        }();
result["members"]["vertexAttributeDescriptionCount"]=[&]() {
    json return_ppBaKoo=json({});
    return serialize_uint32_t(vertexAttributeDescriptionCount);}();
result["members"]["pVertexAttributeDescriptions"]=[&]() {
    json return_gHcJtep=json({});
    
        if (pVertexAttributeDescriptions==NULL){
            return_gHcJtep["null"]=true;
            return return_gHcJtep;
        }
        
        return_gHcJtep["members"]={};
        for(int gHcJtep=0; gHcJtep < vertexAttributeDescriptionCount; gHcJtep++){
            json temp;
            temp=[&]() {
    json return_vwtGMqq=json({});
    return serialize_VkVertexInputAttributeDescription2EXT(pVertexAttributeDescriptions[gHcJtep]);}();
            return_gHcJtep["members"].push_back(temp);
        }
        return return_gHcJtep;
        }();

        writeToConn(result);
    }

    void handle_vkCmdSetColorWriteEnableEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer       commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t                                attachmentCount
            ;
[&]() {
attachmentCount=deserialize_uint32_t(data_json["members"]["attachmentCount"]);}();
VkBool32*   pColorWriteEnables
        ;
[&]() {
VkBool32* temp_ACyIqGx;[&]() {

        if (data_json["members"]["pColorWriteEnables"].contains("null")){
        temp_ACyIqGx=NULL;
        return;
        }
    [&]() {

        if (data_json["members"]["pColorWriteEnables"].contains("null")){
        temp_ACyIqGx=NULL;
        return;
        }
    temp_ACyIqGx=(uint32_t*)malloc(attachmentCount*sizeof(uint32_t));
        for (int VDSfnVX=0; VDSfnVX < attachmentCount; VDSfnVX++){
            [&]() {
temp_ACyIqGx[VDSfnVX]=deserialize_uint32_t(data_json["members"]["pColorWriteEnables"]["members"][VDSfnVX]);}();;
        }
        }();}();pColorWriteEnables=temp_ACyIqGx;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetColorWriteEnableEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetColorWriteEnableEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetColorWriteEnableEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetColorWriteEnableEXT");
    }  
    
call_function(commandBuffer, attachmentCount, pColorWriteEnables);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_EOdbxEE=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["attachmentCount"]=[&]() {
    json return_iAlOkZp=json({});
    return serialize_uint32_t(attachmentCount);}();
result["members"]["pColorWriteEnables"]=[&]() {
    json return_JEUmWLf=json({});
    
        if (pColorWriteEnables==NULL){
            return_JEUmWLf["null"]=true;
            return return_JEUmWLf;
        }
        
        return_JEUmWLf["members"]={};
        for(int JEUmWLf=0; JEUmWLf < attachmentCount; JEUmWLf++){
            json temp;
            temp=[&]() {
    json return_yGcccEA=json({});
    return_yGcccEA=[&]() {
    json return_REiOilp=json({});
    return serialize_uint32_t(pColorWriteEnables[JEUmWLf]);}();return return_yGcccEA;}();
            return_JEUmWLf["members"].push_back(temp);
        }
        return return_JEUmWLf;
        }();

        writeToConn(result);
    }

    void handle_vkCmdSetEvent2(json data_json){
    //Will only be called by the server
    
VkCommandBuffer                   commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkEvent                                             event
            ;
[&]() {
event=deserialize_VkEvent(data_json["members"]["event"]);}();
VkDependencyInfo*                             pDependencyInfo
        ;
[&]() {
VkDependencyInfo* temp_tiECcRx;[&]() {

        if (data_json["members"]["pDependencyInfo"].contains("null")){
        temp_tiECcRx=NULL;
        return;
        }
    temp_tiECcRx=(VkDependencyInfo*)malloc(sizeof(VkDependencyInfo));
[&]() {
*(temp_tiECcRx)=deserialize_VkDependencyInfo(data_json["members"]["pDependencyInfo"]);}();
}();pDependencyInfo=temp_tiECcRx;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetEvent2)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetEvent2");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetEvent2)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetEvent2");
    }  
    
call_function(commandBuffer, event, pDependencyInfo);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_jOBmfhz=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["event"]=[&]() {
    json return_LFOObCs=json({});
    return serialize_VkEvent(event);}();
result["members"]["pDependencyInfo"]=[&]() {
    json return_kkgOCck=json({});
    
        if (pDependencyInfo==NULL){
            return_kkgOCck["null"]=true;
            return return_kkgOCck;
        }
        return_kkgOCck=[&]() {
    json return_pkUQycB=json({});
    return serialize_VkDependencyInfo(*pDependencyInfo);}();
return return_kkgOCck;}();

        writeToConn(result);
    }

    void handle_vkCmdSetEvent2KHR(json data_json){
    //Will only be called by the server
    
VkCommandBuffer                   commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkEvent                                             event
            ;
[&]() {
event=deserialize_VkEvent(data_json["members"]["event"]);}();
VkDependencyInfo*                             pDependencyInfo
        ;
[&]() {
VkDependencyInfo* temp_tiECcRx;[&]() {

        if (data_json["members"]["pDependencyInfo"].contains("null")){
        temp_tiECcRx=NULL;
        return;
        }
    temp_tiECcRx=(VkDependencyInfo*)malloc(sizeof(VkDependencyInfo));
[&]() {
*(temp_tiECcRx)=deserialize_VkDependencyInfo(data_json["members"]["pDependencyInfo"]);}();
}();pDependencyInfo=temp_tiECcRx;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetEvent2KHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetEvent2KHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetEvent2KHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetEvent2KHR");
    }  
    
call_function(commandBuffer, event, pDependencyInfo);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_jOBmfhz=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["event"]=[&]() {
    json return_LFOObCs=json({});
    return serialize_VkEvent(event);}();
result["members"]["pDependencyInfo"]=[&]() {
    json return_kkgOCck=json({});
    
        if (pDependencyInfo==NULL){
            return_kkgOCck["null"]=true;
            return return_kkgOCck;
        }
        return_kkgOCck=[&]() {
    json return_pkUQycB=json({});
    return serialize_VkDependencyInfo(*pDependencyInfo);}();
return return_kkgOCck;}();

        writeToConn(result);
    }

    void handle_vkCmdResetEvent2(json data_json){
    //Will only be called by the server
    
VkCommandBuffer                   commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkEvent                                             event
            ;
[&]() {
event=deserialize_VkEvent(data_json["members"]["event"]);}();
VkPipelineStageFlags2               stageMask
        ;
[&]() {
stageMask=deserialize_VkPipelineStageFlags2(data_json["members"]["stageMask"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdResetEvent2)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdResetEvent2");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdResetEvent2)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdResetEvent2");
    }  
    
call_function(commandBuffer, event, stageMask);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_jOBmfhz=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["event"]=[&]() {
    json return_LFOObCs=json({});
    return serialize_VkEvent(event);}();
result["members"]["stageMask"]=[&]() {
    json return_cPWzAnW=json({});
    return serialize_VkPipelineStageFlags2(stageMask);}();

        writeToConn(result);
    }

    void handle_vkCmdResetEvent2KHR(json data_json){
    //Will only be called by the server
    
VkCommandBuffer                   commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkEvent                                             event
            ;
[&]() {
event=deserialize_VkEvent(data_json["members"]["event"]);}();
VkPipelineStageFlags2               stageMask
        ;
[&]() {
stageMask=deserialize_VkPipelineStageFlags2(data_json["members"]["stageMask"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdResetEvent2KHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdResetEvent2KHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdResetEvent2KHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdResetEvent2KHR");
    }  
    
call_function(commandBuffer, event, stageMask);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_jOBmfhz=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["event"]=[&]() {
    json return_LFOObCs=json({});
    return serialize_VkEvent(event);}();
result["members"]["stageMask"]=[&]() {
    json return_cPWzAnW=json({});
    return serialize_VkPipelineStageFlags2(stageMask);}();

        writeToConn(result);
    }

    void handle_vkCmdWaitEvents2(json data_json){
    //Will only be called by the server
    
VkCommandBuffer                   commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t                                            eventCount
            ;
[&]() {
eventCount=deserialize_uint32_t(data_json["members"]["eventCount"]);}();
VkEvent*                     pEvents
            ;
[&]() {
VkEvent* temp_CDdCDhA;[&]() {

        if (data_json["members"]["pEvents"].contains("null")){
        temp_CDdCDhA=NULL;
        return;
        }
    temp_CDdCDhA=(VkEvent*)malloc(eventCount*sizeof(VkEvent));
        for (int zBtVszw=0; zBtVszw < eventCount; zBtVszw++){
            [&]() {
temp_CDdCDhA[zBtVszw]=deserialize_VkEvent(data_json["members"]["pEvents"]["members"][zBtVszw]);}();;
        }
        }();pEvents=temp_CDdCDhA;}();
VkDependencyInfo*            pDependencyInfos
        ;
[&]() {
VkDependencyInfo* temp_GDaNrzU;[&]() {

        if (data_json["members"]["pDependencyInfos"].contains("null")){
        temp_GDaNrzU=NULL;
        return;
        }
    temp_GDaNrzU=(VkDependencyInfo*)malloc(eventCount*sizeof(VkDependencyInfo));
        for (int plYhwwC=0; plYhwwC < eventCount; plYhwwC++){
            [&]() {
temp_GDaNrzU[plYhwwC]=deserialize_VkDependencyInfo(data_json["members"]["pDependencyInfos"]["members"][plYhwwC]);}();;
        }
        }();pDependencyInfos=temp_GDaNrzU;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdWaitEvents2)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdWaitEvents2");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdWaitEvents2)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdWaitEvents2");
    }  
    
call_function(commandBuffer, eventCount, pEvents, pDependencyInfos);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_jOBmfhz=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["eventCount"]=[&]() {
    json return_rbibyBV=json({});
    return serialize_uint32_t(eventCount);}();
result["members"]["pEvents"]=[&]() {
    json return_UJPrNIv=json({});
    
        if (pEvents==NULL){
            return_UJPrNIv["null"]=true;
            return return_UJPrNIv;
        }
        
        return_UJPrNIv["members"]={};
        for(int UJPrNIv=0; UJPrNIv < eventCount; UJPrNIv++){
            json temp;
            temp=[&]() {
    json return_vIWZEEQ=json({});
    return serialize_VkEvent(pEvents[UJPrNIv]);}();
            return_UJPrNIv["members"].push_back(temp);
        }
        return return_UJPrNIv;
        }();
result["members"]["pDependencyInfos"]=[&]() {
    json return_JaVtYbE=json({});
    
        if (pDependencyInfos==NULL){
            return_JaVtYbE["null"]=true;
            return return_JaVtYbE;
        }
        
        return_JaVtYbE["members"]={};
        for(int JaVtYbE=0; JaVtYbE < eventCount; JaVtYbE++){
            json temp;
            temp=[&]() {
    json return_DohkEPA=json({});
    return serialize_VkDependencyInfo(pDependencyInfos[JaVtYbE]);}();
            return_JaVtYbE["members"].push_back(temp);
        }
        return return_JaVtYbE;
        }();

        writeToConn(result);
    }

    void handle_vkCmdWaitEvents2KHR(json data_json){
    //Will only be called by the server
    
VkCommandBuffer                   commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t                                            eventCount
            ;
[&]() {
eventCount=deserialize_uint32_t(data_json["members"]["eventCount"]);}();
VkEvent*                     pEvents
            ;
[&]() {
VkEvent* temp_CDdCDhA;[&]() {

        if (data_json["members"]["pEvents"].contains("null")){
        temp_CDdCDhA=NULL;
        return;
        }
    temp_CDdCDhA=(VkEvent*)malloc(eventCount*sizeof(VkEvent));
        for (int zBtVszw=0; zBtVszw < eventCount; zBtVszw++){
            [&]() {
temp_CDdCDhA[zBtVszw]=deserialize_VkEvent(data_json["members"]["pEvents"]["members"][zBtVszw]);}();;
        }
        }();pEvents=temp_CDdCDhA;}();
VkDependencyInfo*            pDependencyInfos
        ;
[&]() {
VkDependencyInfo* temp_GDaNrzU;[&]() {

        if (data_json["members"]["pDependencyInfos"].contains("null")){
        temp_GDaNrzU=NULL;
        return;
        }
    temp_GDaNrzU=(VkDependencyInfo*)malloc(eventCount*sizeof(VkDependencyInfo));
        for (int plYhwwC=0; plYhwwC < eventCount; plYhwwC++){
            [&]() {
temp_GDaNrzU[plYhwwC]=deserialize_VkDependencyInfo(data_json["members"]["pDependencyInfos"]["members"][plYhwwC]);}();;
        }
        }();pDependencyInfos=temp_GDaNrzU;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdWaitEvents2KHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdWaitEvents2KHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdWaitEvents2KHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdWaitEvents2KHR");
    }  
    
call_function(commandBuffer, eventCount, pEvents, pDependencyInfos);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_jOBmfhz=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["eventCount"]=[&]() {
    json return_rbibyBV=json({});
    return serialize_uint32_t(eventCount);}();
result["members"]["pEvents"]=[&]() {
    json return_UJPrNIv=json({});
    
        if (pEvents==NULL){
            return_UJPrNIv["null"]=true;
            return return_UJPrNIv;
        }
        
        return_UJPrNIv["members"]={};
        for(int UJPrNIv=0; UJPrNIv < eventCount; UJPrNIv++){
            json temp;
            temp=[&]() {
    json return_vIWZEEQ=json({});
    return serialize_VkEvent(pEvents[UJPrNIv]);}();
            return_UJPrNIv["members"].push_back(temp);
        }
        return return_UJPrNIv;
        }();
result["members"]["pDependencyInfos"]=[&]() {
    json return_JaVtYbE=json({});
    
        if (pDependencyInfos==NULL){
            return_JaVtYbE["null"]=true;
            return return_JaVtYbE;
        }
        
        return_JaVtYbE["members"]={};
        for(int JaVtYbE=0; JaVtYbE < eventCount; JaVtYbE++){
            json temp;
            temp=[&]() {
    json return_DohkEPA=json({});
    return serialize_VkDependencyInfo(pDependencyInfos[JaVtYbE]);}();
            return_JaVtYbE["members"].push_back(temp);
        }
        return return_JaVtYbE;
        }();

        writeToConn(result);
    }

    void handle_vkCmdPipelineBarrier2(json data_json){
    //Will only be called by the server
    
VkCommandBuffer                   commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkDependencyInfo*                             pDependencyInfo
        ;
[&]() {
VkDependencyInfo* temp_tiECcRx;[&]() {

        if (data_json["members"]["pDependencyInfo"].contains("null")){
        temp_tiECcRx=NULL;
        return;
        }
    temp_tiECcRx=(VkDependencyInfo*)malloc(sizeof(VkDependencyInfo));
[&]() {
*(temp_tiECcRx)=deserialize_VkDependencyInfo(data_json["members"]["pDependencyInfo"]);}();
}();pDependencyInfo=temp_tiECcRx;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdPipelineBarrier2)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdPipelineBarrier2");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdPipelineBarrier2)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdPipelineBarrier2");
    }  
    
call_function(commandBuffer, pDependencyInfo);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_jOBmfhz=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pDependencyInfo"]=[&]() {
    json return_kkgOCck=json({});
    
        if (pDependencyInfo==NULL){
            return_kkgOCck["null"]=true;
            return return_kkgOCck;
        }
        return_kkgOCck=[&]() {
    json return_pkUQycB=json({});
    return serialize_VkDependencyInfo(*pDependencyInfo);}();
return return_kkgOCck;}();

        writeToConn(result);
    }

    void handle_vkCmdPipelineBarrier2KHR(json data_json){
    //Will only be called by the server
    
VkCommandBuffer                   commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkDependencyInfo*                             pDependencyInfo
        ;
[&]() {
VkDependencyInfo* temp_tiECcRx;[&]() {

        if (data_json["members"]["pDependencyInfo"].contains("null")){
        temp_tiECcRx=NULL;
        return;
        }
    temp_tiECcRx=(VkDependencyInfo*)malloc(sizeof(VkDependencyInfo));
[&]() {
*(temp_tiECcRx)=deserialize_VkDependencyInfo(data_json["members"]["pDependencyInfo"]);}();
}();pDependencyInfo=temp_tiECcRx;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdPipelineBarrier2KHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdPipelineBarrier2KHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdPipelineBarrier2KHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdPipelineBarrier2KHR");
    }  
    
call_function(commandBuffer, pDependencyInfo);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_jOBmfhz=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pDependencyInfo"]=[&]() {
    json return_kkgOCck=json({});
    
        if (pDependencyInfo==NULL){
            return_kkgOCck["null"]=true;
            return return_kkgOCck;
        }
        return_kkgOCck=[&]() {
    json return_pkUQycB=json({});
    return serialize_VkDependencyInfo(*pDependencyInfo);}();
return return_kkgOCck;}();

        writeToConn(result);
    }

    void handle_vkQueueSubmit2(json data_json){
    //Will only be called by the server
    
VkQueue                           queue
            ;
[&]() {
queue=deserialize_VkQueue(data_json["members"]["queue"]);}();
uint32_t                            submitCount
            ;
[&]() {
submitCount=deserialize_uint32_t(data_json["members"]["submitCount"]);}();
VkSubmitInfo2*              pSubmits
            ;
[&]() {
VkSubmitInfo2* temp_cOndwDG;[&]() {

        if (data_json["members"]["pSubmits"].contains("null")){
        temp_cOndwDG=NULL;
        return;
        }
    temp_cOndwDG=(VkSubmitInfo2*)malloc(submitCount*sizeof(VkSubmitInfo2));
        for (int nrGjzyd=0; nrGjzyd < submitCount; nrGjzyd++){
            [&]() {
temp_cOndwDG[nrGjzyd]=deserialize_VkSubmitInfo2(data_json["members"]["pSubmits"]["members"][nrGjzyd]);}();;
        }
        }();pSubmits=temp_cOndwDG;}();
VkFence           fence
        ;
[&]() {
fence=deserialize_VkFence(data_json["members"]["fence"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkQueueSubmit2)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkQueueSubmit2");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkQueueSubmit2)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkQueueSubmit2");
    }  
    
auto return_value=call_function(queue, submitCount, pSubmits, fence);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_UWHpmEt=json({});
    return serialize_VkResult(return_value);}();
result["members"]["queue"]=[&]() {
    json return_AkqMTbB=json({});
    return serialize_VkQueue(queue);}();
result["members"]["submitCount"]=[&]() {
    json return_ytAANCG=json({});
    return serialize_uint32_t(submitCount);}();
result["members"]["pSubmits"]=[&]() {
    json return_eUrnsts=json({});
    
        if (pSubmits==NULL){
            return_eUrnsts["null"]=true;
            return return_eUrnsts;
        }
        
        return_eUrnsts["members"]={};
        for(int eUrnsts=0; eUrnsts < submitCount; eUrnsts++){
            json temp;
            temp=[&]() {
    json return_crZjbBA=json({});
    return serialize_VkSubmitInfo2(pSubmits[eUrnsts]);}();
            return_eUrnsts["members"].push_back(temp);
        }
        return return_eUrnsts;
        }();
result["members"]["fence"]=[&]() {
    json return_tKvDatk=json({});
    return serialize_VkFence(fence);}();

        writeToConn(result);
    }

    void handle_vkQueueSubmit2KHR(json data_json){
    //Will only be called by the server
    
VkQueue                           queue
            ;
[&]() {
queue=deserialize_VkQueue(data_json["members"]["queue"]);}();
uint32_t                            submitCount
            ;
[&]() {
submitCount=deserialize_uint32_t(data_json["members"]["submitCount"]);}();
VkSubmitInfo2*              pSubmits
            ;
[&]() {
VkSubmitInfo2* temp_cOndwDG;[&]() {

        if (data_json["members"]["pSubmits"].contains("null")){
        temp_cOndwDG=NULL;
        return;
        }
    temp_cOndwDG=(VkSubmitInfo2*)malloc(submitCount*sizeof(VkSubmitInfo2));
        for (int nrGjzyd=0; nrGjzyd < submitCount; nrGjzyd++){
            [&]() {
temp_cOndwDG[nrGjzyd]=deserialize_VkSubmitInfo2(data_json["members"]["pSubmits"]["members"][nrGjzyd]);}();;
        }
        }();pSubmits=temp_cOndwDG;}();
VkFence           fence
        ;
[&]() {
fence=deserialize_VkFence(data_json["members"]["fence"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkQueueSubmit2KHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkQueueSubmit2KHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkQueueSubmit2KHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkQueueSubmit2KHR");
    }  
    
auto return_value=call_function(queue, submitCount, pSubmits, fence);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_nYojuyN=json({});
    return serialize_VkResult(return_value);}();
result["members"]["queue"]=[&]() {
    json return_AkqMTbB=json({});
    return serialize_VkQueue(queue);}();
result["members"]["submitCount"]=[&]() {
    json return_ytAANCG=json({});
    return serialize_uint32_t(submitCount);}();
result["members"]["pSubmits"]=[&]() {
    json return_eUrnsts=json({});
    
        if (pSubmits==NULL){
            return_eUrnsts["null"]=true;
            return return_eUrnsts;
        }
        
        return_eUrnsts["members"]={};
        for(int eUrnsts=0; eUrnsts < submitCount; eUrnsts++){
            json temp;
            temp=[&]() {
    json return_crZjbBA=json({});
    return serialize_VkSubmitInfo2(pSubmits[eUrnsts]);}();
            return_eUrnsts["members"].push_back(temp);
        }
        return return_eUrnsts;
        }();
result["members"]["fence"]=[&]() {
    json return_tKvDatk=json({});
    return serialize_VkFence(fence);}();

        writeToConn(result);
    }

    void handle_vkCmdWriteTimestamp2(json data_json){
    //Will only be called by the server
    
VkCommandBuffer                   commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkPipelineStageFlags2               stage
            ;
[&]() {
stage=deserialize_VkPipelineStageFlags2(data_json["members"]["stage"]);}();
VkQueryPool                                         queryPool
            ;
[&]() {
queryPool=deserialize_VkQueryPool(data_json["members"]["queryPool"]);}();
uint32_t                                            query
        ;
[&]() {
query=deserialize_uint32_t(data_json["members"]["query"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdWriteTimestamp2)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdWriteTimestamp2");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdWriteTimestamp2)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdWriteTimestamp2");
    }  
    
call_function(commandBuffer, stage, queryPool, query);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_jOBmfhz=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["stage"]=[&]() {
    json return_bQYmQjO=json({});
    return serialize_VkPipelineStageFlags2(stage);}();
result["members"]["queryPool"]=[&]() {
    json return_xTjaouv=json({});
    return serialize_VkQueryPool(queryPool);}();
result["members"]["query"]=[&]() {
    json return_zJOZHoy=json({});
    return serialize_uint32_t(query);}();

        writeToConn(result);
    }

    void handle_vkCmdWriteTimestamp2KHR(json data_json){
    //Will only be called by the server
    
VkCommandBuffer                   commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkPipelineStageFlags2               stage
            ;
[&]() {
stage=deserialize_VkPipelineStageFlags2(data_json["members"]["stage"]);}();
VkQueryPool                                         queryPool
            ;
[&]() {
queryPool=deserialize_VkQueryPool(data_json["members"]["queryPool"]);}();
uint32_t                                            query
        ;
[&]() {
query=deserialize_uint32_t(data_json["members"]["query"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdWriteTimestamp2KHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdWriteTimestamp2KHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdWriteTimestamp2KHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdWriteTimestamp2KHR");
    }  
    
call_function(commandBuffer, stage, queryPool, query);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_jOBmfhz=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["stage"]=[&]() {
    json return_bQYmQjO=json({});
    return serialize_VkPipelineStageFlags2(stage);}();
result["members"]["queryPool"]=[&]() {
    json return_xTjaouv=json({});
    return serialize_VkQueryPool(queryPool);}();
result["members"]["query"]=[&]() {
    json return_zJOZHoy=json({});
    return serialize_uint32_t(query);}();

        writeToConn(result);
    }

    void handle_vkCmdWriteBufferMarker2AMD(json data_json){
    //Will only be called by the server
    
VkCommandBuffer                   commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkPipelineStageFlags2               stage
            ;
[&]() {
stage=deserialize_VkPipelineStageFlags2(data_json["members"]["stage"]);}();
VkBuffer                                            dstBuffer
            ;
[&]() {
dstBuffer=deserialize_VkBuffer(data_json["members"]["dstBuffer"]);}();
VkDeviceSize                                        dstOffset
            ;
[&]() {
[&]() {
dstOffset=deserialize_uint64_t(data_json["members"]["dstOffset"]);}();}();
uint32_t                                            marker
        ;
[&]() {
marker=deserialize_uint32_t(data_json["members"]["marker"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdWriteBufferMarker2AMD)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdWriteBufferMarker2AMD");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdWriteBufferMarker2AMD)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdWriteBufferMarker2AMD");
    }  
    
call_function(commandBuffer, stage, dstBuffer, dstOffset, marker);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_jOBmfhz=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["stage"]=[&]() {
    json return_bQYmQjO=json({});
    return serialize_VkPipelineStageFlags2(stage);}();
result["members"]["dstBuffer"]=[&]() {
    json return_ARHYxHB=json({});
    return serialize_VkBuffer(dstBuffer);}();
result["members"]["dstOffset"]=[&]() {
    json return_gUfOvvi=json({});
    return_gUfOvvi=[&]() {
    json return_ruHhseZ=json({});
    return serialize_uint64_t(dstOffset);}();return return_gUfOvvi;}();
result["members"]["marker"]=[&]() {
    json return_UfTOyNL=json({});
    return serialize_uint32_t(marker);}();

        writeToConn(result);
    }

    void handle_vkGetQueueCheckpointData2NV(json data_json){
    //Will only be called by the server
    
VkQueue queue
            ;
[&]() {
queue=deserialize_VkQueue(data_json["members"]["queue"]);}();
uint32_t* pCheckpointDataCount
            ;
[&]() {

        if (data_json["members"]["pCheckpointDataCount"].contains("null")){
        pCheckpointDataCount=NULL;
        return;
        }
    pCheckpointDataCount=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pCheckpointDataCount)=deserialize_uint32_t(data_json["members"]["pCheckpointDataCount"]);}();
}();
VkCheckpointData2NV* pCheckpointData
        ;
[&]() {

        if (data_json["members"]["pCheckpointData"].contains("null")){
        pCheckpointData=NULL;
        return;
        }
    pCheckpointData=(VkCheckpointData2NV*)malloc(*pCheckpointDataCount*sizeof(VkCheckpointData2NV));
        for (int qGSartb=0; qGSartb < *pCheckpointDataCount; qGSartb++){
            [&]() {
pCheckpointData[qGSartb]=deserialize_VkCheckpointData2NV(data_json["members"]["pCheckpointData"]["members"][qGSartb]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetQueueCheckpointData2NV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetQueueCheckpointData2NV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetQueueCheckpointData2NV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetQueueCheckpointData2NV");
    }  
    
call_function(queue, pCheckpointDataCount, pCheckpointData);
json result=json({});
        result["type"]="Response";
    

result["members"]["queue"]=[&]() {
    json return_KYhcIBS=json({});
    return serialize_VkQueue(queue);}();
result["members"]["pCheckpointDataCount"]=[&]() {
    json return_eEWDbVZ=json({});
    
        if (pCheckpointDataCount==NULL){
            return_eEWDbVZ["null"]=true;
            return return_eEWDbVZ;
        }
        return_eEWDbVZ=[&]() {
    json return_UKDbbYU=json({});
    return serialize_uint32_t(*pCheckpointDataCount);}();
return return_eEWDbVZ;}();
result["members"]["pCheckpointData"]=[&]() {
    json return_YyAfdUR=json({});
    
        if (pCheckpointData==NULL){
            return_YyAfdUR["null"]=true;
            return return_YyAfdUR;
        }
        
        return_YyAfdUR["members"]={};
        for(int YyAfdUR=0; YyAfdUR < *pCheckpointDataCount; YyAfdUR++){
            json temp;
            temp=[&]() {
    json return_ipmppqq=json({});
    return serialize_VkCheckpointData2NV(pCheckpointData[YyAfdUR]);}();
            return_YyAfdUR["members"].push_back(temp);
        }
        return return_YyAfdUR;
        }();

        writeToConn(result);
    }

    void handle_vkCopyMemoryToImageEXT(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkCopyMemoryToImageInfoEXT* pCopyMemoryToImageInfo
        ;
[&]() {
VkCopyMemoryToImageInfoEXT* temp_jpLaqFR;[&]() {

        if (data_json["members"]["pCopyMemoryToImageInfo"].contains("null")){
        temp_jpLaqFR=NULL;
        return;
        }
    temp_jpLaqFR=(VkCopyMemoryToImageInfoEXT*)malloc(sizeof(VkCopyMemoryToImageInfoEXT));
[&]() {
*(temp_jpLaqFR)=deserialize_VkCopyMemoryToImageInfoEXT(data_json["members"]["pCopyMemoryToImageInfo"]);}();
}();pCopyMemoryToImageInfo=temp_jpLaqFR;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCopyMemoryToImageEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCopyMemoryToImageEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCopyMemoryToImageEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCopyMemoryToImageEXT");
    }  
    
auto return_value=call_function(device, pCopyMemoryToImageInfo);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_LuaNMgg=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pCopyMemoryToImageInfo"]=[&]() {
    json return_FHlXCaf=json({});
    
        if (pCopyMemoryToImageInfo==NULL){
            return_FHlXCaf["null"]=true;
            return return_FHlXCaf;
        }
        return_FHlXCaf=[&]() {
    json return_vFsAmYp=json({});
    return serialize_VkCopyMemoryToImageInfoEXT(*pCopyMemoryToImageInfo);}();
return return_FHlXCaf;}();

        writeToConn(result);
    }

    void handle_vkCopyImageToMemoryEXT(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkCopyImageToMemoryInfoEXT* pCopyImageToMemoryInfo
        ;
[&]() {
VkCopyImageToMemoryInfoEXT* temp_yMDzYHk;[&]() {

        if (data_json["members"]["pCopyImageToMemoryInfo"].contains("null")){
        temp_yMDzYHk=NULL;
        return;
        }
    temp_yMDzYHk=(VkCopyImageToMemoryInfoEXT*)malloc(sizeof(VkCopyImageToMemoryInfoEXT));
[&]() {
*(temp_yMDzYHk)=deserialize_VkCopyImageToMemoryInfoEXT(data_json["members"]["pCopyImageToMemoryInfo"]);}();
}();pCopyImageToMemoryInfo=temp_yMDzYHk;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCopyImageToMemoryEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCopyImageToMemoryEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCopyImageToMemoryEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCopyImageToMemoryEXT");
    }  
    
auto return_value=call_function(device, pCopyImageToMemoryInfo);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_QAiixvx=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pCopyImageToMemoryInfo"]=[&]() {
    json return_tRkegag=json({});
    
        if (pCopyImageToMemoryInfo==NULL){
            return_tRkegag["null"]=true;
            return return_tRkegag;
        }
        return_tRkegag=[&]() {
    json return_lauELyb=json({});
    return serialize_VkCopyImageToMemoryInfoEXT(*pCopyImageToMemoryInfo);}();
return return_tRkegag;}();

        writeToConn(result);
    }

    void handle_vkCopyImageToImageEXT(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkCopyImageToImageInfoEXT* pCopyImageToImageInfo
        ;
[&]() {
VkCopyImageToImageInfoEXT* temp_eMyolVE;[&]() {

        if (data_json["members"]["pCopyImageToImageInfo"].contains("null")){
        temp_eMyolVE=NULL;
        return;
        }
    temp_eMyolVE=(VkCopyImageToImageInfoEXT*)malloc(sizeof(VkCopyImageToImageInfoEXT));
[&]() {
*(temp_eMyolVE)=deserialize_VkCopyImageToImageInfoEXT(data_json["members"]["pCopyImageToImageInfo"]);}();
}();pCopyImageToImageInfo=temp_eMyolVE;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCopyImageToImageEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCopyImageToImageEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCopyImageToImageEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCopyImageToImageEXT");
    }  
    
auto return_value=call_function(device, pCopyImageToImageInfo);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_LGfNtia=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pCopyImageToImageInfo"]=[&]() {
    json return_cylMZXt=json({});
    
        if (pCopyImageToImageInfo==NULL){
            return_cylMZXt["null"]=true;
            return return_cylMZXt;
        }
        return_cylMZXt=[&]() {
    json return_jEOpQEf=json({});
    return serialize_VkCopyImageToImageInfoEXT(*pCopyImageToImageInfo);}();
return return_cylMZXt;}();

        writeToConn(result);
    }

    void handle_vkTransitionImageLayoutEXT(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
uint32_t transitionCount
            ;
[&]() {
transitionCount=deserialize_uint32_t(data_json["members"]["transitionCount"]);}();
VkHostImageLayoutTransitionInfoEXT* pTransitions
        ;
[&]() {
VkHostImageLayoutTransitionInfoEXT* temp_FRhZcrI;[&]() {

        if (data_json["members"]["pTransitions"].contains("null")){
        temp_FRhZcrI=NULL;
        return;
        }
    temp_FRhZcrI=(VkHostImageLayoutTransitionInfoEXT*)malloc(transitionCount*sizeof(VkHostImageLayoutTransitionInfoEXT));
        for (int tBgSFyU=0; tBgSFyU < transitionCount; tBgSFyU++){
            [&]() {
temp_FRhZcrI[tBgSFyU]=deserialize_VkHostImageLayoutTransitionInfoEXT(data_json["members"]["pTransitions"]["members"][tBgSFyU]);}();;
        }
        }();pTransitions=temp_FRhZcrI;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkTransitionImageLayoutEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkTransitionImageLayoutEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkTransitionImageLayoutEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkTransitionImageLayoutEXT");
    }  
    
auto return_value=call_function(device, transitionCount, pTransitions);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_noOaqSo=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["transitionCount"]=[&]() {
    json return_WZGNEGI=json({});
    return serialize_uint32_t(transitionCount);}();
result["members"]["pTransitions"]=[&]() {
    json return_atdqDNE=json({});
    
        if (pTransitions==NULL){
            return_atdqDNE["null"]=true;
            return return_atdqDNE;
        }
        
        return_atdqDNE["members"]={};
        for(int atdqDNE=0; atdqDNE < transitionCount; atdqDNE++){
            json temp;
            temp=[&]() {
    json return_ubwLBWM=json({});
    return serialize_VkHostImageLayoutTransitionInfoEXT(pTransitions[atdqDNE]);}();
            return_atdqDNE["members"].push_back(temp);
        }
        return return_atdqDNE;
        }();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceVideoCapabilitiesKHR(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
VkVideoProfileInfoKHR* pVideoProfile
            ;
[&]() {
VkVideoProfileInfoKHR* temp_gzKIfzH;[&]() {

        if (data_json["members"]["pVideoProfile"].contains("null")){
        temp_gzKIfzH=NULL;
        return;
        }
    temp_gzKIfzH=(VkVideoProfileInfoKHR*)malloc(sizeof(VkVideoProfileInfoKHR));
[&]() {
*(temp_gzKIfzH)=deserialize_VkVideoProfileInfoKHR(data_json["members"]["pVideoProfile"]);}();
}();pVideoProfile=temp_gzKIfzH;}();
VkVideoCapabilitiesKHR* pCapabilities
        ;
[&]() {

        if (data_json["members"]["pCapabilities"].contains("null")){
        pCapabilities=NULL;
        return;
        }
    pCapabilities=(VkVideoCapabilitiesKHR*)malloc(sizeof(VkVideoCapabilitiesKHR));
[&]() {
*(pCapabilities)=deserialize_VkVideoCapabilitiesKHR(data_json["members"]["pCapabilities"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceVideoCapabilitiesKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceVideoCapabilitiesKHR");
    }  
    
auto return_value=call_function(physicalDevice, pVideoProfile, pCapabilities);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_uDVTaDZ=json({});
    return serialize_VkResult(return_value);}();
result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["pVideoProfile"]=[&]() {
    json return_YZvOTMw=json({});
    
        if (pVideoProfile==NULL){
            return_YZvOTMw["null"]=true;
            return return_YZvOTMw;
        }
        return_YZvOTMw=[&]() {
    json return_anReIvE=json({});
    return serialize_VkVideoProfileInfoKHR(*pVideoProfile);}();
return return_YZvOTMw;}();
result["members"]["pCapabilities"]=[&]() {
    json return_twwgZMf=json({});
    
        if (pCapabilities==NULL){
            return_twwgZMf["null"]=true;
            return return_twwgZMf;
        }
        return_twwgZMf=[&]() {
    json return_bmHziZT=json({});
    return serialize_VkVideoCapabilitiesKHR(*pCapabilities);}();
return return_twwgZMf;}();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceVideoFormatPropertiesKHR(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
VkPhysicalDeviceVideoFormatInfoKHR* pVideoFormatInfo
            ;
[&]() {
VkPhysicalDeviceVideoFormatInfoKHR* temp_ikUUeoh;[&]() {

        if (data_json["members"]["pVideoFormatInfo"].contains("null")){
        temp_ikUUeoh=NULL;
        return;
        }
    temp_ikUUeoh=(VkPhysicalDeviceVideoFormatInfoKHR*)malloc(sizeof(VkPhysicalDeviceVideoFormatInfoKHR));
[&]() {
*(temp_ikUUeoh)=deserialize_VkPhysicalDeviceVideoFormatInfoKHR(data_json["members"]["pVideoFormatInfo"]);}();
}();pVideoFormatInfo=temp_ikUUeoh;}();
uint32_t* pVideoFormatPropertyCount
            ;
[&]() {

        if (data_json["members"]["pVideoFormatPropertyCount"].contains("null")){
        pVideoFormatPropertyCount=NULL;
        return;
        }
    pVideoFormatPropertyCount=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pVideoFormatPropertyCount)=deserialize_uint32_t(data_json["members"]["pVideoFormatPropertyCount"]);}();
}();
VkVideoFormatPropertiesKHR* pVideoFormatProperties
        ;
[&]() {

        if (data_json["members"]["pVideoFormatProperties"].contains("null")){
        pVideoFormatProperties=NULL;
        return;
        }
    pVideoFormatProperties=(VkVideoFormatPropertiesKHR*)malloc(*pVideoFormatPropertyCount*sizeof(VkVideoFormatPropertiesKHR));
        for (int FCsKhYI=0; FCsKhYI < *pVideoFormatPropertyCount; FCsKhYI++){
            [&]() {
pVideoFormatProperties[FCsKhYI]=deserialize_VkVideoFormatPropertiesKHR(data_json["members"]["pVideoFormatProperties"]["members"][FCsKhYI]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceVideoFormatPropertiesKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceVideoFormatPropertiesKHR");
    }  
    
auto return_value=call_function(physicalDevice, pVideoFormatInfo, pVideoFormatPropertyCount, pVideoFormatProperties);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_GOMZTJX=json({});
    return serialize_VkResult(return_value);}();
result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["pVideoFormatInfo"]=[&]() {
    json return_bgdbFXK=json({});
    
        if (pVideoFormatInfo==NULL){
            return_bgdbFXK["null"]=true;
            return return_bgdbFXK;
        }
        return_bgdbFXK=[&]() {
    json return_dtfQwKm=json({});
    return serialize_VkPhysicalDeviceVideoFormatInfoKHR(*pVideoFormatInfo);}();
return return_bgdbFXK;}();
result["members"]["pVideoFormatPropertyCount"]=[&]() {
    json return_GSWxFnI=json({});
    
        if (pVideoFormatPropertyCount==NULL){
            return_GSWxFnI["null"]=true;
            return return_GSWxFnI;
        }
        return_GSWxFnI=[&]() {
    json return_ajiQgGQ=json({});
    return serialize_uint32_t(*pVideoFormatPropertyCount);}();
return return_GSWxFnI;}();
result["members"]["pVideoFormatProperties"]=[&]() {
    json return_mqYKdAf=json({});
    
        if (pVideoFormatProperties==NULL){
            return_mqYKdAf["null"]=true;
            return return_mqYKdAf;
        }
        
        return_mqYKdAf["members"]={};
        for(int mqYKdAf=0; mqYKdAf < *pVideoFormatPropertyCount; mqYKdAf++){
            json temp;
            temp=[&]() {
    json return_juwSumr=json({});
    return serialize_VkVideoFormatPropertiesKHR(pVideoFormatProperties[mqYKdAf]);}();
            return_mqYKdAf["members"].push_back(temp);
        }
        return return_mqYKdAf;
        }();

        writeToConn(result);
    }

    void handle_vkCreateVideoSessionKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkVideoSessionCreateInfoKHR* pCreateInfo
            ;
[&]() {
VkVideoSessionCreateInfoKHR* temp_RKnrjPx;[&]() {

        if (data_json["members"]["pCreateInfo"].contains("null")){
        temp_RKnrjPx=NULL;
        return;
        }
    temp_RKnrjPx=(VkVideoSessionCreateInfoKHR*)malloc(sizeof(VkVideoSessionCreateInfoKHR));
[&]() {
*(temp_RKnrjPx)=deserialize_VkVideoSessionCreateInfoKHR(data_json["members"]["pCreateInfo"]);}();
}();pCreateInfo=temp_RKnrjPx;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkVideoSessionKHR* pVideoSession
        ;
[&]() {

        if (data_json["members"]["pVideoSession"].contains("null")){
        pVideoSession=NULL;
        return;
        }
    pVideoSession=(VkVideoSessionKHR*)malloc(sizeof(VkVideoSessionKHR));
[&]() {
*(pVideoSession)=deserialize_VkVideoSessionKHR(data_json["members"]["pVideoSession"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreateVideoSessionKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateVideoSessionKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreateVideoSessionKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateVideoSessionKHR");
    }  
    
auto return_value=call_function(device, pCreateInfo, pAllocator, pVideoSession);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_JzDohMU=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pCreateInfo"]=[&]() {
    json return_rmJpRbP=json({});
    
        if (pCreateInfo==NULL){
            return_rmJpRbP["null"]=true;
            return return_rmJpRbP;
        }
        return_rmJpRbP=[&]() {
    json return_deJSMVb=json({});
    return serialize_VkVideoSessionCreateInfoKHR(*pCreateInfo);}();
return return_rmJpRbP;}();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pVideoSession"]=[&]() {
    json return_UBFowBY=json({});
    
        if (pVideoSession==NULL){
            return_UBFowBY["null"]=true;
            return return_UBFowBY;
        }
        return_UBFowBY=[&]() {
    json return_QOYJBKh=json({});
    return serialize_VkVideoSessionKHR(*pVideoSession);}();
return return_UBFowBY;}();

        writeToConn(result);
    }

    void handle_vkDestroyVideoSessionKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkVideoSessionKHR videoSession
            ;
[&]() {
videoSession=deserialize_VkVideoSessionKHR(data_json["members"]["videoSession"]);}();
VkAllocationCallbacks* pAllocator
        ;
[&]() {
VkAllocationCallbacks* temp_VAmhMvJ;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_VAmhMvJ=NULL;
        return;
        }
    temp_VAmhMvJ=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_VAmhMvJ)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_VAmhMvJ;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkDestroyVideoSessionKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyVideoSessionKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkDestroyVideoSessionKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyVideoSessionKHR");
    }  
    
call_function(device, videoSession, pAllocator);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["videoSession"]=[&]() {
    json return_ZYpVKpf=json({});
    return serialize_VkVideoSessionKHR(videoSession);}();
result["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();

        writeToConn(result);
    }

    void handle_vkCreateVideoSessionParametersKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkVideoSessionParametersCreateInfoKHR* pCreateInfo
            ;
[&]() {
VkVideoSessionParametersCreateInfoKHR* temp_mwHHWLo;[&]() {

        if (data_json["members"]["pCreateInfo"].contains("null")){
        temp_mwHHWLo=NULL;
        return;
        }
    temp_mwHHWLo=(VkVideoSessionParametersCreateInfoKHR*)malloc(sizeof(VkVideoSessionParametersCreateInfoKHR));
[&]() {
*(temp_mwHHWLo)=deserialize_VkVideoSessionParametersCreateInfoKHR(data_json["members"]["pCreateInfo"]);}();
}();pCreateInfo=temp_mwHHWLo;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkVideoSessionParametersKHR* pVideoSessionParameters
        ;
[&]() {

        if (data_json["members"]["pVideoSessionParameters"].contains("null")){
        pVideoSessionParameters=NULL;
        return;
        }
    pVideoSessionParameters=(VkVideoSessionParametersKHR*)malloc(sizeof(VkVideoSessionParametersKHR));
[&]() {
*(pVideoSessionParameters)=deserialize_VkVideoSessionParametersKHR(data_json["members"]["pVideoSessionParameters"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreateVideoSessionParametersKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateVideoSessionParametersKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreateVideoSessionParametersKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateVideoSessionParametersKHR");
    }  
    
auto return_value=call_function(device, pCreateInfo, pAllocator, pVideoSessionParameters);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_aaWooab=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pCreateInfo"]=[&]() {
    json return_xmLtjFp=json({});
    
        if (pCreateInfo==NULL){
            return_xmLtjFp["null"]=true;
            return return_xmLtjFp;
        }
        return_xmLtjFp=[&]() {
    json return_CEOGoXg=json({});
    return serialize_VkVideoSessionParametersCreateInfoKHR(*pCreateInfo);}();
return return_xmLtjFp;}();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pVideoSessionParameters"]=[&]() {
    json return_cFKdyDw=json({});
    
        if (pVideoSessionParameters==NULL){
            return_cFKdyDw["null"]=true;
            return return_cFKdyDw;
        }
        return_cFKdyDw=[&]() {
    json return_nOvdNqm=json({});
    return serialize_VkVideoSessionParametersKHR(*pVideoSessionParameters);}();
return return_cFKdyDw;}();

        writeToConn(result);
    }

    void handle_vkUpdateVideoSessionParametersKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkVideoSessionParametersKHR videoSessionParameters
            ;
[&]() {
videoSessionParameters=deserialize_VkVideoSessionParametersKHR(data_json["members"]["videoSessionParameters"]);}();
VkVideoSessionParametersUpdateInfoKHR* pUpdateInfo
        ;
[&]() {
VkVideoSessionParametersUpdateInfoKHR* temp_NlvvwON;[&]() {

        if (data_json["members"]["pUpdateInfo"].contains("null")){
        temp_NlvvwON=NULL;
        return;
        }
    temp_NlvvwON=(VkVideoSessionParametersUpdateInfoKHR*)malloc(sizeof(VkVideoSessionParametersUpdateInfoKHR));
[&]() {
*(temp_NlvvwON)=deserialize_VkVideoSessionParametersUpdateInfoKHR(data_json["members"]["pUpdateInfo"]);}();
}();pUpdateInfo=temp_NlvvwON;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkUpdateVideoSessionParametersKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkUpdateVideoSessionParametersKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkUpdateVideoSessionParametersKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkUpdateVideoSessionParametersKHR");
    }  
    
auto return_value=call_function(device, videoSessionParameters, pUpdateInfo);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_UNpfENX=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["videoSessionParameters"]=[&]() {
    json return_miAIXYA=json({});
    return serialize_VkVideoSessionParametersKHR(videoSessionParameters);}();
result["members"]["pUpdateInfo"]=[&]() {
    json return_BKRYRwF=json({});
    
        if (pUpdateInfo==NULL){
            return_BKRYRwF["null"]=true;
            return return_BKRYRwF;
        }
        return_BKRYRwF=[&]() {
    json return_fOpUzep=json({});
    return serialize_VkVideoSessionParametersUpdateInfoKHR(*pUpdateInfo);}();
return return_BKRYRwF;}();

        writeToConn(result);
    }

    void handle_vkDestroyVideoSessionParametersKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkVideoSessionParametersKHR videoSessionParameters
            ;
[&]() {
videoSessionParameters=deserialize_VkVideoSessionParametersKHR(data_json["members"]["videoSessionParameters"]);}();
VkAllocationCallbacks* pAllocator
        ;
[&]() {
VkAllocationCallbacks* temp_VAmhMvJ;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_VAmhMvJ=NULL;
        return;
        }
    temp_VAmhMvJ=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_VAmhMvJ)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_VAmhMvJ;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkDestroyVideoSessionParametersKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyVideoSessionParametersKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkDestroyVideoSessionParametersKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyVideoSessionParametersKHR");
    }  
    
call_function(device, videoSessionParameters, pAllocator);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["videoSessionParameters"]=[&]() {
    json return_miAIXYA=json({});
    return serialize_VkVideoSessionParametersKHR(videoSessionParameters);}();
result["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();

        writeToConn(result);
    }

    void handle_vkGetVideoSessionMemoryRequirementsKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkVideoSessionKHR videoSession
            ;
[&]() {
videoSession=deserialize_VkVideoSessionKHR(data_json["members"]["videoSession"]);}();
uint32_t* pMemoryRequirementsCount
            ;
[&]() {

        if (data_json["members"]["pMemoryRequirementsCount"].contains("null")){
        pMemoryRequirementsCount=NULL;
        return;
        }
    pMemoryRequirementsCount=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pMemoryRequirementsCount)=deserialize_uint32_t(data_json["members"]["pMemoryRequirementsCount"]);}();
}();
VkVideoSessionMemoryRequirementsKHR* pMemoryRequirements
        ;
[&]() {

        if (data_json["members"]["pMemoryRequirements"].contains("null")){
        pMemoryRequirements=NULL;
        return;
        }
    pMemoryRequirements=(VkVideoSessionMemoryRequirementsKHR*)malloc(*pMemoryRequirementsCount*sizeof(VkVideoSessionMemoryRequirementsKHR));
        for (int bdhxnSI=0; bdhxnSI < *pMemoryRequirementsCount; bdhxnSI++){
            [&]() {
pMemoryRequirements[bdhxnSI]=deserialize_VkVideoSessionMemoryRequirementsKHR(data_json["members"]["pMemoryRequirements"]["members"][bdhxnSI]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetVideoSessionMemoryRequirementsKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetVideoSessionMemoryRequirementsKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetVideoSessionMemoryRequirementsKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetVideoSessionMemoryRequirementsKHR");
    }  
    
auto return_value=call_function(device, videoSession, pMemoryRequirementsCount, pMemoryRequirements);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_kxdUJpm=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["videoSession"]=[&]() {
    json return_ZYpVKpf=json({});
    return serialize_VkVideoSessionKHR(videoSession);}();
result["members"]["pMemoryRequirementsCount"]=[&]() {
    json return_ZDpkRKM=json({});
    
        if (pMemoryRequirementsCount==NULL){
            return_ZDpkRKM["null"]=true;
            return return_ZDpkRKM;
        }
        return_ZDpkRKM=[&]() {
    json return_XJQvXYg=json({});
    return serialize_uint32_t(*pMemoryRequirementsCount);}();
return return_ZDpkRKM;}();
result["members"]["pMemoryRequirements"]=[&]() {
    json return_yppiIKe=json({});
    
        if (pMemoryRequirements==NULL){
            return_yppiIKe["null"]=true;
            return return_yppiIKe;
        }
        
        return_yppiIKe["members"]={};
        for(int yppiIKe=0; yppiIKe < *pMemoryRequirementsCount; yppiIKe++){
            json temp;
            temp=[&]() {
    json return_EOUGvsk=json({});
    return serialize_VkVideoSessionMemoryRequirementsKHR(pMemoryRequirements[yppiIKe]);}();
            return_yppiIKe["members"].push_back(temp);
        }
        return return_yppiIKe;
        }();

        writeToConn(result);
    }

    void handle_vkBindVideoSessionMemoryKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkVideoSessionKHR videoSession
            ;
[&]() {
videoSession=deserialize_VkVideoSessionKHR(data_json["members"]["videoSession"]);}();
uint32_t bindSessionMemoryInfoCount
            ;
[&]() {
bindSessionMemoryInfoCount=deserialize_uint32_t(data_json["members"]["bindSessionMemoryInfoCount"]);}();
VkBindVideoSessionMemoryInfoKHR* pBindSessionMemoryInfos
        ;
[&]() {
VkBindVideoSessionMemoryInfoKHR* temp_mcKvnZq;[&]() {

        if (data_json["members"]["pBindSessionMemoryInfos"].contains("null")){
        temp_mcKvnZq=NULL;
        return;
        }
    temp_mcKvnZq=(VkBindVideoSessionMemoryInfoKHR*)malloc(bindSessionMemoryInfoCount*sizeof(VkBindVideoSessionMemoryInfoKHR));
        for (int LGDSIkm=0; LGDSIkm < bindSessionMemoryInfoCount; LGDSIkm++){
            [&]() {
temp_mcKvnZq[LGDSIkm]=deserialize_VkBindVideoSessionMemoryInfoKHR(data_json["members"]["pBindSessionMemoryInfos"]["members"][LGDSIkm]);}();;
        }
        }();pBindSessionMemoryInfos=temp_mcKvnZq;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkBindVideoSessionMemoryKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkBindVideoSessionMemoryKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkBindVideoSessionMemoryKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkBindVideoSessionMemoryKHR");
    }  
    
auto return_value=call_function(device, videoSession, bindSessionMemoryInfoCount, pBindSessionMemoryInfos);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_cNotOvW=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["videoSession"]=[&]() {
    json return_ZYpVKpf=json({});
    return serialize_VkVideoSessionKHR(videoSession);}();
result["members"]["bindSessionMemoryInfoCount"]=[&]() {
    json return_dUdWXHJ=json({});
    return serialize_uint32_t(bindSessionMemoryInfoCount);}();
result["members"]["pBindSessionMemoryInfos"]=[&]() {
    json return_WgajFYh=json({});
    
        if (pBindSessionMemoryInfos==NULL){
            return_WgajFYh["null"]=true;
            return return_WgajFYh;
        }
        
        return_WgajFYh["members"]={};
        for(int WgajFYh=0; WgajFYh < bindSessionMemoryInfoCount; WgajFYh++){
            json temp;
            temp=[&]() {
    json return_fNvdWGR=json({});
    return serialize_VkBindVideoSessionMemoryInfoKHR(pBindSessionMemoryInfos[WgajFYh]);}();
            return_WgajFYh["members"].push_back(temp);
        }
        return return_WgajFYh;
        }();

        writeToConn(result);
    }

    void handle_vkCmdDecodeVideoKHR(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkVideoDecodeInfoKHR* pDecodeInfo
        ;
[&]() {
VkVideoDecodeInfoKHR* temp_jxIwYns;[&]() {

        if (data_json["members"]["pDecodeInfo"].contains("null")){
        temp_jxIwYns=NULL;
        return;
        }
    temp_jxIwYns=(VkVideoDecodeInfoKHR*)malloc(sizeof(VkVideoDecodeInfoKHR));
[&]() {
*(temp_jxIwYns)=deserialize_VkVideoDecodeInfoKHR(data_json["members"]["pDecodeInfo"]);}();
}();pDecodeInfo=temp_jxIwYns;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdDecodeVideoKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDecodeVideoKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdDecodeVideoKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDecodeVideoKHR");
    }  
    
call_function(commandBuffer, pDecodeInfo);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pDecodeInfo"]=[&]() {
    json return_CMuqgQm=json({});
    
        if (pDecodeInfo==NULL){
            return_CMuqgQm["null"]=true;
            return return_CMuqgQm;
        }
        return_CMuqgQm=[&]() {
    json return_nlTrSGw=json({});
    return serialize_VkVideoDecodeInfoKHR(*pDecodeInfo);}();
return return_CMuqgQm;}();

        writeToConn(result);
    }

    void handle_vkCmdBeginVideoCodingKHR(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkVideoBeginCodingInfoKHR* pBeginInfo
        ;
[&]() {
VkVideoBeginCodingInfoKHR* temp_VBOPNtl;[&]() {

        if (data_json["members"]["pBeginInfo"].contains("null")){
        temp_VBOPNtl=NULL;
        return;
        }
    temp_VBOPNtl=(VkVideoBeginCodingInfoKHR*)malloc(sizeof(VkVideoBeginCodingInfoKHR));
[&]() {
*(temp_VBOPNtl)=deserialize_VkVideoBeginCodingInfoKHR(data_json["members"]["pBeginInfo"]);}();
}();pBeginInfo=temp_VBOPNtl;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdBeginVideoCodingKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBeginVideoCodingKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdBeginVideoCodingKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBeginVideoCodingKHR");
    }  
    
call_function(commandBuffer, pBeginInfo);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pBeginInfo"]=[&]() {
    json return_GNqfByK=json({});
    
        if (pBeginInfo==NULL){
            return_GNqfByK["null"]=true;
            return return_GNqfByK;
        }
        return_GNqfByK=[&]() {
    json return_XeGQDnJ=json({});
    return serialize_VkVideoBeginCodingInfoKHR(*pBeginInfo);}();
return return_GNqfByK;}();

        writeToConn(result);
    }

    void handle_vkCmdControlVideoCodingKHR(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkVideoCodingControlInfoKHR* pCodingControlInfo
        ;
[&]() {
VkVideoCodingControlInfoKHR* temp_gSyggiV;[&]() {

        if (data_json["members"]["pCodingControlInfo"].contains("null")){
        temp_gSyggiV=NULL;
        return;
        }
    temp_gSyggiV=(VkVideoCodingControlInfoKHR*)malloc(sizeof(VkVideoCodingControlInfoKHR));
[&]() {
*(temp_gSyggiV)=deserialize_VkVideoCodingControlInfoKHR(data_json["members"]["pCodingControlInfo"]);}();
}();pCodingControlInfo=temp_gSyggiV;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdControlVideoCodingKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdControlVideoCodingKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdControlVideoCodingKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdControlVideoCodingKHR");
    }  
    
call_function(commandBuffer, pCodingControlInfo);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pCodingControlInfo"]=[&]() {
    json return_udkYcOu=json({});
    
        if (pCodingControlInfo==NULL){
            return_udkYcOu["null"]=true;
            return return_udkYcOu;
        }
        return_udkYcOu=[&]() {
    json return_JFGxAJc=json({});
    return serialize_VkVideoCodingControlInfoKHR(*pCodingControlInfo);}();
return return_udkYcOu;}();

        writeToConn(result);
    }

    void handle_vkCmdEndVideoCodingKHR(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkVideoEndCodingInfoKHR* pEndCodingInfo
        ;
[&]() {
VkVideoEndCodingInfoKHR* temp_XUywMuH;[&]() {

        if (data_json["members"]["pEndCodingInfo"].contains("null")){
        temp_XUywMuH=NULL;
        return;
        }
    temp_XUywMuH=(VkVideoEndCodingInfoKHR*)malloc(sizeof(VkVideoEndCodingInfoKHR));
[&]() {
*(temp_XUywMuH)=deserialize_VkVideoEndCodingInfoKHR(data_json["members"]["pEndCodingInfo"]);}();
}();pEndCodingInfo=temp_XUywMuH;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdEndVideoCodingKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdEndVideoCodingKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdEndVideoCodingKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdEndVideoCodingKHR");
    }  
    
call_function(commandBuffer, pEndCodingInfo);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pEndCodingInfo"]=[&]() {
    json return_ZVrxRdf=json({});
    
        if (pEndCodingInfo==NULL){
            return_ZVrxRdf["null"]=true;
            return return_ZVrxRdf;
        }
        return_ZVrxRdf=[&]() {
    json return_xskgusC=json({});
    return serialize_VkVideoEndCodingInfoKHR(*pEndCodingInfo);}();
return return_ZVrxRdf;}();

        writeToConn(result);
    }

    void handle_vkCmdDecompressMemoryNV(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t decompressRegionCount
            ;
[&]() {
decompressRegionCount=deserialize_uint32_t(data_json["members"]["decompressRegionCount"]);}();
VkDecompressMemoryRegionNV* pDecompressMemoryRegions
        ;
[&]() {
VkDecompressMemoryRegionNV* temp_dOphDsX;[&]() {

        if (data_json["members"]["pDecompressMemoryRegions"].contains("null")){
        temp_dOphDsX=NULL;
        return;
        }
    temp_dOphDsX=(VkDecompressMemoryRegionNV*)malloc(decompressRegionCount*sizeof(VkDecompressMemoryRegionNV));
        for (int sumFLlb=0; sumFLlb < decompressRegionCount; sumFLlb++){
            [&]() {
temp_dOphDsX[sumFLlb]=deserialize_VkDecompressMemoryRegionNV(data_json["members"]["pDecompressMemoryRegions"]["members"][sumFLlb]);}();;
        }
        }();pDecompressMemoryRegions=temp_dOphDsX;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdDecompressMemoryNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDecompressMemoryNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdDecompressMemoryNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDecompressMemoryNV");
    }  
    
call_function(commandBuffer, decompressRegionCount, pDecompressMemoryRegions);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["decompressRegionCount"]=[&]() {
    json return_sZSLHxr=json({});
    return serialize_uint32_t(decompressRegionCount);}();
result["members"]["pDecompressMemoryRegions"]=[&]() {
    json return_cprvgEs=json({});
    
        if (pDecompressMemoryRegions==NULL){
            return_cprvgEs["null"]=true;
            return return_cprvgEs;
        }
        
        return_cprvgEs["members"]={};
        for(int cprvgEs=0; cprvgEs < decompressRegionCount; cprvgEs++){
            json temp;
            temp=[&]() {
    json return_VcDjPXS=json({});
    return serialize_VkDecompressMemoryRegionNV(pDecompressMemoryRegions[cprvgEs]);}();
            return_cprvgEs["members"].push_back(temp);
        }
        return return_cprvgEs;
        }();

        writeToConn(result);
    }

    void handle_vkCmdDecompressMemoryIndirectCountNV(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkDeviceAddress indirectCommandsAddress
            ;
[&]() {
[&]() {
indirectCommandsAddress=deserialize_uint64_t(data_json["members"]["indirectCommandsAddress"]);}();}();
VkDeviceAddress indirectCommandsCountAddress
            ;
[&]() {
[&]() {
indirectCommandsCountAddress=deserialize_uint64_t(data_json["members"]["indirectCommandsCountAddress"]);}();}();
uint32_t stride
        ;
[&]() {
stride=deserialize_uint32_t(data_json["members"]["stride"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdDecompressMemoryIndirectCountNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDecompressMemoryIndirectCountNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdDecompressMemoryIndirectCountNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdDecompressMemoryIndirectCountNV");
    }  
    
call_function(commandBuffer, indirectCommandsAddress, indirectCommandsCountAddress, stride);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["indirectCommandsAddress"]=[&]() {
    json return_zzTLJEz=json({});
    return_zzTLJEz=[&]() {
    json return_JdSQWnn=json({});
    return serialize_uint64_t(indirectCommandsAddress);}();return return_zzTLJEz;}();
result["members"]["indirectCommandsCountAddress"]=[&]() {
    json return_cdtwxLc=json({});
    return_cdtwxLc=[&]() {
    json return_cCANSkU=json({});
    return serialize_uint64_t(indirectCommandsCountAddress);}();return return_cdtwxLc;}();
result["members"]["stride"]=[&]() {
    json return_TkKksoe=json({});
    return serialize_uint32_t(stride);}();

        writeToConn(result);
    }

    void handle_vkCreateCuModuleNVX(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkCuModuleCreateInfoNVX* pCreateInfo
            ;
[&]() {
VkCuModuleCreateInfoNVX* temp_ewVNYmS;[&]() {

        if (data_json["members"]["pCreateInfo"].contains("null")){
        temp_ewVNYmS=NULL;
        return;
        }
    temp_ewVNYmS=(VkCuModuleCreateInfoNVX*)malloc(sizeof(VkCuModuleCreateInfoNVX));
[&]() {
*(temp_ewVNYmS)=deserialize_VkCuModuleCreateInfoNVX(data_json["members"]["pCreateInfo"]);}();
}();pCreateInfo=temp_ewVNYmS;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkCuModuleNVX* pModule
        ;
[&]() {

        if (data_json["members"]["pModule"].contains("null")){
        pModule=NULL;
        return;
        }
    pModule=(VkCuModuleNVX*)malloc(sizeof(VkCuModuleNVX));
[&]() {
*(pModule)=deserialize_VkCuModuleNVX(data_json["members"]["pModule"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreateCuModuleNVX)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateCuModuleNVX");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreateCuModuleNVX)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateCuModuleNVX");
    }  
    
auto return_value=call_function(device, pCreateInfo, pAllocator, pModule);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_gvSjQir=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pCreateInfo"]=[&]() {
    json return_kFVCjhJ=json({});
    
        if (pCreateInfo==NULL){
            return_kFVCjhJ["null"]=true;
            return return_kFVCjhJ;
        }
        return_kFVCjhJ=[&]() {
    json return_XxmfhaZ=json({});
    return serialize_VkCuModuleCreateInfoNVX(*pCreateInfo);}();
return return_kFVCjhJ;}();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pModule"]=[&]() {
    json return_JNcoqEH=json({});
    
        if (pModule==NULL){
            return_JNcoqEH["null"]=true;
            return return_JNcoqEH;
        }
        return_JNcoqEH=[&]() {
    json return_ZBAbGub=json({});
    return serialize_VkCuModuleNVX(*pModule);}();
return return_JNcoqEH;}();

        writeToConn(result);
    }

    void handle_vkCreateCuFunctionNVX(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkCuFunctionCreateInfoNVX* pCreateInfo
            ;
[&]() {
VkCuFunctionCreateInfoNVX* temp_jCbjaZk;[&]() {

        if (data_json["members"]["pCreateInfo"].contains("null")){
        temp_jCbjaZk=NULL;
        return;
        }
    temp_jCbjaZk=(VkCuFunctionCreateInfoNVX*)malloc(sizeof(VkCuFunctionCreateInfoNVX));
[&]() {
*(temp_jCbjaZk)=deserialize_VkCuFunctionCreateInfoNVX(data_json["members"]["pCreateInfo"]);}();
}();pCreateInfo=temp_jCbjaZk;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkCuFunctionNVX* pFunction
        ;
[&]() {

        if (data_json["members"]["pFunction"].contains("null")){
        pFunction=NULL;
        return;
        }
    pFunction=(VkCuFunctionNVX*)malloc(sizeof(VkCuFunctionNVX));
[&]() {
*(pFunction)=deserialize_VkCuFunctionNVX(data_json["members"]["pFunction"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreateCuFunctionNVX)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateCuFunctionNVX");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreateCuFunctionNVX)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateCuFunctionNVX");
    }  
    
auto return_value=call_function(device, pCreateInfo, pAllocator, pFunction);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_mMvIHkU=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pCreateInfo"]=[&]() {
    json return_iZkjdek=json({});
    
        if (pCreateInfo==NULL){
            return_iZkjdek["null"]=true;
            return return_iZkjdek;
        }
        return_iZkjdek=[&]() {
    json return_trJWXWi=json({});
    return serialize_VkCuFunctionCreateInfoNVX(*pCreateInfo);}();
return return_iZkjdek;}();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pFunction"]=[&]() {
    json return_McZaipD=json({});
    
        if (pFunction==NULL){
            return_McZaipD["null"]=true;
            return return_McZaipD;
        }
        return_McZaipD=[&]() {
    json return_dRtoVIO=json({});
    return serialize_VkCuFunctionNVX(*pFunction);}();
return return_McZaipD;}();

        writeToConn(result);
    }

    void handle_vkDestroyCuModuleNVX(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkCuModuleNVX module
            ;
[&]() {
module=deserialize_VkCuModuleNVX(data_json["members"]["module"]);}();
VkAllocationCallbacks* pAllocator
        ;
[&]() {
VkAllocationCallbacks* temp_VAmhMvJ;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_VAmhMvJ=NULL;
        return;
        }
    temp_VAmhMvJ=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_VAmhMvJ)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_VAmhMvJ;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkDestroyCuModuleNVX)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyCuModuleNVX");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkDestroyCuModuleNVX)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyCuModuleNVX");
    }  
    
call_function(device, module, pAllocator);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["module"]=[&]() {
    json return_ejetVAq=json({});
    return serialize_VkCuModuleNVX(module);}();
result["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();

        writeToConn(result);
    }

    void handle_vkDestroyCuFunctionNVX(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkCuFunctionNVX function
            ;
[&]() {
function=deserialize_VkCuFunctionNVX(data_json["members"]["function"]);}();
VkAllocationCallbacks* pAllocator
        ;
[&]() {
VkAllocationCallbacks* temp_VAmhMvJ;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_VAmhMvJ=NULL;
        return;
        }
    temp_VAmhMvJ=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_VAmhMvJ)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_VAmhMvJ;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkDestroyCuFunctionNVX)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyCuFunctionNVX");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkDestroyCuFunctionNVX)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyCuFunctionNVX");
    }  
    
call_function(device, function, pAllocator);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["function"]=[&]() {
    json return_cMOMknV=json({});
    return serialize_VkCuFunctionNVX(function);}();
result["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();

        writeToConn(result);
    }

    void handle_vkCmdCuLaunchKernelNVX(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkCuLaunchInfoNVX* pLaunchInfo
        ;
[&]() {
VkCuLaunchInfoNVX* temp_KlvDTSK;[&]() {

        if (data_json["members"]["pLaunchInfo"].contains("null")){
        temp_KlvDTSK=NULL;
        return;
        }
    temp_KlvDTSK=(VkCuLaunchInfoNVX*)malloc(sizeof(VkCuLaunchInfoNVX));
[&]() {
*(temp_KlvDTSK)=deserialize_VkCuLaunchInfoNVX(data_json["members"]["pLaunchInfo"]);}();
}();pLaunchInfo=temp_KlvDTSK;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdCuLaunchKernelNVX)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdCuLaunchKernelNVX");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdCuLaunchKernelNVX)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdCuLaunchKernelNVX");
    }  
    
call_function(commandBuffer, pLaunchInfo);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pLaunchInfo"]=[&]() {
    json return_GlpDTMX=json({});
    
        if (pLaunchInfo==NULL){
            return_GlpDTMX["null"]=true;
            return return_GlpDTMX;
        }
        return_GlpDTMX=[&]() {
    json return_MSKfdcp=json({});
    return serialize_VkCuLaunchInfoNVX(*pLaunchInfo);}();
return return_GlpDTMX;}();

        writeToConn(result);
    }

    void handle_vkGetDescriptorSetLayoutSizeEXT(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDescriptorSetLayout layout
            ;
[&]() {
layout=deserialize_VkDescriptorSetLayout(data_json["members"]["layout"]);}();
VkDeviceSize* pLayoutSizeInBytes
        ;
[&]() {

        if (data_json["members"]["pLayoutSizeInBytes"].contains("null")){
        pLayoutSizeInBytes=NULL;
        return;
        }
    [&]() {

        if (data_json["members"]["pLayoutSizeInBytes"].contains("null")){
        pLayoutSizeInBytes=NULL;
        return;
        }
    pLayoutSizeInBytes=(uint64_t*)malloc(sizeof(uint64_t));
[&]() {
*(pLayoutSizeInBytes)=deserialize_uint64_t(data_json["members"]["pLayoutSizeInBytes"]);}();
}();}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetDescriptorSetLayoutSizeEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDescriptorSetLayoutSizeEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetDescriptorSetLayoutSizeEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDescriptorSetLayoutSizeEXT");
    }  
    
call_function(device, layout, pLayoutSizeInBytes);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["layout"]=[&]() {
    json return_ccIkAsz=json({});
    return serialize_VkDescriptorSetLayout(layout);}();
result["members"]["pLayoutSizeInBytes"]=[&]() {
    json return_SyjiaTi=json({});
    
        if (pLayoutSizeInBytes==NULL){
            return_SyjiaTi["null"]=true;
            return return_SyjiaTi;
        }
        return_SyjiaTi=[&]() {
    json return_stKKgQh=json({});
    return_stKKgQh=[&]() {
    json return_EArMfYS=json({});
    return serialize_uint64_t(*pLayoutSizeInBytes);}();return return_stKKgQh;}();
return return_SyjiaTi;}();

        writeToConn(result);
    }

    void handle_vkGetDescriptorSetLayoutBindingOffsetEXT(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDescriptorSetLayout layout
            ;
[&]() {
layout=deserialize_VkDescriptorSetLayout(data_json["members"]["layout"]);}();
uint32_t binding
            ;
[&]() {
binding=deserialize_uint32_t(data_json["members"]["binding"]);}();
VkDeviceSize* pOffset
        ;
[&]() {

        if (data_json["members"]["pOffset"].contains("null")){
        pOffset=NULL;
        return;
        }
    [&]() {

        if (data_json["members"]["pOffset"].contains("null")){
        pOffset=NULL;
        return;
        }
    pOffset=(uint64_t*)malloc(sizeof(uint64_t));
[&]() {
*(pOffset)=deserialize_uint64_t(data_json["members"]["pOffset"]);}();
}();}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetDescriptorSetLayoutBindingOffsetEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDescriptorSetLayoutBindingOffsetEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetDescriptorSetLayoutBindingOffsetEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDescriptorSetLayoutBindingOffsetEXT");
    }  
    
call_function(device, layout, binding, pOffset);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["layout"]=[&]() {
    json return_ccIkAsz=json({});
    return serialize_VkDescriptorSetLayout(layout);}();
result["members"]["binding"]=[&]() {
    json return_KRnawxS=json({});
    return serialize_uint32_t(binding);}();
result["members"]["pOffset"]=[&]() {
    json return_FmcfIzq=json({});
    
        if (pOffset==NULL){
            return_FmcfIzq["null"]=true;
            return return_FmcfIzq;
        }
        return_FmcfIzq=[&]() {
    json return_WvAkrUu=json({});
    return_WvAkrUu=[&]() {
    json return_WvxpFBI=json({});
    return serialize_uint64_t(*pOffset);}();return return_WvAkrUu;}();
return return_FmcfIzq;}();

        writeToConn(result);
    }

    void handle_vkGetDescriptorEXT(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDescriptorGetInfoEXT* pDescriptorInfo
            ;
[&]() {
VkDescriptorGetInfoEXT* temp_RUIqYcq;[&]() {

        if (data_json["members"]["pDescriptorInfo"].contains("null")){
        temp_RUIqYcq=NULL;
        return;
        }
    temp_RUIqYcq=(VkDescriptorGetInfoEXT*)malloc(sizeof(VkDescriptorGetInfoEXT));
[&]() {
*(temp_RUIqYcq)=deserialize_VkDescriptorGetInfoEXT(data_json["members"]["pDescriptorInfo"]);}();
}();pDescriptorInfo=temp_RUIqYcq;}();
size_t dataSize
            ;
[&]() {
dataSize=deserialize_size_t(data_json["members"]["dataSize"]);}();
void* pDescriptor
        ;
[&]() {

        if (data_json["members"]["pDescriptor"].contains("null")){
        pDescriptor=NULL;
        return;
        }
    pDescriptor=deserialize_void_p(data_json["members"]["pDescriptor"]);
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetDescriptorEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDescriptorEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetDescriptorEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDescriptorEXT");
    }  
    
call_function(device, pDescriptorInfo, dataSize, pDescriptor);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pDescriptorInfo"]=[&]() {
    json return_lKhzvuD=json({});
    
        if (pDescriptorInfo==NULL){
            return_lKhzvuD["null"]=true;
            return return_lKhzvuD;
        }
        return_lKhzvuD=[&]() {
    json return_UImTSLh=json({});
    return serialize_VkDescriptorGetInfoEXT(*pDescriptorInfo);}();
return return_lKhzvuD;}();
result["members"]["dataSize"]=[&]() {
    json return_mCuLMQj=json({});
    return serialize_size_t(dataSize);}();
result["members"]["pDescriptor"]=[&]() {
    json return_ZdmvhAV=json({});
    
        if (pDescriptor==NULL){
            return_ZdmvhAV["null"]=true;
            return return_ZdmvhAV;
        }
        return serialize_void_p(pDescriptor);
}();

        writeToConn(result);
    }

    void handle_vkCmdBindDescriptorBuffersEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t bufferCount
            ;
[&]() {
bufferCount=deserialize_uint32_t(data_json["members"]["bufferCount"]);}();
VkDescriptorBufferBindingInfoEXT* pBindingInfos
        ;
[&]() {
VkDescriptorBufferBindingInfoEXT* temp_BZDxrro;[&]() {

        if (data_json["members"]["pBindingInfos"].contains("null")){
        temp_BZDxrro=NULL;
        return;
        }
    temp_BZDxrro=(VkDescriptorBufferBindingInfoEXT*)malloc(bufferCount*sizeof(VkDescriptorBufferBindingInfoEXT));
        for (int gGwgvLk=0; gGwgvLk < bufferCount; gGwgvLk++){
            [&]() {
temp_BZDxrro[gGwgvLk]=deserialize_VkDescriptorBufferBindingInfoEXT(data_json["members"]["pBindingInfos"]["members"][gGwgvLk]);}();;
        }
        }();pBindingInfos=temp_BZDxrro;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdBindDescriptorBuffersEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBindDescriptorBuffersEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdBindDescriptorBuffersEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBindDescriptorBuffersEXT");
    }  
    
call_function(commandBuffer, bufferCount, pBindingInfos);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["bufferCount"]=[&]() {
    json return_InaKdbQ=json({});
    return serialize_uint32_t(bufferCount);}();
result["members"]["pBindingInfos"]=[&]() {
    json return_vYwbYil=json({});
    
        if (pBindingInfos==NULL){
            return_vYwbYil["null"]=true;
            return return_vYwbYil;
        }
        
        return_vYwbYil["members"]={};
        for(int vYwbYil=0; vYwbYil < bufferCount; vYwbYil++){
            json temp;
            temp=[&]() {
    json return_NLgEjpI=json({});
    return serialize_VkDescriptorBufferBindingInfoEXT(pBindingInfos[vYwbYil]);}();
            return_vYwbYil["members"].push_back(temp);
        }
        return return_vYwbYil;
        }();

        writeToConn(result);
    }

    void handle_vkCmdSetDescriptorBufferOffsetsEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkPipelineBindPoint pipelineBindPoint
            ;
[&]() {
pipelineBindPoint=deserialize_VkPipelineBindPoint(data_json["members"]["pipelineBindPoint"]);}();
VkPipelineLayout layout
            ;
[&]() {
layout=deserialize_VkPipelineLayout(data_json["members"]["layout"]);}();
uint32_t firstSet
            ;
[&]() {
firstSet=deserialize_uint32_t(data_json["members"]["firstSet"]);}();
uint32_t setCount
            ;
[&]() {
setCount=deserialize_uint32_t(data_json["members"]["setCount"]);}();
uint32_t* pBufferIndices
            ;
[&]() {
uint32_t* temp_gJgfluA;[&]() {

        if (data_json["members"]["pBufferIndices"].contains("null")){
        temp_gJgfluA=NULL;
        return;
        }
    temp_gJgfluA=(uint32_t*)malloc(setCount*sizeof(uint32_t));
        for (int FpHIOue=0; FpHIOue < setCount; FpHIOue++){
            [&]() {
temp_gJgfluA[FpHIOue]=deserialize_uint32_t(data_json["members"]["pBufferIndices"]["members"][FpHIOue]);}();;
        }
        }();pBufferIndices=temp_gJgfluA;}();
VkDeviceSize* pOffsets
        ;
[&]() {
VkDeviceSize* temp_xwrFSNw;[&]() {

        if (data_json["members"]["pOffsets"].contains("null")){
        temp_xwrFSNw=NULL;
        return;
        }
    [&]() {

        if (data_json["members"]["pOffsets"].contains("null")){
        temp_xwrFSNw=NULL;
        return;
        }
    temp_xwrFSNw=(uint64_t*)malloc(setCount*sizeof(uint64_t));
        for (int EXboekJ=0; EXboekJ < setCount; EXboekJ++){
            [&]() {
temp_xwrFSNw[EXboekJ]=deserialize_uint64_t(data_json["members"]["pOffsets"]["members"][EXboekJ]);}();;
        }
        }();}();pOffsets=temp_xwrFSNw;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetDescriptorBufferOffsetsEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetDescriptorBufferOffsetsEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetDescriptorBufferOffsetsEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetDescriptorBufferOffsetsEXT");
    }  
    
call_function(commandBuffer, pipelineBindPoint, layout, firstSet, setCount, pBufferIndices, pOffsets);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pipelineBindPoint"]=[&]() {
    json return_wEDWbiR=json({});
    return serialize_VkPipelineBindPoint(pipelineBindPoint);}();
result["members"]["layout"]=[&]() {
    json return_PdiawKY=json({});
    return serialize_VkPipelineLayout(layout);}();
result["members"]["firstSet"]=[&]() {
    json return_YqLcKAn=json({});
    return serialize_uint32_t(firstSet);}();
result["members"]["setCount"]=[&]() {
    json return_pdgtsus=json({});
    return serialize_uint32_t(setCount);}();
result["members"]["pBufferIndices"]=[&]() {
    json return_TqIzcyO=json({});
    
        if (pBufferIndices==NULL){
            return_TqIzcyO["null"]=true;
            return return_TqIzcyO;
        }
        
        return_TqIzcyO["members"]={};
        for(int TqIzcyO=0; TqIzcyO < setCount; TqIzcyO++){
            json temp;
            temp=[&]() {
    json return_YGyucEe=json({});
    return serialize_uint32_t(pBufferIndices[TqIzcyO]);}();
            return_TqIzcyO["members"].push_back(temp);
        }
        return return_TqIzcyO;
        }();
result["members"]["pOffsets"]=[&]() {
    json return_pTiYwMM=json({});
    
        if (pOffsets==NULL){
            return_pTiYwMM["null"]=true;
            return return_pTiYwMM;
        }
        
        return_pTiYwMM["members"]={};
        for(int pTiYwMM=0; pTiYwMM < setCount; pTiYwMM++){
            json temp;
            temp=[&]() {
    json return_oNJRTOL=json({});
    return_oNJRTOL=[&]() {
    json return_EugoIAN=json({});
    return serialize_uint64_t(pOffsets[pTiYwMM]);}();return return_oNJRTOL;}();
            return_pTiYwMM["members"].push_back(temp);
        }
        return return_pTiYwMM;
        }();

        writeToConn(result);
    }

    void handle_vkCmdBindDescriptorBufferEmbeddedSamplersEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkPipelineBindPoint pipelineBindPoint
            ;
[&]() {
pipelineBindPoint=deserialize_VkPipelineBindPoint(data_json["members"]["pipelineBindPoint"]);}();
VkPipelineLayout layout
            ;
[&]() {
layout=deserialize_VkPipelineLayout(data_json["members"]["layout"]);}();
uint32_t set
        ;
[&]() {
set=deserialize_uint32_t(data_json["members"]["set"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBindDescriptorBufferEmbeddedSamplersEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBindDescriptorBufferEmbeddedSamplersEXT");
    }  
    
call_function(commandBuffer, pipelineBindPoint, layout, set);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pipelineBindPoint"]=[&]() {
    json return_wEDWbiR=json({});
    return serialize_VkPipelineBindPoint(pipelineBindPoint);}();
result["members"]["layout"]=[&]() {
    json return_PdiawKY=json({});
    return serialize_VkPipelineLayout(layout);}();
result["members"]["set"]=[&]() {
    json return_NjfzWMp=json({});
    return serialize_uint32_t(set);}();

        writeToConn(result);
    }

    void handle_vkGetBufferOpaqueCaptureDescriptorDataEXT(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkBufferCaptureDescriptorDataInfoEXT* pInfo
            ;
[&]() {
VkBufferCaptureDescriptorDataInfoEXT* temp_AFCrJHs;[&]() {

        if (data_json["members"]["pInfo"].contains("null")){
        temp_AFCrJHs=NULL;
        return;
        }
    temp_AFCrJHs=(VkBufferCaptureDescriptorDataInfoEXT*)malloc(sizeof(VkBufferCaptureDescriptorDataInfoEXT));
[&]() {
*(temp_AFCrJHs)=deserialize_VkBufferCaptureDescriptorDataInfoEXT(data_json["members"]["pInfo"]);}();
}();pInfo=temp_AFCrJHs;}();
void* pData
        ;
[&]() {

        if (data_json["members"]["pData"].contains("null")){
        pData=NULL;
        return;
        }
    pData=deserialize_void_p(data_json["members"]["pData"]);
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetBufferOpaqueCaptureDescriptorDataEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetBufferOpaqueCaptureDescriptorDataEXT");
    }  
    
auto return_value=call_function(device, pInfo, pData);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_mLruNAq=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pInfo"]=[&]() {
    json return_ZfwdcoQ=json({});
    
        if (pInfo==NULL){
            return_ZfwdcoQ["null"]=true;
            return return_ZfwdcoQ;
        }
        return_ZfwdcoQ=[&]() {
    json return_YXsxrjm=json({});
    return serialize_VkBufferCaptureDescriptorDataInfoEXT(*pInfo);}();
return return_ZfwdcoQ;}();
result["members"]["pData"]=[&]() {
    json return_XiNRkbL=json({});
    
        if (pData==NULL){
            return_XiNRkbL["null"]=true;
            return return_XiNRkbL;
        }
        return serialize_void_p(pData);
}();

        writeToConn(result);
    }

    void handle_vkGetImageOpaqueCaptureDescriptorDataEXT(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkImageCaptureDescriptorDataInfoEXT* pInfo
            ;
[&]() {
VkImageCaptureDescriptorDataInfoEXT* temp_WtITybq;[&]() {

        if (data_json["members"]["pInfo"].contains("null")){
        temp_WtITybq=NULL;
        return;
        }
    temp_WtITybq=(VkImageCaptureDescriptorDataInfoEXT*)malloc(sizeof(VkImageCaptureDescriptorDataInfoEXT));
[&]() {
*(temp_WtITybq)=deserialize_VkImageCaptureDescriptorDataInfoEXT(data_json["members"]["pInfo"]);}();
}();pInfo=temp_WtITybq;}();
void* pData
        ;
[&]() {

        if (data_json["members"]["pData"].contains("null")){
        pData=NULL;
        return;
        }
    pData=deserialize_void_p(data_json["members"]["pData"]);
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetImageOpaqueCaptureDescriptorDataEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetImageOpaqueCaptureDescriptorDataEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetImageOpaqueCaptureDescriptorDataEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetImageOpaqueCaptureDescriptorDataEXT");
    }  
    
auto return_value=call_function(device, pInfo, pData);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_bknuYOD=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pInfo"]=[&]() {
    json return_wMoNHwj=json({});
    
        if (pInfo==NULL){
            return_wMoNHwj["null"]=true;
            return return_wMoNHwj;
        }
        return_wMoNHwj=[&]() {
    json return_YyPWklO=json({});
    return serialize_VkImageCaptureDescriptorDataInfoEXT(*pInfo);}();
return return_wMoNHwj;}();
result["members"]["pData"]=[&]() {
    json return_XiNRkbL=json({});
    
        if (pData==NULL){
            return_XiNRkbL["null"]=true;
            return return_XiNRkbL;
        }
        return serialize_void_p(pData);
}();

        writeToConn(result);
    }

    void handle_vkGetImageViewOpaqueCaptureDescriptorDataEXT(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkImageViewCaptureDescriptorDataInfoEXT* pInfo
            ;
[&]() {
VkImageViewCaptureDescriptorDataInfoEXT* temp_myuhbER;[&]() {

        if (data_json["members"]["pInfo"].contains("null")){
        temp_myuhbER=NULL;
        return;
        }
    temp_myuhbER=(VkImageViewCaptureDescriptorDataInfoEXT*)malloc(sizeof(VkImageViewCaptureDescriptorDataInfoEXT));
[&]() {
*(temp_myuhbER)=deserialize_VkImageViewCaptureDescriptorDataInfoEXT(data_json["members"]["pInfo"]);}();
}();pInfo=temp_myuhbER;}();
void* pData
        ;
[&]() {

        if (data_json["members"]["pData"].contains("null")){
        pData=NULL;
        return;
        }
    pData=deserialize_void_p(data_json["members"]["pData"]);
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetImageViewOpaqueCaptureDescriptorDataEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetImageViewOpaqueCaptureDescriptorDataEXT");
    }  
    
auto return_value=call_function(device, pInfo, pData);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_tKgxiMv=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pInfo"]=[&]() {
    json return_FNuXZoH=json({});
    
        if (pInfo==NULL){
            return_FNuXZoH["null"]=true;
            return return_FNuXZoH;
        }
        return_FNuXZoH=[&]() {
    json return_feknriS=json({});
    return serialize_VkImageViewCaptureDescriptorDataInfoEXT(*pInfo);}();
return return_FNuXZoH;}();
result["members"]["pData"]=[&]() {
    json return_XiNRkbL=json({});
    
        if (pData==NULL){
            return_XiNRkbL["null"]=true;
            return return_XiNRkbL;
        }
        return serialize_void_p(pData);
}();

        writeToConn(result);
    }

    void handle_vkGetSamplerOpaqueCaptureDescriptorDataEXT(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkSamplerCaptureDescriptorDataInfoEXT* pInfo
            ;
[&]() {
VkSamplerCaptureDescriptorDataInfoEXT* temp_FUkjNjr;[&]() {

        if (data_json["members"]["pInfo"].contains("null")){
        temp_FUkjNjr=NULL;
        return;
        }
    temp_FUkjNjr=(VkSamplerCaptureDescriptorDataInfoEXT*)malloc(sizeof(VkSamplerCaptureDescriptorDataInfoEXT));
[&]() {
*(temp_FUkjNjr)=deserialize_VkSamplerCaptureDescriptorDataInfoEXT(data_json["members"]["pInfo"]);}();
}();pInfo=temp_FUkjNjr;}();
void* pData
        ;
[&]() {

        if (data_json["members"]["pData"].contains("null")){
        pData=NULL;
        return;
        }
    pData=deserialize_void_p(data_json["members"]["pData"]);
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetSamplerOpaqueCaptureDescriptorDataEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetSamplerOpaqueCaptureDescriptorDataEXT");
    }  
    
auto return_value=call_function(device, pInfo, pData);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_pDvOyxq=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pInfo"]=[&]() {
    json return_WHrsceu=json({});
    
        if (pInfo==NULL){
            return_WHrsceu["null"]=true;
            return return_WHrsceu;
        }
        return_WHrsceu=[&]() {
    json return_WbvdTvC=json({});
    return serialize_VkSamplerCaptureDescriptorDataInfoEXT(*pInfo);}();
return return_WHrsceu;}();
result["members"]["pData"]=[&]() {
    json return_XiNRkbL=json({});
    
        if (pData==NULL){
            return_XiNRkbL["null"]=true;
            return return_XiNRkbL;
        }
        return serialize_void_p(pData);
}();

        writeToConn(result);
    }

    void handle_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkAccelerationStructureCaptureDescriptorDataInfoEXT* pInfo
            ;
[&]() {
VkAccelerationStructureCaptureDescriptorDataInfoEXT* temp_YRVjdHx;[&]() {

        if (data_json["members"]["pInfo"].contains("null")){
        temp_YRVjdHx=NULL;
        return;
        }
    temp_YRVjdHx=(VkAccelerationStructureCaptureDescriptorDataInfoEXT*)malloc(sizeof(VkAccelerationStructureCaptureDescriptorDataInfoEXT));
[&]() {
*(temp_YRVjdHx)=deserialize_VkAccelerationStructureCaptureDescriptorDataInfoEXT(data_json["members"]["pInfo"]);}();
}();pInfo=temp_YRVjdHx;}();
void* pData
        ;
[&]() {

        if (data_json["members"]["pData"].contains("null")){
        pData=NULL;
        return;
        }
    pData=deserialize_void_p(data_json["members"]["pData"]);
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT");
    }  
    
auto return_value=call_function(device, pInfo, pData);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_JXrQtgh=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pInfo"]=[&]() {
    json return_wZuoBYs=json({});
    
        if (pInfo==NULL){
            return_wZuoBYs["null"]=true;
            return return_wZuoBYs;
        }
        return_wZuoBYs=[&]() {
    json return_quNwqNe=json({});
    return serialize_VkAccelerationStructureCaptureDescriptorDataInfoEXT(*pInfo);}();
return return_wZuoBYs;}();
result["members"]["pData"]=[&]() {
    json return_XiNRkbL=json({});
    
        if (pData==NULL){
            return_XiNRkbL["null"]=true;
            return return_XiNRkbL;
        }
        return serialize_void_p(pData);
}();

        writeToConn(result);
    }

    void handle_vkSetDeviceMemoryPriorityEXT(json data_json){
    //Will only be called by the server
    
VkDevice       device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDeviceMemory memory
            ;
[&]() {
memory=deserialize_VkDeviceMemory(data_json["members"]["memory"]);}();
float          priority
        ;
[&]() {
priority=deserialize_float(data_json["members"]["priority"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkSetDeviceMemoryPriorityEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkSetDeviceMemoryPriorityEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkSetDeviceMemoryPriorityEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkSetDeviceMemoryPriorityEXT");
    }  
    
call_function(device, memory, priority);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_vGOpNwU=json({});
    return serialize_VkDevice(device);}();
result["members"]["memory"]=[&]() {
    json return_OJZmLJB=json({});
    return serialize_VkDeviceMemory(memory);}();
result["members"]["priority"]=[&]() {
    json return_ZkiwPOa=json({});
    return serialize_float(priority);}();

        writeToConn(result);
    }

    void handle_vkAcquireDrmDisplayEXT(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
int32_t drmFd
            ;
[&]() {
drmFd=deserialize_int32_t(data_json["members"]["drmFd"]);}();
VkDisplayKHR display
        ;
[&]() {
display=deserialize_VkDisplayKHR(data_json["members"]["display"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkAcquireDrmDisplayEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkAcquireDrmDisplayEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkAcquireDrmDisplayEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkAcquireDrmDisplayEXT");
    }  
    
auto return_value=call_function(physicalDevice, drmFd, display);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_xOQZtVI=json({});
    return serialize_VkResult(return_value);}();
result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["drmFd"]=[&]() {
    json return_giyfTKv=json({});
    return serialize_int32_t(drmFd);}();
result["members"]["display"]=[&]() {
    json return_iLJAKDL=json({});
    return serialize_VkDisplayKHR(display);}();

        writeToConn(result);
    }

    void handle_vkGetDrmDisplayEXT(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
int32_t drmFd
            ;
[&]() {
drmFd=deserialize_int32_t(data_json["members"]["drmFd"]);}();
uint32_t connectorId
            ;
[&]() {
connectorId=deserialize_uint32_t(data_json["members"]["connectorId"]);}();
VkDisplayKHR* display
        ;
[&]() {

        if (data_json["members"]["display"].contains("null")){
        display=NULL;
        return;
        }
    display=(VkDisplayKHR*)malloc(sizeof(VkDisplayKHR));
[&]() {
*(display)=deserialize_VkDisplayKHR(data_json["members"]["display"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetDrmDisplayEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDrmDisplayEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetDrmDisplayEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDrmDisplayEXT");
    }  
    
auto return_value=call_function(physicalDevice, drmFd, connectorId, display);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_jStapcc=json({});
    return serialize_VkResult(return_value);}();
result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["drmFd"]=[&]() {
    json return_giyfTKv=json({});
    return serialize_int32_t(drmFd);}();
result["members"]["connectorId"]=[&]() {
    json return_OVzyQSW=json({});
    return serialize_uint32_t(connectorId);}();
result["members"]["display"]=[&]() {
    json return_BihiZSI=json({});
    
        if (display==NULL){
            return_BihiZSI["null"]=true;
            return return_BihiZSI;
        }
        return_BihiZSI=[&]() {
    json return_iEWxCiQ=json({});
    return serialize_VkDisplayKHR(*display);}();
return return_BihiZSI;}();

        writeToConn(result);
    }

    void handle_vkWaitForPresentKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkSwapchainKHR swapchain
            ;
[&]() {
swapchain=deserialize_VkSwapchainKHR(data_json["members"]["swapchain"]);}();
uint64_t presentId
            ;
[&]() {
presentId=deserialize_uint64_t(data_json["members"]["presentId"]);}();
uint64_t timeout
        ;
[&]() {
timeout=deserialize_uint64_t(data_json["members"]["timeout"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkWaitForPresentKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkWaitForPresentKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkWaitForPresentKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkWaitForPresentKHR");
    }  
    
auto return_value=call_function(device, swapchain, presentId, timeout);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_VOTbrYj=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["swapchain"]=[&]() {
    json return_pJrgkgd=json({});
    return serialize_VkSwapchainKHR(swapchain);}();
result["members"]["presentId"]=[&]() {
    json return_YQbptip=json({});
    return serialize_uint64_t(presentId);}();
result["members"]["timeout"]=[&]() {
    json return_CYRKadv=json({});
    return serialize_uint64_t(timeout);}();

        writeToConn(result);
    }

    void handle_vkCmdBeginRendering(json data_json){
    //Will only be called by the server
    
VkCommandBuffer                   commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkRenderingInfo*                              pRenderingInfo
        ;
[&]() {
VkRenderingInfo* temp_bILFfVT;[&]() {

        if (data_json["members"]["pRenderingInfo"].contains("null")){
        temp_bILFfVT=NULL;
        return;
        }
    temp_bILFfVT=(VkRenderingInfo*)malloc(sizeof(VkRenderingInfo));
[&]() {
*(temp_bILFfVT)=deserialize_VkRenderingInfo(data_json["members"]["pRenderingInfo"]);}();
}();pRenderingInfo=temp_bILFfVT;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdBeginRendering)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBeginRendering");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdBeginRendering)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBeginRendering");
    }  
    
call_function(commandBuffer, pRenderingInfo);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_jOBmfhz=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pRenderingInfo"]=[&]() {
    json return_krduLwc=json({});
    
        if (pRenderingInfo==NULL){
            return_krduLwc["null"]=true;
            return return_krduLwc;
        }
        return_krduLwc=[&]() {
    json return_sJXklhY=json({});
    return serialize_VkRenderingInfo(*pRenderingInfo);}();
return return_krduLwc;}();

        writeToConn(result);
    }

    void handle_vkCmdBeginRenderingKHR(json data_json){
    //Will only be called by the server
    
VkCommandBuffer                   commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkRenderingInfo*                              pRenderingInfo
        ;
[&]() {
VkRenderingInfo* temp_bILFfVT;[&]() {

        if (data_json["members"]["pRenderingInfo"].contains("null")){
        temp_bILFfVT=NULL;
        return;
        }
    temp_bILFfVT=(VkRenderingInfo*)malloc(sizeof(VkRenderingInfo));
[&]() {
*(temp_bILFfVT)=deserialize_VkRenderingInfo(data_json["members"]["pRenderingInfo"]);}();
}();pRenderingInfo=temp_bILFfVT;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdBeginRenderingKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBeginRenderingKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdBeginRenderingKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBeginRenderingKHR");
    }  
    
call_function(commandBuffer, pRenderingInfo);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_jOBmfhz=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pRenderingInfo"]=[&]() {
    json return_krduLwc=json({});
    
        if (pRenderingInfo==NULL){
            return_krduLwc["null"]=true;
            return return_krduLwc;
        }
        return_krduLwc=[&]() {
    json return_sJXklhY=json({});
    return serialize_VkRenderingInfo(*pRenderingInfo);}();
return return_krduLwc;}();

        writeToConn(result);
    }

    void handle_vkCmdEndRendering(json data_json){
    //Will only be called by the server
    
VkCommandBuffer                   commandBuffer
        ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdEndRendering)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdEndRendering");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdEndRendering)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdEndRendering");
    }  
    
call_function(commandBuffer);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_gkxzaOE=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();

        writeToConn(result);
    }

    void handle_vkCmdEndRenderingKHR(json data_json){
    //Will only be called by the server
    
VkCommandBuffer                   commandBuffer
        ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdEndRenderingKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdEndRenderingKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdEndRenderingKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdEndRenderingKHR");
    }  
    
call_function(commandBuffer);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_gkxzaOE=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();

        writeToConn(result);
    }

    void handle_vkGetDescriptorSetLayoutHostMappingInfoVALVE(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDescriptorSetBindingReferenceVALVE* pBindingReference
            ;
[&]() {
VkDescriptorSetBindingReferenceVALVE* temp_suHcNHT;[&]() {

        if (data_json["members"]["pBindingReference"].contains("null")){
        temp_suHcNHT=NULL;
        return;
        }
    temp_suHcNHT=(VkDescriptorSetBindingReferenceVALVE*)malloc(sizeof(VkDescriptorSetBindingReferenceVALVE));
[&]() {
*(temp_suHcNHT)=deserialize_VkDescriptorSetBindingReferenceVALVE(data_json["members"]["pBindingReference"]);}();
}();pBindingReference=temp_suHcNHT;}();
VkDescriptorSetLayoutHostMappingInfoVALVE* pHostMapping
        ;
[&]() {

        if (data_json["members"]["pHostMapping"].contains("null")){
        pHostMapping=NULL;
        return;
        }
    pHostMapping=(VkDescriptorSetLayoutHostMappingInfoVALVE*)malloc(sizeof(VkDescriptorSetLayoutHostMappingInfoVALVE));
[&]() {
*(pHostMapping)=deserialize_VkDescriptorSetLayoutHostMappingInfoVALVE(data_json["members"]["pHostMapping"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDescriptorSetLayoutHostMappingInfoVALVE");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDescriptorSetLayoutHostMappingInfoVALVE");
    }  
    
call_function(device, pBindingReference, pHostMapping);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pBindingReference"]=[&]() {
    json return_mSXRhmL=json({});
    
        if (pBindingReference==NULL){
            return_mSXRhmL["null"]=true;
            return return_mSXRhmL;
        }
        return_mSXRhmL=[&]() {
    json return_UAhZVMj=json({});
    return serialize_VkDescriptorSetBindingReferenceVALVE(*pBindingReference);}();
return return_mSXRhmL;}();
result["members"]["pHostMapping"]=[&]() {
    json return_zFoJqwR=json({});
    
        if (pHostMapping==NULL){
            return_zFoJqwR["null"]=true;
            return return_zFoJqwR;
        }
        return_zFoJqwR=[&]() {
    json return_qLAnuMO=json({});
    return serialize_VkDescriptorSetLayoutHostMappingInfoVALVE(*pHostMapping);}();
return return_zFoJqwR;}();

        writeToConn(result);
    }

    void handle_vkGetDescriptorSetHostMappingVALVE(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDescriptorSet descriptorSet
            ;
[&]() {
descriptorSet=deserialize_VkDescriptorSet(data_json["members"]["descriptorSet"]);}();
void** ppData
        ;
[&]() {

        if (data_json["members"]["ppData"].contains("null")){
        ppData=NULL;
        return;
        }
    ppData=(void**)malloc(sizeof(void*));
[&]() {

        if (data_json["members"]["ppData"].contains("null")){
        *(ppData)=NULL;
        return;
        }
    *(ppData)=deserialize_void_p(data_json["members"]["ppData"]);
}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetDescriptorSetHostMappingVALVE)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDescriptorSetHostMappingVALVE");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetDescriptorSetHostMappingVALVE)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDescriptorSetHostMappingVALVE");
    }  
    
call_function(device, descriptorSet, ppData);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["descriptorSet"]=[&]() {
    json return_BDcvznl=json({});
    return serialize_VkDescriptorSet(descriptorSet);}();
result["members"]["ppData"]=[&]() {
    json return_PsFVEjO=json({});
    
        if (ppData==NULL){
            return_PsFVEjO["null"]=true;
            return return_PsFVEjO;
        }
        return_PsFVEjO=[&]() {
    json return_KWNLtTl=json({});
    
        if (*ppData==NULL){
            return_KWNLtTl["null"]=true;
            return return_KWNLtTl;
        }
        return serialize_void_p(*ppData);
}();
return return_PsFVEjO;}();

        writeToConn(result);
    }

    void handle_vkCreateMicromapEXT(json data_json){
    //Will only be called by the server
    
VkDevice                                           device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkMicromapCreateInfoEXT*        pCreateInfo
            ;
[&]() {
VkMicromapCreateInfoEXT* temp_KaadZld;[&]() {

        if (data_json["members"]["pCreateInfo"].contains("null")){
        temp_KaadZld=NULL;
        return;
        }
    temp_KaadZld=(VkMicromapCreateInfoEXT*)malloc(sizeof(VkMicromapCreateInfoEXT));
[&]() {
*(temp_KaadZld)=deserialize_VkMicromapCreateInfoEXT(data_json["members"]["pCreateInfo"]);}();
}();pCreateInfo=temp_KaadZld;}();
VkAllocationCallbacks*       pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_dbwOdKg;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_dbwOdKg=NULL;
        return;
        }
    temp_dbwOdKg=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_dbwOdKg)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_dbwOdKg;}();
VkMicromapEXT*                        pMicromap
        ;
[&]() {

        if (data_json["members"]["pMicromap"].contains("null")){
        pMicromap=NULL;
        return;
        }
    pMicromap=(VkMicromapEXT*)malloc(sizeof(VkMicromapEXT));
[&]() {
*(pMicromap)=deserialize_VkMicromapEXT(data_json["members"]["pMicromap"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreateMicromapEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateMicromapEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreateMicromapEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateMicromapEXT");
    }  
    
auto return_value=call_function(device, pCreateInfo, pAllocator, pMicromap);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_ncOfLjQ=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_fUuTEWM=json({});
    return serialize_VkDevice(device);}();
result["members"]["pCreateInfo"]=[&]() {
    json return_ElvIxlu=json({});
    
        if (pCreateInfo==NULL){
            return_ElvIxlu["null"]=true;
            return return_ElvIxlu;
        }
        return_ElvIxlu=[&]() {
    json return_XQNACUf=json({});
    return serialize_VkMicromapCreateInfoEXT(*pCreateInfo);}();
return return_ElvIxlu;}();
result["members"]["pAllocator"]=[&]() {
    json return_sNVoEUY=json({});
    
        if (pAllocator==NULL){
            return_sNVoEUY["null"]=true;
            return return_sNVoEUY;
        }
        return_sNVoEUY=[&]() {
    json return_rkNRtqM=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_sNVoEUY;}();
result["members"]["pMicromap"]=[&]() {
    json return_PvwFtTD=json({});
    
        if (pMicromap==NULL){
            return_PvwFtTD["null"]=true;
            return return_PvwFtTD;
        }
        return_PvwFtTD=[&]() {
    json return_ujPtDeT=json({});
    return serialize_VkMicromapEXT(*pMicromap);}();
return return_PvwFtTD;}();

        writeToConn(result);
    }

    void handle_vkCmdBuildMicromapsEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer                                    commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t infoCount
            ;
[&]() {
infoCount=deserialize_uint32_t(data_json["members"]["infoCount"]);}();
VkMicromapBuildInfoEXT* pInfos
        ;
[&]() {
VkMicromapBuildInfoEXT* temp_zlhvuoA;[&]() {

        if (data_json["members"]["pInfos"].contains("null")){
        temp_zlhvuoA=NULL;
        return;
        }
    temp_zlhvuoA=(VkMicromapBuildInfoEXT*)malloc(infoCount*sizeof(VkMicromapBuildInfoEXT));
        for (int rmbdLDq=0; rmbdLDq < infoCount; rmbdLDq++){
            [&]() {
temp_zlhvuoA[rmbdLDq]=deserialize_VkMicromapBuildInfoEXT(data_json["members"]["pInfos"]["members"][rmbdLDq]);}();;
        }
        }();pInfos=temp_zlhvuoA;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdBuildMicromapsEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBuildMicromapsEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdBuildMicromapsEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBuildMicromapsEXT");
    }  
    
call_function(commandBuffer, infoCount, pInfos);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_XLdGYWc=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["infoCount"]=[&]() {
    json return_Wujdqpv=json({});
    return serialize_uint32_t(infoCount);}();
result["members"]["pInfos"]=[&]() {
    json return_DMuENWx=json({});
    
        if (pInfos==NULL){
            return_DMuENWx["null"]=true;
            return return_DMuENWx;
        }
        
        return_DMuENWx["members"]={};
        for(int DMuENWx=0; DMuENWx < infoCount; DMuENWx++){
            json temp;
            temp=[&]() {
    json return_FikHDmT=json({});
    return serialize_VkMicromapBuildInfoEXT(pInfos[DMuENWx]);}();
            return_DMuENWx["members"].push_back(temp);
        }
        return return_DMuENWx;
        }();

        writeToConn(result);
    }

    void handle_vkBuildMicromapsEXT(json data_json){
    //Will only be called by the server
    
VkDevice                                           device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDeferredOperationKHR deferredOperation
            ;
[&]() {
deferredOperation=deserialize_VkDeferredOperationKHR(data_json["members"]["deferredOperation"]);}();
uint32_t infoCount
            ;
[&]() {
infoCount=deserialize_uint32_t(data_json["members"]["infoCount"]);}();
VkMicromapBuildInfoEXT* pInfos
        ;
[&]() {
VkMicromapBuildInfoEXT* temp_zlhvuoA;[&]() {

        if (data_json["members"]["pInfos"].contains("null")){
        temp_zlhvuoA=NULL;
        return;
        }
    temp_zlhvuoA=(VkMicromapBuildInfoEXT*)malloc(infoCount*sizeof(VkMicromapBuildInfoEXT));
        for (int rmbdLDq=0; rmbdLDq < infoCount; rmbdLDq++){
            [&]() {
temp_zlhvuoA[rmbdLDq]=deserialize_VkMicromapBuildInfoEXT(data_json["members"]["pInfos"]["members"][rmbdLDq]);}();;
        }
        }();pInfos=temp_zlhvuoA;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkBuildMicromapsEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkBuildMicromapsEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkBuildMicromapsEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkBuildMicromapsEXT");
    }  
    
auto return_value=call_function(device, deferredOperation, infoCount, pInfos);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_ALTEmGi=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_fUuTEWM=json({});
    return serialize_VkDevice(device);}();
result["members"]["deferredOperation"]=[&]() {
    json return_zJwBFEh=json({});
    return serialize_VkDeferredOperationKHR(deferredOperation);}();
result["members"]["infoCount"]=[&]() {
    json return_Wujdqpv=json({});
    return serialize_uint32_t(infoCount);}();
result["members"]["pInfos"]=[&]() {
    json return_DMuENWx=json({});
    
        if (pInfos==NULL){
            return_DMuENWx["null"]=true;
            return return_DMuENWx;
        }
        
        return_DMuENWx["members"]={};
        for(int DMuENWx=0; DMuENWx < infoCount; DMuENWx++){
            json temp;
            temp=[&]() {
    json return_FikHDmT=json({});
    return serialize_VkMicromapBuildInfoEXT(pInfos[DMuENWx]);}();
            return_DMuENWx["members"].push_back(temp);
        }
        return return_DMuENWx;
        }();

        writeToConn(result);
    }

    void handle_vkDestroyMicromapEXT(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkMicromapEXT micromap
            ;
[&]() {
micromap=deserialize_VkMicromapEXT(data_json["members"]["micromap"]);}();
VkAllocationCallbacks* pAllocator
        ;
[&]() {
VkAllocationCallbacks* temp_VAmhMvJ;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_VAmhMvJ=NULL;
        return;
        }
    temp_VAmhMvJ=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_VAmhMvJ)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_VAmhMvJ;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkDestroyMicromapEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyMicromapEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkDestroyMicromapEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyMicromapEXT");
    }  
    
call_function(device, micromap, pAllocator);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["micromap"]=[&]() {
    json return_IFCAGZC=json({});
    return serialize_VkMicromapEXT(micromap);}();
result["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();

        writeToConn(result);
    }

    void handle_vkCmdCopyMicromapEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkCopyMicromapInfoEXT* pInfo
        ;
[&]() {
VkCopyMicromapInfoEXT* temp_jMMmqMa;[&]() {

        if (data_json["members"]["pInfo"].contains("null")){
        temp_jMMmqMa=NULL;
        return;
        }
    temp_jMMmqMa=(VkCopyMicromapInfoEXT*)malloc(sizeof(VkCopyMicromapInfoEXT));
[&]() {
*(temp_jMMmqMa)=deserialize_VkCopyMicromapInfoEXT(data_json["members"]["pInfo"]);}();
}();pInfo=temp_jMMmqMa;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdCopyMicromapEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdCopyMicromapEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdCopyMicromapEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdCopyMicromapEXT");
    }  
    
call_function(commandBuffer, pInfo);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pInfo"]=[&]() {
    json return_TrwWiWF=json({});
    
        if (pInfo==NULL){
            return_TrwWiWF["null"]=true;
            return return_TrwWiWF;
        }
        return_TrwWiWF=[&]() {
    json return_CpNVFvb=json({});
    return serialize_VkCopyMicromapInfoEXT(*pInfo);}();
return return_TrwWiWF;}();

        writeToConn(result);
    }

    void handle_vkCopyMicromapEXT(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDeferredOperationKHR deferredOperation
            ;
[&]() {
deferredOperation=deserialize_VkDeferredOperationKHR(data_json["members"]["deferredOperation"]);}();
VkCopyMicromapInfoEXT* pInfo
        ;
[&]() {
VkCopyMicromapInfoEXT* temp_jMMmqMa;[&]() {

        if (data_json["members"]["pInfo"].contains("null")){
        temp_jMMmqMa=NULL;
        return;
        }
    temp_jMMmqMa=(VkCopyMicromapInfoEXT*)malloc(sizeof(VkCopyMicromapInfoEXT));
[&]() {
*(temp_jMMmqMa)=deserialize_VkCopyMicromapInfoEXT(data_json["members"]["pInfo"]);}();
}();pInfo=temp_jMMmqMa;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCopyMicromapEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCopyMicromapEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCopyMicromapEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCopyMicromapEXT");
    }  
    
auto return_value=call_function(device, deferredOperation, pInfo);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_KzfUTMH=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["deferredOperation"]=[&]() {
    json return_zJwBFEh=json({});
    return serialize_VkDeferredOperationKHR(deferredOperation);}();
result["members"]["pInfo"]=[&]() {
    json return_TrwWiWF=json({});
    
        if (pInfo==NULL){
            return_TrwWiWF["null"]=true;
            return return_TrwWiWF;
        }
        return_TrwWiWF=[&]() {
    json return_CpNVFvb=json({});
    return serialize_VkCopyMicromapInfoEXT(*pInfo);}();
return return_TrwWiWF;}();

        writeToConn(result);
    }

    void handle_vkCmdCopyMicromapToMemoryEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkCopyMicromapToMemoryInfoEXT* pInfo
        ;
[&]() {
VkCopyMicromapToMemoryInfoEXT* temp_vmtIeWF;[&]() {

        if (data_json["members"]["pInfo"].contains("null")){
        temp_vmtIeWF=NULL;
        return;
        }
    temp_vmtIeWF=(VkCopyMicromapToMemoryInfoEXT*)malloc(sizeof(VkCopyMicromapToMemoryInfoEXT));
[&]() {
*(temp_vmtIeWF)=deserialize_VkCopyMicromapToMemoryInfoEXT(data_json["members"]["pInfo"]);}();
}();pInfo=temp_vmtIeWF;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdCopyMicromapToMemoryEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdCopyMicromapToMemoryEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdCopyMicromapToMemoryEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdCopyMicromapToMemoryEXT");
    }  
    
call_function(commandBuffer, pInfo);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pInfo"]=[&]() {
    json return_SHeoyPq=json({});
    
        if (pInfo==NULL){
            return_SHeoyPq["null"]=true;
            return return_SHeoyPq;
        }
        return_SHeoyPq=[&]() {
    json return_XoBaSij=json({});
    return serialize_VkCopyMicromapToMemoryInfoEXT(*pInfo);}();
return return_SHeoyPq;}();

        writeToConn(result);
    }

    void handle_vkCopyMicromapToMemoryEXT(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDeferredOperationKHR deferredOperation
            ;
[&]() {
deferredOperation=deserialize_VkDeferredOperationKHR(data_json["members"]["deferredOperation"]);}();
VkCopyMicromapToMemoryInfoEXT* pInfo
        ;
[&]() {
VkCopyMicromapToMemoryInfoEXT* temp_vmtIeWF;[&]() {

        if (data_json["members"]["pInfo"].contains("null")){
        temp_vmtIeWF=NULL;
        return;
        }
    temp_vmtIeWF=(VkCopyMicromapToMemoryInfoEXT*)malloc(sizeof(VkCopyMicromapToMemoryInfoEXT));
[&]() {
*(temp_vmtIeWF)=deserialize_VkCopyMicromapToMemoryInfoEXT(data_json["members"]["pInfo"]);}();
}();pInfo=temp_vmtIeWF;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCopyMicromapToMemoryEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCopyMicromapToMemoryEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCopyMicromapToMemoryEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCopyMicromapToMemoryEXT");
    }  
    
auto return_value=call_function(device, deferredOperation, pInfo);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_uWalbSz=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["deferredOperation"]=[&]() {
    json return_zJwBFEh=json({});
    return serialize_VkDeferredOperationKHR(deferredOperation);}();
result["members"]["pInfo"]=[&]() {
    json return_SHeoyPq=json({});
    
        if (pInfo==NULL){
            return_SHeoyPq["null"]=true;
            return return_SHeoyPq;
        }
        return_SHeoyPq=[&]() {
    json return_XoBaSij=json({});
    return serialize_VkCopyMicromapToMemoryInfoEXT(*pInfo);}();
return return_SHeoyPq;}();

        writeToConn(result);
    }

    void handle_vkCmdCopyMemoryToMicromapEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkCopyMemoryToMicromapInfoEXT* pInfo
        ;
[&]() {
VkCopyMemoryToMicromapInfoEXT* temp_mIotiHJ;[&]() {

        if (data_json["members"]["pInfo"].contains("null")){
        temp_mIotiHJ=NULL;
        return;
        }
    temp_mIotiHJ=(VkCopyMemoryToMicromapInfoEXT*)malloc(sizeof(VkCopyMemoryToMicromapInfoEXT));
[&]() {
*(temp_mIotiHJ)=deserialize_VkCopyMemoryToMicromapInfoEXT(data_json["members"]["pInfo"]);}();
}();pInfo=temp_mIotiHJ;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdCopyMemoryToMicromapEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdCopyMemoryToMicromapEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdCopyMemoryToMicromapEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdCopyMemoryToMicromapEXT");
    }  
    
call_function(commandBuffer, pInfo);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pInfo"]=[&]() {
    json return_CUDMZsl=json({});
    
        if (pInfo==NULL){
            return_CUDMZsl["null"]=true;
            return return_CUDMZsl;
        }
        return_CUDMZsl=[&]() {
    json return_YGWhePm=json({});
    return serialize_VkCopyMemoryToMicromapInfoEXT(*pInfo);}();
return return_CUDMZsl;}();

        writeToConn(result);
    }

    void handle_vkCopyMemoryToMicromapEXT(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDeferredOperationKHR deferredOperation
            ;
[&]() {
deferredOperation=deserialize_VkDeferredOperationKHR(data_json["members"]["deferredOperation"]);}();
VkCopyMemoryToMicromapInfoEXT* pInfo
        ;
[&]() {
VkCopyMemoryToMicromapInfoEXT* temp_mIotiHJ;[&]() {

        if (data_json["members"]["pInfo"].contains("null")){
        temp_mIotiHJ=NULL;
        return;
        }
    temp_mIotiHJ=(VkCopyMemoryToMicromapInfoEXT*)malloc(sizeof(VkCopyMemoryToMicromapInfoEXT));
[&]() {
*(temp_mIotiHJ)=deserialize_VkCopyMemoryToMicromapInfoEXT(data_json["members"]["pInfo"]);}();
}();pInfo=temp_mIotiHJ;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCopyMemoryToMicromapEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCopyMemoryToMicromapEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCopyMemoryToMicromapEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCopyMemoryToMicromapEXT");
    }  
    
auto return_value=call_function(device, deferredOperation, pInfo);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_sjmJcqR=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["deferredOperation"]=[&]() {
    json return_zJwBFEh=json({});
    return serialize_VkDeferredOperationKHR(deferredOperation);}();
result["members"]["pInfo"]=[&]() {
    json return_CUDMZsl=json({});
    
        if (pInfo==NULL){
            return_CUDMZsl["null"]=true;
            return return_CUDMZsl;
        }
        return_CUDMZsl=[&]() {
    json return_YGWhePm=json({});
    return serialize_VkCopyMemoryToMicromapInfoEXT(*pInfo);}();
return return_CUDMZsl;}();

        writeToConn(result);
    }

    void handle_vkCmdWriteMicromapsPropertiesEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t micromapCount
            ;
[&]() {
micromapCount=deserialize_uint32_t(data_json["members"]["micromapCount"]);}();
VkMicromapEXT* pMicromaps
            ;
[&]() {
VkMicromapEXT* temp_KbnSVKp;[&]() {

        if (data_json["members"]["pMicromaps"].contains("null")){
        temp_KbnSVKp=NULL;
        return;
        }
    temp_KbnSVKp=(VkMicromapEXT*)malloc(micromapCount*sizeof(VkMicromapEXT));
        for (int KTMONwk=0; KTMONwk < micromapCount; KTMONwk++){
            [&]() {
temp_KbnSVKp[KTMONwk]=deserialize_VkMicromapEXT(data_json["members"]["pMicromaps"]["members"][KTMONwk]);}();;
        }
        }();pMicromaps=temp_KbnSVKp;}();
VkQueryType queryType
            ;
[&]() {
queryType=deserialize_VkQueryType(data_json["members"]["queryType"]);}();
VkQueryPool queryPool
            ;
[&]() {
queryPool=deserialize_VkQueryPool(data_json["members"]["queryPool"]);}();
uint32_t firstQuery
        ;
[&]() {
firstQuery=deserialize_uint32_t(data_json["members"]["firstQuery"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdWriteMicromapsPropertiesEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdWriteMicromapsPropertiesEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdWriteMicromapsPropertiesEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdWriteMicromapsPropertiesEXT");
    }  
    
call_function(commandBuffer, micromapCount, pMicromaps, queryType, queryPool, firstQuery);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["micromapCount"]=[&]() {
    json return_fmeSWnV=json({});
    return serialize_uint32_t(micromapCount);}();
result["members"]["pMicromaps"]=[&]() {
    json return_EECOdlA=json({});
    
        if (pMicromaps==NULL){
            return_EECOdlA["null"]=true;
            return return_EECOdlA;
        }
        
        return_EECOdlA["members"]={};
        for(int EECOdlA=0; EECOdlA < micromapCount; EECOdlA++){
            json temp;
            temp=[&]() {
    json return_oJyaOjR=json({});
    return serialize_VkMicromapEXT(pMicromaps[EECOdlA]);}();
            return_EECOdlA["members"].push_back(temp);
        }
        return return_EECOdlA;
        }();
result["members"]["queryType"]=[&]() {
    json return_wXKRLGm=json({});
    return serialize_VkQueryType(queryType);}();
result["members"]["queryPool"]=[&]() {
    json return_hLGHCzh=json({});
    return serialize_VkQueryPool(queryPool);}();
result["members"]["firstQuery"]=[&]() {
    json return_uiTbigF=json({});
    return serialize_uint32_t(firstQuery);}();

        writeToConn(result);
    }

    void handle_vkWriteMicromapsPropertiesEXT(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
uint32_t micromapCount
            ;
[&]() {
micromapCount=deserialize_uint32_t(data_json["members"]["micromapCount"]);}();
VkMicromapEXT* pMicromaps
            ;
[&]() {
VkMicromapEXT* temp_KbnSVKp;[&]() {

        if (data_json["members"]["pMicromaps"].contains("null")){
        temp_KbnSVKp=NULL;
        return;
        }
    temp_KbnSVKp=(VkMicromapEXT*)malloc(micromapCount*sizeof(VkMicromapEXT));
        for (int KTMONwk=0; KTMONwk < micromapCount; KTMONwk++){
            [&]() {
temp_KbnSVKp[KTMONwk]=deserialize_VkMicromapEXT(data_json["members"]["pMicromaps"]["members"][KTMONwk]);}();;
        }
        }();pMicromaps=temp_KbnSVKp;}();
VkQueryType  queryType
            ;
[&]() {
queryType=deserialize_VkQueryType(data_json["members"]["queryType"]);}();
size_t       dataSize
            ;
[&]() {
dataSize=deserialize_size_t(data_json["members"]["dataSize"]);}();
void* pData
            ;
[&]() {

        if (data_json["members"]["pData"].contains("null")){
        pData=NULL;
        return;
        }
    pData=deserialize_void_p(data_json["members"]["pData"]);
}();
size_t stride
        ;
[&]() {
stride=deserialize_size_t(data_json["members"]["stride"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkWriteMicromapsPropertiesEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkWriteMicromapsPropertiesEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkWriteMicromapsPropertiesEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkWriteMicromapsPropertiesEXT");
    }  
    
auto return_value=call_function(device, micromapCount, pMicromaps, queryType, dataSize, pData, stride);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_yKnAuMV=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["micromapCount"]=[&]() {
    json return_fmeSWnV=json({});
    return serialize_uint32_t(micromapCount);}();
result["members"]["pMicromaps"]=[&]() {
    json return_EECOdlA=json({});
    
        if (pMicromaps==NULL){
            return_EECOdlA["null"]=true;
            return return_EECOdlA;
        }
        
        return_EECOdlA["members"]={};
        for(int EECOdlA=0; EECOdlA < micromapCount; EECOdlA++){
            json temp;
            temp=[&]() {
    json return_oJyaOjR=json({});
    return serialize_VkMicromapEXT(pMicromaps[EECOdlA]);}();
            return_EECOdlA["members"].push_back(temp);
        }
        return return_EECOdlA;
        }();
result["members"]["queryType"]=[&]() {
    json return_WQjFQIb=json({});
    return serialize_VkQueryType(queryType);}();
result["members"]["dataSize"]=[&]() {
    json return_ocxeENf=json({});
    return serialize_size_t(dataSize);}();
result["members"]["pData"]=[&]() {
    json return_uMNHZoi=json({});
    
        if (pData==NULL){
            return_uMNHZoi["null"]=true;
            return return_uMNHZoi;
        }
        return serialize_void_p(pData);
}();
result["members"]["stride"]=[&]() {
    json return_LQXemmN=json({});
    return serialize_size_t(stride);}();

        writeToConn(result);
    }

    void handle_vkGetDeviceMicromapCompatibilityEXT(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkMicromapVersionInfoEXT* pVersionInfo
            ;
[&]() {
VkMicromapVersionInfoEXT* temp_RVRBHOL;[&]() {

        if (data_json["members"]["pVersionInfo"].contains("null")){
        temp_RVRBHOL=NULL;
        return;
        }
    temp_RVRBHOL=(VkMicromapVersionInfoEXT*)malloc(sizeof(VkMicromapVersionInfoEXT));
[&]() {
*(temp_RVRBHOL)=deserialize_VkMicromapVersionInfoEXT(data_json["members"]["pVersionInfo"]);}();
}();pVersionInfo=temp_RVRBHOL;}();
VkAccelerationStructureCompatibilityKHR* pCompatibility
        ;
[&]() {

        if (data_json["members"]["pCompatibility"].contains("null")){
        pCompatibility=NULL;
        return;
        }
    pCompatibility=(VkAccelerationStructureCompatibilityKHR*)malloc(sizeof(VkAccelerationStructureCompatibilityKHR));
[&]() {
*(pCompatibility)=deserialize_VkAccelerationStructureCompatibilityKHR(data_json["members"]["pCompatibility"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetDeviceMicromapCompatibilityEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDeviceMicromapCompatibilityEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetDeviceMicromapCompatibilityEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDeviceMicromapCompatibilityEXT");
    }  
    
call_function(device, pVersionInfo, pCompatibility);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pVersionInfo"]=[&]() {
    json return_MASFelG=json({});
    
        if (pVersionInfo==NULL){
            return_MASFelG["null"]=true;
            return return_MASFelG;
        }
        return_MASFelG=[&]() {
    json return_MQuMkye=json({});
    return serialize_VkMicromapVersionInfoEXT(*pVersionInfo);}();
return return_MASFelG;}();
result["members"]["pCompatibility"]=[&]() {
    json return_pFzhFrX=json({});
    
        if (pCompatibility==NULL){
            return_pFzhFrX["null"]=true;
            return return_pFzhFrX;
        }
        return_pFzhFrX=[&]() {
    json return_rJRBcNi=json({});
    return serialize_VkAccelerationStructureCompatibilityKHR(*pCompatibility);}();
return return_pFzhFrX;}();

        writeToConn(result);
    }

    void handle_vkGetMicromapBuildSizesEXT(json data_json){
    //Will only be called by the server
    
VkDevice                                            device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkAccelerationStructureBuildTypeKHR                 buildType
            ;
[&]() {
buildType=deserialize_VkAccelerationStructureBuildTypeKHR(data_json["members"]["buildType"]);}();
VkMicromapBuildInfoEXT*  pBuildInfo
            ;
[&]() {
VkMicromapBuildInfoEXT* temp_eHQHMxn;[&]() {

        if (data_json["members"]["pBuildInfo"].contains("null")){
        temp_eHQHMxn=NULL;
        return;
        }
    temp_eHQHMxn=(VkMicromapBuildInfoEXT*)malloc(sizeof(VkMicromapBuildInfoEXT));
[&]() {
*(temp_eHQHMxn)=deserialize_VkMicromapBuildInfoEXT(data_json["members"]["pBuildInfo"]);}();
}();pBuildInfo=temp_eHQHMxn;}();
VkMicromapBuildSizesInfoEXT*           pSizeInfo
        ;
[&]() {

        if (data_json["members"]["pSizeInfo"].contains("null")){
        pSizeInfo=NULL;
        return;
        }
    pSizeInfo=(VkMicromapBuildSizesInfoEXT*)malloc(sizeof(VkMicromapBuildSizesInfoEXT));
[&]() {
*(pSizeInfo)=deserialize_VkMicromapBuildSizesInfoEXT(data_json["members"]["pSizeInfo"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetMicromapBuildSizesEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetMicromapBuildSizesEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetMicromapBuildSizesEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetMicromapBuildSizesEXT");
    }  
    
call_function(device, buildType, pBuildInfo, pSizeInfo);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_hNzkaKt=json({});
    return serialize_VkDevice(device);}();
result["members"]["buildType"]=[&]() {
    json return_kfIIDlQ=json({});
    return serialize_VkAccelerationStructureBuildTypeKHR(buildType);}();
result["members"]["pBuildInfo"]=[&]() {
    json return_NHxNfgQ=json({});
    
        if (pBuildInfo==NULL){
            return_NHxNfgQ["null"]=true;
            return return_NHxNfgQ;
        }
        return_NHxNfgQ=[&]() {
    json return_kdNXqMJ=json({});
    return serialize_VkMicromapBuildInfoEXT(*pBuildInfo);}();
return return_NHxNfgQ;}();
result["members"]["pSizeInfo"]=[&]() {
    json return_aHvteGR=json({});
    
        if (pSizeInfo==NULL){
            return_aHvteGR["null"]=true;
            return return_aHvteGR;
        }
        return_aHvteGR=[&]() {
    json return_IzhsCCY=json({});
    return serialize_VkMicromapBuildSizesInfoEXT(*pSizeInfo);}();
return return_aHvteGR;}();

        writeToConn(result);
    }

    void handle_vkGetShaderModuleIdentifierEXT(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkShaderModule shaderModule
            ;
[&]() {
shaderModule=deserialize_VkShaderModule(data_json["members"]["shaderModule"]);}();
VkShaderModuleIdentifierEXT* pIdentifier
        ;
[&]() {

        if (data_json["members"]["pIdentifier"].contains("null")){
        pIdentifier=NULL;
        return;
        }
    pIdentifier=(VkShaderModuleIdentifierEXT*)malloc(sizeof(VkShaderModuleIdentifierEXT));
[&]() {
*(pIdentifier)=deserialize_VkShaderModuleIdentifierEXT(data_json["members"]["pIdentifier"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetShaderModuleIdentifierEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetShaderModuleIdentifierEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetShaderModuleIdentifierEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetShaderModuleIdentifierEXT");
    }  
    
call_function(device, shaderModule, pIdentifier);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["shaderModule"]=[&]() {
    json return_StBFTOZ=json({});
    return serialize_VkShaderModule(shaderModule);}();
result["members"]["pIdentifier"]=[&]() {
    json return_ihsGwgD=json({});
    
        if (pIdentifier==NULL){
            return_ihsGwgD["null"]=true;
            return return_ihsGwgD;
        }
        return_ihsGwgD=[&]() {
    json return_frQlYdL=json({});
    return serialize_VkShaderModuleIdentifierEXT(*pIdentifier);}();
return return_ihsGwgD;}();

        writeToConn(result);
    }

    void handle_vkGetShaderModuleCreateInfoIdentifierEXT(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkShaderModuleCreateInfo* pCreateInfo
            ;
[&]() {
VkShaderModuleCreateInfo* temp_BBNFLIv;[&]() {

        if (data_json["members"]["pCreateInfo"].contains("null")){
        temp_BBNFLIv=NULL;
        return;
        }
    temp_BBNFLIv=(VkShaderModuleCreateInfo*)malloc(sizeof(VkShaderModuleCreateInfo));
[&]() {
*(temp_BBNFLIv)=deserialize_VkShaderModuleCreateInfo(data_json["members"]["pCreateInfo"]);}();
}();pCreateInfo=temp_BBNFLIv;}();
VkShaderModuleIdentifierEXT* pIdentifier
        ;
[&]() {

        if (data_json["members"]["pIdentifier"].contains("null")){
        pIdentifier=NULL;
        return;
        }
    pIdentifier=(VkShaderModuleIdentifierEXT*)malloc(sizeof(VkShaderModuleIdentifierEXT));
[&]() {
*(pIdentifier)=deserialize_VkShaderModuleIdentifierEXT(data_json["members"]["pIdentifier"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetShaderModuleCreateInfoIdentifierEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetShaderModuleCreateInfoIdentifierEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetShaderModuleCreateInfoIdentifierEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetShaderModuleCreateInfoIdentifierEXT");
    }  
    
call_function(device, pCreateInfo, pIdentifier);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pCreateInfo"]=[&]() {
    json return_zQuPJLA=json({});
    
        if (pCreateInfo==NULL){
            return_zQuPJLA["null"]=true;
            return return_zQuPJLA;
        }
        return_zQuPJLA=[&]() {
    json return_BZkuQie=json({});
    return serialize_VkShaderModuleCreateInfo(*pCreateInfo);}();
return return_zQuPJLA;}();
result["members"]["pIdentifier"]=[&]() {
    json return_ihsGwgD=json({});
    
        if (pIdentifier==NULL){
            return_ihsGwgD["null"]=true;
            return return_ihsGwgD;
        }
        return_ihsGwgD=[&]() {
    json return_frQlYdL=json({});
    return serialize_VkShaderModuleIdentifierEXT(*pIdentifier);}();
return return_ihsGwgD;}();

        writeToConn(result);
    }

    void handle_vkGetImageSubresourceLayout2KHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkImage image
            ;
[&]() {
image=deserialize_VkImage(data_json["members"]["image"]);}();
VkImageSubresource2KHR* pSubresource
            ;
[&]() {
VkImageSubresource2KHR* temp_YLJvcRL;[&]() {

        if (data_json["members"]["pSubresource"].contains("null")){
        temp_YLJvcRL=NULL;
        return;
        }
    temp_YLJvcRL=(VkImageSubresource2KHR*)malloc(sizeof(VkImageSubresource2KHR));
[&]() {
*(temp_YLJvcRL)=deserialize_VkImageSubresource2KHR(data_json["members"]["pSubresource"]);}();
}();pSubresource=temp_YLJvcRL;}();
VkSubresourceLayout2KHR* pLayout
        ;
[&]() {

        if (data_json["members"]["pLayout"].contains("null")){
        pLayout=NULL;
        return;
        }
    pLayout=(VkSubresourceLayout2KHR*)malloc(sizeof(VkSubresourceLayout2KHR));
[&]() {
*(pLayout)=deserialize_VkSubresourceLayout2KHR(data_json["members"]["pLayout"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetImageSubresourceLayout2KHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetImageSubresourceLayout2KHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetImageSubresourceLayout2KHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetImageSubresourceLayout2KHR");
    }  
    
call_function(device, image, pSubresource, pLayout);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["image"]=[&]() {
    json return_fgEkUQK=json({});
    return serialize_VkImage(image);}();
result["members"]["pSubresource"]=[&]() {
    json return_bZdtNsN=json({});
    
        if (pSubresource==NULL){
            return_bZdtNsN["null"]=true;
            return return_bZdtNsN;
        }
        return_bZdtNsN=[&]() {
    json return_BmMhjUO=json({});
    return serialize_VkImageSubresource2KHR(*pSubresource);}();
return return_bZdtNsN;}();
result["members"]["pLayout"]=[&]() {
    json return_iqRegYw=json({});
    
        if (pLayout==NULL){
            return_iqRegYw["null"]=true;
            return return_iqRegYw;
        }
        return_iqRegYw=[&]() {
    json return_YfnftDn=json({});
    return serialize_VkSubresourceLayout2KHR(*pLayout);}();
return return_iqRegYw;}();

        writeToConn(result);
    }

    void handle_vkGetImageSubresourceLayout2EXT(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkImage image
            ;
[&]() {
image=deserialize_VkImage(data_json["members"]["image"]);}();
VkImageSubresource2KHR* pSubresource
            ;
[&]() {
VkImageSubresource2KHR* temp_YLJvcRL;[&]() {

        if (data_json["members"]["pSubresource"].contains("null")){
        temp_YLJvcRL=NULL;
        return;
        }
    temp_YLJvcRL=(VkImageSubresource2KHR*)malloc(sizeof(VkImageSubresource2KHR));
[&]() {
*(temp_YLJvcRL)=deserialize_VkImageSubresource2KHR(data_json["members"]["pSubresource"]);}();
}();pSubresource=temp_YLJvcRL;}();
VkSubresourceLayout2KHR* pLayout
        ;
[&]() {

        if (data_json["members"]["pLayout"].contains("null")){
        pLayout=NULL;
        return;
        }
    pLayout=(VkSubresourceLayout2KHR*)malloc(sizeof(VkSubresourceLayout2KHR));
[&]() {
*(pLayout)=deserialize_VkSubresourceLayout2KHR(data_json["members"]["pLayout"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetImageSubresourceLayout2EXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetImageSubresourceLayout2EXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetImageSubresourceLayout2EXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetImageSubresourceLayout2EXT");
    }  
    
call_function(device, image, pSubresource, pLayout);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["image"]=[&]() {
    json return_fgEkUQK=json({});
    return serialize_VkImage(image);}();
result["members"]["pSubresource"]=[&]() {
    json return_bZdtNsN=json({});
    
        if (pSubresource==NULL){
            return_bZdtNsN["null"]=true;
            return return_bZdtNsN;
        }
        return_bZdtNsN=[&]() {
    json return_BmMhjUO=json({});
    return serialize_VkImageSubresource2KHR(*pSubresource);}();
return return_bZdtNsN;}();
result["members"]["pLayout"]=[&]() {
    json return_iqRegYw=json({});
    
        if (pLayout==NULL){
            return_iqRegYw["null"]=true;
            return return_iqRegYw;
        }
        return_iqRegYw=[&]() {
    json return_YfnftDn=json({});
    return serialize_VkSubresourceLayout2KHR(*pLayout);}();
return return_iqRegYw;}();

        writeToConn(result);
    }

    void handle_vkGetPipelinePropertiesEXT(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkPipelineInfoEXT* pPipelineInfo
            ;
[&]() {
VkPipelineInfoEXT* temp_gdPIITo;[&]() {

        if (data_json["members"]["pPipelineInfo"].contains("null")){
        temp_gdPIITo=NULL;
        return;
        }
    temp_gdPIITo=(VkPipelineInfoEXT*)malloc(sizeof(VkPipelineInfoEXT));
[&]() {
*(temp_gdPIITo)=deserialize_VkPipelineInfoEXT(data_json["members"]["pPipelineInfo"]);}();
}();pPipelineInfo=temp_gdPIITo;}();
VkBaseOutStructure* pPipelineProperties
        ;
[&]() {

        if (data_json["members"]["pPipelineProperties"].contains("null")){
        pPipelineProperties=NULL;
        return;
        }
    pPipelineProperties=(VkBaseOutStructure*)malloc(sizeof(VkBaseOutStructure));
[&]() {
*(pPipelineProperties)=deserialize_VkBaseOutStructure(data_json["members"]["pPipelineProperties"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPipelinePropertiesEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPipelinePropertiesEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPipelinePropertiesEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPipelinePropertiesEXT");
    }  
    
auto return_value=call_function(device, pPipelineInfo, pPipelineProperties);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_ElFaohU=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pPipelineInfo"]=[&]() {
    json return_TzcetmW=json({});
    
        if (pPipelineInfo==NULL){
            return_TzcetmW["null"]=true;
            return return_TzcetmW;
        }
        return_TzcetmW=[&]() {
    json return_TvTaBaR=json({});
    return serialize_VkPipelineInfoEXT(*pPipelineInfo);}();
return return_TzcetmW;}();
result["members"]["pPipelineProperties"]=[&]() {
    json return_PQgRlGt=json({});
    
        if (pPipelineProperties==NULL){
            return_PQgRlGt["null"]=true;
            return return_PQgRlGt;
        }
        return_PQgRlGt=[&]() {
    json return_HFHIkaz=json({});
    return serialize_VkBaseOutStructure(*pPipelineProperties);}();
return return_PQgRlGt;}();

        writeToConn(result);
    }

    void handle_vkGetFramebufferTilePropertiesQCOM(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkFramebuffer framebuffer
            ;
[&]() {
framebuffer=deserialize_VkFramebuffer(data_json["members"]["framebuffer"]);}();
uint32_t* pPropertiesCount
            ;
[&]() {

        if (data_json["members"]["pPropertiesCount"].contains("null")){
        pPropertiesCount=NULL;
        return;
        }
    pPropertiesCount=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pPropertiesCount)=deserialize_uint32_t(data_json["members"]["pPropertiesCount"]);}();
}();
VkTilePropertiesQCOM* pProperties
        ;
[&]() {

        if (data_json["members"]["pProperties"].contains("null")){
        pProperties=NULL;
        return;
        }
    pProperties=(VkTilePropertiesQCOM*)malloc(*pPropertiesCount*sizeof(VkTilePropertiesQCOM));
        for (int tNwUCgx=0; tNwUCgx < *pPropertiesCount; tNwUCgx++){
            [&]() {
pProperties[tNwUCgx]=deserialize_VkTilePropertiesQCOM(data_json["members"]["pProperties"]["members"][tNwUCgx]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetFramebufferTilePropertiesQCOM)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetFramebufferTilePropertiesQCOM");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetFramebufferTilePropertiesQCOM)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetFramebufferTilePropertiesQCOM");
    }  
    
auto return_value=call_function(device, framebuffer, pPropertiesCount, pProperties);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_gppTBAx=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["framebuffer"]=[&]() {
    json return_MEXIdZv=json({});
    return serialize_VkFramebuffer(framebuffer);}();
result["members"]["pPropertiesCount"]=[&]() {
    json return_hMPRREQ=json({});
    
        if (pPropertiesCount==NULL){
            return_hMPRREQ["null"]=true;
            return return_hMPRREQ;
        }
        return_hMPRREQ=[&]() {
    json return_ZiDDZIr=json({});
    return serialize_uint32_t(*pPropertiesCount);}();
return return_hMPRREQ;}();
result["members"]["pProperties"]=[&]() {
    json return_dSLFKCd=json({});
    
        if (pProperties==NULL){
            return_dSLFKCd["null"]=true;
            return return_dSLFKCd;
        }
        
        return_dSLFKCd["members"]={};
        for(int dSLFKCd=0; dSLFKCd < *pPropertiesCount; dSLFKCd++){
            json temp;
            temp=[&]() {
    json return_nfjHsYg=json({});
    return serialize_VkTilePropertiesQCOM(pProperties[dSLFKCd]);}();
            return_dSLFKCd["members"].push_back(temp);
        }
        return return_dSLFKCd;
        }();

        writeToConn(result);
    }

    void handle_vkGetDynamicRenderingTilePropertiesQCOM(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkRenderingInfo* pRenderingInfo
            ;
[&]() {
VkRenderingInfo* temp_bpoPYyB;[&]() {

        if (data_json["members"]["pRenderingInfo"].contains("null")){
        temp_bpoPYyB=NULL;
        return;
        }
    temp_bpoPYyB=(VkRenderingInfo*)malloc(sizeof(VkRenderingInfo));
[&]() {
*(temp_bpoPYyB)=deserialize_VkRenderingInfo(data_json["members"]["pRenderingInfo"]);}();
}();pRenderingInfo=temp_bpoPYyB;}();
VkTilePropertiesQCOM* pProperties
        ;
[&]() {

        if (data_json["members"]["pProperties"].contains("null")){
        pProperties=NULL;
        return;
        }
    pProperties=(VkTilePropertiesQCOM*)malloc(sizeof(VkTilePropertiesQCOM));
[&]() {
*(pProperties)=deserialize_VkTilePropertiesQCOM(data_json["members"]["pProperties"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetDynamicRenderingTilePropertiesQCOM)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDynamicRenderingTilePropertiesQCOM");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetDynamicRenderingTilePropertiesQCOM)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDynamicRenderingTilePropertiesQCOM");
    }  
    
auto return_value=call_function(device, pRenderingInfo, pProperties);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_aYcPWTB=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pRenderingInfo"]=[&]() {
    json return_iKQOGWZ=json({});
    
        if (pRenderingInfo==NULL){
            return_iKQOGWZ["null"]=true;
            return return_iKQOGWZ;
        }
        return_iKQOGWZ=[&]() {
    json return_jwLNECd=json({});
    return serialize_VkRenderingInfo(*pRenderingInfo);}();
return return_iKQOGWZ;}();
result["members"]["pProperties"]=[&]() {
    json return_hhhTRmg=json({});
    
        if (pProperties==NULL){
            return_hhhTRmg["null"]=true;
            return return_hhhTRmg;
        }
        return_hhhTRmg=[&]() {
    json return_voIHYba=json({});
    return serialize_VkTilePropertiesQCOM(*pProperties);}();
return return_hhhTRmg;}();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceOpticalFlowImageFormatsNV(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
VkOpticalFlowImageFormatInfoNV* pOpticalFlowImageFormatInfo
            ;
[&]() {
VkOpticalFlowImageFormatInfoNV* temp_zJbBSAw;[&]() {

        if (data_json["members"]["pOpticalFlowImageFormatInfo"].contains("null")){
        temp_zJbBSAw=NULL;
        return;
        }
    temp_zJbBSAw=(VkOpticalFlowImageFormatInfoNV*)malloc(sizeof(VkOpticalFlowImageFormatInfoNV));
[&]() {
*(temp_zJbBSAw)=deserialize_VkOpticalFlowImageFormatInfoNV(data_json["members"]["pOpticalFlowImageFormatInfo"]);}();
}();pOpticalFlowImageFormatInfo=temp_zJbBSAw;}();
uint32_t* pFormatCount
            ;
[&]() {

        if (data_json["members"]["pFormatCount"].contains("null")){
        pFormatCount=NULL;
        return;
        }
    pFormatCount=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pFormatCount)=deserialize_uint32_t(data_json["members"]["pFormatCount"]);}();
}();
VkOpticalFlowImageFormatPropertiesNV* pImageFormatProperties
        ;
[&]() {

        if (data_json["members"]["pImageFormatProperties"].contains("null")){
        pImageFormatProperties=NULL;
        return;
        }
    pImageFormatProperties=(VkOpticalFlowImageFormatPropertiesNV*)malloc(*pFormatCount*sizeof(VkOpticalFlowImageFormatPropertiesNV));
        for (int wGEjAvM=0; wGEjAvM < *pFormatCount; wGEjAvM++){
            [&]() {
pImageFormatProperties[wGEjAvM]=deserialize_VkOpticalFlowImageFormatPropertiesNV(data_json["members"]["pImageFormatProperties"]["members"][wGEjAvM]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceOpticalFlowImageFormatsNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceOpticalFlowImageFormatsNV");
    }  
    
auto return_value=call_function(physicalDevice, pOpticalFlowImageFormatInfo, pFormatCount, pImageFormatProperties);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_KnzwXds=json({});
    return serialize_VkResult(return_value);}();
result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["pOpticalFlowImageFormatInfo"]=[&]() {
    json return_CciqzNV=json({});
    
        if (pOpticalFlowImageFormatInfo==NULL){
            return_CciqzNV["null"]=true;
            return return_CciqzNV;
        }
        return_CciqzNV=[&]() {
    json return_PMfUBcq=json({});
    return serialize_VkOpticalFlowImageFormatInfoNV(*pOpticalFlowImageFormatInfo);}();
return return_CciqzNV;}();
result["members"]["pFormatCount"]=[&]() {
    json return_ZfwQvOT=json({});
    
        if (pFormatCount==NULL){
            return_ZfwQvOT["null"]=true;
            return return_ZfwQvOT;
        }
        return_ZfwQvOT=[&]() {
    json return_NYBQprC=json({});
    return serialize_uint32_t(*pFormatCount);}();
return return_ZfwQvOT;}();
result["members"]["pImageFormatProperties"]=[&]() {
    json return_yTLWayQ=json({});
    
        if (pImageFormatProperties==NULL){
            return_yTLWayQ["null"]=true;
            return return_yTLWayQ;
        }
        
        return_yTLWayQ["members"]={};
        for(int yTLWayQ=0; yTLWayQ < *pFormatCount; yTLWayQ++){
            json temp;
            temp=[&]() {
    json return_DiyyGXn=json({});
    return serialize_VkOpticalFlowImageFormatPropertiesNV(pImageFormatProperties[yTLWayQ]);}();
            return_yTLWayQ["members"].push_back(temp);
        }
        return return_yTLWayQ;
        }();

        writeToConn(result);
    }

    void handle_vkCreateOpticalFlowSessionNV(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkOpticalFlowSessionCreateInfoNV* pCreateInfo
            ;
[&]() {
VkOpticalFlowSessionCreateInfoNV* temp_MZRhuMB;[&]() {

        if (data_json["members"]["pCreateInfo"].contains("null")){
        temp_MZRhuMB=NULL;
        return;
        }
    temp_MZRhuMB=(VkOpticalFlowSessionCreateInfoNV*)malloc(sizeof(VkOpticalFlowSessionCreateInfoNV));
[&]() {
*(temp_MZRhuMB)=deserialize_VkOpticalFlowSessionCreateInfoNV(data_json["members"]["pCreateInfo"]);}();
}();pCreateInfo=temp_MZRhuMB;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkOpticalFlowSessionNV* pSession
        ;
[&]() {

        if (data_json["members"]["pSession"].contains("null")){
        pSession=NULL;
        return;
        }
    pSession=(VkOpticalFlowSessionNV*)malloc(sizeof(VkOpticalFlowSessionNV));
[&]() {
*(pSession)=deserialize_VkOpticalFlowSessionNV(data_json["members"]["pSession"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreateOpticalFlowSessionNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateOpticalFlowSessionNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreateOpticalFlowSessionNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateOpticalFlowSessionNV");
    }  
    
auto return_value=call_function(device, pCreateInfo, pAllocator, pSession);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_ILAgsmh=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pCreateInfo"]=[&]() {
    json return_TkRREmZ=json({});
    
        if (pCreateInfo==NULL){
            return_TkRREmZ["null"]=true;
            return return_TkRREmZ;
        }
        return_TkRREmZ=[&]() {
    json return_kUpaTJd=json({});
    return serialize_VkOpticalFlowSessionCreateInfoNV(*pCreateInfo);}();
return return_TkRREmZ;}();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pSession"]=[&]() {
    json return_LIJRsCt=json({});
    
        if (pSession==NULL){
            return_LIJRsCt["null"]=true;
            return return_LIJRsCt;
        }
        return_LIJRsCt=[&]() {
    json return_qSNFHFy=json({});
    return serialize_VkOpticalFlowSessionNV(*pSession);}();
return return_LIJRsCt;}();

        writeToConn(result);
    }

    void handle_vkDestroyOpticalFlowSessionNV(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkOpticalFlowSessionNV session
            ;
[&]() {
session=deserialize_VkOpticalFlowSessionNV(data_json["members"]["session"]);}();
VkAllocationCallbacks* pAllocator
        ;
[&]() {
VkAllocationCallbacks* temp_VAmhMvJ;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_VAmhMvJ=NULL;
        return;
        }
    temp_VAmhMvJ=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_VAmhMvJ)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_VAmhMvJ;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkDestroyOpticalFlowSessionNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyOpticalFlowSessionNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkDestroyOpticalFlowSessionNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyOpticalFlowSessionNV");
    }  
    
call_function(device, session, pAllocator);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["session"]=[&]() {
    json return_QXLUMFZ=json({});
    return serialize_VkOpticalFlowSessionNV(session);}();
result["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();

        writeToConn(result);
    }

    void handle_vkBindOpticalFlowSessionImageNV(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkOpticalFlowSessionNV session
            ;
[&]() {
session=deserialize_VkOpticalFlowSessionNV(data_json["members"]["session"]);}();
VkOpticalFlowSessionBindingPointNV bindingPoint
            ;
[&]() {
bindingPoint=deserialize_VkOpticalFlowSessionBindingPointNV(data_json["members"]["bindingPoint"]);}();
VkImageView view
            ;
[&]() {
view=deserialize_VkImageView(data_json["members"]["view"]);}();
VkImageLayout layout
        ;
[&]() {
layout=deserialize_VkImageLayout(data_json["members"]["layout"]);}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkBindOpticalFlowSessionImageNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkBindOpticalFlowSessionImageNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkBindOpticalFlowSessionImageNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkBindOpticalFlowSessionImageNV");
    }  
    
auto return_value=call_function(device, session, bindingPoint, view, layout);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_VtdPbbo=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["session"]=[&]() {
    json return_QXLUMFZ=json({});
    return serialize_VkOpticalFlowSessionNV(session);}();
result["members"]["bindingPoint"]=[&]() {
    json return_FqTNUsz=json({});
    return serialize_VkOpticalFlowSessionBindingPointNV(bindingPoint);}();
result["members"]["view"]=[&]() {
    json return_NzIpQJV=json({});
    return serialize_VkImageView(view);}();
result["members"]["layout"]=[&]() {
    json return_YJLInjw=json({});
    return serialize_VkImageLayout(layout);}();

        writeToConn(result);
    }

    void handle_vkCmdOpticalFlowExecuteNV(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkOpticalFlowSessionNV session
            ;
[&]() {
session=deserialize_VkOpticalFlowSessionNV(data_json["members"]["session"]);}();
VkOpticalFlowExecuteInfoNV* pExecuteInfo
        ;
[&]() {
VkOpticalFlowExecuteInfoNV* temp_IlEEmKM;[&]() {

        if (data_json["members"]["pExecuteInfo"].contains("null")){
        temp_IlEEmKM=NULL;
        return;
        }
    temp_IlEEmKM=(VkOpticalFlowExecuteInfoNV*)malloc(sizeof(VkOpticalFlowExecuteInfoNV));
[&]() {
*(temp_IlEEmKM)=deserialize_VkOpticalFlowExecuteInfoNV(data_json["members"]["pExecuteInfo"]);}();
}();pExecuteInfo=temp_IlEEmKM;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdOpticalFlowExecuteNV)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdOpticalFlowExecuteNV");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdOpticalFlowExecuteNV)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdOpticalFlowExecuteNV");
    }  
    
call_function(commandBuffer, session, pExecuteInfo);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["session"]=[&]() {
    json return_QXLUMFZ=json({});
    return serialize_VkOpticalFlowSessionNV(session);}();
result["members"]["pExecuteInfo"]=[&]() {
    json return_USYZqXI=json({});
    
        if (pExecuteInfo==NULL){
            return_USYZqXI["null"]=true;
            return return_USYZqXI;
        }
        return_USYZqXI=[&]() {
    json return_QJMlrvC=json({});
    return serialize_VkOpticalFlowExecuteInfoNV(*pExecuteInfo);}();
return return_USYZqXI;}();

        writeToConn(result);
    }

    void handle_vkGetDeviceFaultInfoEXT(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDeviceFaultCountsEXT* pFaultCounts
            ;
[&]() {

        if (data_json["members"]["pFaultCounts"].contains("null")){
        pFaultCounts=NULL;
        return;
        }
    pFaultCounts=(VkDeviceFaultCountsEXT*)malloc(sizeof(VkDeviceFaultCountsEXT));
[&]() {
*(pFaultCounts)=deserialize_VkDeviceFaultCountsEXT(data_json["members"]["pFaultCounts"]);}();
}();
VkDeviceFaultInfoEXT* pFaultInfo
        ;
[&]() {

        if (data_json["members"]["pFaultInfo"].contains("null")){
        pFaultInfo=NULL;
        return;
        }
    pFaultInfo=(VkDeviceFaultInfoEXT*)malloc(sizeof(VkDeviceFaultInfoEXT));
[&]() {
*(pFaultInfo)=deserialize_VkDeviceFaultInfoEXT(data_json["members"]["pFaultInfo"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetDeviceFaultInfoEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDeviceFaultInfoEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetDeviceFaultInfoEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDeviceFaultInfoEXT");
    }  
    
auto return_value=call_function(device, pFaultCounts, pFaultInfo);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_LYtUTQk=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pFaultCounts"]=[&]() {
    json return_gPJvsOD=json({});
    
        if (pFaultCounts==NULL){
            return_gPJvsOD["null"]=true;
            return return_gPJvsOD;
        }
        return_gPJvsOD=[&]() {
    json return_gjrmbIU=json({});
    return serialize_VkDeviceFaultCountsEXT(*pFaultCounts);}();
return return_gPJvsOD;}();
result["members"]["pFaultInfo"]=[&]() {
    json return_bOwqwxH=json({});
    
        if (pFaultInfo==NULL){
            return_bOwqwxH["null"]=true;
            return return_bOwqwxH;
        }
        return_bOwqwxH=[&]() {
    json return_XETFneH=json({});
    return serialize_VkDeviceFaultInfoEXT(*pFaultInfo);}();
return return_bOwqwxH;}();

        writeToConn(result);
    }

    void handle_vkCmdSetDepthBias2EXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
VkDepthBiasInfoEXT*         pDepthBiasInfo
        ;
[&]() {
VkDepthBiasInfoEXT* temp_HZmqdqu;[&]() {

        if (data_json["members"]["pDepthBiasInfo"].contains("null")){
        temp_HZmqdqu=NULL;
        return;
        }
    temp_HZmqdqu=(VkDepthBiasInfoEXT*)malloc(sizeof(VkDepthBiasInfoEXT));
[&]() {
*(temp_HZmqdqu)=deserialize_VkDepthBiasInfoEXT(data_json["members"]["pDepthBiasInfo"]);}();
}();pDepthBiasInfo=temp_HZmqdqu;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdSetDepthBias2EXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetDepthBias2EXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdSetDepthBias2EXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdSetDepthBias2EXT");
    }  
    
call_function(commandBuffer, pDepthBiasInfo);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["pDepthBiasInfo"]=[&]() {
    json return_EVfWBBK=json({});
    
        if (pDepthBiasInfo==NULL){
            return_EVfWBBK["null"]=true;
            return return_EVfWBBK;
        }
        return_EVfWBBK=[&]() {
    json return_HAQYcaj=json({});
    return serialize_VkDepthBiasInfoEXT(*pDepthBiasInfo);}();
return return_EVfWBBK;}();

        writeToConn(result);
    }

    void handle_vkReleaseSwapchainImagesEXT(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkReleaseSwapchainImagesInfoEXT* pReleaseInfo
        ;
[&]() {
VkReleaseSwapchainImagesInfoEXT* temp_qHKcUnn;[&]() {

        if (data_json["members"]["pReleaseInfo"].contains("null")){
        temp_qHKcUnn=NULL;
        return;
        }
    temp_qHKcUnn=(VkReleaseSwapchainImagesInfoEXT*)malloc(sizeof(VkReleaseSwapchainImagesInfoEXT));
[&]() {
*(temp_qHKcUnn)=deserialize_VkReleaseSwapchainImagesInfoEXT(data_json["members"]["pReleaseInfo"]);}();
}();pReleaseInfo=temp_qHKcUnn;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkReleaseSwapchainImagesEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkReleaseSwapchainImagesEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkReleaseSwapchainImagesEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkReleaseSwapchainImagesEXT");
    }  
    
auto return_value=call_function(device, pReleaseInfo);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_rDQkFtm=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pReleaseInfo"]=[&]() {
    json return_bWEwLpe=json({});
    
        if (pReleaseInfo==NULL){
            return_bWEwLpe["null"]=true;
            return return_bWEwLpe;
        }
        return_bWEwLpe=[&]() {
    json return_PhnUYNe=json({});
    return serialize_VkReleaseSwapchainImagesInfoEXT(*pReleaseInfo);}();
return return_bWEwLpe;}();

        writeToConn(result);
    }

    void handle_vkGetDeviceImageSubresourceLayoutKHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkDeviceImageSubresourceInfoKHR* pInfo
            ;
[&]() {
VkDeviceImageSubresourceInfoKHR* temp_yNKbwdy;[&]() {

        if (data_json["members"]["pInfo"].contains("null")){
        temp_yNKbwdy=NULL;
        return;
        }
    temp_yNKbwdy=(VkDeviceImageSubresourceInfoKHR*)malloc(sizeof(VkDeviceImageSubresourceInfoKHR));
[&]() {
*(temp_yNKbwdy)=deserialize_VkDeviceImageSubresourceInfoKHR(data_json["members"]["pInfo"]);}();
}();pInfo=temp_yNKbwdy;}();
VkSubresourceLayout2KHR* pLayout
        ;
[&]() {

        if (data_json["members"]["pLayout"].contains("null")){
        pLayout=NULL;
        return;
        }
    pLayout=(VkSubresourceLayout2KHR*)malloc(sizeof(VkSubresourceLayout2KHR));
[&]() {
*(pLayout)=deserialize_VkSubresourceLayout2KHR(data_json["members"]["pLayout"]);}();
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetDeviceImageSubresourceLayoutKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDeviceImageSubresourceLayoutKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetDeviceImageSubresourceLayoutKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetDeviceImageSubresourceLayoutKHR");
    }  
    
call_function(device, pInfo, pLayout);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pInfo"]=[&]() {
    json return_VkxpJce=json({});
    
        if (pInfo==NULL){
            return_VkxpJce["null"]=true;
            return return_VkxpJce;
        }
        return_VkxpJce=[&]() {
    json return_GAhdQQQ=json({});
    return serialize_VkDeviceImageSubresourceInfoKHR(*pInfo);}();
return return_VkxpJce;}();
result["members"]["pLayout"]=[&]() {
    json return_iqRegYw=json({});
    
        if (pLayout==NULL){
            return_iqRegYw["null"]=true;
            return return_iqRegYw;
        }
        return_iqRegYw=[&]() {
    json return_YfnftDn=json({});
    return serialize_VkSubresourceLayout2KHR(*pLayout);}();
return return_iqRegYw;}();

        writeToConn(result);
    }

    void handle_vkMapMemory2KHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkMemoryMapInfoKHR* pMemoryMapInfo
            ;
[&]() {
VkMemoryMapInfoKHR* temp_pqRmdDE;[&]() {

        if (data_json["members"]["pMemoryMapInfo"].contains("null")){
        temp_pqRmdDE=NULL;
        return;
        }
    temp_pqRmdDE=(VkMemoryMapInfoKHR*)malloc(sizeof(VkMemoryMapInfoKHR));
[&]() {
*(temp_pqRmdDE)=deserialize_VkMemoryMapInfoKHR(data_json["members"]["pMemoryMapInfo"]);}();
}();pMemoryMapInfo=temp_pqRmdDE;}();
void** ppData
        ;
[&]() {

        if (data_json["members"]["ppData"].contains("null")){
        ppData=NULL;
        return;
        }
    ppData=(void**)malloc(sizeof(void*));
[&]() {

        if (data_json["members"]["ppData"].contains("null")){
        *(ppData)=NULL;
        return;
        }
    *(ppData)=deserialize_void_p(data_json["members"]["ppData"]);
}();
}();

        auto info=new MemInfo();
        
        VkDeviceSize whole_size;
        vkGetDeviceMemoryCommitment(device,pMemoryMapInfo->memory,&whole_size);
        info->size=whole_size;
        
        devicememory_to_mem_info[(uintptr_t)pMemoryMapInfo->memory]=info;
        

    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkMapMemory2KHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkMapMemory2KHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkMapMemory2KHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkMapMemory2KHR");
    }  
    
auto return_value=call_function(device, pMemoryMapInfo, ppData);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_iHNihEq=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pMemoryMapInfo"]=[&]() {
    json return_iAssYzz=json({});
    
        if (pMemoryMapInfo==NULL){
            return_iAssYzz["null"]=true;
            return return_iAssYzz;
        }
        return_iAssYzz=[&]() {
    json return_gjOOAnJ=json({});
    return serialize_VkMemoryMapInfoKHR(*pMemoryMapInfo);}();
return return_iAssYzz;}();
result["members"]["ppData"]=[&]() {
    json return_PsFVEjO=json({});
    
        if (ppData==NULL){
            return_PsFVEjO["null"]=true;
            return return_PsFVEjO;
        }
        return_PsFVEjO=[&]() {
    json return_KWNLtTl=json({});
    
        if (*ppData==NULL){
            return_KWNLtTl["null"]=true;
            return return_KWNLtTl;
        }
        return serialize_void_p(*ppData);
}();
return return_PsFVEjO;}();

        writeToConn(result);
    }

    void handle_vkUnmapMemory2KHR(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkMemoryUnmapInfoKHR* pMemoryUnmapInfo
        ;
[&]() {
VkMemoryUnmapInfoKHR* temp_BqsUhGn;[&]() {

        if (data_json["members"]["pMemoryUnmapInfo"].contains("null")){
        temp_BqsUhGn=NULL;
        return;
        }
    temp_BqsUhGn=(VkMemoryUnmapInfoKHR*)malloc(sizeof(VkMemoryUnmapInfoKHR));
[&]() {
*(temp_BqsUhGn)=deserialize_VkMemoryUnmapInfoKHR(data_json["members"]["pMemoryUnmapInfo"]);}();
}();pMemoryUnmapInfo=temp_BqsUhGn;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkUnmapMemory2KHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkUnmapMemory2KHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkUnmapMemory2KHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkUnmapMemory2KHR");
    }  
    
auto return_value=call_function(device, pMemoryUnmapInfo);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_hzZybwp=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["pMemoryUnmapInfo"]=[&]() {
    json return_MSeIZcJ=json({});
    
        if (pMemoryUnmapInfo==NULL){
            return_MSeIZcJ["null"]=true;
            return return_MSeIZcJ;
        }
        return_MSeIZcJ=[&]() {
    json return_FbaHlKW=json({});
    return serialize_VkMemoryUnmapInfoKHR(*pMemoryUnmapInfo);}();
return return_MSeIZcJ;}();

        writeToConn(result);
    }

    void handle_vkCreateShadersEXT(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
uint32_t createInfoCount
            ;
[&]() {
createInfoCount=deserialize_uint32_t(data_json["members"]["createInfoCount"]);}();
VkShaderCreateInfoEXT* pCreateInfos
            ;
[&]() {
VkShaderCreateInfoEXT* temp_paddjDT;[&]() {

        if (data_json["members"]["pCreateInfos"].contains("null")){
        temp_paddjDT=NULL;
        return;
        }
    temp_paddjDT=(VkShaderCreateInfoEXT*)malloc(createInfoCount*sizeof(VkShaderCreateInfoEXT));
        for (int zWgScUm=0; zWgScUm < createInfoCount; zWgScUm++){
            [&]() {
temp_paddjDT[zWgScUm]=deserialize_VkShaderCreateInfoEXT(data_json["members"]["pCreateInfos"]["members"][zWgScUm]);}();;
        }
        }();pCreateInfos=temp_paddjDT;}();
VkAllocationCallbacks* pAllocator
            ;
[&]() {
VkAllocationCallbacks* temp_fOQoUxe;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_fOQoUxe=NULL;
        return;
        }
    temp_fOQoUxe=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_fOQoUxe)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_fOQoUxe;}();
VkShaderEXT* pShaders
        ;
[&]() {

        if (data_json["members"]["pShaders"].contains("null")){
        pShaders=NULL;
        return;
        }
    pShaders=(VkShaderEXT*)malloc(createInfoCount*sizeof(VkShaderEXT));
        for (int QevDDJq=0; QevDDJq < createInfoCount; QevDDJq++){
            [&]() {
pShaders[QevDDJq]=deserialize_VkShaderEXT(data_json["members"]["pShaders"]["members"][QevDDJq]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCreateShadersEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateShadersEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCreateShadersEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCreateShadersEXT");
    }  
    
auto return_value=call_function(device, createInfoCount, pCreateInfos, pAllocator, pShaders);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_snixoJf=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["createInfoCount"]=[&]() {
    json return_cRiHaUT=json({});
    return serialize_uint32_t(createInfoCount);}();
result["members"]["pCreateInfos"]=[&]() {
    json return_VEGzEfV=json({});
    
        if (pCreateInfos==NULL){
            return_VEGzEfV["null"]=true;
            return return_VEGzEfV;
        }
        
        return_VEGzEfV["members"]={};
        for(int VEGzEfV=0; VEGzEfV < createInfoCount; VEGzEfV++){
            json temp;
            temp=[&]() {
    json return_dCUcdrw=json({});
    return serialize_VkShaderCreateInfoEXT(pCreateInfos[VEGzEfV]);}();
            return_VEGzEfV["members"].push_back(temp);
        }
        return return_VEGzEfV;
        }();
result["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
result["members"]["pShaders"]=[&]() {
    json return_paFlOkF=json({});
    
        if (pShaders==NULL){
            return_paFlOkF["null"]=true;
            return return_paFlOkF;
        }
        
        return_paFlOkF["members"]={};
        for(int paFlOkF=0; paFlOkF < createInfoCount; paFlOkF++){
            json temp;
            temp=[&]() {
    json return_jCBwGPT=json({});
    return serialize_VkShaderEXT(pShaders[paFlOkF]);}();
            return_paFlOkF["members"].push_back(temp);
        }
        return return_paFlOkF;
        }();

        writeToConn(result);
    }

    void handle_vkDestroyShaderEXT(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkShaderEXT shader
            ;
[&]() {
shader=deserialize_VkShaderEXT(data_json["members"]["shader"]);}();
VkAllocationCallbacks* pAllocator
        ;
[&]() {
VkAllocationCallbacks* temp_VAmhMvJ;[&]() {

        if (data_json["members"]["pAllocator"].contains("null")){
        temp_VAmhMvJ=NULL;
        return;
        }
    temp_VAmhMvJ=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
[&]() {
*(temp_VAmhMvJ)=deserialize_VkAllocationCallbacks(data_json["members"]["pAllocator"]);}();
}();pAllocator=temp_VAmhMvJ;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkDestroyShaderEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyShaderEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkDestroyShaderEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkDestroyShaderEXT");
    }  
    
call_function(device, shader, pAllocator);
json result=json({});
        result["type"]="Response";
    

result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["shader"]=[&]() {
    json return_kTxlicC=json({});
    return serialize_VkShaderEXT(shader);}();
result["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();

        writeToConn(result);
    }

    void handle_vkGetShaderBinaryDataEXT(json data_json){
    //Will only be called by the server
    
VkDevice device
            ;
[&]() {
device=deserialize_VkDevice(data_json["members"]["device"]);}();
VkShaderEXT shader
            ;
[&]() {
shader=deserialize_VkShaderEXT(data_json["members"]["shader"]);}();
size_t* pDataSize
            ;
[&]() {

        if (data_json["members"]["pDataSize"].contains("null")){
        pDataSize=NULL;
        return;
        }
    pDataSize=(size_t*)malloc(sizeof(size_t));
[&]() {
*(pDataSize)=deserialize_size_t(data_json["members"]["pDataSize"]);}();
}();
void* pData
        ;
[&]() {

        if (data_json["members"]["pData"].contains("null")){
        pData=NULL;
        return;
        }
    pData=deserialize_void_p(data_json["members"]["pData"]);
}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetShaderBinaryDataEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetShaderBinaryDataEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetShaderBinaryDataEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetShaderBinaryDataEXT");
    }  
    
auto return_value=call_function(device, shader, pDataSize, pData);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_NzEXCZS=json({});
    return serialize_VkResult(return_value);}();
result["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
result["members"]["shader"]=[&]() {
    json return_kTxlicC=json({});
    return serialize_VkShaderEXT(shader);}();
result["members"]["pDataSize"]=[&]() {
    json return_DeyPpRh=json({});
    
        if (pDataSize==NULL){
            return_DeyPpRh["null"]=true;
            return return_DeyPpRh;
        }
        return_DeyPpRh=[&]() {
    json return_ffvzSRv=json({});
    return serialize_size_t(*pDataSize);}();
return return_DeyPpRh;}();
result["members"]["pData"]=[&]() {
    json return_MOqETBu=json({});
    
        if (pData==NULL){
            return_MOqETBu["null"]=true;
            return return_MOqETBu;
        }
        return serialize_void_p(pData);
}();

        writeToConn(result);
    }

    void handle_vkCmdBindShadersEXT(json data_json){
    //Will only be called by the server
    
VkCommandBuffer commandBuffer
            ;
[&]() {
commandBuffer=deserialize_VkCommandBuffer(data_json["members"]["commandBuffer"]);}();
uint32_t stageCount
            ;
[&]() {
stageCount=deserialize_uint32_t(data_json["members"]["stageCount"]);}();
VkShaderStageFlagBits* pStages
            ;
[&]() {
VkShaderStageFlagBits* temp_ldmpqAz;[&]() {

        if (data_json["members"]["pStages"].contains("null")){
        temp_ldmpqAz=NULL;
        return;
        }
    temp_ldmpqAz=(VkShaderStageFlagBits*)malloc(stageCount*sizeof(VkShaderStageFlagBits));
        for (int NBdNTZk=0; NBdNTZk < stageCount; NBdNTZk++){
            [&]() {
temp_ldmpqAz[NBdNTZk]=deserialize_VkShaderStageFlagBits(data_json["members"]["pStages"]["members"][NBdNTZk]);}();;
        }
        }();pStages=temp_ldmpqAz;}();
VkShaderEXT* pShaders
        ;
[&]() {
VkShaderEXT* temp_dfExjEB;[&]() {

        if (data_json["members"]["pShaders"].contains("null")){
        temp_dfExjEB=NULL;
        return;
        }
    temp_dfExjEB=(VkShaderEXT*)malloc(stageCount*sizeof(VkShaderEXT));
        for (int aHysNTA=0; aHysNTA < stageCount; aHysNTA++){
            [&]() {
temp_dfExjEB[aHysNTA]=deserialize_VkShaderEXT(data_json["members"]["pShaders"]["members"][aHysNTA]);}();;
        }
        }();pShaders=temp_dfExjEB;}();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkCmdBindShadersEXT)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBindShadersEXT");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkCmdBindShadersEXT)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkCmdBindShadersEXT");
    }  
    
call_function(commandBuffer, stageCount, pStages, pShaders);
json result=json({});
        result["type"]="Response";
    

result["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
result["members"]["stageCount"]=[&]() {
    json return_TNsnBml=json({});
    return serialize_uint32_t(stageCount);}();
result["members"]["pStages"]=[&]() {
    json return_TrQNrwC=json({});
    
        if (pStages==NULL){
            return_TrQNrwC["null"]=true;
            return return_TrQNrwC;
        }
        
        return_TrQNrwC["members"]={};
        for(int TrQNrwC=0; TrQNrwC < stageCount; TrQNrwC++){
            json temp;
            temp=[&]() {
    json return_pJyofbO=json({});
    return serialize_VkShaderStageFlagBits(pStages[TrQNrwC]);}();
            return_TrQNrwC["members"].push_back(temp);
        }
        return return_TrQNrwC;
        }();
result["members"]["pShaders"]=[&]() {
    json return_yZLrDLm=json({});
    
        if (pShaders==NULL){
            return_yZLrDLm["null"]=true;
            return return_yZLrDLm;
        }
        
        return_yZLrDLm["members"]={};
        for(int yZLrDLm=0; yZLrDLm < stageCount; yZLrDLm++){
            json temp;
            temp=[&]() {
    json return_enWRKDR=json({});
    return serialize_VkShaderEXT(pShaders[yZLrDLm]);}();
            return_yZLrDLm["members"].push_back(temp);
        }
        return return_yZLrDLm;
        }();

        writeToConn(result);
    }

    void handle_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR(json data_json){
    //Will only be called by the server
    
VkPhysicalDevice physicalDevice
            ;
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(data_json["members"]["physicalDevice"]);}();
uint32_t* pPropertyCount
            ;
[&]() {

        if (data_json["members"]["pPropertyCount"].contains("null")){
        pPropertyCount=NULL;
        return;
        }
    pPropertyCount=(uint32_t*)malloc(sizeof(uint32_t));
[&]() {
*(pPropertyCount)=deserialize_uint32_t(data_json["members"]["pPropertyCount"]);}();
}();
VkCooperativeMatrixPropertiesKHR* pProperties
        ;
[&]() {

        if (data_json["members"]["pProperties"].contains("null")){
        pProperties=NULL;
        return;
        }
    pProperties=(VkCooperativeMatrixPropertiesKHR*)malloc(*pPropertyCount*sizeof(VkCooperativeMatrixPropertiesKHR));
        for (int oQxHemi=0; oQxHemi < *pPropertyCount; oQxHemi++){
            [&]() {
pProperties[oQxHemi]=deserialize_VkCooperativeMatrixPropertiesKHR(data_json["members"]["pProperties"]["members"][oQxHemi]);}();;
        }
        }();


    if(data_json["parent"]["type"]=="Instance"){
        auto call_function=(PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR)get_instance_proc_addr((VkInstance)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR");
    }else if(data_json["parent"]["type"]=="Device"){
        auto call_function=(PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR)get_device_proc_addr((VkDevice)(data_json["parent"]["handle"].get<uintptr_t>()),"vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR");
    }  
    
auto return_value=call_function(physicalDevice, pPropertyCount, pProperties);
json result=json({});
        result["type"]="Response";
    
result["return"]=[&]() {
    json return_wAdeWYj=json({});
    return serialize_VkResult(return_value);}();
result["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
result["members"]["pPropertyCount"]=[&]() {
    json return_MnYOHdG=json({});
    
        if (pPropertyCount==NULL){
            return_MnYOHdG["null"]=true;
            return return_MnYOHdG;
        }
        return_MnYOHdG=[&]() {
    json return_rPOmKzR=json({});
    return serialize_uint32_t(*pPropertyCount);}();
return return_MnYOHdG;}();
result["members"]["pProperties"]=[&]() {
    json return_jLCyrCC=json({});
    
        if (pProperties==NULL){
            return_jLCyrCC["null"]=true;
            return return_jLCyrCC;
        }
        
        return_jLCyrCC["members"]={};
        for(int jLCyrCC=0; jLCyrCC < *pPropertyCount; jLCyrCC++){
            json temp;
            temp=[&]() {
    json return_kucuiCA=json({});
    return serialize_VkCooperativeMatrixPropertiesKHR(pProperties[jLCyrCC]);}();
            return_jLCyrCC["members"].push_back(temp);
        }
        return return_jLCyrCC;
        }();

        writeToConn(result);
    }

void handle_command(json data){
//Will only be called by the server
std::string command=data["type"].get<std::string>().substr(std::string("command_").length());



        if(command=="vkCreateInstance"){
            handle_vkCreateInstance(data);
            return;
        }
    

        if(command=="vkDestroyInstance"){
            handle_vkDestroyInstance(data);
            return;
        }
    

        if(command=="vkEnumeratePhysicalDevices"){
            handle_vkEnumeratePhysicalDevices(data);
            return;
        }
    

        if(command=="vkGetDeviceProcAddr"){
            handle_vkGetDeviceProcAddr(data);
            return;
        }
    

        if(command=="vkGetInstanceProcAddr"){
            handle_vkGetInstanceProcAddr(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceProperties"){
            handle_vkGetPhysicalDeviceProperties(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceQueueFamilyProperties"){
            handle_vkGetPhysicalDeviceQueueFamilyProperties(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceMemoryProperties"){
            handle_vkGetPhysicalDeviceMemoryProperties(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceFeatures"){
            handle_vkGetPhysicalDeviceFeatures(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceFormatProperties"){
            handle_vkGetPhysicalDeviceFormatProperties(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceImageFormatProperties"){
            handle_vkGetPhysicalDeviceImageFormatProperties(data);
            return;
        }
    

        if(command=="vkCreateDevice"){
            handle_vkCreateDevice(data);
            return;
        }
    

        if(command=="vkDestroyDevice"){
            handle_vkDestroyDevice(data);
            return;
        }
    

        if(command=="vkEnumerateInstanceVersion"){
            handle_vkEnumerateInstanceVersion(data);
            return;
        }
    

        if(command=="vkEnumerateInstanceLayerProperties"){
            handle_vkEnumerateInstanceLayerProperties(data);
            return;
        }
    

        if(command=="vkEnumerateInstanceExtensionProperties"){
            handle_vkEnumerateInstanceExtensionProperties(data);
            return;
        }
    

        if(command=="vkEnumerateDeviceLayerProperties"){
            handle_vkEnumerateDeviceLayerProperties(data);
            return;
        }
    

        if(command=="vkEnumerateDeviceExtensionProperties"){
            handle_vkEnumerateDeviceExtensionProperties(data);
            return;
        }
    

        if(command=="vkGetDeviceQueue"){
            handle_vkGetDeviceQueue(data);
            return;
        }
    

        if(command=="vkQueueSubmit"){
            handle_vkQueueSubmit(data);
            return;
        }
    

        if(command=="vkQueueWaitIdle"){
            handle_vkQueueWaitIdle(data);
            return;
        }
    

        if(command=="vkDeviceWaitIdle"){
            handle_vkDeviceWaitIdle(data);
            return;
        }
    

        if(command=="vkAllocateMemory"){
            handle_vkAllocateMemory(data);
            return;
        }
    

        if(command=="vkFreeMemory"){
            handle_vkFreeMemory(data);
            return;
        }
    

        if(command=="vkMapMemory"){
            handle_vkMapMemory(data);
            return;
        }
    

        if(command=="vkUnmapMemory"){
            handle_vkUnmapMemory(data);
            return;
        }
    

        if(command=="vkFlushMappedMemoryRanges"){
            handle_vkFlushMappedMemoryRanges(data);
            return;
        }
    

        if(command=="vkInvalidateMappedMemoryRanges"){
            handle_vkInvalidateMappedMemoryRanges(data);
            return;
        }
    

        if(command=="vkGetDeviceMemoryCommitment"){
            handle_vkGetDeviceMemoryCommitment(data);
            return;
        }
    

        if(command=="vkGetBufferMemoryRequirements"){
            handle_vkGetBufferMemoryRequirements(data);
            return;
        }
    

        if(command=="vkBindBufferMemory"){
            handle_vkBindBufferMemory(data);
            return;
        }
    

        if(command=="vkGetImageMemoryRequirements"){
            handle_vkGetImageMemoryRequirements(data);
            return;
        }
    

        if(command=="vkBindImageMemory"){
            handle_vkBindImageMemory(data);
            return;
        }
    

        if(command=="vkGetImageSparseMemoryRequirements"){
            handle_vkGetImageSparseMemoryRequirements(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceSparseImageFormatProperties"){
            handle_vkGetPhysicalDeviceSparseImageFormatProperties(data);
            return;
        }
    

        if(command=="vkQueueBindSparse"){
            handle_vkQueueBindSparse(data);
            return;
        }
    

        if(command=="vkCreateFence"){
            handle_vkCreateFence(data);
            return;
        }
    

        if(command=="vkDestroyFence"){
            handle_vkDestroyFence(data);
            return;
        }
    

        if(command=="vkResetFences"){
            handle_vkResetFences(data);
            return;
        }
    

        if(command=="vkGetFenceStatus"){
            handle_vkGetFenceStatus(data);
            return;
        }
    

        if(command=="vkWaitForFences"){
            handle_vkWaitForFences(data);
            return;
        }
    

        if(command=="vkCreateSemaphore"){
            handle_vkCreateSemaphore(data);
            return;
        }
    

        if(command=="vkDestroySemaphore"){
            handle_vkDestroySemaphore(data);
            return;
        }
    

        if(command=="vkCreateEvent"){
            handle_vkCreateEvent(data);
            return;
        }
    

        if(command=="vkDestroyEvent"){
            handle_vkDestroyEvent(data);
            return;
        }
    

        if(command=="vkGetEventStatus"){
            handle_vkGetEventStatus(data);
            return;
        }
    

        if(command=="vkSetEvent"){
            handle_vkSetEvent(data);
            return;
        }
    

        if(command=="vkResetEvent"){
            handle_vkResetEvent(data);
            return;
        }
    

        if(command=="vkCreateQueryPool"){
            handle_vkCreateQueryPool(data);
            return;
        }
    

        if(command=="vkDestroyQueryPool"){
            handle_vkDestroyQueryPool(data);
            return;
        }
    

        if(command=="vkGetQueryPoolResults"){
            handle_vkGetQueryPoolResults(data);
            return;
        }
    

        if(command=="vkResetQueryPool"){
            handle_vkResetQueryPool(data);
            return;
        }
    

        if(command=="vkResetQueryPoolEXT"){
            handle_vkResetQueryPoolEXT(data);
            return;
        }
    

        if(command=="vkCreateBuffer"){
            handle_vkCreateBuffer(data);
            return;
        }
    

        if(command=="vkDestroyBuffer"){
            handle_vkDestroyBuffer(data);
            return;
        }
    

        if(command=="vkCreateBufferView"){
            handle_vkCreateBufferView(data);
            return;
        }
    

        if(command=="vkDestroyBufferView"){
            handle_vkDestroyBufferView(data);
            return;
        }
    

        if(command=="vkCreateImage"){
            handle_vkCreateImage(data);
            return;
        }
    

        if(command=="vkDestroyImage"){
            handle_vkDestroyImage(data);
            return;
        }
    

        if(command=="vkGetImageSubresourceLayout"){
            handle_vkGetImageSubresourceLayout(data);
            return;
        }
    

        if(command=="vkCreateImageView"){
            handle_vkCreateImageView(data);
            return;
        }
    

        if(command=="vkDestroyImageView"){
            handle_vkDestroyImageView(data);
            return;
        }
    

        if(command=="vkCreateShaderModule"){
            handle_vkCreateShaderModule(data);
            return;
        }
    

        if(command=="vkDestroyShaderModule"){
            handle_vkDestroyShaderModule(data);
            return;
        }
    

        if(command=="vkCreatePipelineCache"){
            handle_vkCreatePipelineCache(data);
            return;
        }
    

        if(command=="vkDestroyPipelineCache"){
            handle_vkDestroyPipelineCache(data);
            return;
        }
    

        if(command=="vkGetPipelineCacheData"){
            handle_vkGetPipelineCacheData(data);
            return;
        }
    

        if(command=="vkMergePipelineCaches"){
            handle_vkMergePipelineCaches(data);
            return;
        }
    

        if(command=="vkCreateGraphicsPipelines"){
            handle_vkCreateGraphicsPipelines(data);
            return;
        }
    

        if(command=="vkCreateComputePipelines"){
            handle_vkCreateComputePipelines(data);
            return;
        }
    

        if(command=="vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI"){
            handle_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(data);
            return;
        }
    

        if(command=="vkDestroyPipeline"){
            handle_vkDestroyPipeline(data);
            return;
        }
    

        if(command=="vkCreatePipelineLayout"){
            handle_vkCreatePipelineLayout(data);
            return;
        }
    

        if(command=="vkDestroyPipelineLayout"){
            handle_vkDestroyPipelineLayout(data);
            return;
        }
    

        if(command=="vkCreateSampler"){
            handle_vkCreateSampler(data);
            return;
        }
    

        if(command=="vkDestroySampler"){
            handle_vkDestroySampler(data);
            return;
        }
    

        if(command=="vkCreateDescriptorSetLayout"){
            handle_vkCreateDescriptorSetLayout(data);
            return;
        }
    

        if(command=="vkDestroyDescriptorSetLayout"){
            handle_vkDestroyDescriptorSetLayout(data);
            return;
        }
    

        if(command=="vkCreateDescriptorPool"){
            handle_vkCreateDescriptorPool(data);
            return;
        }
    

        if(command=="vkDestroyDescriptorPool"){
            handle_vkDestroyDescriptorPool(data);
            return;
        }
    

        if(command=="vkResetDescriptorPool"){
            handle_vkResetDescriptorPool(data);
            return;
        }
    

        if(command=="vkAllocateDescriptorSets"){
            handle_vkAllocateDescriptorSets(data);
            return;
        }
    

        if(command=="vkFreeDescriptorSets"){
            handle_vkFreeDescriptorSets(data);
            return;
        }
    

        if(command=="vkUpdateDescriptorSets"){
            handle_vkUpdateDescriptorSets(data);
            return;
        }
    

        if(command=="vkCreateFramebuffer"){
            handle_vkCreateFramebuffer(data);
            return;
        }
    

        if(command=="vkDestroyFramebuffer"){
            handle_vkDestroyFramebuffer(data);
            return;
        }
    

        if(command=="vkCreateRenderPass"){
            handle_vkCreateRenderPass(data);
            return;
        }
    

        if(command=="vkDestroyRenderPass"){
            handle_vkDestroyRenderPass(data);
            return;
        }
    

        if(command=="vkGetRenderAreaGranularity"){
            handle_vkGetRenderAreaGranularity(data);
            return;
        }
    

        if(command=="vkGetRenderingAreaGranularityKHR"){
            handle_vkGetRenderingAreaGranularityKHR(data);
            return;
        }
    

        if(command=="vkCreateCommandPool"){
            handle_vkCreateCommandPool(data);
            return;
        }
    

        if(command=="vkDestroyCommandPool"){
            handle_vkDestroyCommandPool(data);
            return;
        }
    

        if(command=="vkResetCommandPool"){
            handle_vkResetCommandPool(data);
            return;
        }
    

        if(command=="vkAllocateCommandBuffers"){
            handle_vkAllocateCommandBuffers(data);
            return;
        }
    

        if(command=="vkFreeCommandBuffers"){
            handle_vkFreeCommandBuffers(data);
            return;
        }
    

        if(command=="vkBeginCommandBuffer"){
            handle_vkBeginCommandBuffer(data);
            return;
        }
    

        if(command=="vkEndCommandBuffer"){
            handle_vkEndCommandBuffer(data);
            return;
        }
    

        if(command=="vkResetCommandBuffer"){
            handle_vkResetCommandBuffer(data);
            return;
        }
    

        if(command=="vkCmdBindPipeline"){
            handle_vkCmdBindPipeline(data);
            return;
        }
    

        if(command=="vkCmdSetAttachmentFeedbackLoopEnableEXT"){
            handle_vkCmdSetAttachmentFeedbackLoopEnableEXT(data);
            return;
        }
    

        if(command=="vkCmdSetViewport"){
            handle_vkCmdSetViewport(data);
            return;
        }
    

        if(command=="vkCmdSetScissor"){
            handle_vkCmdSetScissor(data);
            return;
        }
    

        if(command=="vkCmdSetLineWidth"){
            handle_vkCmdSetLineWidth(data);
            return;
        }
    

        if(command=="vkCmdSetDepthBias"){
            handle_vkCmdSetDepthBias(data);
            return;
        }
    

        if(command=="vkCmdSetBlendConstants"){
            handle_vkCmdSetBlendConstants(data);
            return;
        }
    

        if(command=="vkCmdSetDepthBounds"){
            handle_vkCmdSetDepthBounds(data);
            return;
        }
    

        if(command=="vkCmdSetStencilCompareMask"){
            handle_vkCmdSetStencilCompareMask(data);
            return;
        }
    

        if(command=="vkCmdSetStencilWriteMask"){
            handle_vkCmdSetStencilWriteMask(data);
            return;
        }
    

        if(command=="vkCmdSetStencilReference"){
            handle_vkCmdSetStencilReference(data);
            return;
        }
    

        if(command=="vkCmdBindDescriptorSets"){
            handle_vkCmdBindDescriptorSets(data);
            return;
        }
    

        if(command=="vkCmdBindIndexBuffer"){
            handle_vkCmdBindIndexBuffer(data);
            return;
        }
    

        if(command=="vkCmdBindVertexBuffers"){
            handle_vkCmdBindVertexBuffers(data);
            return;
        }
    

        if(command=="vkCmdDraw"){
            handle_vkCmdDraw(data);
            return;
        }
    

        if(command=="vkCmdDrawIndexed"){
            handle_vkCmdDrawIndexed(data);
            return;
        }
    

        if(command=="vkCmdDrawMultiEXT"){
            handle_vkCmdDrawMultiEXT(data);
            return;
        }
    

        if(command=="vkCmdDrawMultiIndexedEXT"){
            handle_vkCmdDrawMultiIndexedEXT(data);
            return;
        }
    

        if(command=="vkCmdDrawIndirect"){
            handle_vkCmdDrawIndirect(data);
            return;
        }
    

        if(command=="vkCmdDrawIndexedIndirect"){
            handle_vkCmdDrawIndexedIndirect(data);
            return;
        }
    

        if(command=="vkCmdDispatch"){
            handle_vkCmdDispatch(data);
            return;
        }
    

        if(command=="vkCmdDispatchIndirect"){
            handle_vkCmdDispatchIndirect(data);
            return;
        }
    

        if(command=="vkCmdSubpassShadingHUAWEI"){
            handle_vkCmdSubpassShadingHUAWEI(data);
            return;
        }
    

        if(command=="vkCmdDrawClusterHUAWEI"){
            handle_vkCmdDrawClusterHUAWEI(data);
            return;
        }
    

        if(command=="vkCmdDrawClusterIndirectHUAWEI"){
            handle_vkCmdDrawClusterIndirectHUAWEI(data);
            return;
        }
    

        if(command=="vkCmdUpdatePipelineIndirectBufferNV"){
            handle_vkCmdUpdatePipelineIndirectBufferNV(data);
            return;
        }
    

        if(command=="vkCmdCopyBuffer"){
            handle_vkCmdCopyBuffer(data);
            return;
        }
    

        if(command=="vkCmdCopyImage"){
            handle_vkCmdCopyImage(data);
            return;
        }
    

        if(command=="vkCmdBlitImage"){
            handle_vkCmdBlitImage(data);
            return;
        }
    

        if(command=="vkCmdCopyBufferToImage"){
            handle_vkCmdCopyBufferToImage(data);
            return;
        }
    

        if(command=="vkCmdCopyImageToBuffer"){
            handle_vkCmdCopyImageToBuffer(data);
            return;
        }
    

        if(command=="vkCmdCopyMemoryIndirectNV"){
            handle_vkCmdCopyMemoryIndirectNV(data);
            return;
        }
    

        if(command=="vkCmdCopyMemoryToImageIndirectNV"){
            handle_vkCmdCopyMemoryToImageIndirectNV(data);
            return;
        }
    

        if(command=="vkCmdUpdateBuffer"){
            handle_vkCmdUpdateBuffer(data);
            return;
        }
    

        if(command=="vkCmdFillBuffer"){
            handle_vkCmdFillBuffer(data);
            return;
        }
    

        if(command=="vkCmdClearColorImage"){
            handle_vkCmdClearColorImage(data);
            return;
        }
    

        if(command=="vkCmdClearDepthStencilImage"){
            handle_vkCmdClearDepthStencilImage(data);
            return;
        }
    

        if(command=="vkCmdClearAttachments"){
            handle_vkCmdClearAttachments(data);
            return;
        }
    

        if(command=="vkCmdResolveImage"){
            handle_vkCmdResolveImage(data);
            return;
        }
    

        if(command=="vkCmdSetEvent"){
            handle_vkCmdSetEvent(data);
            return;
        }
    

        if(command=="vkCmdResetEvent"){
            handle_vkCmdResetEvent(data);
            return;
        }
    

        if(command=="vkCmdWaitEvents"){
            handle_vkCmdWaitEvents(data);
            return;
        }
    

        if(command=="vkCmdPipelineBarrier"){
            handle_vkCmdPipelineBarrier(data);
            return;
        }
    

        if(command=="vkCmdBeginQuery"){
            handle_vkCmdBeginQuery(data);
            return;
        }
    

        if(command=="vkCmdEndQuery"){
            handle_vkCmdEndQuery(data);
            return;
        }
    

        if(command=="vkCmdBeginConditionalRenderingEXT"){
            handle_vkCmdBeginConditionalRenderingEXT(data);
            return;
        }
    

        if(command=="vkCmdEndConditionalRenderingEXT"){
            handle_vkCmdEndConditionalRenderingEXT(data);
            return;
        }
    

        if(command=="vkCmdResetQueryPool"){
            handle_vkCmdResetQueryPool(data);
            return;
        }
    

        if(command=="vkCmdWriteTimestamp"){
            handle_vkCmdWriteTimestamp(data);
            return;
        }
    

        if(command=="vkCmdCopyQueryPoolResults"){
            handle_vkCmdCopyQueryPoolResults(data);
            return;
        }
    

        if(command=="vkCmdPushConstants"){
            handle_vkCmdPushConstants(data);
            return;
        }
    

        if(command=="vkCmdBeginRenderPass"){
            handle_vkCmdBeginRenderPass(data);
            return;
        }
    

        if(command=="vkCmdNextSubpass"){
            handle_vkCmdNextSubpass(data);
            return;
        }
    

        if(command=="vkCmdEndRenderPass"){
            handle_vkCmdEndRenderPass(data);
            return;
        }
    

        if(command=="vkCmdExecuteCommands"){
            handle_vkCmdExecuteCommands(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceDisplayPropertiesKHR"){
            handle_vkGetPhysicalDeviceDisplayPropertiesKHR(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceDisplayPlanePropertiesKHR"){
            handle_vkGetPhysicalDeviceDisplayPlanePropertiesKHR(data);
            return;
        }
    

        if(command=="vkGetDisplayPlaneSupportedDisplaysKHR"){
            handle_vkGetDisplayPlaneSupportedDisplaysKHR(data);
            return;
        }
    

        if(command=="vkGetDisplayModePropertiesKHR"){
            handle_vkGetDisplayModePropertiesKHR(data);
            return;
        }
    

        if(command=="vkCreateDisplayModeKHR"){
            handle_vkCreateDisplayModeKHR(data);
            return;
        }
    

        if(command=="vkGetDisplayPlaneCapabilitiesKHR"){
            handle_vkGetDisplayPlaneCapabilitiesKHR(data);
            return;
        }
    

        if(command=="vkCreateDisplayPlaneSurfaceKHR"){
            handle_vkCreateDisplayPlaneSurfaceKHR(data);
            return;
        }
    

        if(command=="vkCreateSharedSwapchainsKHR"){
            handle_vkCreateSharedSwapchainsKHR(data);
            return;
        }
    

        if(command=="vkDestroySurfaceKHR"){
            handle_vkDestroySurfaceKHR(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceSurfaceSupportKHR"){
            handle_vkGetPhysicalDeviceSurfaceSupportKHR(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceSurfaceCapabilitiesKHR"){
            handle_vkGetPhysicalDeviceSurfaceCapabilitiesKHR(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceSurfaceFormatsKHR"){
            handle_vkGetPhysicalDeviceSurfaceFormatsKHR(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceSurfacePresentModesKHR"){
            handle_vkGetPhysicalDeviceSurfacePresentModesKHR(data);
            return;
        }
    

        if(command=="vkCreateSwapchainKHR"){
            handle_vkCreateSwapchainKHR(data);
            return;
        }
    

        if(command=="vkDestroySwapchainKHR"){
            handle_vkDestroySwapchainKHR(data);
            return;
        }
    

        if(command=="vkGetSwapchainImagesKHR"){
            handle_vkGetSwapchainImagesKHR(data);
            return;
        }
    

        if(command=="vkAcquireNextImageKHR"){
            handle_vkAcquireNextImageKHR(data);
            return;
        }
    

        if(command=="vkQueuePresentKHR"){
            handle_vkQueuePresentKHR(data);
            return;
        }
    

        if(command=="vkCreateXlibSurfaceKHR"){
            handle_vkCreateXlibSurfaceKHR(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceXlibPresentationSupportKHR"){
            handle_vkGetPhysicalDeviceXlibPresentationSupportKHR(data);
            return;
        }
    

        if(command=="vkCreateXcbSurfaceKHR"){
            handle_vkCreateXcbSurfaceKHR(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceXcbPresentationSupportKHR"){
            handle_vkGetPhysicalDeviceXcbPresentationSupportKHR(data);
            return;
        }
    

        if(command=="vkCreateDebugReportCallbackEXT"){
            handle_vkCreateDebugReportCallbackEXT(data);
            return;
        }
    

        if(command=="vkDestroyDebugReportCallbackEXT"){
            handle_vkDestroyDebugReportCallbackEXT(data);
            return;
        }
    

        if(command=="vkDebugReportMessageEXT"){
            handle_vkDebugReportMessageEXT(data);
            return;
        }
    

        if(command=="vkDebugMarkerSetObjectNameEXT"){
            handle_vkDebugMarkerSetObjectNameEXT(data);
            return;
        }
    

        if(command=="vkDebugMarkerSetObjectTagEXT"){
            handle_vkDebugMarkerSetObjectTagEXT(data);
            return;
        }
    

        if(command=="vkCmdDebugMarkerBeginEXT"){
            handle_vkCmdDebugMarkerBeginEXT(data);
            return;
        }
    

        if(command=="vkCmdDebugMarkerEndEXT"){
            handle_vkCmdDebugMarkerEndEXT(data);
            return;
        }
    

        if(command=="vkCmdDebugMarkerInsertEXT"){
            handle_vkCmdDebugMarkerInsertEXT(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceExternalImageFormatPropertiesNV"){
            handle_vkGetPhysicalDeviceExternalImageFormatPropertiesNV(data);
            return;
        }
    

        if(command=="vkCmdExecuteGeneratedCommandsNV"){
            handle_vkCmdExecuteGeneratedCommandsNV(data);
            return;
        }
    

        if(command=="vkCmdPreprocessGeneratedCommandsNV"){
            handle_vkCmdPreprocessGeneratedCommandsNV(data);
            return;
        }
    

        if(command=="vkCmdBindPipelineShaderGroupNV"){
            handle_vkCmdBindPipelineShaderGroupNV(data);
            return;
        }
    

        if(command=="vkGetGeneratedCommandsMemoryRequirementsNV"){
            handle_vkGetGeneratedCommandsMemoryRequirementsNV(data);
            return;
        }
    

        if(command=="vkCreateIndirectCommandsLayoutNV"){
            handle_vkCreateIndirectCommandsLayoutNV(data);
            return;
        }
    

        if(command=="vkDestroyIndirectCommandsLayoutNV"){
            handle_vkDestroyIndirectCommandsLayoutNV(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceFeatures2"){
            handle_vkGetPhysicalDeviceFeatures2(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceFeatures2KHR"){
            handle_vkGetPhysicalDeviceFeatures2KHR(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceProperties2"){
            handle_vkGetPhysicalDeviceProperties2(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceProperties2KHR"){
            handle_vkGetPhysicalDeviceProperties2KHR(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceFormatProperties2"){
            handle_vkGetPhysicalDeviceFormatProperties2(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceFormatProperties2KHR"){
            handle_vkGetPhysicalDeviceFormatProperties2KHR(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceImageFormatProperties2"){
            handle_vkGetPhysicalDeviceImageFormatProperties2(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceImageFormatProperties2KHR"){
            handle_vkGetPhysicalDeviceImageFormatProperties2KHR(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceQueueFamilyProperties2"){
            handle_vkGetPhysicalDeviceQueueFamilyProperties2(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceQueueFamilyProperties2KHR"){
            handle_vkGetPhysicalDeviceQueueFamilyProperties2KHR(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceMemoryProperties2"){
            handle_vkGetPhysicalDeviceMemoryProperties2(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceMemoryProperties2KHR"){
            handle_vkGetPhysicalDeviceMemoryProperties2KHR(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceSparseImageFormatProperties2"){
            handle_vkGetPhysicalDeviceSparseImageFormatProperties2(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceSparseImageFormatProperties2KHR"){
            handle_vkGetPhysicalDeviceSparseImageFormatProperties2KHR(data);
            return;
        }
    

        if(command=="vkCmdPushDescriptorSetKHR"){
            handle_vkCmdPushDescriptorSetKHR(data);
            return;
        }
    

        if(command=="vkTrimCommandPool"){
            handle_vkTrimCommandPool(data);
            return;
        }
    

        if(command=="vkTrimCommandPoolKHR"){
            handle_vkTrimCommandPoolKHR(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceExternalBufferProperties"){
            handle_vkGetPhysicalDeviceExternalBufferProperties(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceExternalBufferPropertiesKHR"){
            handle_vkGetPhysicalDeviceExternalBufferPropertiesKHR(data);
            return;
        }
    

        if(command=="vkGetMemoryFdKHR"){
            handle_vkGetMemoryFdKHR(data);
            return;
        }
    

        if(command=="vkGetMemoryFdPropertiesKHR"){
            handle_vkGetMemoryFdPropertiesKHR(data);
            return;
        }
    

        if(command=="vkGetMemoryRemoteAddressNV"){
            handle_vkGetMemoryRemoteAddressNV(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceExternalSemaphoreProperties"){
            handle_vkGetPhysicalDeviceExternalSemaphoreProperties(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceExternalSemaphorePropertiesKHR"){
            handle_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(data);
            return;
        }
    

        if(command=="vkGetSemaphoreFdKHR"){
            handle_vkGetSemaphoreFdKHR(data);
            return;
        }
    

        if(command=="vkImportSemaphoreFdKHR"){
            handle_vkImportSemaphoreFdKHR(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceExternalFenceProperties"){
            handle_vkGetPhysicalDeviceExternalFenceProperties(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceExternalFencePropertiesKHR"){
            handle_vkGetPhysicalDeviceExternalFencePropertiesKHR(data);
            return;
        }
    

        if(command=="vkGetFenceFdKHR"){
            handle_vkGetFenceFdKHR(data);
            return;
        }
    

        if(command=="vkImportFenceFdKHR"){
            handle_vkImportFenceFdKHR(data);
            return;
        }
    

        if(command=="vkReleaseDisplayEXT"){
            handle_vkReleaseDisplayEXT(data);
            return;
        }
    

        if(command=="vkDisplayPowerControlEXT"){
            handle_vkDisplayPowerControlEXT(data);
            return;
        }
    

        if(command=="vkRegisterDeviceEventEXT"){
            handle_vkRegisterDeviceEventEXT(data);
            return;
        }
    

        if(command=="vkRegisterDisplayEventEXT"){
            handle_vkRegisterDisplayEventEXT(data);
            return;
        }
    

        if(command=="vkGetSwapchainCounterEXT"){
            handle_vkGetSwapchainCounterEXT(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceSurfaceCapabilities2EXT"){
            handle_vkGetPhysicalDeviceSurfaceCapabilities2EXT(data);
            return;
        }
    

        if(command=="vkEnumeratePhysicalDeviceGroups"){
            handle_vkEnumeratePhysicalDeviceGroups(data);
            return;
        }
    

        if(command=="vkEnumeratePhysicalDeviceGroupsKHR"){
            handle_vkEnumeratePhysicalDeviceGroupsKHR(data);
            return;
        }
    

        if(command=="vkGetDeviceGroupPeerMemoryFeatures"){
            handle_vkGetDeviceGroupPeerMemoryFeatures(data);
            return;
        }
    

        if(command=="vkGetDeviceGroupPeerMemoryFeaturesKHR"){
            handle_vkGetDeviceGroupPeerMemoryFeaturesKHR(data);
            return;
        }
    

        if(command=="vkBindBufferMemory2"){
            handle_vkBindBufferMemory2(data);
            return;
        }
    

        if(command=="vkBindBufferMemory2KHR"){
            handle_vkBindBufferMemory2KHR(data);
            return;
        }
    

        if(command=="vkBindImageMemory2"){
            handle_vkBindImageMemory2(data);
            return;
        }
    

        if(command=="vkBindImageMemory2KHR"){
            handle_vkBindImageMemory2KHR(data);
            return;
        }
    

        if(command=="vkCmdSetDeviceMask"){
            handle_vkCmdSetDeviceMask(data);
            return;
        }
    

        if(command=="vkCmdSetDeviceMaskKHR"){
            handle_vkCmdSetDeviceMaskKHR(data);
            return;
        }
    

        if(command=="vkGetDeviceGroupPresentCapabilitiesKHR"){
            handle_vkGetDeviceGroupPresentCapabilitiesKHR(data);
            return;
        }
    

        if(command=="vkGetDeviceGroupSurfacePresentModesKHR"){
            handle_vkGetDeviceGroupSurfacePresentModesKHR(data);
            return;
        }
    

        if(command=="vkAcquireNextImage2KHR"){
            handle_vkAcquireNextImage2KHR(data);
            return;
        }
    

        if(command=="vkCmdDispatchBase"){
            handle_vkCmdDispatchBase(data);
            return;
        }
    

        if(command=="vkCmdDispatchBaseKHR"){
            handle_vkCmdDispatchBaseKHR(data);
            return;
        }
    

        if(command=="vkGetPhysicalDevicePresentRectanglesKHR"){
            handle_vkGetPhysicalDevicePresentRectanglesKHR(data);
            return;
        }
    

        if(command=="vkCreateDescriptorUpdateTemplate"){
            handle_vkCreateDescriptorUpdateTemplate(data);
            return;
        }
    

        if(command=="vkCreateDescriptorUpdateTemplateKHR"){
            handle_vkCreateDescriptorUpdateTemplateKHR(data);
            return;
        }
    

        if(command=="vkDestroyDescriptorUpdateTemplate"){
            handle_vkDestroyDescriptorUpdateTemplate(data);
            return;
        }
    

        if(command=="vkDestroyDescriptorUpdateTemplateKHR"){
            handle_vkDestroyDescriptorUpdateTemplateKHR(data);
            return;
        }
    

        if(command=="vkUpdateDescriptorSetWithTemplate"){
            handle_vkUpdateDescriptorSetWithTemplate(data);
            return;
        }
    

        if(command=="vkUpdateDescriptorSetWithTemplateKHR"){
            handle_vkUpdateDescriptorSetWithTemplateKHR(data);
            return;
        }
    

        if(command=="vkCmdPushDescriptorSetWithTemplateKHR"){
            handle_vkCmdPushDescriptorSetWithTemplateKHR(data);
            return;
        }
    

        if(command=="vkSetHdrMetadataEXT"){
            handle_vkSetHdrMetadataEXT(data);
            return;
        }
    

        if(command=="vkGetSwapchainStatusKHR"){
            handle_vkGetSwapchainStatusKHR(data);
            return;
        }
    

        if(command=="vkGetRefreshCycleDurationGOOGLE"){
            handle_vkGetRefreshCycleDurationGOOGLE(data);
            return;
        }
    

        if(command=="vkGetPastPresentationTimingGOOGLE"){
            handle_vkGetPastPresentationTimingGOOGLE(data);
            return;
        }
    

        if(command=="vkCmdSetViewportWScalingNV"){
            handle_vkCmdSetViewportWScalingNV(data);
            return;
        }
    

        if(command=="vkCmdSetDiscardRectangleEXT"){
            handle_vkCmdSetDiscardRectangleEXT(data);
            return;
        }
    

        if(command=="vkCmdSetDiscardRectangleEnableEXT"){
            handle_vkCmdSetDiscardRectangleEnableEXT(data);
            return;
        }
    

        if(command=="vkCmdSetDiscardRectangleModeEXT"){
            handle_vkCmdSetDiscardRectangleModeEXT(data);
            return;
        }
    

        if(command=="vkCmdSetSampleLocationsEXT"){
            handle_vkCmdSetSampleLocationsEXT(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceMultisamplePropertiesEXT"){
            handle_vkGetPhysicalDeviceMultisamplePropertiesEXT(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceSurfaceCapabilities2KHR"){
            handle_vkGetPhysicalDeviceSurfaceCapabilities2KHR(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceSurfaceFormats2KHR"){
            handle_vkGetPhysicalDeviceSurfaceFormats2KHR(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceDisplayProperties2KHR"){
            handle_vkGetPhysicalDeviceDisplayProperties2KHR(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceDisplayPlaneProperties2KHR"){
            handle_vkGetPhysicalDeviceDisplayPlaneProperties2KHR(data);
            return;
        }
    

        if(command=="vkGetDisplayModeProperties2KHR"){
            handle_vkGetDisplayModeProperties2KHR(data);
            return;
        }
    

        if(command=="vkGetDisplayPlaneCapabilities2KHR"){
            handle_vkGetDisplayPlaneCapabilities2KHR(data);
            return;
        }
    

        if(command=="vkGetBufferMemoryRequirements2"){
            handle_vkGetBufferMemoryRequirements2(data);
            return;
        }
    

        if(command=="vkGetBufferMemoryRequirements2KHR"){
            handle_vkGetBufferMemoryRequirements2KHR(data);
            return;
        }
    

        if(command=="vkGetImageMemoryRequirements2"){
            handle_vkGetImageMemoryRequirements2(data);
            return;
        }
    

        if(command=="vkGetImageMemoryRequirements2KHR"){
            handle_vkGetImageMemoryRequirements2KHR(data);
            return;
        }
    

        if(command=="vkGetImageSparseMemoryRequirements2"){
            handle_vkGetImageSparseMemoryRequirements2(data);
            return;
        }
    

        if(command=="vkGetImageSparseMemoryRequirements2KHR"){
            handle_vkGetImageSparseMemoryRequirements2KHR(data);
            return;
        }
    

        if(command=="vkGetDeviceBufferMemoryRequirements"){
            handle_vkGetDeviceBufferMemoryRequirements(data);
            return;
        }
    

        if(command=="vkGetDeviceBufferMemoryRequirementsKHR"){
            handle_vkGetDeviceBufferMemoryRequirementsKHR(data);
            return;
        }
    

        if(command=="vkGetDeviceImageMemoryRequirements"){
            handle_vkGetDeviceImageMemoryRequirements(data);
            return;
        }
    

        if(command=="vkGetDeviceImageMemoryRequirementsKHR"){
            handle_vkGetDeviceImageMemoryRequirementsKHR(data);
            return;
        }
    

        if(command=="vkGetDeviceImageSparseMemoryRequirements"){
            handle_vkGetDeviceImageSparseMemoryRequirements(data);
            return;
        }
    

        if(command=="vkGetDeviceImageSparseMemoryRequirementsKHR"){
            handle_vkGetDeviceImageSparseMemoryRequirementsKHR(data);
            return;
        }
    

        if(command=="vkCreateSamplerYcbcrConversion"){
            handle_vkCreateSamplerYcbcrConversion(data);
            return;
        }
    

        if(command=="vkCreateSamplerYcbcrConversionKHR"){
            handle_vkCreateSamplerYcbcrConversionKHR(data);
            return;
        }
    

        if(command=="vkDestroySamplerYcbcrConversion"){
            handle_vkDestroySamplerYcbcrConversion(data);
            return;
        }
    

        if(command=="vkDestroySamplerYcbcrConversionKHR"){
            handle_vkDestroySamplerYcbcrConversionKHR(data);
            return;
        }
    

        if(command=="vkGetDeviceQueue2"){
            handle_vkGetDeviceQueue2(data);
            return;
        }
    

        if(command=="vkCreateValidationCacheEXT"){
            handle_vkCreateValidationCacheEXT(data);
            return;
        }
    

        if(command=="vkDestroyValidationCacheEXT"){
            handle_vkDestroyValidationCacheEXT(data);
            return;
        }
    

        if(command=="vkGetValidationCacheDataEXT"){
            handle_vkGetValidationCacheDataEXT(data);
            return;
        }
    

        if(command=="vkMergeValidationCachesEXT"){
            handle_vkMergeValidationCachesEXT(data);
            return;
        }
    

        if(command=="vkGetDescriptorSetLayoutSupport"){
            handle_vkGetDescriptorSetLayoutSupport(data);
            return;
        }
    

        if(command=="vkGetDescriptorSetLayoutSupportKHR"){
            handle_vkGetDescriptorSetLayoutSupportKHR(data);
            return;
        }
    

        if(command=="vkGetShaderInfoAMD"){
            handle_vkGetShaderInfoAMD(data);
            return;
        }
    

        if(command=="vkSetLocalDimmingAMD"){
            handle_vkSetLocalDimmingAMD(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceCalibrateableTimeDomainsEXT"){
            handle_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(data);
            return;
        }
    

        if(command=="vkGetCalibratedTimestampsEXT"){
            handle_vkGetCalibratedTimestampsEXT(data);
            return;
        }
    

        if(command=="vkSetDebugUtilsObjectNameEXT"){
            handle_vkSetDebugUtilsObjectNameEXT(data);
            return;
        }
    

        if(command=="vkSetDebugUtilsObjectTagEXT"){
            handle_vkSetDebugUtilsObjectTagEXT(data);
            return;
        }
    

        if(command=="vkQueueBeginDebugUtilsLabelEXT"){
            handle_vkQueueBeginDebugUtilsLabelEXT(data);
            return;
        }
    

        if(command=="vkQueueEndDebugUtilsLabelEXT"){
            handle_vkQueueEndDebugUtilsLabelEXT(data);
            return;
        }
    

        if(command=="vkQueueInsertDebugUtilsLabelEXT"){
            handle_vkQueueInsertDebugUtilsLabelEXT(data);
            return;
        }
    

        if(command=="vkCmdBeginDebugUtilsLabelEXT"){
            handle_vkCmdBeginDebugUtilsLabelEXT(data);
            return;
        }
    

        if(command=="vkCmdEndDebugUtilsLabelEXT"){
            handle_vkCmdEndDebugUtilsLabelEXT(data);
            return;
        }
    

        if(command=="vkCmdInsertDebugUtilsLabelEXT"){
            handle_vkCmdInsertDebugUtilsLabelEXT(data);
            return;
        }
    

        if(command=="vkCreateDebugUtilsMessengerEXT"){
            handle_vkCreateDebugUtilsMessengerEXT(data);
            return;
        }
    

        if(command=="vkDestroyDebugUtilsMessengerEXT"){
            handle_vkDestroyDebugUtilsMessengerEXT(data);
            return;
        }
    

        if(command=="vkSubmitDebugUtilsMessageEXT"){
            handle_vkSubmitDebugUtilsMessageEXT(data);
            return;
        }
    

        if(command=="vkGetMemoryHostPointerPropertiesEXT"){
            handle_vkGetMemoryHostPointerPropertiesEXT(data);
            return;
        }
    

        if(command=="vkCmdWriteBufferMarkerAMD"){
            handle_vkCmdWriteBufferMarkerAMD(data);
            return;
        }
    

        if(command=="vkCreateRenderPass2"){
            handle_vkCreateRenderPass2(data);
            return;
        }
    

        if(command=="vkCreateRenderPass2KHR"){
            handle_vkCreateRenderPass2KHR(data);
            return;
        }
    

        if(command=="vkCmdBeginRenderPass2"){
            handle_vkCmdBeginRenderPass2(data);
            return;
        }
    

        if(command=="vkCmdBeginRenderPass2KHR"){
            handle_vkCmdBeginRenderPass2KHR(data);
            return;
        }
    

        if(command=="vkCmdNextSubpass2"){
            handle_vkCmdNextSubpass2(data);
            return;
        }
    

        if(command=="vkCmdNextSubpass2KHR"){
            handle_vkCmdNextSubpass2KHR(data);
            return;
        }
    

        if(command=="vkCmdEndRenderPass2"){
            handle_vkCmdEndRenderPass2(data);
            return;
        }
    

        if(command=="vkCmdEndRenderPass2KHR"){
            handle_vkCmdEndRenderPass2KHR(data);
            return;
        }
    

        if(command=="vkGetSemaphoreCounterValue"){
            handle_vkGetSemaphoreCounterValue(data);
            return;
        }
    

        if(command=="vkGetSemaphoreCounterValueKHR"){
            handle_vkGetSemaphoreCounterValueKHR(data);
            return;
        }
    

        if(command=="vkWaitSemaphores"){
            handle_vkWaitSemaphores(data);
            return;
        }
    

        if(command=="vkWaitSemaphoresKHR"){
            handle_vkWaitSemaphoresKHR(data);
            return;
        }
    

        if(command=="vkSignalSemaphore"){
            handle_vkSignalSemaphore(data);
            return;
        }
    

        if(command=="vkSignalSemaphoreKHR"){
            handle_vkSignalSemaphoreKHR(data);
            return;
        }
    

        if(command=="vkCmdDrawIndirectCount"){
            handle_vkCmdDrawIndirectCount(data);
            return;
        }
    

        if(command=="vkCmdDrawIndirectCountKHR"){
            handle_vkCmdDrawIndirectCountKHR(data);
            return;
        }
    

        if(command=="vkCmdDrawIndirectCountAMD"){
            handle_vkCmdDrawIndirectCountAMD(data);
            return;
        }
    

        if(command=="vkCmdDrawIndexedIndirectCount"){
            handle_vkCmdDrawIndexedIndirectCount(data);
            return;
        }
    

        if(command=="vkCmdDrawIndexedIndirectCountKHR"){
            handle_vkCmdDrawIndexedIndirectCountKHR(data);
            return;
        }
    

        if(command=="vkCmdDrawIndexedIndirectCountAMD"){
            handle_vkCmdDrawIndexedIndirectCountAMD(data);
            return;
        }
    

        if(command=="vkCmdSetCheckpointNV"){
            handle_vkCmdSetCheckpointNV(data);
            return;
        }
    

        if(command=="vkGetQueueCheckpointDataNV"){
            handle_vkGetQueueCheckpointDataNV(data);
            return;
        }
    

        if(command=="vkCmdBindTransformFeedbackBuffersEXT"){
            handle_vkCmdBindTransformFeedbackBuffersEXT(data);
            return;
        }
    

        if(command=="vkCmdBeginTransformFeedbackEXT"){
            handle_vkCmdBeginTransformFeedbackEXT(data);
            return;
        }
    

        if(command=="vkCmdEndTransformFeedbackEXT"){
            handle_vkCmdEndTransformFeedbackEXT(data);
            return;
        }
    

        if(command=="vkCmdBeginQueryIndexedEXT"){
            handle_vkCmdBeginQueryIndexedEXT(data);
            return;
        }
    

        if(command=="vkCmdEndQueryIndexedEXT"){
            handle_vkCmdEndQueryIndexedEXT(data);
            return;
        }
    

        if(command=="vkCmdDrawIndirectByteCountEXT"){
            handle_vkCmdDrawIndirectByteCountEXT(data);
            return;
        }
    

        if(command=="vkCmdSetExclusiveScissorNV"){
            handle_vkCmdSetExclusiveScissorNV(data);
            return;
        }
    

        if(command=="vkCmdSetExclusiveScissorEnableNV"){
            handle_vkCmdSetExclusiveScissorEnableNV(data);
            return;
        }
    

        if(command=="vkCmdBindShadingRateImageNV"){
            handle_vkCmdBindShadingRateImageNV(data);
            return;
        }
    

        if(command=="vkCmdSetViewportShadingRatePaletteNV"){
            handle_vkCmdSetViewportShadingRatePaletteNV(data);
            return;
        }
    

        if(command=="vkCmdSetCoarseSampleOrderNV"){
            handle_vkCmdSetCoarseSampleOrderNV(data);
            return;
        }
    

        if(command=="vkCmdDrawMeshTasksNV"){
            handle_vkCmdDrawMeshTasksNV(data);
            return;
        }
    

        if(command=="vkCmdDrawMeshTasksIndirectNV"){
            handle_vkCmdDrawMeshTasksIndirectNV(data);
            return;
        }
    

        if(command=="vkCmdDrawMeshTasksIndirectCountNV"){
            handle_vkCmdDrawMeshTasksIndirectCountNV(data);
            return;
        }
    

        if(command=="vkCmdDrawMeshTasksEXT"){
            handle_vkCmdDrawMeshTasksEXT(data);
            return;
        }
    

        if(command=="vkCmdDrawMeshTasksIndirectEXT"){
            handle_vkCmdDrawMeshTasksIndirectEXT(data);
            return;
        }
    

        if(command=="vkCmdDrawMeshTasksIndirectCountEXT"){
            handle_vkCmdDrawMeshTasksIndirectCountEXT(data);
            return;
        }
    

        if(command=="vkCompileDeferredNV"){
            handle_vkCompileDeferredNV(data);
            return;
        }
    

        if(command=="vkCreateAccelerationStructureNV"){
            handle_vkCreateAccelerationStructureNV(data);
            return;
        }
    

        if(command=="vkCmdBindInvocationMaskHUAWEI"){
            handle_vkCmdBindInvocationMaskHUAWEI(data);
            return;
        }
    

        if(command=="vkDestroyAccelerationStructureKHR"){
            handle_vkDestroyAccelerationStructureKHR(data);
            return;
        }
    

        if(command=="vkDestroyAccelerationStructureNV"){
            handle_vkDestroyAccelerationStructureNV(data);
            return;
        }
    

        if(command=="vkGetAccelerationStructureMemoryRequirementsNV"){
            handle_vkGetAccelerationStructureMemoryRequirementsNV(data);
            return;
        }
    

        if(command=="vkBindAccelerationStructureMemoryNV"){
            handle_vkBindAccelerationStructureMemoryNV(data);
            return;
        }
    

        if(command=="vkCmdCopyAccelerationStructureNV"){
            handle_vkCmdCopyAccelerationStructureNV(data);
            return;
        }
    

        if(command=="vkCmdCopyAccelerationStructureKHR"){
            handle_vkCmdCopyAccelerationStructureKHR(data);
            return;
        }
    

        if(command=="vkCopyAccelerationStructureKHR"){
            handle_vkCopyAccelerationStructureKHR(data);
            return;
        }
    

        if(command=="vkCmdCopyAccelerationStructureToMemoryKHR"){
            handle_vkCmdCopyAccelerationStructureToMemoryKHR(data);
            return;
        }
    

        if(command=="vkCopyAccelerationStructureToMemoryKHR"){
            handle_vkCopyAccelerationStructureToMemoryKHR(data);
            return;
        }
    

        if(command=="vkCmdCopyMemoryToAccelerationStructureKHR"){
            handle_vkCmdCopyMemoryToAccelerationStructureKHR(data);
            return;
        }
    

        if(command=="vkCopyMemoryToAccelerationStructureKHR"){
            handle_vkCopyMemoryToAccelerationStructureKHR(data);
            return;
        }
    

        if(command=="vkCmdWriteAccelerationStructuresPropertiesKHR"){
            handle_vkCmdWriteAccelerationStructuresPropertiesKHR(data);
            return;
        }
    

        if(command=="vkCmdWriteAccelerationStructuresPropertiesNV"){
            handle_vkCmdWriteAccelerationStructuresPropertiesNV(data);
            return;
        }
    

        if(command=="vkCmdBuildAccelerationStructureNV"){
            handle_vkCmdBuildAccelerationStructureNV(data);
            return;
        }
    

        if(command=="vkWriteAccelerationStructuresPropertiesKHR"){
            handle_vkWriteAccelerationStructuresPropertiesKHR(data);
            return;
        }
    

        if(command=="vkCmdTraceRaysKHR"){
            handle_vkCmdTraceRaysKHR(data);
            return;
        }
    

        if(command=="vkCmdTraceRaysNV"){
            handle_vkCmdTraceRaysNV(data);
            return;
        }
    

        if(command=="vkGetRayTracingShaderGroupHandlesKHR"){
            handle_vkGetRayTracingShaderGroupHandlesKHR(data);
            return;
        }
    

        if(command=="vkGetRayTracingShaderGroupHandlesNV"){
            handle_vkGetRayTracingShaderGroupHandlesNV(data);
            return;
        }
    

        if(command=="vkGetRayTracingCaptureReplayShaderGroupHandlesKHR"){
            handle_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(data);
            return;
        }
    

        if(command=="vkGetAccelerationStructureHandleNV"){
            handle_vkGetAccelerationStructureHandleNV(data);
            return;
        }
    

        if(command=="vkCreateRayTracingPipelinesNV"){
            handle_vkCreateRayTracingPipelinesNV(data);
            return;
        }
    

        if(command=="vkCreateRayTracingPipelinesKHR"){
            handle_vkCreateRayTracingPipelinesKHR(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceCooperativeMatrixPropertiesNV"){
            handle_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(data);
            return;
        }
    

        if(command=="vkCmdTraceRaysIndirectKHR"){
            handle_vkCmdTraceRaysIndirectKHR(data);
            return;
        }
    

        if(command=="vkCmdTraceRaysIndirect2KHR"){
            handle_vkCmdTraceRaysIndirect2KHR(data);
            return;
        }
    

        if(command=="vkGetDeviceAccelerationStructureCompatibilityKHR"){
            handle_vkGetDeviceAccelerationStructureCompatibilityKHR(data);
            return;
        }
    

        if(command=="vkGetRayTracingShaderGroupStackSizeKHR"){
            handle_vkGetRayTracingShaderGroupStackSizeKHR(data);
            return;
        }
    

        if(command=="vkCmdSetRayTracingPipelineStackSizeKHR"){
            handle_vkCmdSetRayTracingPipelineStackSizeKHR(data);
            return;
        }
    

        if(command=="vkGetImageViewHandleNVX"){
            handle_vkGetImageViewHandleNVX(data);
            return;
        }
    

        if(command=="vkGetImageViewAddressNVX"){
            handle_vkGetImageViewAddressNVX(data);
            return;
        }
    

        if(command=="vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR"){
            handle_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR"){
            handle_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(data);
            return;
        }
    

        if(command=="vkAcquireProfilingLockKHR"){
            handle_vkAcquireProfilingLockKHR(data);
            return;
        }
    

        if(command=="vkReleaseProfilingLockKHR"){
            handle_vkReleaseProfilingLockKHR(data);
            return;
        }
    

        if(command=="vkGetImageDrmFormatModifierPropertiesEXT"){
            handle_vkGetImageDrmFormatModifierPropertiesEXT(data);
            return;
        }
    

        if(command=="vkGetBufferOpaqueCaptureAddress"){
            handle_vkGetBufferOpaqueCaptureAddress(data);
            return;
        }
    

        if(command=="vkGetBufferOpaqueCaptureAddressKHR"){
            handle_vkGetBufferOpaqueCaptureAddressKHR(data);
            return;
        }
    

        if(command=="vkGetBufferDeviceAddress"){
            handle_vkGetBufferDeviceAddress(data);
            return;
        }
    

        if(command=="vkGetBufferDeviceAddressKHR"){
            handle_vkGetBufferDeviceAddressKHR(data);
            return;
        }
    

        if(command=="vkGetBufferDeviceAddressEXT"){
            handle_vkGetBufferDeviceAddressEXT(data);
            return;
        }
    

        if(command=="vkCreateHeadlessSurfaceEXT"){
            handle_vkCreateHeadlessSurfaceEXT(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV"){
            handle_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(data);
            return;
        }
    

        if(command=="vkInitializePerformanceApiINTEL"){
            handle_vkInitializePerformanceApiINTEL(data);
            return;
        }
    

        if(command=="vkUninitializePerformanceApiINTEL"){
            handle_vkUninitializePerformanceApiINTEL(data);
            return;
        }
    

        if(command=="vkCmdSetPerformanceMarkerINTEL"){
            handle_vkCmdSetPerformanceMarkerINTEL(data);
            return;
        }
    

        if(command=="vkCmdSetPerformanceStreamMarkerINTEL"){
            handle_vkCmdSetPerformanceStreamMarkerINTEL(data);
            return;
        }
    

        if(command=="vkCmdSetPerformanceOverrideINTEL"){
            handle_vkCmdSetPerformanceOverrideINTEL(data);
            return;
        }
    

        if(command=="vkAcquirePerformanceConfigurationINTEL"){
            handle_vkAcquirePerformanceConfigurationINTEL(data);
            return;
        }
    

        if(command=="vkReleasePerformanceConfigurationINTEL"){
            handle_vkReleasePerformanceConfigurationINTEL(data);
            return;
        }
    

        if(command=="vkQueueSetPerformanceConfigurationINTEL"){
            handle_vkQueueSetPerformanceConfigurationINTEL(data);
            return;
        }
    

        if(command=="vkGetPerformanceParameterINTEL"){
            handle_vkGetPerformanceParameterINTEL(data);
            return;
        }
    

        if(command=="vkGetDeviceMemoryOpaqueCaptureAddress"){
            handle_vkGetDeviceMemoryOpaqueCaptureAddress(data);
            return;
        }
    

        if(command=="vkGetDeviceMemoryOpaqueCaptureAddressKHR"){
            handle_vkGetDeviceMemoryOpaqueCaptureAddressKHR(data);
            return;
        }
    

        if(command=="vkGetPipelineExecutablePropertiesKHR"){
            handle_vkGetPipelineExecutablePropertiesKHR(data);
            return;
        }
    

        if(command=="vkGetPipelineExecutableStatisticsKHR"){
            handle_vkGetPipelineExecutableStatisticsKHR(data);
            return;
        }
    

        if(command=="vkGetPipelineExecutableInternalRepresentationsKHR"){
            handle_vkGetPipelineExecutableInternalRepresentationsKHR(data);
            return;
        }
    

        if(command=="vkCmdSetLineStippleEXT"){
            handle_vkCmdSetLineStippleEXT(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceToolProperties"){
            handle_vkGetPhysicalDeviceToolProperties(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceToolPropertiesEXT"){
            handle_vkGetPhysicalDeviceToolPropertiesEXT(data);
            return;
        }
    

        if(command=="vkCreateAccelerationStructureKHR"){
            handle_vkCreateAccelerationStructureKHR(data);
            return;
        }
    

        if(command=="vkCmdBuildAccelerationStructuresKHR"){
            handle_vkCmdBuildAccelerationStructuresKHR(data);
            return;
        }
    

        if(command=="vkCmdBuildAccelerationStructuresIndirectKHR"){
            handle_vkCmdBuildAccelerationStructuresIndirectKHR(data);
            return;
        }
    

        if(command=="vkBuildAccelerationStructuresKHR"){
            handle_vkBuildAccelerationStructuresKHR(data);
            return;
        }
    

        if(command=="vkGetAccelerationStructureDeviceAddressKHR"){
            handle_vkGetAccelerationStructureDeviceAddressKHR(data);
            return;
        }
    

        if(command=="vkCreateDeferredOperationKHR"){
            handle_vkCreateDeferredOperationKHR(data);
            return;
        }
    

        if(command=="vkDestroyDeferredOperationKHR"){
            handle_vkDestroyDeferredOperationKHR(data);
            return;
        }
    

        if(command=="vkGetDeferredOperationMaxConcurrencyKHR"){
            handle_vkGetDeferredOperationMaxConcurrencyKHR(data);
            return;
        }
    

        if(command=="vkGetDeferredOperationResultKHR"){
            handle_vkGetDeferredOperationResultKHR(data);
            return;
        }
    

        if(command=="vkDeferredOperationJoinKHR"){
            handle_vkDeferredOperationJoinKHR(data);
            return;
        }
    

        if(command=="vkGetPipelineIndirectMemoryRequirementsNV"){
            handle_vkGetPipelineIndirectMemoryRequirementsNV(data);
            return;
        }
    

        if(command=="vkGetPipelineIndirectDeviceAddressNV"){
            handle_vkGetPipelineIndirectDeviceAddressNV(data);
            return;
        }
    

        if(command=="vkCmdSetCullMode"){
            handle_vkCmdSetCullMode(data);
            return;
        }
    

        if(command=="vkCmdSetCullModeEXT"){
            handle_vkCmdSetCullModeEXT(data);
            return;
        }
    

        if(command=="vkCmdSetFrontFace"){
            handle_vkCmdSetFrontFace(data);
            return;
        }
    

        if(command=="vkCmdSetFrontFaceEXT"){
            handle_vkCmdSetFrontFaceEXT(data);
            return;
        }
    

        if(command=="vkCmdSetPrimitiveTopology"){
            handle_vkCmdSetPrimitiveTopology(data);
            return;
        }
    

        if(command=="vkCmdSetPrimitiveTopologyEXT"){
            handle_vkCmdSetPrimitiveTopologyEXT(data);
            return;
        }
    

        if(command=="vkCmdSetViewportWithCount"){
            handle_vkCmdSetViewportWithCount(data);
            return;
        }
    

        if(command=="vkCmdSetViewportWithCountEXT"){
            handle_vkCmdSetViewportWithCountEXT(data);
            return;
        }
    

        if(command=="vkCmdSetScissorWithCount"){
            handle_vkCmdSetScissorWithCount(data);
            return;
        }
    

        if(command=="vkCmdSetScissorWithCountEXT"){
            handle_vkCmdSetScissorWithCountEXT(data);
            return;
        }
    

        if(command=="vkCmdBindIndexBuffer2KHR"){
            handle_vkCmdBindIndexBuffer2KHR(data);
            return;
        }
    

        if(command=="vkCmdBindVertexBuffers2"){
            handle_vkCmdBindVertexBuffers2(data);
            return;
        }
    

        if(command=="vkCmdBindVertexBuffers2EXT"){
            handle_vkCmdBindVertexBuffers2EXT(data);
            return;
        }
    

        if(command=="vkCmdSetDepthTestEnable"){
            handle_vkCmdSetDepthTestEnable(data);
            return;
        }
    

        if(command=="vkCmdSetDepthTestEnableEXT"){
            handle_vkCmdSetDepthTestEnableEXT(data);
            return;
        }
    

        if(command=="vkCmdSetDepthWriteEnable"){
            handle_vkCmdSetDepthWriteEnable(data);
            return;
        }
    

        if(command=="vkCmdSetDepthWriteEnableEXT"){
            handle_vkCmdSetDepthWriteEnableEXT(data);
            return;
        }
    

        if(command=="vkCmdSetDepthCompareOp"){
            handle_vkCmdSetDepthCompareOp(data);
            return;
        }
    

        if(command=="vkCmdSetDepthCompareOpEXT"){
            handle_vkCmdSetDepthCompareOpEXT(data);
            return;
        }
    

        if(command=="vkCmdSetDepthBoundsTestEnable"){
            handle_vkCmdSetDepthBoundsTestEnable(data);
            return;
        }
    

        if(command=="vkCmdSetDepthBoundsTestEnableEXT"){
            handle_vkCmdSetDepthBoundsTestEnableEXT(data);
            return;
        }
    

        if(command=="vkCmdSetStencilTestEnable"){
            handle_vkCmdSetStencilTestEnable(data);
            return;
        }
    

        if(command=="vkCmdSetStencilTestEnableEXT"){
            handle_vkCmdSetStencilTestEnableEXT(data);
            return;
        }
    

        if(command=="vkCmdSetStencilOp"){
            handle_vkCmdSetStencilOp(data);
            return;
        }
    

        if(command=="vkCmdSetStencilOpEXT"){
            handle_vkCmdSetStencilOpEXT(data);
            return;
        }
    

        if(command=="vkCmdSetPatchControlPointsEXT"){
            handle_vkCmdSetPatchControlPointsEXT(data);
            return;
        }
    

        if(command=="vkCmdSetRasterizerDiscardEnable"){
            handle_vkCmdSetRasterizerDiscardEnable(data);
            return;
        }
    

        if(command=="vkCmdSetRasterizerDiscardEnableEXT"){
            handle_vkCmdSetRasterizerDiscardEnableEXT(data);
            return;
        }
    

        if(command=="vkCmdSetDepthBiasEnable"){
            handle_vkCmdSetDepthBiasEnable(data);
            return;
        }
    

        if(command=="vkCmdSetDepthBiasEnableEXT"){
            handle_vkCmdSetDepthBiasEnableEXT(data);
            return;
        }
    

        if(command=="vkCmdSetLogicOpEXT"){
            handle_vkCmdSetLogicOpEXT(data);
            return;
        }
    

        if(command=="vkCmdSetPrimitiveRestartEnable"){
            handle_vkCmdSetPrimitiveRestartEnable(data);
            return;
        }
    

        if(command=="vkCmdSetPrimitiveRestartEnableEXT"){
            handle_vkCmdSetPrimitiveRestartEnableEXT(data);
            return;
        }
    

        if(command=="vkCmdSetTessellationDomainOriginEXT"){
            handle_vkCmdSetTessellationDomainOriginEXT(data);
            return;
        }
    

        if(command=="vkCmdSetDepthClampEnableEXT"){
            handle_vkCmdSetDepthClampEnableEXT(data);
            return;
        }
    

        if(command=="vkCmdSetPolygonModeEXT"){
            handle_vkCmdSetPolygonModeEXT(data);
            return;
        }
    

        if(command=="vkCmdSetRasterizationSamplesEXT"){
            handle_vkCmdSetRasterizationSamplesEXT(data);
            return;
        }
    

        if(command=="vkCmdSetSampleMaskEXT"){
            handle_vkCmdSetSampleMaskEXT(data);
            return;
        }
    

        if(command=="vkCmdSetAlphaToCoverageEnableEXT"){
            handle_vkCmdSetAlphaToCoverageEnableEXT(data);
            return;
        }
    

        if(command=="vkCmdSetAlphaToOneEnableEXT"){
            handle_vkCmdSetAlphaToOneEnableEXT(data);
            return;
        }
    

        if(command=="vkCmdSetLogicOpEnableEXT"){
            handle_vkCmdSetLogicOpEnableEXT(data);
            return;
        }
    

        if(command=="vkCmdSetColorBlendEnableEXT"){
            handle_vkCmdSetColorBlendEnableEXT(data);
            return;
        }
    

        if(command=="vkCmdSetColorBlendEquationEXT"){
            handle_vkCmdSetColorBlendEquationEXT(data);
            return;
        }
    

        if(command=="vkCmdSetColorWriteMaskEXT"){
            handle_vkCmdSetColorWriteMaskEXT(data);
            return;
        }
    

        if(command=="vkCmdSetRasterizationStreamEXT"){
            handle_vkCmdSetRasterizationStreamEXT(data);
            return;
        }
    

        if(command=="vkCmdSetConservativeRasterizationModeEXT"){
            handle_vkCmdSetConservativeRasterizationModeEXT(data);
            return;
        }
    

        if(command=="vkCmdSetExtraPrimitiveOverestimationSizeEXT"){
            handle_vkCmdSetExtraPrimitiveOverestimationSizeEXT(data);
            return;
        }
    

        if(command=="vkCmdSetDepthClipEnableEXT"){
            handle_vkCmdSetDepthClipEnableEXT(data);
            return;
        }
    

        if(command=="vkCmdSetSampleLocationsEnableEXT"){
            handle_vkCmdSetSampleLocationsEnableEXT(data);
            return;
        }
    

        if(command=="vkCmdSetColorBlendAdvancedEXT"){
            handle_vkCmdSetColorBlendAdvancedEXT(data);
            return;
        }
    

        if(command=="vkCmdSetProvokingVertexModeEXT"){
            handle_vkCmdSetProvokingVertexModeEXT(data);
            return;
        }
    

        if(command=="vkCmdSetLineRasterizationModeEXT"){
            handle_vkCmdSetLineRasterizationModeEXT(data);
            return;
        }
    

        if(command=="vkCmdSetLineStippleEnableEXT"){
            handle_vkCmdSetLineStippleEnableEXT(data);
            return;
        }
    

        if(command=="vkCmdSetDepthClipNegativeOneToOneEXT"){
            handle_vkCmdSetDepthClipNegativeOneToOneEXT(data);
            return;
        }
    

        if(command=="vkCmdSetViewportWScalingEnableNV"){
            handle_vkCmdSetViewportWScalingEnableNV(data);
            return;
        }
    

        if(command=="vkCmdSetViewportSwizzleNV"){
            handle_vkCmdSetViewportSwizzleNV(data);
            return;
        }
    

        if(command=="vkCmdSetCoverageToColorEnableNV"){
            handle_vkCmdSetCoverageToColorEnableNV(data);
            return;
        }
    

        if(command=="vkCmdSetCoverageToColorLocationNV"){
            handle_vkCmdSetCoverageToColorLocationNV(data);
            return;
        }
    

        if(command=="vkCmdSetCoverageModulationModeNV"){
            handle_vkCmdSetCoverageModulationModeNV(data);
            return;
        }
    

        if(command=="vkCmdSetCoverageModulationTableEnableNV"){
            handle_vkCmdSetCoverageModulationTableEnableNV(data);
            return;
        }
    

        if(command=="vkCmdSetCoverageModulationTableNV"){
            handle_vkCmdSetCoverageModulationTableNV(data);
            return;
        }
    

        if(command=="vkCmdSetShadingRateImageEnableNV"){
            handle_vkCmdSetShadingRateImageEnableNV(data);
            return;
        }
    

        if(command=="vkCmdSetCoverageReductionModeNV"){
            handle_vkCmdSetCoverageReductionModeNV(data);
            return;
        }
    

        if(command=="vkCmdSetRepresentativeFragmentTestEnableNV"){
            handle_vkCmdSetRepresentativeFragmentTestEnableNV(data);
            return;
        }
    

        if(command=="vkCreatePrivateDataSlot"){
            handle_vkCreatePrivateDataSlot(data);
            return;
        }
    

        if(command=="vkCreatePrivateDataSlotEXT"){
            handle_vkCreatePrivateDataSlotEXT(data);
            return;
        }
    

        if(command=="vkDestroyPrivateDataSlot"){
            handle_vkDestroyPrivateDataSlot(data);
            return;
        }
    

        if(command=="vkDestroyPrivateDataSlotEXT"){
            handle_vkDestroyPrivateDataSlotEXT(data);
            return;
        }
    

        if(command=="vkSetPrivateData"){
            handle_vkSetPrivateData(data);
            return;
        }
    

        if(command=="vkSetPrivateDataEXT"){
            handle_vkSetPrivateDataEXT(data);
            return;
        }
    

        if(command=="vkGetPrivateData"){
            handle_vkGetPrivateData(data);
            return;
        }
    

        if(command=="vkGetPrivateDataEXT"){
            handle_vkGetPrivateDataEXT(data);
            return;
        }
    

        if(command=="vkCmdCopyBuffer2"){
            handle_vkCmdCopyBuffer2(data);
            return;
        }
    

        if(command=="vkCmdCopyBuffer2KHR"){
            handle_vkCmdCopyBuffer2KHR(data);
            return;
        }
    

        if(command=="vkCmdCopyImage2"){
            handle_vkCmdCopyImage2(data);
            return;
        }
    

        if(command=="vkCmdCopyImage2KHR"){
            handle_vkCmdCopyImage2KHR(data);
            return;
        }
    

        if(command=="vkCmdBlitImage2"){
            handle_vkCmdBlitImage2(data);
            return;
        }
    

        if(command=="vkCmdBlitImage2KHR"){
            handle_vkCmdBlitImage2KHR(data);
            return;
        }
    

        if(command=="vkCmdCopyBufferToImage2"){
            handle_vkCmdCopyBufferToImage2(data);
            return;
        }
    

        if(command=="vkCmdCopyBufferToImage2KHR"){
            handle_vkCmdCopyBufferToImage2KHR(data);
            return;
        }
    

        if(command=="vkCmdCopyImageToBuffer2"){
            handle_vkCmdCopyImageToBuffer2(data);
            return;
        }
    

        if(command=="vkCmdCopyImageToBuffer2KHR"){
            handle_vkCmdCopyImageToBuffer2KHR(data);
            return;
        }
    

        if(command=="vkCmdResolveImage2"){
            handle_vkCmdResolveImage2(data);
            return;
        }
    

        if(command=="vkCmdResolveImage2KHR"){
            handle_vkCmdResolveImage2KHR(data);
            return;
        }
    

        if(command=="vkCmdSetFragmentShadingRateKHR"){
            handle_vkCmdSetFragmentShadingRateKHR(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceFragmentShadingRatesKHR"){
            handle_vkGetPhysicalDeviceFragmentShadingRatesKHR(data);
            return;
        }
    

        if(command=="vkCmdSetFragmentShadingRateEnumNV"){
            handle_vkCmdSetFragmentShadingRateEnumNV(data);
            return;
        }
    

        if(command=="vkGetAccelerationStructureBuildSizesKHR"){
            handle_vkGetAccelerationStructureBuildSizesKHR(data);
            return;
        }
    

        if(command=="vkCmdSetVertexInputEXT"){
            handle_vkCmdSetVertexInputEXT(data);
            return;
        }
    

        if(command=="vkCmdSetColorWriteEnableEXT"){
            handle_vkCmdSetColorWriteEnableEXT(data);
            return;
        }
    

        if(command=="vkCmdSetEvent2"){
            handle_vkCmdSetEvent2(data);
            return;
        }
    

        if(command=="vkCmdSetEvent2KHR"){
            handle_vkCmdSetEvent2KHR(data);
            return;
        }
    

        if(command=="vkCmdResetEvent2"){
            handle_vkCmdResetEvent2(data);
            return;
        }
    

        if(command=="vkCmdResetEvent2KHR"){
            handle_vkCmdResetEvent2KHR(data);
            return;
        }
    

        if(command=="vkCmdWaitEvents2"){
            handle_vkCmdWaitEvents2(data);
            return;
        }
    

        if(command=="vkCmdWaitEvents2KHR"){
            handle_vkCmdWaitEvents2KHR(data);
            return;
        }
    

        if(command=="vkCmdPipelineBarrier2"){
            handle_vkCmdPipelineBarrier2(data);
            return;
        }
    

        if(command=="vkCmdPipelineBarrier2KHR"){
            handle_vkCmdPipelineBarrier2KHR(data);
            return;
        }
    

        if(command=="vkQueueSubmit2"){
            handle_vkQueueSubmit2(data);
            return;
        }
    

        if(command=="vkQueueSubmit2KHR"){
            handle_vkQueueSubmit2KHR(data);
            return;
        }
    

        if(command=="vkCmdWriteTimestamp2"){
            handle_vkCmdWriteTimestamp2(data);
            return;
        }
    

        if(command=="vkCmdWriteTimestamp2KHR"){
            handle_vkCmdWriteTimestamp2KHR(data);
            return;
        }
    

        if(command=="vkCmdWriteBufferMarker2AMD"){
            handle_vkCmdWriteBufferMarker2AMD(data);
            return;
        }
    

        if(command=="vkGetQueueCheckpointData2NV"){
            handle_vkGetQueueCheckpointData2NV(data);
            return;
        }
    

        if(command=="vkCopyMemoryToImageEXT"){
            handle_vkCopyMemoryToImageEXT(data);
            return;
        }
    

        if(command=="vkCopyImageToMemoryEXT"){
            handle_vkCopyImageToMemoryEXT(data);
            return;
        }
    

        if(command=="vkCopyImageToImageEXT"){
            handle_vkCopyImageToImageEXT(data);
            return;
        }
    

        if(command=="vkTransitionImageLayoutEXT"){
            handle_vkTransitionImageLayoutEXT(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceVideoCapabilitiesKHR"){
            handle_vkGetPhysicalDeviceVideoCapabilitiesKHR(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceVideoFormatPropertiesKHR"){
            handle_vkGetPhysicalDeviceVideoFormatPropertiesKHR(data);
            return;
        }
    

        if(command=="vkCreateVideoSessionKHR"){
            handle_vkCreateVideoSessionKHR(data);
            return;
        }
    

        if(command=="vkDestroyVideoSessionKHR"){
            handle_vkDestroyVideoSessionKHR(data);
            return;
        }
    

        if(command=="vkCreateVideoSessionParametersKHR"){
            handle_vkCreateVideoSessionParametersKHR(data);
            return;
        }
    

        if(command=="vkUpdateVideoSessionParametersKHR"){
            handle_vkUpdateVideoSessionParametersKHR(data);
            return;
        }
    

        if(command=="vkDestroyVideoSessionParametersKHR"){
            handle_vkDestroyVideoSessionParametersKHR(data);
            return;
        }
    

        if(command=="vkGetVideoSessionMemoryRequirementsKHR"){
            handle_vkGetVideoSessionMemoryRequirementsKHR(data);
            return;
        }
    

        if(command=="vkBindVideoSessionMemoryKHR"){
            handle_vkBindVideoSessionMemoryKHR(data);
            return;
        }
    

        if(command=="vkCmdDecodeVideoKHR"){
            handle_vkCmdDecodeVideoKHR(data);
            return;
        }
    

        if(command=="vkCmdBeginVideoCodingKHR"){
            handle_vkCmdBeginVideoCodingKHR(data);
            return;
        }
    

        if(command=="vkCmdControlVideoCodingKHR"){
            handle_vkCmdControlVideoCodingKHR(data);
            return;
        }
    

        if(command=="vkCmdEndVideoCodingKHR"){
            handle_vkCmdEndVideoCodingKHR(data);
            return;
        }
    

        if(command=="vkCmdDecompressMemoryNV"){
            handle_vkCmdDecompressMemoryNV(data);
            return;
        }
    

        if(command=="vkCmdDecompressMemoryIndirectCountNV"){
            handle_vkCmdDecompressMemoryIndirectCountNV(data);
            return;
        }
    

        if(command=="vkCreateCuModuleNVX"){
            handle_vkCreateCuModuleNVX(data);
            return;
        }
    

        if(command=="vkCreateCuFunctionNVX"){
            handle_vkCreateCuFunctionNVX(data);
            return;
        }
    

        if(command=="vkDestroyCuModuleNVX"){
            handle_vkDestroyCuModuleNVX(data);
            return;
        }
    

        if(command=="vkDestroyCuFunctionNVX"){
            handle_vkDestroyCuFunctionNVX(data);
            return;
        }
    

        if(command=="vkCmdCuLaunchKernelNVX"){
            handle_vkCmdCuLaunchKernelNVX(data);
            return;
        }
    

        if(command=="vkGetDescriptorSetLayoutSizeEXT"){
            handle_vkGetDescriptorSetLayoutSizeEXT(data);
            return;
        }
    

        if(command=="vkGetDescriptorSetLayoutBindingOffsetEXT"){
            handle_vkGetDescriptorSetLayoutBindingOffsetEXT(data);
            return;
        }
    

        if(command=="vkGetDescriptorEXT"){
            handle_vkGetDescriptorEXT(data);
            return;
        }
    

        if(command=="vkCmdBindDescriptorBuffersEXT"){
            handle_vkCmdBindDescriptorBuffersEXT(data);
            return;
        }
    

        if(command=="vkCmdSetDescriptorBufferOffsetsEXT"){
            handle_vkCmdSetDescriptorBufferOffsetsEXT(data);
            return;
        }
    

        if(command=="vkCmdBindDescriptorBufferEmbeddedSamplersEXT"){
            handle_vkCmdBindDescriptorBufferEmbeddedSamplersEXT(data);
            return;
        }
    

        if(command=="vkGetBufferOpaqueCaptureDescriptorDataEXT"){
            handle_vkGetBufferOpaqueCaptureDescriptorDataEXT(data);
            return;
        }
    

        if(command=="vkGetImageOpaqueCaptureDescriptorDataEXT"){
            handle_vkGetImageOpaqueCaptureDescriptorDataEXT(data);
            return;
        }
    

        if(command=="vkGetImageViewOpaqueCaptureDescriptorDataEXT"){
            handle_vkGetImageViewOpaqueCaptureDescriptorDataEXT(data);
            return;
        }
    

        if(command=="vkGetSamplerOpaqueCaptureDescriptorDataEXT"){
            handle_vkGetSamplerOpaqueCaptureDescriptorDataEXT(data);
            return;
        }
    

        if(command=="vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT"){
            handle_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT(data);
            return;
        }
    

        if(command=="vkSetDeviceMemoryPriorityEXT"){
            handle_vkSetDeviceMemoryPriorityEXT(data);
            return;
        }
    

        if(command=="vkAcquireDrmDisplayEXT"){
            handle_vkAcquireDrmDisplayEXT(data);
            return;
        }
    

        if(command=="vkGetDrmDisplayEXT"){
            handle_vkGetDrmDisplayEXT(data);
            return;
        }
    

        if(command=="vkWaitForPresentKHR"){
            handle_vkWaitForPresentKHR(data);
            return;
        }
    

        if(command=="vkCmdBeginRendering"){
            handle_vkCmdBeginRendering(data);
            return;
        }
    

        if(command=="vkCmdBeginRenderingKHR"){
            handle_vkCmdBeginRenderingKHR(data);
            return;
        }
    

        if(command=="vkCmdEndRendering"){
            handle_vkCmdEndRendering(data);
            return;
        }
    

        if(command=="vkCmdEndRenderingKHR"){
            handle_vkCmdEndRenderingKHR(data);
            return;
        }
    

        if(command=="vkGetDescriptorSetLayoutHostMappingInfoVALVE"){
            handle_vkGetDescriptorSetLayoutHostMappingInfoVALVE(data);
            return;
        }
    

        if(command=="vkGetDescriptorSetHostMappingVALVE"){
            handle_vkGetDescriptorSetHostMappingVALVE(data);
            return;
        }
    

        if(command=="vkCreateMicromapEXT"){
            handle_vkCreateMicromapEXT(data);
            return;
        }
    

        if(command=="vkCmdBuildMicromapsEXT"){
            handle_vkCmdBuildMicromapsEXT(data);
            return;
        }
    

        if(command=="vkBuildMicromapsEXT"){
            handle_vkBuildMicromapsEXT(data);
            return;
        }
    

        if(command=="vkDestroyMicromapEXT"){
            handle_vkDestroyMicromapEXT(data);
            return;
        }
    

        if(command=="vkCmdCopyMicromapEXT"){
            handle_vkCmdCopyMicromapEXT(data);
            return;
        }
    

        if(command=="vkCopyMicromapEXT"){
            handle_vkCopyMicromapEXT(data);
            return;
        }
    

        if(command=="vkCmdCopyMicromapToMemoryEXT"){
            handle_vkCmdCopyMicromapToMemoryEXT(data);
            return;
        }
    

        if(command=="vkCopyMicromapToMemoryEXT"){
            handle_vkCopyMicromapToMemoryEXT(data);
            return;
        }
    

        if(command=="vkCmdCopyMemoryToMicromapEXT"){
            handle_vkCmdCopyMemoryToMicromapEXT(data);
            return;
        }
    

        if(command=="vkCopyMemoryToMicromapEXT"){
            handle_vkCopyMemoryToMicromapEXT(data);
            return;
        }
    

        if(command=="vkCmdWriteMicromapsPropertiesEXT"){
            handle_vkCmdWriteMicromapsPropertiesEXT(data);
            return;
        }
    

        if(command=="vkWriteMicromapsPropertiesEXT"){
            handle_vkWriteMicromapsPropertiesEXT(data);
            return;
        }
    

        if(command=="vkGetDeviceMicromapCompatibilityEXT"){
            handle_vkGetDeviceMicromapCompatibilityEXT(data);
            return;
        }
    

        if(command=="vkGetMicromapBuildSizesEXT"){
            handle_vkGetMicromapBuildSizesEXT(data);
            return;
        }
    

        if(command=="vkGetShaderModuleIdentifierEXT"){
            handle_vkGetShaderModuleIdentifierEXT(data);
            return;
        }
    

        if(command=="vkGetShaderModuleCreateInfoIdentifierEXT"){
            handle_vkGetShaderModuleCreateInfoIdentifierEXT(data);
            return;
        }
    

        if(command=="vkGetImageSubresourceLayout2KHR"){
            handle_vkGetImageSubresourceLayout2KHR(data);
            return;
        }
    

        if(command=="vkGetImageSubresourceLayout2EXT"){
            handle_vkGetImageSubresourceLayout2EXT(data);
            return;
        }
    

        if(command=="vkGetPipelinePropertiesEXT"){
            handle_vkGetPipelinePropertiesEXT(data);
            return;
        }
    

        if(command=="vkGetFramebufferTilePropertiesQCOM"){
            handle_vkGetFramebufferTilePropertiesQCOM(data);
            return;
        }
    

        if(command=="vkGetDynamicRenderingTilePropertiesQCOM"){
            handle_vkGetDynamicRenderingTilePropertiesQCOM(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceOpticalFlowImageFormatsNV"){
            handle_vkGetPhysicalDeviceOpticalFlowImageFormatsNV(data);
            return;
        }
    

        if(command=="vkCreateOpticalFlowSessionNV"){
            handle_vkCreateOpticalFlowSessionNV(data);
            return;
        }
    

        if(command=="vkDestroyOpticalFlowSessionNV"){
            handle_vkDestroyOpticalFlowSessionNV(data);
            return;
        }
    

        if(command=="vkBindOpticalFlowSessionImageNV"){
            handle_vkBindOpticalFlowSessionImageNV(data);
            return;
        }
    

        if(command=="vkCmdOpticalFlowExecuteNV"){
            handle_vkCmdOpticalFlowExecuteNV(data);
            return;
        }
    

        if(command=="vkGetDeviceFaultInfoEXT"){
            handle_vkGetDeviceFaultInfoEXT(data);
            return;
        }
    

        if(command=="vkCmdSetDepthBias2EXT"){
            handle_vkCmdSetDepthBias2EXT(data);
            return;
        }
    

        if(command=="vkReleaseSwapchainImagesEXT"){
            handle_vkReleaseSwapchainImagesEXT(data);
            return;
        }
    

        if(command=="vkGetDeviceImageSubresourceLayoutKHR"){
            handle_vkGetDeviceImageSubresourceLayoutKHR(data);
            return;
        }
    

        if(command=="vkMapMemory2KHR"){
            handle_vkMapMemory2KHR(data);
            return;
        }
    

        if(command=="vkUnmapMemory2KHR"){
            handle_vkUnmapMemory2KHR(data);
            return;
        }
    

        if(command=="vkCreateShadersEXT"){
            handle_vkCreateShadersEXT(data);
            return;
        }
    

        if(command=="vkDestroyShaderEXT"){
            handle_vkDestroyShaderEXT(data);
            return;
        }
    

        if(command=="vkGetShaderBinaryDataEXT"){
            handle_vkGetShaderBinaryDataEXT(data);
            return;
        }
    

        if(command=="vkCmdBindShadersEXT"){
            handle_vkCmdBindShadersEXT(data);
            return;
        }
    

        if(command=="vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR"){
            handle_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR(data);
            return;
        }
    
}
#else

typedef struct {
VkInstance instance;
VkDevice device;
} parent_handle_struct;

std::map<uintptr_t,parent_handle_struct> handle_to_parent_handle_struct;


extern "C" {
VkResult vkCreateInstance(
const VkInstanceCreateInfo* pCreateInfo,
 const VkAllocationCallbacks* pAllocator,
 VkInstance* pInstance
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreateInstance";

        data_json["parent"]["type"]="Instance";
        data_json["parent"]["handle"]=NULL;
        

{
data_json["members"]["pCreateInfo"]=[&]() {
    json return_UqkZAHS=json({});
    
        if (pCreateInfo==NULL){
            return_UqkZAHS["null"]=true;
            return return_UqkZAHS;
        }
        return_UqkZAHS=[&]() {
    json return_VbaOfPq=json({});
    return serialize_VkInstanceCreateInfo(*pCreateInfo);}();
return return_UqkZAHS;}();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pInstance"]=[&]() {
    json return_uTmbaBc=json({});
    
        if (pInstance==NULL){
            return_uTmbaBc["null"]=true;
            return return_uTmbaBc;
        }
        return_uTmbaBc=[&]() {
    json return_BGbArZa=json({});
    return serialize_VkInstance(*pInstance);}();
return return_uTmbaBc;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}


[&]() {

        if (result["members"]["pInstance"].contains("null")){
        pInstance=NULL;
        return;
        }
    [&]() {
*(pInstance)=deserialize_VkInstance(result["members"]["pInstance"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
handle_to_parent_handle_struct[(uintptr_t)(*pInstance)]={.instance=(*pInstance),.device=NULL};
return return_value;
}
void vkDestroyInstance(
VkInstance instance,
 const VkAllocationCallbacks* pAllocator
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkDestroyInstance";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)instance];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["instance"]=[&]() {
    json return_uDnIwUL=json({});
    return serialize_VkInstance(instance);}();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
instance=deserialize_VkInstance(result["members"]["instance"]);}();

}
VkResult vkEnumeratePhysicalDevices(
VkInstance instance,
 uint32_t* pPhysicalDeviceCount,
 VkPhysicalDevice* pPhysicalDevices
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkEnumeratePhysicalDevices";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)instance];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["instance"]=[&]() {
    json return_uDnIwUL=json({});
    return serialize_VkInstance(instance);}();
data_json["members"]["pPhysicalDeviceCount"]=[&]() {
    json return_SLNCGBL=json({});
    
        if (pPhysicalDeviceCount==NULL){
            return_SLNCGBL["null"]=true;
            return return_SLNCGBL;
        }
        return_SLNCGBL=[&]() {
    json return_vKKvZSl=json({});
    return serialize_uint32_t(*pPhysicalDeviceCount);}();
return return_SLNCGBL;}();
data_json["members"]["pPhysicalDevices"]=[&]() {
    json return_IegEydc=json({});
    
        if (pPhysicalDevices==NULL){
            return_IegEydc["null"]=true;
            return return_IegEydc;
        }
        
        return_IegEydc["members"]={};
        for(int IegEydc=0; IegEydc < *pPhysicalDeviceCount; IegEydc++){
            json temp;
            temp=[&]() {
    json return_Ypzycea=json({});
    return serialize_VkPhysicalDevice(pPhysicalDevices[IegEydc]);}();
            return_IegEydc["members"].push_back(temp);
        }
        return return_IegEydc;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
instance=deserialize_VkInstance(result["members"]["instance"]);}();
[&]() {

        if (result["members"]["pPhysicalDeviceCount"].contains("null")){
        pPhysicalDeviceCount=NULL;
        return;
        }
    [&]() {
*(pPhysicalDeviceCount)=deserialize_uint32_t(result["members"]["pPhysicalDeviceCount"]);}();
}();
[&]() {

        if (result["members"]["pPhysicalDevices"].contains("null")){
        pPhysicalDevices=NULL;
        return;
        }
    
        for (int YgORJwy=0; YgORJwy < *pPhysicalDeviceCount; YgORJwy++){
            [&]() {
pPhysicalDevices[YgORJwy]=deserialize_VkPhysicalDevice(result["members"]["pPhysicalDevices"]["members"][YgORJwy]);}();;
        }
        }();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
PFN_vkVoidFunction vkGetDeviceProcAddr(
VkDevice device,
 const char* pName
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetDeviceProcAddr";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pName"]=[&]() {
    json return_UtWldLN=json({});
    
        if (pName==NULL){
            return_UtWldLN["null"]=true;
            return return_UtWldLN;
        }
        return serialize_char_p(pName);
}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

PFN_vkVoidFunction return_value;

        if (false){
        }
        

            else if (strcmp(pName,"vkCreateInstance")==0){
                printf("Retrieving vkCreateInstance...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateInstance : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyInstance")==0){
                printf("Retrieving vkDestroyInstance...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyInstance : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkEnumeratePhysicalDevices")==0){
                printf("Retrieving vkEnumeratePhysicalDevices...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkEnumeratePhysicalDevices : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDeviceProcAddr")==0){
                printf("Retrieving vkGetDeviceProcAddr...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDeviceProcAddr : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetInstanceProcAddr")==0){
                printf("Retrieving vkGetInstanceProcAddr...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetInstanceProcAddr : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceProperties")==0){
                printf("Retrieving vkGetPhysicalDeviceProperties...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceProperties : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceQueueFamilyProperties")==0){
                printf("Retrieving vkGetPhysicalDeviceQueueFamilyProperties...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceQueueFamilyProperties : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceMemoryProperties")==0){
                printf("Retrieving vkGetPhysicalDeviceMemoryProperties...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceMemoryProperties : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceFeatures")==0){
                printf("Retrieving vkGetPhysicalDeviceFeatures...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceFeatures : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceFormatProperties")==0){
                printf("Retrieving vkGetPhysicalDeviceFormatProperties...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceFormatProperties : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceImageFormatProperties")==0){
                printf("Retrieving vkGetPhysicalDeviceImageFormatProperties...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceImageFormatProperties : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateDevice")==0){
                printf("Retrieving vkCreateDevice...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateDevice : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyDevice")==0){
                printf("Retrieving vkDestroyDevice...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyDevice : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkEnumerateInstanceVersion")==0){
                printf("Retrieving vkEnumerateInstanceVersion...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkEnumerateInstanceVersion : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkEnumerateInstanceLayerProperties")==0){
                printf("Retrieving vkEnumerateInstanceLayerProperties...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkEnumerateInstanceLayerProperties : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkEnumerateInstanceExtensionProperties")==0){
                printf("Retrieving vkEnumerateInstanceExtensionProperties...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkEnumerateInstanceExtensionProperties : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkEnumerateDeviceLayerProperties")==0){
                printf("Retrieving vkEnumerateDeviceLayerProperties...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkEnumerateDeviceLayerProperties : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkEnumerateDeviceExtensionProperties")==0){
                printf("Retrieving vkEnumerateDeviceExtensionProperties...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkEnumerateDeviceExtensionProperties : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDeviceQueue")==0){
                printf("Retrieving vkGetDeviceQueue...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDeviceQueue : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkQueueSubmit")==0){
                printf("Retrieving vkQueueSubmit...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkQueueSubmit : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkQueueWaitIdle")==0){
                printf("Retrieving vkQueueWaitIdle...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkQueueWaitIdle : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDeviceWaitIdle")==0){
                printf("Retrieving vkDeviceWaitIdle...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDeviceWaitIdle : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkAllocateMemory")==0){
                printf("Retrieving vkAllocateMemory...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkAllocateMemory : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkFreeMemory")==0){
                printf("Retrieving vkFreeMemory...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkFreeMemory : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkMapMemory")==0){
                printf("Retrieving vkMapMemory...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkMapMemory : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkUnmapMemory")==0){
                printf("Retrieving vkUnmapMemory...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkUnmapMemory : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkFlushMappedMemoryRanges")==0){
                printf("Retrieving vkFlushMappedMemoryRanges...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkFlushMappedMemoryRanges : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkInvalidateMappedMemoryRanges")==0){
                printf("Retrieving vkInvalidateMappedMemoryRanges...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkInvalidateMappedMemoryRanges : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDeviceMemoryCommitment")==0){
                printf("Retrieving vkGetDeviceMemoryCommitment...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDeviceMemoryCommitment : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetBufferMemoryRequirements")==0){
                printf("Retrieving vkGetBufferMemoryRequirements...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetBufferMemoryRequirements : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkBindBufferMemory")==0){
                printf("Retrieving vkBindBufferMemory...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkBindBufferMemory : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetImageMemoryRequirements")==0){
                printf("Retrieving vkGetImageMemoryRequirements...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetImageMemoryRequirements : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkBindImageMemory")==0){
                printf("Retrieving vkBindImageMemory...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkBindImageMemory : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetImageSparseMemoryRequirements")==0){
                printf("Retrieving vkGetImageSparseMemoryRequirements...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetImageSparseMemoryRequirements : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceSparseImageFormatProperties")==0){
                printf("Retrieving vkGetPhysicalDeviceSparseImageFormatProperties...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceSparseImageFormatProperties : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkQueueBindSparse")==0){
                printf("Retrieving vkQueueBindSparse...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkQueueBindSparse : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateFence")==0){
                printf("Retrieving vkCreateFence...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateFence : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyFence")==0){
                printf("Retrieving vkDestroyFence...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyFence : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkResetFences")==0){
                printf("Retrieving vkResetFences...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkResetFences : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetFenceStatus")==0){
                printf("Retrieving vkGetFenceStatus...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetFenceStatus : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkWaitForFences")==0){
                printf("Retrieving vkWaitForFences...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkWaitForFences : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateSemaphore")==0){
                printf("Retrieving vkCreateSemaphore...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateSemaphore : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroySemaphore")==0){
                printf("Retrieving vkDestroySemaphore...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroySemaphore : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateEvent")==0){
                printf("Retrieving vkCreateEvent...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateEvent : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyEvent")==0){
                printf("Retrieving vkDestroyEvent...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyEvent : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetEventStatus")==0){
                printf("Retrieving vkGetEventStatus...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetEventStatus : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkSetEvent")==0){
                printf("Retrieving vkSetEvent...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkSetEvent : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkResetEvent")==0){
                printf("Retrieving vkResetEvent...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkResetEvent : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateQueryPool")==0){
                printf("Retrieving vkCreateQueryPool...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateQueryPool : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyQueryPool")==0){
                printf("Retrieving vkDestroyQueryPool...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyQueryPool : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetQueryPoolResults")==0){
                printf("Retrieving vkGetQueryPoolResults...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetQueryPoolResults : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkResetQueryPool")==0){
                printf("Retrieving vkResetQueryPool...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkResetQueryPool : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkResetQueryPoolEXT")==0){
                printf("Retrieving vkResetQueryPoolEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkResetQueryPoolEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateBuffer")==0){
                printf("Retrieving vkCreateBuffer...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateBuffer : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyBuffer")==0){
                printf("Retrieving vkDestroyBuffer...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyBuffer : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateBufferView")==0){
                printf("Retrieving vkCreateBufferView...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateBufferView : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyBufferView")==0){
                printf("Retrieving vkDestroyBufferView...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyBufferView : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateImage")==0){
                printf("Retrieving vkCreateImage...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateImage : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyImage")==0){
                printf("Retrieving vkDestroyImage...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyImage : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetImageSubresourceLayout")==0){
                printf("Retrieving vkGetImageSubresourceLayout...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetImageSubresourceLayout : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateImageView")==0){
                printf("Retrieving vkCreateImageView...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateImageView : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyImageView")==0){
                printf("Retrieving vkDestroyImageView...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyImageView : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateShaderModule")==0){
                printf("Retrieving vkCreateShaderModule...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateShaderModule : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyShaderModule")==0){
                printf("Retrieving vkDestroyShaderModule...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyShaderModule : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreatePipelineCache")==0){
                printf("Retrieving vkCreatePipelineCache...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreatePipelineCache : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyPipelineCache")==0){
                printf("Retrieving vkDestroyPipelineCache...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyPipelineCache : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPipelineCacheData")==0){
                printf("Retrieving vkGetPipelineCacheData...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPipelineCacheData : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkMergePipelineCaches")==0){
                printf("Retrieving vkMergePipelineCaches...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkMergePipelineCaches : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateGraphicsPipelines")==0){
                printf("Retrieving vkCreateGraphicsPipelines...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateGraphicsPipelines : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateComputePipelines")==0){
                printf("Retrieving vkCreateComputePipelines...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateComputePipelines : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI")==0){
                printf("Retrieving vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyPipeline")==0){
                printf("Retrieving vkDestroyPipeline...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyPipeline : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreatePipelineLayout")==0){
                printf("Retrieving vkCreatePipelineLayout...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreatePipelineLayout : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyPipelineLayout")==0){
                printf("Retrieving vkDestroyPipelineLayout...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyPipelineLayout : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateSampler")==0){
                printf("Retrieving vkCreateSampler...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateSampler : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroySampler")==0){
                printf("Retrieving vkDestroySampler...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroySampler : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateDescriptorSetLayout")==0){
                printf("Retrieving vkCreateDescriptorSetLayout...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateDescriptorSetLayout : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyDescriptorSetLayout")==0){
                printf("Retrieving vkDestroyDescriptorSetLayout...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyDescriptorSetLayout : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateDescriptorPool")==0){
                printf("Retrieving vkCreateDescriptorPool...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateDescriptorPool : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyDescriptorPool")==0){
                printf("Retrieving vkDestroyDescriptorPool...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyDescriptorPool : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkResetDescriptorPool")==0){
                printf("Retrieving vkResetDescriptorPool...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkResetDescriptorPool : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkAllocateDescriptorSets")==0){
                printf("Retrieving vkAllocateDescriptorSets...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkAllocateDescriptorSets : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkFreeDescriptorSets")==0){
                printf("Retrieving vkFreeDescriptorSets...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkFreeDescriptorSets : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkUpdateDescriptorSets")==0){
                printf("Retrieving vkUpdateDescriptorSets...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkUpdateDescriptorSets : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateFramebuffer")==0){
                printf("Retrieving vkCreateFramebuffer...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateFramebuffer : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyFramebuffer")==0){
                printf("Retrieving vkDestroyFramebuffer...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyFramebuffer : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateRenderPass")==0){
                printf("Retrieving vkCreateRenderPass...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateRenderPass : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyRenderPass")==0){
                printf("Retrieving vkDestroyRenderPass...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyRenderPass : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetRenderAreaGranularity")==0){
                printf("Retrieving vkGetRenderAreaGranularity...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetRenderAreaGranularity : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetRenderingAreaGranularityKHR")==0){
                printf("Retrieving vkGetRenderingAreaGranularityKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetRenderingAreaGranularityKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateCommandPool")==0){
                printf("Retrieving vkCreateCommandPool...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateCommandPool : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyCommandPool")==0){
                printf("Retrieving vkDestroyCommandPool...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyCommandPool : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkResetCommandPool")==0){
                printf("Retrieving vkResetCommandPool...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkResetCommandPool : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkAllocateCommandBuffers")==0){
                printf("Retrieving vkAllocateCommandBuffers...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkAllocateCommandBuffers : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkFreeCommandBuffers")==0){
                printf("Retrieving vkFreeCommandBuffers...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkFreeCommandBuffers : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkBeginCommandBuffer")==0){
                printf("Retrieving vkBeginCommandBuffer...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkBeginCommandBuffer : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkEndCommandBuffer")==0){
                printf("Retrieving vkEndCommandBuffer...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkEndCommandBuffer : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkResetCommandBuffer")==0){
                printf("Retrieving vkResetCommandBuffer...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkResetCommandBuffer : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBindPipeline")==0){
                printf("Retrieving vkCmdBindPipeline...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBindPipeline : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetAttachmentFeedbackLoopEnableEXT")==0){
                printf("Retrieving vkCmdSetAttachmentFeedbackLoopEnableEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetAttachmentFeedbackLoopEnableEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetViewport")==0){
                printf("Retrieving vkCmdSetViewport...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetViewport : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetScissor")==0){
                printf("Retrieving vkCmdSetScissor...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetScissor : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetLineWidth")==0){
                printf("Retrieving vkCmdSetLineWidth...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetLineWidth : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetDepthBias")==0){
                printf("Retrieving vkCmdSetDepthBias...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetDepthBias : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetBlendConstants")==0){
                printf("Retrieving vkCmdSetBlendConstants...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetBlendConstants : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetDepthBounds")==0){
                printf("Retrieving vkCmdSetDepthBounds...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetDepthBounds : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetStencilCompareMask")==0){
                printf("Retrieving vkCmdSetStencilCompareMask...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetStencilCompareMask : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetStencilWriteMask")==0){
                printf("Retrieving vkCmdSetStencilWriteMask...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetStencilWriteMask : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetStencilReference")==0){
                printf("Retrieving vkCmdSetStencilReference...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetStencilReference : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBindDescriptorSets")==0){
                printf("Retrieving vkCmdBindDescriptorSets...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBindDescriptorSets : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBindIndexBuffer")==0){
                printf("Retrieving vkCmdBindIndexBuffer...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBindIndexBuffer : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBindVertexBuffers")==0){
                printf("Retrieving vkCmdBindVertexBuffers...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBindVertexBuffers : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDraw")==0){
                printf("Retrieving vkCmdDraw...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDraw : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDrawIndexed")==0){
                printf("Retrieving vkCmdDrawIndexed...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDrawIndexed : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDrawMultiEXT")==0){
                printf("Retrieving vkCmdDrawMultiEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDrawMultiEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDrawMultiIndexedEXT")==0){
                printf("Retrieving vkCmdDrawMultiIndexedEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDrawMultiIndexedEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDrawIndirect")==0){
                printf("Retrieving vkCmdDrawIndirect...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDrawIndirect : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDrawIndexedIndirect")==0){
                printf("Retrieving vkCmdDrawIndexedIndirect...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDrawIndexedIndirect : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDispatch")==0){
                printf("Retrieving vkCmdDispatch...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDispatch : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDispatchIndirect")==0){
                printf("Retrieving vkCmdDispatchIndirect...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDispatchIndirect : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSubpassShadingHUAWEI")==0){
                printf("Retrieving vkCmdSubpassShadingHUAWEI...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSubpassShadingHUAWEI : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDrawClusterHUAWEI")==0){
                printf("Retrieving vkCmdDrawClusterHUAWEI...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDrawClusterHUAWEI : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDrawClusterIndirectHUAWEI")==0){
                printf("Retrieving vkCmdDrawClusterIndirectHUAWEI...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDrawClusterIndirectHUAWEI : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdUpdatePipelineIndirectBufferNV")==0){
                printf("Retrieving vkCmdUpdatePipelineIndirectBufferNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdUpdatePipelineIndirectBufferNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdCopyBuffer")==0){
                printf("Retrieving vkCmdCopyBuffer...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdCopyBuffer : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdCopyImage")==0){
                printf("Retrieving vkCmdCopyImage...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdCopyImage : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBlitImage")==0){
                printf("Retrieving vkCmdBlitImage...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBlitImage : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdCopyBufferToImage")==0){
                printf("Retrieving vkCmdCopyBufferToImage...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdCopyBufferToImage : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdCopyImageToBuffer")==0){
                printf("Retrieving vkCmdCopyImageToBuffer...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdCopyImageToBuffer : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdCopyMemoryIndirectNV")==0){
                printf("Retrieving vkCmdCopyMemoryIndirectNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdCopyMemoryIndirectNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdCopyMemoryToImageIndirectNV")==0){
                printf("Retrieving vkCmdCopyMemoryToImageIndirectNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdCopyMemoryToImageIndirectNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdUpdateBuffer")==0){
                printf("Retrieving vkCmdUpdateBuffer...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdUpdateBuffer : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdFillBuffer")==0){
                printf("Retrieving vkCmdFillBuffer...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdFillBuffer : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdClearColorImage")==0){
                printf("Retrieving vkCmdClearColorImage...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdClearColorImage : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdClearDepthStencilImage")==0){
                printf("Retrieving vkCmdClearDepthStencilImage...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdClearDepthStencilImage : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdClearAttachments")==0){
                printf("Retrieving vkCmdClearAttachments...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdClearAttachments : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdResolveImage")==0){
                printf("Retrieving vkCmdResolveImage...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdResolveImage : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetEvent")==0){
                printf("Retrieving vkCmdSetEvent...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetEvent : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdResetEvent")==0){
                printf("Retrieving vkCmdResetEvent...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdResetEvent : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdWaitEvents")==0){
                printf("Retrieving vkCmdWaitEvents...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdWaitEvents : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdPipelineBarrier")==0){
                printf("Retrieving vkCmdPipelineBarrier...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdPipelineBarrier : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBeginQuery")==0){
                printf("Retrieving vkCmdBeginQuery...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBeginQuery : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdEndQuery")==0){
                printf("Retrieving vkCmdEndQuery...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdEndQuery : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBeginConditionalRenderingEXT")==0){
                printf("Retrieving vkCmdBeginConditionalRenderingEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBeginConditionalRenderingEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdEndConditionalRenderingEXT")==0){
                printf("Retrieving vkCmdEndConditionalRenderingEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdEndConditionalRenderingEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdResetQueryPool")==0){
                printf("Retrieving vkCmdResetQueryPool...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdResetQueryPool : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdWriteTimestamp")==0){
                printf("Retrieving vkCmdWriteTimestamp...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdWriteTimestamp : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdCopyQueryPoolResults")==0){
                printf("Retrieving vkCmdCopyQueryPoolResults...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdCopyQueryPoolResults : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdPushConstants")==0){
                printf("Retrieving vkCmdPushConstants...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdPushConstants : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBeginRenderPass")==0){
                printf("Retrieving vkCmdBeginRenderPass...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBeginRenderPass : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdNextSubpass")==0){
                printf("Retrieving vkCmdNextSubpass...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdNextSubpass : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdEndRenderPass")==0){
                printf("Retrieving vkCmdEndRenderPass...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdEndRenderPass : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdExecuteCommands")==0){
                printf("Retrieving vkCmdExecuteCommands...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdExecuteCommands : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceDisplayPropertiesKHR")==0){
                printf("Retrieving vkGetPhysicalDeviceDisplayPropertiesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceDisplayPropertiesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceDisplayPlanePropertiesKHR")==0){
                printf("Retrieving vkGetPhysicalDeviceDisplayPlanePropertiesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceDisplayPlanePropertiesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDisplayPlaneSupportedDisplaysKHR")==0){
                printf("Retrieving vkGetDisplayPlaneSupportedDisplaysKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDisplayPlaneSupportedDisplaysKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDisplayModePropertiesKHR")==0){
                printf("Retrieving vkGetDisplayModePropertiesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDisplayModePropertiesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateDisplayModeKHR")==0){
                printf("Retrieving vkCreateDisplayModeKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateDisplayModeKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDisplayPlaneCapabilitiesKHR")==0){
                printf("Retrieving vkGetDisplayPlaneCapabilitiesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDisplayPlaneCapabilitiesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateDisplayPlaneSurfaceKHR")==0){
                printf("Retrieving vkCreateDisplayPlaneSurfaceKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateDisplayPlaneSurfaceKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateSharedSwapchainsKHR")==0){
                printf("Retrieving vkCreateSharedSwapchainsKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateSharedSwapchainsKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroySurfaceKHR")==0){
                printf("Retrieving vkDestroySurfaceKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroySurfaceKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceSurfaceSupportKHR")==0){
                printf("Retrieving vkGetPhysicalDeviceSurfaceSupportKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceSurfaceSupportKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceSurfaceCapabilitiesKHR")==0){
                printf("Retrieving vkGetPhysicalDeviceSurfaceCapabilitiesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceSurfaceCapabilitiesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceSurfaceFormatsKHR")==0){
                printf("Retrieving vkGetPhysicalDeviceSurfaceFormatsKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceSurfaceFormatsKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceSurfacePresentModesKHR")==0){
                printf("Retrieving vkGetPhysicalDeviceSurfacePresentModesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceSurfacePresentModesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateSwapchainKHR")==0){
                printf("Retrieving vkCreateSwapchainKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateSwapchainKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroySwapchainKHR")==0){
                printf("Retrieving vkDestroySwapchainKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroySwapchainKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetSwapchainImagesKHR")==0){
                printf("Retrieving vkGetSwapchainImagesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetSwapchainImagesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkAcquireNextImageKHR")==0){
                printf("Retrieving vkAcquireNextImageKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkAcquireNextImageKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkQueuePresentKHR")==0){
                printf("Retrieving vkQueuePresentKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkQueuePresentKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateXlibSurfaceKHR")==0){
                printf("Retrieving vkCreateXlibSurfaceKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateXlibSurfaceKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceXlibPresentationSupportKHR")==0){
                printf("Retrieving vkGetPhysicalDeviceXlibPresentationSupportKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceXlibPresentationSupportKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateXcbSurfaceKHR")==0){
                printf("Retrieving vkCreateXcbSurfaceKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateXcbSurfaceKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceXcbPresentationSupportKHR")==0){
                printf("Retrieving vkGetPhysicalDeviceXcbPresentationSupportKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceXcbPresentationSupportKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateDebugReportCallbackEXT")==0){
                printf("Retrieving vkCreateDebugReportCallbackEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateDebugReportCallbackEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyDebugReportCallbackEXT")==0){
                printf("Retrieving vkDestroyDebugReportCallbackEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyDebugReportCallbackEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDebugReportMessageEXT")==0){
                printf("Retrieving vkDebugReportMessageEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDebugReportMessageEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDebugMarkerSetObjectNameEXT")==0){
                printf("Retrieving vkDebugMarkerSetObjectNameEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDebugMarkerSetObjectNameEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDebugMarkerSetObjectTagEXT")==0){
                printf("Retrieving vkDebugMarkerSetObjectTagEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDebugMarkerSetObjectTagEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDebugMarkerBeginEXT")==0){
                printf("Retrieving vkCmdDebugMarkerBeginEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDebugMarkerBeginEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDebugMarkerEndEXT")==0){
                printf("Retrieving vkCmdDebugMarkerEndEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDebugMarkerEndEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDebugMarkerInsertEXT")==0){
                printf("Retrieving vkCmdDebugMarkerInsertEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDebugMarkerInsertEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceExternalImageFormatPropertiesNV")==0){
                printf("Retrieving vkGetPhysicalDeviceExternalImageFormatPropertiesNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceExternalImageFormatPropertiesNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdExecuteGeneratedCommandsNV")==0){
                printf("Retrieving vkCmdExecuteGeneratedCommandsNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdExecuteGeneratedCommandsNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdPreprocessGeneratedCommandsNV")==0){
                printf("Retrieving vkCmdPreprocessGeneratedCommandsNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdPreprocessGeneratedCommandsNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBindPipelineShaderGroupNV")==0){
                printf("Retrieving vkCmdBindPipelineShaderGroupNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBindPipelineShaderGroupNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetGeneratedCommandsMemoryRequirementsNV")==0){
                printf("Retrieving vkGetGeneratedCommandsMemoryRequirementsNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetGeneratedCommandsMemoryRequirementsNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateIndirectCommandsLayoutNV")==0){
                printf("Retrieving vkCreateIndirectCommandsLayoutNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateIndirectCommandsLayoutNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyIndirectCommandsLayoutNV")==0){
                printf("Retrieving vkDestroyIndirectCommandsLayoutNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyIndirectCommandsLayoutNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceFeatures2")==0){
                printf("Retrieving vkGetPhysicalDeviceFeatures2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceFeatures2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceFeatures2KHR")==0){
                printf("Retrieving vkGetPhysicalDeviceFeatures2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceFeatures2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceProperties2")==0){
                printf("Retrieving vkGetPhysicalDeviceProperties2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceProperties2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceProperties2KHR")==0){
                printf("Retrieving vkGetPhysicalDeviceProperties2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceProperties2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceFormatProperties2")==0){
                printf("Retrieving vkGetPhysicalDeviceFormatProperties2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceFormatProperties2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceFormatProperties2KHR")==0){
                printf("Retrieving vkGetPhysicalDeviceFormatProperties2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceFormatProperties2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceImageFormatProperties2")==0){
                printf("Retrieving vkGetPhysicalDeviceImageFormatProperties2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceImageFormatProperties2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceImageFormatProperties2KHR")==0){
                printf("Retrieving vkGetPhysicalDeviceImageFormatProperties2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceImageFormatProperties2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceQueueFamilyProperties2")==0){
                printf("Retrieving vkGetPhysicalDeviceQueueFamilyProperties2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceQueueFamilyProperties2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceQueueFamilyProperties2KHR")==0){
                printf("Retrieving vkGetPhysicalDeviceQueueFamilyProperties2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceQueueFamilyProperties2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceMemoryProperties2")==0){
                printf("Retrieving vkGetPhysicalDeviceMemoryProperties2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceMemoryProperties2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceMemoryProperties2KHR")==0){
                printf("Retrieving vkGetPhysicalDeviceMemoryProperties2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceMemoryProperties2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceSparseImageFormatProperties2")==0){
                printf("Retrieving vkGetPhysicalDeviceSparseImageFormatProperties2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceSparseImageFormatProperties2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceSparseImageFormatProperties2KHR")==0){
                printf("Retrieving vkGetPhysicalDeviceSparseImageFormatProperties2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceSparseImageFormatProperties2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdPushDescriptorSetKHR")==0){
                printf("Retrieving vkCmdPushDescriptorSetKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdPushDescriptorSetKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkTrimCommandPool")==0){
                printf("Retrieving vkTrimCommandPool...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkTrimCommandPool : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkTrimCommandPoolKHR")==0){
                printf("Retrieving vkTrimCommandPoolKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkTrimCommandPoolKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceExternalBufferProperties")==0){
                printf("Retrieving vkGetPhysicalDeviceExternalBufferProperties...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceExternalBufferProperties : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceExternalBufferPropertiesKHR")==0){
                printf("Retrieving vkGetPhysicalDeviceExternalBufferPropertiesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceExternalBufferPropertiesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetMemoryFdKHR")==0){
                printf("Retrieving vkGetMemoryFdKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetMemoryFdKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetMemoryFdPropertiesKHR")==0){
                printf("Retrieving vkGetMemoryFdPropertiesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetMemoryFdPropertiesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetMemoryRemoteAddressNV")==0){
                printf("Retrieving vkGetMemoryRemoteAddressNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetMemoryRemoteAddressNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceExternalSemaphoreProperties")==0){
                printf("Retrieving vkGetPhysicalDeviceExternalSemaphoreProperties...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceExternalSemaphoreProperties : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceExternalSemaphorePropertiesKHR")==0){
                printf("Retrieving vkGetPhysicalDeviceExternalSemaphorePropertiesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceExternalSemaphorePropertiesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetSemaphoreFdKHR")==0){
                printf("Retrieving vkGetSemaphoreFdKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetSemaphoreFdKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkImportSemaphoreFdKHR")==0){
                printf("Retrieving vkImportSemaphoreFdKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkImportSemaphoreFdKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceExternalFenceProperties")==0){
                printf("Retrieving vkGetPhysicalDeviceExternalFenceProperties...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceExternalFenceProperties : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceExternalFencePropertiesKHR")==0){
                printf("Retrieving vkGetPhysicalDeviceExternalFencePropertiesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceExternalFencePropertiesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetFenceFdKHR")==0){
                printf("Retrieving vkGetFenceFdKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetFenceFdKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkImportFenceFdKHR")==0){
                printf("Retrieving vkImportFenceFdKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkImportFenceFdKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkReleaseDisplayEXT")==0){
                printf("Retrieving vkReleaseDisplayEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkReleaseDisplayEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDisplayPowerControlEXT")==0){
                printf("Retrieving vkDisplayPowerControlEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDisplayPowerControlEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkRegisterDeviceEventEXT")==0){
                printf("Retrieving vkRegisterDeviceEventEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkRegisterDeviceEventEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkRegisterDisplayEventEXT")==0){
                printf("Retrieving vkRegisterDisplayEventEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkRegisterDisplayEventEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetSwapchainCounterEXT")==0){
                printf("Retrieving vkGetSwapchainCounterEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetSwapchainCounterEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceSurfaceCapabilities2EXT")==0){
                printf("Retrieving vkGetPhysicalDeviceSurfaceCapabilities2EXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceSurfaceCapabilities2EXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkEnumeratePhysicalDeviceGroups")==0){
                printf("Retrieving vkEnumeratePhysicalDeviceGroups...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkEnumeratePhysicalDeviceGroups : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkEnumeratePhysicalDeviceGroupsKHR")==0){
                printf("Retrieving vkEnumeratePhysicalDeviceGroupsKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkEnumeratePhysicalDeviceGroupsKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDeviceGroupPeerMemoryFeatures")==0){
                printf("Retrieving vkGetDeviceGroupPeerMemoryFeatures...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDeviceGroupPeerMemoryFeatures : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDeviceGroupPeerMemoryFeaturesKHR")==0){
                printf("Retrieving vkGetDeviceGroupPeerMemoryFeaturesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDeviceGroupPeerMemoryFeaturesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkBindBufferMemory2")==0){
                printf("Retrieving vkBindBufferMemory2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkBindBufferMemory2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkBindBufferMemory2KHR")==0){
                printf("Retrieving vkBindBufferMemory2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkBindBufferMemory2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkBindImageMemory2")==0){
                printf("Retrieving vkBindImageMemory2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkBindImageMemory2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkBindImageMemory2KHR")==0){
                printf("Retrieving vkBindImageMemory2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkBindImageMemory2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetDeviceMask")==0){
                printf("Retrieving vkCmdSetDeviceMask...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetDeviceMask : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetDeviceMaskKHR")==0){
                printf("Retrieving vkCmdSetDeviceMaskKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetDeviceMaskKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDeviceGroupPresentCapabilitiesKHR")==0){
                printf("Retrieving vkGetDeviceGroupPresentCapabilitiesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDeviceGroupPresentCapabilitiesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDeviceGroupSurfacePresentModesKHR")==0){
                printf("Retrieving vkGetDeviceGroupSurfacePresentModesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDeviceGroupSurfacePresentModesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkAcquireNextImage2KHR")==0){
                printf("Retrieving vkAcquireNextImage2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkAcquireNextImage2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDispatchBase")==0){
                printf("Retrieving vkCmdDispatchBase...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDispatchBase : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDispatchBaseKHR")==0){
                printf("Retrieving vkCmdDispatchBaseKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDispatchBaseKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDevicePresentRectanglesKHR")==0){
                printf("Retrieving vkGetPhysicalDevicePresentRectanglesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDevicePresentRectanglesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateDescriptorUpdateTemplate")==0){
                printf("Retrieving vkCreateDescriptorUpdateTemplate...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateDescriptorUpdateTemplate : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateDescriptorUpdateTemplateKHR")==0){
                printf("Retrieving vkCreateDescriptorUpdateTemplateKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateDescriptorUpdateTemplateKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyDescriptorUpdateTemplate")==0){
                printf("Retrieving vkDestroyDescriptorUpdateTemplate...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyDescriptorUpdateTemplate : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyDescriptorUpdateTemplateKHR")==0){
                printf("Retrieving vkDestroyDescriptorUpdateTemplateKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyDescriptorUpdateTemplateKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkUpdateDescriptorSetWithTemplate")==0){
                printf("Retrieving vkUpdateDescriptorSetWithTemplate...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkUpdateDescriptorSetWithTemplate : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkUpdateDescriptorSetWithTemplateKHR")==0){
                printf("Retrieving vkUpdateDescriptorSetWithTemplateKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkUpdateDescriptorSetWithTemplateKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdPushDescriptorSetWithTemplateKHR")==0){
                printf("Retrieving vkCmdPushDescriptorSetWithTemplateKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdPushDescriptorSetWithTemplateKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkSetHdrMetadataEXT")==0){
                printf("Retrieving vkSetHdrMetadataEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkSetHdrMetadataEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetSwapchainStatusKHR")==0){
                printf("Retrieving vkGetSwapchainStatusKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetSwapchainStatusKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetRefreshCycleDurationGOOGLE")==0){
                printf("Retrieving vkGetRefreshCycleDurationGOOGLE...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetRefreshCycleDurationGOOGLE : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPastPresentationTimingGOOGLE")==0){
                printf("Retrieving vkGetPastPresentationTimingGOOGLE...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPastPresentationTimingGOOGLE : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetViewportWScalingNV")==0){
                printf("Retrieving vkCmdSetViewportWScalingNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetViewportWScalingNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetDiscardRectangleEXT")==0){
                printf("Retrieving vkCmdSetDiscardRectangleEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetDiscardRectangleEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetDiscardRectangleEnableEXT")==0){
                printf("Retrieving vkCmdSetDiscardRectangleEnableEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetDiscardRectangleEnableEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetDiscardRectangleModeEXT")==0){
                printf("Retrieving vkCmdSetDiscardRectangleModeEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetDiscardRectangleModeEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetSampleLocationsEXT")==0){
                printf("Retrieving vkCmdSetSampleLocationsEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetSampleLocationsEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceMultisamplePropertiesEXT")==0){
                printf("Retrieving vkGetPhysicalDeviceMultisamplePropertiesEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceMultisamplePropertiesEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceSurfaceCapabilities2KHR")==0){
                printf("Retrieving vkGetPhysicalDeviceSurfaceCapabilities2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceSurfaceCapabilities2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceSurfaceFormats2KHR")==0){
                printf("Retrieving vkGetPhysicalDeviceSurfaceFormats2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceSurfaceFormats2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceDisplayProperties2KHR")==0){
                printf("Retrieving vkGetPhysicalDeviceDisplayProperties2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceDisplayProperties2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceDisplayPlaneProperties2KHR")==0){
                printf("Retrieving vkGetPhysicalDeviceDisplayPlaneProperties2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceDisplayPlaneProperties2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDisplayModeProperties2KHR")==0){
                printf("Retrieving vkGetDisplayModeProperties2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDisplayModeProperties2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDisplayPlaneCapabilities2KHR")==0){
                printf("Retrieving vkGetDisplayPlaneCapabilities2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDisplayPlaneCapabilities2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetBufferMemoryRequirements2")==0){
                printf("Retrieving vkGetBufferMemoryRequirements2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetBufferMemoryRequirements2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetBufferMemoryRequirements2KHR")==0){
                printf("Retrieving vkGetBufferMemoryRequirements2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetBufferMemoryRequirements2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetImageMemoryRequirements2")==0){
                printf("Retrieving vkGetImageMemoryRequirements2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetImageMemoryRequirements2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetImageMemoryRequirements2KHR")==0){
                printf("Retrieving vkGetImageMemoryRequirements2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetImageMemoryRequirements2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetImageSparseMemoryRequirements2")==0){
                printf("Retrieving vkGetImageSparseMemoryRequirements2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetImageSparseMemoryRequirements2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetImageSparseMemoryRequirements2KHR")==0){
                printf("Retrieving vkGetImageSparseMemoryRequirements2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetImageSparseMemoryRequirements2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDeviceBufferMemoryRequirements")==0){
                printf("Retrieving vkGetDeviceBufferMemoryRequirements...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDeviceBufferMemoryRequirements : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDeviceBufferMemoryRequirementsKHR")==0){
                printf("Retrieving vkGetDeviceBufferMemoryRequirementsKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDeviceBufferMemoryRequirementsKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDeviceImageMemoryRequirements")==0){
                printf("Retrieving vkGetDeviceImageMemoryRequirements...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDeviceImageMemoryRequirements : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDeviceImageMemoryRequirementsKHR")==0){
                printf("Retrieving vkGetDeviceImageMemoryRequirementsKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDeviceImageMemoryRequirementsKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDeviceImageSparseMemoryRequirements")==0){
                printf("Retrieving vkGetDeviceImageSparseMemoryRequirements...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDeviceImageSparseMemoryRequirements : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDeviceImageSparseMemoryRequirementsKHR")==0){
                printf("Retrieving vkGetDeviceImageSparseMemoryRequirementsKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDeviceImageSparseMemoryRequirementsKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateSamplerYcbcrConversion")==0){
                printf("Retrieving vkCreateSamplerYcbcrConversion...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateSamplerYcbcrConversion : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateSamplerYcbcrConversionKHR")==0){
                printf("Retrieving vkCreateSamplerYcbcrConversionKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateSamplerYcbcrConversionKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroySamplerYcbcrConversion")==0){
                printf("Retrieving vkDestroySamplerYcbcrConversion...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroySamplerYcbcrConversion : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroySamplerYcbcrConversionKHR")==0){
                printf("Retrieving vkDestroySamplerYcbcrConversionKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroySamplerYcbcrConversionKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDeviceQueue2")==0){
                printf("Retrieving vkGetDeviceQueue2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDeviceQueue2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateValidationCacheEXT")==0){
                printf("Retrieving vkCreateValidationCacheEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateValidationCacheEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyValidationCacheEXT")==0){
                printf("Retrieving vkDestroyValidationCacheEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyValidationCacheEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetValidationCacheDataEXT")==0){
                printf("Retrieving vkGetValidationCacheDataEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetValidationCacheDataEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkMergeValidationCachesEXT")==0){
                printf("Retrieving vkMergeValidationCachesEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkMergeValidationCachesEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDescriptorSetLayoutSupport")==0){
                printf("Retrieving vkGetDescriptorSetLayoutSupport...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDescriptorSetLayoutSupport : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDescriptorSetLayoutSupportKHR")==0){
                printf("Retrieving vkGetDescriptorSetLayoutSupportKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDescriptorSetLayoutSupportKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetShaderInfoAMD")==0){
                printf("Retrieving vkGetShaderInfoAMD...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetShaderInfoAMD : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkSetLocalDimmingAMD")==0){
                printf("Retrieving vkSetLocalDimmingAMD...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkSetLocalDimmingAMD : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceCalibrateableTimeDomainsEXT")==0){
                printf("Retrieving vkGetPhysicalDeviceCalibrateableTimeDomainsEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceCalibrateableTimeDomainsEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetCalibratedTimestampsEXT")==0){
                printf("Retrieving vkGetCalibratedTimestampsEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetCalibratedTimestampsEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkSetDebugUtilsObjectNameEXT")==0){
                printf("Retrieving vkSetDebugUtilsObjectNameEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkSetDebugUtilsObjectNameEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkSetDebugUtilsObjectTagEXT")==0){
                printf("Retrieving vkSetDebugUtilsObjectTagEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkSetDebugUtilsObjectTagEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkQueueBeginDebugUtilsLabelEXT")==0){
                printf("Retrieving vkQueueBeginDebugUtilsLabelEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkQueueBeginDebugUtilsLabelEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkQueueEndDebugUtilsLabelEXT")==0){
                printf("Retrieving vkQueueEndDebugUtilsLabelEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkQueueEndDebugUtilsLabelEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkQueueInsertDebugUtilsLabelEXT")==0){
                printf("Retrieving vkQueueInsertDebugUtilsLabelEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkQueueInsertDebugUtilsLabelEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBeginDebugUtilsLabelEXT")==0){
                printf("Retrieving vkCmdBeginDebugUtilsLabelEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBeginDebugUtilsLabelEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdEndDebugUtilsLabelEXT")==0){
                printf("Retrieving vkCmdEndDebugUtilsLabelEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdEndDebugUtilsLabelEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdInsertDebugUtilsLabelEXT")==0){
                printf("Retrieving vkCmdInsertDebugUtilsLabelEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdInsertDebugUtilsLabelEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateDebugUtilsMessengerEXT")==0){
                printf("Retrieving vkCreateDebugUtilsMessengerEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateDebugUtilsMessengerEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyDebugUtilsMessengerEXT")==0){
                printf("Retrieving vkDestroyDebugUtilsMessengerEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyDebugUtilsMessengerEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkSubmitDebugUtilsMessageEXT")==0){
                printf("Retrieving vkSubmitDebugUtilsMessageEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkSubmitDebugUtilsMessageEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetMemoryHostPointerPropertiesEXT")==0){
                printf("Retrieving vkGetMemoryHostPointerPropertiesEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetMemoryHostPointerPropertiesEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdWriteBufferMarkerAMD")==0){
                printf("Retrieving vkCmdWriteBufferMarkerAMD...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdWriteBufferMarkerAMD : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateRenderPass2")==0){
                printf("Retrieving vkCreateRenderPass2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateRenderPass2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateRenderPass2KHR")==0){
                printf("Retrieving vkCreateRenderPass2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateRenderPass2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBeginRenderPass2")==0){
                printf("Retrieving vkCmdBeginRenderPass2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBeginRenderPass2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBeginRenderPass2KHR")==0){
                printf("Retrieving vkCmdBeginRenderPass2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBeginRenderPass2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdNextSubpass2")==0){
                printf("Retrieving vkCmdNextSubpass2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdNextSubpass2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdNextSubpass2KHR")==0){
                printf("Retrieving vkCmdNextSubpass2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdNextSubpass2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdEndRenderPass2")==0){
                printf("Retrieving vkCmdEndRenderPass2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdEndRenderPass2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdEndRenderPass2KHR")==0){
                printf("Retrieving vkCmdEndRenderPass2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdEndRenderPass2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetSemaphoreCounterValue")==0){
                printf("Retrieving vkGetSemaphoreCounterValue...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetSemaphoreCounterValue : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetSemaphoreCounterValueKHR")==0){
                printf("Retrieving vkGetSemaphoreCounterValueKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetSemaphoreCounterValueKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkWaitSemaphores")==0){
                printf("Retrieving vkWaitSemaphores...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkWaitSemaphores : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkWaitSemaphoresKHR")==0){
                printf("Retrieving vkWaitSemaphoresKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkWaitSemaphoresKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkSignalSemaphore")==0){
                printf("Retrieving vkSignalSemaphore...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkSignalSemaphore : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkSignalSemaphoreKHR")==0){
                printf("Retrieving vkSignalSemaphoreKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkSignalSemaphoreKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDrawIndirectCount")==0){
                printf("Retrieving vkCmdDrawIndirectCount...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDrawIndirectCount : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDrawIndirectCountKHR")==0){
                printf("Retrieving vkCmdDrawIndirectCountKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDrawIndirectCountKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDrawIndirectCountAMD")==0){
                printf("Retrieving vkCmdDrawIndirectCountAMD...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDrawIndirectCountAMD : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDrawIndexedIndirectCount")==0){
                printf("Retrieving vkCmdDrawIndexedIndirectCount...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDrawIndexedIndirectCount : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDrawIndexedIndirectCountKHR")==0){
                printf("Retrieving vkCmdDrawIndexedIndirectCountKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDrawIndexedIndirectCountKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDrawIndexedIndirectCountAMD")==0){
                printf("Retrieving vkCmdDrawIndexedIndirectCountAMD...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDrawIndexedIndirectCountAMD : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetCheckpointNV")==0){
                printf("Retrieving vkCmdSetCheckpointNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetCheckpointNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetQueueCheckpointDataNV")==0){
                printf("Retrieving vkGetQueueCheckpointDataNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetQueueCheckpointDataNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBindTransformFeedbackBuffersEXT")==0){
                printf("Retrieving vkCmdBindTransformFeedbackBuffersEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBindTransformFeedbackBuffersEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBeginTransformFeedbackEXT")==0){
                printf("Retrieving vkCmdBeginTransformFeedbackEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBeginTransformFeedbackEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdEndTransformFeedbackEXT")==0){
                printf("Retrieving vkCmdEndTransformFeedbackEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdEndTransformFeedbackEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBeginQueryIndexedEXT")==0){
                printf("Retrieving vkCmdBeginQueryIndexedEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBeginQueryIndexedEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdEndQueryIndexedEXT")==0){
                printf("Retrieving vkCmdEndQueryIndexedEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdEndQueryIndexedEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDrawIndirectByteCountEXT")==0){
                printf("Retrieving vkCmdDrawIndirectByteCountEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDrawIndirectByteCountEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetExclusiveScissorNV")==0){
                printf("Retrieving vkCmdSetExclusiveScissorNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetExclusiveScissorNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetExclusiveScissorEnableNV")==0){
                printf("Retrieving vkCmdSetExclusiveScissorEnableNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetExclusiveScissorEnableNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBindShadingRateImageNV")==0){
                printf("Retrieving vkCmdBindShadingRateImageNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBindShadingRateImageNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetViewportShadingRatePaletteNV")==0){
                printf("Retrieving vkCmdSetViewportShadingRatePaletteNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetViewportShadingRatePaletteNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetCoarseSampleOrderNV")==0){
                printf("Retrieving vkCmdSetCoarseSampleOrderNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetCoarseSampleOrderNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDrawMeshTasksNV")==0){
                printf("Retrieving vkCmdDrawMeshTasksNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDrawMeshTasksNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDrawMeshTasksIndirectNV")==0){
                printf("Retrieving vkCmdDrawMeshTasksIndirectNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDrawMeshTasksIndirectNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDrawMeshTasksIndirectCountNV")==0){
                printf("Retrieving vkCmdDrawMeshTasksIndirectCountNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDrawMeshTasksIndirectCountNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDrawMeshTasksEXT")==0){
                printf("Retrieving vkCmdDrawMeshTasksEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDrawMeshTasksEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDrawMeshTasksIndirectEXT")==0){
                printf("Retrieving vkCmdDrawMeshTasksIndirectEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDrawMeshTasksIndirectEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDrawMeshTasksIndirectCountEXT")==0){
                printf("Retrieving vkCmdDrawMeshTasksIndirectCountEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDrawMeshTasksIndirectCountEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCompileDeferredNV")==0){
                printf("Retrieving vkCompileDeferredNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCompileDeferredNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateAccelerationStructureNV")==0){
                printf("Retrieving vkCreateAccelerationStructureNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateAccelerationStructureNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBindInvocationMaskHUAWEI")==0){
                printf("Retrieving vkCmdBindInvocationMaskHUAWEI...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBindInvocationMaskHUAWEI : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyAccelerationStructureKHR")==0){
                printf("Retrieving vkDestroyAccelerationStructureKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyAccelerationStructureKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyAccelerationStructureNV")==0){
                printf("Retrieving vkDestroyAccelerationStructureNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyAccelerationStructureNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetAccelerationStructureMemoryRequirementsNV")==0){
                printf("Retrieving vkGetAccelerationStructureMemoryRequirementsNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetAccelerationStructureMemoryRequirementsNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkBindAccelerationStructureMemoryNV")==0){
                printf("Retrieving vkBindAccelerationStructureMemoryNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkBindAccelerationStructureMemoryNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdCopyAccelerationStructureNV")==0){
                printf("Retrieving vkCmdCopyAccelerationStructureNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdCopyAccelerationStructureNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdCopyAccelerationStructureKHR")==0){
                printf("Retrieving vkCmdCopyAccelerationStructureKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdCopyAccelerationStructureKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCopyAccelerationStructureKHR")==0){
                printf("Retrieving vkCopyAccelerationStructureKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCopyAccelerationStructureKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdCopyAccelerationStructureToMemoryKHR")==0){
                printf("Retrieving vkCmdCopyAccelerationStructureToMemoryKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdCopyAccelerationStructureToMemoryKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCopyAccelerationStructureToMemoryKHR")==0){
                printf("Retrieving vkCopyAccelerationStructureToMemoryKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCopyAccelerationStructureToMemoryKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdCopyMemoryToAccelerationStructureKHR")==0){
                printf("Retrieving vkCmdCopyMemoryToAccelerationStructureKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdCopyMemoryToAccelerationStructureKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCopyMemoryToAccelerationStructureKHR")==0){
                printf("Retrieving vkCopyMemoryToAccelerationStructureKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCopyMemoryToAccelerationStructureKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdWriteAccelerationStructuresPropertiesKHR")==0){
                printf("Retrieving vkCmdWriteAccelerationStructuresPropertiesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdWriteAccelerationStructuresPropertiesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdWriteAccelerationStructuresPropertiesNV")==0){
                printf("Retrieving vkCmdWriteAccelerationStructuresPropertiesNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdWriteAccelerationStructuresPropertiesNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBuildAccelerationStructureNV")==0){
                printf("Retrieving vkCmdBuildAccelerationStructureNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBuildAccelerationStructureNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkWriteAccelerationStructuresPropertiesKHR")==0){
                printf("Retrieving vkWriteAccelerationStructuresPropertiesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkWriteAccelerationStructuresPropertiesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdTraceRaysKHR")==0){
                printf("Retrieving vkCmdTraceRaysKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdTraceRaysKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdTraceRaysNV")==0){
                printf("Retrieving vkCmdTraceRaysNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdTraceRaysNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetRayTracingShaderGroupHandlesKHR")==0){
                printf("Retrieving vkGetRayTracingShaderGroupHandlesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetRayTracingShaderGroupHandlesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetRayTracingShaderGroupHandlesNV")==0){
                printf("Retrieving vkGetRayTracingShaderGroupHandlesNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetRayTracingShaderGroupHandlesNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetRayTracingCaptureReplayShaderGroupHandlesKHR")==0){
                printf("Retrieving vkGetRayTracingCaptureReplayShaderGroupHandlesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetRayTracingCaptureReplayShaderGroupHandlesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetAccelerationStructureHandleNV")==0){
                printf("Retrieving vkGetAccelerationStructureHandleNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetAccelerationStructureHandleNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateRayTracingPipelinesNV")==0){
                printf("Retrieving vkCreateRayTracingPipelinesNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateRayTracingPipelinesNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateRayTracingPipelinesKHR")==0){
                printf("Retrieving vkCreateRayTracingPipelinesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateRayTracingPipelinesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceCooperativeMatrixPropertiesNV")==0){
                printf("Retrieving vkGetPhysicalDeviceCooperativeMatrixPropertiesNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceCooperativeMatrixPropertiesNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdTraceRaysIndirectKHR")==0){
                printf("Retrieving vkCmdTraceRaysIndirectKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdTraceRaysIndirectKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdTraceRaysIndirect2KHR")==0){
                printf("Retrieving vkCmdTraceRaysIndirect2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdTraceRaysIndirect2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDeviceAccelerationStructureCompatibilityKHR")==0){
                printf("Retrieving vkGetDeviceAccelerationStructureCompatibilityKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDeviceAccelerationStructureCompatibilityKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetRayTracingShaderGroupStackSizeKHR")==0){
                printf("Retrieving vkGetRayTracingShaderGroupStackSizeKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetRayTracingShaderGroupStackSizeKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetRayTracingPipelineStackSizeKHR")==0){
                printf("Retrieving vkCmdSetRayTracingPipelineStackSizeKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetRayTracingPipelineStackSizeKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetImageViewHandleNVX")==0){
                printf("Retrieving vkGetImageViewHandleNVX...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetImageViewHandleNVX : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetImageViewAddressNVX")==0){
                printf("Retrieving vkGetImageViewAddressNVX...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetImageViewAddressNVX : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR")==0){
                printf("Retrieving vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR")==0){
                printf("Retrieving vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkAcquireProfilingLockKHR")==0){
                printf("Retrieving vkAcquireProfilingLockKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkAcquireProfilingLockKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkReleaseProfilingLockKHR")==0){
                printf("Retrieving vkReleaseProfilingLockKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkReleaseProfilingLockKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetImageDrmFormatModifierPropertiesEXT")==0){
                printf("Retrieving vkGetImageDrmFormatModifierPropertiesEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetImageDrmFormatModifierPropertiesEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetBufferOpaqueCaptureAddress")==0){
                printf("Retrieving vkGetBufferOpaqueCaptureAddress...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetBufferOpaqueCaptureAddress : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetBufferOpaqueCaptureAddressKHR")==0){
                printf("Retrieving vkGetBufferOpaqueCaptureAddressKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetBufferOpaqueCaptureAddressKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetBufferDeviceAddress")==0){
                printf("Retrieving vkGetBufferDeviceAddress...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetBufferDeviceAddress : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetBufferDeviceAddressKHR")==0){
                printf("Retrieving vkGetBufferDeviceAddressKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetBufferDeviceAddressKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetBufferDeviceAddressEXT")==0){
                printf("Retrieving vkGetBufferDeviceAddressEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetBufferDeviceAddressEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateHeadlessSurfaceEXT")==0){
                printf("Retrieving vkCreateHeadlessSurfaceEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateHeadlessSurfaceEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV")==0){
                printf("Retrieving vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkInitializePerformanceApiINTEL")==0){
                printf("Retrieving vkInitializePerformanceApiINTEL...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkInitializePerformanceApiINTEL : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkUninitializePerformanceApiINTEL")==0){
                printf("Retrieving vkUninitializePerformanceApiINTEL...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkUninitializePerformanceApiINTEL : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetPerformanceMarkerINTEL")==0){
                printf("Retrieving vkCmdSetPerformanceMarkerINTEL...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetPerformanceMarkerINTEL : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetPerformanceStreamMarkerINTEL")==0){
                printf("Retrieving vkCmdSetPerformanceStreamMarkerINTEL...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetPerformanceStreamMarkerINTEL : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetPerformanceOverrideINTEL")==0){
                printf("Retrieving vkCmdSetPerformanceOverrideINTEL...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetPerformanceOverrideINTEL : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkAcquirePerformanceConfigurationINTEL")==0){
                printf("Retrieving vkAcquirePerformanceConfigurationINTEL...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkAcquirePerformanceConfigurationINTEL : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkReleasePerformanceConfigurationINTEL")==0){
                printf("Retrieving vkReleasePerformanceConfigurationINTEL...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkReleasePerformanceConfigurationINTEL : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkQueueSetPerformanceConfigurationINTEL")==0){
                printf("Retrieving vkQueueSetPerformanceConfigurationINTEL...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkQueueSetPerformanceConfigurationINTEL : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPerformanceParameterINTEL")==0){
                printf("Retrieving vkGetPerformanceParameterINTEL...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPerformanceParameterINTEL : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDeviceMemoryOpaqueCaptureAddress")==0){
                printf("Retrieving vkGetDeviceMemoryOpaqueCaptureAddress...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDeviceMemoryOpaqueCaptureAddress : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDeviceMemoryOpaqueCaptureAddressKHR")==0){
                printf("Retrieving vkGetDeviceMemoryOpaqueCaptureAddressKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDeviceMemoryOpaqueCaptureAddressKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPipelineExecutablePropertiesKHR")==0){
                printf("Retrieving vkGetPipelineExecutablePropertiesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPipelineExecutablePropertiesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPipelineExecutableStatisticsKHR")==0){
                printf("Retrieving vkGetPipelineExecutableStatisticsKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPipelineExecutableStatisticsKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPipelineExecutableInternalRepresentationsKHR")==0){
                printf("Retrieving vkGetPipelineExecutableInternalRepresentationsKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPipelineExecutableInternalRepresentationsKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetLineStippleEXT")==0){
                printf("Retrieving vkCmdSetLineStippleEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetLineStippleEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceToolProperties")==0){
                printf("Retrieving vkGetPhysicalDeviceToolProperties...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceToolProperties : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceToolPropertiesEXT")==0){
                printf("Retrieving vkGetPhysicalDeviceToolPropertiesEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceToolPropertiesEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateAccelerationStructureKHR")==0){
                printf("Retrieving vkCreateAccelerationStructureKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateAccelerationStructureKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBuildAccelerationStructuresKHR")==0){
                printf("Retrieving vkCmdBuildAccelerationStructuresKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBuildAccelerationStructuresKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBuildAccelerationStructuresIndirectKHR")==0){
                printf("Retrieving vkCmdBuildAccelerationStructuresIndirectKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBuildAccelerationStructuresIndirectKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkBuildAccelerationStructuresKHR")==0){
                printf("Retrieving vkBuildAccelerationStructuresKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkBuildAccelerationStructuresKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetAccelerationStructureDeviceAddressKHR")==0){
                printf("Retrieving vkGetAccelerationStructureDeviceAddressKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetAccelerationStructureDeviceAddressKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateDeferredOperationKHR")==0){
                printf("Retrieving vkCreateDeferredOperationKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateDeferredOperationKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyDeferredOperationKHR")==0){
                printf("Retrieving vkDestroyDeferredOperationKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyDeferredOperationKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDeferredOperationMaxConcurrencyKHR")==0){
                printf("Retrieving vkGetDeferredOperationMaxConcurrencyKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDeferredOperationMaxConcurrencyKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDeferredOperationResultKHR")==0){
                printf("Retrieving vkGetDeferredOperationResultKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDeferredOperationResultKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDeferredOperationJoinKHR")==0){
                printf("Retrieving vkDeferredOperationJoinKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDeferredOperationJoinKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPipelineIndirectMemoryRequirementsNV")==0){
                printf("Retrieving vkGetPipelineIndirectMemoryRequirementsNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPipelineIndirectMemoryRequirementsNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPipelineIndirectDeviceAddressNV")==0){
                printf("Retrieving vkGetPipelineIndirectDeviceAddressNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPipelineIndirectDeviceAddressNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetCullMode")==0){
                printf("Retrieving vkCmdSetCullMode...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetCullMode : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetCullModeEXT")==0){
                printf("Retrieving vkCmdSetCullModeEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetCullModeEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetFrontFace")==0){
                printf("Retrieving vkCmdSetFrontFace...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetFrontFace : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetFrontFaceEXT")==0){
                printf("Retrieving vkCmdSetFrontFaceEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetFrontFaceEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetPrimitiveTopology")==0){
                printf("Retrieving vkCmdSetPrimitiveTopology...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetPrimitiveTopology : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetPrimitiveTopologyEXT")==0){
                printf("Retrieving vkCmdSetPrimitiveTopologyEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetPrimitiveTopologyEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetViewportWithCount")==0){
                printf("Retrieving vkCmdSetViewportWithCount...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetViewportWithCount : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetViewportWithCountEXT")==0){
                printf("Retrieving vkCmdSetViewportWithCountEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetViewportWithCountEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetScissorWithCount")==0){
                printf("Retrieving vkCmdSetScissorWithCount...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetScissorWithCount : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetScissorWithCountEXT")==0){
                printf("Retrieving vkCmdSetScissorWithCountEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetScissorWithCountEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBindIndexBuffer2KHR")==0){
                printf("Retrieving vkCmdBindIndexBuffer2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBindIndexBuffer2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBindVertexBuffers2")==0){
                printf("Retrieving vkCmdBindVertexBuffers2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBindVertexBuffers2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBindVertexBuffers2EXT")==0){
                printf("Retrieving vkCmdBindVertexBuffers2EXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBindVertexBuffers2EXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetDepthTestEnable")==0){
                printf("Retrieving vkCmdSetDepthTestEnable...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetDepthTestEnable : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetDepthTestEnableEXT")==0){
                printf("Retrieving vkCmdSetDepthTestEnableEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetDepthTestEnableEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetDepthWriteEnable")==0){
                printf("Retrieving vkCmdSetDepthWriteEnable...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetDepthWriteEnable : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetDepthWriteEnableEXT")==0){
                printf("Retrieving vkCmdSetDepthWriteEnableEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetDepthWriteEnableEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetDepthCompareOp")==0){
                printf("Retrieving vkCmdSetDepthCompareOp...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetDepthCompareOp : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetDepthCompareOpEXT")==0){
                printf("Retrieving vkCmdSetDepthCompareOpEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetDepthCompareOpEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetDepthBoundsTestEnable")==0){
                printf("Retrieving vkCmdSetDepthBoundsTestEnable...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetDepthBoundsTestEnable : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetDepthBoundsTestEnableEXT")==0){
                printf("Retrieving vkCmdSetDepthBoundsTestEnableEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetDepthBoundsTestEnableEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetStencilTestEnable")==0){
                printf("Retrieving vkCmdSetStencilTestEnable...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetStencilTestEnable : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetStencilTestEnableEXT")==0){
                printf("Retrieving vkCmdSetStencilTestEnableEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetStencilTestEnableEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetStencilOp")==0){
                printf("Retrieving vkCmdSetStencilOp...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetStencilOp : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetStencilOpEXT")==0){
                printf("Retrieving vkCmdSetStencilOpEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetStencilOpEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetPatchControlPointsEXT")==0){
                printf("Retrieving vkCmdSetPatchControlPointsEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetPatchControlPointsEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetRasterizerDiscardEnable")==0){
                printf("Retrieving vkCmdSetRasterizerDiscardEnable...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetRasterizerDiscardEnable : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetRasterizerDiscardEnableEXT")==0){
                printf("Retrieving vkCmdSetRasterizerDiscardEnableEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetRasterizerDiscardEnableEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetDepthBiasEnable")==0){
                printf("Retrieving vkCmdSetDepthBiasEnable...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetDepthBiasEnable : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetDepthBiasEnableEXT")==0){
                printf("Retrieving vkCmdSetDepthBiasEnableEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetDepthBiasEnableEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetLogicOpEXT")==0){
                printf("Retrieving vkCmdSetLogicOpEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetLogicOpEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetPrimitiveRestartEnable")==0){
                printf("Retrieving vkCmdSetPrimitiveRestartEnable...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetPrimitiveRestartEnable : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetPrimitiveRestartEnableEXT")==0){
                printf("Retrieving vkCmdSetPrimitiveRestartEnableEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetPrimitiveRestartEnableEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetTessellationDomainOriginEXT")==0){
                printf("Retrieving vkCmdSetTessellationDomainOriginEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetTessellationDomainOriginEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetDepthClampEnableEXT")==0){
                printf("Retrieving vkCmdSetDepthClampEnableEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetDepthClampEnableEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetPolygonModeEXT")==0){
                printf("Retrieving vkCmdSetPolygonModeEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetPolygonModeEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetRasterizationSamplesEXT")==0){
                printf("Retrieving vkCmdSetRasterizationSamplesEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetRasterizationSamplesEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetSampleMaskEXT")==0){
                printf("Retrieving vkCmdSetSampleMaskEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetSampleMaskEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetAlphaToCoverageEnableEXT")==0){
                printf("Retrieving vkCmdSetAlphaToCoverageEnableEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetAlphaToCoverageEnableEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetAlphaToOneEnableEXT")==0){
                printf("Retrieving vkCmdSetAlphaToOneEnableEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetAlphaToOneEnableEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetLogicOpEnableEXT")==0){
                printf("Retrieving vkCmdSetLogicOpEnableEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetLogicOpEnableEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetColorBlendEnableEXT")==0){
                printf("Retrieving vkCmdSetColorBlendEnableEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetColorBlendEnableEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetColorBlendEquationEXT")==0){
                printf("Retrieving vkCmdSetColorBlendEquationEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetColorBlendEquationEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetColorWriteMaskEXT")==0){
                printf("Retrieving vkCmdSetColorWriteMaskEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetColorWriteMaskEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetRasterizationStreamEXT")==0){
                printf("Retrieving vkCmdSetRasterizationStreamEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetRasterizationStreamEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetConservativeRasterizationModeEXT")==0){
                printf("Retrieving vkCmdSetConservativeRasterizationModeEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetConservativeRasterizationModeEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetExtraPrimitiveOverestimationSizeEXT")==0){
                printf("Retrieving vkCmdSetExtraPrimitiveOverestimationSizeEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetExtraPrimitiveOverestimationSizeEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetDepthClipEnableEXT")==0){
                printf("Retrieving vkCmdSetDepthClipEnableEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetDepthClipEnableEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetSampleLocationsEnableEXT")==0){
                printf("Retrieving vkCmdSetSampleLocationsEnableEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetSampleLocationsEnableEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetColorBlendAdvancedEXT")==0){
                printf("Retrieving vkCmdSetColorBlendAdvancedEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetColorBlendAdvancedEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetProvokingVertexModeEXT")==0){
                printf("Retrieving vkCmdSetProvokingVertexModeEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetProvokingVertexModeEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetLineRasterizationModeEXT")==0){
                printf("Retrieving vkCmdSetLineRasterizationModeEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetLineRasterizationModeEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetLineStippleEnableEXT")==0){
                printf("Retrieving vkCmdSetLineStippleEnableEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetLineStippleEnableEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetDepthClipNegativeOneToOneEXT")==0){
                printf("Retrieving vkCmdSetDepthClipNegativeOneToOneEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetDepthClipNegativeOneToOneEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetViewportWScalingEnableNV")==0){
                printf("Retrieving vkCmdSetViewportWScalingEnableNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetViewportWScalingEnableNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetViewportSwizzleNV")==0){
                printf("Retrieving vkCmdSetViewportSwizzleNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetViewportSwizzleNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetCoverageToColorEnableNV")==0){
                printf("Retrieving vkCmdSetCoverageToColorEnableNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetCoverageToColorEnableNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetCoverageToColorLocationNV")==0){
                printf("Retrieving vkCmdSetCoverageToColorLocationNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetCoverageToColorLocationNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetCoverageModulationModeNV")==0){
                printf("Retrieving vkCmdSetCoverageModulationModeNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetCoverageModulationModeNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetCoverageModulationTableEnableNV")==0){
                printf("Retrieving vkCmdSetCoverageModulationTableEnableNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetCoverageModulationTableEnableNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetCoverageModulationTableNV")==0){
                printf("Retrieving vkCmdSetCoverageModulationTableNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetCoverageModulationTableNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetShadingRateImageEnableNV")==0){
                printf("Retrieving vkCmdSetShadingRateImageEnableNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetShadingRateImageEnableNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetCoverageReductionModeNV")==0){
                printf("Retrieving vkCmdSetCoverageReductionModeNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetCoverageReductionModeNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetRepresentativeFragmentTestEnableNV")==0){
                printf("Retrieving vkCmdSetRepresentativeFragmentTestEnableNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetRepresentativeFragmentTestEnableNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreatePrivateDataSlot")==0){
                printf("Retrieving vkCreatePrivateDataSlot...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreatePrivateDataSlot : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreatePrivateDataSlotEXT")==0){
                printf("Retrieving vkCreatePrivateDataSlotEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreatePrivateDataSlotEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyPrivateDataSlot")==0){
                printf("Retrieving vkDestroyPrivateDataSlot...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyPrivateDataSlot : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyPrivateDataSlotEXT")==0){
                printf("Retrieving vkDestroyPrivateDataSlotEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyPrivateDataSlotEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkSetPrivateData")==0){
                printf("Retrieving vkSetPrivateData...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkSetPrivateData : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkSetPrivateDataEXT")==0){
                printf("Retrieving vkSetPrivateDataEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkSetPrivateDataEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPrivateData")==0){
                printf("Retrieving vkGetPrivateData...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPrivateData : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPrivateDataEXT")==0){
                printf("Retrieving vkGetPrivateDataEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPrivateDataEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdCopyBuffer2")==0){
                printf("Retrieving vkCmdCopyBuffer2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdCopyBuffer2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdCopyBuffer2KHR")==0){
                printf("Retrieving vkCmdCopyBuffer2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdCopyBuffer2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdCopyImage2")==0){
                printf("Retrieving vkCmdCopyImage2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdCopyImage2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdCopyImage2KHR")==0){
                printf("Retrieving vkCmdCopyImage2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdCopyImage2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBlitImage2")==0){
                printf("Retrieving vkCmdBlitImage2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBlitImage2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBlitImage2KHR")==0){
                printf("Retrieving vkCmdBlitImage2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBlitImage2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdCopyBufferToImage2")==0){
                printf("Retrieving vkCmdCopyBufferToImage2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdCopyBufferToImage2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdCopyBufferToImage2KHR")==0){
                printf("Retrieving vkCmdCopyBufferToImage2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdCopyBufferToImage2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdCopyImageToBuffer2")==0){
                printf("Retrieving vkCmdCopyImageToBuffer2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdCopyImageToBuffer2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdCopyImageToBuffer2KHR")==0){
                printf("Retrieving vkCmdCopyImageToBuffer2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdCopyImageToBuffer2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdResolveImage2")==0){
                printf("Retrieving vkCmdResolveImage2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdResolveImage2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdResolveImage2KHR")==0){
                printf("Retrieving vkCmdResolveImage2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdResolveImage2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetFragmentShadingRateKHR")==0){
                printf("Retrieving vkCmdSetFragmentShadingRateKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetFragmentShadingRateKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceFragmentShadingRatesKHR")==0){
                printf("Retrieving vkGetPhysicalDeviceFragmentShadingRatesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceFragmentShadingRatesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetFragmentShadingRateEnumNV")==0){
                printf("Retrieving vkCmdSetFragmentShadingRateEnumNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetFragmentShadingRateEnumNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetAccelerationStructureBuildSizesKHR")==0){
                printf("Retrieving vkGetAccelerationStructureBuildSizesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetAccelerationStructureBuildSizesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetVertexInputEXT")==0){
                printf("Retrieving vkCmdSetVertexInputEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetVertexInputEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetColorWriteEnableEXT")==0){
                printf("Retrieving vkCmdSetColorWriteEnableEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetColorWriteEnableEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetEvent2")==0){
                printf("Retrieving vkCmdSetEvent2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetEvent2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetEvent2KHR")==0){
                printf("Retrieving vkCmdSetEvent2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetEvent2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdResetEvent2")==0){
                printf("Retrieving vkCmdResetEvent2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdResetEvent2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdResetEvent2KHR")==0){
                printf("Retrieving vkCmdResetEvent2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdResetEvent2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdWaitEvents2")==0){
                printf("Retrieving vkCmdWaitEvents2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdWaitEvents2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdWaitEvents2KHR")==0){
                printf("Retrieving vkCmdWaitEvents2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdWaitEvents2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdPipelineBarrier2")==0){
                printf("Retrieving vkCmdPipelineBarrier2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdPipelineBarrier2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdPipelineBarrier2KHR")==0){
                printf("Retrieving vkCmdPipelineBarrier2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdPipelineBarrier2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkQueueSubmit2")==0){
                printf("Retrieving vkQueueSubmit2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkQueueSubmit2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkQueueSubmit2KHR")==0){
                printf("Retrieving vkQueueSubmit2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkQueueSubmit2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdWriteTimestamp2")==0){
                printf("Retrieving vkCmdWriteTimestamp2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdWriteTimestamp2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdWriteTimestamp2KHR")==0){
                printf("Retrieving vkCmdWriteTimestamp2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdWriteTimestamp2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdWriteBufferMarker2AMD")==0){
                printf("Retrieving vkCmdWriteBufferMarker2AMD...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdWriteBufferMarker2AMD : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetQueueCheckpointData2NV")==0){
                printf("Retrieving vkGetQueueCheckpointData2NV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetQueueCheckpointData2NV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCopyMemoryToImageEXT")==0){
                printf("Retrieving vkCopyMemoryToImageEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCopyMemoryToImageEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCopyImageToMemoryEXT")==0){
                printf("Retrieving vkCopyImageToMemoryEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCopyImageToMemoryEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCopyImageToImageEXT")==0){
                printf("Retrieving vkCopyImageToImageEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCopyImageToImageEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkTransitionImageLayoutEXT")==0){
                printf("Retrieving vkTransitionImageLayoutEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkTransitionImageLayoutEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceVideoCapabilitiesKHR")==0){
                printf("Retrieving vkGetPhysicalDeviceVideoCapabilitiesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceVideoCapabilitiesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceVideoFormatPropertiesKHR")==0){
                printf("Retrieving vkGetPhysicalDeviceVideoFormatPropertiesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceVideoFormatPropertiesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateVideoSessionKHR")==0){
                printf("Retrieving vkCreateVideoSessionKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateVideoSessionKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyVideoSessionKHR")==0){
                printf("Retrieving vkDestroyVideoSessionKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyVideoSessionKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateVideoSessionParametersKHR")==0){
                printf("Retrieving vkCreateVideoSessionParametersKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateVideoSessionParametersKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkUpdateVideoSessionParametersKHR")==0){
                printf("Retrieving vkUpdateVideoSessionParametersKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkUpdateVideoSessionParametersKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyVideoSessionParametersKHR")==0){
                printf("Retrieving vkDestroyVideoSessionParametersKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyVideoSessionParametersKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetVideoSessionMemoryRequirementsKHR")==0){
                printf("Retrieving vkGetVideoSessionMemoryRequirementsKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetVideoSessionMemoryRequirementsKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkBindVideoSessionMemoryKHR")==0){
                printf("Retrieving vkBindVideoSessionMemoryKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkBindVideoSessionMemoryKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDecodeVideoKHR")==0){
                printf("Retrieving vkCmdDecodeVideoKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDecodeVideoKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBeginVideoCodingKHR")==0){
                printf("Retrieving vkCmdBeginVideoCodingKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBeginVideoCodingKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdControlVideoCodingKHR")==0){
                printf("Retrieving vkCmdControlVideoCodingKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdControlVideoCodingKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdEndVideoCodingKHR")==0){
                printf("Retrieving vkCmdEndVideoCodingKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdEndVideoCodingKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDecompressMemoryNV")==0){
                printf("Retrieving vkCmdDecompressMemoryNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDecompressMemoryNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDecompressMemoryIndirectCountNV")==0){
                printf("Retrieving vkCmdDecompressMemoryIndirectCountNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDecompressMemoryIndirectCountNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateCuModuleNVX")==0){
                printf("Retrieving vkCreateCuModuleNVX...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateCuModuleNVX : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateCuFunctionNVX")==0){
                printf("Retrieving vkCreateCuFunctionNVX...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateCuFunctionNVX : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyCuModuleNVX")==0){
                printf("Retrieving vkDestroyCuModuleNVX...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyCuModuleNVX : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyCuFunctionNVX")==0){
                printf("Retrieving vkDestroyCuFunctionNVX...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyCuFunctionNVX : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdCuLaunchKernelNVX")==0){
                printf("Retrieving vkCmdCuLaunchKernelNVX...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdCuLaunchKernelNVX : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDescriptorSetLayoutSizeEXT")==0){
                printf("Retrieving vkGetDescriptorSetLayoutSizeEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDescriptorSetLayoutSizeEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDescriptorSetLayoutBindingOffsetEXT")==0){
                printf("Retrieving vkGetDescriptorSetLayoutBindingOffsetEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDescriptorSetLayoutBindingOffsetEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDescriptorEXT")==0){
                printf("Retrieving vkGetDescriptorEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDescriptorEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBindDescriptorBuffersEXT")==0){
                printf("Retrieving vkCmdBindDescriptorBuffersEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBindDescriptorBuffersEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetDescriptorBufferOffsetsEXT")==0){
                printf("Retrieving vkCmdSetDescriptorBufferOffsetsEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetDescriptorBufferOffsetsEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBindDescriptorBufferEmbeddedSamplersEXT")==0){
                printf("Retrieving vkCmdBindDescriptorBufferEmbeddedSamplersEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBindDescriptorBufferEmbeddedSamplersEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetBufferOpaqueCaptureDescriptorDataEXT")==0){
                printf("Retrieving vkGetBufferOpaqueCaptureDescriptorDataEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetBufferOpaqueCaptureDescriptorDataEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetImageOpaqueCaptureDescriptorDataEXT")==0){
                printf("Retrieving vkGetImageOpaqueCaptureDescriptorDataEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetImageOpaqueCaptureDescriptorDataEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetImageViewOpaqueCaptureDescriptorDataEXT")==0){
                printf("Retrieving vkGetImageViewOpaqueCaptureDescriptorDataEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetImageViewOpaqueCaptureDescriptorDataEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetSamplerOpaqueCaptureDescriptorDataEXT")==0){
                printf("Retrieving vkGetSamplerOpaqueCaptureDescriptorDataEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetSamplerOpaqueCaptureDescriptorDataEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT")==0){
                printf("Retrieving vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkSetDeviceMemoryPriorityEXT")==0){
                printf("Retrieving vkSetDeviceMemoryPriorityEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkSetDeviceMemoryPriorityEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkAcquireDrmDisplayEXT")==0){
                printf("Retrieving vkAcquireDrmDisplayEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkAcquireDrmDisplayEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDrmDisplayEXT")==0){
                printf("Retrieving vkGetDrmDisplayEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDrmDisplayEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkWaitForPresentKHR")==0){
                printf("Retrieving vkWaitForPresentKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkWaitForPresentKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBeginRendering")==0){
                printf("Retrieving vkCmdBeginRendering...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBeginRendering : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBeginRenderingKHR")==0){
                printf("Retrieving vkCmdBeginRenderingKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBeginRenderingKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdEndRendering")==0){
                printf("Retrieving vkCmdEndRendering...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdEndRendering : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdEndRenderingKHR")==0){
                printf("Retrieving vkCmdEndRenderingKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdEndRenderingKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDescriptorSetLayoutHostMappingInfoVALVE")==0){
                printf("Retrieving vkGetDescriptorSetLayoutHostMappingInfoVALVE...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDescriptorSetLayoutHostMappingInfoVALVE : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDescriptorSetHostMappingVALVE")==0){
                printf("Retrieving vkGetDescriptorSetHostMappingVALVE...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDescriptorSetHostMappingVALVE : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateMicromapEXT")==0){
                printf("Retrieving vkCreateMicromapEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateMicromapEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBuildMicromapsEXT")==0){
                printf("Retrieving vkCmdBuildMicromapsEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBuildMicromapsEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkBuildMicromapsEXT")==0){
                printf("Retrieving vkBuildMicromapsEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkBuildMicromapsEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyMicromapEXT")==0){
                printf("Retrieving vkDestroyMicromapEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyMicromapEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdCopyMicromapEXT")==0){
                printf("Retrieving vkCmdCopyMicromapEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdCopyMicromapEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCopyMicromapEXT")==0){
                printf("Retrieving vkCopyMicromapEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCopyMicromapEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdCopyMicromapToMemoryEXT")==0){
                printf("Retrieving vkCmdCopyMicromapToMemoryEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdCopyMicromapToMemoryEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCopyMicromapToMemoryEXT")==0){
                printf("Retrieving vkCopyMicromapToMemoryEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCopyMicromapToMemoryEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdCopyMemoryToMicromapEXT")==0){
                printf("Retrieving vkCmdCopyMemoryToMicromapEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdCopyMemoryToMicromapEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCopyMemoryToMicromapEXT")==0){
                printf("Retrieving vkCopyMemoryToMicromapEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCopyMemoryToMicromapEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdWriteMicromapsPropertiesEXT")==0){
                printf("Retrieving vkCmdWriteMicromapsPropertiesEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdWriteMicromapsPropertiesEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkWriteMicromapsPropertiesEXT")==0){
                printf("Retrieving vkWriteMicromapsPropertiesEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkWriteMicromapsPropertiesEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDeviceMicromapCompatibilityEXT")==0){
                printf("Retrieving vkGetDeviceMicromapCompatibilityEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDeviceMicromapCompatibilityEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetMicromapBuildSizesEXT")==0){
                printf("Retrieving vkGetMicromapBuildSizesEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetMicromapBuildSizesEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetShaderModuleIdentifierEXT")==0){
                printf("Retrieving vkGetShaderModuleIdentifierEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetShaderModuleIdentifierEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetShaderModuleCreateInfoIdentifierEXT")==0){
                printf("Retrieving vkGetShaderModuleCreateInfoIdentifierEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetShaderModuleCreateInfoIdentifierEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetImageSubresourceLayout2KHR")==0){
                printf("Retrieving vkGetImageSubresourceLayout2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetImageSubresourceLayout2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetImageSubresourceLayout2EXT")==0){
                printf("Retrieving vkGetImageSubresourceLayout2EXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetImageSubresourceLayout2EXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPipelinePropertiesEXT")==0){
                printf("Retrieving vkGetPipelinePropertiesEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPipelinePropertiesEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetFramebufferTilePropertiesQCOM")==0){
                printf("Retrieving vkGetFramebufferTilePropertiesQCOM...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetFramebufferTilePropertiesQCOM : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDynamicRenderingTilePropertiesQCOM")==0){
                printf("Retrieving vkGetDynamicRenderingTilePropertiesQCOM...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDynamicRenderingTilePropertiesQCOM : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceOpticalFlowImageFormatsNV")==0){
                printf("Retrieving vkGetPhysicalDeviceOpticalFlowImageFormatsNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceOpticalFlowImageFormatsNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateOpticalFlowSessionNV")==0){
                printf("Retrieving vkCreateOpticalFlowSessionNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateOpticalFlowSessionNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyOpticalFlowSessionNV")==0){
                printf("Retrieving vkDestroyOpticalFlowSessionNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyOpticalFlowSessionNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkBindOpticalFlowSessionImageNV")==0){
                printf("Retrieving vkBindOpticalFlowSessionImageNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkBindOpticalFlowSessionImageNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdOpticalFlowExecuteNV")==0){
                printf("Retrieving vkCmdOpticalFlowExecuteNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdOpticalFlowExecuteNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDeviceFaultInfoEXT")==0){
                printf("Retrieving vkGetDeviceFaultInfoEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDeviceFaultInfoEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetDepthBias2EXT")==0){
                printf("Retrieving vkCmdSetDepthBias2EXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetDepthBias2EXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkReleaseSwapchainImagesEXT")==0){
                printf("Retrieving vkReleaseSwapchainImagesEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkReleaseSwapchainImagesEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDeviceImageSubresourceLayoutKHR")==0){
                printf("Retrieving vkGetDeviceImageSubresourceLayoutKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDeviceImageSubresourceLayoutKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkMapMemory2KHR")==0){
                printf("Retrieving vkMapMemory2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkMapMemory2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkUnmapMemory2KHR")==0){
                printf("Retrieving vkUnmapMemory2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkUnmapMemory2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateShadersEXT")==0){
                printf("Retrieving vkCreateShadersEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateShadersEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyShaderEXT")==0){
                printf("Retrieving vkDestroyShaderEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyShaderEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetShaderBinaryDataEXT")==0){
                printf("Retrieving vkGetShaderBinaryDataEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetShaderBinaryDataEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBindShadersEXT")==0){
                printf("Retrieving vkCmdBindShadersEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBindShadersEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR")==0){
                printf("Retrieving vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR : NULL; //We keep track of dispatch separately
            }
            

            else {
                printf("%s\n",(std::string("Unknown function: ")+pName).c_str());
                return_value=NULL;
            }
        
return return_value;
}
PFN_vkVoidFunction vkGetInstanceProcAddr(
VkInstance instance,
 const char* pName
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetInstanceProcAddr";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)instance];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["instance"]=[&]() {
    json return_uDnIwUL=json({});
    return serialize_VkInstance(instance);}();
data_json["members"]["pName"]=[&]() {
    json return_UtWldLN=json({});
    
        if (pName==NULL){
            return_UtWldLN["null"]=true;
            return return_UtWldLN;
        }
        return serialize_char_p(pName);
}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
instance=deserialize_VkInstance(result["members"]["instance"]);}();

PFN_vkVoidFunction return_value;

        if (false){
        }
        

            else if (strcmp(pName,"vkCreateInstance")==0){
                printf("Retrieving vkCreateInstance...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateInstance : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyInstance")==0){
                printf("Retrieving vkDestroyInstance...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyInstance : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkEnumeratePhysicalDevices")==0){
                printf("Retrieving vkEnumeratePhysicalDevices...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkEnumeratePhysicalDevices : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDeviceProcAddr")==0){
                printf("Retrieving vkGetDeviceProcAddr...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDeviceProcAddr : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetInstanceProcAddr")==0){
                printf("Retrieving vkGetInstanceProcAddr...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetInstanceProcAddr : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceProperties")==0){
                printf("Retrieving vkGetPhysicalDeviceProperties...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceProperties : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceQueueFamilyProperties")==0){
                printf("Retrieving vkGetPhysicalDeviceQueueFamilyProperties...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceQueueFamilyProperties : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceMemoryProperties")==0){
                printf("Retrieving vkGetPhysicalDeviceMemoryProperties...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceMemoryProperties : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceFeatures")==0){
                printf("Retrieving vkGetPhysicalDeviceFeatures...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceFeatures : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceFormatProperties")==0){
                printf("Retrieving vkGetPhysicalDeviceFormatProperties...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceFormatProperties : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceImageFormatProperties")==0){
                printf("Retrieving vkGetPhysicalDeviceImageFormatProperties...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceImageFormatProperties : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateDevice")==0){
                printf("Retrieving vkCreateDevice...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateDevice : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyDevice")==0){
                printf("Retrieving vkDestroyDevice...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyDevice : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkEnumerateInstanceVersion")==0){
                printf("Retrieving vkEnumerateInstanceVersion...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkEnumerateInstanceVersion : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkEnumerateInstanceLayerProperties")==0){
                printf("Retrieving vkEnumerateInstanceLayerProperties...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkEnumerateInstanceLayerProperties : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkEnumerateInstanceExtensionProperties")==0){
                printf("Retrieving vkEnumerateInstanceExtensionProperties...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkEnumerateInstanceExtensionProperties : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkEnumerateDeviceLayerProperties")==0){
                printf("Retrieving vkEnumerateDeviceLayerProperties...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkEnumerateDeviceLayerProperties : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkEnumerateDeviceExtensionProperties")==0){
                printf("Retrieving vkEnumerateDeviceExtensionProperties...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkEnumerateDeviceExtensionProperties : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDeviceQueue")==0){
                printf("Retrieving vkGetDeviceQueue...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDeviceQueue : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkQueueSubmit")==0){
                printf("Retrieving vkQueueSubmit...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkQueueSubmit : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkQueueWaitIdle")==0){
                printf("Retrieving vkQueueWaitIdle...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkQueueWaitIdle : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDeviceWaitIdle")==0){
                printf("Retrieving vkDeviceWaitIdle...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDeviceWaitIdle : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkAllocateMemory")==0){
                printf("Retrieving vkAllocateMemory...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkAllocateMemory : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkFreeMemory")==0){
                printf("Retrieving vkFreeMemory...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkFreeMemory : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkMapMemory")==0){
                printf("Retrieving vkMapMemory...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkMapMemory : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkUnmapMemory")==0){
                printf("Retrieving vkUnmapMemory...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkUnmapMemory : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkFlushMappedMemoryRanges")==0){
                printf("Retrieving vkFlushMappedMemoryRanges...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkFlushMappedMemoryRanges : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkInvalidateMappedMemoryRanges")==0){
                printf("Retrieving vkInvalidateMappedMemoryRanges...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkInvalidateMappedMemoryRanges : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDeviceMemoryCommitment")==0){
                printf("Retrieving vkGetDeviceMemoryCommitment...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDeviceMemoryCommitment : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetBufferMemoryRequirements")==0){
                printf("Retrieving vkGetBufferMemoryRequirements...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetBufferMemoryRequirements : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkBindBufferMemory")==0){
                printf("Retrieving vkBindBufferMemory...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkBindBufferMemory : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetImageMemoryRequirements")==0){
                printf("Retrieving vkGetImageMemoryRequirements...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetImageMemoryRequirements : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkBindImageMemory")==0){
                printf("Retrieving vkBindImageMemory...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkBindImageMemory : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetImageSparseMemoryRequirements")==0){
                printf("Retrieving vkGetImageSparseMemoryRequirements...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetImageSparseMemoryRequirements : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceSparseImageFormatProperties")==0){
                printf("Retrieving vkGetPhysicalDeviceSparseImageFormatProperties...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceSparseImageFormatProperties : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkQueueBindSparse")==0){
                printf("Retrieving vkQueueBindSparse...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkQueueBindSparse : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateFence")==0){
                printf("Retrieving vkCreateFence...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateFence : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyFence")==0){
                printf("Retrieving vkDestroyFence...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyFence : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkResetFences")==0){
                printf("Retrieving vkResetFences...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkResetFences : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetFenceStatus")==0){
                printf("Retrieving vkGetFenceStatus...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetFenceStatus : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkWaitForFences")==0){
                printf("Retrieving vkWaitForFences...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkWaitForFences : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateSemaphore")==0){
                printf("Retrieving vkCreateSemaphore...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateSemaphore : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroySemaphore")==0){
                printf("Retrieving vkDestroySemaphore...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroySemaphore : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateEvent")==0){
                printf("Retrieving vkCreateEvent...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateEvent : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyEvent")==0){
                printf("Retrieving vkDestroyEvent...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyEvent : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetEventStatus")==0){
                printf("Retrieving vkGetEventStatus...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetEventStatus : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkSetEvent")==0){
                printf("Retrieving vkSetEvent...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkSetEvent : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkResetEvent")==0){
                printf("Retrieving vkResetEvent...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkResetEvent : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateQueryPool")==0){
                printf("Retrieving vkCreateQueryPool...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateQueryPool : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyQueryPool")==0){
                printf("Retrieving vkDestroyQueryPool...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyQueryPool : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetQueryPoolResults")==0){
                printf("Retrieving vkGetQueryPoolResults...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetQueryPoolResults : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkResetQueryPool")==0){
                printf("Retrieving vkResetQueryPool...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkResetQueryPool : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkResetQueryPoolEXT")==0){
                printf("Retrieving vkResetQueryPoolEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkResetQueryPoolEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateBuffer")==0){
                printf("Retrieving vkCreateBuffer...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateBuffer : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyBuffer")==0){
                printf("Retrieving vkDestroyBuffer...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyBuffer : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateBufferView")==0){
                printf("Retrieving vkCreateBufferView...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateBufferView : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyBufferView")==0){
                printf("Retrieving vkDestroyBufferView...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyBufferView : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateImage")==0){
                printf("Retrieving vkCreateImage...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateImage : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyImage")==0){
                printf("Retrieving vkDestroyImage...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyImage : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetImageSubresourceLayout")==0){
                printf("Retrieving vkGetImageSubresourceLayout...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetImageSubresourceLayout : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateImageView")==0){
                printf("Retrieving vkCreateImageView...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateImageView : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyImageView")==0){
                printf("Retrieving vkDestroyImageView...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyImageView : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateShaderModule")==0){
                printf("Retrieving vkCreateShaderModule...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateShaderModule : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyShaderModule")==0){
                printf("Retrieving vkDestroyShaderModule...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyShaderModule : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreatePipelineCache")==0){
                printf("Retrieving vkCreatePipelineCache...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreatePipelineCache : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyPipelineCache")==0){
                printf("Retrieving vkDestroyPipelineCache...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyPipelineCache : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPipelineCacheData")==0){
                printf("Retrieving vkGetPipelineCacheData...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPipelineCacheData : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkMergePipelineCaches")==0){
                printf("Retrieving vkMergePipelineCaches...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkMergePipelineCaches : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateGraphicsPipelines")==0){
                printf("Retrieving vkCreateGraphicsPipelines...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateGraphicsPipelines : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateComputePipelines")==0){
                printf("Retrieving vkCreateComputePipelines...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateComputePipelines : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI")==0){
                printf("Retrieving vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyPipeline")==0){
                printf("Retrieving vkDestroyPipeline...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyPipeline : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreatePipelineLayout")==0){
                printf("Retrieving vkCreatePipelineLayout...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreatePipelineLayout : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyPipelineLayout")==0){
                printf("Retrieving vkDestroyPipelineLayout...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyPipelineLayout : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateSampler")==0){
                printf("Retrieving vkCreateSampler...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateSampler : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroySampler")==0){
                printf("Retrieving vkDestroySampler...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroySampler : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateDescriptorSetLayout")==0){
                printf("Retrieving vkCreateDescriptorSetLayout...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateDescriptorSetLayout : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyDescriptorSetLayout")==0){
                printf("Retrieving vkDestroyDescriptorSetLayout...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyDescriptorSetLayout : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateDescriptorPool")==0){
                printf("Retrieving vkCreateDescriptorPool...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateDescriptorPool : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyDescriptorPool")==0){
                printf("Retrieving vkDestroyDescriptorPool...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyDescriptorPool : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkResetDescriptorPool")==0){
                printf("Retrieving vkResetDescriptorPool...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkResetDescriptorPool : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkAllocateDescriptorSets")==0){
                printf("Retrieving vkAllocateDescriptorSets...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkAllocateDescriptorSets : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkFreeDescriptorSets")==0){
                printf("Retrieving vkFreeDescriptorSets...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkFreeDescriptorSets : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkUpdateDescriptorSets")==0){
                printf("Retrieving vkUpdateDescriptorSets...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkUpdateDescriptorSets : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateFramebuffer")==0){
                printf("Retrieving vkCreateFramebuffer...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateFramebuffer : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyFramebuffer")==0){
                printf("Retrieving vkDestroyFramebuffer...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyFramebuffer : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateRenderPass")==0){
                printf("Retrieving vkCreateRenderPass...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateRenderPass : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyRenderPass")==0){
                printf("Retrieving vkDestroyRenderPass...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyRenderPass : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetRenderAreaGranularity")==0){
                printf("Retrieving vkGetRenderAreaGranularity...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetRenderAreaGranularity : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetRenderingAreaGranularityKHR")==0){
                printf("Retrieving vkGetRenderingAreaGranularityKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetRenderingAreaGranularityKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateCommandPool")==0){
                printf("Retrieving vkCreateCommandPool...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateCommandPool : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyCommandPool")==0){
                printf("Retrieving vkDestroyCommandPool...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyCommandPool : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkResetCommandPool")==0){
                printf("Retrieving vkResetCommandPool...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkResetCommandPool : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkAllocateCommandBuffers")==0){
                printf("Retrieving vkAllocateCommandBuffers...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkAllocateCommandBuffers : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkFreeCommandBuffers")==0){
                printf("Retrieving vkFreeCommandBuffers...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkFreeCommandBuffers : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkBeginCommandBuffer")==0){
                printf("Retrieving vkBeginCommandBuffer...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkBeginCommandBuffer : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkEndCommandBuffer")==0){
                printf("Retrieving vkEndCommandBuffer...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkEndCommandBuffer : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkResetCommandBuffer")==0){
                printf("Retrieving vkResetCommandBuffer...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkResetCommandBuffer : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBindPipeline")==0){
                printf("Retrieving vkCmdBindPipeline...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBindPipeline : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetAttachmentFeedbackLoopEnableEXT")==0){
                printf("Retrieving vkCmdSetAttachmentFeedbackLoopEnableEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetAttachmentFeedbackLoopEnableEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetViewport")==0){
                printf("Retrieving vkCmdSetViewport...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetViewport : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetScissor")==0){
                printf("Retrieving vkCmdSetScissor...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetScissor : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetLineWidth")==0){
                printf("Retrieving vkCmdSetLineWidth...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetLineWidth : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetDepthBias")==0){
                printf("Retrieving vkCmdSetDepthBias...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetDepthBias : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetBlendConstants")==0){
                printf("Retrieving vkCmdSetBlendConstants...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetBlendConstants : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetDepthBounds")==0){
                printf("Retrieving vkCmdSetDepthBounds...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetDepthBounds : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetStencilCompareMask")==0){
                printf("Retrieving vkCmdSetStencilCompareMask...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetStencilCompareMask : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetStencilWriteMask")==0){
                printf("Retrieving vkCmdSetStencilWriteMask...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetStencilWriteMask : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetStencilReference")==0){
                printf("Retrieving vkCmdSetStencilReference...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetStencilReference : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBindDescriptorSets")==0){
                printf("Retrieving vkCmdBindDescriptorSets...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBindDescriptorSets : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBindIndexBuffer")==0){
                printf("Retrieving vkCmdBindIndexBuffer...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBindIndexBuffer : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBindVertexBuffers")==0){
                printf("Retrieving vkCmdBindVertexBuffers...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBindVertexBuffers : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDraw")==0){
                printf("Retrieving vkCmdDraw...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDraw : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDrawIndexed")==0){
                printf("Retrieving vkCmdDrawIndexed...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDrawIndexed : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDrawMultiEXT")==0){
                printf("Retrieving vkCmdDrawMultiEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDrawMultiEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDrawMultiIndexedEXT")==0){
                printf("Retrieving vkCmdDrawMultiIndexedEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDrawMultiIndexedEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDrawIndirect")==0){
                printf("Retrieving vkCmdDrawIndirect...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDrawIndirect : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDrawIndexedIndirect")==0){
                printf("Retrieving vkCmdDrawIndexedIndirect...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDrawIndexedIndirect : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDispatch")==0){
                printf("Retrieving vkCmdDispatch...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDispatch : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDispatchIndirect")==0){
                printf("Retrieving vkCmdDispatchIndirect...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDispatchIndirect : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSubpassShadingHUAWEI")==0){
                printf("Retrieving vkCmdSubpassShadingHUAWEI...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSubpassShadingHUAWEI : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDrawClusterHUAWEI")==0){
                printf("Retrieving vkCmdDrawClusterHUAWEI...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDrawClusterHUAWEI : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDrawClusterIndirectHUAWEI")==0){
                printf("Retrieving vkCmdDrawClusterIndirectHUAWEI...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDrawClusterIndirectHUAWEI : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdUpdatePipelineIndirectBufferNV")==0){
                printf("Retrieving vkCmdUpdatePipelineIndirectBufferNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdUpdatePipelineIndirectBufferNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdCopyBuffer")==0){
                printf("Retrieving vkCmdCopyBuffer...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdCopyBuffer : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdCopyImage")==0){
                printf("Retrieving vkCmdCopyImage...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdCopyImage : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBlitImage")==0){
                printf("Retrieving vkCmdBlitImage...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBlitImage : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdCopyBufferToImage")==0){
                printf("Retrieving vkCmdCopyBufferToImage...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdCopyBufferToImage : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdCopyImageToBuffer")==0){
                printf("Retrieving vkCmdCopyImageToBuffer...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdCopyImageToBuffer : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdCopyMemoryIndirectNV")==0){
                printf("Retrieving vkCmdCopyMemoryIndirectNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdCopyMemoryIndirectNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdCopyMemoryToImageIndirectNV")==0){
                printf("Retrieving vkCmdCopyMemoryToImageIndirectNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdCopyMemoryToImageIndirectNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdUpdateBuffer")==0){
                printf("Retrieving vkCmdUpdateBuffer...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdUpdateBuffer : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdFillBuffer")==0){
                printf("Retrieving vkCmdFillBuffer...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdFillBuffer : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdClearColorImage")==0){
                printf("Retrieving vkCmdClearColorImage...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdClearColorImage : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdClearDepthStencilImage")==0){
                printf("Retrieving vkCmdClearDepthStencilImage...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdClearDepthStencilImage : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdClearAttachments")==0){
                printf("Retrieving vkCmdClearAttachments...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdClearAttachments : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdResolveImage")==0){
                printf("Retrieving vkCmdResolveImage...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdResolveImage : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetEvent")==0){
                printf("Retrieving vkCmdSetEvent...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetEvent : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdResetEvent")==0){
                printf("Retrieving vkCmdResetEvent...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdResetEvent : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdWaitEvents")==0){
                printf("Retrieving vkCmdWaitEvents...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdWaitEvents : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdPipelineBarrier")==0){
                printf("Retrieving vkCmdPipelineBarrier...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdPipelineBarrier : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBeginQuery")==0){
                printf("Retrieving vkCmdBeginQuery...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBeginQuery : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdEndQuery")==0){
                printf("Retrieving vkCmdEndQuery...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdEndQuery : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBeginConditionalRenderingEXT")==0){
                printf("Retrieving vkCmdBeginConditionalRenderingEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBeginConditionalRenderingEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdEndConditionalRenderingEXT")==0){
                printf("Retrieving vkCmdEndConditionalRenderingEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdEndConditionalRenderingEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdResetQueryPool")==0){
                printf("Retrieving vkCmdResetQueryPool...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdResetQueryPool : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdWriteTimestamp")==0){
                printf("Retrieving vkCmdWriteTimestamp...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdWriteTimestamp : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdCopyQueryPoolResults")==0){
                printf("Retrieving vkCmdCopyQueryPoolResults...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdCopyQueryPoolResults : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdPushConstants")==0){
                printf("Retrieving vkCmdPushConstants...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdPushConstants : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBeginRenderPass")==0){
                printf("Retrieving vkCmdBeginRenderPass...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBeginRenderPass : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdNextSubpass")==0){
                printf("Retrieving vkCmdNextSubpass...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdNextSubpass : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdEndRenderPass")==0){
                printf("Retrieving vkCmdEndRenderPass...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdEndRenderPass : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdExecuteCommands")==0){
                printf("Retrieving vkCmdExecuteCommands...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdExecuteCommands : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceDisplayPropertiesKHR")==0){
                printf("Retrieving vkGetPhysicalDeviceDisplayPropertiesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceDisplayPropertiesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceDisplayPlanePropertiesKHR")==0){
                printf("Retrieving vkGetPhysicalDeviceDisplayPlanePropertiesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceDisplayPlanePropertiesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDisplayPlaneSupportedDisplaysKHR")==0){
                printf("Retrieving vkGetDisplayPlaneSupportedDisplaysKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDisplayPlaneSupportedDisplaysKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDisplayModePropertiesKHR")==0){
                printf("Retrieving vkGetDisplayModePropertiesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDisplayModePropertiesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateDisplayModeKHR")==0){
                printf("Retrieving vkCreateDisplayModeKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateDisplayModeKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDisplayPlaneCapabilitiesKHR")==0){
                printf("Retrieving vkGetDisplayPlaneCapabilitiesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDisplayPlaneCapabilitiesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateDisplayPlaneSurfaceKHR")==0){
                printf("Retrieving vkCreateDisplayPlaneSurfaceKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateDisplayPlaneSurfaceKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateSharedSwapchainsKHR")==0){
                printf("Retrieving vkCreateSharedSwapchainsKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateSharedSwapchainsKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroySurfaceKHR")==0){
                printf("Retrieving vkDestroySurfaceKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroySurfaceKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceSurfaceSupportKHR")==0){
                printf("Retrieving vkGetPhysicalDeviceSurfaceSupportKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceSurfaceSupportKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceSurfaceCapabilitiesKHR")==0){
                printf("Retrieving vkGetPhysicalDeviceSurfaceCapabilitiesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceSurfaceCapabilitiesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceSurfaceFormatsKHR")==0){
                printf("Retrieving vkGetPhysicalDeviceSurfaceFormatsKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceSurfaceFormatsKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceSurfacePresentModesKHR")==0){
                printf("Retrieving vkGetPhysicalDeviceSurfacePresentModesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceSurfacePresentModesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateSwapchainKHR")==0){
                printf("Retrieving vkCreateSwapchainKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateSwapchainKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroySwapchainKHR")==0){
                printf("Retrieving vkDestroySwapchainKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroySwapchainKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetSwapchainImagesKHR")==0){
                printf("Retrieving vkGetSwapchainImagesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetSwapchainImagesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkAcquireNextImageKHR")==0){
                printf("Retrieving vkAcquireNextImageKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkAcquireNextImageKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkQueuePresentKHR")==0){
                printf("Retrieving vkQueuePresentKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkQueuePresentKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateXlibSurfaceKHR")==0){
                printf("Retrieving vkCreateXlibSurfaceKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateXlibSurfaceKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceXlibPresentationSupportKHR")==0){
                printf("Retrieving vkGetPhysicalDeviceXlibPresentationSupportKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceXlibPresentationSupportKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateXcbSurfaceKHR")==0){
                printf("Retrieving vkCreateXcbSurfaceKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateXcbSurfaceKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceXcbPresentationSupportKHR")==0){
                printf("Retrieving vkGetPhysicalDeviceXcbPresentationSupportKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceXcbPresentationSupportKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateDebugReportCallbackEXT")==0){
                printf("Retrieving vkCreateDebugReportCallbackEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateDebugReportCallbackEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyDebugReportCallbackEXT")==0){
                printf("Retrieving vkDestroyDebugReportCallbackEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyDebugReportCallbackEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDebugReportMessageEXT")==0){
                printf("Retrieving vkDebugReportMessageEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDebugReportMessageEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDebugMarkerSetObjectNameEXT")==0){
                printf("Retrieving vkDebugMarkerSetObjectNameEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDebugMarkerSetObjectNameEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDebugMarkerSetObjectTagEXT")==0){
                printf("Retrieving vkDebugMarkerSetObjectTagEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDebugMarkerSetObjectTagEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDebugMarkerBeginEXT")==0){
                printf("Retrieving vkCmdDebugMarkerBeginEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDebugMarkerBeginEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDebugMarkerEndEXT")==0){
                printf("Retrieving vkCmdDebugMarkerEndEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDebugMarkerEndEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDebugMarkerInsertEXT")==0){
                printf("Retrieving vkCmdDebugMarkerInsertEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDebugMarkerInsertEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceExternalImageFormatPropertiesNV")==0){
                printf("Retrieving vkGetPhysicalDeviceExternalImageFormatPropertiesNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceExternalImageFormatPropertiesNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdExecuteGeneratedCommandsNV")==0){
                printf("Retrieving vkCmdExecuteGeneratedCommandsNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdExecuteGeneratedCommandsNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdPreprocessGeneratedCommandsNV")==0){
                printf("Retrieving vkCmdPreprocessGeneratedCommandsNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdPreprocessGeneratedCommandsNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBindPipelineShaderGroupNV")==0){
                printf("Retrieving vkCmdBindPipelineShaderGroupNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBindPipelineShaderGroupNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetGeneratedCommandsMemoryRequirementsNV")==0){
                printf("Retrieving vkGetGeneratedCommandsMemoryRequirementsNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetGeneratedCommandsMemoryRequirementsNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateIndirectCommandsLayoutNV")==0){
                printf("Retrieving vkCreateIndirectCommandsLayoutNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateIndirectCommandsLayoutNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyIndirectCommandsLayoutNV")==0){
                printf("Retrieving vkDestroyIndirectCommandsLayoutNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyIndirectCommandsLayoutNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceFeatures2")==0){
                printf("Retrieving vkGetPhysicalDeviceFeatures2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceFeatures2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceFeatures2KHR")==0){
                printf("Retrieving vkGetPhysicalDeviceFeatures2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceFeatures2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceProperties2")==0){
                printf("Retrieving vkGetPhysicalDeviceProperties2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceProperties2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceProperties2KHR")==0){
                printf("Retrieving vkGetPhysicalDeviceProperties2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceProperties2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceFormatProperties2")==0){
                printf("Retrieving vkGetPhysicalDeviceFormatProperties2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceFormatProperties2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceFormatProperties2KHR")==0){
                printf("Retrieving vkGetPhysicalDeviceFormatProperties2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceFormatProperties2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceImageFormatProperties2")==0){
                printf("Retrieving vkGetPhysicalDeviceImageFormatProperties2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceImageFormatProperties2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceImageFormatProperties2KHR")==0){
                printf("Retrieving vkGetPhysicalDeviceImageFormatProperties2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceImageFormatProperties2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceQueueFamilyProperties2")==0){
                printf("Retrieving vkGetPhysicalDeviceQueueFamilyProperties2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceQueueFamilyProperties2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceQueueFamilyProperties2KHR")==0){
                printf("Retrieving vkGetPhysicalDeviceQueueFamilyProperties2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceQueueFamilyProperties2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceMemoryProperties2")==0){
                printf("Retrieving vkGetPhysicalDeviceMemoryProperties2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceMemoryProperties2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceMemoryProperties2KHR")==0){
                printf("Retrieving vkGetPhysicalDeviceMemoryProperties2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceMemoryProperties2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceSparseImageFormatProperties2")==0){
                printf("Retrieving vkGetPhysicalDeviceSparseImageFormatProperties2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceSparseImageFormatProperties2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceSparseImageFormatProperties2KHR")==0){
                printf("Retrieving vkGetPhysicalDeviceSparseImageFormatProperties2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceSparseImageFormatProperties2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdPushDescriptorSetKHR")==0){
                printf("Retrieving vkCmdPushDescriptorSetKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdPushDescriptorSetKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkTrimCommandPool")==0){
                printf("Retrieving vkTrimCommandPool...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkTrimCommandPool : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkTrimCommandPoolKHR")==0){
                printf("Retrieving vkTrimCommandPoolKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkTrimCommandPoolKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceExternalBufferProperties")==0){
                printf("Retrieving vkGetPhysicalDeviceExternalBufferProperties...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceExternalBufferProperties : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceExternalBufferPropertiesKHR")==0){
                printf("Retrieving vkGetPhysicalDeviceExternalBufferPropertiesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceExternalBufferPropertiesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetMemoryFdKHR")==0){
                printf("Retrieving vkGetMemoryFdKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetMemoryFdKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetMemoryFdPropertiesKHR")==0){
                printf("Retrieving vkGetMemoryFdPropertiesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetMemoryFdPropertiesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetMemoryRemoteAddressNV")==0){
                printf("Retrieving vkGetMemoryRemoteAddressNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetMemoryRemoteAddressNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceExternalSemaphoreProperties")==0){
                printf("Retrieving vkGetPhysicalDeviceExternalSemaphoreProperties...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceExternalSemaphoreProperties : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceExternalSemaphorePropertiesKHR")==0){
                printf("Retrieving vkGetPhysicalDeviceExternalSemaphorePropertiesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceExternalSemaphorePropertiesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetSemaphoreFdKHR")==0){
                printf("Retrieving vkGetSemaphoreFdKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetSemaphoreFdKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkImportSemaphoreFdKHR")==0){
                printf("Retrieving vkImportSemaphoreFdKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkImportSemaphoreFdKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceExternalFenceProperties")==0){
                printf("Retrieving vkGetPhysicalDeviceExternalFenceProperties...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceExternalFenceProperties : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceExternalFencePropertiesKHR")==0){
                printf("Retrieving vkGetPhysicalDeviceExternalFencePropertiesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceExternalFencePropertiesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetFenceFdKHR")==0){
                printf("Retrieving vkGetFenceFdKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetFenceFdKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkImportFenceFdKHR")==0){
                printf("Retrieving vkImportFenceFdKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkImportFenceFdKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkReleaseDisplayEXT")==0){
                printf("Retrieving vkReleaseDisplayEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkReleaseDisplayEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDisplayPowerControlEXT")==0){
                printf("Retrieving vkDisplayPowerControlEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDisplayPowerControlEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkRegisterDeviceEventEXT")==0){
                printf("Retrieving vkRegisterDeviceEventEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkRegisterDeviceEventEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkRegisterDisplayEventEXT")==0){
                printf("Retrieving vkRegisterDisplayEventEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkRegisterDisplayEventEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetSwapchainCounterEXT")==0){
                printf("Retrieving vkGetSwapchainCounterEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetSwapchainCounterEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceSurfaceCapabilities2EXT")==0){
                printf("Retrieving vkGetPhysicalDeviceSurfaceCapabilities2EXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceSurfaceCapabilities2EXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkEnumeratePhysicalDeviceGroups")==0){
                printf("Retrieving vkEnumeratePhysicalDeviceGroups...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkEnumeratePhysicalDeviceGroups : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkEnumeratePhysicalDeviceGroupsKHR")==0){
                printf("Retrieving vkEnumeratePhysicalDeviceGroupsKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkEnumeratePhysicalDeviceGroupsKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDeviceGroupPeerMemoryFeatures")==0){
                printf("Retrieving vkGetDeviceGroupPeerMemoryFeatures...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDeviceGroupPeerMemoryFeatures : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDeviceGroupPeerMemoryFeaturesKHR")==0){
                printf("Retrieving vkGetDeviceGroupPeerMemoryFeaturesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDeviceGroupPeerMemoryFeaturesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkBindBufferMemory2")==0){
                printf("Retrieving vkBindBufferMemory2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkBindBufferMemory2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkBindBufferMemory2KHR")==0){
                printf("Retrieving vkBindBufferMemory2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkBindBufferMemory2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkBindImageMemory2")==0){
                printf("Retrieving vkBindImageMemory2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkBindImageMemory2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkBindImageMemory2KHR")==0){
                printf("Retrieving vkBindImageMemory2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkBindImageMemory2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetDeviceMask")==0){
                printf("Retrieving vkCmdSetDeviceMask...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetDeviceMask : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetDeviceMaskKHR")==0){
                printf("Retrieving vkCmdSetDeviceMaskKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetDeviceMaskKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDeviceGroupPresentCapabilitiesKHR")==0){
                printf("Retrieving vkGetDeviceGroupPresentCapabilitiesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDeviceGroupPresentCapabilitiesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDeviceGroupSurfacePresentModesKHR")==0){
                printf("Retrieving vkGetDeviceGroupSurfacePresentModesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDeviceGroupSurfacePresentModesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkAcquireNextImage2KHR")==0){
                printf("Retrieving vkAcquireNextImage2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkAcquireNextImage2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDispatchBase")==0){
                printf("Retrieving vkCmdDispatchBase...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDispatchBase : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDispatchBaseKHR")==0){
                printf("Retrieving vkCmdDispatchBaseKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDispatchBaseKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDevicePresentRectanglesKHR")==0){
                printf("Retrieving vkGetPhysicalDevicePresentRectanglesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDevicePresentRectanglesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateDescriptorUpdateTemplate")==0){
                printf("Retrieving vkCreateDescriptorUpdateTemplate...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateDescriptorUpdateTemplate : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateDescriptorUpdateTemplateKHR")==0){
                printf("Retrieving vkCreateDescriptorUpdateTemplateKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateDescriptorUpdateTemplateKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyDescriptorUpdateTemplate")==0){
                printf("Retrieving vkDestroyDescriptorUpdateTemplate...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyDescriptorUpdateTemplate : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyDescriptorUpdateTemplateKHR")==0){
                printf("Retrieving vkDestroyDescriptorUpdateTemplateKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyDescriptorUpdateTemplateKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkUpdateDescriptorSetWithTemplate")==0){
                printf("Retrieving vkUpdateDescriptorSetWithTemplate...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkUpdateDescriptorSetWithTemplate : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkUpdateDescriptorSetWithTemplateKHR")==0){
                printf("Retrieving vkUpdateDescriptorSetWithTemplateKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkUpdateDescriptorSetWithTemplateKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdPushDescriptorSetWithTemplateKHR")==0){
                printf("Retrieving vkCmdPushDescriptorSetWithTemplateKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdPushDescriptorSetWithTemplateKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkSetHdrMetadataEXT")==0){
                printf("Retrieving vkSetHdrMetadataEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkSetHdrMetadataEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetSwapchainStatusKHR")==0){
                printf("Retrieving vkGetSwapchainStatusKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetSwapchainStatusKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetRefreshCycleDurationGOOGLE")==0){
                printf("Retrieving vkGetRefreshCycleDurationGOOGLE...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetRefreshCycleDurationGOOGLE : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPastPresentationTimingGOOGLE")==0){
                printf("Retrieving vkGetPastPresentationTimingGOOGLE...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPastPresentationTimingGOOGLE : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetViewportWScalingNV")==0){
                printf("Retrieving vkCmdSetViewportWScalingNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetViewportWScalingNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetDiscardRectangleEXT")==0){
                printf("Retrieving vkCmdSetDiscardRectangleEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetDiscardRectangleEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetDiscardRectangleEnableEXT")==0){
                printf("Retrieving vkCmdSetDiscardRectangleEnableEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetDiscardRectangleEnableEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetDiscardRectangleModeEXT")==0){
                printf("Retrieving vkCmdSetDiscardRectangleModeEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetDiscardRectangleModeEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetSampleLocationsEXT")==0){
                printf("Retrieving vkCmdSetSampleLocationsEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetSampleLocationsEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceMultisamplePropertiesEXT")==0){
                printf("Retrieving vkGetPhysicalDeviceMultisamplePropertiesEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceMultisamplePropertiesEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceSurfaceCapabilities2KHR")==0){
                printf("Retrieving vkGetPhysicalDeviceSurfaceCapabilities2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceSurfaceCapabilities2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceSurfaceFormats2KHR")==0){
                printf("Retrieving vkGetPhysicalDeviceSurfaceFormats2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceSurfaceFormats2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceDisplayProperties2KHR")==0){
                printf("Retrieving vkGetPhysicalDeviceDisplayProperties2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceDisplayProperties2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceDisplayPlaneProperties2KHR")==0){
                printf("Retrieving vkGetPhysicalDeviceDisplayPlaneProperties2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceDisplayPlaneProperties2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDisplayModeProperties2KHR")==0){
                printf("Retrieving vkGetDisplayModeProperties2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDisplayModeProperties2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDisplayPlaneCapabilities2KHR")==0){
                printf("Retrieving vkGetDisplayPlaneCapabilities2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDisplayPlaneCapabilities2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetBufferMemoryRequirements2")==0){
                printf("Retrieving vkGetBufferMemoryRequirements2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetBufferMemoryRequirements2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetBufferMemoryRequirements2KHR")==0){
                printf("Retrieving vkGetBufferMemoryRequirements2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetBufferMemoryRequirements2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetImageMemoryRequirements2")==0){
                printf("Retrieving vkGetImageMemoryRequirements2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetImageMemoryRequirements2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetImageMemoryRequirements2KHR")==0){
                printf("Retrieving vkGetImageMemoryRequirements2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetImageMemoryRequirements2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetImageSparseMemoryRequirements2")==0){
                printf("Retrieving vkGetImageSparseMemoryRequirements2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetImageSparseMemoryRequirements2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetImageSparseMemoryRequirements2KHR")==0){
                printf("Retrieving vkGetImageSparseMemoryRequirements2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetImageSparseMemoryRequirements2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDeviceBufferMemoryRequirements")==0){
                printf("Retrieving vkGetDeviceBufferMemoryRequirements...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDeviceBufferMemoryRequirements : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDeviceBufferMemoryRequirementsKHR")==0){
                printf("Retrieving vkGetDeviceBufferMemoryRequirementsKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDeviceBufferMemoryRequirementsKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDeviceImageMemoryRequirements")==0){
                printf("Retrieving vkGetDeviceImageMemoryRequirements...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDeviceImageMemoryRequirements : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDeviceImageMemoryRequirementsKHR")==0){
                printf("Retrieving vkGetDeviceImageMemoryRequirementsKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDeviceImageMemoryRequirementsKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDeviceImageSparseMemoryRequirements")==0){
                printf("Retrieving vkGetDeviceImageSparseMemoryRequirements...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDeviceImageSparseMemoryRequirements : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDeviceImageSparseMemoryRequirementsKHR")==0){
                printf("Retrieving vkGetDeviceImageSparseMemoryRequirementsKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDeviceImageSparseMemoryRequirementsKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateSamplerYcbcrConversion")==0){
                printf("Retrieving vkCreateSamplerYcbcrConversion...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateSamplerYcbcrConversion : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateSamplerYcbcrConversionKHR")==0){
                printf("Retrieving vkCreateSamplerYcbcrConversionKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateSamplerYcbcrConversionKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroySamplerYcbcrConversion")==0){
                printf("Retrieving vkDestroySamplerYcbcrConversion...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroySamplerYcbcrConversion : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroySamplerYcbcrConversionKHR")==0){
                printf("Retrieving vkDestroySamplerYcbcrConversionKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroySamplerYcbcrConversionKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDeviceQueue2")==0){
                printf("Retrieving vkGetDeviceQueue2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDeviceQueue2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateValidationCacheEXT")==0){
                printf("Retrieving vkCreateValidationCacheEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateValidationCacheEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyValidationCacheEXT")==0){
                printf("Retrieving vkDestroyValidationCacheEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyValidationCacheEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetValidationCacheDataEXT")==0){
                printf("Retrieving vkGetValidationCacheDataEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetValidationCacheDataEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkMergeValidationCachesEXT")==0){
                printf("Retrieving vkMergeValidationCachesEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkMergeValidationCachesEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDescriptorSetLayoutSupport")==0){
                printf("Retrieving vkGetDescriptorSetLayoutSupport...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDescriptorSetLayoutSupport : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDescriptorSetLayoutSupportKHR")==0){
                printf("Retrieving vkGetDescriptorSetLayoutSupportKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDescriptorSetLayoutSupportKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetShaderInfoAMD")==0){
                printf("Retrieving vkGetShaderInfoAMD...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetShaderInfoAMD : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkSetLocalDimmingAMD")==0){
                printf("Retrieving vkSetLocalDimmingAMD...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkSetLocalDimmingAMD : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceCalibrateableTimeDomainsEXT")==0){
                printf("Retrieving vkGetPhysicalDeviceCalibrateableTimeDomainsEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceCalibrateableTimeDomainsEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetCalibratedTimestampsEXT")==0){
                printf("Retrieving vkGetCalibratedTimestampsEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetCalibratedTimestampsEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkSetDebugUtilsObjectNameEXT")==0){
                printf("Retrieving vkSetDebugUtilsObjectNameEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkSetDebugUtilsObjectNameEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkSetDebugUtilsObjectTagEXT")==0){
                printf("Retrieving vkSetDebugUtilsObjectTagEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkSetDebugUtilsObjectTagEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkQueueBeginDebugUtilsLabelEXT")==0){
                printf("Retrieving vkQueueBeginDebugUtilsLabelEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkQueueBeginDebugUtilsLabelEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkQueueEndDebugUtilsLabelEXT")==0){
                printf("Retrieving vkQueueEndDebugUtilsLabelEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkQueueEndDebugUtilsLabelEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkQueueInsertDebugUtilsLabelEXT")==0){
                printf("Retrieving vkQueueInsertDebugUtilsLabelEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkQueueInsertDebugUtilsLabelEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBeginDebugUtilsLabelEXT")==0){
                printf("Retrieving vkCmdBeginDebugUtilsLabelEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBeginDebugUtilsLabelEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdEndDebugUtilsLabelEXT")==0){
                printf("Retrieving vkCmdEndDebugUtilsLabelEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdEndDebugUtilsLabelEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdInsertDebugUtilsLabelEXT")==0){
                printf("Retrieving vkCmdInsertDebugUtilsLabelEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdInsertDebugUtilsLabelEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateDebugUtilsMessengerEXT")==0){
                printf("Retrieving vkCreateDebugUtilsMessengerEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateDebugUtilsMessengerEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyDebugUtilsMessengerEXT")==0){
                printf("Retrieving vkDestroyDebugUtilsMessengerEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyDebugUtilsMessengerEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkSubmitDebugUtilsMessageEXT")==0){
                printf("Retrieving vkSubmitDebugUtilsMessageEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkSubmitDebugUtilsMessageEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetMemoryHostPointerPropertiesEXT")==0){
                printf("Retrieving vkGetMemoryHostPointerPropertiesEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetMemoryHostPointerPropertiesEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdWriteBufferMarkerAMD")==0){
                printf("Retrieving vkCmdWriteBufferMarkerAMD...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdWriteBufferMarkerAMD : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateRenderPass2")==0){
                printf("Retrieving vkCreateRenderPass2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateRenderPass2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateRenderPass2KHR")==0){
                printf("Retrieving vkCreateRenderPass2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateRenderPass2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBeginRenderPass2")==0){
                printf("Retrieving vkCmdBeginRenderPass2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBeginRenderPass2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBeginRenderPass2KHR")==0){
                printf("Retrieving vkCmdBeginRenderPass2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBeginRenderPass2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdNextSubpass2")==0){
                printf("Retrieving vkCmdNextSubpass2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdNextSubpass2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdNextSubpass2KHR")==0){
                printf("Retrieving vkCmdNextSubpass2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdNextSubpass2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdEndRenderPass2")==0){
                printf("Retrieving vkCmdEndRenderPass2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdEndRenderPass2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdEndRenderPass2KHR")==0){
                printf("Retrieving vkCmdEndRenderPass2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdEndRenderPass2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetSemaphoreCounterValue")==0){
                printf("Retrieving vkGetSemaphoreCounterValue...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetSemaphoreCounterValue : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetSemaphoreCounterValueKHR")==0){
                printf("Retrieving vkGetSemaphoreCounterValueKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetSemaphoreCounterValueKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkWaitSemaphores")==0){
                printf("Retrieving vkWaitSemaphores...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkWaitSemaphores : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkWaitSemaphoresKHR")==0){
                printf("Retrieving vkWaitSemaphoresKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkWaitSemaphoresKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkSignalSemaphore")==0){
                printf("Retrieving vkSignalSemaphore...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkSignalSemaphore : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkSignalSemaphoreKHR")==0){
                printf("Retrieving vkSignalSemaphoreKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkSignalSemaphoreKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDrawIndirectCount")==0){
                printf("Retrieving vkCmdDrawIndirectCount...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDrawIndirectCount : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDrawIndirectCountKHR")==0){
                printf("Retrieving vkCmdDrawIndirectCountKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDrawIndirectCountKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDrawIndirectCountAMD")==0){
                printf("Retrieving vkCmdDrawIndirectCountAMD...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDrawIndirectCountAMD : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDrawIndexedIndirectCount")==0){
                printf("Retrieving vkCmdDrawIndexedIndirectCount...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDrawIndexedIndirectCount : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDrawIndexedIndirectCountKHR")==0){
                printf("Retrieving vkCmdDrawIndexedIndirectCountKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDrawIndexedIndirectCountKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDrawIndexedIndirectCountAMD")==0){
                printf("Retrieving vkCmdDrawIndexedIndirectCountAMD...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDrawIndexedIndirectCountAMD : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetCheckpointNV")==0){
                printf("Retrieving vkCmdSetCheckpointNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetCheckpointNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetQueueCheckpointDataNV")==0){
                printf("Retrieving vkGetQueueCheckpointDataNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetQueueCheckpointDataNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBindTransformFeedbackBuffersEXT")==0){
                printf("Retrieving vkCmdBindTransformFeedbackBuffersEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBindTransformFeedbackBuffersEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBeginTransformFeedbackEXT")==0){
                printf("Retrieving vkCmdBeginTransformFeedbackEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBeginTransformFeedbackEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdEndTransformFeedbackEXT")==0){
                printf("Retrieving vkCmdEndTransformFeedbackEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdEndTransformFeedbackEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBeginQueryIndexedEXT")==0){
                printf("Retrieving vkCmdBeginQueryIndexedEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBeginQueryIndexedEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdEndQueryIndexedEXT")==0){
                printf("Retrieving vkCmdEndQueryIndexedEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdEndQueryIndexedEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDrawIndirectByteCountEXT")==0){
                printf("Retrieving vkCmdDrawIndirectByteCountEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDrawIndirectByteCountEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetExclusiveScissorNV")==0){
                printf("Retrieving vkCmdSetExclusiveScissorNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetExclusiveScissorNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetExclusiveScissorEnableNV")==0){
                printf("Retrieving vkCmdSetExclusiveScissorEnableNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetExclusiveScissorEnableNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBindShadingRateImageNV")==0){
                printf("Retrieving vkCmdBindShadingRateImageNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBindShadingRateImageNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetViewportShadingRatePaletteNV")==0){
                printf("Retrieving vkCmdSetViewportShadingRatePaletteNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetViewportShadingRatePaletteNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetCoarseSampleOrderNV")==0){
                printf("Retrieving vkCmdSetCoarseSampleOrderNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetCoarseSampleOrderNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDrawMeshTasksNV")==0){
                printf("Retrieving vkCmdDrawMeshTasksNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDrawMeshTasksNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDrawMeshTasksIndirectNV")==0){
                printf("Retrieving vkCmdDrawMeshTasksIndirectNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDrawMeshTasksIndirectNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDrawMeshTasksIndirectCountNV")==0){
                printf("Retrieving vkCmdDrawMeshTasksIndirectCountNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDrawMeshTasksIndirectCountNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDrawMeshTasksEXT")==0){
                printf("Retrieving vkCmdDrawMeshTasksEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDrawMeshTasksEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDrawMeshTasksIndirectEXT")==0){
                printf("Retrieving vkCmdDrawMeshTasksIndirectEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDrawMeshTasksIndirectEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDrawMeshTasksIndirectCountEXT")==0){
                printf("Retrieving vkCmdDrawMeshTasksIndirectCountEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDrawMeshTasksIndirectCountEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCompileDeferredNV")==0){
                printf("Retrieving vkCompileDeferredNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCompileDeferredNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateAccelerationStructureNV")==0){
                printf("Retrieving vkCreateAccelerationStructureNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateAccelerationStructureNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBindInvocationMaskHUAWEI")==0){
                printf("Retrieving vkCmdBindInvocationMaskHUAWEI...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBindInvocationMaskHUAWEI : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyAccelerationStructureKHR")==0){
                printf("Retrieving vkDestroyAccelerationStructureKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyAccelerationStructureKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyAccelerationStructureNV")==0){
                printf("Retrieving vkDestroyAccelerationStructureNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyAccelerationStructureNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetAccelerationStructureMemoryRequirementsNV")==0){
                printf("Retrieving vkGetAccelerationStructureMemoryRequirementsNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetAccelerationStructureMemoryRequirementsNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkBindAccelerationStructureMemoryNV")==0){
                printf("Retrieving vkBindAccelerationStructureMemoryNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkBindAccelerationStructureMemoryNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdCopyAccelerationStructureNV")==0){
                printf("Retrieving vkCmdCopyAccelerationStructureNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdCopyAccelerationStructureNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdCopyAccelerationStructureKHR")==0){
                printf("Retrieving vkCmdCopyAccelerationStructureKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdCopyAccelerationStructureKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCopyAccelerationStructureKHR")==0){
                printf("Retrieving vkCopyAccelerationStructureKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCopyAccelerationStructureKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdCopyAccelerationStructureToMemoryKHR")==0){
                printf("Retrieving vkCmdCopyAccelerationStructureToMemoryKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdCopyAccelerationStructureToMemoryKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCopyAccelerationStructureToMemoryKHR")==0){
                printf("Retrieving vkCopyAccelerationStructureToMemoryKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCopyAccelerationStructureToMemoryKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdCopyMemoryToAccelerationStructureKHR")==0){
                printf("Retrieving vkCmdCopyMemoryToAccelerationStructureKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdCopyMemoryToAccelerationStructureKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCopyMemoryToAccelerationStructureKHR")==0){
                printf("Retrieving vkCopyMemoryToAccelerationStructureKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCopyMemoryToAccelerationStructureKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdWriteAccelerationStructuresPropertiesKHR")==0){
                printf("Retrieving vkCmdWriteAccelerationStructuresPropertiesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdWriteAccelerationStructuresPropertiesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdWriteAccelerationStructuresPropertiesNV")==0){
                printf("Retrieving vkCmdWriteAccelerationStructuresPropertiesNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdWriteAccelerationStructuresPropertiesNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBuildAccelerationStructureNV")==0){
                printf("Retrieving vkCmdBuildAccelerationStructureNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBuildAccelerationStructureNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkWriteAccelerationStructuresPropertiesKHR")==0){
                printf("Retrieving vkWriteAccelerationStructuresPropertiesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkWriteAccelerationStructuresPropertiesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdTraceRaysKHR")==0){
                printf("Retrieving vkCmdTraceRaysKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdTraceRaysKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdTraceRaysNV")==0){
                printf("Retrieving vkCmdTraceRaysNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdTraceRaysNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetRayTracingShaderGroupHandlesKHR")==0){
                printf("Retrieving vkGetRayTracingShaderGroupHandlesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetRayTracingShaderGroupHandlesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetRayTracingShaderGroupHandlesNV")==0){
                printf("Retrieving vkGetRayTracingShaderGroupHandlesNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetRayTracingShaderGroupHandlesNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetRayTracingCaptureReplayShaderGroupHandlesKHR")==0){
                printf("Retrieving vkGetRayTracingCaptureReplayShaderGroupHandlesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetRayTracingCaptureReplayShaderGroupHandlesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetAccelerationStructureHandleNV")==0){
                printf("Retrieving vkGetAccelerationStructureHandleNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetAccelerationStructureHandleNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateRayTracingPipelinesNV")==0){
                printf("Retrieving vkCreateRayTracingPipelinesNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateRayTracingPipelinesNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateRayTracingPipelinesKHR")==0){
                printf("Retrieving vkCreateRayTracingPipelinesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateRayTracingPipelinesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceCooperativeMatrixPropertiesNV")==0){
                printf("Retrieving vkGetPhysicalDeviceCooperativeMatrixPropertiesNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceCooperativeMatrixPropertiesNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdTraceRaysIndirectKHR")==0){
                printf("Retrieving vkCmdTraceRaysIndirectKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdTraceRaysIndirectKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdTraceRaysIndirect2KHR")==0){
                printf("Retrieving vkCmdTraceRaysIndirect2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdTraceRaysIndirect2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDeviceAccelerationStructureCompatibilityKHR")==0){
                printf("Retrieving vkGetDeviceAccelerationStructureCompatibilityKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDeviceAccelerationStructureCompatibilityKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetRayTracingShaderGroupStackSizeKHR")==0){
                printf("Retrieving vkGetRayTracingShaderGroupStackSizeKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetRayTracingShaderGroupStackSizeKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetRayTracingPipelineStackSizeKHR")==0){
                printf("Retrieving vkCmdSetRayTracingPipelineStackSizeKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetRayTracingPipelineStackSizeKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetImageViewHandleNVX")==0){
                printf("Retrieving vkGetImageViewHandleNVX...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetImageViewHandleNVX : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetImageViewAddressNVX")==0){
                printf("Retrieving vkGetImageViewAddressNVX...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetImageViewAddressNVX : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR")==0){
                printf("Retrieving vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR")==0){
                printf("Retrieving vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkAcquireProfilingLockKHR")==0){
                printf("Retrieving vkAcquireProfilingLockKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkAcquireProfilingLockKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkReleaseProfilingLockKHR")==0){
                printf("Retrieving vkReleaseProfilingLockKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkReleaseProfilingLockKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetImageDrmFormatModifierPropertiesEXT")==0){
                printf("Retrieving vkGetImageDrmFormatModifierPropertiesEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetImageDrmFormatModifierPropertiesEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetBufferOpaqueCaptureAddress")==0){
                printf("Retrieving vkGetBufferOpaqueCaptureAddress...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetBufferOpaqueCaptureAddress : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetBufferOpaqueCaptureAddressKHR")==0){
                printf("Retrieving vkGetBufferOpaqueCaptureAddressKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetBufferOpaqueCaptureAddressKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetBufferDeviceAddress")==0){
                printf("Retrieving vkGetBufferDeviceAddress...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetBufferDeviceAddress : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetBufferDeviceAddressKHR")==0){
                printf("Retrieving vkGetBufferDeviceAddressKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetBufferDeviceAddressKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetBufferDeviceAddressEXT")==0){
                printf("Retrieving vkGetBufferDeviceAddressEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetBufferDeviceAddressEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateHeadlessSurfaceEXT")==0){
                printf("Retrieving vkCreateHeadlessSurfaceEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateHeadlessSurfaceEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV")==0){
                printf("Retrieving vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkInitializePerformanceApiINTEL")==0){
                printf("Retrieving vkInitializePerformanceApiINTEL...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkInitializePerformanceApiINTEL : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkUninitializePerformanceApiINTEL")==0){
                printf("Retrieving vkUninitializePerformanceApiINTEL...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkUninitializePerformanceApiINTEL : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetPerformanceMarkerINTEL")==0){
                printf("Retrieving vkCmdSetPerformanceMarkerINTEL...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetPerformanceMarkerINTEL : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetPerformanceStreamMarkerINTEL")==0){
                printf("Retrieving vkCmdSetPerformanceStreamMarkerINTEL...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetPerformanceStreamMarkerINTEL : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetPerformanceOverrideINTEL")==0){
                printf("Retrieving vkCmdSetPerformanceOverrideINTEL...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetPerformanceOverrideINTEL : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkAcquirePerformanceConfigurationINTEL")==0){
                printf("Retrieving vkAcquirePerformanceConfigurationINTEL...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkAcquirePerformanceConfigurationINTEL : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkReleasePerformanceConfigurationINTEL")==0){
                printf("Retrieving vkReleasePerformanceConfigurationINTEL...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkReleasePerformanceConfigurationINTEL : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkQueueSetPerformanceConfigurationINTEL")==0){
                printf("Retrieving vkQueueSetPerformanceConfigurationINTEL...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkQueueSetPerformanceConfigurationINTEL : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPerformanceParameterINTEL")==0){
                printf("Retrieving vkGetPerformanceParameterINTEL...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPerformanceParameterINTEL : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDeviceMemoryOpaqueCaptureAddress")==0){
                printf("Retrieving vkGetDeviceMemoryOpaqueCaptureAddress...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDeviceMemoryOpaqueCaptureAddress : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDeviceMemoryOpaqueCaptureAddressKHR")==0){
                printf("Retrieving vkGetDeviceMemoryOpaqueCaptureAddressKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDeviceMemoryOpaqueCaptureAddressKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPipelineExecutablePropertiesKHR")==0){
                printf("Retrieving vkGetPipelineExecutablePropertiesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPipelineExecutablePropertiesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPipelineExecutableStatisticsKHR")==0){
                printf("Retrieving vkGetPipelineExecutableStatisticsKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPipelineExecutableStatisticsKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPipelineExecutableInternalRepresentationsKHR")==0){
                printf("Retrieving vkGetPipelineExecutableInternalRepresentationsKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPipelineExecutableInternalRepresentationsKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetLineStippleEXT")==0){
                printf("Retrieving vkCmdSetLineStippleEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetLineStippleEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceToolProperties")==0){
                printf("Retrieving vkGetPhysicalDeviceToolProperties...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceToolProperties : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceToolPropertiesEXT")==0){
                printf("Retrieving vkGetPhysicalDeviceToolPropertiesEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceToolPropertiesEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateAccelerationStructureKHR")==0){
                printf("Retrieving vkCreateAccelerationStructureKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateAccelerationStructureKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBuildAccelerationStructuresKHR")==0){
                printf("Retrieving vkCmdBuildAccelerationStructuresKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBuildAccelerationStructuresKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBuildAccelerationStructuresIndirectKHR")==0){
                printf("Retrieving vkCmdBuildAccelerationStructuresIndirectKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBuildAccelerationStructuresIndirectKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkBuildAccelerationStructuresKHR")==0){
                printf("Retrieving vkBuildAccelerationStructuresKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkBuildAccelerationStructuresKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetAccelerationStructureDeviceAddressKHR")==0){
                printf("Retrieving vkGetAccelerationStructureDeviceAddressKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetAccelerationStructureDeviceAddressKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateDeferredOperationKHR")==0){
                printf("Retrieving vkCreateDeferredOperationKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateDeferredOperationKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyDeferredOperationKHR")==0){
                printf("Retrieving vkDestroyDeferredOperationKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyDeferredOperationKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDeferredOperationMaxConcurrencyKHR")==0){
                printf("Retrieving vkGetDeferredOperationMaxConcurrencyKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDeferredOperationMaxConcurrencyKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDeferredOperationResultKHR")==0){
                printf("Retrieving vkGetDeferredOperationResultKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDeferredOperationResultKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDeferredOperationJoinKHR")==0){
                printf("Retrieving vkDeferredOperationJoinKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDeferredOperationJoinKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPipelineIndirectMemoryRequirementsNV")==0){
                printf("Retrieving vkGetPipelineIndirectMemoryRequirementsNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPipelineIndirectMemoryRequirementsNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPipelineIndirectDeviceAddressNV")==0){
                printf("Retrieving vkGetPipelineIndirectDeviceAddressNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPipelineIndirectDeviceAddressNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetCullMode")==0){
                printf("Retrieving vkCmdSetCullMode...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetCullMode : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetCullModeEXT")==0){
                printf("Retrieving vkCmdSetCullModeEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetCullModeEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetFrontFace")==0){
                printf("Retrieving vkCmdSetFrontFace...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetFrontFace : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetFrontFaceEXT")==0){
                printf("Retrieving vkCmdSetFrontFaceEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetFrontFaceEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetPrimitiveTopology")==0){
                printf("Retrieving vkCmdSetPrimitiveTopology...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetPrimitiveTopology : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetPrimitiveTopologyEXT")==0){
                printf("Retrieving vkCmdSetPrimitiveTopologyEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetPrimitiveTopologyEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetViewportWithCount")==0){
                printf("Retrieving vkCmdSetViewportWithCount...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetViewportWithCount : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetViewportWithCountEXT")==0){
                printf("Retrieving vkCmdSetViewportWithCountEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetViewportWithCountEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetScissorWithCount")==0){
                printf("Retrieving vkCmdSetScissorWithCount...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetScissorWithCount : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetScissorWithCountEXT")==0){
                printf("Retrieving vkCmdSetScissorWithCountEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetScissorWithCountEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBindIndexBuffer2KHR")==0){
                printf("Retrieving vkCmdBindIndexBuffer2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBindIndexBuffer2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBindVertexBuffers2")==0){
                printf("Retrieving vkCmdBindVertexBuffers2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBindVertexBuffers2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBindVertexBuffers2EXT")==0){
                printf("Retrieving vkCmdBindVertexBuffers2EXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBindVertexBuffers2EXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetDepthTestEnable")==0){
                printf("Retrieving vkCmdSetDepthTestEnable...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetDepthTestEnable : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetDepthTestEnableEXT")==0){
                printf("Retrieving vkCmdSetDepthTestEnableEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetDepthTestEnableEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetDepthWriteEnable")==0){
                printf("Retrieving vkCmdSetDepthWriteEnable...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetDepthWriteEnable : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetDepthWriteEnableEXT")==0){
                printf("Retrieving vkCmdSetDepthWriteEnableEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetDepthWriteEnableEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetDepthCompareOp")==0){
                printf("Retrieving vkCmdSetDepthCompareOp...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetDepthCompareOp : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetDepthCompareOpEXT")==0){
                printf("Retrieving vkCmdSetDepthCompareOpEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetDepthCompareOpEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetDepthBoundsTestEnable")==0){
                printf("Retrieving vkCmdSetDepthBoundsTestEnable...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetDepthBoundsTestEnable : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetDepthBoundsTestEnableEXT")==0){
                printf("Retrieving vkCmdSetDepthBoundsTestEnableEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetDepthBoundsTestEnableEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetStencilTestEnable")==0){
                printf("Retrieving vkCmdSetStencilTestEnable...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetStencilTestEnable : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetStencilTestEnableEXT")==0){
                printf("Retrieving vkCmdSetStencilTestEnableEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetStencilTestEnableEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetStencilOp")==0){
                printf("Retrieving vkCmdSetStencilOp...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetStencilOp : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetStencilOpEXT")==0){
                printf("Retrieving vkCmdSetStencilOpEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetStencilOpEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetPatchControlPointsEXT")==0){
                printf("Retrieving vkCmdSetPatchControlPointsEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetPatchControlPointsEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetRasterizerDiscardEnable")==0){
                printf("Retrieving vkCmdSetRasterizerDiscardEnable...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetRasterizerDiscardEnable : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetRasterizerDiscardEnableEXT")==0){
                printf("Retrieving vkCmdSetRasterizerDiscardEnableEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetRasterizerDiscardEnableEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetDepthBiasEnable")==0){
                printf("Retrieving vkCmdSetDepthBiasEnable...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetDepthBiasEnable : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetDepthBiasEnableEXT")==0){
                printf("Retrieving vkCmdSetDepthBiasEnableEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetDepthBiasEnableEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetLogicOpEXT")==0){
                printf("Retrieving vkCmdSetLogicOpEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetLogicOpEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetPrimitiveRestartEnable")==0){
                printf("Retrieving vkCmdSetPrimitiveRestartEnable...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetPrimitiveRestartEnable : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetPrimitiveRestartEnableEXT")==0){
                printf("Retrieving vkCmdSetPrimitiveRestartEnableEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetPrimitiveRestartEnableEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetTessellationDomainOriginEXT")==0){
                printf("Retrieving vkCmdSetTessellationDomainOriginEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetTessellationDomainOriginEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetDepthClampEnableEXT")==0){
                printf("Retrieving vkCmdSetDepthClampEnableEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetDepthClampEnableEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetPolygonModeEXT")==0){
                printf("Retrieving vkCmdSetPolygonModeEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetPolygonModeEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetRasterizationSamplesEXT")==0){
                printf("Retrieving vkCmdSetRasterizationSamplesEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetRasterizationSamplesEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetSampleMaskEXT")==0){
                printf("Retrieving vkCmdSetSampleMaskEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetSampleMaskEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetAlphaToCoverageEnableEXT")==0){
                printf("Retrieving vkCmdSetAlphaToCoverageEnableEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetAlphaToCoverageEnableEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetAlphaToOneEnableEXT")==0){
                printf("Retrieving vkCmdSetAlphaToOneEnableEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetAlphaToOneEnableEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetLogicOpEnableEXT")==0){
                printf("Retrieving vkCmdSetLogicOpEnableEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetLogicOpEnableEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetColorBlendEnableEXT")==0){
                printf("Retrieving vkCmdSetColorBlendEnableEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetColorBlendEnableEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetColorBlendEquationEXT")==0){
                printf("Retrieving vkCmdSetColorBlendEquationEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetColorBlendEquationEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetColorWriteMaskEXT")==0){
                printf("Retrieving vkCmdSetColorWriteMaskEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetColorWriteMaskEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetRasterizationStreamEXT")==0){
                printf("Retrieving vkCmdSetRasterizationStreamEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetRasterizationStreamEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetConservativeRasterizationModeEXT")==0){
                printf("Retrieving vkCmdSetConservativeRasterizationModeEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetConservativeRasterizationModeEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetExtraPrimitiveOverestimationSizeEXT")==0){
                printf("Retrieving vkCmdSetExtraPrimitiveOverestimationSizeEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetExtraPrimitiveOverestimationSizeEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetDepthClipEnableEXT")==0){
                printf("Retrieving vkCmdSetDepthClipEnableEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetDepthClipEnableEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetSampleLocationsEnableEXT")==0){
                printf("Retrieving vkCmdSetSampleLocationsEnableEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetSampleLocationsEnableEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetColorBlendAdvancedEXT")==0){
                printf("Retrieving vkCmdSetColorBlendAdvancedEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetColorBlendAdvancedEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetProvokingVertexModeEXT")==0){
                printf("Retrieving vkCmdSetProvokingVertexModeEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetProvokingVertexModeEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetLineRasterizationModeEXT")==0){
                printf("Retrieving vkCmdSetLineRasterizationModeEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetLineRasterizationModeEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetLineStippleEnableEXT")==0){
                printf("Retrieving vkCmdSetLineStippleEnableEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetLineStippleEnableEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetDepthClipNegativeOneToOneEXT")==0){
                printf("Retrieving vkCmdSetDepthClipNegativeOneToOneEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetDepthClipNegativeOneToOneEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetViewportWScalingEnableNV")==0){
                printf("Retrieving vkCmdSetViewportWScalingEnableNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetViewportWScalingEnableNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetViewportSwizzleNV")==0){
                printf("Retrieving vkCmdSetViewportSwizzleNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetViewportSwizzleNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetCoverageToColorEnableNV")==0){
                printf("Retrieving vkCmdSetCoverageToColorEnableNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetCoverageToColorEnableNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetCoverageToColorLocationNV")==0){
                printf("Retrieving vkCmdSetCoverageToColorLocationNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetCoverageToColorLocationNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetCoverageModulationModeNV")==0){
                printf("Retrieving vkCmdSetCoverageModulationModeNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetCoverageModulationModeNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetCoverageModulationTableEnableNV")==0){
                printf("Retrieving vkCmdSetCoverageModulationTableEnableNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetCoverageModulationTableEnableNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetCoverageModulationTableNV")==0){
                printf("Retrieving vkCmdSetCoverageModulationTableNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetCoverageModulationTableNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetShadingRateImageEnableNV")==0){
                printf("Retrieving vkCmdSetShadingRateImageEnableNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetShadingRateImageEnableNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetCoverageReductionModeNV")==0){
                printf("Retrieving vkCmdSetCoverageReductionModeNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetCoverageReductionModeNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetRepresentativeFragmentTestEnableNV")==0){
                printf("Retrieving vkCmdSetRepresentativeFragmentTestEnableNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetRepresentativeFragmentTestEnableNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreatePrivateDataSlot")==0){
                printf("Retrieving vkCreatePrivateDataSlot...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreatePrivateDataSlot : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreatePrivateDataSlotEXT")==0){
                printf("Retrieving vkCreatePrivateDataSlotEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreatePrivateDataSlotEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyPrivateDataSlot")==0){
                printf("Retrieving vkDestroyPrivateDataSlot...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyPrivateDataSlot : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyPrivateDataSlotEXT")==0){
                printf("Retrieving vkDestroyPrivateDataSlotEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyPrivateDataSlotEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkSetPrivateData")==0){
                printf("Retrieving vkSetPrivateData...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkSetPrivateData : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkSetPrivateDataEXT")==0){
                printf("Retrieving vkSetPrivateDataEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkSetPrivateDataEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPrivateData")==0){
                printf("Retrieving vkGetPrivateData...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPrivateData : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPrivateDataEXT")==0){
                printf("Retrieving vkGetPrivateDataEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPrivateDataEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdCopyBuffer2")==0){
                printf("Retrieving vkCmdCopyBuffer2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdCopyBuffer2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdCopyBuffer2KHR")==0){
                printf("Retrieving vkCmdCopyBuffer2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdCopyBuffer2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdCopyImage2")==0){
                printf("Retrieving vkCmdCopyImage2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdCopyImage2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdCopyImage2KHR")==0){
                printf("Retrieving vkCmdCopyImage2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdCopyImage2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBlitImage2")==0){
                printf("Retrieving vkCmdBlitImage2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBlitImage2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBlitImage2KHR")==0){
                printf("Retrieving vkCmdBlitImage2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBlitImage2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdCopyBufferToImage2")==0){
                printf("Retrieving vkCmdCopyBufferToImage2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdCopyBufferToImage2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdCopyBufferToImage2KHR")==0){
                printf("Retrieving vkCmdCopyBufferToImage2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdCopyBufferToImage2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdCopyImageToBuffer2")==0){
                printf("Retrieving vkCmdCopyImageToBuffer2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdCopyImageToBuffer2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdCopyImageToBuffer2KHR")==0){
                printf("Retrieving vkCmdCopyImageToBuffer2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdCopyImageToBuffer2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdResolveImage2")==0){
                printf("Retrieving vkCmdResolveImage2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdResolveImage2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdResolveImage2KHR")==0){
                printf("Retrieving vkCmdResolveImage2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdResolveImage2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetFragmentShadingRateKHR")==0){
                printf("Retrieving vkCmdSetFragmentShadingRateKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetFragmentShadingRateKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceFragmentShadingRatesKHR")==0){
                printf("Retrieving vkGetPhysicalDeviceFragmentShadingRatesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceFragmentShadingRatesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetFragmentShadingRateEnumNV")==0){
                printf("Retrieving vkCmdSetFragmentShadingRateEnumNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetFragmentShadingRateEnumNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetAccelerationStructureBuildSizesKHR")==0){
                printf("Retrieving vkGetAccelerationStructureBuildSizesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetAccelerationStructureBuildSizesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetVertexInputEXT")==0){
                printf("Retrieving vkCmdSetVertexInputEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetVertexInputEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetColorWriteEnableEXT")==0){
                printf("Retrieving vkCmdSetColorWriteEnableEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetColorWriteEnableEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetEvent2")==0){
                printf("Retrieving vkCmdSetEvent2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetEvent2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetEvent2KHR")==0){
                printf("Retrieving vkCmdSetEvent2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetEvent2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdResetEvent2")==0){
                printf("Retrieving vkCmdResetEvent2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdResetEvent2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdResetEvent2KHR")==0){
                printf("Retrieving vkCmdResetEvent2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdResetEvent2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdWaitEvents2")==0){
                printf("Retrieving vkCmdWaitEvents2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdWaitEvents2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdWaitEvents2KHR")==0){
                printf("Retrieving vkCmdWaitEvents2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdWaitEvents2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdPipelineBarrier2")==0){
                printf("Retrieving vkCmdPipelineBarrier2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdPipelineBarrier2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdPipelineBarrier2KHR")==0){
                printf("Retrieving vkCmdPipelineBarrier2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdPipelineBarrier2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkQueueSubmit2")==0){
                printf("Retrieving vkQueueSubmit2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkQueueSubmit2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkQueueSubmit2KHR")==0){
                printf("Retrieving vkQueueSubmit2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkQueueSubmit2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdWriteTimestamp2")==0){
                printf("Retrieving vkCmdWriteTimestamp2...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdWriteTimestamp2 : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdWriteTimestamp2KHR")==0){
                printf("Retrieving vkCmdWriteTimestamp2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdWriteTimestamp2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdWriteBufferMarker2AMD")==0){
                printf("Retrieving vkCmdWriteBufferMarker2AMD...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdWriteBufferMarker2AMD : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetQueueCheckpointData2NV")==0){
                printf("Retrieving vkGetQueueCheckpointData2NV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetQueueCheckpointData2NV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCopyMemoryToImageEXT")==0){
                printf("Retrieving vkCopyMemoryToImageEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCopyMemoryToImageEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCopyImageToMemoryEXT")==0){
                printf("Retrieving vkCopyImageToMemoryEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCopyImageToMemoryEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCopyImageToImageEXT")==0){
                printf("Retrieving vkCopyImageToImageEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCopyImageToImageEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkTransitionImageLayoutEXT")==0){
                printf("Retrieving vkTransitionImageLayoutEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkTransitionImageLayoutEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceVideoCapabilitiesKHR")==0){
                printf("Retrieving vkGetPhysicalDeviceVideoCapabilitiesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceVideoCapabilitiesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceVideoFormatPropertiesKHR")==0){
                printf("Retrieving vkGetPhysicalDeviceVideoFormatPropertiesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceVideoFormatPropertiesKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateVideoSessionKHR")==0){
                printf("Retrieving vkCreateVideoSessionKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateVideoSessionKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyVideoSessionKHR")==0){
                printf("Retrieving vkDestroyVideoSessionKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyVideoSessionKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateVideoSessionParametersKHR")==0){
                printf("Retrieving vkCreateVideoSessionParametersKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateVideoSessionParametersKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkUpdateVideoSessionParametersKHR")==0){
                printf("Retrieving vkUpdateVideoSessionParametersKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkUpdateVideoSessionParametersKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyVideoSessionParametersKHR")==0){
                printf("Retrieving vkDestroyVideoSessionParametersKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyVideoSessionParametersKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetVideoSessionMemoryRequirementsKHR")==0){
                printf("Retrieving vkGetVideoSessionMemoryRequirementsKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetVideoSessionMemoryRequirementsKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkBindVideoSessionMemoryKHR")==0){
                printf("Retrieving vkBindVideoSessionMemoryKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkBindVideoSessionMemoryKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDecodeVideoKHR")==0){
                printf("Retrieving vkCmdDecodeVideoKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDecodeVideoKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBeginVideoCodingKHR")==0){
                printf("Retrieving vkCmdBeginVideoCodingKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBeginVideoCodingKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdControlVideoCodingKHR")==0){
                printf("Retrieving vkCmdControlVideoCodingKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdControlVideoCodingKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdEndVideoCodingKHR")==0){
                printf("Retrieving vkCmdEndVideoCodingKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdEndVideoCodingKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDecompressMemoryNV")==0){
                printf("Retrieving vkCmdDecompressMemoryNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDecompressMemoryNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdDecompressMemoryIndirectCountNV")==0){
                printf("Retrieving vkCmdDecompressMemoryIndirectCountNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdDecompressMemoryIndirectCountNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateCuModuleNVX")==0){
                printf("Retrieving vkCreateCuModuleNVX...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateCuModuleNVX : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateCuFunctionNVX")==0){
                printf("Retrieving vkCreateCuFunctionNVX...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateCuFunctionNVX : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyCuModuleNVX")==0){
                printf("Retrieving vkDestroyCuModuleNVX...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyCuModuleNVX : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyCuFunctionNVX")==0){
                printf("Retrieving vkDestroyCuFunctionNVX...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyCuFunctionNVX : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdCuLaunchKernelNVX")==0){
                printf("Retrieving vkCmdCuLaunchKernelNVX...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdCuLaunchKernelNVX : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDescriptorSetLayoutSizeEXT")==0){
                printf("Retrieving vkGetDescriptorSetLayoutSizeEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDescriptorSetLayoutSizeEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDescriptorSetLayoutBindingOffsetEXT")==0){
                printf("Retrieving vkGetDescriptorSetLayoutBindingOffsetEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDescriptorSetLayoutBindingOffsetEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDescriptorEXT")==0){
                printf("Retrieving vkGetDescriptorEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDescriptorEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBindDescriptorBuffersEXT")==0){
                printf("Retrieving vkCmdBindDescriptorBuffersEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBindDescriptorBuffersEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetDescriptorBufferOffsetsEXT")==0){
                printf("Retrieving vkCmdSetDescriptorBufferOffsetsEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetDescriptorBufferOffsetsEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBindDescriptorBufferEmbeddedSamplersEXT")==0){
                printf("Retrieving vkCmdBindDescriptorBufferEmbeddedSamplersEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBindDescriptorBufferEmbeddedSamplersEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetBufferOpaqueCaptureDescriptorDataEXT")==0){
                printf("Retrieving vkGetBufferOpaqueCaptureDescriptorDataEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetBufferOpaqueCaptureDescriptorDataEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetImageOpaqueCaptureDescriptorDataEXT")==0){
                printf("Retrieving vkGetImageOpaqueCaptureDescriptorDataEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetImageOpaqueCaptureDescriptorDataEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetImageViewOpaqueCaptureDescriptorDataEXT")==0){
                printf("Retrieving vkGetImageViewOpaqueCaptureDescriptorDataEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetImageViewOpaqueCaptureDescriptorDataEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetSamplerOpaqueCaptureDescriptorDataEXT")==0){
                printf("Retrieving vkGetSamplerOpaqueCaptureDescriptorDataEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetSamplerOpaqueCaptureDescriptorDataEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT")==0){
                printf("Retrieving vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkSetDeviceMemoryPriorityEXT")==0){
                printf("Retrieving vkSetDeviceMemoryPriorityEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkSetDeviceMemoryPriorityEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkAcquireDrmDisplayEXT")==0){
                printf("Retrieving vkAcquireDrmDisplayEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkAcquireDrmDisplayEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDrmDisplayEXT")==0){
                printf("Retrieving vkGetDrmDisplayEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDrmDisplayEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkWaitForPresentKHR")==0){
                printf("Retrieving vkWaitForPresentKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkWaitForPresentKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBeginRendering")==0){
                printf("Retrieving vkCmdBeginRendering...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBeginRendering : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBeginRenderingKHR")==0){
                printf("Retrieving vkCmdBeginRenderingKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBeginRenderingKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdEndRendering")==0){
                printf("Retrieving vkCmdEndRendering...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdEndRendering : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdEndRenderingKHR")==0){
                printf("Retrieving vkCmdEndRenderingKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdEndRenderingKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDescriptorSetLayoutHostMappingInfoVALVE")==0){
                printf("Retrieving vkGetDescriptorSetLayoutHostMappingInfoVALVE...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDescriptorSetLayoutHostMappingInfoVALVE : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDescriptorSetHostMappingVALVE")==0){
                printf("Retrieving vkGetDescriptorSetHostMappingVALVE...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDescriptorSetHostMappingVALVE : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateMicromapEXT")==0){
                printf("Retrieving vkCreateMicromapEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateMicromapEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBuildMicromapsEXT")==0){
                printf("Retrieving vkCmdBuildMicromapsEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBuildMicromapsEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkBuildMicromapsEXT")==0){
                printf("Retrieving vkBuildMicromapsEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkBuildMicromapsEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyMicromapEXT")==0){
                printf("Retrieving vkDestroyMicromapEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyMicromapEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdCopyMicromapEXT")==0){
                printf("Retrieving vkCmdCopyMicromapEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdCopyMicromapEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCopyMicromapEXT")==0){
                printf("Retrieving vkCopyMicromapEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCopyMicromapEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdCopyMicromapToMemoryEXT")==0){
                printf("Retrieving vkCmdCopyMicromapToMemoryEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdCopyMicromapToMemoryEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCopyMicromapToMemoryEXT")==0){
                printf("Retrieving vkCopyMicromapToMemoryEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCopyMicromapToMemoryEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdCopyMemoryToMicromapEXT")==0){
                printf("Retrieving vkCmdCopyMemoryToMicromapEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdCopyMemoryToMicromapEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCopyMemoryToMicromapEXT")==0){
                printf("Retrieving vkCopyMemoryToMicromapEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCopyMemoryToMicromapEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdWriteMicromapsPropertiesEXT")==0){
                printf("Retrieving vkCmdWriteMicromapsPropertiesEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdWriteMicromapsPropertiesEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkWriteMicromapsPropertiesEXT")==0){
                printf("Retrieving vkWriteMicromapsPropertiesEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkWriteMicromapsPropertiesEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDeviceMicromapCompatibilityEXT")==0){
                printf("Retrieving vkGetDeviceMicromapCompatibilityEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDeviceMicromapCompatibilityEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetMicromapBuildSizesEXT")==0){
                printf("Retrieving vkGetMicromapBuildSizesEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetMicromapBuildSizesEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetShaderModuleIdentifierEXT")==0){
                printf("Retrieving vkGetShaderModuleIdentifierEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetShaderModuleIdentifierEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetShaderModuleCreateInfoIdentifierEXT")==0){
                printf("Retrieving vkGetShaderModuleCreateInfoIdentifierEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetShaderModuleCreateInfoIdentifierEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetImageSubresourceLayout2KHR")==0){
                printf("Retrieving vkGetImageSubresourceLayout2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetImageSubresourceLayout2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetImageSubresourceLayout2EXT")==0){
                printf("Retrieving vkGetImageSubresourceLayout2EXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetImageSubresourceLayout2EXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPipelinePropertiesEXT")==0){
                printf("Retrieving vkGetPipelinePropertiesEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPipelinePropertiesEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetFramebufferTilePropertiesQCOM")==0){
                printf("Retrieving vkGetFramebufferTilePropertiesQCOM...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetFramebufferTilePropertiesQCOM : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDynamicRenderingTilePropertiesQCOM")==0){
                printf("Retrieving vkGetDynamicRenderingTilePropertiesQCOM...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDynamicRenderingTilePropertiesQCOM : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceOpticalFlowImageFormatsNV")==0){
                printf("Retrieving vkGetPhysicalDeviceOpticalFlowImageFormatsNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceOpticalFlowImageFormatsNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateOpticalFlowSessionNV")==0){
                printf("Retrieving vkCreateOpticalFlowSessionNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateOpticalFlowSessionNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyOpticalFlowSessionNV")==0){
                printf("Retrieving vkDestroyOpticalFlowSessionNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyOpticalFlowSessionNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkBindOpticalFlowSessionImageNV")==0){
                printf("Retrieving vkBindOpticalFlowSessionImageNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkBindOpticalFlowSessionImageNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdOpticalFlowExecuteNV")==0){
                printf("Retrieving vkCmdOpticalFlowExecuteNV...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdOpticalFlowExecuteNV : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDeviceFaultInfoEXT")==0){
                printf("Retrieving vkGetDeviceFaultInfoEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDeviceFaultInfoEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdSetDepthBias2EXT")==0){
                printf("Retrieving vkCmdSetDepthBias2EXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdSetDepthBias2EXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkReleaseSwapchainImagesEXT")==0){
                printf("Retrieving vkReleaseSwapchainImagesEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkReleaseSwapchainImagesEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetDeviceImageSubresourceLayoutKHR")==0){
                printf("Retrieving vkGetDeviceImageSubresourceLayoutKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetDeviceImageSubresourceLayoutKHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkMapMemory2KHR")==0){
                printf("Retrieving vkMapMemory2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkMapMemory2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkUnmapMemory2KHR")==0){
                printf("Retrieving vkUnmapMemory2KHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkUnmapMemory2KHR : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCreateShadersEXT")==0){
                printf("Retrieving vkCreateShadersEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCreateShadersEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkDestroyShaderEXT")==0){
                printf("Retrieving vkDestroyShaderEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkDestroyShaderEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetShaderBinaryDataEXT")==0){
                printf("Retrieving vkGetShaderBinaryDataEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetShaderBinaryDataEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkCmdBindShadersEXT")==0){
                printf("Retrieving vkCmdBindShadersEXT...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkCmdBindShadersEXT : NULL; //We keep track of dispatch separately
            }
            

            else if (strcmp(pName,"vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR")==0){
                printf("Retrieving vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR...\n");
                return_value= (result["return"]==true) ? (PFN_vkVoidFunction)vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR : NULL; //We keep track of dispatch separately
            }
            

            else {
                printf("%s\n",(std::string("Unknown function: ")+pName).c_str());
                return_value=NULL;
            }
        
return return_value;
}
void vkGetPhysicalDeviceProperties(
VkPhysicalDevice physicalDevice,
 VkPhysicalDeviceProperties* pProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceProperties";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["pProperties"]=[&]() {
    json return_khdQLrQ=json({});
    
        if (pProperties==NULL){
            return_khdQLrQ["null"]=true;
            return return_khdQLrQ;
        }
        return_khdQLrQ=[&]() {
    json return_dgVEkHL=json({});
    return serialize_VkPhysicalDeviceProperties(*pProperties);}();
return return_khdQLrQ;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();
[&]() {

        if (result["members"]["pProperties"].contains("null")){
        pProperties=NULL;
        return;
        }
    [&]() {
*(pProperties)=deserialize_VkPhysicalDeviceProperties(result["members"]["pProperties"]);}();
}();
}
void vkGetPhysicalDeviceQueueFamilyProperties(
VkPhysicalDevice physicalDevice,
 uint32_t* pQueueFamilyPropertyCount,
 VkQueueFamilyProperties* pQueueFamilyProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceQueueFamilyProperties";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["pQueueFamilyPropertyCount"]=[&]() {
    json return_SBlrxix=json({});
    
        if (pQueueFamilyPropertyCount==NULL){
            return_SBlrxix["null"]=true;
            return return_SBlrxix;
        }
        return_SBlrxix=[&]() {
    json return_xdCcTRD=json({});
    return serialize_uint32_t(*pQueueFamilyPropertyCount);}();
return return_SBlrxix;}();
data_json["members"]["pQueueFamilyProperties"]=[&]() {
    json return_tdSoBqP=json({});
    
        if (pQueueFamilyProperties==NULL){
            return_tdSoBqP["null"]=true;
            return return_tdSoBqP;
        }
        
        return_tdSoBqP["members"]={};
        for(int tdSoBqP=0; tdSoBqP < *pQueueFamilyPropertyCount; tdSoBqP++){
            json temp;
            temp=[&]() {
    json return_aExQUNJ=json({});
    return serialize_VkQueueFamilyProperties(pQueueFamilyProperties[tdSoBqP]);}();
            return_tdSoBqP["members"].push_back(temp);
        }
        return return_tdSoBqP;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();
[&]() {

        if (result["members"]["pQueueFamilyPropertyCount"].contains("null")){
        pQueueFamilyPropertyCount=NULL;
        return;
        }
    [&]() {
*(pQueueFamilyPropertyCount)=deserialize_uint32_t(result["members"]["pQueueFamilyPropertyCount"]);}();
}();
[&]() {

        if (result["members"]["pQueueFamilyProperties"].contains("null")){
        pQueueFamilyProperties=NULL;
        return;
        }
    
        for (int FOSAclp=0; FOSAclp < *pQueueFamilyPropertyCount; FOSAclp++){
            [&]() {
pQueueFamilyProperties[FOSAclp]=deserialize_VkQueueFamilyProperties(result["members"]["pQueueFamilyProperties"]["members"][FOSAclp]);}();;
        }
        }();
}
void vkGetPhysicalDeviceMemoryProperties(
VkPhysicalDevice physicalDevice,
 VkPhysicalDeviceMemoryProperties* pMemoryProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceMemoryProperties";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["pMemoryProperties"]=[&]() {
    json return_ccVshit=json({});
    
        if (pMemoryProperties==NULL){
            return_ccVshit["null"]=true;
            return return_ccVshit;
        }
        return_ccVshit=[&]() {
    json return_JhCyNGV=json({});
    return serialize_VkPhysicalDeviceMemoryProperties(*pMemoryProperties);}();
return return_ccVshit;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();
[&]() {

        if (result["members"]["pMemoryProperties"].contains("null")){
        pMemoryProperties=NULL;
        return;
        }
    [&]() {
*(pMemoryProperties)=deserialize_VkPhysicalDeviceMemoryProperties(result["members"]["pMemoryProperties"]);}();
}();
}
void vkGetPhysicalDeviceFeatures(
VkPhysicalDevice physicalDevice,
 VkPhysicalDeviceFeatures* pFeatures
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceFeatures";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["pFeatures"]=[&]() {
    json return_wXsZLQh=json({});
    
        if (pFeatures==NULL){
            return_wXsZLQh["null"]=true;
            return return_wXsZLQh;
        }
        return_wXsZLQh=[&]() {
    json return_ugXPkSg=json({});
    return serialize_VkPhysicalDeviceFeatures(*pFeatures);}();
return return_wXsZLQh;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();
[&]() {

        if (result["members"]["pFeatures"].contains("null")){
        pFeatures=NULL;
        return;
        }
    [&]() {
*(pFeatures)=deserialize_VkPhysicalDeviceFeatures(result["members"]["pFeatures"]);}();
}();
}
void vkGetPhysicalDeviceFormatProperties(
VkPhysicalDevice physicalDevice,
 VkFormat format,
 VkFormatProperties* pFormatProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceFormatProperties";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["format"]=[&]() {
    json return_ESSNhLl=json({});
    return serialize_VkFormat(format);}();
data_json["members"]["pFormatProperties"]=[&]() {
    json return_VFiMeek=json({});
    
        if (pFormatProperties==NULL){
            return_VFiMeek["null"]=true;
            return return_VFiMeek;
        }
        return_VFiMeek=[&]() {
    json return_ulbLbfq=json({});
    return serialize_VkFormatProperties(*pFormatProperties);}();
return return_VFiMeek;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();
[&]() {
format=deserialize_VkFormat(result["members"]["format"]);}();
[&]() {

        if (result["members"]["pFormatProperties"].contains("null")){
        pFormatProperties=NULL;
        return;
        }
    [&]() {
*(pFormatProperties)=deserialize_VkFormatProperties(result["members"]["pFormatProperties"]);}();
}();
}
VkResult vkGetPhysicalDeviceImageFormatProperties(
VkPhysicalDevice physicalDevice,
 VkFormat format,
 VkImageType type,
 VkImageTiling tiling,
 VkImageUsageFlags usage,
 VkImageCreateFlags flags,
 VkImageFormatProperties* pImageFormatProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceImageFormatProperties";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["format"]=[&]() {
    json return_ESSNhLl=json({});
    return serialize_VkFormat(format);}();
data_json["members"]["type"]=[&]() {
    json return_riYevWa=json({});
    return serialize_VkImageType(type);}();
data_json["members"]["tiling"]=[&]() {
    json return_UkQGtiM=json({});
    return serialize_VkImageTiling(tiling);}();
data_json["members"]["usage"]=[&]() {
    json return_QwDsmvQ=json({});
    return serialize_VkImageUsageFlags(usage);}();
data_json["members"]["flags"]=[&]() {
    json return_tBBADJd=json({});
    return serialize_VkImageCreateFlags(flags);}();
data_json["members"]["pImageFormatProperties"]=[&]() {
    json return_bJlBypv=json({});
    
        if (pImageFormatProperties==NULL){
            return_bJlBypv["null"]=true;
            return return_bJlBypv;
        }
        return_bJlBypv=[&]() {
    json return_eqQLVKU=json({});
    return serialize_VkImageFormatProperties(*pImageFormatProperties);}();
return return_bJlBypv;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();
[&]() {
format=deserialize_VkFormat(result["members"]["format"]);}();
[&]() {
type=deserialize_VkImageType(result["members"]["type"]);}();
[&]() {
tiling=deserialize_VkImageTiling(result["members"]["tiling"]);}();
[&]() {
usage=deserialize_VkImageUsageFlags(result["members"]["usage"]);}();
[&]() {
flags=deserialize_VkImageCreateFlags(result["members"]["flags"]);}();
[&]() {

        if (result["members"]["pImageFormatProperties"].contains("null")){
        pImageFormatProperties=NULL;
        return;
        }
    [&]() {
*(pImageFormatProperties)=deserialize_VkImageFormatProperties(result["members"]["pImageFormatProperties"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkCreateDevice(
VkPhysicalDevice physicalDevice,
 const VkDeviceCreateInfo* pCreateInfo,
 const VkAllocationCallbacks* pAllocator,
 VkDevice* pDevice
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreateDevice";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["pCreateInfo"]=[&]() {
    json return_rdXjMLJ=json({});
    
        if (pCreateInfo==NULL){
            return_rdXjMLJ["null"]=true;
            return return_rdXjMLJ;
        }
        return_rdXjMLJ=[&]() {
    json return_ohUrILX=json({});
    return serialize_VkDeviceCreateInfo(*pCreateInfo);}();
return return_rdXjMLJ;}();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pDevice"]=[&]() {
    json return_mEaCsnj=json({});
    
        if (pDevice==NULL){
            return_mEaCsnj["null"]=true;
            return return_mEaCsnj;
        }
        return_mEaCsnj=[&]() {
    json return_YVINSjY=json({});
    return serialize_VkDevice(*pDevice);}();
return return_mEaCsnj;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();


[&]() {

        if (result["members"]["pDevice"].contains("null")){
        pDevice=NULL;
        return;
        }
    [&]() {
*(pDevice)=deserialize_VkDevice(result["members"]["pDevice"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
handle_to_parent_handle_struct[(uintptr_t)(*pDevice)]={.instance=NULL,.device=(*pDevice) };
return return_value;
}
void vkDestroyDevice(
VkDevice device,
 const VkAllocationCallbacks* pAllocator
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkDestroyDevice";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

}
VkResult vkEnumerateInstanceVersion(
uint32_t* pApiVersion
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkEnumerateInstanceVersion";

        data_json["parent"]["type"]="Instance";
        data_json["parent"]["handle"]=NULL;
        

{
data_json["members"]["pApiVersion"]=[&]() {
    json return_dYdaZSt=json({});
    
        if (pApiVersion==NULL){
            return_dYdaZSt["null"]=true;
            return return_dYdaZSt;
        }
        return_dYdaZSt=[&]() {
    json return_cILWFUW=json({});
    return serialize_uint32_t(*pApiVersion);}();
return return_dYdaZSt;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {

        if (result["members"]["pApiVersion"].contains("null")){
        pApiVersion=NULL;
        return;
        }
    [&]() {
*(pApiVersion)=deserialize_uint32_t(result["members"]["pApiVersion"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkEnumerateInstanceLayerProperties(
uint32_t* pPropertyCount,
 VkLayerProperties* pProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkEnumerateInstanceLayerProperties";

        data_json["parent"]["type"]="Instance";
        data_json["parent"]["handle"]=NULL;
        

{
data_json["members"]["pPropertyCount"]=[&]() {
    json return_MnYOHdG=json({});
    
        if (pPropertyCount==NULL){
            return_MnYOHdG["null"]=true;
            return return_MnYOHdG;
        }
        return_MnYOHdG=[&]() {
    json return_rPOmKzR=json({});
    return serialize_uint32_t(*pPropertyCount);}();
return return_MnYOHdG;}();
data_json["members"]["pProperties"]=[&]() {
    json return_wvbQLft=json({});
    
        if (pProperties==NULL){
            return_wvbQLft["null"]=true;
            return return_wvbQLft;
        }
        
        return_wvbQLft["members"]={};
        for(int wvbQLft=0; wvbQLft < *pPropertyCount; wvbQLft++){
            json temp;
            temp=[&]() {
    json return_WGRsCUz=json({});
    return serialize_VkLayerProperties(pProperties[wvbQLft]);}();
            return_wvbQLft["members"].push_back(temp);
        }
        return return_wvbQLft;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {

        if (result["members"]["pPropertyCount"].contains("null")){
        pPropertyCount=NULL;
        return;
        }
    [&]() {
*(pPropertyCount)=deserialize_uint32_t(result["members"]["pPropertyCount"]);}();
}();
[&]() {

        if (result["members"]["pProperties"].contains("null")){
        pProperties=NULL;
        return;
        }
    
        for (int WolcBAf=0; WolcBAf < *pPropertyCount; WolcBAf++){
            [&]() {
pProperties[WolcBAf]=deserialize_VkLayerProperties(result["members"]["pProperties"]["members"][WolcBAf]);}();;
        }
        }();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkEnumerateInstanceExtensionProperties(
const char* pLayerName,
 uint32_t* pPropertyCount,
 VkExtensionProperties* pProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkEnumerateInstanceExtensionProperties";

        data_json["parent"]["type"]="Instance";
        data_json["parent"]["handle"]=NULL;
        

{
data_json["members"]["pLayerName"]=[&]() {
    json return_GVAKxQC=json({});
    
        if (pLayerName==NULL){
            return_GVAKxQC["null"]=true;
            return return_GVAKxQC;
        }
        return serialize_char_p(pLayerName);
}();
data_json["members"]["pPropertyCount"]=[&]() {
    json return_MnYOHdG=json({});
    
        if (pPropertyCount==NULL){
            return_MnYOHdG["null"]=true;
            return return_MnYOHdG;
        }
        return_MnYOHdG=[&]() {
    json return_rPOmKzR=json({});
    return serialize_uint32_t(*pPropertyCount);}();
return return_MnYOHdG;}();
data_json["members"]["pProperties"]=[&]() {
    json return_FGyOCov=json({});
    
        if (pProperties==NULL){
            return_FGyOCov["null"]=true;
            return return_FGyOCov;
        }
        
        return_FGyOCov["members"]={};
        for(int FGyOCov=0; FGyOCov < *pPropertyCount; FGyOCov++){
            json temp;
            temp=[&]() {
    json return_gJpGkaF=json({});
    return serialize_VkExtensionProperties(pProperties[FGyOCov]);}();
            return_FGyOCov["members"].push_back(temp);
        }
        return return_FGyOCov;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}

[&]() {

        if (result["members"]["pPropertyCount"].contains("null")){
        pPropertyCount=NULL;
        return;
        }
    [&]() {
*(pPropertyCount)=deserialize_uint32_t(result["members"]["pPropertyCount"]);}();
}();
[&]() {

        if (result["members"]["pProperties"].contains("null")){
        pProperties=NULL;
        return;
        }
    
        for (int nUGZgux=0; nUGZgux < *pPropertyCount; nUGZgux++){
            [&]() {
pProperties[nUGZgux]=deserialize_VkExtensionProperties(result["members"]["pProperties"]["members"][nUGZgux]);}();;
        }
        }();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkEnumerateDeviceLayerProperties(
VkPhysicalDevice physicalDevice,
 uint32_t* pPropertyCount,
 VkLayerProperties* pProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkEnumerateDeviceLayerProperties";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["pPropertyCount"]=[&]() {
    json return_MnYOHdG=json({});
    
        if (pPropertyCount==NULL){
            return_MnYOHdG["null"]=true;
            return return_MnYOHdG;
        }
        return_MnYOHdG=[&]() {
    json return_rPOmKzR=json({});
    return serialize_uint32_t(*pPropertyCount);}();
return return_MnYOHdG;}();
data_json["members"]["pProperties"]=[&]() {
    json return_wvbQLft=json({});
    
        if (pProperties==NULL){
            return_wvbQLft["null"]=true;
            return return_wvbQLft;
        }
        
        return_wvbQLft["members"]={};
        for(int wvbQLft=0; wvbQLft < *pPropertyCount; wvbQLft++){
            json temp;
            temp=[&]() {
    json return_WGRsCUz=json({});
    return serialize_VkLayerProperties(pProperties[wvbQLft]);}();
            return_wvbQLft["members"].push_back(temp);
        }
        return return_wvbQLft;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();
[&]() {

        if (result["members"]["pPropertyCount"].contains("null")){
        pPropertyCount=NULL;
        return;
        }
    [&]() {
*(pPropertyCount)=deserialize_uint32_t(result["members"]["pPropertyCount"]);}();
}();
[&]() {

        if (result["members"]["pProperties"].contains("null")){
        pProperties=NULL;
        return;
        }
    
        for (int WolcBAf=0; WolcBAf < *pPropertyCount; WolcBAf++){
            [&]() {
pProperties[WolcBAf]=deserialize_VkLayerProperties(result["members"]["pProperties"]["members"][WolcBAf]);}();;
        }
        }();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkEnumerateDeviceExtensionProperties(
VkPhysicalDevice physicalDevice,
 const char* pLayerName,
 uint32_t* pPropertyCount,
 VkExtensionProperties* pProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkEnumerateDeviceExtensionProperties";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["pLayerName"]=[&]() {
    json return_GVAKxQC=json({});
    
        if (pLayerName==NULL){
            return_GVAKxQC["null"]=true;
            return return_GVAKxQC;
        }
        return serialize_char_p(pLayerName);
}();
data_json["members"]["pPropertyCount"]=[&]() {
    json return_MnYOHdG=json({});
    
        if (pPropertyCount==NULL){
            return_MnYOHdG["null"]=true;
            return return_MnYOHdG;
        }
        return_MnYOHdG=[&]() {
    json return_rPOmKzR=json({});
    return serialize_uint32_t(*pPropertyCount);}();
return return_MnYOHdG;}();
data_json["members"]["pProperties"]=[&]() {
    json return_FGyOCov=json({});
    
        if (pProperties==NULL){
            return_FGyOCov["null"]=true;
            return return_FGyOCov;
        }
        
        return_FGyOCov["members"]={};
        for(int FGyOCov=0; FGyOCov < *pPropertyCount; FGyOCov++){
            json temp;
            temp=[&]() {
    json return_gJpGkaF=json({});
    return serialize_VkExtensionProperties(pProperties[FGyOCov]);}();
            return_FGyOCov["members"].push_back(temp);
        }
        return return_FGyOCov;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();

[&]() {

        if (result["members"]["pPropertyCount"].contains("null")){
        pPropertyCount=NULL;
        return;
        }
    [&]() {
*(pPropertyCount)=deserialize_uint32_t(result["members"]["pPropertyCount"]);}();
}();
[&]() {

        if (result["members"]["pProperties"].contains("null")){
        pProperties=NULL;
        return;
        }
    
        for (int nUGZgux=0; nUGZgux < *pPropertyCount; nUGZgux++){
            [&]() {
pProperties[nUGZgux]=deserialize_VkExtensionProperties(result["members"]["pProperties"]["members"][nUGZgux]);}();;
        }
        }();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkGetDeviceQueue(
VkDevice device,
 uint32_t queueFamilyIndex,
 uint32_t queueIndex,
 VkQueue* pQueue
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetDeviceQueue";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["queueFamilyIndex"]=[&]() {
    json return_lNjYgkI=json({});
    return serialize_uint32_t(queueFamilyIndex);}();
data_json["members"]["queueIndex"]=[&]() {
    json return_GWdHyyn=json({});
    return serialize_uint32_t(queueIndex);}();
data_json["members"]["pQueue"]=[&]() {
    json return_WCWxniJ=json({});
    
        if (pQueue==NULL){
            return_WCWxniJ["null"]=true;
            return return_WCWxniJ;
        }
        return_WCWxniJ=[&]() {
    json return_NsjiHxF=json({});
    return serialize_VkQueue(*pQueue);}();
return return_WCWxniJ;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
queueFamilyIndex=deserialize_uint32_t(result["members"]["queueFamilyIndex"]);}();
[&]() {
queueIndex=deserialize_uint32_t(result["members"]["queueIndex"]);}();
[&]() {

        if (result["members"]["pQueue"].contains("null")){
        pQueue=NULL;
        return;
        }
    [&]() {
*(pQueue)=deserialize_VkQueue(result["members"]["pQueue"]);}();
}();
}
VkResult vkQueueSubmit(
VkQueue queue,
 uint32_t submitCount,
 const VkSubmitInfo* pSubmits,
 VkFence fence
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkQueueSubmit";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)queue];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["queue"]=[&]() {
    json return_KYhcIBS=json({});
    return serialize_VkQueue(queue);}();
data_json["members"]["submitCount"]=[&]() {
    json return_CvaHQdk=json({});
    return serialize_uint32_t(submitCount);}();
data_json["members"]["pSubmits"]=[&]() {
    json return_DGEUHbB=json({});
    
        if (pSubmits==NULL){
            return_DGEUHbB["null"]=true;
            return return_DGEUHbB;
        }
        
        return_DGEUHbB["members"]={};
        for(int DGEUHbB=0; DGEUHbB < submitCount; DGEUHbB++){
            json temp;
            temp=[&]() {
    json return_ZMNyrAC=json({});
    return serialize_VkSubmitInfo(pSubmits[DGEUHbB]);}();
            return_DGEUHbB["members"].push_back(temp);
        }
        return return_DGEUHbB;
        }();
data_json["members"]["fence"]=[&]() {
    json return_rCCyTaL=json({});
    return serialize_VkFence(fence);}();
}

   for (auto& device_memory: *(currStruct()->mem_to_sync)){
       if (devicememory_to_mem_info.count(device_memory)){
           auto& mem_info=devicememory_to_mem_info[device_memory];
              Sync(mem_info->mem,mem_info->size);
           }
   }
   currStruct()->mem_to_sync->clear();
   

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
queue=deserialize_VkQueue(result["members"]["queue"]);}();
[&]() {
submitCount=deserialize_uint32_t(result["members"]["submitCount"]);}();

[&]() {
fence=deserialize_VkFence(result["members"]["fence"]);}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkQueueWaitIdle(
VkQueue queue
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkQueueWaitIdle";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)queue];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["queue"]=[&]() {
    json return_sfVGawV=json({});
    return serialize_VkQueue(queue);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
queue=deserialize_VkQueue(result["members"]["queue"]);}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkDeviceWaitIdle(
VkDevice device
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkDeviceWaitIdle";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkAllocateMemory(
VkDevice device,
 const VkMemoryAllocateInfo* pAllocateInfo,
 const VkAllocationCallbacks* pAllocator,
 VkDeviceMemory* pMemory
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkAllocateMemory";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pAllocateInfo"]=[&]() {
    json return_OuQtKle=json({});
    
        if (pAllocateInfo==NULL){
            return_OuQtKle["null"]=true;
            return return_OuQtKle;
        }
        return_OuQtKle=[&]() {
    json return_sJfsLTf=json({});
    return serialize_VkMemoryAllocateInfo(*pAllocateInfo);}();
return return_OuQtKle;}();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pMemory"]=[&]() {
    json return_ngdHqpy=json({});
    
        if (pMemory==NULL){
            return_ngdHqpy["null"]=true;
            return return_ngdHqpy;
        }
        return_ngdHqpy=[&]() {
    json return_sJMwtse=json({});
    return serialize_VkDeviceMemory(*pMemory);}();
return return_ngdHqpy;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();


[&]() {

        if (result["members"]["pMemory"].contains("null")){
        pMemory=NULL;
        return;
        }
    [&]() {
*(pMemory)=deserialize_VkDeviceMemory(result["members"]["pMemory"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkFreeMemory(
VkDevice device,
 VkDeviceMemory memory,
 const VkAllocationCallbacks* pAllocator
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkFreeMemory";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["memory"]=[&]() {
    json return_OJZmLJB=json({});
    return serialize_VkDeviceMemory(memory);}();
data_json["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
memory=deserialize_VkDeviceMemory(result["members"]["memory"]);}();

}
VkResult vkMapMemory(
VkDevice device,
 VkDeviceMemory memory,
 VkDeviceSize offset,
 VkDeviceSize size,
 VkMemoryMapFlags flags,
 void** ppData
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkMapMemory";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

        auto info=new MemInfo();
        
        VkDeviceSize whole_size;
        vkGetDeviceMemoryCommitment(device,memory,&whole_size);
        info->size=whole_size;
        
        devicememory_to_mem_info[(uintptr_t)memory]=info;
        
{

        size=whole_size;
        offset=0;
        
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["memory"]=[&]() {
    json return_OJZmLJB=json({});
    return serialize_VkDeviceMemory(memory);}();
data_json["members"]["offset"]=[&]() {
    json return_vTtZMhj=json({});
    return_vTtZMhj=[&]() {
    json return_eEWibmR=json({});
    return serialize_uint64_t(offset);}();return return_vTtZMhj;}();
data_json["members"]["size"]=[&]() {
    json return_EcDMigR=json({});
    return_EcDMigR=[&]() {
    json return_vDcVgJV=json({});
    return serialize_uint64_t(size);}();return return_EcDMigR;}();
data_json["members"]["flags"]=[&]() {
    json return_rVhBgWW=json({});
    return serialize_VkMemoryMapFlags(flags);}();
data_json["members"]["ppData"]=[&]() {
    json return_PsFVEjO=json({});
    
        if (ppData==NULL){
            return_PsFVEjO["null"]=true;
            return return_PsFVEjO;
        }
        return_PsFVEjO=[&]() {
    json return_KWNLtTl=json({});
    
        if (*ppData==NULL){
            return_KWNLtTl["null"]=true;
            return return_KWNLtTl;
        }
        return serialize_void_p(*ppData);
}();
return return_PsFVEjO;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
memory=deserialize_VkDeviceMemory(result["members"]["memory"]);}();
[&]() {
[&]() {
offset=deserialize_uint64_t(result["members"]["offset"]);}();}();
[&]() {
[&]() {
size=deserialize_uint64_t(result["members"]["size"]);}();}();
[&]() {
flags=deserialize_VkMemoryMapFlags(result["members"]["flags"]);}();
[&]() {

        if (result["members"]["ppData"].contains("null")){
        ppData=NULL;
        return;
        }
    [&]() {

        if (result["members"]["ppData"].contains("null")){
        *(ppData)=NULL;
        return;
        }
    *(ppData)=deserialize_void_p(result["members"]["ppData"]);
}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

        info->fd=shm_open_anon(); //Make new place for memory
        ftruncate(info->fd,info->size);
        
        info->mem=mmap(NULL,info->size, PROT_EXEC | PROT_READ | PROT_WRITE, MAP_SHARED, info->fd,0);
        
        auto client_mem=(uintptr_t)info->mem;
        uintptr_t server_mem=result["members"]["ppData"]["ptr"];
        
        client_to_server_mem[client_mem]=server_mem;
        server_to_client_mem[server_mem]=client_mem;
        
        memcpy(info->mem,*ppData,info->size);
        
        *ppData=mmap(NULL,size,PROT_EXEC | PROT_READ | PROT_WRITE, MAP_SHARED,info->fd,offset);
        
        info->mapped_ranges.push_back(*ppData);
        
        
return return_value;
}
void vkUnmapMemory(
VkDevice device,
 VkDeviceMemory memory
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkUnmapMemory";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["memory"]=[&]() {
    json return_OcfqswQ=json({});
    return serialize_VkDeviceMemory(memory);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
memory=deserialize_VkDeviceMemory(result["members"]["memory"]);}();
}
VkResult vkFlushMappedMemoryRanges(
VkDevice device,
 uint32_t memoryRangeCount,
 const VkMappedMemoryRange* pMemoryRanges
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkFlushMappedMemoryRanges";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["memoryRangeCount"]=[&]() {
    json return_DrXrDAT=json({});
    return serialize_uint32_t(memoryRangeCount);}();
data_json["members"]["pMemoryRanges"]=[&]() {
    json return_GCDQESk=json({});
    
        if (pMemoryRanges==NULL){
            return_GCDQESk["null"]=true;
            return return_GCDQESk;
        }
        
        return_GCDQESk["members"]={};
        for(int GCDQESk=0; GCDQESk < memoryRangeCount; GCDQESk++){
            json temp;
            temp=[&]() {
    json return_sqNTOHy=json({});
    return serialize_VkMappedMemoryRange(pMemoryRanges[GCDQESk]);}();
            return_GCDQESk["members"].push_back(temp);
        }
        return return_GCDQESk;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
memoryRangeCount=deserialize_uint32_t(result["members"]["memoryRangeCount"]);}();

VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkInvalidateMappedMemoryRanges(
VkDevice device,
 uint32_t memoryRangeCount,
 const VkMappedMemoryRange* pMemoryRanges
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkInvalidateMappedMemoryRanges";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["memoryRangeCount"]=[&]() {
    json return_DrXrDAT=json({});
    return serialize_uint32_t(memoryRangeCount);}();
data_json["members"]["pMemoryRanges"]=[&]() {
    json return_GCDQESk=json({});
    
        if (pMemoryRanges==NULL){
            return_GCDQESk["null"]=true;
            return return_GCDQESk;
        }
        
        return_GCDQESk["members"]={};
        for(int GCDQESk=0; GCDQESk < memoryRangeCount; GCDQESk++){
            json temp;
            temp=[&]() {
    json return_sqNTOHy=json({});
    return serialize_VkMappedMemoryRange(pMemoryRanges[GCDQESk]);}();
            return_GCDQESk["members"].push_back(temp);
        }
        return return_GCDQESk;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
memoryRangeCount=deserialize_uint32_t(result["members"]["memoryRangeCount"]);}();

VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkGetDeviceMemoryCommitment(
VkDevice device,
 VkDeviceMemory memory,
 VkDeviceSize* pCommittedMemoryInBytes
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetDeviceMemoryCommitment";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["memory"]=[&]() {
    json return_OJZmLJB=json({});
    return serialize_VkDeviceMemory(memory);}();
data_json["members"]["pCommittedMemoryInBytes"]=[&]() {
    json return_pfhFKRe=json({});
    
        if (pCommittedMemoryInBytes==NULL){
            return_pfhFKRe["null"]=true;
            return return_pfhFKRe;
        }
        return_pfhFKRe=[&]() {
    json return_abkpmRp=json({});
    return_abkpmRp=[&]() {
    json return_AOQlmjb=json({});
    return serialize_uint64_t(*pCommittedMemoryInBytes);}();return return_abkpmRp;}();
return return_pfhFKRe;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
memory=deserialize_VkDeviceMemory(result["members"]["memory"]);}();
[&]() {

        if (result["members"]["pCommittedMemoryInBytes"].contains("null")){
        pCommittedMemoryInBytes=NULL;
        return;
        }
    [&]() {

        if (result["members"]["pCommittedMemoryInBytes"].contains("null")){
        pCommittedMemoryInBytes=NULL;
        return;
        }
    [&]() {
*(pCommittedMemoryInBytes)=deserialize_uint64_t(result["members"]["pCommittedMemoryInBytes"]);}();
}();}();
}
void vkGetBufferMemoryRequirements(
VkDevice device,
 VkBuffer buffer,
 VkMemoryRequirements* pMemoryRequirements
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetBufferMemoryRequirements";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["buffer"]=[&]() {
    json return_Fjwvwzv=json({});
    return serialize_VkBuffer(buffer);}();
data_json["members"]["pMemoryRequirements"]=[&]() {
    json return_eielYFe=json({});
    
        if (pMemoryRequirements==NULL){
            return_eielYFe["null"]=true;
            return return_eielYFe;
        }
        return_eielYFe=[&]() {
    json return_VipSsCT=json({});
    return serialize_VkMemoryRequirements(*pMemoryRequirements);}();
return return_eielYFe;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
buffer=deserialize_VkBuffer(result["members"]["buffer"]);}();
[&]() {

        if (result["members"]["pMemoryRequirements"].contains("null")){
        pMemoryRequirements=NULL;
        return;
        }
    [&]() {
*(pMemoryRequirements)=deserialize_VkMemoryRequirements(result["members"]["pMemoryRequirements"]);}();
}();
}
VkResult vkBindBufferMemory(
VkDevice device,
 VkBuffer buffer,
 VkDeviceMemory memory,
 VkDeviceSize memoryOffset
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkBindBufferMemory";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["buffer"]=[&]() {
    json return_Fjwvwzv=json({});
    return serialize_VkBuffer(buffer);}();
data_json["members"]["memory"]=[&]() {
    json return_OJZmLJB=json({});
    return serialize_VkDeviceMemory(memory);}();
data_json["members"]["memoryOffset"]=[&]() {
    json return_CwypnMR=json({});
    return_CwypnMR=[&]() {
    json return_fnrwJYv=json({});
    return serialize_uint64_t(memoryOffset);}();return return_CwypnMR;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
buffer=deserialize_VkBuffer(result["members"]["buffer"]);}();
[&]() {
memory=deserialize_VkDeviceMemory(result["members"]["memory"]);}();
[&]() {
[&]() {
memoryOffset=deserialize_uint64_t(result["members"]["memoryOffset"]);}();}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkGetImageMemoryRequirements(
VkDevice device,
 VkImage image,
 VkMemoryRequirements* pMemoryRequirements
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetImageMemoryRequirements";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["image"]=[&]() {
    json return_fgEkUQK=json({});
    return serialize_VkImage(image);}();
data_json["members"]["pMemoryRequirements"]=[&]() {
    json return_eielYFe=json({});
    
        if (pMemoryRequirements==NULL){
            return_eielYFe["null"]=true;
            return return_eielYFe;
        }
        return_eielYFe=[&]() {
    json return_VipSsCT=json({});
    return serialize_VkMemoryRequirements(*pMemoryRequirements);}();
return return_eielYFe;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
image=deserialize_VkImage(result["members"]["image"]);}();
[&]() {

        if (result["members"]["pMemoryRequirements"].contains("null")){
        pMemoryRequirements=NULL;
        return;
        }
    [&]() {
*(pMemoryRequirements)=deserialize_VkMemoryRequirements(result["members"]["pMemoryRequirements"]);}();
}();
}
VkResult vkBindImageMemory(
VkDevice device,
 VkImage image,
 VkDeviceMemory memory,
 VkDeviceSize memoryOffset
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkBindImageMemory";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["image"]=[&]() {
    json return_fgEkUQK=json({});
    return serialize_VkImage(image);}();
data_json["members"]["memory"]=[&]() {
    json return_OJZmLJB=json({});
    return serialize_VkDeviceMemory(memory);}();
data_json["members"]["memoryOffset"]=[&]() {
    json return_CwypnMR=json({});
    return_CwypnMR=[&]() {
    json return_fnrwJYv=json({});
    return serialize_uint64_t(memoryOffset);}();return return_CwypnMR;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
image=deserialize_VkImage(result["members"]["image"]);}();
[&]() {
memory=deserialize_VkDeviceMemory(result["members"]["memory"]);}();
[&]() {
[&]() {
memoryOffset=deserialize_uint64_t(result["members"]["memoryOffset"]);}();}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkGetImageSparseMemoryRequirements(
VkDevice device,
 VkImage image,
 uint32_t* pSparseMemoryRequirementCount,
 VkSparseImageMemoryRequirements* pSparseMemoryRequirements
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetImageSparseMemoryRequirements";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["image"]=[&]() {
    json return_fgEkUQK=json({});
    return serialize_VkImage(image);}();
data_json["members"]["pSparseMemoryRequirementCount"]=[&]() {
    json return_HoOHmri=json({});
    
        if (pSparseMemoryRequirementCount==NULL){
            return_HoOHmri["null"]=true;
            return return_HoOHmri;
        }
        return_HoOHmri=[&]() {
    json return_auEoviK=json({});
    return serialize_uint32_t(*pSparseMemoryRequirementCount);}();
return return_HoOHmri;}();
data_json["members"]["pSparseMemoryRequirements"]=[&]() {
    json return_JcvvZOZ=json({});
    
        if (pSparseMemoryRequirements==NULL){
            return_JcvvZOZ["null"]=true;
            return return_JcvvZOZ;
        }
        
        return_JcvvZOZ["members"]={};
        for(int JcvvZOZ=0; JcvvZOZ < *pSparseMemoryRequirementCount; JcvvZOZ++){
            json temp;
            temp=[&]() {
    json return_dYklWqu=json({});
    return serialize_VkSparseImageMemoryRequirements(pSparseMemoryRequirements[JcvvZOZ]);}();
            return_JcvvZOZ["members"].push_back(temp);
        }
        return return_JcvvZOZ;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
image=deserialize_VkImage(result["members"]["image"]);}();
[&]() {

        if (result["members"]["pSparseMemoryRequirementCount"].contains("null")){
        pSparseMemoryRequirementCount=NULL;
        return;
        }
    [&]() {
*(pSparseMemoryRequirementCount)=deserialize_uint32_t(result["members"]["pSparseMemoryRequirementCount"]);}();
}();
[&]() {

        if (result["members"]["pSparseMemoryRequirements"].contains("null")){
        pSparseMemoryRequirements=NULL;
        return;
        }
    
        for (int xMfwKQO=0; xMfwKQO < *pSparseMemoryRequirementCount; xMfwKQO++){
            [&]() {
pSparseMemoryRequirements[xMfwKQO]=deserialize_VkSparseImageMemoryRequirements(result["members"]["pSparseMemoryRequirements"]["members"][xMfwKQO]);}();;
        }
        }();
}
void vkGetPhysicalDeviceSparseImageFormatProperties(
VkPhysicalDevice physicalDevice,
 VkFormat format,
 VkImageType type,
 VkSampleCountFlagBits samples,
 VkImageUsageFlags usage,
 VkImageTiling tiling,
 uint32_t* pPropertyCount,
 VkSparseImageFormatProperties* pProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceSparseImageFormatProperties";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["format"]=[&]() {
    json return_ESSNhLl=json({});
    return serialize_VkFormat(format);}();
data_json["members"]["type"]=[&]() {
    json return_riYevWa=json({});
    return serialize_VkImageType(type);}();
data_json["members"]["samples"]=[&]() {
    json return_EMNaydU=json({});
    return serialize_VkSampleCountFlagBits(samples);}();
data_json["members"]["usage"]=[&]() {
    json return_QwDsmvQ=json({});
    return serialize_VkImageUsageFlags(usage);}();
data_json["members"]["tiling"]=[&]() {
    json return_UkQGtiM=json({});
    return serialize_VkImageTiling(tiling);}();
data_json["members"]["pPropertyCount"]=[&]() {
    json return_MnYOHdG=json({});
    
        if (pPropertyCount==NULL){
            return_MnYOHdG["null"]=true;
            return return_MnYOHdG;
        }
        return_MnYOHdG=[&]() {
    json return_rPOmKzR=json({});
    return serialize_uint32_t(*pPropertyCount);}();
return return_MnYOHdG;}();
data_json["members"]["pProperties"]=[&]() {
    json return_ToyRIQZ=json({});
    
        if (pProperties==NULL){
            return_ToyRIQZ["null"]=true;
            return return_ToyRIQZ;
        }
        
        return_ToyRIQZ["members"]={};
        for(int ToyRIQZ=0; ToyRIQZ < *pPropertyCount; ToyRIQZ++){
            json temp;
            temp=[&]() {
    json return_ABgEkiQ=json({});
    return serialize_VkSparseImageFormatProperties(pProperties[ToyRIQZ]);}();
            return_ToyRIQZ["members"].push_back(temp);
        }
        return return_ToyRIQZ;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();
[&]() {
format=deserialize_VkFormat(result["members"]["format"]);}();
[&]() {
type=deserialize_VkImageType(result["members"]["type"]);}();
[&]() {
samples=deserialize_VkSampleCountFlagBits(result["members"]["samples"]);}();
[&]() {
usage=deserialize_VkImageUsageFlags(result["members"]["usage"]);}();
[&]() {
tiling=deserialize_VkImageTiling(result["members"]["tiling"]);}();
[&]() {

        if (result["members"]["pPropertyCount"].contains("null")){
        pPropertyCount=NULL;
        return;
        }
    [&]() {
*(pPropertyCount)=deserialize_uint32_t(result["members"]["pPropertyCount"]);}();
}();
[&]() {

        if (result["members"]["pProperties"].contains("null")){
        pProperties=NULL;
        return;
        }
    
        for (int AImsUQd=0; AImsUQd < *pPropertyCount; AImsUQd++){
            [&]() {
pProperties[AImsUQd]=deserialize_VkSparseImageFormatProperties(result["members"]["pProperties"]["members"][AImsUQd]);}();;
        }
        }();
}
VkResult vkQueueBindSparse(
VkQueue queue,
 uint32_t bindInfoCount,
 const VkBindSparseInfo* pBindInfo,
 VkFence fence
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkQueueBindSparse";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)queue];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["queue"]=[&]() {
    json return_KYhcIBS=json({});
    return serialize_VkQueue(queue);}();
data_json["members"]["bindInfoCount"]=[&]() {
    json return_nEBKnUd=json({});
    return serialize_uint32_t(bindInfoCount);}();
data_json["members"]["pBindInfo"]=[&]() {
    json return_rsnbalh=json({});
    
        if (pBindInfo==NULL){
            return_rsnbalh["null"]=true;
            return return_rsnbalh;
        }
        
        return_rsnbalh["members"]={};
        for(int rsnbalh=0; rsnbalh < bindInfoCount; rsnbalh++){
            json temp;
            temp=[&]() {
    json return_MdVJjrJ=json({});
    return serialize_VkBindSparseInfo(pBindInfo[rsnbalh]);}();
            return_rsnbalh["members"].push_back(temp);
        }
        return return_rsnbalh;
        }();
data_json["members"]["fence"]=[&]() {
    json return_rCCyTaL=json({});
    return serialize_VkFence(fence);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
queue=deserialize_VkQueue(result["members"]["queue"]);}();
[&]() {
bindInfoCount=deserialize_uint32_t(result["members"]["bindInfoCount"]);}();

[&]() {
fence=deserialize_VkFence(result["members"]["fence"]);}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkCreateFence(
VkDevice device,
 const VkFenceCreateInfo* pCreateInfo,
 const VkAllocationCallbacks* pAllocator,
 VkFence* pFence
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreateFence";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pCreateInfo"]=[&]() {
    json return_InhPisi=json({});
    
        if (pCreateInfo==NULL){
            return_InhPisi["null"]=true;
            return return_InhPisi;
        }
        return_InhPisi=[&]() {
    json return_XymvyAa=json({});
    return serialize_VkFenceCreateInfo(*pCreateInfo);}();
return return_InhPisi;}();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pFence"]=[&]() {
    json return_zBsTPmH=json({});
    
        if (pFence==NULL){
            return_zBsTPmH["null"]=true;
            return return_zBsTPmH;
        }
        return_zBsTPmH=[&]() {
    json return_WJcpXwr=json({});
    return serialize_VkFence(*pFence);}();
return return_zBsTPmH;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();


[&]() {

        if (result["members"]["pFence"].contains("null")){
        pFence=NULL;
        return;
        }
    [&]() {
*(pFence)=deserialize_VkFence(result["members"]["pFence"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                handle_to_parent_handle_struct[(uintptr_t)(*pFence)]=parent;
                
return return_value;
}
void vkDestroyFence(
VkDevice device,
 VkFence fence,
 const VkAllocationCallbacks* pAllocator
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkDestroyFence";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["fence"]=[&]() {
    json return_uUveTbE=json({});
    return serialize_VkFence(fence);}();
data_json["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
fence=deserialize_VkFence(result["members"]["fence"]);}();

}
VkResult vkResetFences(
VkDevice device,
 uint32_t fenceCount,
 const VkFence* pFences
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkResetFences";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["fenceCount"]=[&]() {
    json return_oLxqUfl=json({});
    return serialize_uint32_t(fenceCount);}();
data_json["members"]["pFences"]=[&]() {
    json return_noqqmFa=json({});
    
        if (pFences==NULL){
            return_noqqmFa["null"]=true;
            return return_noqqmFa;
        }
        
        return_noqqmFa["members"]={};
        for(int noqqmFa=0; noqqmFa < fenceCount; noqqmFa++){
            json temp;
            temp=[&]() {
    json return_yvTvfks=json({});
    return serialize_VkFence(pFences[noqqmFa]);}();
            return_noqqmFa["members"].push_back(temp);
        }
        return return_noqqmFa;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
fenceCount=deserialize_uint32_t(result["members"]["fenceCount"]);}();

VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkGetFenceStatus(
VkDevice device,
 VkFence fence
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetFenceStatus";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["fence"]=[&]() {
    json return_rCCyTaL=json({});
    return serialize_VkFence(fence);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
fence=deserialize_VkFence(result["members"]["fence"]);}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkWaitForFences(
VkDevice device,
 uint32_t fenceCount,
 const VkFence* pFences,
 VkBool32 waitAll,
 uint64_t timeout
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkWaitForFences";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["fenceCount"]=[&]() {
    json return_oLxqUfl=json({});
    return serialize_uint32_t(fenceCount);}();
data_json["members"]["pFences"]=[&]() {
    json return_YFbfWmG=json({});
    
        if (pFences==NULL){
            return_YFbfWmG["null"]=true;
            return return_YFbfWmG;
        }
        
        return_YFbfWmG["members"]={};
        for(int YFbfWmG=0; YFbfWmG < fenceCount; YFbfWmG++){
            json temp;
            temp=[&]() {
    json return_RwAVgvQ=json({});
    return serialize_VkFence(pFences[YFbfWmG]);}();
            return_YFbfWmG["members"].push_back(temp);
        }
        return return_YFbfWmG;
        }();
data_json["members"]["waitAll"]=[&]() {
    json return_EYJJfHR=json({});
    return_EYJJfHR=[&]() {
    json return_otgNsTv=json({});
    return serialize_uint32_t(waitAll);}();return return_EYJJfHR;}();
data_json["members"]["timeout"]=[&]() {
    json return_CYRKadv=json({});
    return serialize_uint64_t(timeout);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
fenceCount=deserialize_uint32_t(result["members"]["fenceCount"]);}();

[&]() {
[&]() {
waitAll=deserialize_uint32_t(result["members"]["waitAll"]);}();}();
[&]() {
timeout=deserialize_uint64_t(result["members"]["timeout"]);}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkCreateSemaphore(
VkDevice device,
 const VkSemaphoreCreateInfo* pCreateInfo,
 const VkAllocationCallbacks* pAllocator,
 VkSemaphore* pSemaphore
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreateSemaphore";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pCreateInfo"]=[&]() {
    json return_xmVbtzK=json({});
    
        if (pCreateInfo==NULL){
            return_xmVbtzK["null"]=true;
            return return_xmVbtzK;
        }
        return_xmVbtzK=[&]() {
    json return_jEVpenU=json({});
    return serialize_VkSemaphoreCreateInfo(*pCreateInfo);}();
return return_xmVbtzK;}();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pSemaphore"]=[&]() {
    json return_EFOALCS=json({});
    
        if (pSemaphore==NULL){
            return_EFOALCS["null"]=true;
            return return_EFOALCS;
        }
        return_EFOALCS=[&]() {
    json return_lOFLhag=json({});
    return serialize_VkSemaphore(*pSemaphore);}();
return return_EFOALCS;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();


[&]() {

        if (result["members"]["pSemaphore"].contains("null")){
        pSemaphore=NULL;
        return;
        }
    [&]() {
*(pSemaphore)=deserialize_VkSemaphore(result["members"]["pSemaphore"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                handle_to_parent_handle_struct[(uintptr_t)(*pSemaphore)]=parent;
                
return return_value;
}
void vkDestroySemaphore(
VkDevice device,
 VkSemaphore semaphore,
 const VkAllocationCallbacks* pAllocator
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkDestroySemaphore";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["semaphore"]=[&]() {
    json return_NeBBGDW=json({});
    return serialize_VkSemaphore(semaphore);}();
data_json["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
semaphore=deserialize_VkSemaphore(result["members"]["semaphore"]);}();

}
VkResult vkCreateEvent(
VkDevice device,
 const VkEventCreateInfo* pCreateInfo,
 const VkAllocationCallbacks* pAllocator,
 VkEvent* pEvent
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreateEvent";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pCreateInfo"]=[&]() {
    json return_hsCmSQi=json({});
    
        if (pCreateInfo==NULL){
            return_hsCmSQi["null"]=true;
            return return_hsCmSQi;
        }
        return_hsCmSQi=[&]() {
    json return_IIeSGQi=json({});
    return serialize_VkEventCreateInfo(*pCreateInfo);}();
return return_hsCmSQi;}();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pEvent"]=[&]() {
    json return_cvCJvFz=json({});
    
        if (pEvent==NULL){
            return_cvCJvFz["null"]=true;
            return return_cvCJvFz;
        }
        return_cvCJvFz=[&]() {
    json return_YdSuKCD=json({});
    return serialize_VkEvent(*pEvent);}();
return return_cvCJvFz;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();


[&]() {

        if (result["members"]["pEvent"].contains("null")){
        pEvent=NULL;
        return;
        }
    [&]() {
*(pEvent)=deserialize_VkEvent(result["members"]["pEvent"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                handle_to_parent_handle_struct[(uintptr_t)(*pEvent)]=parent;
                
return return_value;
}
void vkDestroyEvent(
VkDevice device,
 VkEvent event,
 const VkAllocationCallbacks* pAllocator
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkDestroyEvent";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["event"]=[&]() {
    json return_LAeltAe=json({});
    return serialize_VkEvent(event);}();
data_json["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
event=deserialize_VkEvent(result["members"]["event"]);}();

}
VkResult vkGetEventStatus(
VkDevice device,
 VkEvent event
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetEventStatus";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["event"]=[&]() {
    json return_uUtwjXV=json({});
    return serialize_VkEvent(event);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
event=deserialize_VkEvent(result["members"]["event"]);}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkSetEvent(
VkDevice device,
 VkEvent event
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkSetEvent";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["event"]=[&]() {
    json return_uUtwjXV=json({});
    return serialize_VkEvent(event);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
event=deserialize_VkEvent(result["members"]["event"]);}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkResetEvent(
VkDevice device,
 VkEvent event
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkResetEvent";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["event"]=[&]() {
    json return_uUtwjXV=json({});
    return serialize_VkEvent(event);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
event=deserialize_VkEvent(result["members"]["event"]);}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkCreateQueryPool(
VkDevice device,
 const VkQueryPoolCreateInfo* pCreateInfo,
 const VkAllocationCallbacks* pAllocator,
 VkQueryPool* pQueryPool
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreateQueryPool";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pCreateInfo"]=[&]() {
    json return_IzEqsna=json({});
    
        if (pCreateInfo==NULL){
            return_IzEqsna["null"]=true;
            return return_IzEqsna;
        }
        return_IzEqsna=[&]() {
    json return_EtikQqZ=json({});
    return serialize_VkQueryPoolCreateInfo(*pCreateInfo);}();
return return_IzEqsna;}();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pQueryPool"]=[&]() {
    json return_NSHWQnu=json({});
    
        if (pQueryPool==NULL){
            return_NSHWQnu["null"]=true;
            return return_NSHWQnu;
        }
        return_NSHWQnu=[&]() {
    json return_QeQTTEO=json({});
    return serialize_VkQueryPool(*pQueryPool);}();
return return_NSHWQnu;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();


[&]() {

        if (result["members"]["pQueryPool"].contains("null")){
        pQueryPool=NULL;
        return;
        }
    [&]() {
*(pQueryPool)=deserialize_VkQueryPool(result["members"]["pQueryPool"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                handle_to_parent_handle_struct[(uintptr_t)(*pQueryPool)]=parent;
                
return return_value;
}
void vkDestroyQueryPool(
VkDevice device,
 VkQueryPool queryPool,
 const VkAllocationCallbacks* pAllocator
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkDestroyQueryPool";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["queryPool"]=[&]() {
    json return_hLGHCzh=json({});
    return serialize_VkQueryPool(queryPool);}();
data_json["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
queryPool=deserialize_VkQueryPool(result["members"]["queryPool"]);}();

}
VkResult vkGetQueryPoolResults(
VkDevice device,
 VkQueryPool queryPool,
 uint32_t firstQuery,
 uint32_t queryCount,
 size_t dataSize,
 void* pData,
 VkDeviceSize stride,
 VkQueryResultFlags flags
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetQueryPoolResults";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["queryPool"]=[&]() {
    json return_hLGHCzh=json({});
    return serialize_VkQueryPool(queryPool);}();
data_json["members"]["firstQuery"]=[&]() {
    json return_NDUBmTE=json({});
    return serialize_uint32_t(firstQuery);}();
data_json["members"]["queryCount"]=[&]() {
    json return_qTWGWQh=json({});
    return serialize_uint32_t(queryCount);}();
data_json["members"]["dataSize"]=[&]() {
    json return_mCuLMQj=json({});
    return serialize_size_t(dataSize);}();
data_json["members"]["pData"]=[&]() {
    json return_uMNHZoi=json({});
    
        if (pData==NULL){
            return_uMNHZoi["null"]=true;
            return return_uMNHZoi;
        }
        return serialize_void_p(pData);
}();
data_json["members"]["stride"]=[&]() {
    json return_MQAmiOM=json({});
    return_MQAmiOM=[&]() {
    json return_jeGZpau=json({});
    return serialize_uint64_t(stride);}();return return_MQAmiOM;}();
data_json["members"]["flags"]=[&]() {
    json return_ZmykXqP=json({});
    return serialize_VkQueryResultFlags(flags);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
queryPool=deserialize_VkQueryPool(result["members"]["queryPool"]);}();
[&]() {
firstQuery=deserialize_uint32_t(result["members"]["firstQuery"]);}();
[&]() {
queryCount=deserialize_uint32_t(result["members"]["queryCount"]);}();
[&]() {
dataSize=deserialize_size_t(result["members"]["dataSize"]);}();
[&]() {

        if (result["members"]["pData"].contains("null")){
        pData=NULL;
        return;
        }
    pData=deserialize_void_p(result["members"]["pData"]);
}();
[&]() {
[&]() {
stride=deserialize_uint64_t(result["members"]["stride"]);}();}();
[&]() {
flags=deserialize_VkQueryResultFlags(result["members"]["flags"]);}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkResetQueryPool(
VkDevice device,
 VkQueryPool queryPool,
 uint32_t firstQuery,
 uint32_t queryCount
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkResetQueryPool";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["queryPool"]=[&]() {
    json return_hLGHCzh=json({});
    return serialize_VkQueryPool(queryPool);}();
data_json["members"]["firstQuery"]=[&]() {
    json return_NDUBmTE=json({});
    return serialize_uint32_t(firstQuery);}();
data_json["members"]["queryCount"]=[&]() {
    json return_uMPzGuZ=json({});
    return serialize_uint32_t(queryCount);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
queryPool=deserialize_VkQueryPool(result["members"]["queryPool"]);}();
[&]() {
firstQuery=deserialize_uint32_t(result["members"]["firstQuery"]);}();
[&]() {
queryCount=deserialize_uint32_t(result["members"]["queryCount"]);}();
}
void vkResetQueryPoolEXT(
VkDevice device,
 VkQueryPool queryPool,
 uint32_t firstQuery,
 uint32_t queryCount
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkResetQueryPoolEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["queryPool"]=[&]() {
    json return_hLGHCzh=json({});
    return serialize_VkQueryPool(queryPool);}();
data_json["members"]["firstQuery"]=[&]() {
    json return_NDUBmTE=json({});
    return serialize_uint32_t(firstQuery);}();
data_json["members"]["queryCount"]=[&]() {
    json return_uMPzGuZ=json({});
    return serialize_uint32_t(queryCount);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
queryPool=deserialize_VkQueryPool(result["members"]["queryPool"]);}();
[&]() {
firstQuery=deserialize_uint32_t(result["members"]["firstQuery"]);}();
[&]() {
queryCount=deserialize_uint32_t(result["members"]["queryCount"]);}();
}
VkResult vkCreateBuffer(
VkDevice device,
 const VkBufferCreateInfo* pCreateInfo,
 const VkAllocationCallbacks* pAllocator,
 VkBuffer* pBuffer
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreateBuffer";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pCreateInfo"]=[&]() {
    json return_pyjotWD=json({});
    
        if (pCreateInfo==NULL){
            return_pyjotWD["null"]=true;
            return return_pyjotWD;
        }
        return_pyjotWD=[&]() {
    json return_fsnuqZv=json({});
    return serialize_VkBufferCreateInfo(*pCreateInfo);}();
return return_pyjotWD;}();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pBuffer"]=[&]() {
    json return_BRVliuB=json({});
    
        if (pBuffer==NULL){
            return_BRVliuB["null"]=true;
            return return_BRVliuB;
        }
        return_BRVliuB=[&]() {
    json return_BSXCqYn=json({});
    return serialize_VkBuffer(*pBuffer);}();
return return_BRVliuB;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();


[&]() {

        if (result["members"]["pBuffer"].contains("null")){
        pBuffer=NULL;
        return;
        }
    [&]() {
*(pBuffer)=deserialize_VkBuffer(result["members"]["pBuffer"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                handle_to_parent_handle_struct[(uintptr_t)(*pBuffer)]=parent;
                
return return_value;
}
void vkDestroyBuffer(
VkDevice device,
 VkBuffer buffer,
 const VkAllocationCallbacks* pAllocator
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkDestroyBuffer";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["buffer"]=[&]() {
    json return_Fjwvwzv=json({});
    return serialize_VkBuffer(buffer);}();
data_json["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
buffer=deserialize_VkBuffer(result["members"]["buffer"]);}();

}
VkResult vkCreateBufferView(
VkDevice device,
 const VkBufferViewCreateInfo* pCreateInfo,
 const VkAllocationCallbacks* pAllocator,
 VkBufferView* pView
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreateBufferView";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pCreateInfo"]=[&]() {
    json return_RsKbxoF=json({});
    
        if (pCreateInfo==NULL){
            return_RsKbxoF["null"]=true;
            return return_RsKbxoF;
        }
        return_RsKbxoF=[&]() {
    json return_nmkmoBG=json({});
    return serialize_VkBufferViewCreateInfo(*pCreateInfo);}();
return return_RsKbxoF;}();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pView"]=[&]() {
    json return_TqkDHmq=json({});
    
        if (pView==NULL){
            return_TqkDHmq["null"]=true;
            return return_TqkDHmq;
        }
        return_TqkDHmq=[&]() {
    json return_gkhjAJZ=json({});
    return serialize_VkBufferView(*pView);}();
return return_TqkDHmq;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();


[&]() {

        if (result["members"]["pView"].contains("null")){
        pView=NULL;
        return;
        }
    [&]() {
*(pView)=deserialize_VkBufferView(result["members"]["pView"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                handle_to_parent_handle_struct[(uintptr_t)(*pView)]=parent;
                
return return_value;
}
void vkDestroyBufferView(
VkDevice device,
 VkBufferView bufferView,
 const VkAllocationCallbacks* pAllocator
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkDestroyBufferView";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["bufferView"]=[&]() {
    json return_fMELlWC=json({});
    return serialize_VkBufferView(bufferView);}();
data_json["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
bufferView=deserialize_VkBufferView(result["members"]["bufferView"]);}();

}
VkResult vkCreateImage(
VkDevice device,
 const VkImageCreateInfo* pCreateInfo,
 const VkAllocationCallbacks* pAllocator,
 VkImage* pImage
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreateImage";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pCreateInfo"]=[&]() {
    json return_VmFEleQ=json({});
    
        if (pCreateInfo==NULL){
            return_VmFEleQ["null"]=true;
            return return_VmFEleQ;
        }
        return_VmFEleQ=[&]() {
    json return_mtsHVIS=json({});
    return serialize_VkImageCreateInfo(*pCreateInfo);}();
return return_VmFEleQ;}();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pImage"]=[&]() {
    json return_uVXSXiL=json({});
    
        if (pImage==NULL){
            return_uVXSXiL["null"]=true;
            return return_uVXSXiL;
        }
        return_uVXSXiL=[&]() {
    json return_WJifzww=json({});
    return serialize_VkImage(*pImage);}();
return return_uVXSXiL;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();


[&]() {

        if (result["members"]["pImage"].contains("null")){
        pImage=NULL;
        return;
        }
    [&]() {
*(pImage)=deserialize_VkImage(result["members"]["pImage"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                handle_to_parent_handle_struct[(uintptr_t)(*pImage)]=parent;
                
return return_value;
}
void vkDestroyImage(
VkDevice device,
 VkImage image,
 const VkAllocationCallbacks* pAllocator
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkDestroyImage";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["image"]=[&]() {
    json return_fgEkUQK=json({});
    return serialize_VkImage(image);}();
data_json["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
image=deserialize_VkImage(result["members"]["image"]);}();

}
void vkGetImageSubresourceLayout(
VkDevice device,
 VkImage image,
 const VkImageSubresource* pSubresource,
 VkSubresourceLayout* pLayout
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetImageSubresourceLayout";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["image"]=[&]() {
    json return_fgEkUQK=json({});
    return serialize_VkImage(image);}();
data_json["members"]["pSubresource"]=[&]() {
    json return_GsBhOLL=json({});
    
        if (pSubresource==NULL){
            return_GsBhOLL["null"]=true;
            return return_GsBhOLL;
        }
        return_GsBhOLL=[&]() {
    json return_aIMvvfq=json({});
    return serialize_VkImageSubresource(*pSubresource);}();
return return_GsBhOLL;}();
data_json["members"]["pLayout"]=[&]() {
    json return_qgpJVgb=json({});
    
        if (pLayout==NULL){
            return_qgpJVgb["null"]=true;
            return return_qgpJVgb;
        }
        return_qgpJVgb=[&]() {
    json return_DLdfbcJ=json({});
    return serialize_VkSubresourceLayout(*pLayout);}();
return return_qgpJVgb;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
image=deserialize_VkImage(result["members"]["image"]);}();

[&]() {

        if (result["members"]["pLayout"].contains("null")){
        pLayout=NULL;
        return;
        }
    [&]() {
*(pLayout)=deserialize_VkSubresourceLayout(result["members"]["pLayout"]);}();
}();
}
VkResult vkCreateImageView(
VkDevice device,
 const VkImageViewCreateInfo* pCreateInfo,
 const VkAllocationCallbacks* pAllocator,
 VkImageView* pView
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreateImageView";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pCreateInfo"]=[&]() {
    json return_vMCNnLC=json({});
    
        if (pCreateInfo==NULL){
            return_vMCNnLC["null"]=true;
            return return_vMCNnLC;
        }
        return_vMCNnLC=[&]() {
    json return_LHPkLYG=json({});
    return serialize_VkImageViewCreateInfo(*pCreateInfo);}();
return return_vMCNnLC;}();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pView"]=[&]() {
    json return_GRDMWAC=json({});
    
        if (pView==NULL){
            return_GRDMWAC["null"]=true;
            return return_GRDMWAC;
        }
        return_GRDMWAC=[&]() {
    json return_fziRgds=json({});
    return serialize_VkImageView(*pView);}();
return return_GRDMWAC;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();


[&]() {

        if (result["members"]["pView"].contains("null")){
        pView=NULL;
        return;
        }
    [&]() {
*(pView)=deserialize_VkImageView(result["members"]["pView"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                handle_to_parent_handle_struct[(uintptr_t)(*pView)]=parent;
                
return return_value;
}
void vkDestroyImageView(
VkDevice device,
 VkImageView imageView,
 const VkAllocationCallbacks* pAllocator
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkDestroyImageView";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["imageView"]=[&]() {
    json return_TXEDCEI=json({});
    return serialize_VkImageView(imageView);}();
data_json["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
imageView=deserialize_VkImageView(result["members"]["imageView"]);}();

}
VkResult vkCreateShaderModule(
VkDevice device,
 const VkShaderModuleCreateInfo* pCreateInfo,
 const VkAllocationCallbacks* pAllocator,
 VkShaderModule* pShaderModule
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreateShaderModule";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pCreateInfo"]=[&]() {
    json return_zQuPJLA=json({});
    
        if (pCreateInfo==NULL){
            return_zQuPJLA["null"]=true;
            return return_zQuPJLA;
        }
        return_zQuPJLA=[&]() {
    json return_BZkuQie=json({});
    return serialize_VkShaderModuleCreateInfo(*pCreateInfo);}();
return return_zQuPJLA;}();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pShaderModule"]=[&]() {
    json return_CDnEWkq=json({});
    
        if (pShaderModule==NULL){
            return_CDnEWkq["null"]=true;
            return return_CDnEWkq;
        }
        return_CDnEWkq=[&]() {
    json return_OceuVmd=json({});
    return serialize_VkShaderModule(*pShaderModule);}();
return return_CDnEWkq;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();


[&]() {

        if (result["members"]["pShaderModule"].contains("null")){
        pShaderModule=NULL;
        return;
        }
    [&]() {
*(pShaderModule)=deserialize_VkShaderModule(result["members"]["pShaderModule"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                handle_to_parent_handle_struct[(uintptr_t)(*pShaderModule)]=parent;
                
return return_value;
}
void vkDestroyShaderModule(
VkDevice device,
 VkShaderModule shaderModule,
 const VkAllocationCallbacks* pAllocator
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkDestroyShaderModule";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["shaderModule"]=[&]() {
    json return_StBFTOZ=json({});
    return serialize_VkShaderModule(shaderModule);}();
data_json["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
shaderModule=deserialize_VkShaderModule(result["members"]["shaderModule"]);}();

}
VkResult vkCreatePipelineCache(
VkDevice device,
 const VkPipelineCacheCreateInfo* pCreateInfo,
 const VkAllocationCallbacks* pAllocator,
 VkPipelineCache* pPipelineCache
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreatePipelineCache";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pCreateInfo"]=[&]() {
    json return_LUlinZP=json({});
    
        if (pCreateInfo==NULL){
            return_LUlinZP["null"]=true;
            return return_LUlinZP;
        }
        return_LUlinZP=[&]() {
    json return_EJPMmxu=json({});
    return serialize_VkPipelineCacheCreateInfo(*pCreateInfo);}();
return return_LUlinZP;}();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pPipelineCache"]=[&]() {
    json return_qHxmzrm=json({});
    
        if (pPipelineCache==NULL){
            return_qHxmzrm["null"]=true;
            return return_qHxmzrm;
        }
        return_qHxmzrm=[&]() {
    json return_gvaZlMv=json({});
    return serialize_VkPipelineCache(*pPipelineCache);}();
return return_qHxmzrm;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();


[&]() {

        if (result["members"]["pPipelineCache"].contains("null")){
        pPipelineCache=NULL;
        return;
        }
    [&]() {
*(pPipelineCache)=deserialize_VkPipelineCache(result["members"]["pPipelineCache"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                handle_to_parent_handle_struct[(uintptr_t)(*pPipelineCache)]=parent;
                
return return_value;
}
void vkDestroyPipelineCache(
VkDevice device,
 VkPipelineCache pipelineCache,
 const VkAllocationCallbacks* pAllocator
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkDestroyPipelineCache";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pipelineCache"]=[&]() {
    json return_sRQlJCP=json({});
    return serialize_VkPipelineCache(pipelineCache);}();
data_json["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
pipelineCache=deserialize_VkPipelineCache(result["members"]["pipelineCache"]);}();

}
VkResult vkGetPipelineCacheData(
VkDevice device,
 VkPipelineCache pipelineCache,
 size_t* pDataSize,
 void* pData
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPipelineCacheData";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pipelineCache"]=[&]() {
    json return_sRQlJCP=json({});
    return serialize_VkPipelineCache(pipelineCache);}();
data_json["members"]["pDataSize"]=[&]() {
    json return_DeyPpRh=json({});
    
        if (pDataSize==NULL){
            return_DeyPpRh["null"]=true;
            return return_DeyPpRh;
        }
        return_DeyPpRh=[&]() {
    json return_ffvzSRv=json({});
    return serialize_size_t(*pDataSize);}();
return return_DeyPpRh;}();
data_json["members"]["pData"]=[&]() {
    json return_MOqETBu=json({});
    
        if (pData==NULL){
            return_MOqETBu["null"]=true;
            return return_MOqETBu;
        }
        return serialize_void_p(pData);
}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
pipelineCache=deserialize_VkPipelineCache(result["members"]["pipelineCache"]);}();
[&]() {

        if (result["members"]["pDataSize"].contains("null")){
        pDataSize=NULL;
        return;
        }
    [&]() {
*(pDataSize)=deserialize_size_t(result["members"]["pDataSize"]);}();
}();
[&]() {

        if (result["members"]["pData"].contains("null")){
        pData=NULL;
        return;
        }
    pData=deserialize_void_p(result["members"]["pData"]);
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkMergePipelineCaches(
VkDevice device,
 VkPipelineCache dstCache,
 uint32_t srcCacheCount,
 const VkPipelineCache* pSrcCaches
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkMergePipelineCaches";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["dstCache"]=[&]() {
    json return_gBmCPeC=json({});
    return serialize_VkPipelineCache(dstCache);}();
data_json["members"]["srcCacheCount"]=[&]() {
    json return_agrMtpa=json({});
    return serialize_uint32_t(srcCacheCount);}();
data_json["members"]["pSrcCaches"]=[&]() {
    json return_EMLiyEc=json({});
    
        if (pSrcCaches==NULL){
            return_EMLiyEc["null"]=true;
            return return_EMLiyEc;
        }
        
        return_EMLiyEc["members"]={};
        for(int EMLiyEc=0; EMLiyEc < srcCacheCount; EMLiyEc++){
            json temp;
            temp=[&]() {
    json return_WIRSPHD=json({});
    return serialize_VkPipelineCache(pSrcCaches[EMLiyEc]);}();
            return_EMLiyEc["members"].push_back(temp);
        }
        return return_EMLiyEc;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
dstCache=deserialize_VkPipelineCache(result["members"]["dstCache"]);}();
[&]() {
srcCacheCount=deserialize_uint32_t(result["members"]["srcCacheCount"]);}();

VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkCreateGraphicsPipelines(
VkDevice device,
 VkPipelineCache pipelineCache,
 uint32_t createInfoCount,
 const VkGraphicsPipelineCreateInfo* pCreateInfos,
 const VkAllocationCallbacks* pAllocator,
 VkPipeline* pPipelines
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreateGraphicsPipelines";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pipelineCache"]=[&]() {
    json return_sRQlJCP=json({});
    return serialize_VkPipelineCache(pipelineCache);}();
data_json["members"]["createInfoCount"]=[&]() {
    json return_cRiHaUT=json({});
    return serialize_uint32_t(createInfoCount);}();
data_json["members"]["pCreateInfos"]=[&]() {
    json return_QHASSNU=json({});
    
        if (pCreateInfos==NULL){
            return_QHASSNU["null"]=true;
            return return_QHASSNU;
        }
        
        return_QHASSNU["members"]={};
        for(int QHASSNU=0; QHASSNU < createInfoCount; QHASSNU++){
            json temp;
            temp=[&]() {
    json return_GOShvvh=json({});
    return serialize_VkGraphicsPipelineCreateInfo(pCreateInfos[QHASSNU]);}();
            return_QHASSNU["members"].push_back(temp);
        }
        return return_QHASSNU;
        }();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pPipelines"]=[&]() {
    json return_kBzHgXu=json({});
    
        if (pPipelines==NULL){
            return_kBzHgXu["null"]=true;
            return return_kBzHgXu;
        }
        
        return_kBzHgXu["members"]={};
        for(int kBzHgXu=0; kBzHgXu < createInfoCount; kBzHgXu++){
            json temp;
            temp=[&]() {
    json return_EvuMoqq=json({});
    return serialize_VkPipeline(pPipelines[kBzHgXu]);}();
            return_kBzHgXu["members"].push_back(temp);
        }
        return return_kBzHgXu;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
pipelineCache=deserialize_VkPipelineCache(result["members"]["pipelineCache"]);}();
[&]() {
createInfoCount=deserialize_uint32_t(result["members"]["createInfoCount"]);}();


[&]() {

        if (result["members"]["pPipelines"].contains("null")){
        pPipelines=NULL;
        return;
        }
    
        for (int HHbbdGU=0; HHbbdGU < createInfoCount; HHbbdGU++){
            [&]() {
pPipelines[HHbbdGU]=deserialize_VkPipeline(result["members"]["pPipelines"]["members"][HHbbdGU]);}();;
        }
        }();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                for (int i=0; i<createInfoCount; i++){
                    handle_to_parent_handle_struct[(uintptr_t)pPipelines[i]]=parent;
                }
                
return return_value;
}
VkResult vkCreateComputePipelines(
VkDevice device,
 VkPipelineCache pipelineCache,
 uint32_t createInfoCount,
 const VkComputePipelineCreateInfo* pCreateInfos,
 const VkAllocationCallbacks* pAllocator,
 VkPipeline* pPipelines
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreateComputePipelines";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pipelineCache"]=[&]() {
    json return_sRQlJCP=json({});
    return serialize_VkPipelineCache(pipelineCache);}();
data_json["members"]["createInfoCount"]=[&]() {
    json return_cRiHaUT=json({});
    return serialize_uint32_t(createInfoCount);}();
data_json["members"]["pCreateInfos"]=[&]() {
    json return_SmdccXw=json({});
    
        if (pCreateInfos==NULL){
            return_SmdccXw["null"]=true;
            return return_SmdccXw;
        }
        
        return_SmdccXw["members"]={};
        for(int SmdccXw=0; SmdccXw < createInfoCount; SmdccXw++){
            json temp;
            temp=[&]() {
    json return_GcGKnxw=json({});
    return serialize_VkComputePipelineCreateInfo(pCreateInfos[SmdccXw]);}();
            return_SmdccXw["members"].push_back(temp);
        }
        return return_SmdccXw;
        }();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pPipelines"]=[&]() {
    json return_kBzHgXu=json({});
    
        if (pPipelines==NULL){
            return_kBzHgXu["null"]=true;
            return return_kBzHgXu;
        }
        
        return_kBzHgXu["members"]={};
        for(int kBzHgXu=0; kBzHgXu < createInfoCount; kBzHgXu++){
            json temp;
            temp=[&]() {
    json return_EvuMoqq=json({});
    return serialize_VkPipeline(pPipelines[kBzHgXu]);}();
            return_kBzHgXu["members"].push_back(temp);
        }
        return return_kBzHgXu;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
pipelineCache=deserialize_VkPipelineCache(result["members"]["pipelineCache"]);}();
[&]() {
createInfoCount=deserialize_uint32_t(result["members"]["createInfoCount"]);}();


[&]() {

        if (result["members"]["pPipelines"].contains("null")){
        pPipelines=NULL;
        return;
        }
    
        for (int HHbbdGU=0; HHbbdGU < createInfoCount; HHbbdGU++){
            [&]() {
pPipelines[HHbbdGU]=deserialize_VkPipeline(result["members"]["pPipelines"]["members"][HHbbdGU]);}();;
        }
        }();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                for (int i=0; i<createInfoCount; i++){
                    handle_to_parent_handle_struct[(uintptr_t)pPipelines[i]]=parent;
                }
                
return return_value;
}
VkResult vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(
VkDevice device,
 VkRenderPass renderpass,
 VkExtent2D* pMaxWorkgroupSize
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["renderpass"]=[&]() {
    json return_HbYLjOQ=json({});
    return serialize_VkRenderPass(renderpass);}();
data_json["members"]["pMaxWorkgroupSize"]=[&]() {
    json return_qTkFMPy=json({});
    
        if (pMaxWorkgroupSize==NULL){
            return_qTkFMPy["null"]=true;
            return return_qTkFMPy;
        }
        return_qTkFMPy=[&]() {
    json return_vigVOnY=json({});
    return serialize_VkExtent2D(*pMaxWorkgroupSize);}();
return return_qTkFMPy;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
renderpass=deserialize_VkRenderPass(result["members"]["renderpass"]);}();
[&]() {

        if (result["members"]["pMaxWorkgroupSize"].contains("null")){
        pMaxWorkgroupSize=NULL;
        return;
        }
    [&]() {
*(pMaxWorkgroupSize)=deserialize_VkExtent2D(result["members"]["pMaxWorkgroupSize"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkDestroyPipeline(
VkDevice device,
 VkPipeline pipeline,
 const VkAllocationCallbacks* pAllocator
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkDestroyPipeline";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pipeline"]=[&]() {
    json return_xIUyQCN=json({});
    return serialize_VkPipeline(pipeline);}();
data_json["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
pipeline=deserialize_VkPipeline(result["members"]["pipeline"]);}();

}
VkResult vkCreatePipelineLayout(
VkDevice device,
 const VkPipelineLayoutCreateInfo* pCreateInfo,
 const VkAllocationCallbacks* pAllocator,
 VkPipelineLayout* pPipelineLayout
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreatePipelineLayout";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pCreateInfo"]=[&]() {
    json return_RQGktVl=json({});
    
        if (pCreateInfo==NULL){
            return_RQGktVl["null"]=true;
            return return_RQGktVl;
        }
        return_RQGktVl=[&]() {
    json return_cMsXZOW=json({});
    return serialize_VkPipelineLayoutCreateInfo(*pCreateInfo);}();
return return_RQGktVl;}();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pPipelineLayout"]=[&]() {
    json return_pqmQaMo=json({});
    
        if (pPipelineLayout==NULL){
            return_pqmQaMo["null"]=true;
            return return_pqmQaMo;
        }
        return_pqmQaMo=[&]() {
    json return_lLGxOIV=json({});
    return serialize_VkPipelineLayout(*pPipelineLayout);}();
return return_pqmQaMo;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();


[&]() {

        if (result["members"]["pPipelineLayout"].contains("null")){
        pPipelineLayout=NULL;
        return;
        }
    [&]() {
*(pPipelineLayout)=deserialize_VkPipelineLayout(result["members"]["pPipelineLayout"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                handle_to_parent_handle_struct[(uintptr_t)(*pPipelineLayout)]=parent;
                
return return_value;
}
void vkDestroyPipelineLayout(
VkDevice device,
 VkPipelineLayout pipelineLayout,
 const VkAllocationCallbacks* pAllocator
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkDestroyPipelineLayout";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pipelineLayout"]=[&]() {
    json return_kykmcbl=json({});
    return serialize_VkPipelineLayout(pipelineLayout);}();
data_json["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
pipelineLayout=deserialize_VkPipelineLayout(result["members"]["pipelineLayout"]);}();

}
VkResult vkCreateSampler(
VkDevice device,
 const VkSamplerCreateInfo* pCreateInfo,
 const VkAllocationCallbacks* pAllocator,
 VkSampler* pSampler
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreateSampler";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pCreateInfo"]=[&]() {
    json return_WuBdMmw=json({});
    
        if (pCreateInfo==NULL){
            return_WuBdMmw["null"]=true;
            return return_WuBdMmw;
        }
        return_WuBdMmw=[&]() {
    json return_EEBbWEc=json({});
    return serialize_VkSamplerCreateInfo(*pCreateInfo);}();
return return_WuBdMmw;}();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pSampler"]=[&]() {
    json return_YnzdpEe=json({});
    
        if (pSampler==NULL){
            return_YnzdpEe["null"]=true;
            return return_YnzdpEe;
        }
        return_YnzdpEe=[&]() {
    json return_lGWFwiD=json({});
    return serialize_VkSampler(*pSampler);}();
return return_YnzdpEe;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();


[&]() {

        if (result["members"]["pSampler"].contains("null")){
        pSampler=NULL;
        return;
        }
    [&]() {
*(pSampler)=deserialize_VkSampler(result["members"]["pSampler"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                handle_to_parent_handle_struct[(uintptr_t)(*pSampler)]=parent;
                
return return_value;
}
void vkDestroySampler(
VkDevice device,
 VkSampler sampler,
 const VkAllocationCallbacks* pAllocator
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkDestroySampler";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["sampler"]=[&]() {
    json return_qfqBCAh=json({});
    return serialize_VkSampler(sampler);}();
data_json["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
sampler=deserialize_VkSampler(result["members"]["sampler"]);}();

}
VkResult vkCreateDescriptorSetLayout(
VkDevice device,
 const VkDescriptorSetLayoutCreateInfo* pCreateInfo,
 const VkAllocationCallbacks* pAllocator,
 VkDescriptorSetLayout* pSetLayout
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreateDescriptorSetLayout";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pCreateInfo"]=[&]() {
    json return_DbQjwWK=json({});
    
        if (pCreateInfo==NULL){
            return_DbQjwWK["null"]=true;
            return return_DbQjwWK;
        }
        return_DbQjwWK=[&]() {
    json return_vQZpbNT=json({});
    return serialize_VkDescriptorSetLayoutCreateInfo(*pCreateInfo);}();
return return_DbQjwWK;}();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pSetLayout"]=[&]() {
    json return_WkIPvFu=json({});
    
        if (pSetLayout==NULL){
            return_WkIPvFu["null"]=true;
            return return_WkIPvFu;
        }
        return_WkIPvFu=[&]() {
    json return_WXRGcio=json({});
    return serialize_VkDescriptorSetLayout(*pSetLayout);}();
return return_WkIPvFu;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();


[&]() {

        if (result["members"]["pSetLayout"].contains("null")){
        pSetLayout=NULL;
        return;
        }
    [&]() {
*(pSetLayout)=deserialize_VkDescriptorSetLayout(result["members"]["pSetLayout"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                handle_to_parent_handle_struct[(uintptr_t)(*pSetLayout)]=parent;
                
return return_value;
}
void vkDestroyDescriptorSetLayout(
VkDevice device,
 VkDescriptorSetLayout descriptorSetLayout,
 const VkAllocationCallbacks* pAllocator
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkDestroyDescriptorSetLayout";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["descriptorSetLayout"]=[&]() {
    json return_jXWJeAO=json({});
    return serialize_VkDescriptorSetLayout(descriptorSetLayout);}();
data_json["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
descriptorSetLayout=deserialize_VkDescriptorSetLayout(result["members"]["descriptorSetLayout"]);}();

}
VkResult vkCreateDescriptorPool(
VkDevice device,
 const VkDescriptorPoolCreateInfo* pCreateInfo,
 const VkAllocationCallbacks* pAllocator,
 VkDescriptorPool* pDescriptorPool
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreateDescriptorPool";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pCreateInfo"]=[&]() {
    json return_bTKIXzZ=json({});
    
        if (pCreateInfo==NULL){
            return_bTKIXzZ["null"]=true;
            return return_bTKIXzZ;
        }
        return_bTKIXzZ=[&]() {
    json return_XeZHdbn=json({});
    return serialize_VkDescriptorPoolCreateInfo(*pCreateInfo);}();
return return_bTKIXzZ;}();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pDescriptorPool"]=[&]() {
    json return_ZZOytMO=json({});
    
        if (pDescriptorPool==NULL){
            return_ZZOytMO["null"]=true;
            return return_ZZOytMO;
        }
        return_ZZOytMO=[&]() {
    json return_wEMcPim=json({});
    return serialize_VkDescriptorPool(*pDescriptorPool);}();
return return_ZZOytMO;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();


[&]() {

        if (result["members"]["pDescriptorPool"].contains("null")){
        pDescriptorPool=NULL;
        return;
        }
    [&]() {
*(pDescriptorPool)=deserialize_VkDescriptorPool(result["members"]["pDescriptorPool"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                handle_to_parent_handle_struct[(uintptr_t)(*pDescriptorPool)]=parent;
                
return return_value;
}
void vkDestroyDescriptorPool(
VkDevice device,
 VkDescriptorPool descriptorPool,
 const VkAllocationCallbacks* pAllocator
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkDestroyDescriptorPool";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["descriptorPool"]=[&]() {
    json return_WAKJKVb=json({});
    return serialize_VkDescriptorPool(descriptorPool);}();
data_json["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
descriptorPool=deserialize_VkDescriptorPool(result["members"]["descriptorPool"]);}();

}
VkResult vkResetDescriptorPool(
VkDevice device,
 VkDescriptorPool descriptorPool,
 VkDescriptorPoolResetFlags flags
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkResetDescriptorPool";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["descriptorPool"]=[&]() {
    json return_WAKJKVb=json({});
    return serialize_VkDescriptorPool(descriptorPool);}();
data_json["members"]["flags"]=[&]() {
    json return_PtjtXRF=json({});
    return serialize_VkDescriptorPoolResetFlags(flags);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
descriptorPool=deserialize_VkDescriptorPool(result["members"]["descriptorPool"]);}();
[&]() {
flags=deserialize_VkDescriptorPoolResetFlags(result["members"]["flags"]);}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkAllocateDescriptorSets(
VkDevice device,
 const VkDescriptorSetAllocateInfo* pAllocateInfo,
 VkDescriptorSet* pDescriptorSets
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkAllocateDescriptorSets";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pAllocateInfo"]=[&]() {
    json return_CYBYCGD=json({});
    
        if (pAllocateInfo==NULL){
            return_CYBYCGD["null"]=true;
            return return_CYBYCGD;
        }
        return_CYBYCGD=[&]() {
    json return_zVAfwao=json({});
    return serialize_VkDescriptorSetAllocateInfo(*pAllocateInfo);}();
return return_CYBYCGD;}();
data_json["members"]["pDescriptorSets"]=[&]() {
    json return_BZsDUBG=json({});
    
        if (pDescriptorSets==NULL){
            return_BZsDUBG["null"]=true;
            return return_BZsDUBG;
        }
        
        return_BZsDUBG["members"]={};
        for(int BZsDUBG=0; BZsDUBG < pAllocateInfo->descriptorSetCount; BZsDUBG++){
            json temp;
            temp=[&]() {
    json return_KBoTTeC=json({});
    return serialize_VkDescriptorSet(pDescriptorSets[BZsDUBG]);}();
            return_BZsDUBG["members"].push_back(temp);
        }
        return return_BZsDUBG;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

[&]() {

        if (result["members"]["pDescriptorSets"].contains("null")){
        pDescriptorSets=NULL;
        return;
        }
    
        for (int yHiJHhv=0; yHiJHhv < pAllocateInfo->descriptorSetCount; yHiJHhv++){
            [&]() {
pDescriptorSets[yHiJHhv]=deserialize_VkDescriptorSet(result["members"]["pDescriptorSets"]["members"][yHiJHhv]);}();;
        }
        }();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                for (int i=0; i<pAllocateInfo->descriptorSetCount; i++){
                    handle_to_parent_handle_struct[(uintptr_t)pDescriptorSets[i]]=parent;
                }
                
return return_value;
}
VkResult vkFreeDescriptorSets(
VkDevice device,
 VkDescriptorPool descriptorPool,
 uint32_t descriptorSetCount,
 const VkDescriptorSet* pDescriptorSets
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkFreeDescriptorSets";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["descriptorPool"]=[&]() {
    json return_WAKJKVb=json({});
    return serialize_VkDescriptorPool(descriptorPool);}();
data_json["members"]["descriptorSetCount"]=[&]() {
    json return_uMBJpkk=json({});
    return serialize_uint32_t(descriptorSetCount);}();
data_json["members"]["pDescriptorSets"]=[&]() {
    json return_UhRAJBf=json({});
    
        if (pDescriptorSets==NULL){
            return_UhRAJBf["null"]=true;
            return return_UhRAJBf;
        }
        
        return_UhRAJBf["members"]={};
        for(int UhRAJBf=0; UhRAJBf < descriptorSetCount; UhRAJBf++){
            json temp;
            temp=[&]() {
    json return_otSyrfv=json({});
    return serialize_VkDescriptorSet(pDescriptorSets[UhRAJBf]);}();
            return_UhRAJBf["members"].push_back(temp);
        }
        return return_UhRAJBf;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
descriptorPool=deserialize_VkDescriptorPool(result["members"]["descriptorPool"]);}();
[&]() {
descriptorSetCount=deserialize_uint32_t(result["members"]["descriptorSetCount"]);}();

VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkUpdateDescriptorSets(
VkDevice device,
 uint32_t descriptorWriteCount,
 const VkWriteDescriptorSet* pDescriptorWrites,
 uint32_t descriptorCopyCount,
 const VkCopyDescriptorSet* pDescriptorCopies
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkUpdateDescriptorSets";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["descriptorWriteCount"]=[&]() {
    json return_XRSXcAe=json({});
    return serialize_uint32_t(descriptorWriteCount);}();
data_json["members"]["pDescriptorWrites"]=[&]() {
    json return_MCWWHwk=json({});
    
        if (pDescriptorWrites==NULL){
            return_MCWWHwk["null"]=true;
            return return_MCWWHwk;
        }
        
        return_MCWWHwk["members"]={};
        for(int MCWWHwk=0; MCWWHwk < descriptorWriteCount; MCWWHwk++){
            json temp;
            temp=[&]() {
    json return_EyupRlD=json({});
    return serialize_VkWriteDescriptorSet(pDescriptorWrites[MCWWHwk]);}();
            return_MCWWHwk["members"].push_back(temp);
        }
        return return_MCWWHwk;
        }();
data_json["members"]["descriptorCopyCount"]=[&]() {
    json return_IHWQyau=json({});
    return serialize_uint32_t(descriptorCopyCount);}();
data_json["members"]["pDescriptorCopies"]=[&]() {
    json return_TvtyTaJ=json({});
    
        if (pDescriptorCopies==NULL){
            return_TvtyTaJ["null"]=true;
            return return_TvtyTaJ;
        }
        
        return_TvtyTaJ["members"]={};
        for(int TvtyTaJ=0; TvtyTaJ < descriptorCopyCount; TvtyTaJ++){
            json temp;
            temp=[&]() {
    json return_NcdDjBM=json({});
    return serialize_VkCopyDescriptorSet(pDescriptorCopies[TvtyTaJ]);}();
            return_TvtyTaJ["members"].push_back(temp);
        }
        return return_TvtyTaJ;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
descriptorWriteCount=deserialize_uint32_t(result["members"]["descriptorWriteCount"]);}();

[&]() {
descriptorCopyCount=deserialize_uint32_t(result["members"]["descriptorCopyCount"]);}();

}
VkResult vkCreateFramebuffer(
VkDevice device,
 const VkFramebufferCreateInfo* pCreateInfo,
 const VkAllocationCallbacks* pAllocator,
 VkFramebuffer* pFramebuffer
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreateFramebuffer";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pCreateInfo"]=[&]() {
    json return_RAKHUHF=json({});
    
        if (pCreateInfo==NULL){
            return_RAKHUHF["null"]=true;
            return return_RAKHUHF;
        }
        return_RAKHUHF=[&]() {
    json return_sLVeYFZ=json({});
    return serialize_VkFramebufferCreateInfo(*pCreateInfo);}();
return return_RAKHUHF;}();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pFramebuffer"]=[&]() {
    json return_kVSxqJO=json({});
    
        if (pFramebuffer==NULL){
            return_kVSxqJO["null"]=true;
            return return_kVSxqJO;
        }
        return_kVSxqJO=[&]() {
    json return_PCMwzib=json({});
    return serialize_VkFramebuffer(*pFramebuffer);}();
return return_kVSxqJO;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();


[&]() {

        if (result["members"]["pFramebuffer"].contains("null")){
        pFramebuffer=NULL;
        return;
        }
    [&]() {
*(pFramebuffer)=deserialize_VkFramebuffer(result["members"]["pFramebuffer"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                handle_to_parent_handle_struct[(uintptr_t)(*pFramebuffer)]=parent;
                
return return_value;
}
void vkDestroyFramebuffer(
VkDevice device,
 VkFramebuffer framebuffer,
 const VkAllocationCallbacks* pAllocator
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkDestroyFramebuffer";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["framebuffer"]=[&]() {
    json return_MEXIdZv=json({});
    return serialize_VkFramebuffer(framebuffer);}();
data_json["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
framebuffer=deserialize_VkFramebuffer(result["members"]["framebuffer"]);}();

}
VkResult vkCreateRenderPass(
VkDevice device,
 const VkRenderPassCreateInfo* pCreateInfo,
 const VkAllocationCallbacks* pAllocator,
 VkRenderPass* pRenderPass
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreateRenderPass";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pCreateInfo"]=[&]() {
    json return_CxYukJa=json({});
    
        if (pCreateInfo==NULL){
            return_CxYukJa["null"]=true;
            return return_CxYukJa;
        }
        return_CxYukJa=[&]() {
    json return_QYGsApC=json({});
    return serialize_VkRenderPassCreateInfo(*pCreateInfo);}();
return return_CxYukJa;}();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pRenderPass"]=[&]() {
    json return_TnevtBk=json({});
    
        if (pRenderPass==NULL){
            return_TnevtBk["null"]=true;
            return return_TnevtBk;
        }
        return_TnevtBk=[&]() {
    json return_fRCidTE=json({});
    return serialize_VkRenderPass(*pRenderPass);}();
return return_TnevtBk;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();


[&]() {

        if (result["members"]["pRenderPass"].contains("null")){
        pRenderPass=NULL;
        return;
        }
    [&]() {
*(pRenderPass)=deserialize_VkRenderPass(result["members"]["pRenderPass"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                handle_to_parent_handle_struct[(uintptr_t)(*pRenderPass)]=parent;
                
return return_value;
}
void vkDestroyRenderPass(
VkDevice device,
 VkRenderPass renderPass,
 const VkAllocationCallbacks* pAllocator
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkDestroyRenderPass";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["renderPass"]=[&]() {
    json return_EuRkpxU=json({});
    return serialize_VkRenderPass(renderPass);}();
data_json["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
renderPass=deserialize_VkRenderPass(result["members"]["renderPass"]);}();

}
void vkGetRenderAreaGranularity(
VkDevice device,
 VkRenderPass renderPass,
 VkExtent2D* pGranularity
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetRenderAreaGranularity";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["renderPass"]=[&]() {
    json return_EuRkpxU=json({});
    return serialize_VkRenderPass(renderPass);}();
data_json["members"]["pGranularity"]=[&]() {
    json return_INpWsMF=json({});
    
        if (pGranularity==NULL){
            return_INpWsMF["null"]=true;
            return return_INpWsMF;
        }
        return_INpWsMF=[&]() {
    json return_lAVJuzw=json({});
    return serialize_VkExtent2D(*pGranularity);}();
return return_INpWsMF;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
renderPass=deserialize_VkRenderPass(result["members"]["renderPass"]);}();
[&]() {

        if (result["members"]["pGranularity"].contains("null")){
        pGranularity=NULL;
        return;
        }
    [&]() {
*(pGranularity)=deserialize_VkExtent2D(result["members"]["pGranularity"]);}();
}();
}
void vkGetRenderingAreaGranularityKHR(
VkDevice device,
 const VkRenderingAreaInfoKHR* pRenderingAreaInfo,
 VkExtent2D* pGranularity
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetRenderingAreaGranularityKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pRenderingAreaInfo"]=[&]() {
    json return_IOIQAsx=json({});
    
        if (pRenderingAreaInfo==NULL){
            return_IOIQAsx["null"]=true;
            return return_IOIQAsx;
        }
        return_IOIQAsx=[&]() {
    json return_WfYzRNa=json({});
    return serialize_VkRenderingAreaInfoKHR(*pRenderingAreaInfo);}();
return return_IOIQAsx;}();
data_json["members"]["pGranularity"]=[&]() {
    json return_INpWsMF=json({});
    
        if (pGranularity==NULL){
            return_INpWsMF["null"]=true;
            return return_INpWsMF;
        }
        return_INpWsMF=[&]() {
    json return_lAVJuzw=json({});
    return serialize_VkExtent2D(*pGranularity);}();
return return_INpWsMF;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

[&]() {

        if (result["members"]["pGranularity"].contains("null")){
        pGranularity=NULL;
        return;
        }
    [&]() {
*(pGranularity)=deserialize_VkExtent2D(result["members"]["pGranularity"]);}();
}();
}
VkResult vkCreateCommandPool(
VkDevice device,
 const VkCommandPoolCreateInfo* pCreateInfo,
 const VkAllocationCallbacks* pAllocator,
 VkCommandPool* pCommandPool
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreateCommandPool";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pCreateInfo"]=[&]() {
    json return_jDuJcUb=json({});
    
        if (pCreateInfo==NULL){
            return_jDuJcUb["null"]=true;
            return return_jDuJcUb;
        }
        return_jDuJcUb=[&]() {
    json return_mWqUZUp=json({});
    return serialize_VkCommandPoolCreateInfo(*pCreateInfo);}();
return return_jDuJcUb;}();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pCommandPool"]=[&]() {
    json return_QWAExWc=json({});
    
        if (pCommandPool==NULL){
            return_QWAExWc["null"]=true;
            return return_QWAExWc;
        }
        return_QWAExWc=[&]() {
    json return_nYwoDtn=json({});
    return serialize_VkCommandPool(*pCommandPool);}();
return return_QWAExWc;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();


[&]() {

        if (result["members"]["pCommandPool"].contains("null")){
        pCommandPool=NULL;
        return;
        }
    [&]() {
*(pCommandPool)=deserialize_VkCommandPool(result["members"]["pCommandPool"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                handle_to_parent_handle_struct[(uintptr_t)(*pCommandPool)]=parent;
                
return return_value;
}
void vkDestroyCommandPool(
VkDevice device,
 VkCommandPool commandPool,
 const VkAllocationCallbacks* pAllocator
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkDestroyCommandPool";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["commandPool"]=[&]() {
    json return_EDvrdif=json({});
    return serialize_VkCommandPool(commandPool);}();
data_json["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
commandPool=deserialize_VkCommandPool(result["members"]["commandPool"]);}();

}
VkResult vkResetCommandPool(
VkDevice device,
 VkCommandPool commandPool,
 VkCommandPoolResetFlags flags
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkResetCommandPool";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["commandPool"]=[&]() {
    json return_EDvrdif=json({});
    return serialize_VkCommandPool(commandPool);}();
data_json["members"]["flags"]=[&]() {
    json return_okPyRYU=json({});
    return serialize_VkCommandPoolResetFlags(flags);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
commandPool=deserialize_VkCommandPool(result["members"]["commandPool"]);}();
[&]() {
flags=deserialize_VkCommandPoolResetFlags(result["members"]["flags"]);}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkAllocateCommandBuffers(
VkDevice device,
 const VkCommandBufferAllocateInfo* pAllocateInfo,
 VkCommandBuffer* pCommandBuffers
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkAllocateCommandBuffers";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pAllocateInfo"]=[&]() {
    json return_FKIgwJs=json({});
    
        if (pAllocateInfo==NULL){
            return_FKIgwJs["null"]=true;
            return return_FKIgwJs;
        }
        return_FKIgwJs=[&]() {
    json return_qEJmQuf=json({});
    return serialize_VkCommandBufferAllocateInfo(*pAllocateInfo);}();
return return_FKIgwJs;}();
data_json["members"]["pCommandBuffers"]=[&]() {
    json return_IAoUjgm=json({});
    
        if (pCommandBuffers==NULL){
            return_IAoUjgm["null"]=true;
            return return_IAoUjgm;
        }
        
        return_IAoUjgm["members"]={};
        for(int IAoUjgm=0; IAoUjgm < pAllocateInfo->commandBufferCount; IAoUjgm++){
            json temp;
            temp=[&]() {
    json return_zjIsCPY=json({});
    return serialize_VkCommandBuffer(pCommandBuffers[IAoUjgm]);}();
            return_IAoUjgm["members"].push_back(temp);
        }
        return return_IAoUjgm;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

[&]() {

        if (result["members"]["pCommandBuffers"].contains("null")){
        pCommandBuffers=NULL;
        return;
        }
    
        for (int EmwcToI=0; EmwcToI < pAllocateInfo->commandBufferCount; EmwcToI++){
            [&]() {
pCommandBuffers[EmwcToI]=deserialize_VkCommandBuffer(result["members"]["pCommandBuffers"]["members"][EmwcToI]);}();;
        }
        }();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                for (int i=0; i<pAllocateInfo->commandBufferCount; i++){
                    handle_to_parent_handle_struct[(uintptr_t)pCommandBuffers[i]]=parent;
                }
                
return return_value;
}
void vkFreeCommandBuffers(
VkDevice device,
 VkCommandPool commandPool,
 uint32_t commandBufferCount,
 const VkCommandBuffer* pCommandBuffers
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkFreeCommandBuffers";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["commandPool"]=[&]() {
    json return_EDvrdif=json({});
    return serialize_VkCommandPool(commandPool);}();
data_json["members"]["commandBufferCount"]=[&]() {
    json return_NawsLFi=json({});
    return serialize_uint32_t(commandBufferCount);}();
data_json["members"]["pCommandBuffers"]=[&]() {
    json return_ePeHCNc=json({});
    
        if (pCommandBuffers==NULL){
            return_ePeHCNc["null"]=true;
            return return_ePeHCNc;
        }
        
        return_ePeHCNc["members"]={};
        for(int ePeHCNc=0; ePeHCNc < commandBufferCount; ePeHCNc++){
            json temp;
            temp=[&]() {
    json return_IWPPXyt=json({});
    return serialize_VkCommandBuffer(pCommandBuffers[ePeHCNc]);}();
            return_ePeHCNc["members"].push_back(temp);
        }
        return return_ePeHCNc;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
commandPool=deserialize_VkCommandPool(result["members"]["commandPool"]);}();
[&]() {
commandBufferCount=deserialize_uint32_t(result["members"]["commandBufferCount"]);}();

}
VkResult vkBeginCommandBuffer(
VkCommandBuffer commandBuffer,
 const VkCommandBufferBeginInfo* pBeginInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkBeginCommandBuffer";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pBeginInfo"]=[&]() {
    json return_UNpLxBG=json({});
    
        if (pBeginInfo==NULL){
            return_UNpLxBG["null"]=true;
            return return_UNpLxBG;
        }
        return_UNpLxBG=[&]() {
    json return_AXQzLUT=json({});
    return serialize_VkCommandBufferBeginInfo(*pBeginInfo);}();
return return_UNpLxBG;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();

VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkEndCommandBuffer(
VkCommandBuffer commandBuffer
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkEndCommandBuffer";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkResetCommandBuffer(
VkCommandBuffer commandBuffer,
 VkCommandBufferResetFlags flags
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkResetCommandBuffer";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["flags"]=[&]() {
    json return_dAuRGiZ=json({});
    return serialize_VkCommandBufferResetFlags(flags);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
flags=deserialize_VkCommandBufferResetFlags(result["members"]["flags"]);}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkCmdBindPipeline(
VkCommandBuffer commandBuffer,
 VkPipelineBindPoint pipelineBindPoint,
 VkPipeline pipeline
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdBindPipeline";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pipelineBindPoint"]=[&]() {
    json return_wEDWbiR=json({});
    return serialize_VkPipelineBindPoint(pipelineBindPoint);}();
data_json["members"]["pipeline"]=[&]() {
    json return_ynaKrOY=json({});
    return serialize_VkPipeline(pipeline);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
pipelineBindPoint=deserialize_VkPipelineBindPoint(result["members"]["pipelineBindPoint"]);}();
[&]() {
pipeline=deserialize_VkPipeline(result["members"]["pipeline"]);}();
}
void vkCmdSetAttachmentFeedbackLoopEnableEXT(
VkCommandBuffer commandBuffer,
 VkImageAspectFlags aspectMask
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetAttachmentFeedbackLoopEnableEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["aspectMask"]=[&]() {
    json return_KcpFVpC=json({});
    return serialize_VkImageAspectFlags(aspectMask);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
aspectMask=deserialize_VkImageAspectFlags(result["members"]["aspectMask"]);}();
}
void vkCmdSetViewport(
VkCommandBuffer commandBuffer,
 uint32_t firstViewport,
 uint32_t viewportCount,
 const VkViewport* pViewports
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetViewport";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["firstViewport"]=[&]() {
    json return_zZVDUCF=json({});
    return serialize_uint32_t(firstViewport);}();
data_json["members"]["viewportCount"]=[&]() {
    json return_pDFybJm=json({});
    return serialize_uint32_t(viewportCount);}();
data_json["members"]["pViewports"]=[&]() {
    json return_wNAxnoK=json({});
    
        if (pViewports==NULL){
            return_wNAxnoK["null"]=true;
            return return_wNAxnoK;
        }
        
        return_wNAxnoK["members"]={};
        for(int wNAxnoK=0; wNAxnoK < viewportCount; wNAxnoK++){
            json temp;
            temp=[&]() {
    json return_HSUHymr=json({});
    return serialize_VkViewport(pViewports[wNAxnoK]);}();
            return_wNAxnoK["members"].push_back(temp);
        }
        return return_wNAxnoK;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
firstViewport=deserialize_uint32_t(result["members"]["firstViewport"]);}();
[&]() {
viewportCount=deserialize_uint32_t(result["members"]["viewportCount"]);}();

}
void vkCmdSetScissor(
VkCommandBuffer commandBuffer,
 uint32_t firstScissor,
 uint32_t scissorCount,
 const VkRect2D* pScissors
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetScissor";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["firstScissor"]=[&]() {
    json return_AAhOHcB=json({});
    return serialize_uint32_t(firstScissor);}();
data_json["members"]["scissorCount"]=[&]() {
    json return_aFbyEkl=json({});
    return serialize_uint32_t(scissorCount);}();
data_json["members"]["pScissors"]=[&]() {
    json return_HoUaZsF=json({});
    
        if (pScissors==NULL){
            return_HoUaZsF["null"]=true;
            return return_HoUaZsF;
        }
        
        return_HoUaZsF["members"]={};
        for(int HoUaZsF=0; HoUaZsF < scissorCount; HoUaZsF++){
            json temp;
            temp=[&]() {
    json return_fcbwury=json({});
    return serialize_VkRect2D(pScissors[HoUaZsF]);}();
            return_HoUaZsF["members"].push_back(temp);
        }
        return return_HoUaZsF;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
firstScissor=deserialize_uint32_t(result["members"]["firstScissor"]);}();
[&]() {
scissorCount=deserialize_uint32_t(result["members"]["scissorCount"]);}();

}
void vkCmdSetLineWidth(
VkCommandBuffer commandBuffer,
 float lineWidth
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetLineWidth";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["lineWidth"]=[&]() {
    json return_wNAzdge=json({});
    return serialize_float(lineWidth);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
lineWidth=deserialize_float(result["members"]["lineWidth"]);}();
}
void vkCmdSetDepthBias(
VkCommandBuffer commandBuffer,
 float depthBiasConstantFactor,
 float depthBiasClamp,
 float depthBiasSlopeFactor
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetDepthBias";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["depthBiasConstantFactor"]=[&]() {
    json return_WuwJAKQ=json({});
    return serialize_float(depthBiasConstantFactor);}();
data_json["members"]["depthBiasClamp"]=[&]() {
    json return_EglyjHR=json({});
    return serialize_float(depthBiasClamp);}();
data_json["members"]["depthBiasSlopeFactor"]=[&]() {
    json return_IIhBUvi=json({});
    return serialize_float(depthBiasSlopeFactor);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
depthBiasConstantFactor=deserialize_float(result["members"]["depthBiasConstantFactor"]);}();
[&]() {
depthBiasClamp=deserialize_float(result["members"]["depthBiasClamp"]);}();
[&]() {
depthBiasSlopeFactor=deserialize_float(result["members"]["depthBiasSlopeFactor"]);}();
}
void vkCmdSetBlendConstants(
VkCommandBuffer commandBuffer,
 const float blendConstants[4]
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetBlendConstants";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["blendConstants"]=[&]() {
    json return_IAtxqfI=json({});
    
        return_IAtxqfI["members"]={};
        for(int IAtxqfI=0; IAtxqfI < 4; IAtxqfI++){
            json temp;
            temp=[&]() {
    json return_ztxUpOj=json({});
    return serialize_float(blendConstants[IAtxqfI]);}();
            return_IAtxqfI["members"].push_back(temp);
        }
        return return_IAtxqfI;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {

        for (int KOwEmSk=0; KOwEmSk < 4; KOwEmSk++){
            ;
        }
        }();
}
void vkCmdSetDepthBounds(
VkCommandBuffer commandBuffer,
 float minDepthBounds,
 float maxDepthBounds
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetDepthBounds";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["minDepthBounds"]=[&]() {
    json return_rZnwtvf=json({});
    return serialize_float(minDepthBounds);}();
data_json["members"]["maxDepthBounds"]=[&]() {
    json return_PRZvSRH=json({});
    return serialize_float(maxDepthBounds);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
minDepthBounds=deserialize_float(result["members"]["minDepthBounds"]);}();
[&]() {
maxDepthBounds=deserialize_float(result["members"]["maxDepthBounds"]);}();
}
void vkCmdSetStencilCompareMask(
VkCommandBuffer commandBuffer,
 VkStencilFaceFlags faceMask,
 uint32_t compareMask
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetStencilCompareMask";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["faceMask"]=[&]() {
    json return_zgrwSjb=json({});
    return serialize_VkStencilFaceFlags(faceMask);}();
data_json["members"]["compareMask"]=[&]() {
    json return_zWpLGYv=json({});
    return serialize_uint32_t(compareMask);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
faceMask=deserialize_VkStencilFaceFlags(result["members"]["faceMask"]);}();
[&]() {
compareMask=deserialize_uint32_t(result["members"]["compareMask"]);}();
}
void vkCmdSetStencilWriteMask(
VkCommandBuffer commandBuffer,
 VkStencilFaceFlags faceMask,
 uint32_t writeMask
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetStencilWriteMask";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["faceMask"]=[&]() {
    json return_zgrwSjb=json({});
    return serialize_VkStencilFaceFlags(faceMask);}();
data_json["members"]["writeMask"]=[&]() {
    json return_XGnbTTe=json({});
    return serialize_uint32_t(writeMask);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
faceMask=deserialize_VkStencilFaceFlags(result["members"]["faceMask"]);}();
[&]() {
writeMask=deserialize_uint32_t(result["members"]["writeMask"]);}();
}
void vkCmdSetStencilReference(
VkCommandBuffer commandBuffer,
 VkStencilFaceFlags faceMask,
 uint32_t reference
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetStencilReference";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["faceMask"]=[&]() {
    json return_zgrwSjb=json({});
    return serialize_VkStencilFaceFlags(faceMask);}();
data_json["members"]["reference"]=[&]() {
    json return_SvICbQi=json({});
    return serialize_uint32_t(reference);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
faceMask=deserialize_VkStencilFaceFlags(result["members"]["faceMask"]);}();
[&]() {
reference=deserialize_uint32_t(result["members"]["reference"]);}();
}
void vkCmdBindDescriptorSets(
VkCommandBuffer commandBuffer,
 VkPipelineBindPoint pipelineBindPoint,
 VkPipelineLayout layout,
 uint32_t firstSet,
 uint32_t descriptorSetCount,
 const VkDescriptorSet* pDescriptorSets,
 uint32_t dynamicOffsetCount,
 const uint32_t* pDynamicOffsets
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdBindDescriptorSets";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pipelineBindPoint"]=[&]() {
    json return_wEDWbiR=json({});
    return serialize_VkPipelineBindPoint(pipelineBindPoint);}();
data_json["members"]["layout"]=[&]() {
    json return_PdiawKY=json({});
    return serialize_VkPipelineLayout(layout);}();
data_json["members"]["firstSet"]=[&]() {
    json return_YqLcKAn=json({});
    return serialize_uint32_t(firstSet);}();
data_json["members"]["descriptorSetCount"]=[&]() {
    json return_uMBJpkk=json({});
    return serialize_uint32_t(descriptorSetCount);}();
data_json["members"]["pDescriptorSets"]=[&]() {
    json return_ukafnUk=json({});
    
        if (pDescriptorSets==NULL){
            return_ukafnUk["null"]=true;
            return return_ukafnUk;
        }
        
        return_ukafnUk["members"]={};
        for(int ukafnUk=0; ukafnUk < descriptorSetCount; ukafnUk++){
            json temp;
            temp=[&]() {
    json return_WqNgGSL=json({});
    return serialize_VkDescriptorSet(pDescriptorSets[ukafnUk]);}();
            return_ukafnUk["members"].push_back(temp);
        }
        return return_ukafnUk;
        }();
data_json["members"]["dynamicOffsetCount"]=[&]() {
    json return_PSMjGUp=json({});
    return serialize_uint32_t(dynamicOffsetCount);}();
data_json["members"]["pDynamicOffsets"]=[&]() {
    json return_rHVmWOT=json({});
    
        if (pDynamicOffsets==NULL){
            return_rHVmWOT["null"]=true;
            return return_rHVmWOT;
        }
        
        return_rHVmWOT["members"]={};
        for(int rHVmWOT=0; rHVmWOT < dynamicOffsetCount; rHVmWOT++){
            json temp;
            temp=[&]() {
    json return_OplYOlR=json({});
    return serialize_uint32_t(pDynamicOffsets[rHVmWOT]);}();
            return_rHVmWOT["members"].push_back(temp);
        }
        return return_rHVmWOT;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
pipelineBindPoint=deserialize_VkPipelineBindPoint(result["members"]["pipelineBindPoint"]);}();
[&]() {
layout=deserialize_VkPipelineLayout(result["members"]["layout"]);}();
[&]() {
firstSet=deserialize_uint32_t(result["members"]["firstSet"]);}();
[&]() {
descriptorSetCount=deserialize_uint32_t(result["members"]["descriptorSetCount"]);}();

[&]() {
dynamicOffsetCount=deserialize_uint32_t(result["members"]["dynamicOffsetCount"]);}();

}
void vkCmdBindIndexBuffer(
VkCommandBuffer commandBuffer,
 VkBuffer buffer,
 VkDeviceSize offset,
 VkIndexType indexType
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdBindIndexBuffer";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["buffer"]=[&]() {
    json return_Fjwvwzv=json({});
    return serialize_VkBuffer(buffer);}();
data_json["members"]["offset"]=[&]() {
    json return_vTtZMhj=json({});
    return_vTtZMhj=[&]() {
    json return_eEWibmR=json({});
    return serialize_uint64_t(offset);}();return return_vTtZMhj;}();
data_json["members"]["indexType"]=[&]() {
    json return_VcYhjnj=json({});
    return serialize_VkIndexType(indexType);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
buffer=deserialize_VkBuffer(result["members"]["buffer"]);}();
[&]() {
[&]() {
offset=deserialize_uint64_t(result["members"]["offset"]);}();}();
[&]() {
indexType=deserialize_VkIndexType(result["members"]["indexType"]);}();
}
void vkCmdBindVertexBuffers(
VkCommandBuffer commandBuffer,
 uint32_t firstBinding,
 uint32_t bindingCount,
 const VkBuffer* pBuffers,
 const VkDeviceSize* pOffsets
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdBindVertexBuffers";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["firstBinding"]=[&]() {
    json return_JzarCRw=json({});
    return serialize_uint32_t(firstBinding);}();
data_json["members"]["bindingCount"]=[&]() {
    json return_KKQzFnF=json({});
    return serialize_uint32_t(bindingCount);}();
data_json["members"]["pBuffers"]=[&]() {
    json return_mLfEgSk=json({});
    
        if (pBuffers==NULL){
            return_mLfEgSk["null"]=true;
            return return_mLfEgSk;
        }
        
        return_mLfEgSk["members"]={};
        for(int mLfEgSk=0; mLfEgSk < bindingCount; mLfEgSk++){
            json temp;
            temp=[&]() {
    json return_sdCvutr=json({});
    return serialize_VkBuffer(pBuffers[mLfEgSk]);}();
            return_mLfEgSk["members"].push_back(temp);
        }
        return return_mLfEgSk;
        }();
data_json["members"]["pOffsets"]=[&]() {
    json return_vrxKuBD=json({});
    
        if (pOffsets==NULL){
            return_vrxKuBD["null"]=true;
            return return_vrxKuBD;
        }
        
        return_vrxKuBD["members"]={};
        for(int vrxKuBD=0; vrxKuBD < bindingCount; vrxKuBD++){
            json temp;
            temp=[&]() {
    json return_imGoikL=json({});
    return_imGoikL=[&]() {
    json return_KNbZroH=json({});
    return serialize_uint64_t(pOffsets[vrxKuBD]);}();return return_imGoikL;}();
            return_vrxKuBD["members"].push_back(temp);
        }
        return return_vrxKuBD;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
firstBinding=deserialize_uint32_t(result["members"]["firstBinding"]);}();
[&]() {
bindingCount=deserialize_uint32_t(result["members"]["bindingCount"]);}();


}
void vkCmdDraw(
VkCommandBuffer commandBuffer,
 uint32_t vertexCount,
 uint32_t instanceCount,
 uint32_t firstVertex,
 uint32_t firstInstance
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdDraw";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["vertexCount"]=[&]() {
    json return_eXADnbI=json({});
    return serialize_uint32_t(vertexCount);}();
data_json["members"]["instanceCount"]=[&]() {
    json return_esOolQK=json({});
    return serialize_uint32_t(instanceCount);}();
data_json["members"]["firstVertex"]=[&]() {
    json return_gqZKYBX=json({});
    return serialize_uint32_t(firstVertex);}();
data_json["members"]["firstInstance"]=[&]() {
    json return_HyClpCH=json({});
    return serialize_uint32_t(firstInstance);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
vertexCount=deserialize_uint32_t(result["members"]["vertexCount"]);}();
[&]() {
instanceCount=deserialize_uint32_t(result["members"]["instanceCount"]);}();
[&]() {
firstVertex=deserialize_uint32_t(result["members"]["firstVertex"]);}();
[&]() {
firstInstance=deserialize_uint32_t(result["members"]["firstInstance"]);}();
}
void vkCmdDrawIndexed(
VkCommandBuffer commandBuffer,
 uint32_t indexCount,
 uint32_t instanceCount,
 uint32_t firstIndex,
 int32_t vertexOffset,
 uint32_t firstInstance
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdDrawIndexed";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["indexCount"]=[&]() {
    json return_PXLSkdv=json({});
    return serialize_uint32_t(indexCount);}();
data_json["members"]["instanceCount"]=[&]() {
    json return_esOolQK=json({});
    return serialize_uint32_t(instanceCount);}();
data_json["members"]["firstIndex"]=[&]() {
    json return_TPRyOCr=json({});
    return serialize_uint32_t(firstIndex);}();
data_json["members"]["vertexOffset"]=[&]() {
    json return_cbAqBat=json({});
    return serialize_int32_t(vertexOffset);}();
data_json["members"]["firstInstance"]=[&]() {
    json return_HyClpCH=json({});
    return serialize_uint32_t(firstInstance);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
indexCount=deserialize_uint32_t(result["members"]["indexCount"]);}();
[&]() {
instanceCount=deserialize_uint32_t(result["members"]["instanceCount"]);}();
[&]() {
firstIndex=deserialize_uint32_t(result["members"]["firstIndex"]);}();
[&]() {
vertexOffset=deserialize_int32_t(result["members"]["vertexOffset"]);}();
[&]() {
firstInstance=deserialize_uint32_t(result["members"]["firstInstance"]);}();
}
void vkCmdDrawMultiEXT(
VkCommandBuffer commandBuffer,
 uint32_t drawCount,
 const VkMultiDrawInfoEXT* pVertexInfo,
 uint32_t instanceCount,
 uint32_t firstInstance,
 uint32_t stride
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdDrawMultiEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["drawCount"]=[&]() {
    json return_tDYkDda=json({});
    return serialize_uint32_t(drawCount);}();
data_json["members"]["pVertexInfo"]=[&]() {
    json return_PLEDCOI=json({});
    
        if (pVertexInfo==NULL){
            return_PLEDCOI["null"]=true;
            return return_PLEDCOI;
        }
        
        return_PLEDCOI["members"]={};
        for(int PLEDCOI=0; PLEDCOI < drawCount; PLEDCOI++){
            json temp;
            temp=[&]() {
    json return_TeEjwMR=json({});
    return serialize_VkMultiDrawInfoEXT(pVertexInfo[PLEDCOI]);}();
            return_PLEDCOI["members"].push_back(temp);
        }
        return return_PLEDCOI;
        }();
data_json["members"]["instanceCount"]=[&]() {
    json return_esOolQK=json({});
    return serialize_uint32_t(instanceCount);}();
data_json["members"]["firstInstance"]=[&]() {
    json return_tzucUME=json({});
    return serialize_uint32_t(firstInstance);}();
data_json["members"]["stride"]=[&]() {
    json return_TkKksoe=json({});
    return serialize_uint32_t(stride);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
drawCount=deserialize_uint32_t(result["members"]["drawCount"]);}();

[&]() {
instanceCount=deserialize_uint32_t(result["members"]["instanceCount"]);}();
[&]() {
firstInstance=deserialize_uint32_t(result["members"]["firstInstance"]);}();
[&]() {
stride=deserialize_uint32_t(result["members"]["stride"]);}();
}
void vkCmdDrawMultiIndexedEXT(
VkCommandBuffer commandBuffer,
 uint32_t drawCount,
 const VkMultiDrawIndexedInfoEXT* pIndexInfo,
 uint32_t instanceCount,
 uint32_t firstInstance,
 uint32_t stride,
 const int32_t* pVertexOffset
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdDrawMultiIndexedEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["drawCount"]=[&]() {
    json return_tDYkDda=json({});
    return serialize_uint32_t(drawCount);}();
data_json["members"]["pIndexInfo"]=[&]() {
    json return_HxPimoj=json({});
    
        if (pIndexInfo==NULL){
            return_HxPimoj["null"]=true;
            return return_HxPimoj;
        }
        
        return_HxPimoj["members"]={};
        for(int HxPimoj=0; HxPimoj < drawCount; HxPimoj++){
            json temp;
            temp=[&]() {
    json return_oXUbPan=json({});
    return serialize_VkMultiDrawIndexedInfoEXT(pIndexInfo[HxPimoj]);}();
            return_HxPimoj["members"].push_back(temp);
        }
        return return_HxPimoj;
        }();
data_json["members"]["instanceCount"]=[&]() {
    json return_esOolQK=json({});
    return serialize_uint32_t(instanceCount);}();
data_json["members"]["firstInstance"]=[&]() {
    json return_tzucUME=json({});
    return serialize_uint32_t(firstInstance);}();
data_json["members"]["stride"]=[&]() {
    json return_CdoKfxC=json({});
    return serialize_uint32_t(stride);}();
data_json["members"]["pVertexOffset"]=[&]() {
    json return_EkkCrxm=json({});
    
        if (pVertexOffset==NULL){
            return_EkkCrxm["null"]=true;
            return return_EkkCrxm;
        }
        return_EkkCrxm=[&]() {
    json return_ItfsUPl=json({});
    return serialize_int32_t(*pVertexOffset);}();
return return_EkkCrxm;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
drawCount=deserialize_uint32_t(result["members"]["drawCount"]);}();

[&]() {
instanceCount=deserialize_uint32_t(result["members"]["instanceCount"]);}();
[&]() {
firstInstance=deserialize_uint32_t(result["members"]["firstInstance"]);}();
[&]() {
stride=deserialize_uint32_t(result["members"]["stride"]);}();

}
void vkCmdDrawIndirect(
VkCommandBuffer commandBuffer,
 VkBuffer buffer,
 VkDeviceSize offset,
 uint32_t drawCount,
 uint32_t stride
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdDrawIndirect";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["buffer"]=[&]() {
    json return_Fjwvwzv=json({});
    return serialize_VkBuffer(buffer);}();
data_json["members"]["offset"]=[&]() {
    json return_vTtZMhj=json({});
    return_vTtZMhj=[&]() {
    json return_eEWibmR=json({});
    return serialize_uint64_t(offset);}();return return_vTtZMhj;}();
data_json["members"]["drawCount"]=[&]() {
    json return_tDYkDda=json({});
    return serialize_uint32_t(drawCount);}();
data_json["members"]["stride"]=[&]() {
    json return_TkKksoe=json({});
    return serialize_uint32_t(stride);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
buffer=deserialize_VkBuffer(result["members"]["buffer"]);}();
[&]() {
[&]() {
offset=deserialize_uint64_t(result["members"]["offset"]);}();}();
[&]() {
drawCount=deserialize_uint32_t(result["members"]["drawCount"]);}();
[&]() {
stride=deserialize_uint32_t(result["members"]["stride"]);}();
}
void vkCmdDrawIndexedIndirect(
VkCommandBuffer commandBuffer,
 VkBuffer buffer,
 VkDeviceSize offset,
 uint32_t drawCount,
 uint32_t stride
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdDrawIndexedIndirect";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["buffer"]=[&]() {
    json return_Fjwvwzv=json({});
    return serialize_VkBuffer(buffer);}();
data_json["members"]["offset"]=[&]() {
    json return_vTtZMhj=json({});
    return_vTtZMhj=[&]() {
    json return_eEWibmR=json({});
    return serialize_uint64_t(offset);}();return return_vTtZMhj;}();
data_json["members"]["drawCount"]=[&]() {
    json return_tDYkDda=json({});
    return serialize_uint32_t(drawCount);}();
data_json["members"]["stride"]=[&]() {
    json return_TkKksoe=json({});
    return serialize_uint32_t(stride);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
buffer=deserialize_VkBuffer(result["members"]["buffer"]);}();
[&]() {
[&]() {
offset=deserialize_uint64_t(result["members"]["offset"]);}();}();
[&]() {
drawCount=deserialize_uint32_t(result["members"]["drawCount"]);}();
[&]() {
stride=deserialize_uint32_t(result["members"]["stride"]);}();
}
void vkCmdDispatch(
VkCommandBuffer commandBuffer,
 uint32_t groupCountX,
 uint32_t groupCountY,
 uint32_t groupCountZ
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdDispatch";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["groupCountX"]=[&]() {
    json return_BCsqVBT=json({});
    return serialize_uint32_t(groupCountX);}();
data_json["members"]["groupCountY"]=[&]() {
    json return_PuRhYIE=json({});
    return serialize_uint32_t(groupCountY);}();
data_json["members"]["groupCountZ"]=[&]() {
    json return_OaBSWyk=json({});
    return serialize_uint32_t(groupCountZ);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
groupCountX=deserialize_uint32_t(result["members"]["groupCountX"]);}();
[&]() {
groupCountY=deserialize_uint32_t(result["members"]["groupCountY"]);}();
[&]() {
groupCountZ=deserialize_uint32_t(result["members"]["groupCountZ"]);}();
}
void vkCmdDispatchIndirect(
VkCommandBuffer commandBuffer,
 VkBuffer buffer,
 VkDeviceSize offset
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdDispatchIndirect";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["buffer"]=[&]() {
    json return_Fjwvwzv=json({});
    return serialize_VkBuffer(buffer);}();
data_json["members"]["offset"]=[&]() {
    json return_ShUjxal=json({});
    return_ShUjxal=[&]() {
    json return_jLgmzaD=json({});
    return serialize_uint64_t(offset);}();return return_ShUjxal;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
buffer=deserialize_VkBuffer(result["members"]["buffer"]);}();
[&]() {
[&]() {
offset=deserialize_uint64_t(result["members"]["offset"]);}();}();
}
void vkCmdSubpassShadingHUAWEI(
VkCommandBuffer commandBuffer
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSubpassShadingHUAWEI";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_GVaXYIY=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
}
void vkCmdDrawClusterHUAWEI(
VkCommandBuffer commandBuffer,
 uint32_t groupCountX,
 uint32_t groupCountY,
 uint32_t groupCountZ
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdDrawClusterHUAWEI";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["groupCountX"]=[&]() {
    json return_BCsqVBT=json({});
    return serialize_uint32_t(groupCountX);}();
data_json["members"]["groupCountY"]=[&]() {
    json return_PuRhYIE=json({});
    return serialize_uint32_t(groupCountY);}();
data_json["members"]["groupCountZ"]=[&]() {
    json return_OaBSWyk=json({});
    return serialize_uint32_t(groupCountZ);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
groupCountX=deserialize_uint32_t(result["members"]["groupCountX"]);}();
[&]() {
groupCountY=deserialize_uint32_t(result["members"]["groupCountY"]);}();
[&]() {
groupCountZ=deserialize_uint32_t(result["members"]["groupCountZ"]);}();
}
void vkCmdDrawClusterIndirectHUAWEI(
VkCommandBuffer commandBuffer,
 VkBuffer buffer,
 VkDeviceSize offset
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdDrawClusterIndirectHUAWEI";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["buffer"]=[&]() {
    json return_Fjwvwzv=json({});
    return serialize_VkBuffer(buffer);}();
data_json["members"]["offset"]=[&]() {
    json return_ShUjxal=json({});
    return_ShUjxal=[&]() {
    json return_jLgmzaD=json({});
    return serialize_uint64_t(offset);}();return return_ShUjxal;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
buffer=deserialize_VkBuffer(result["members"]["buffer"]);}();
[&]() {
[&]() {
offset=deserialize_uint64_t(result["members"]["offset"]);}();}();
}
void vkCmdUpdatePipelineIndirectBufferNV(
VkCommandBuffer commandBuffer,
 VkPipelineBindPoint           pipelineBindPoint,
 VkPipeline                    pipeline
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdUpdatePipelineIndirectBufferNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pipelineBindPoint"]=[&]() {
    json return_qFaZuBo=json({});
    return serialize_VkPipelineBindPoint(pipelineBindPoint);}();
data_json["members"]["pipeline"]=[&]() {
    json return_bGwHFDu=json({});
    return serialize_VkPipeline(pipeline);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
pipelineBindPoint=deserialize_VkPipelineBindPoint(result["members"]["pipelineBindPoint"]);}();
[&]() {
pipeline=deserialize_VkPipeline(result["members"]["pipeline"]);}();
}
void vkCmdCopyBuffer(
VkCommandBuffer commandBuffer,
 VkBuffer srcBuffer,
 VkBuffer dstBuffer,
 uint32_t regionCount,
 const VkBufferCopy* pRegions
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdCopyBuffer";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["srcBuffer"]=[&]() {
    json return_eYEwbWD=json({});
    return serialize_VkBuffer(srcBuffer);}();
data_json["members"]["dstBuffer"]=[&]() {
    json return_CcROAZq=json({});
    return serialize_VkBuffer(dstBuffer);}();
data_json["members"]["regionCount"]=[&]() {
    json return_dxKAhxf=json({});
    return serialize_uint32_t(regionCount);}();
data_json["members"]["pRegions"]=[&]() {
    json return_MmOgGsb=json({});
    
        if (pRegions==NULL){
            return_MmOgGsb["null"]=true;
            return return_MmOgGsb;
        }
        
        return_MmOgGsb["members"]={};
        for(int MmOgGsb=0; MmOgGsb < regionCount; MmOgGsb++){
            json temp;
            temp=[&]() {
    json return_YzNWmDV=json({});
    return serialize_VkBufferCopy(pRegions[MmOgGsb]);}();
            return_MmOgGsb["members"].push_back(temp);
        }
        return return_MmOgGsb;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
srcBuffer=deserialize_VkBuffer(result["members"]["srcBuffer"]);}();
[&]() {
dstBuffer=deserialize_VkBuffer(result["members"]["dstBuffer"]);}();
[&]() {
regionCount=deserialize_uint32_t(result["members"]["regionCount"]);}();

}
void vkCmdCopyImage(
VkCommandBuffer commandBuffer,
 VkImage srcImage,
 VkImageLayout srcImageLayout,
 VkImage dstImage,
 VkImageLayout dstImageLayout,
 uint32_t regionCount,
 const VkImageCopy* pRegions
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdCopyImage";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["srcImage"]=[&]() {
    json return_ttFUXjv=json({});
    return serialize_VkImage(srcImage);}();
data_json["members"]["srcImageLayout"]=[&]() {
    json return_jSpcGXR=json({});
    return serialize_VkImageLayout(srcImageLayout);}();
data_json["members"]["dstImage"]=[&]() {
    json return_YrGgULv=json({});
    return serialize_VkImage(dstImage);}();
data_json["members"]["dstImageLayout"]=[&]() {
    json return_MaoOcTW=json({});
    return serialize_VkImageLayout(dstImageLayout);}();
data_json["members"]["regionCount"]=[&]() {
    json return_dxKAhxf=json({});
    return serialize_uint32_t(regionCount);}();
data_json["members"]["pRegions"]=[&]() {
    json return_JtStBSv=json({});
    
        if (pRegions==NULL){
            return_JtStBSv["null"]=true;
            return return_JtStBSv;
        }
        
        return_JtStBSv["members"]={};
        for(int JtStBSv=0; JtStBSv < regionCount; JtStBSv++){
            json temp;
            temp=[&]() {
    json return_xUdVwWX=json({});
    return serialize_VkImageCopy(pRegions[JtStBSv]);}();
            return_JtStBSv["members"].push_back(temp);
        }
        return return_JtStBSv;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
srcImage=deserialize_VkImage(result["members"]["srcImage"]);}();
[&]() {
srcImageLayout=deserialize_VkImageLayout(result["members"]["srcImageLayout"]);}();
[&]() {
dstImage=deserialize_VkImage(result["members"]["dstImage"]);}();
[&]() {
dstImageLayout=deserialize_VkImageLayout(result["members"]["dstImageLayout"]);}();
[&]() {
regionCount=deserialize_uint32_t(result["members"]["regionCount"]);}();

}
void vkCmdBlitImage(
VkCommandBuffer commandBuffer,
 VkImage srcImage,
 VkImageLayout srcImageLayout,
 VkImage dstImage,
 VkImageLayout dstImageLayout,
 uint32_t regionCount,
 const VkImageBlit* pRegions,
 VkFilter filter
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdBlitImage";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["srcImage"]=[&]() {
    json return_ttFUXjv=json({});
    return serialize_VkImage(srcImage);}();
data_json["members"]["srcImageLayout"]=[&]() {
    json return_jSpcGXR=json({});
    return serialize_VkImageLayout(srcImageLayout);}();
data_json["members"]["dstImage"]=[&]() {
    json return_YrGgULv=json({});
    return serialize_VkImage(dstImage);}();
data_json["members"]["dstImageLayout"]=[&]() {
    json return_MaoOcTW=json({});
    return serialize_VkImageLayout(dstImageLayout);}();
data_json["members"]["regionCount"]=[&]() {
    json return_dxKAhxf=json({});
    return serialize_uint32_t(regionCount);}();
data_json["members"]["pRegions"]=[&]() {
    json return_IiZqWbk=json({});
    
        if (pRegions==NULL){
            return_IiZqWbk["null"]=true;
            return return_IiZqWbk;
        }
        
        return_IiZqWbk["members"]={};
        for(int IiZqWbk=0; IiZqWbk < regionCount; IiZqWbk++){
            json temp;
            temp=[&]() {
    json return_EpdzwKj=json({});
    return serialize_VkImageBlit(pRegions[IiZqWbk]);}();
            return_IiZqWbk["members"].push_back(temp);
        }
        return return_IiZqWbk;
        }();
data_json["members"]["filter"]=[&]() {
    json return_zqosFdU=json({});
    return serialize_VkFilter(filter);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
srcImage=deserialize_VkImage(result["members"]["srcImage"]);}();
[&]() {
srcImageLayout=deserialize_VkImageLayout(result["members"]["srcImageLayout"]);}();
[&]() {
dstImage=deserialize_VkImage(result["members"]["dstImage"]);}();
[&]() {
dstImageLayout=deserialize_VkImageLayout(result["members"]["dstImageLayout"]);}();
[&]() {
regionCount=deserialize_uint32_t(result["members"]["regionCount"]);}();

[&]() {
filter=deserialize_VkFilter(result["members"]["filter"]);}();
}
void vkCmdCopyBufferToImage(
VkCommandBuffer commandBuffer,
 VkBuffer srcBuffer,
 VkImage dstImage,
 VkImageLayout dstImageLayout,
 uint32_t regionCount,
 const VkBufferImageCopy* pRegions
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdCopyBufferToImage";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["srcBuffer"]=[&]() {
    json return_eYEwbWD=json({});
    return serialize_VkBuffer(srcBuffer);}();
data_json["members"]["dstImage"]=[&]() {
    json return_YrGgULv=json({});
    return serialize_VkImage(dstImage);}();
data_json["members"]["dstImageLayout"]=[&]() {
    json return_MaoOcTW=json({});
    return serialize_VkImageLayout(dstImageLayout);}();
data_json["members"]["regionCount"]=[&]() {
    json return_dxKAhxf=json({});
    return serialize_uint32_t(regionCount);}();
data_json["members"]["pRegions"]=[&]() {
    json return_aerAosh=json({});
    
        if (pRegions==NULL){
            return_aerAosh["null"]=true;
            return return_aerAosh;
        }
        
        return_aerAosh["members"]={};
        for(int aerAosh=0; aerAosh < regionCount; aerAosh++){
            json temp;
            temp=[&]() {
    json return_aHaUytO=json({});
    return serialize_VkBufferImageCopy(pRegions[aerAosh]);}();
            return_aerAosh["members"].push_back(temp);
        }
        return return_aerAosh;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
srcBuffer=deserialize_VkBuffer(result["members"]["srcBuffer"]);}();
[&]() {
dstImage=deserialize_VkImage(result["members"]["dstImage"]);}();
[&]() {
dstImageLayout=deserialize_VkImageLayout(result["members"]["dstImageLayout"]);}();
[&]() {
regionCount=deserialize_uint32_t(result["members"]["regionCount"]);}();

}
void vkCmdCopyImageToBuffer(
VkCommandBuffer commandBuffer,
 VkImage srcImage,
 VkImageLayout srcImageLayout,
 VkBuffer dstBuffer,
 uint32_t regionCount,
 const VkBufferImageCopy* pRegions
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdCopyImageToBuffer";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["srcImage"]=[&]() {
    json return_ttFUXjv=json({});
    return serialize_VkImage(srcImage);}();
data_json["members"]["srcImageLayout"]=[&]() {
    json return_jSpcGXR=json({});
    return serialize_VkImageLayout(srcImageLayout);}();
data_json["members"]["dstBuffer"]=[&]() {
    json return_CcROAZq=json({});
    return serialize_VkBuffer(dstBuffer);}();
data_json["members"]["regionCount"]=[&]() {
    json return_dxKAhxf=json({});
    return serialize_uint32_t(regionCount);}();
data_json["members"]["pRegions"]=[&]() {
    json return_aerAosh=json({});
    
        if (pRegions==NULL){
            return_aerAosh["null"]=true;
            return return_aerAosh;
        }
        
        return_aerAosh["members"]={};
        for(int aerAosh=0; aerAosh < regionCount; aerAosh++){
            json temp;
            temp=[&]() {
    json return_aHaUytO=json({});
    return serialize_VkBufferImageCopy(pRegions[aerAosh]);}();
            return_aerAosh["members"].push_back(temp);
        }
        return return_aerAosh;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
srcImage=deserialize_VkImage(result["members"]["srcImage"]);}();
[&]() {
srcImageLayout=deserialize_VkImageLayout(result["members"]["srcImageLayout"]);}();
[&]() {
dstBuffer=deserialize_VkBuffer(result["members"]["dstBuffer"]);}();
[&]() {
regionCount=deserialize_uint32_t(result["members"]["regionCount"]);}();

}
void vkCmdCopyMemoryIndirectNV(
VkCommandBuffer commandBuffer,
 VkDeviceAddress copyBufferAddress,
 uint32_t copyCount,
 uint32_t stride
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdCopyMemoryIndirectNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["copyBufferAddress"]=[&]() {
    json return_BmYuuHM=json({});
    return_BmYuuHM=[&]() {
    json return_hBebUNg=json({});
    return serialize_uint64_t(copyBufferAddress);}();return return_BmYuuHM;}();
data_json["members"]["copyCount"]=[&]() {
    json return_UrUQnTa=json({});
    return serialize_uint32_t(copyCount);}();
data_json["members"]["stride"]=[&]() {
    json return_TkKksoe=json({});
    return serialize_uint32_t(stride);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
[&]() {
copyBufferAddress=deserialize_uint64_t(result["members"]["copyBufferAddress"]);}();}();
[&]() {
copyCount=deserialize_uint32_t(result["members"]["copyCount"]);}();
[&]() {
stride=deserialize_uint32_t(result["members"]["stride"]);}();
}
void vkCmdCopyMemoryToImageIndirectNV(
VkCommandBuffer commandBuffer,
 VkDeviceAddress copyBufferAddress,
 uint32_t copyCount,
 uint32_t stride,
 VkImage dstImage,
 VkImageLayout dstImageLayout,
 const VkImageSubresourceLayers* pImageSubresources
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdCopyMemoryToImageIndirectNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["copyBufferAddress"]=[&]() {
    json return_BmYuuHM=json({});
    return_BmYuuHM=[&]() {
    json return_hBebUNg=json({});
    return serialize_uint64_t(copyBufferAddress);}();return return_BmYuuHM;}();
data_json["members"]["copyCount"]=[&]() {
    json return_UrUQnTa=json({});
    return serialize_uint32_t(copyCount);}();
data_json["members"]["stride"]=[&]() {
    json return_CdoKfxC=json({});
    return serialize_uint32_t(stride);}();
data_json["members"]["dstImage"]=[&]() {
    json return_YrGgULv=json({});
    return serialize_VkImage(dstImage);}();
data_json["members"]["dstImageLayout"]=[&]() {
    json return_MaoOcTW=json({});
    return serialize_VkImageLayout(dstImageLayout);}();
data_json["members"]["pImageSubresources"]=[&]() {
    json return_NsDydiE=json({});
    
        if (pImageSubresources==NULL){
            return_NsDydiE["null"]=true;
            return return_NsDydiE;
        }
        
        return_NsDydiE["members"]={};
        for(int NsDydiE=0; NsDydiE < copyCount; NsDydiE++){
            json temp;
            temp=[&]() {
    json return_cUUuxJX=json({});
    return serialize_VkImageSubresourceLayers(pImageSubresources[NsDydiE]);}();
            return_NsDydiE["members"].push_back(temp);
        }
        return return_NsDydiE;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
[&]() {
copyBufferAddress=deserialize_uint64_t(result["members"]["copyBufferAddress"]);}();}();
[&]() {
copyCount=deserialize_uint32_t(result["members"]["copyCount"]);}();
[&]() {
stride=deserialize_uint32_t(result["members"]["stride"]);}();
[&]() {
dstImage=deserialize_VkImage(result["members"]["dstImage"]);}();
[&]() {
dstImageLayout=deserialize_VkImageLayout(result["members"]["dstImageLayout"]);}();

}
void vkCmdUpdateBuffer(
VkCommandBuffer commandBuffer,
 VkBuffer dstBuffer,
 VkDeviceSize dstOffset,
 VkDeviceSize dataSize,
 const void* pData
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdUpdateBuffer";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["dstBuffer"]=[&]() {
    json return_CcROAZq=json({});
    return serialize_VkBuffer(dstBuffer);}();
data_json["members"]["dstOffset"]=[&]() {
    json return_Hccaenu=json({});
    return_Hccaenu=[&]() {
    json return_RfkrhBA=json({});
    return serialize_uint64_t(dstOffset);}();return return_Hccaenu;}();
data_json["members"]["dataSize"]=[&]() {
    json return_afcGkqb=json({});
    return_afcGkqb=[&]() {
    json return_JwHZINi=json({});
    return serialize_uint64_t(dataSize);}();return return_afcGkqb;}();
data_json["members"]["pData"]=[&]() {
    json return_wzShuSQ=json({});
    
        if (pData==NULL){
            return_wzShuSQ["null"]=true;
            return return_wzShuSQ;
        }
        return serialize_void_p(pData);
}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
dstBuffer=deserialize_VkBuffer(result["members"]["dstBuffer"]);}();
[&]() {
[&]() {
dstOffset=deserialize_uint64_t(result["members"]["dstOffset"]);}();}();
[&]() {
[&]() {
dataSize=deserialize_uint64_t(result["members"]["dataSize"]);}();}();

}
void vkCmdFillBuffer(
VkCommandBuffer commandBuffer,
 VkBuffer dstBuffer,
 VkDeviceSize dstOffset,
 VkDeviceSize size,
 uint32_t data
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdFillBuffer";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["dstBuffer"]=[&]() {
    json return_CcROAZq=json({});
    return serialize_VkBuffer(dstBuffer);}();
data_json["members"]["dstOffset"]=[&]() {
    json return_Hccaenu=json({});
    return_Hccaenu=[&]() {
    json return_RfkrhBA=json({});
    return serialize_uint64_t(dstOffset);}();return return_Hccaenu;}();
data_json["members"]["size"]=[&]() {
    json return_EcDMigR=json({});
    return_EcDMigR=[&]() {
    json return_vDcVgJV=json({});
    return serialize_uint64_t(size);}();return return_EcDMigR;}();
data_json["members"]["data"]=[&]() {
    json return_PPVKCZS=json({});
    return serialize_uint32_t(data);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
dstBuffer=deserialize_VkBuffer(result["members"]["dstBuffer"]);}();
[&]() {
[&]() {
dstOffset=deserialize_uint64_t(result["members"]["dstOffset"]);}();}();
[&]() {
[&]() {
size=deserialize_uint64_t(result["members"]["size"]);}();}();
[&]() {
data=deserialize_uint32_t(result["members"]["data"]);}();
}
void vkCmdClearColorImage(
VkCommandBuffer commandBuffer,
 VkImage image,
 VkImageLayout imageLayout,
 const VkClearColorValue* pColor,
 uint32_t rangeCount,
 const VkImageSubresourceRange* pRanges
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdClearColorImage";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["image"]=[&]() {
    json return_fgEkUQK=json({});
    return serialize_VkImage(image);}();
data_json["members"]["imageLayout"]=[&]() {
    json return_eKAjCjh=json({});
    return serialize_VkImageLayout(imageLayout);}();
data_json["members"]["pColor"]=[&]() {
    json return_SYiLkxh=json({});
    
        if (pColor==NULL){
            return_SYiLkxh["null"]=true;
            return return_SYiLkxh;
        }
        return_SYiLkxh=[&]() {
    json return_KHVYImp=json({});
    return serialize_VkClearColorValue(*pColor);}();
return return_SYiLkxh;}();
data_json["members"]["rangeCount"]=[&]() {
    json return_kMKRbXK=json({});
    return serialize_uint32_t(rangeCount);}();
data_json["members"]["pRanges"]=[&]() {
    json return_VlaQKwU=json({});
    
        if (pRanges==NULL){
            return_VlaQKwU["null"]=true;
            return return_VlaQKwU;
        }
        
        return_VlaQKwU["members"]={};
        for(int VlaQKwU=0; VlaQKwU < rangeCount; VlaQKwU++){
            json temp;
            temp=[&]() {
    json return_HgVzjSc=json({});
    return serialize_VkImageSubresourceRange(pRanges[VlaQKwU]);}();
            return_VlaQKwU["members"].push_back(temp);
        }
        return return_VlaQKwU;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
image=deserialize_VkImage(result["members"]["image"]);}();
[&]() {
imageLayout=deserialize_VkImageLayout(result["members"]["imageLayout"]);}();

[&]() {
rangeCount=deserialize_uint32_t(result["members"]["rangeCount"]);}();

}
void vkCmdClearDepthStencilImage(
VkCommandBuffer commandBuffer,
 VkImage image,
 VkImageLayout imageLayout,
 const VkClearDepthStencilValue* pDepthStencil,
 uint32_t rangeCount,
 const VkImageSubresourceRange* pRanges
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdClearDepthStencilImage";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["image"]=[&]() {
    json return_fgEkUQK=json({});
    return serialize_VkImage(image);}();
data_json["members"]["imageLayout"]=[&]() {
    json return_eKAjCjh=json({});
    return serialize_VkImageLayout(imageLayout);}();
data_json["members"]["pDepthStencil"]=[&]() {
    json return_daFOvir=json({});
    
        if (pDepthStencil==NULL){
            return_daFOvir["null"]=true;
            return return_daFOvir;
        }
        return_daFOvir=[&]() {
    json return_TTrZzpm=json({});
    return serialize_VkClearDepthStencilValue(*pDepthStencil);}();
return return_daFOvir;}();
data_json["members"]["rangeCount"]=[&]() {
    json return_kMKRbXK=json({});
    return serialize_uint32_t(rangeCount);}();
data_json["members"]["pRanges"]=[&]() {
    json return_VlaQKwU=json({});
    
        if (pRanges==NULL){
            return_VlaQKwU["null"]=true;
            return return_VlaQKwU;
        }
        
        return_VlaQKwU["members"]={};
        for(int VlaQKwU=0; VlaQKwU < rangeCount; VlaQKwU++){
            json temp;
            temp=[&]() {
    json return_HgVzjSc=json({});
    return serialize_VkImageSubresourceRange(pRanges[VlaQKwU]);}();
            return_VlaQKwU["members"].push_back(temp);
        }
        return return_VlaQKwU;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
image=deserialize_VkImage(result["members"]["image"]);}();
[&]() {
imageLayout=deserialize_VkImageLayout(result["members"]["imageLayout"]);}();

[&]() {
rangeCount=deserialize_uint32_t(result["members"]["rangeCount"]);}();

}
void vkCmdClearAttachments(
VkCommandBuffer commandBuffer,
 uint32_t attachmentCount,
 const VkClearAttachment* pAttachments,
 uint32_t rectCount,
 const VkClearRect* pRects
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdClearAttachments";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["attachmentCount"]=[&]() {
    json return_RLrTJzT=json({});
    return serialize_uint32_t(attachmentCount);}();
data_json["members"]["pAttachments"]=[&]() {
    json return_UYQjYbd=json({});
    
        if (pAttachments==NULL){
            return_UYQjYbd["null"]=true;
            return return_UYQjYbd;
        }
        
        return_UYQjYbd["members"]={};
        for(int UYQjYbd=0; UYQjYbd < attachmentCount; UYQjYbd++){
            json temp;
            temp=[&]() {
    json return_wFuMYyg=json({});
    return serialize_VkClearAttachment(pAttachments[UYQjYbd]);}();
            return_UYQjYbd["members"].push_back(temp);
        }
        return return_UYQjYbd;
        }();
data_json["members"]["rectCount"]=[&]() {
    json return_JAbOCSN=json({});
    return serialize_uint32_t(rectCount);}();
data_json["members"]["pRects"]=[&]() {
    json return_qjcpCdc=json({});
    
        if (pRects==NULL){
            return_qjcpCdc["null"]=true;
            return return_qjcpCdc;
        }
        
        return_qjcpCdc["members"]={};
        for(int qjcpCdc=0; qjcpCdc < rectCount; qjcpCdc++){
            json temp;
            temp=[&]() {
    json return_hhecOQj=json({});
    return serialize_VkClearRect(pRects[qjcpCdc]);}();
            return_qjcpCdc["members"].push_back(temp);
        }
        return return_qjcpCdc;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
attachmentCount=deserialize_uint32_t(result["members"]["attachmentCount"]);}();

[&]() {
rectCount=deserialize_uint32_t(result["members"]["rectCount"]);}();

}
void vkCmdResolveImage(
VkCommandBuffer commandBuffer,
 VkImage srcImage,
 VkImageLayout srcImageLayout,
 VkImage dstImage,
 VkImageLayout dstImageLayout,
 uint32_t regionCount,
 const VkImageResolve* pRegions
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdResolveImage";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["srcImage"]=[&]() {
    json return_ttFUXjv=json({});
    return serialize_VkImage(srcImage);}();
data_json["members"]["srcImageLayout"]=[&]() {
    json return_jSpcGXR=json({});
    return serialize_VkImageLayout(srcImageLayout);}();
data_json["members"]["dstImage"]=[&]() {
    json return_YrGgULv=json({});
    return serialize_VkImage(dstImage);}();
data_json["members"]["dstImageLayout"]=[&]() {
    json return_MaoOcTW=json({});
    return serialize_VkImageLayout(dstImageLayout);}();
data_json["members"]["regionCount"]=[&]() {
    json return_dxKAhxf=json({});
    return serialize_uint32_t(regionCount);}();
data_json["members"]["pRegions"]=[&]() {
    json return_NdlfwMH=json({});
    
        if (pRegions==NULL){
            return_NdlfwMH["null"]=true;
            return return_NdlfwMH;
        }
        
        return_NdlfwMH["members"]={};
        for(int NdlfwMH=0; NdlfwMH < regionCount; NdlfwMH++){
            json temp;
            temp=[&]() {
    json return_IojYFlC=json({});
    return serialize_VkImageResolve(pRegions[NdlfwMH]);}();
            return_NdlfwMH["members"].push_back(temp);
        }
        return return_NdlfwMH;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
srcImage=deserialize_VkImage(result["members"]["srcImage"]);}();
[&]() {
srcImageLayout=deserialize_VkImageLayout(result["members"]["srcImageLayout"]);}();
[&]() {
dstImage=deserialize_VkImage(result["members"]["dstImage"]);}();
[&]() {
dstImageLayout=deserialize_VkImageLayout(result["members"]["dstImageLayout"]);}();
[&]() {
regionCount=deserialize_uint32_t(result["members"]["regionCount"]);}();

}
void vkCmdSetEvent(
VkCommandBuffer commandBuffer,
 VkEvent event,
 VkPipelineStageFlags stageMask
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetEvent";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["event"]=[&]() {
    json return_LAeltAe=json({});
    return serialize_VkEvent(event);}();
data_json["members"]["stageMask"]=[&]() {
    json return_olqbFGe=json({});
    return serialize_VkPipelineStageFlags(stageMask);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
event=deserialize_VkEvent(result["members"]["event"]);}();
[&]() {
stageMask=deserialize_VkPipelineStageFlags(result["members"]["stageMask"]);}();
}
void vkCmdResetEvent(
VkCommandBuffer commandBuffer,
 VkEvent event,
 VkPipelineStageFlags stageMask
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdResetEvent";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["event"]=[&]() {
    json return_LAeltAe=json({});
    return serialize_VkEvent(event);}();
data_json["members"]["stageMask"]=[&]() {
    json return_olqbFGe=json({});
    return serialize_VkPipelineStageFlags(stageMask);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
event=deserialize_VkEvent(result["members"]["event"]);}();
[&]() {
stageMask=deserialize_VkPipelineStageFlags(result["members"]["stageMask"]);}();
}
void vkCmdWaitEvents(
VkCommandBuffer commandBuffer,
 uint32_t eventCount,
 const VkEvent* pEvents,
 VkPipelineStageFlags srcStageMask,
 VkPipelineStageFlags dstStageMask,
 uint32_t memoryBarrierCount,
 const VkMemoryBarrier* pMemoryBarriers,
 uint32_t bufferMemoryBarrierCount,
 const VkBufferMemoryBarrier* pBufferMemoryBarriers,
 uint32_t imageMemoryBarrierCount,
 const VkImageMemoryBarrier* pImageMemoryBarriers
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdWaitEvents";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["eventCount"]=[&]() {
    json return_bkwdAgQ=json({});
    return serialize_uint32_t(eventCount);}();
data_json["members"]["pEvents"]=[&]() {
    json return_PTtibsf=json({});
    
        if (pEvents==NULL){
            return_PTtibsf["null"]=true;
            return return_PTtibsf;
        }
        
        return_PTtibsf["members"]={};
        for(int PTtibsf=0; PTtibsf < eventCount; PTtibsf++){
            json temp;
            temp=[&]() {
    json return_CizVpYM=json({});
    return serialize_VkEvent(pEvents[PTtibsf]);}();
            return_PTtibsf["members"].push_back(temp);
        }
        return return_PTtibsf;
        }();
data_json["members"]["srcStageMask"]=[&]() {
    json return_QGQMorx=json({});
    return serialize_VkPipelineStageFlags(srcStageMask);}();
data_json["members"]["dstStageMask"]=[&]() {
    json return_nZwFFwu=json({});
    return serialize_VkPipelineStageFlags(dstStageMask);}();
data_json["members"]["memoryBarrierCount"]=[&]() {
    json return_VnnqrBL=json({});
    return serialize_uint32_t(memoryBarrierCount);}();
data_json["members"]["pMemoryBarriers"]=[&]() {
    json return_ijpmWux=json({});
    
        if (pMemoryBarriers==NULL){
            return_ijpmWux["null"]=true;
            return return_ijpmWux;
        }
        
        return_ijpmWux["members"]={};
        for(int ijpmWux=0; ijpmWux < memoryBarrierCount; ijpmWux++){
            json temp;
            temp=[&]() {
    json return_ivxuntr=json({});
    return serialize_VkMemoryBarrier(pMemoryBarriers[ijpmWux]);}();
            return_ijpmWux["members"].push_back(temp);
        }
        return return_ijpmWux;
        }();
data_json["members"]["bufferMemoryBarrierCount"]=[&]() {
    json return_ncdzUGc=json({});
    return serialize_uint32_t(bufferMemoryBarrierCount);}();
data_json["members"]["pBufferMemoryBarriers"]=[&]() {
    json return_GiNOBdy=json({});
    
        if (pBufferMemoryBarriers==NULL){
            return_GiNOBdy["null"]=true;
            return return_GiNOBdy;
        }
        
        return_GiNOBdy["members"]={};
        for(int GiNOBdy=0; GiNOBdy < bufferMemoryBarrierCount; GiNOBdy++){
            json temp;
            temp=[&]() {
    json return_UEKITtG=json({});
    return serialize_VkBufferMemoryBarrier(pBufferMemoryBarriers[GiNOBdy]);}();
            return_GiNOBdy["members"].push_back(temp);
        }
        return return_GiNOBdy;
        }();
data_json["members"]["imageMemoryBarrierCount"]=[&]() {
    json return_lhQvufS=json({});
    return serialize_uint32_t(imageMemoryBarrierCount);}();
data_json["members"]["pImageMemoryBarriers"]=[&]() {
    json return_aivtoiz=json({});
    
        if (pImageMemoryBarriers==NULL){
            return_aivtoiz["null"]=true;
            return return_aivtoiz;
        }
        
        return_aivtoiz["members"]={};
        for(int aivtoiz=0; aivtoiz < imageMemoryBarrierCount; aivtoiz++){
            json temp;
            temp=[&]() {
    json return_IvBugLr=json({});
    return serialize_VkImageMemoryBarrier(pImageMemoryBarriers[aivtoiz]);}();
            return_aivtoiz["members"].push_back(temp);
        }
        return return_aivtoiz;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
eventCount=deserialize_uint32_t(result["members"]["eventCount"]);}();

[&]() {
srcStageMask=deserialize_VkPipelineStageFlags(result["members"]["srcStageMask"]);}();
[&]() {
dstStageMask=deserialize_VkPipelineStageFlags(result["members"]["dstStageMask"]);}();
[&]() {
memoryBarrierCount=deserialize_uint32_t(result["members"]["memoryBarrierCount"]);}();

[&]() {
bufferMemoryBarrierCount=deserialize_uint32_t(result["members"]["bufferMemoryBarrierCount"]);}();

[&]() {
imageMemoryBarrierCount=deserialize_uint32_t(result["members"]["imageMemoryBarrierCount"]);}();

}
void vkCmdPipelineBarrier(
VkCommandBuffer commandBuffer,
 VkPipelineStageFlags srcStageMask,
 VkPipelineStageFlags dstStageMask,
 VkDependencyFlags dependencyFlags,
 uint32_t memoryBarrierCount,
 const VkMemoryBarrier* pMemoryBarriers,
 uint32_t bufferMemoryBarrierCount,
 const VkBufferMemoryBarrier* pBufferMemoryBarriers,
 uint32_t imageMemoryBarrierCount,
 const VkImageMemoryBarrier* pImageMemoryBarriers
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdPipelineBarrier";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["srcStageMask"]=[&]() {
    json return_QGQMorx=json({});
    return serialize_VkPipelineStageFlags(srcStageMask);}();
data_json["members"]["dstStageMask"]=[&]() {
    json return_nZwFFwu=json({});
    return serialize_VkPipelineStageFlags(dstStageMask);}();
data_json["members"]["dependencyFlags"]=[&]() {
    json return_ZrlnfsX=json({});
    return serialize_VkDependencyFlags(dependencyFlags);}();
data_json["members"]["memoryBarrierCount"]=[&]() {
    json return_VnnqrBL=json({});
    return serialize_uint32_t(memoryBarrierCount);}();
data_json["members"]["pMemoryBarriers"]=[&]() {
    json return_ijpmWux=json({});
    
        if (pMemoryBarriers==NULL){
            return_ijpmWux["null"]=true;
            return return_ijpmWux;
        }
        
        return_ijpmWux["members"]={};
        for(int ijpmWux=0; ijpmWux < memoryBarrierCount; ijpmWux++){
            json temp;
            temp=[&]() {
    json return_ivxuntr=json({});
    return serialize_VkMemoryBarrier(pMemoryBarriers[ijpmWux]);}();
            return_ijpmWux["members"].push_back(temp);
        }
        return return_ijpmWux;
        }();
data_json["members"]["bufferMemoryBarrierCount"]=[&]() {
    json return_ncdzUGc=json({});
    return serialize_uint32_t(bufferMemoryBarrierCount);}();
data_json["members"]["pBufferMemoryBarriers"]=[&]() {
    json return_GiNOBdy=json({});
    
        if (pBufferMemoryBarriers==NULL){
            return_GiNOBdy["null"]=true;
            return return_GiNOBdy;
        }
        
        return_GiNOBdy["members"]={};
        for(int GiNOBdy=0; GiNOBdy < bufferMemoryBarrierCount; GiNOBdy++){
            json temp;
            temp=[&]() {
    json return_UEKITtG=json({});
    return serialize_VkBufferMemoryBarrier(pBufferMemoryBarriers[GiNOBdy]);}();
            return_GiNOBdy["members"].push_back(temp);
        }
        return return_GiNOBdy;
        }();
data_json["members"]["imageMemoryBarrierCount"]=[&]() {
    json return_lhQvufS=json({});
    return serialize_uint32_t(imageMemoryBarrierCount);}();
data_json["members"]["pImageMemoryBarriers"]=[&]() {
    json return_aivtoiz=json({});
    
        if (pImageMemoryBarriers==NULL){
            return_aivtoiz["null"]=true;
            return return_aivtoiz;
        }
        
        return_aivtoiz["members"]={};
        for(int aivtoiz=0; aivtoiz < imageMemoryBarrierCount; aivtoiz++){
            json temp;
            temp=[&]() {
    json return_IvBugLr=json({});
    return serialize_VkImageMemoryBarrier(pImageMemoryBarriers[aivtoiz]);}();
            return_aivtoiz["members"].push_back(temp);
        }
        return return_aivtoiz;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
srcStageMask=deserialize_VkPipelineStageFlags(result["members"]["srcStageMask"]);}();
[&]() {
dstStageMask=deserialize_VkPipelineStageFlags(result["members"]["dstStageMask"]);}();
[&]() {
dependencyFlags=deserialize_VkDependencyFlags(result["members"]["dependencyFlags"]);}();
[&]() {
memoryBarrierCount=deserialize_uint32_t(result["members"]["memoryBarrierCount"]);}();

[&]() {
bufferMemoryBarrierCount=deserialize_uint32_t(result["members"]["bufferMemoryBarrierCount"]);}();

[&]() {
imageMemoryBarrierCount=deserialize_uint32_t(result["members"]["imageMemoryBarrierCount"]);}();

}
void vkCmdBeginQuery(
VkCommandBuffer commandBuffer,
 VkQueryPool queryPool,
 uint32_t query,
 VkQueryControlFlags flags
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdBeginQuery";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["queryPool"]=[&]() {
    json return_hLGHCzh=json({});
    return serialize_VkQueryPool(queryPool);}();
data_json["members"]["query"]=[&]() {
    json return_NtquCQL=json({});
    return serialize_uint32_t(query);}();
data_json["members"]["flags"]=[&]() {
    json return_zYxUeJx=json({});
    return serialize_VkQueryControlFlags(flags);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
queryPool=deserialize_VkQueryPool(result["members"]["queryPool"]);}();
[&]() {
query=deserialize_uint32_t(result["members"]["query"]);}();
[&]() {
flags=deserialize_VkQueryControlFlags(result["members"]["flags"]);}();
}
void vkCmdEndQuery(
VkCommandBuffer commandBuffer,
 VkQueryPool queryPool,
 uint32_t query
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdEndQuery";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["queryPool"]=[&]() {
    json return_hLGHCzh=json({});
    return serialize_VkQueryPool(queryPool);}();
data_json["members"]["query"]=[&]() {
    json return_fhEpMvz=json({});
    return serialize_uint32_t(query);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
queryPool=deserialize_VkQueryPool(result["members"]["queryPool"]);}();
[&]() {
query=deserialize_uint32_t(result["members"]["query"]);}();
}
void vkCmdBeginConditionalRenderingEXT(
VkCommandBuffer commandBuffer,
 const VkConditionalRenderingBeginInfoEXT* pConditionalRenderingBegin
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdBeginConditionalRenderingEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pConditionalRenderingBegin"]=[&]() {
    json return_CoegtaT=json({});
    
        if (pConditionalRenderingBegin==NULL){
            return_CoegtaT["null"]=true;
            return return_CoegtaT;
        }
        return_CoegtaT=[&]() {
    json return_UmMKkku=json({});
    return serialize_VkConditionalRenderingBeginInfoEXT(*pConditionalRenderingBegin);}();
return return_CoegtaT;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();

}
void vkCmdEndConditionalRenderingEXT(
VkCommandBuffer commandBuffer
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdEndConditionalRenderingEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_GVaXYIY=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
}
void vkCmdResetQueryPool(
VkCommandBuffer commandBuffer,
 VkQueryPool queryPool,
 uint32_t firstQuery,
 uint32_t queryCount
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdResetQueryPool";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["queryPool"]=[&]() {
    json return_hLGHCzh=json({});
    return serialize_VkQueryPool(queryPool);}();
data_json["members"]["firstQuery"]=[&]() {
    json return_NDUBmTE=json({});
    return serialize_uint32_t(firstQuery);}();
data_json["members"]["queryCount"]=[&]() {
    json return_uMPzGuZ=json({});
    return serialize_uint32_t(queryCount);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
queryPool=deserialize_VkQueryPool(result["members"]["queryPool"]);}();
[&]() {
firstQuery=deserialize_uint32_t(result["members"]["firstQuery"]);}();
[&]() {
queryCount=deserialize_uint32_t(result["members"]["queryCount"]);}();
}
void vkCmdWriteTimestamp(
VkCommandBuffer commandBuffer,
 VkPipelineStageFlagBits pipelineStage,
 VkQueryPool queryPool,
 uint32_t query
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdWriteTimestamp";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pipelineStage"]=[&]() {
    json return_zuwjquI=json({});
    return serialize_VkPipelineStageFlagBits(pipelineStage);}();
data_json["members"]["queryPool"]=[&]() {
    json return_hLGHCzh=json({});
    return serialize_VkQueryPool(queryPool);}();
data_json["members"]["query"]=[&]() {
    json return_fhEpMvz=json({});
    return serialize_uint32_t(query);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
pipelineStage=deserialize_VkPipelineStageFlagBits(result["members"]["pipelineStage"]);}();
[&]() {
queryPool=deserialize_VkQueryPool(result["members"]["queryPool"]);}();
[&]() {
query=deserialize_uint32_t(result["members"]["query"]);}();
}
void vkCmdCopyQueryPoolResults(
VkCommandBuffer commandBuffer,
 VkQueryPool queryPool,
 uint32_t firstQuery,
 uint32_t queryCount,
 VkBuffer dstBuffer,
 VkDeviceSize dstOffset,
 VkDeviceSize stride,
 VkQueryResultFlags flags
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdCopyQueryPoolResults";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["queryPool"]=[&]() {
    json return_hLGHCzh=json({});
    return serialize_VkQueryPool(queryPool);}();
data_json["members"]["firstQuery"]=[&]() {
    json return_NDUBmTE=json({});
    return serialize_uint32_t(firstQuery);}();
data_json["members"]["queryCount"]=[&]() {
    json return_qTWGWQh=json({});
    return serialize_uint32_t(queryCount);}();
data_json["members"]["dstBuffer"]=[&]() {
    json return_CcROAZq=json({});
    return serialize_VkBuffer(dstBuffer);}();
data_json["members"]["dstOffset"]=[&]() {
    json return_Hccaenu=json({});
    return_Hccaenu=[&]() {
    json return_RfkrhBA=json({});
    return serialize_uint64_t(dstOffset);}();return return_Hccaenu;}();
data_json["members"]["stride"]=[&]() {
    json return_MQAmiOM=json({});
    return_MQAmiOM=[&]() {
    json return_jeGZpau=json({});
    return serialize_uint64_t(stride);}();return return_MQAmiOM;}();
data_json["members"]["flags"]=[&]() {
    json return_ZmykXqP=json({});
    return serialize_VkQueryResultFlags(flags);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
queryPool=deserialize_VkQueryPool(result["members"]["queryPool"]);}();
[&]() {
firstQuery=deserialize_uint32_t(result["members"]["firstQuery"]);}();
[&]() {
queryCount=deserialize_uint32_t(result["members"]["queryCount"]);}();
[&]() {
dstBuffer=deserialize_VkBuffer(result["members"]["dstBuffer"]);}();
[&]() {
[&]() {
dstOffset=deserialize_uint64_t(result["members"]["dstOffset"]);}();}();
[&]() {
[&]() {
stride=deserialize_uint64_t(result["members"]["stride"]);}();}();
[&]() {
flags=deserialize_VkQueryResultFlags(result["members"]["flags"]);}();
}
void vkCmdPushConstants(
VkCommandBuffer commandBuffer,
 VkPipelineLayout layout,
 VkShaderStageFlags stageFlags,
 uint32_t offset,
 uint32_t size,
 const void* pValues
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdPushConstants";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["layout"]=[&]() {
    json return_PdiawKY=json({});
    return serialize_VkPipelineLayout(layout);}();
data_json["members"]["stageFlags"]=[&]() {
    json return_lohgMKa=json({});
    return serialize_VkShaderStageFlags(stageFlags);}();
data_json["members"]["offset"]=[&]() {
    json return_SEjaTey=json({});
    return serialize_uint32_t(offset);}();
data_json["members"]["size"]=[&]() {
    json return_wrJNIth=json({});
    return serialize_uint32_t(size);}();
data_json["members"]["pValues"]=[&]() {
    json return_sRPPxyU=json({});
    
        if (pValues==NULL){
            return_sRPPxyU["null"]=true;
            return return_sRPPxyU;
        }
        return serialize_void_p(pValues);
}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
layout=deserialize_VkPipelineLayout(result["members"]["layout"]);}();
[&]() {
stageFlags=deserialize_VkShaderStageFlags(result["members"]["stageFlags"]);}();
[&]() {
offset=deserialize_uint32_t(result["members"]["offset"]);}();
[&]() {
size=deserialize_uint32_t(result["members"]["size"]);}();

}
void vkCmdBeginRenderPass(
VkCommandBuffer commandBuffer,
 const VkRenderPassBeginInfo* pRenderPassBegin,
 VkSubpassContents contents
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdBeginRenderPass";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pRenderPassBegin"]=[&]() {
    json return_PcbbZJT=json({});
    
        if (pRenderPassBegin==NULL){
            return_PcbbZJT["null"]=true;
            return return_PcbbZJT;
        }
        return_PcbbZJT=[&]() {
    json return_GvjTABU=json({});
    return serialize_VkRenderPassBeginInfo(*pRenderPassBegin);}();
return return_PcbbZJT;}();
data_json["members"]["contents"]=[&]() {
    json return_uSmUlHK=json({});
    return serialize_VkSubpassContents(contents);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();

[&]() {
contents=deserialize_VkSubpassContents(result["members"]["contents"]);}();
}
void vkCmdNextSubpass(
VkCommandBuffer commandBuffer,
 VkSubpassContents contents
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdNextSubpass";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["contents"]=[&]() {
    json return_uSmUlHK=json({});
    return serialize_VkSubpassContents(contents);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
contents=deserialize_VkSubpassContents(result["members"]["contents"]);}();
}
void vkCmdEndRenderPass(
VkCommandBuffer commandBuffer
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdEndRenderPass";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_GVaXYIY=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
}
void vkCmdExecuteCommands(
VkCommandBuffer commandBuffer,
 uint32_t commandBufferCount,
 const VkCommandBuffer* pCommandBuffers
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdExecuteCommands";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["commandBufferCount"]=[&]() {
    json return_NawsLFi=json({});
    return serialize_uint32_t(commandBufferCount);}();
data_json["members"]["pCommandBuffers"]=[&]() {
    json return_ePeHCNc=json({});
    
        if (pCommandBuffers==NULL){
            return_ePeHCNc["null"]=true;
            return return_ePeHCNc;
        }
        
        return_ePeHCNc["members"]={};
        for(int ePeHCNc=0; ePeHCNc < commandBufferCount; ePeHCNc++){
            json temp;
            temp=[&]() {
    json return_IWPPXyt=json({});
    return serialize_VkCommandBuffer(pCommandBuffers[ePeHCNc]);}();
            return_ePeHCNc["members"].push_back(temp);
        }
        return return_ePeHCNc;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
commandBufferCount=deserialize_uint32_t(result["members"]["commandBufferCount"]);}();

}
VkResult vkGetPhysicalDeviceDisplayPropertiesKHR(
VkPhysicalDevice physicalDevice,
 uint32_t* pPropertyCount,
 VkDisplayPropertiesKHR* pProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceDisplayPropertiesKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["pPropertyCount"]=[&]() {
    json return_MnYOHdG=json({});
    
        if (pPropertyCount==NULL){
            return_MnYOHdG["null"]=true;
            return return_MnYOHdG;
        }
        return_MnYOHdG=[&]() {
    json return_rPOmKzR=json({});
    return serialize_uint32_t(*pPropertyCount);}();
return return_MnYOHdG;}();
data_json["members"]["pProperties"]=[&]() {
    json return_WyCktqv=json({});
    
        if (pProperties==NULL){
            return_WyCktqv["null"]=true;
            return return_WyCktqv;
        }
        
        return_WyCktqv["members"]={};
        for(int WyCktqv=0; WyCktqv < *pPropertyCount; WyCktqv++){
            json temp;
            temp=[&]() {
    json return_hoghlxT=json({});
    return serialize_VkDisplayPropertiesKHR(pProperties[WyCktqv]);}();
            return_WyCktqv["members"].push_back(temp);
        }
        return return_WyCktqv;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();
[&]() {

        if (result["members"]["pPropertyCount"].contains("null")){
        pPropertyCount=NULL;
        return;
        }
    [&]() {
*(pPropertyCount)=deserialize_uint32_t(result["members"]["pPropertyCount"]);}();
}();
[&]() {

        if (result["members"]["pProperties"].contains("null")){
        pProperties=NULL;
        return;
        }
    
        for (int tLzwDvP=0; tLzwDvP < *pPropertyCount; tLzwDvP++){
            [&]() {
pProperties[tLzwDvP]=deserialize_VkDisplayPropertiesKHR(result["members"]["pProperties"]["members"][tLzwDvP]);}();;
        }
        }();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkGetPhysicalDeviceDisplayPlanePropertiesKHR(
VkPhysicalDevice physicalDevice,
 uint32_t* pPropertyCount,
 VkDisplayPlanePropertiesKHR* pProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceDisplayPlanePropertiesKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["pPropertyCount"]=[&]() {
    json return_MnYOHdG=json({});
    
        if (pPropertyCount==NULL){
            return_MnYOHdG["null"]=true;
            return return_MnYOHdG;
        }
        return_MnYOHdG=[&]() {
    json return_rPOmKzR=json({});
    return serialize_uint32_t(*pPropertyCount);}();
return return_MnYOHdG;}();
data_json["members"]["pProperties"]=[&]() {
    json return_CRFtHYc=json({});
    
        if (pProperties==NULL){
            return_CRFtHYc["null"]=true;
            return return_CRFtHYc;
        }
        
        return_CRFtHYc["members"]={};
        for(int CRFtHYc=0; CRFtHYc < *pPropertyCount; CRFtHYc++){
            json temp;
            temp=[&]() {
    json return_nAgEiJp=json({});
    return serialize_VkDisplayPlanePropertiesKHR(pProperties[CRFtHYc]);}();
            return_CRFtHYc["members"].push_back(temp);
        }
        return return_CRFtHYc;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();
[&]() {

        if (result["members"]["pPropertyCount"].contains("null")){
        pPropertyCount=NULL;
        return;
        }
    [&]() {
*(pPropertyCount)=deserialize_uint32_t(result["members"]["pPropertyCount"]);}();
}();
[&]() {

        if (result["members"]["pProperties"].contains("null")){
        pProperties=NULL;
        return;
        }
    
        for (int dkXHgpl=0; dkXHgpl < *pPropertyCount; dkXHgpl++){
            [&]() {
pProperties[dkXHgpl]=deserialize_VkDisplayPlanePropertiesKHR(result["members"]["pProperties"]["members"][dkXHgpl]);}();;
        }
        }();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkGetDisplayPlaneSupportedDisplaysKHR(
VkPhysicalDevice physicalDevice,
 uint32_t planeIndex,
 uint32_t* pDisplayCount,
 VkDisplayKHR* pDisplays
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetDisplayPlaneSupportedDisplaysKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["planeIndex"]=[&]() {
    json return_pLmQZqp=json({});
    return serialize_uint32_t(planeIndex);}();
data_json["members"]["pDisplayCount"]=[&]() {
    json return_emepijq=json({});
    
        if (pDisplayCount==NULL){
            return_emepijq["null"]=true;
            return return_emepijq;
        }
        return_emepijq=[&]() {
    json return_sKSuTKG=json({});
    return serialize_uint32_t(*pDisplayCount);}();
return return_emepijq;}();
data_json["members"]["pDisplays"]=[&]() {
    json return_kYsBfUG=json({});
    
        if (pDisplays==NULL){
            return_kYsBfUG["null"]=true;
            return return_kYsBfUG;
        }
        
        return_kYsBfUG["members"]={};
        for(int kYsBfUG=0; kYsBfUG < *pDisplayCount; kYsBfUG++){
            json temp;
            temp=[&]() {
    json return_UOIyNaO=json({});
    return serialize_VkDisplayKHR(pDisplays[kYsBfUG]);}();
            return_kYsBfUG["members"].push_back(temp);
        }
        return return_kYsBfUG;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();
[&]() {
planeIndex=deserialize_uint32_t(result["members"]["planeIndex"]);}();
[&]() {

        if (result["members"]["pDisplayCount"].contains("null")){
        pDisplayCount=NULL;
        return;
        }
    [&]() {
*(pDisplayCount)=deserialize_uint32_t(result["members"]["pDisplayCount"]);}();
}();
[&]() {

        if (result["members"]["pDisplays"].contains("null")){
        pDisplays=NULL;
        return;
        }
    
        for (int DGvInaO=0; DGvInaO < *pDisplayCount; DGvInaO++){
            [&]() {
pDisplays[DGvInaO]=deserialize_VkDisplayKHR(result["members"]["pDisplays"]["members"][DGvInaO]);}();;
        }
        }();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkGetDisplayModePropertiesKHR(
VkPhysicalDevice physicalDevice,
 VkDisplayKHR display,
 uint32_t* pPropertyCount,
 VkDisplayModePropertiesKHR* pProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetDisplayModePropertiesKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["display"]=[&]() {
    json return_wRgwvSz=json({});
    return serialize_VkDisplayKHR(display);}();
data_json["members"]["pPropertyCount"]=[&]() {
    json return_MnYOHdG=json({});
    
        if (pPropertyCount==NULL){
            return_MnYOHdG["null"]=true;
            return return_MnYOHdG;
        }
        return_MnYOHdG=[&]() {
    json return_rPOmKzR=json({});
    return serialize_uint32_t(*pPropertyCount);}();
return return_MnYOHdG;}();
data_json["members"]["pProperties"]=[&]() {
    json return_aCIIlcU=json({});
    
        if (pProperties==NULL){
            return_aCIIlcU["null"]=true;
            return return_aCIIlcU;
        }
        
        return_aCIIlcU["members"]={};
        for(int aCIIlcU=0; aCIIlcU < *pPropertyCount; aCIIlcU++){
            json temp;
            temp=[&]() {
    json return_kTXxNty=json({});
    return serialize_VkDisplayModePropertiesKHR(pProperties[aCIIlcU]);}();
            return_aCIIlcU["members"].push_back(temp);
        }
        return return_aCIIlcU;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();
[&]() {
display=deserialize_VkDisplayKHR(result["members"]["display"]);}();
[&]() {

        if (result["members"]["pPropertyCount"].contains("null")){
        pPropertyCount=NULL;
        return;
        }
    [&]() {
*(pPropertyCount)=deserialize_uint32_t(result["members"]["pPropertyCount"]);}();
}();
[&]() {

        if (result["members"]["pProperties"].contains("null")){
        pProperties=NULL;
        return;
        }
    
        for (int jmtrItL=0; jmtrItL < *pPropertyCount; jmtrItL++){
            [&]() {
pProperties[jmtrItL]=deserialize_VkDisplayModePropertiesKHR(result["members"]["pProperties"]["members"][jmtrItL]);}();;
        }
        }();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkCreateDisplayModeKHR(
VkPhysicalDevice physicalDevice,
 VkDisplayKHR display,
 const VkDisplayModeCreateInfoKHR* pCreateInfo,
 const VkAllocationCallbacks* pAllocator,
 VkDisplayModeKHR* pMode
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreateDisplayModeKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["display"]=[&]() {
    json return_wRgwvSz=json({});
    return serialize_VkDisplayKHR(display);}();
data_json["members"]["pCreateInfo"]=[&]() {
    json return_yEqMAWn=json({});
    
        if (pCreateInfo==NULL){
            return_yEqMAWn["null"]=true;
            return return_yEqMAWn;
        }
        return_yEqMAWn=[&]() {
    json return_rsTveED=json({});
    return serialize_VkDisplayModeCreateInfoKHR(*pCreateInfo);}();
return return_yEqMAWn;}();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pMode"]=[&]() {
    json return_RHdXMGo=json({});
    
        if (pMode==NULL){
            return_RHdXMGo["null"]=true;
            return return_RHdXMGo;
        }
        return_RHdXMGo=[&]() {
    json return_RaoGGxe=json({});
    return serialize_VkDisplayModeKHR(*pMode);}();
return return_RHdXMGo;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();
[&]() {
display=deserialize_VkDisplayKHR(result["members"]["display"]);}();


[&]() {

        if (result["members"]["pMode"].contains("null")){
        pMode=NULL;
        return;
        }
    [&]() {
*(pMode)=deserialize_VkDisplayModeKHR(result["members"]["pMode"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                handle_to_parent_handle_struct[(uintptr_t)(*pMode)]=parent;
                
return return_value;
}
VkResult vkGetDisplayPlaneCapabilitiesKHR(
VkPhysicalDevice physicalDevice,
 VkDisplayModeKHR mode,
 uint32_t planeIndex,
 VkDisplayPlaneCapabilitiesKHR* pCapabilities
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetDisplayPlaneCapabilitiesKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["mode"]=[&]() {
    json return_ahROFwI=json({});
    return serialize_VkDisplayModeKHR(mode);}();
data_json["members"]["planeIndex"]=[&]() {
    json return_pLmQZqp=json({});
    return serialize_uint32_t(planeIndex);}();
data_json["members"]["pCapabilities"]=[&]() {
    json return_PQtFORm=json({});
    
        if (pCapabilities==NULL){
            return_PQtFORm["null"]=true;
            return return_PQtFORm;
        }
        return_PQtFORm=[&]() {
    json return_WEonLXN=json({});
    return serialize_VkDisplayPlaneCapabilitiesKHR(*pCapabilities);}();
return return_PQtFORm;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();
[&]() {
mode=deserialize_VkDisplayModeKHR(result["members"]["mode"]);}();
[&]() {
planeIndex=deserialize_uint32_t(result["members"]["planeIndex"]);}();
[&]() {

        if (result["members"]["pCapabilities"].contains("null")){
        pCapabilities=NULL;
        return;
        }
    [&]() {
*(pCapabilities)=deserialize_VkDisplayPlaneCapabilitiesKHR(result["members"]["pCapabilities"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkCreateDisplayPlaneSurfaceKHR(
VkInstance instance,
 const VkDisplaySurfaceCreateInfoKHR* pCreateInfo,
 const VkAllocationCallbacks* pAllocator,
 VkSurfaceKHR* pSurface
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreateDisplayPlaneSurfaceKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)instance];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["instance"]=[&]() {
    json return_uDnIwUL=json({});
    return serialize_VkInstance(instance);}();
data_json["members"]["pCreateInfo"]=[&]() {
    json return_aerhYLr=json({});
    
        if (pCreateInfo==NULL){
            return_aerhYLr["null"]=true;
            return return_aerhYLr;
        }
        return_aerhYLr=[&]() {
    json return_yAayUXa=json({});
    return serialize_VkDisplaySurfaceCreateInfoKHR(*pCreateInfo);}();
return return_aerhYLr;}();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pSurface"]=[&]() {
    json return_BdLSuHF=json({});
    
        if (pSurface==NULL){
            return_BdLSuHF["null"]=true;
            return return_BdLSuHF;
        }
        return_BdLSuHF=[&]() {
    json return_WuReHBv=json({});
    return serialize_VkSurfaceKHR(*pSurface);}();
return return_BdLSuHF;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
instance=deserialize_VkInstance(result["members"]["instance"]);}();


[&]() {

        if (result["members"]["pSurface"].contains("null")){
        pSurface=NULL;
        return;
        }
    [&]() {
*(pSurface)=deserialize_VkSurfaceKHR(result["members"]["pSurface"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                handle_to_parent_handle_struct[(uintptr_t)(*pSurface)]=parent;
                
return return_value;
}
VkResult vkCreateSharedSwapchainsKHR(
VkDevice device,
 uint32_t swapchainCount,
 const VkSwapchainCreateInfoKHR* pCreateInfos,
 const VkAllocationCallbacks* pAllocator,
 VkSwapchainKHR* pSwapchains
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreateSharedSwapchainsKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["swapchainCount"]=[&]() {
    json return_dVrIDXh=json({});
    return serialize_uint32_t(swapchainCount);}();
data_json["members"]["pCreateInfos"]=[&]() {
    json return_cWCcaIF=json({});
    
        if (pCreateInfos==NULL){
            return_cWCcaIF["null"]=true;
            return return_cWCcaIF;
        }
        
        return_cWCcaIF["members"]={};
        for(int cWCcaIF=0; cWCcaIF < swapchainCount; cWCcaIF++){
            json temp;
            temp=[&]() {
    json return_FAZyrzN=json({});
    return serialize_VkSwapchainCreateInfoKHR(pCreateInfos[cWCcaIF]);}();
            return_cWCcaIF["members"].push_back(temp);
        }
        return return_cWCcaIF;
        }();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pSwapchains"]=[&]() {
    json return_hZpWdBc=json({});
    
        if (pSwapchains==NULL){
            return_hZpWdBc["null"]=true;
            return return_hZpWdBc;
        }
        
        return_hZpWdBc["members"]={};
        for(int hZpWdBc=0; hZpWdBc < swapchainCount; hZpWdBc++){
            json temp;
            temp=[&]() {
    json return_QEHRfRL=json({});
    return serialize_VkSwapchainKHR(pSwapchains[hZpWdBc]);}();
            return_hZpWdBc["members"].push_back(temp);
        }
        return return_hZpWdBc;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
swapchainCount=deserialize_uint32_t(result["members"]["swapchainCount"]);}();


[&]() {

        if (result["members"]["pSwapchains"].contains("null")){
        pSwapchains=NULL;
        return;
        }
    
        for (int zSiMHKX=0; zSiMHKX < swapchainCount; zSiMHKX++){
            [&]() {
pSwapchains[zSiMHKX]=deserialize_VkSwapchainKHR(result["members"]["pSwapchains"]["members"][zSiMHKX]);}();;
        }
        }();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                for (int i=0; i<swapchainCount; i++){
                    handle_to_parent_handle_struct[(uintptr_t)pSwapchains[i]]=parent;
                }
                
return return_value;
}
void vkDestroySurfaceKHR(
VkInstance instance,
 VkSurfaceKHR surface,
 const VkAllocationCallbacks* pAllocator
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkDestroySurfaceKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)instance];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["instance"]=[&]() {
    json return_uDnIwUL=json({});
    return serialize_VkInstance(instance);}();
data_json["members"]["surface"]=[&]() {
    json return_pHWfgmh=json({});
    return serialize_VkSurfaceKHR(surface);}();
data_json["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
instance=deserialize_VkInstance(result["members"]["instance"]);}();
[&]() {
surface=deserialize_VkSurfaceKHR(result["members"]["surface"]);}();

}
VkResult vkGetPhysicalDeviceSurfaceSupportKHR(
VkPhysicalDevice physicalDevice,
 uint32_t queueFamilyIndex,
 VkSurfaceKHR surface,
 VkBool32* pSupported
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceSurfaceSupportKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["queueFamilyIndex"]=[&]() {
    json return_lNjYgkI=json({});
    return serialize_uint32_t(queueFamilyIndex);}();
data_json["members"]["surface"]=[&]() {
    json return_pHWfgmh=json({});
    return serialize_VkSurfaceKHR(surface);}();
data_json["members"]["pSupported"]=[&]() {
    json return_gsABEHm=json({});
    
        if (pSupported==NULL){
            return_gsABEHm["null"]=true;
            return return_gsABEHm;
        }
        return_gsABEHm=[&]() {
    json return_ZKqZggs=json({});
    return_ZKqZggs=[&]() {
    json return_elqzmrf=json({});
    return serialize_uint32_t(*pSupported);}();return return_ZKqZggs;}();
return return_gsABEHm;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();
[&]() {
queueFamilyIndex=deserialize_uint32_t(result["members"]["queueFamilyIndex"]);}();
[&]() {
surface=deserialize_VkSurfaceKHR(result["members"]["surface"]);}();
[&]() {

        if (result["members"]["pSupported"].contains("null")){
        pSupported=NULL;
        return;
        }
    [&]() {

        if (result["members"]["pSupported"].contains("null")){
        pSupported=NULL;
        return;
        }
    [&]() {
*(pSupported)=deserialize_uint32_t(result["members"]["pSupported"]);}();
}();}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkGetPhysicalDeviceSurfaceCapabilitiesKHR(
VkPhysicalDevice physicalDevice,
 VkSurfaceKHR surface,
 VkSurfaceCapabilitiesKHR* pSurfaceCapabilities
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceSurfaceCapabilitiesKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["surface"]=[&]() {
    json return_pHWfgmh=json({});
    return serialize_VkSurfaceKHR(surface);}();
data_json["members"]["pSurfaceCapabilities"]=[&]() {
    json return_WbBdQJC=json({});
    
        if (pSurfaceCapabilities==NULL){
            return_WbBdQJC["null"]=true;
            return return_WbBdQJC;
        }
        return_WbBdQJC=[&]() {
    json return_nMlEfnD=json({});
    return serialize_VkSurfaceCapabilitiesKHR(*pSurfaceCapabilities);}();
return return_WbBdQJC;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();
[&]() {
surface=deserialize_VkSurfaceKHR(result["members"]["surface"]);}();
[&]() {

        if (result["members"]["pSurfaceCapabilities"].contains("null")){
        pSurfaceCapabilities=NULL;
        return;
        }
    [&]() {
*(pSurfaceCapabilities)=deserialize_VkSurfaceCapabilitiesKHR(result["members"]["pSurfaceCapabilities"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkGetPhysicalDeviceSurfaceFormatsKHR(
VkPhysicalDevice physicalDevice,
 VkSurfaceKHR surface,
 uint32_t* pSurfaceFormatCount,
 VkSurfaceFormatKHR* pSurfaceFormats
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceSurfaceFormatsKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["surface"]=[&]() {
    json return_pHWfgmh=json({});
    return serialize_VkSurfaceKHR(surface);}();
data_json["members"]["pSurfaceFormatCount"]=[&]() {
    json return_ZQIGOcP=json({});
    
        if (pSurfaceFormatCount==NULL){
            return_ZQIGOcP["null"]=true;
            return return_ZQIGOcP;
        }
        return_ZQIGOcP=[&]() {
    json return_dNAZxxw=json({});
    return serialize_uint32_t(*pSurfaceFormatCount);}();
return return_ZQIGOcP;}();
data_json["members"]["pSurfaceFormats"]=[&]() {
    json return_BuynUjl=json({});
    
        if (pSurfaceFormats==NULL){
            return_BuynUjl["null"]=true;
            return return_BuynUjl;
        }
        
        return_BuynUjl["members"]={};
        for(int BuynUjl=0; BuynUjl < *pSurfaceFormatCount; BuynUjl++){
            json temp;
            temp=[&]() {
    json return_XHquuSV=json({});
    return serialize_VkSurfaceFormatKHR(pSurfaceFormats[BuynUjl]);}();
            return_BuynUjl["members"].push_back(temp);
        }
        return return_BuynUjl;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();
[&]() {
surface=deserialize_VkSurfaceKHR(result["members"]["surface"]);}();
[&]() {

        if (result["members"]["pSurfaceFormatCount"].contains("null")){
        pSurfaceFormatCount=NULL;
        return;
        }
    [&]() {
*(pSurfaceFormatCount)=deserialize_uint32_t(result["members"]["pSurfaceFormatCount"]);}();
}();
[&]() {

        if (result["members"]["pSurfaceFormats"].contains("null")){
        pSurfaceFormats=NULL;
        return;
        }
    
        for (int KVxYtQm=0; KVxYtQm < *pSurfaceFormatCount; KVxYtQm++){
            [&]() {
pSurfaceFormats[KVxYtQm]=deserialize_VkSurfaceFormatKHR(result["members"]["pSurfaceFormats"]["members"][KVxYtQm]);}();;
        }
        }();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkGetPhysicalDeviceSurfacePresentModesKHR(
VkPhysicalDevice physicalDevice,
 VkSurfaceKHR surface,
 uint32_t* pPresentModeCount,
 VkPresentModeKHR* pPresentModes
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceSurfacePresentModesKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["surface"]=[&]() {
    json return_pHWfgmh=json({});
    return serialize_VkSurfaceKHR(surface);}();
data_json["members"]["pPresentModeCount"]=[&]() {
    json return_qCDEAzN=json({});
    
        if (pPresentModeCount==NULL){
            return_qCDEAzN["null"]=true;
            return return_qCDEAzN;
        }
        return_qCDEAzN=[&]() {
    json return_BUUSuWp=json({});
    return serialize_uint32_t(*pPresentModeCount);}();
return return_qCDEAzN;}();
data_json["members"]["pPresentModes"]=[&]() {
    json return_xKLPCrW=json({});
    
        if (pPresentModes==NULL){
            return_xKLPCrW["null"]=true;
            return return_xKLPCrW;
        }
        
        return_xKLPCrW["members"]={};
        for(int xKLPCrW=0; xKLPCrW < *pPresentModeCount; xKLPCrW++){
            json temp;
            temp=[&]() {
    json return_ZbxQDoQ=json({});
    return serialize_VkPresentModeKHR(pPresentModes[xKLPCrW]);}();
            return_xKLPCrW["members"].push_back(temp);
        }
        return return_xKLPCrW;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();
[&]() {
surface=deserialize_VkSurfaceKHR(result["members"]["surface"]);}();
[&]() {

        if (result["members"]["pPresentModeCount"].contains("null")){
        pPresentModeCount=NULL;
        return;
        }
    [&]() {
*(pPresentModeCount)=deserialize_uint32_t(result["members"]["pPresentModeCount"]);}();
}();
[&]() {

        if (result["members"]["pPresentModes"].contains("null")){
        pPresentModes=NULL;
        return;
        }
    
        for (int NaaoaZC=0; NaaoaZC < *pPresentModeCount; NaaoaZC++){
            [&]() {
pPresentModes[NaaoaZC]=deserialize_VkPresentModeKHR(result["members"]["pPresentModes"]["members"][NaaoaZC]);}();;
        }
        }();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkCreateSwapchainKHR(
VkDevice device,
 const VkSwapchainCreateInfoKHR* pCreateInfo,
 const VkAllocationCallbacks* pAllocator,
 VkSwapchainKHR* pSwapchain
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreateSwapchainKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pCreateInfo"]=[&]() {
    json return_GEguosI=json({});
    
        if (pCreateInfo==NULL){
            return_GEguosI["null"]=true;
            return return_GEguosI;
        }
        return_GEguosI=[&]() {
    json return_XhvHQRi=json({});
    return serialize_VkSwapchainCreateInfoKHR(*pCreateInfo);}();
return return_GEguosI;}();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pSwapchain"]=[&]() {
    json return_OhNzlXU=json({});
    
        if (pSwapchain==NULL){
            return_OhNzlXU["null"]=true;
            return return_OhNzlXU;
        }
        return_OhNzlXU=[&]() {
    json return_bZaUOZC=json({});
    return serialize_VkSwapchainKHR(*pSwapchain);}();
return return_OhNzlXU;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();


[&]() {

        if (result["members"]["pSwapchain"].contains("null")){
        pSwapchain=NULL;
        return;
        }
    [&]() {
*(pSwapchain)=deserialize_VkSwapchainKHR(result["members"]["pSwapchain"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                handle_to_parent_handle_struct[(uintptr_t)(*pSwapchain)]=parent;
                
return return_value;
}
void vkDestroySwapchainKHR(
VkDevice device,
 VkSwapchainKHR swapchain,
 const VkAllocationCallbacks* pAllocator
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkDestroySwapchainKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["swapchain"]=[&]() {
    json return_pJrgkgd=json({});
    return serialize_VkSwapchainKHR(swapchain);}();
data_json["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
swapchain=deserialize_VkSwapchainKHR(result["members"]["swapchain"]);}();

}
VkResult vkGetSwapchainImagesKHR(
VkDevice device,
 VkSwapchainKHR swapchain,
 uint32_t* pSwapchainImageCount,
 VkImage* pSwapchainImages
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetSwapchainImagesKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["swapchain"]=[&]() {
    json return_pJrgkgd=json({});
    return serialize_VkSwapchainKHR(swapchain);}();
data_json["members"]["pSwapchainImageCount"]=[&]() {
    json return_odSaCDd=json({});
    
        if (pSwapchainImageCount==NULL){
            return_odSaCDd["null"]=true;
            return return_odSaCDd;
        }
        return_odSaCDd=[&]() {
    json return_wgEuOHH=json({});
    return serialize_uint32_t(*pSwapchainImageCount);}();
return return_odSaCDd;}();
data_json["members"]["pSwapchainImages"]=[&]() {
    json return_XkQEyed=json({});
    
        if (pSwapchainImages==NULL){
            return_XkQEyed["null"]=true;
            return return_XkQEyed;
        }
        
        return_XkQEyed["members"]={};
        for(int XkQEyed=0; XkQEyed < *pSwapchainImageCount; XkQEyed++){
            json temp;
            temp=[&]() {
    json return_emjHPVX=json({});
    return serialize_VkImage(pSwapchainImages[XkQEyed]);}();
            return_XkQEyed["members"].push_back(temp);
        }
        return return_XkQEyed;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
swapchain=deserialize_VkSwapchainKHR(result["members"]["swapchain"]);}();
[&]() {

        if (result["members"]["pSwapchainImageCount"].contains("null")){
        pSwapchainImageCount=NULL;
        return;
        }
    [&]() {
*(pSwapchainImageCount)=deserialize_uint32_t(result["members"]["pSwapchainImageCount"]);}();
}();
[&]() {

        if (result["members"]["pSwapchainImages"].contains("null")){
        pSwapchainImages=NULL;
        return;
        }
    
        for (int LGbabLD=0; LGbabLD < *pSwapchainImageCount; LGbabLD++){
            [&]() {
pSwapchainImages[LGbabLD]=deserialize_VkImage(result["members"]["pSwapchainImages"]["members"][LGbabLD]);}();;
        }
        }();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkAcquireNextImageKHR(
VkDevice device,
 VkSwapchainKHR swapchain,
 uint64_t timeout,
 VkSemaphore semaphore,
 VkFence fence,
 uint32_t* pImageIndex
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkAcquireNextImageKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["swapchain"]=[&]() {
    json return_pJrgkgd=json({});
    return serialize_VkSwapchainKHR(swapchain);}();
data_json["members"]["timeout"]=[&]() {
    json return_VItDAuq=json({});
    return serialize_uint64_t(timeout);}();
data_json["members"]["semaphore"]=[&]() {
    json return_NeBBGDW=json({});
    return serialize_VkSemaphore(semaphore);}();
data_json["members"]["fence"]=[&]() {
    json return_uUveTbE=json({});
    return serialize_VkFence(fence);}();
data_json["members"]["pImageIndex"]=[&]() {
    json return_wAoznVg=json({});
    
        if (pImageIndex==NULL){
            return_wAoznVg["null"]=true;
            return return_wAoznVg;
        }
        return_wAoznVg=[&]() {
    json return_flfHmxH=json({});
    return serialize_uint32_t(*pImageIndex);}();
return return_wAoznVg;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
swapchain=deserialize_VkSwapchainKHR(result["members"]["swapchain"]);}();
[&]() {
timeout=deserialize_uint64_t(result["members"]["timeout"]);}();
[&]() {
semaphore=deserialize_VkSemaphore(result["members"]["semaphore"]);}();
[&]() {
fence=deserialize_VkFence(result["members"]["fence"]);}();
[&]() {

        if (result["members"]["pImageIndex"].contains("null")){
        pImageIndex=NULL;
        return;
        }
    [&]() {
*(pImageIndex)=deserialize_uint32_t(result["members"]["pImageIndex"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkQueuePresentKHR(
VkQueue queue,
 const VkPresentInfoKHR* pPresentInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkQueuePresentKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)queue];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["queue"]=[&]() {
    json return_KYhcIBS=json({});
    return serialize_VkQueue(queue);}();
data_json["members"]["pPresentInfo"]=[&]() {
    json return_XMpJnBv=json({});
    
        if (pPresentInfo==NULL){
            return_XMpJnBv["null"]=true;
            return return_XMpJnBv;
        }
        return_XMpJnBv=[&]() {
    json return_nBsNMoC=json({});
    return serialize_VkPresentInfoKHR(*pPresentInfo);}();
return return_XMpJnBv;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
queue=deserialize_VkQueue(result["members"]["queue"]);}();

VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkCreateXlibSurfaceKHR(
VkInstance instance,
 const VkXlibSurfaceCreateInfoKHR* pCreateInfo,
 const VkAllocationCallbacks* pAllocator,
 VkSurfaceKHR* pSurface
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreateXlibSurfaceKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)instance];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["instance"]=[&]() {
    json return_uDnIwUL=json({});
    return serialize_VkInstance(instance);}();
data_json["members"]["pCreateInfo"]=[&]() {
    json return_tOUkcbG=json({});
    
        if (pCreateInfo==NULL){
            return_tOUkcbG["null"]=true;
            return return_tOUkcbG;
        }
        return_tOUkcbG=[&]() {
    json return_aROjvrD=json({});
    return serialize_VkXlibSurfaceCreateInfoKHR(*pCreateInfo);}();
return return_tOUkcbG;}();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pSurface"]=[&]() {
    json return_BdLSuHF=json({});
    
        if (pSurface==NULL){
            return_BdLSuHF["null"]=true;
            return return_BdLSuHF;
        }
        return_BdLSuHF=[&]() {
    json return_WuReHBv=json({});
    return serialize_VkSurfaceKHR(*pSurface);}();
return return_BdLSuHF;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
instance=deserialize_VkInstance(result["members"]["instance"]);}();


[&]() {

        if (result["members"]["pSurface"].contains("null")){
        pSurface=NULL;
        return;
        }
    [&]() {
*(pSurface)=deserialize_VkSurfaceKHR(result["members"]["pSurface"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                handle_to_parent_handle_struct[(uintptr_t)(*pSurface)]=parent;
                
return return_value;
}
VkBool32 vkGetPhysicalDeviceXlibPresentationSupportKHR(
VkPhysicalDevice physicalDevice,
 uint32_t queueFamilyIndex,
 Display* dpy,
 VisualID visualID
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceXlibPresentationSupportKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["queueFamilyIndex"]=[&]() {
    json return_lNjYgkI=json({});
    return serialize_uint32_t(queueFamilyIndex);}();
data_json["members"]["dpy"]=[&]() {
    json return_VYfuXHk=json({});
    
        if (dpy==NULL){
            return_VYfuXHk["null"]=true;
            return return_VYfuXHk;
        }
        return serialize_Display_p(dpy);
}();
data_json["members"]["visualID"]=[&]() {
    json return_kBqdhfR=json({});
    return serialize_VisualID(visualID);
}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();
[&]() {
queueFamilyIndex=deserialize_uint32_t(result["members"]["queueFamilyIndex"]);}();
[&]() {

        if (result["members"]["dpy"].contains("null")){
        dpy=NULL;
        return;
        }
    dpy=deserialize_Display_p(result["members"]["dpy"]);
}();
[&]() {
visualID=deserialize_VisualID(result["members"]["visualID"]);
}();
VkBool32 return_value;
[&]() {
[&]() {
return_value=deserialize_uint32_t(result["return"]);}();}();
return return_value;
}
VkResult vkCreateXcbSurfaceKHR(
VkInstance instance,
 const VkXcbSurfaceCreateInfoKHR* pCreateInfo,
 const VkAllocationCallbacks* pAllocator,
 VkSurfaceKHR* pSurface
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreateXcbSurfaceKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)instance];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["instance"]=[&]() {
    json return_uDnIwUL=json({});
    return serialize_VkInstance(instance);}();
data_json["members"]["pCreateInfo"]=[&]() {
    json return_EVPSMLN=json({});
    
        if (pCreateInfo==NULL){
            return_EVPSMLN["null"]=true;
            return return_EVPSMLN;
        }
        return_EVPSMLN=[&]() {
    json return_dqBqdSz=json({});
    return serialize_VkXcbSurfaceCreateInfoKHR(*pCreateInfo);}();
return return_EVPSMLN;}();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pSurface"]=[&]() {
    json return_BdLSuHF=json({});
    
        if (pSurface==NULL){
            return_BdLSuHF["null"]=true;
            return return_BdLSuHF;
        }
        return_BdLSuHF=[&]() {
    json return_WuReHBv=json({});
    return serialize_VkSurfaceKHR(*pSurface);}();
return return_BdLSuHF;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
instance=deserialize_VkInstance(result["members"]["instance"]);}();


[&]() {

        if (result["members"]["pSurface"].contains("null")){
        pSurface=NULL;
        return;
        }
    [&]() {
*(pSurface)=deserialize_VkSurfaceKHR(result["members"]["pSurface"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                handle_to_parent_handle_struct[(uintptr_t)(*pSurface)]=parent;
                
return return_value;
}
VkBool32 vkGetPhysicalDeviceXcbPresentationSupportKHR(
VkPhysicalDevice physicalDevice,
 uint32_t queueFamilyIndex,
 xcb_connection_t* connection,
 xcb_visualid_t visual_id
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceXcbPresentationSupportKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["queueFamilyIndex"]=[&]() {
    json return_lNjYgkI=json({});
    return serialize_uint32_t(queueFamilyIndex);}();
data_json["members"]["connection"]=[&]() {
    json return_oWcBqNw=json({});
    
        if (connection==NULL){
            return_oWcBqNw["null"]=true;
            return return_oWcBqNw;
        }
        return serialize_xcb_connection_t_p(connection);
}();
data_json["members"]["visual_id"]=[&]() {
    json return_qrzURDB=json({});
    return serialize_xcb_visualid_t(visual_id);
}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();
[&]() {
queueFamilyIndex=deserialize_uint32_t(result["members"]["queueFamilyIndex"]);}();
[&]() {

        if (result["members"]["connection"].contains("null")){
        connection=NULL;
        return;
        }
    connection=deserialize_xcb_connection_t_p(result["members"]["connection"]);
}();
[&]() {
visual_id=deserialize_xcb_visualid_t(result["members"]["visual_id"]);
}();
VkBool32 return_value;
[&]() {
[&]() {
return_value=deserialize_uint32_t(result["return"]);}();}();
return return_value;
}
VkResult vkCreateDebugReportCallbackEXT(
VkInstance instance,
 const VkDebugReportCallbackCreateInfoEXT* pCreateInfo,
 const VkAllocationCallbacks* pAllocator,
 VkDebugReportCallbackEXT* pCallback
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreateDebugReportCallbackEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)instance];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["instance"]=[&]() {
    json return_uDnIwUL=json({});
    return serialize_VkInstance(instance);}();
data_json["members"]["pCreateInfo"]=[&]() {
    json return_FQoIVNe=json({});
    
        if (pCreateInfo==NULL){
            return_FQoIVNe["null"]=true;
            return return_FQoIVNe;
        }
        return_FQoIVNe=[&]() {
    json return_qonxkhn=json({});
    return serialize_VkDebugReportCallbackCreateInfoEXT(*pCreateInfo);}();
return return_FQoIVNe;}();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pCallback"]=[&]() {
    json return_hctiRyW=json({});
    
        if (pCallback==NULL){
            return_hctiRyW["null"]=true;
            return return_hctiRyW;
        }
        return_hctiRyW=[&]() {
    json return_kjgmEwC=json({});
    return serialize_VkDebugReportCallbackEXT(*pCallback);}();
return return_hctiRyW;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
instance=deserialize_VkInstance(result["members"]["instance"]);}();


[&]() {

        if (result["members"]["pCallback"].contains("null")){
        pCallback=NULL;
        return;
        }
    [&]() {
*(pCallback)=deserialize_VkDebugReportCallbackEXT(result["members"]["pCallback"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                handle_to_parent_handle_struct[(uintptr_t)(*pCallback)]=parent;
                
return return_value;
}
void vkDestroyDebugReportCallbackEXT(
VkInstance instance,
 VkDebugReportCallbackEXT callback,
 const VkAllocationCallbacks* pAllocator
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkDestroyDebugReportCallbackEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)instance];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["instance"]=[&]() {
    json return_uDnIwUL=json({});
    return serialize_VkInstance(instance);}();
data_json["members"]["callback"]=[&]() {
    json return_XHTbUxf=json({});
    return serialize_VkDebugReportCallbackEXT(callback);}();
data_json["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
instance=deserialize_VkInstance(result["members"]["instance"]);}();
[&]() {
callback=deserialize_VkDebugReportCallbackEXT(result["members"]["callback"]);}();

}
void vkDebugReportMessageEXT(
VkInstance instance,
 VkDebugReportFlagsEXT flags,
 VkDebugReportObjectTypeEXT objectType,
 uint64_t object,
 size_t location,
 int32_t messageCode,
 const char* pLayerPrefix,
 const char* pMessage
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkDebugReportMessageEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)instance];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["instance"]=[&]() {
    json return_uDnIwUL=json({});
    return serialize_VkInstance(instance);}();
data_json["members"]["flags"]=[&]() {
    json return_rqHfggr=json({});
    return serialize_VkDebugReportFlagsEXT(flags);}();
data_json["members"]["objectType"]=[&]() {
    json return_VGMSlIW=json({});
    return serialize_VkDebugReportObjectTypeEXT(objectType);}();
data_json["members"]["object"]=[&]() {
    json return_deCbFZT=json({});
    return serialize_uint64_t(object);}();
data_json["members"]["location"]=[&]() {
    json return_BdulNHM=json({});
    return serialize_size_t(location);}();
data_json["members"]["messageCode"]=[&]() {
    json return_YTUBKTd=json({});
    return serialize_int32_t(messageCode);}();
data_json["members"]["pLayerPrefix"]=[&]() {
    json return_HiVuHWN=json({});
    
        if (pLayerPrefix==NULL){
            return_HiVuHWN["null"]=true;
            return return_HiVuHWN;
        }
        return serialize_char_p(pLayerPrefix);
}();
data_json["members"]["pMessage"]=[&]() {
    json return_cTmvEKt=json({});
    
        if (pMessage==NULL){
            return_cTmvEKt["null"]=true;
            return return_cTmvEKt;
        }
        return serialize_char_p(pMessage);
}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
instance=deserialize_VkInstance(result["members"]["instance"]);}();
[&]() {
flags=deserialize_VkDebugReportFlagsEXT(result["members"]["flags"]);}();
[&]() {
objectType=deserialize_VkDebugReportObjectTypeEXT(result["members"]["objectType"]);}();
[&]() {
object=deserialize_uint64_t(result["members"]["object"]);}();
[&]() {
location=deserialize_size_t(result["members"]["location"]);}();
[&]() {
messageCode=deserialize_int32_t(result["members"]["messageCode"]);}();


}
VkResult vkDebugMarkerSetObjectNameEXT(
VkDevice device,
 const VkDebugMarkerObjectNameInfoEXT* pNameInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkDebugMarkerSetObjectNameEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pNameInfo"]=[&]() {
    json return_WkpwAIZ=json({});
    
        if (pNameInfo==NULL){
            return_WkpwAIZ["null"]=true;
            return return_WkpwAIZ;
        }
        return_WkpwAIZ=[&]() {
    json return_Exubmxl=json({});
    return serialize_VkDebugMarkerObjectNameInfoEXT(*pNameInfo);}();
return return_WkpwAIZ;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkDebugMarkerSetObjectTagEXT(
VkDevice device,
 const VkDebugMarkerObjectTagInfoEXT* pTagInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkDebugMarkerSetObjectTagEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pTagInfo"]=[&]() {
    json return_CMFOmcQ=json({});
    
        if (pTagInfo==NULL){
            return_CMFOmcQ["null"]=true;
            return return_CMFOmcQ;
        }
        return_CMFOmcQ=[&]() {
    json return_VGzjeff=json({});
    return serialize_VkDebugMarkerObjectTagInfoEXT(*pTagInfo);}();
return return_CMFOmcQ;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkCmdDebugMarkerBeginEXT(
VkCommandBuffer commandBuffer,
 const VkDebugMarkerMarkerInfoEXT* pMarkerInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdDebugMarkerBeginEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pMarkerInfo"]=[&]() {
    json return_jQLIdBb=json({});
    
        if (pMarkerInfo==NULL){
            return_jQLIdBb["null"]=true;
            return return_jQLIdBb;
        }
        return_jQLIdBb=[&]() {
    json return_OgewjvM=json({});
    return serialize_VkDebugMarkerMarkerInfoEXT(*pMarkerInfo);}();
return return_jQLIdBb;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();

}
void vkCmdDebugMarkerEndEXT(
VkCommandBuffer commandBuffer
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdDebugMarkerEndEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_GVaXYIY=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
}
void vkCmdDebugMarkerInsertEXT(
VkCommandBuffer commandBuffer,
 const VkDebugMarkerMarkerInfoEXT* pMarkerInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdDebugMarkerInsertEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pMarkerInfo"]=[&]() {
    json return_jQLIdBb=json({});
    
        if (pMarkerInfo==NULL){
            return_jQLIdBb["null"]=true;
            return return_jQLIdBb;
        }
        return_jQLIdBb=[&]() {
    json return_OgewjvM=json({});
    return serialize_VkDebugMarkerMarkerInfoEXT(*pMarkerInfo);}();
return return_jQLIdBb;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();

}
VkResult vkGetPhysicalDeviceExternalImageFormatPropertiesNV(
VkPhysicalDevice physicalDevice,
 VkFormat format,
 VkImageType type,
 VkImageTiling tiling,
 VkImageUsageFlags usage,
 VkImageCreateFlags flags,
 VkExternalMemoryHandleTypeFlagsNV externalHandleType,
 VkExternalImageFormatPropertiesNV* pExternalImageFormatProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceExternalImageFormatPropertiesNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["format"]=[&]() {
    json return_ESSNhLl=json({});
    return serialize_VkFormat(format);}();
data_json["members"]["type"]=[&]() {
    json return_riYevWa=json({});
    return serialize_VkImageType(type);}();
data_json["members"]["tiling"]=[&]() {
    json return_UkQGtiM=json({});
    return serialize_VkImageTiling(tiling);}();
data_json["members"]["usage"]=[&]() {
    json return_QwDsmvQ=json({});
    return serialize_VkImageUsageFlags(usage);}();
data_json["members"]["flags"]=[&]() {
    json return_tBBADJd=json({});
    return serialize_VkImageCreateFlags(flags);}();
data_json["members"]["externalHandleType"]=[&]() {
    json return_TWDCpIY=json({});
    return serialize_VkExternalMemoryHandleTypeFlagsNV(externalHandleType);}();
data_json["members"]["pExternalImageFormatProperties"]=[&]() {
    json return_UJDXnOW=json({});
    
        if (pExternalImageFormatProperties==NULL){
            return_UJDXnOW["null"]=true;
            return return_UJDXnOW;
        }
        return_UJDXnOW=[&]() {
    json return_GOMLzBJ=json({});
    return serialize_VkExternalImageFormatPropertiesNV(*pExternalImageFormatProperties);}();
return return_UJDXnOW;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();
[&]() {
format=deserialize_VkFormat(result["members"]["format"]);}();
[&]() {
type=deserialize_VkImageType(result["members"]["type"]);}();
[&]() {
tiling=deserialize_VkImageTiling(result["members"]["tiling"]);}();
[&]() {
usage=deserialize_VkImageUsageFlags(result["members"]["usage"]);}();
[&]() {
flags=deserialize_VkImageCreateFlags(result["members"]["flags"]);}();
[&]() {
externalHandleType=deserialize_VkExternalMemoryHandleTypeFlagsNV(result["members"]["externalHandleType"]);}();
[&]() {

        if (result["members"]["pExternalImageFormatProperties"].contains("null")){
        pExternalImageFormatProperties=NULL;
        return;
        }
    [&]() {
*(pExternalImageFormatProperties)=deserialize_VkExternalImageFormatPropertiesNV(result["members"]["pExternalImageFormatProperties"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkCmdExecuteGeneratedCommandsNV(
VkCommandBuffer commandBuffer,
 VkBool32 isPreprocessed,
 const VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdExecuteGeneratedCommandsNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["isPreprocessed"]=[&]() {
    json return_sHlZIcK=json({});
    return_sHlZIcK=[&]() {
    json return_dtwKEQL=json({});
    return serialize_uint32_t(isPreprocessed);}();return return_sHlZIcK;}();
data_json["members"]["pGeneratedCommandsInfo"]=[&]() {
    json return_qcgHLcQ=json({});
    
        if (pGeneratedCommandsInfo==NULL){
            return_qcgHLcQ["null"]=true;
            return return_qcgHLcQ;
        }
        return_qcgHLcQ=[&]() {
    json return_bZkkiMJ=json({});
    return serialize_VkGeneratedCommandsInfoNV(*pGeneratedCommandsInfo);}();
return return_qcgHLcQ;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
[&]() {
isPreprocessed=deserialize_uint32_t(result["members"]["isPreprocessed"]);}();}();

}
void vkCmdPreprocessGeneratedCommandsNV(
VkCommandBuffer commandBuffer,
 const VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdPreprocessGeneratedCommandsNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pGeneratedCommandsInfo"]=[&]() {
    json return_qcgHLcQ=json({});
    
        if (pGeneratedCommandsInfo==NULL){
            return_qcgHLcQ["null"]=true;
            return return_qcgHLcQ;
        }
        return_qcgHLcQ=[&]() {
    json return_bZkkiMJ=json({});
    return serialize_VkGeneratedCommandsInfoNV(*pGeneratedCommandsInfo);}();
return return_qcgHLcQ;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();

}
void vkCmdBindPipelineShaderGroupNV(
VkCommandBuffer commandBuffer,
 VkPipelineBindPoint pipelineBindPoint,
 VkPipeline pipeline,
 uint32_t groupIndex
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdBindPipelineShaderGroupNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pipelineBindPoint"]=[&]() {
    json return_wEDWbiR=json({});
    return serialize_VkPipelineBindPoint(pipelineBindPoint);}();
data_json["members"]["pipeline"]=[&]() {
    json return_xIUyQCN=json({});
    return serialize_VkPipeline(pipeline);}();
data_json["members"]["groupIndex"]=[&]() {
    json return_owUItMx=json({});
    return serialize_uint32_t(groupIndex);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
pipelineBindPoint=deserialize_VkPipelineBindPoint(result["members"]["pipelineBindPoint"]);}();
[&]() {
pipeline=deserialize_VkPipeline(result["members"]["pipeline"]);}();
[&]() {
groupIndex=deserialize_uint32_t(result["members"]["groupIndex"]);}();
}
void vkGetGeneratedCommandsMemoryRequirementsNV(
VkDevice device,
 const VkGeneratedCommandsMemoryRequirementsInfoNV* pInfo,
 VkMemoryRequirements2* pMemoryRequirements
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetGeneratedCommandsMemoryRequirementsNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pInfo"]=[&]() {
    json return_gfBYqCt=json({});
    
        if (pInfo==NULL){
            return_gfBYqCt["null"]=true;
            return return_gfBYqCt;
        }
        return_gfBYqCt=[&]() {
    json return_HOItjJh=json({});
    return serialize_VkGeneratedCommandsMemoryRequirementsInfoNV(*pInfo);}();
return return_gfBYqCt;}();
data_json["members"]["pMemoryRequirements"]=[&]() {
    json return_aEBODbS=json({});
    
        if (pMemoryRequirements==NULL){
            return_aEBODbS["null"]=true;
            return return_aEBODbS;
        }
        return_aEBODbS=[&]() {
    json return_hGmebmD=json({});
    return serialize_VkMemoryRequirements2(*pMemoryRequirements);}();
return return_aEBODbS;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

[&]() {

        if (result["members"]["pMemoryRequirements"].contains("null")){
        pMemoryRequirements=NULL;
        return;
        }
    [&]() {
*(pMemoryRequirements)=deserialize_VkMemoryRequirements2(result["members"]["pMemoryRequirements"]);}();
}();
}
VkResult vkCreateIndirectCommandsLayoutNV(
VkDevice device,
 const VkIndirectCommandsLayoutCreateInfoNV* pCreateInfo,
 const VkAllocationCallbacks* pAllocator,
 VkIndirectCommandsLayoutNV* pIndirectCommandsLayout
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreateIndirectCommandsLayoutNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pCreateInfo"]=[&]() {
    json return_hOyWrxA=json({});
    
        if (pCreateInfo==NULL){
            return_hOyWrxA["null"]=true;
            return return_hOyWrxA;
        }
        return_hOyWrxA=[&]() {
    json return_nMdolfS=json({});
    return serialize_VkIndirectCommandsLayoutCreateInfoNV(*pCreateInfo);}();
return return_hOyWrxA;}();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pIndirectCommandsLayout"]=[&]() {
    json return_nBIslMF=json({});
    
        if (pIndirectCommandsLayout==NULL){
            return_nBIslMF["null"]=true;
            return return_nBIslMF;
        }
        return_nBIslMF=[&]() {
    json return_qhkwaTp=json({});
    return serialize_VkIndirectCommandsLayoutNV(*pIndirectCommandsLayout);}();
return return_nBIslMF;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();


[&]() {

        if (result["members"]["pIndirectCommandsLayout"].contains("null")){
        pIndirectCommandsLayout=NULL;
        return;
        }
    [&]() {
*(pIndirectCommandsLayout)=deserialize_VkIndirectCommandsLayoutNV(result["members"]["pIndirectCommandsLayout"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                handle_to_parent_handle_struct[(uintptr_t)(*pIndirectCommandsLayout)]=parent;
                
return return_value;
}
void vkDestroyIndirectCommandsLayoutNV(
VkDevice device,
 VkIndirectCommandsLayoutNV indirectCommandsLayout,
 const VkAllocationCallbacks* pAllocator
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkDestroyIndirectCommandsLayoutNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["indirectCommandsLayout"]=[&]() {
    json return_isBMNzy=json({});
    return serialize_VkIndirectCommandsLayoutNV(indirectCommandsLayout);}();
data_json["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
indirectCommandsLayout=deserialize_VkIndirectCommandsLayoutNV(result["members"]["indirectCommandsLayout"]);}();

}
void vkGetPhysicalDeviceFeatures2(
VkPhysicalDevice physicalDevice,
 VkPhysicalDeviceFeatures2* pFeatures
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceFeatures2";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["pFeatures"]=[&]() {
    json return_NLaVJyq=json({});
    
        if (pFeatures==NULL){
            return_NLaVJyq["null"]=true;
            return return_NLaVJyq;
        }
        return_NLaVJyq=[&]() {
    json return_BFIJfhU=json({});
    return serialize_VkPhysicalDeviceFeatures2(*pFeatures);}();
return return_NLaVJyq;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();
[&]() {

        if (result["members"]["pFeatures"].contains("null")){
        pFeatures=NULL;
        return;
        }
    [&]() {
*(pFeatures)=deserialize_VkPhysicalDeviceFeatures2(result["members"]["pFeatures"]);}();
}();
}
void vkGetPhysicalDeviceFeatures2KHR(
VkPhysicalDevice physicalDevice,
 VkPhysicalDeviceFeatures2* pFeatures
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceFeatures2KHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["pFeatures"]=[&]() {
    json return_NLaVJyq=json({});
    
        if (pFeatures==NULL){
            return_NLaVJyq["null"]=true;
            return return_NLaVJyq;
        }
        return_NLaVJyq=[&]() {
    json return_BFIJfhU=json({});
    return serialize_VkPhysicalDeviceFeatures2(*pFeatures);}();
return return_NLaVJyq;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();
[&]() {

        if (result["members"]["pFeatures"].contains("null")){
        pFeatures=NULL;
        return;
        }
    [&]() {
*(pFeatures)=deserialize_VkPhysicalDeviceFeatures2(result["members"]["pFeatures"]);}();
}();
}
void vkGetPhysicalDeviceProperties2(
VkPhysicalDevice physicalDevice,
 VkPhysicalDeviceProperties2* pProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceProperties2";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["pProperties"]=[&]() {
    json return_akDLFmv=json({});
    
        if (pProperties==NULL){
            return_akDLFmv["null"]=true;
            return return_akDLFmv;
        }
        return_akDLFmv=[&]() {
    json return_oliZJjR=json({});
    return serialize_VkPhysicalDeviceProperties2(*pProperties);}();
return return_akDLFmv;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();
[&]() {

        if (result["members"]["pProperties"].contains("null")){
        pProperties=NULL;
        return;
        }
    [&]() {
*(pProperties)=deserialize_VkPhysicalDeviceProperties2(result["members"]["pProperties"]);}();
}();
}
void vkGetPhysicalDeviceProperties2KHR(
VkPhysicalDevice physicalDevice,
 VkPhysicalDeviceProperties2* pProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceProperties2KHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["pProperties"]=[&]() {
    json return_akDLFmv=json({});
    
        if (pProperties==NULL){
            return_akDLFmv["null"]=true;
            return return_akDLFmv;
        }
        return_akDLFmv=[&]() {
    json return_oliZJjR=json({});
    return serialize_VkPhysicalDeviceProperties2(*pProperties);}();
return return_akDLFmv;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();
[&]() {

        if (result["members"]["pProperties"].contains("null")){
        pProperties=NULL;
        return;
        }
    [&]() {
*(pProperties)=deserialize_VkPhysicalDeviceProperties2(result["members"]["pProperties"]);}();
}();
}
void vkGetPhysicalDeviceFormatProperties2(
VkPhysicalDevice physicalDevice,
 VkFormat format,
 VkFormatProperties2* pFormatProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceFormatProperties2";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["format"]=[&]() {
    json return_ESSNhLl=json({});
    return serialize_VkFormat(format);}();
data_json["members"]["pFormatProperties"]=[&]() {
    json return_kdtZRLw=json({});
    
        if (pFormatProperties==NULL){
            return_kdtZRLw["null"]=true;
            return return_kdtZRLw;
        }
        return_kdtZRLw=[&]() {
    json return_ZoDOlkj=json({});
    return serialize_VkFormatProperties2(*pFormatProperties);}();
return return_kdtZRLw;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();
[&]() {
format=deserialize_VkFormat(result["members"]["format"]);}();
[&]() {

        if (result["members"]["pFormatProperties"].contains("null")){
        pFormatProperties=NULL;
        return;
        }
    [&]() {
*(pFormatProperties)=deserialize_VkFormatProperties2(result["members"]["pFormatProperties"]);}();
}();
}
void vkGetPhysicalDeviceFormatProperties2KHR(
VkPhysicalDevice physicalDevice,
 VkFormat format,
 VkFormatProperties2* pFormatProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceFormatProperties2KHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["format"]=[&]() {
    json return_ESSNhLl=json({});
    return serialize_VkFormat(format);}();
data_json["members"]["pFormatProperties"]=[&]() {
    json return_kdtZRLw=json({});
    
        if (pFormatProperties==NULL){
            return_kdtZRLw["null"]=true;
            return return_kdtZRLw;
        }
        return_kdtZRLw=[&]() {
    json return_ZoDOlkj=json({});
    return serialize_VkFormatProperties2(*pFormatProperties);}();
return return_kdtZRLw;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();
[&]() {
format=deserialize_VkFormat(result["members"]["format"]);}();
[&]() {

        if (result["members"]["pFormatProperties"].contains("null")){
        pFormatProperties=NULL;
        return;
        }
    [&]() {
*(pFormatProperties)=deserialize_VkFormatProperties2(result["members"]["pFormatProperties"]);}();
}();
}
VkResult vkGetPhysicalDeviceImageFormatProperties2(
VkPhysicalDevice physicalDevice,
 const VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo,
 VkImageFormatProperties2* pImageFormatProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceImageFormatProperties2";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["pImageFormatInfo"]=[&]() {
    json return_oEYtuYJ=json({});
    
        if (pImageFormatInfo==NULL){
            return_oEYtuYJ["null"]=true;
            return return_oEYtuYJ;
        }
        return_oEYtuYJ=[&]() {
    json return_VnTCWix=json({});
    return serialize_VkPhysicalDeviceImageFormatInfo2(*pImageFormatInfo);}();
return return_oEYtuYJ;}();
data_json["members"]["pImageFormatProperties"]=[&]() {
    json return_FmCXoHs=json({});
    
        if (pImageFormatProperties==NULL){
            return_FmCXoHs["null"]=true;
            return return_FmCXoHs;
        }
        return_FmCXoHs=[&]() {
    json return_bLkYmfT=json({});
    return serialize_VkImageFormatProperties2(*pImageFormatProperties);}();
return return_FmCXoHs;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();

[&]() {

        if (result["members"]["pImageFormatProperties"].contains("null")){
        pImageFormatProperties=NULL;
        return;
        }
    [&]() {
*(pImageFormatProperties)=deserialize_VkImageFormatProperties2(result["members"]["pImageFormatProperties"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkGetPhysicalDeviceImageFormatProperties2KHR(
VkPhysicalDevice physicalDevice,
 const VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo,
 VkImageFormatProperties2* pImageFormatProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceImageFormatProperties2KHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["pImageFormatInfo"]=[&]() {
    json return_oEYtuYJ=json({});
    
        if (pImageFormatInfo==NULL){
            return_oEYtuYJ["null"]=true;
            return return_oEYtuYJ;
        }
        return_oEYtuYJ=[&]() {
    json return_VnTCWix=json({});
    return serialize_VkPhysicalDeviceImageFormatInfo2(*pImageFormatInfo);}();
return return_oEYtuYJ;}();
data_json["members"]["pImageFormatProperties"]=[&]() {
    json return_FmCXoHs=json({});
    
        if (pImageFormatProperties==NULL){
            return_FmCXoHs["null"]=true;
            return return_FmCXoHs;
        }
        return_FmCXoHs=[&]() {
    json return_bLkYmfT=json({});
    return serialize_VkImageFormatProperties2(*pImageFormatProperties);}();
return return_FmCXoHs;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();

[&]() {

        if (result["members"]["pImageFormatProperties"].contains("null")){
        pImageFormatProperties=NULL;
        return;
        }
    [&]() {
*(pImageFormatProperties)=deserialize_VkImageFormatProperties2(result["members"]["pImageFormatProperties"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkGetPhysicalDeviceQueueFamilyProperties2(
VkPhysicalDevice physicalDevice,
 uint32_t* pQueueFamilyPropertyCount,
 VkQueueFamilyProperties2* pQueueFamilyProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceQueueFamilyProperties2";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["pQueueFamilyPropertyCount"]=[&]() {
    json return_SBlrxix=json({});
    
        if (pQueueFamilyPropertyCount==NULL){
            return_SBlrxix["null"]=true;
            return return_SBlrxix;
        }
        return_SBlrxix=[&]() {
    json return_xdCcTRD=json({});
    return serialize_uint32_t(*pQueueFamilyPropertyCount);}();
return return_SBlrxix;}();
data_json["members"]["pQueueFamilyProperties"]=[&]() {
    json return_mZepHDG=json({});
    
        if (pQueueFamilyProperties==NULL){
            return_mZepHDG["null"]=true;
            return return_mZepHDG;
        }
        
        return_mZepHDG["members"]={};
        for(int mZepHDG=0; mZepHDG < *pQueueFamilyPropertyCount; mZepHDG++){
            json temp;
            temp=[&]() {
    json return_xkrnQpZ=json({});
    return serialize_VkQueueFamilyProperties2(pQueueFamilyProperties[mZepHDG]);}();
            return_mZepHDG["members"].push_back(temp);
        }
        return return_mZepHDG;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();
[&]() {

        if (result["members"]["pQueueFamilyPropertyCount"].contains("null")){
        pQueueFamilyPropertyCount=NULL;
        return;
        }
    [&]() {
*(pQueueFamilyPropertyCount)=deserialize_uint32_t(result["members"]["pQueueFamilyPropertyCount"]);}();
}();
[&]() {

        if (result["members"]["pQueueFamilyProperties"].contains("null")){
        pQueueFamilyProperties=NULL;
        return;
        }
    
        for (int qHKDPot=0; qHKDPot < *pQueueFamilyPropertyCount; qHKDPot++){
            [&]() {
pQueueFamilyProperties[qHKDPot]=deserialize_VkQueueFamilyProperties2(result["members"]["pQueueFamilyProperties"]["members"][qHKDPot]);}();;
        }
        }();
}
void vkGetPhysicalDeviceQueueFamilyProperties2KHR(
VkPhysicalDevice physicalDevice,
 uint32_t* pQueueFamilyPropertyCount,
 VkQueueFamilyProperties2* pQueueFamilyProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceQueueFamilyProperties2KHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["pQueueFamilyPropertyCount"]=[&]() {
    json return_SBlrxix=json({});
    
        if (pQueueFamilyPropertyCount==NULL){
            return_SBlrxix["null"]=true;
            return return_SBlrxix;
        }
        return_SBlrxix=[&]() {
    json return_xdCcTRD=json({});
    return serialize_uint32_t(*pQueueFamilyPropertyCount);}();
return return_SBlrxix;}();
data_json["members"]["pQueueFamilyProperties"]=[&]() {
    json return_mZepHDG=json({});
    
        if (pQueueFamilyProperties==NULL){
            return_mZepHDG["null"]=true;
            return return_mZepHDG;
        }
        
        return_mZepHDG["members"]={};
        for(int mZepHDG=0; mZepHDG < *pQueueFamilyPropertyCount; mZepHDG++){
            json temp;
            temp=[&]() {
    json return_xkrnQpZ=json({});
    return serialize_VkQueueFamilyProperties2(pQueueFamilyProperties[mZepHDG]);}();
            return_mZepHDG["members"].push_back(temp);
        }
        return return_mZepHDG;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();
[&]() {

        if (result["members"]["pQueueFamilyPropertyCount"].contains("null")){
        pQueueFamilyPropertyCount=NULL;
        return;
        }
    [&]() {
*(pQueueFamilyPropertyCount)=deserialize_uint32_t(result["members"]["pQueueFamilyPropertyCount"]);}();
}();
[&]() {

        if (result["members"]["pQueueFamilyProperties"].contains("null")){
        pQueueFamilyProperties=NULL;
        return;
        }
    
        for (int qHKDPot=0; qHKDPot < *pQueueFamilyPropertyCount; qHKDPot++){
            [&]() {
pQueueFamilyProperties[qHKDPot]=deserialize_VkQueueFamilyProperties2(result["members"]["pQueueFamilyProperties"]["members"][qHKDPot]);}();;
        }
        }();
}
void vkGetPhysicalDeviceMemoryProperties2(
VkPhysicalDevice physicalDevice,
 VkPhysicalDeviceMemoryProperties2* pMemoryProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceMemoryProperties2";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["pMemoryProperties"]=[&]() {
    json return_OIWnyZP=json({});
    
        if (pMemoryProperties==NULL){
            return_OIWnyZP["null"]=true;
            return return_OIWnyZP;
        }
        return_OIWnyZP=[&]() {
    json return_glSWjgX=json({});
    return serialize_VkPhysicalDeviceMemoryProperties2(*pMemoryProperties);}();
return return_OIWnyZP;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();
[&]() {

        if (result["members"]["pMemoryProperties"].contains("null")){
        pMemoryProperties=NULL;
        return;
        }
    [&]() {
*(pMemoryProperties)=deserialize_VkPhysicalDeviceMemoryProperties2(result["members"]["pMemoryProperties"]);}();
}();
}
void vkGetPhysicalDeviceMemoryProperties2KHR(
VkPhysicalDevice physicalDevice,
 VkPhysicalDeviceMemoryProperties2* pMemoryProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceMemoryProperties2KHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["pMemoryProperties"]=[&]() {
    json return_OIWnyZP=json({});
    
        if (pMemoryProperties==NULL){
            return_OIWnyZP["null"]=true;
            return return_OIWnyZP;
        }
        return_OIWnyZP=[&]() {
    json return_glSWjgX=json({});
    return serialize_VkPhysicalDeviceMemoryProperties2(*pMemoryProperties);}();
return return_OIWnyZP;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();
[&]() {

        if (result["members"]["pMemoryProperties"].contains("null")){
        pMemoryProperties=NULL;
        return;
        }
    [&]() {
*(pMemoryProperties)=deserialize_VkPhysicalDeviceMemoryProperties2(result["members"]["pMemoryProperties"]);}();
}();
}
void vkGetPhysicalDeviceSparseImageFormatProperties2(
VkPhysicalDevice physicalDevice,
 const VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo,
 uint32_t* pPropertyCount,
 VkSparseImageFormatProperties2* pProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceSparseImageFormatProperties2";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["pFormatInfo"]=[&]() {
    json return_cZilSvu=json({});
    
        if (pFormatInfo==NULL){
            return_cZilSvu["null"]=true;
            return return_cZilSvu;
        }
        return_cZilSvu=[&]() {
    json return_EsBfdpl=json({});
    return serialize_VkPhysicalDeviceSparseImageFormatInfo2(*pFormatInfo);}();
return return_cZilSvu;}();
data_json["members"]["pPropertyCount"]=[&]() {
    json return_MnYOHdG=json({});
    
        if (pPropertyCount==NULL){
            return_MnYOHdG["null"]=true;
            return return_MnYOHdG;
        }
        return_MnYOHdG=[&]() {
    json return_rPOmKzR=json({});
    return serialize_uint32_t(*pPropertyCount);}();
return return_MnYOHdG;}();
data_json["members"]["pProperties"]=[&]() {
    json return_THzQZnc=json({});
    
        if (pProperties==NULL){
            return_THzQZnc["null"]=true;
            return return_THzQZnc;
        }
        
        return_THzQZnc["members"]={};
        for(int THzQZnc=0; THzQZnc < *pPropertyCount; THzQZnc++){
            json temp;
            temp=[&]() {
    json return_WzJLjrV=json({});
    return serialize_VkSparseImageFormatProperties2(pProperties[THzQZnc]);}();
            return_THzQZnc["members"].push_back(temp);
        }
        return return_THzQZnc;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();

[&]() {

        if (result["members"]["pPropertyCount"].contains("null")){
        pPropertyCount=NULL;
        return;
        }
    [&]() {
*(pPropertyCount)=deserialize_uint32_t(result["members"]["pPropertyCount"]);}();
}();
[&]() {

        if (result["members"]["pProperties"].contains("null")){
        pProperties=NULL;
        return;
        }
    
        for (int WHNsNpK=0; WHNsNpK < *pPropertyCount; WHNsNpK++){
            [&]() {
pProperties[WHNsNpK]=deserialize_VkSparseImageFormatProperties2(result["members"]["pProperties"]["members"][WHNsNpK]);}();;
        }
        }();
}
void vkGetPhysicalDeviceSparseImageFormatProperties2KHR(
VkPhysicalDevice physicalDevice,
 const VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo,
 uint32_t* pPropertyCount,
 VkSparseImageFormatProperties2* pProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceSparseImageFormatProperties2KHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["pFormatInfo"]=[&]() {
    json return_cZilSvu=json({});
    
        if (pFormatInfo==NULL){
            return_cZilSvu["null"]=true;
            return return_cZilSvu;
        }
        return_cZilSvu=[&]() {
    json return_EsBfdpl=json({});
    return serialize_VkPhysicalDeviceSparseImageFormatInfo2(*pFormatInfo);}();
return return_cZilSvu;}();
data_json["members"]["pPropertyCount"]=[&]() {
    json return_MnYOHdG=json({});
    
        if (pPropertyCount==NULL){
            return_MnYOHdG["null"]=true;
            return return_MnYOHdG;
        }
        return_MnYOHdG=[&]() {
    json return_rPOmKzR=json({});
    return serialize_uint32_t(*pPropertyCount);}();
return return_MnYOHdG;}();
data_json["members"]["pProperties"]=[&]() {
    json return_THzQZnc=json({});
    
        if (pProperties==NULL){
            return_THzQZnc["null"]=true;
            return return_THzQZnc;
        }
        
        return_THzQZnc["members"]={};
        for(int THzQZnc=0; THzQZnc < *pPropertyCount; THzQZnc++){
            json temp;
            temp=[&]() {
    json return_WzJLjrV=json({});
    return serialize_VkSparseImageFormatProperties2(pProperties[THzQZnc]);}();
            return_THzQZnc["members"].push_back(temp);
        }
        return return_THzQZnc;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();

[&]() {

        if (result["members"]["pPropertyCount"].contains("null")){
        pPropertyCount=NULL;
        return;
        }
    [&]() {
*(pPropertyCount)=deserialize_uint32_t(result["members"]["pPropertyCount"]);}();
}();
[&]() {

        if (result["members"]["pProperties"].contains("null")){
        pProperties=NULL;
        return;
        }
    
        for (int WHNsNpK=0; WHNsNpK < *pPropertyCount; WHNsNpK++){
            [&]() {
pProperties[WHNsNpK]=deserialize_VkSparseImageFormatProperties2(result["members"]["pProperties"]["members"][WHNsNpK]);}();;
        }
        }();
}
void vkCmdPushDescriptorSetKHR(
VkCommandBuffer commandBuffer,
 VkPipelineBindPoint pipelineBindPoint,
 VkPipelineLayout layout,
 uint32_t set,
 uint32_t descriptorWriteCount,
 const VkWriteDescriptorSet* pDescriptorWrites
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdPushDescriptorSetKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pipelineBindPoint"]=[&]() {
    json return_wEDWbiR=json({});
    return serialize_VkPipelineBindPoint(pipelineBindPoint);}();
data_json["members"]["layout"]=[&]() {
    json return_PdiawKY=json({});
    return serialize_VkPipelineLayout(layout);}();
data_json["members"]["set"]=[&]() {
    json return_GklIuIu=json({});
    return serialize_uint32_t(set);}();
data_json["members"]["descriptorWriteCount"]=[&]() {
    json return_XRSXcAe=json({});
    return serialize_uint32_t(descriptorWriteCount);}();
data_json["members"]["pDescriptorWrites"]=[&]() {
    json return_OrQuICm=json({});
    
        if (pDescriptorWrites==NULL){
            return_OrQuICm["null"]=true;
            return return_OrQuICm;
        }
        
        return_OrQuICm["members"]={};
        for(int OrQuICm=0; OrQuICm < descriptorWriteCount; OrQuICm++){
            json temp;
            temp=[&]() {
    json return_gGESsvI=json({});
    return serialize_VkWriteDescriptorSet(pDescriptorWrites[OrQuICm]);}();
            return_OrQuICm["members"].push_back(temp);
        }
        return return_OrQuICm;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
pipelineBindPoint=deserialize_VkPipelineBindPoint(result["members"]["pipelineBindPoint"]);}();
[&]() {
layout=deserialize_VkPipelineLayout(result["members"]["layout"]);}();
[&]() {
set=deserialize_uint32_t(result["members"]["set"]);}();
[&]() {
descriptorWriteCount=deserialize_uint32_t(result["members"]["descriptorWriteCount"]);}();

}
void vkTrimCommandPool(
VkDevice device,
 VkCommandPool commandPool,
 VkCommandPoolTrimFlags flags
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkTrimCommandPool";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["commandPool"]=[&]() {
    json return_EDvrdif=json({});
    return serialize_VkCommandPool(commandPool);}();
data_json["members"]["flags"]=[&]() {
    json return_jdckBfa=json({});
    return serialize_VkCommandPoolTrimFlags(flags);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
commandPool=deserialize_VkCommandPool(result["members"]["commandPool"]);}();
[&]() {
flags=deserialize_VkCommandPoolTrimFlags(result["members"]["flags"]);}();
}
void vkTrimCommandPoolKHR(
VkDevice device,
 VkCommandPool commandPool,
 VkCommandPoolTrimFlags flags
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkTrimCommandPoolKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["commandPool"]=[&]() {
    json return_EDvrdif=json({});
    return serialize_VkCommandPool(commandPool);}();
data_json["members"]["flags"]=[&]() {
    json return_jdckBfa=json({});
    return serialize_VkCommandPoolTrimFlags(flags);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
commandPool=deserialize_VkCommandPool(result["members"]["commandPool"]);}();
[&]() {
flags=deserialize_VkCommandPoolTrimFlags(result["members"]["flags"]);}();
}
void vkGetPhysicalDeviceExternalBufferProperties(
VkPhysicalDevice physicalDevice,
 const VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo,
 VkExternalBufferProperties* pExternalBufferProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceExternalBufferProperties";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["pExternalBufferInfo"]=[&]() {
    json return_muUCuZR=json({});
    
        if (pExternalBufferInfo==NULL){
            return_muUCuZR["null"]=true;
            return return_muUCuZR;
        }
        return_muUCuZR=[&]() {
    json return_kRHbBTW=json({});
    return serialize_VkPhysicalDeviceExternalBufferInfo(*pExternalBufferInfo);}();
return return_muUCuZR;}();
data_json["members"]["pExternalBufferProperties"]=[&]() {
    json return_vRsFjhU=json({});
    
        if (pExternalBufferProperties==NULL){
            return_vRsFjhU["null"]=true;
            return return_vRsFjhU;
        }
        return_vRsFjhU=[&]() {
    json return_tXvafZc=json({});
    return serialize_VkExternalBufferProperties(*pExternalBufferProperties);}();
return return_vRsFjhU;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();

[&]() {

        if (result["members"]["pExternalBufferProperties"].contains("null")){
        pExternalBufferProperties=NULL;
        return;
        }
    [&]() {
*(pExternalBufferProperties)=deserialize_VkExternalBufferProperties(result["members"]["pExternalBufferProperties"]);}();
}();
}
void vkGetPhysicalDeviceExternalBufferPropertiesKHR(
VkPhysicalDevice physicalDevice,
 const VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo,
 VkExternalBufferProperties* pExternalBufferProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceExternalBufferPropertiesKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["pExternalBufferInfo"]=[&]() {
    json return_muUCuZR=json({});
    
        if (pExternalBufferInfo==NULL){
            return_muUCuZR["null"]=true;
            return return_muUCuZR;
        }
        return_muUCuZR=[&]() {
    json return_kRHbBTW=json({});
    return serialize_VkPhysicalDeviceExternalBufferInfo(*pExternalBufferInfo);}();
return return_muUCuZR;}();
data_json["members"]["pExternalBufferProperties"]=[&]() {
    json return_vRsFjhU=json({});
    
        if (pExternalBufferProperties==NULL){
            return_vRsFjhU["null"]=true;
            return return_vRsFjhU;
        }
        return_vRsFjhU=[&]() {
    json return_tXvafZc=json({});
    return serialize_VkExternalBufferProperties(*pExternalBufferProperties);}();
return return_vRsFjhU;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();

[&]() {

        if (result["members"]["pExternalBufferProperties"].contains("null")){
        pExternalBufferProperties=NULL;
        return;
        }
    [&]() {
*(pExternalBufferProperties)=deserialize_VkExternalBufferProperties(result["members"]["pExternalBufferProperties"]);}();
}();
}
VkResult vkGetMemoryFdKHR(
VkDevice device,
 const VkMemoryGetFdInfoKHR* pGetFdInfo,
 int* pFd
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetMemoryFdKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pGetFdInfo"]=[&]() {
    json return_CPnSOOE=json({});
    
        if (pGetFdInfo==NULL){
            return_CPnSOOE["null"]=true;
            return return_CPnSOOE;
        }
        return_CPnSOOE=[&]() {
    json return_uZKQMxd=json({});
    return serialize_VkMemoryGetFdInfoKHR(*pGetFdInfo);}();
return return_CPnSOOE;}();
data_json["members"]["pFd"]=[&]() {
    json return_purnqnB=json({});
    
        if (pFd==NULL){
            return_purnqnB["null"]=true;
            return return_purnqnB;
        }
        return_purnqnB=[&]() {
    json return_ONesJYf=json({});
    return serialize_int(*pFd);}();
return return_purnqnB;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

[&]() {

        if (result["members"]["pFd"].contains("null")){
        pFd=NULL;
        return;
        }
    [&]() {
*(pFd)=deserialize_int(result["members"]["pFd"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkGetMemoryFdPropertiesKHR(
VkDevice device,
 VkExternalMemoryHandleTypeFlagBits handleType,
 int fd,
 VkMemoryFdPropertiesKHR* pMemoryFdProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetMemoryFdPropertiesKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["handleType"]=[&]() {
    json return_ZfjPdbS=json({});
    return serialize_VkExternalMemoryHandleTypeFlagBits(handleType);}();
data_json["members"]["fd"]=[&]() {
    json return_OXCTdCv=json({});
    return serialize_int(fd);}();
data_json["members"]["pMemoryFdProperties"]=[&]() {
    json return_zdZgrpr=json({});
    
        if (pMemoryFdProperties==NULL){
            return_zdZgrpr["null"]=true;
            return return_zdZgrpr;
        }
        return_zdZgrpr=[&]() {
    json return_XTFhDel=json({});
    return serialize_VkMemoryFdPropertiesKHR(*pMemoryFdProperties);}();
return return_zdZgrpr;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
handleType=deserialize_VkExternalMemoryHandleTypeFlagBits(result["members"]["handleType"]);}();
[&]() {
fd=deserialize_int(result["members"]["fd"]);}();
[&]() {

        if (result["members"]["pMemoryFdProperties"].contains("null")){
        pMemoryFdProperties=NULL;
        return;
        }
    [&]() {
*(pMemoryFdProperties)=deserialize_VkMemoryFdPropertiesKHR(result["members"]["pMemoryFdProperties"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkGetMemoryRemoteAddressNV(
VkDevice device,
 const VkMemoryGetRemoteAddressInfoNV* pMemoryGetRemoteAddressInfo,
 VkRemoteAddressNV* pAddress
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetMemoryRemoteAddressNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pMemoryGetRemoteAddressInfo"]=[&]() {
    json return_mupPqGK=json({});
    
        if (pMemoryGetRemoteAddressInfo==NULL){
            return_mupPqGK["null"]=true;
            return return_mupPqGK;
        }
        return_mupPqGK=[&]() {
    json return_hKmyxdb=json({});
    return serialize_VkMemoryGetRemoteAddressInfoNV(*pMemoryGetRemoteAddressInfo);}();
return return_mupPqGK;}();
data_json["members"]["pAddress"]=[&]() {
    json return_OJpMSoy=json({});
    
        if (pAddress==NULL){
            return_OJpMSoy["null"]=true;
            return return_OJpMSoy;
        }
        return_OJpMSoy=[&]() {
    json return_eHgaHDY=json({});
    return_eHgaHDY=[&]() {
    json return_sHFWjQs=json({});
    
        if (*pAddress==NULL){
            return_sHFWjQs["null"]=true;
            return return_sHFWjQs;
        }
        return serialize_void_p(*pAddress);
}();return return_eHgaHDY;}();
return return_OJpMSoy;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

[&]() {

        if (result["members"]["pAddress"].contains("null")){
        pAddress=NULL;
        return;
        }
    [&]() {

        if (result["members"]["pAddress"].contains("null")){
        pAddress=NULL;
        return;
        }
    [&]() {

        if (result["members"]["pAddress"].contains("null")){
        *(pAddress)=NULL;
        return;
        }
    *(pAddress)=deserialize_void_p(result["members"]["pAddress"]);
}();
}();}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkGetPhysicalDeviceExternalSemaphoreProperties(
VkPhysicalDevice physicalDevice,
 const VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo,
 VkExternalSemaphoreProperties* pExternalSemaphoreProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceExternalSemaphoreProperties";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["pExternalSemaphoreInfo"]=[&]() {
    json return_vrtHjRW=json({});
    
        if (pExternalSemaphoreInfo==NULL){
            return_vrtHjRW["null"]=true;
            return return_vrtHjRW;
        }
        return_vrtHjRW=[&]() {
    json return_bwiwvum=json({});
    return serialize_VkPhysicalDeviceExternalSemaphoreInfo(*pExternalSemaphoreInfo);}();
return return_vrtHjRW;}();
data_json["members"]["pExternalSemaphoreProperties"]=[&]() {
    json return_kExcklQ=json({});
    
        if (pExternalSemaphoreProperties==NULL){
            return_kExcklQ["null"]=true;
            return return_kExcklQ;
        }
        return_kExcklQ=[&]() {
    json return_fTouPxC=json({});
    return serialize_VkExternalSemaphoreProperties(*pExternalSemaphoreProperties);}();
return return_kExcklQ;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();

[&]() {

        if (result["members"]["pExternalSemaphoreProperties"].contains("null")){
        pExternalSemaphoreProperties=NULL;
        return;
        }
    [&]() {
*(pExternalSemaphoreProperties)=deserialize_VkExternalSemaphoreProperties(result["members"]["pExternalSemaphoreProperties"]);}();
}();
}
void vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(
VkPhysicalDevice physicalDevice,
 const VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo,
 VkExternalSemaphoreProperties* pExternalSemaphoreProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["pExternalSemaphoreInfo"]=[&]() {
    json return_vrtHjRW=json({});
    
        if (pExternalSemaphoreInfo==NULL){
            return_vrtHjRW["null"]=true;
            return return_vrtHjRW;
        }
        return_vrtHjRW=[&]() {
    json return_bwiwvum=json({});
    return serialize_VkPhysicalDeviceExternalSemaphoreInfo(*pExternalSemaphoreInfo);}();
return return_vrtHjRW;}();
data_json["members"]["pExternalSemaphoreProperties"]=[&]() {
    json return_kExcklQ=json({});
    
        if (pExternalSemaphoreProperties==NULL){
            return_kExcklQ["null"]=true;
            return return_kExcklQ;
        }
        return_kExcklQ=[&]() {
    json return_fTouPxC=json({});
    return serialize_VkExternalSemaphoreProperties(*pExternalSemaphoreProperties);}();
return return_kExcklQ;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();

[&]() {

        if (result["members"]["pExternalSemaphoreProperties"].contains("null")){
        pExternalSemaphoreProperties=NULL;
        return;
        }
    [&]() {
*(pExternalSemaphoreProperties)=deserialize_VkExternalSemaphoreProperties(result["members"]["pExternalSemaphoreProperties"]);}();
}();
}
VkResult vkGetSemaphoreFdKHR(
VkDevice device,
 const VkSemaphoreGetFdInfoKHR* pGetFdInfo,
 int* pFd
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetSemaphoreFdKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pGetFdInfo"]=[&]() {
    json return_tpMGEUJ=json({});
    
        if (pGetFdInfo==NULL){
            return_tpMGEUJ["null"]=true;
            return return_tpMGEUJ;
        }
        return_tpMGEUJ=[&]() {
    json return_jqOIInM=json({});
    return serialize_VkSemaphoreGetFdInfoKHR(*pGetFdInfo);}();
return return_tpMGEUJ;}();
data_json["members"]["pFd"]=[&]() {
    json return_purnqnB=json({});
    
        if (pFd==NULL){
            return_purnqnB["null"]=true;
            return return_purnqnB;
        }
        return_purnqnB=[&]() {
    json return_ONesJYf=json({});
    return serialize_int(*pFd);}();
return return_purnqnB;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

[&]() {

        if (result["members"]["pFd"].contains("null")){
        pFd=NULL;
        return;
        }
    [&]() {
*(pFd)=deserialize_int(result["members"]["pFd"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkImportSemaphoreFdKHR(
VkDevice device,
 const VkImportSemaphoreFdInfoKHR* pImportSemaphoreFdInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkImportSemaphoreFdKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pImportSemaphoreFdInfo"]=[&]() {
    json return_jeeivUs=json({});
    
        if (pImportSemaphoreFdInfo==NULL){
            return_jeeivUs["null"]=true;
            return return_jeeivUs;
        }
        return_jeeivUs=[&]() {
    json return_dGFXqrp=json({});
    return serialize_VkImportSemaphoreFdInfoKHR(*pImportSemaphoreFdInfo);}();
return return_jeeivUs;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkGetPhysicalDeviceExternalFenceProperties(
VkPhysicalDevice physicalDevice,
 const VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo,
 VkExternalFenceProperties* pExternalFenceProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceExternalFenceProperties";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["pExternalFenceInfo"]=[&]() {
    json return_YgGWsov=json({});
    
        if (pExternalFenceInfo==NULL){
            return_YgGWsov["null"]=true;
            return return_YgGWsov;
        }
        return_YgGWsov=[&]() {
    json return_AmsvgYJ=json({});
    return serialize_VkPhysicalDeviceExternalFenceInfo(*pExternalFenceInfo);}();
return return_YgGWsov;}();
data_json["members"]["pExternalFenceProperties"]=[&]() {
    json return_RpWaOtS=json({});
    
        if (pExternalFenceProperties==NULL){
            return_RpWaOtS["null"]=true;
            return return_RpWaOtS;
        }
        return_RpWaOtS=[&]() {
    json return_vRnhrJR=json({});
    return serialize_VkExternalFenceProperties(*pExternalFenceProperties);}();
return return_RpWaOtS;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();

[&]() {

        if (result["members"]["pExternalFenceProperties"].contains("null")){
        pExternalFenceProperties=NULL;
        return;
        }
    [&]() {
*(pExternalFenceProperties)=deserialize_VkExternalFenceProperties(result["members"]["pExternalFenceProperties"]);}();
}();
}
void vkGetPhysicalDeviceExternalFencePropertiesKHR(
VkPhysicalDevice physicalDevice,
 const VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo,
 VkExternalFenceProperties* pExternalFenceProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceExternalFencePropertiesKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["pExternalFenceInfo"]=[&]() {
    json return_YgGWsov=json({});
    
        if (pExternalFenceInfo==NULL){
            return_YgGWsov["null"]=true;
            return return_YgGWsov;
        }
        return_YgGWsov=[&]() {
    json return_AmsvgYJ=json({});
    return serialize_VkPhysicalDeviceExternalFenceInfo(*pExternalFenceInfo);}();
return return_YgGWsov;}();
data_json["members"]["pExternalFenceProperties"]=[&]() {
    json return_RpWaOtS=json({});
    
        if (pExternalFenceProperties==NULL){
            return_RpWaOtS["null"]=true;
            return return_RpWaOtS;
        }
        return_RpWaOtS=[&]() {
    json return_vRnhrJR=json({});
    return serialize_VkExternalFenceProperties(*pExternalFenceProperties);}();
return return_RpWaOtS;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();

[&]() {

        if (result["members"]["pExternalFenceProperties"].contains("null")){
        pExternalFenceProperties=NULL;
        return;
        }
    [&]() {
*(pExternalFenceProperties)=deserialize_VkExternalFenceProperties(result["members"]["pExternalFenceProperties"]);}();
}();
}
VkResult vkGetFenceFdKHR(
VkDevice device,
 const VkFenceGetFdInfoKHR* pGetFdInfo,
 int* pFd
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetFenceFdKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pGetFdInfo"]=[&]() {
    json return_lsgFOxz=json({});
    
        if (pGetFdInfo==NULL){
            return_lsgFOxz["null"]=true;
            return return_lsgFOxz;
        }
        return_lsgFOxz=[&]() {
    json return_bnshtvy=json({});
    return serialize_VkFenceGetFdInfoKHR(*pGetFdInfo);}();
return return_lsgFOxz;}();
data_json["members"]["pFd"]=[&]() {
    json return_purnqnB=json({});
    
        if (pFd==NULL){
            return_purnqnB["null"]=true;
            return return_purnqnB;
        }
        return_purnqnB=[&]() {
    json return_ONesJYf=json({});
    return serialize_int(*pFd);}();
return return_purnqnB;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

[&]() {

        if (result["members"]["pFd"].contains("null")){
        pFd=NULL;
        return;
        }
    [&]() {
*(pFd)=deserialize_int(result["members"]["pFd"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkImportFenceFdKHR(
VkDevice device,
 const VkImportFenceFdInfoKHR* pImportFenceFdInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkImportFenceFdKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pImportFenceFdInfo"]=[&]() {
    json return_XHYjhuK=json({});
    
        if (pImportFenceFdInfo==NULL){
            return_XHYjhuK["null"]=true;
            return return_XHYjhuK;
        }
        return_XHYjhuK=[&]() {
    json return_ofsLYWC=json({});
    return serialize_VkImportFenceFdInfoKHR(*pImportFenceFdInfo);}();
return return_XHYjhuK;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkReleaseDisplayEXT(
VkPhysicalDevice physicalDevice,
 VkDisplayKHR display
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkReleaseDisplayEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["display"]=[&]() {
    json return_iLJAKDL=json({});
    return serialize_VkDisplayKHR(display);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();
[&]() {
display=deserialize_VkDisplayKHR(result["members"]["display"]);}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkDisplayPowerControlEXT(
VkDevice device,
 VkDisplayKHR display,
 const VkDisplayPowerInfoEXT* pDisplayPowerInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkDisplayPowerControlEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["display"]=[&]() {
    json return_wRgwvSz=json({});
    return serialize_VkDisplayKHR(display);}();
data_json["members"]["pDisplayPowerInfo"]=[&]() {
    json return_jxnhUCX=json({});
    
        if (pDisplayPowerInfo==NULL){
            return_jxnhUCX["null"]=true;
            return return_jxnhUCX;
        }
        return_jxnhUCX=[&]() {
    json return_TZGwWTc=json({});
    return serialize_VkDisplayPowerInfoEXT(*pDisplayPowerInfo);}();
return return_jxnhUCX;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
display=deserialize_VkDisplayKHR(result["members"]["display"]);}();

VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkRegisterDeviceEventEXT(
VkDevice device,
 const VkDeviceEventInfoEXT* pDeviceEventInfo,
 const VkAllocationCallbacks* pAllocator,
 VkFence* pFence
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkRegisterDeviceEventEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pDeviceEventInfo"]=[&]() {
    json return_aTybDne=json({});
    
        if (pDeviceEventInfo==NULL){
            return_aTybDne["null"]=true;
            return return_aTybDne;
        }
        return_aTybDne=[&]() {
    json return_eqskCNS=json({});
    return serialize_VkDeviceEventInfoEXT(*pDeviceEventInfo);}();
return return_aTybDne;}();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pFence"]=[&]() {
    json return_zBsTPmH=json({});
    
        if (pFence==NULL){
            return_zBsTPmH["null"]=true;
            return return_zBsTPmH;
        }
        return_zBsTPmH=[&]() {
    json return_WJcpXwr=json({});
    return serialize_VkFence(*pFence);}();
return return_zBsTPmH;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();


[&]() {

        if (result["members"]["pFence"].contains("null")){
        pFence=NULL;
        return;
        }
    [&]() {
*(pFence)=deserialize_VkFence(result["members"]["pFence"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkRegisterDisplayEventEXT(
VkDevice device,
 VkDisplayKHR display,
 const VkDisplayEventInfoEXT* pDisplayEventInfo,
 const VkAllocationCallbacks* pAllocator,
 VkFence* pFence
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkRegisterDisplayEventEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["display"]=[&]() {
    json return_wRgwvSz=json({});
    return serialize_VkDisplayKHR(display);}();
data_json["members"]["pDisplayEventInfo"]=[&]() {
    json return_lXIeJaY=json({});
    
        if (pDisplayEventInfo==NULL){
            return_lXIeJaY["null"]=true;
            return return_lXIeJaY;
        }
        return_lXIeJaY=[&]() {
    json return_dBLOqbi=json({});
    return serialize_VkDisplayEventInfoEXT(*pDisplayEventInfo);}();
return return_lXIeJaY;}();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pFence"]=[&]() {
    json return_zBsTPmH=json({});
    
        if (pFence==NULL){
            return_zBsTPmH["null"]=true;
            return return_zBsTPmH;
        }
        return_zBsTPmH=[&]() {
    json return_WJcpXwr=json({});
    return serialize_VkFence(*pFence);}();
return return_zBsTPmH;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
display=deserialize_VkDisplayKHR(result["members"]["display"]);}();


[&]() {

        if (result["members"]["pFence"].contains("null")){
        pFence=NULL;
        return;
        }
    [&]() {
*(pFence)=deserialize_VkFence(result["members"]["pFence"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkGetSwapchainCounterEXT(
VkDevice device,
 VkSwapchainKHR swapchain,
 VkSurfaceCounterFlagBitsEXT counter,
 uint64_t* pCounterValue
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetSwapchainCounterEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["swapchain"]=[&]() {
    json return_pJrgkgd=json({});
    return serialize_VkSwapchainKHR(swapchain);}();
data_json["members"]["counter"]=[&]() {
    json return_XoaLHsF=json({});
    return serialize_VkSurfaceCounterFlagBitsEXT(counter);}();
data_json["members"]["pCounterValue"]=[&]() {
    json return_NekDqlp=json({});
    
        if (pCounterValue==NULL){
            return_NekDqlp["null"]=true;
            return return_NekDqlp;
        }
        return_NekDqlp=[&]() {
    json return_lGyozzp=json({});
    return serialize_uint64_t(*pCounterValue);}();
return return_NekDqlp;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
swapchain=deserialize_VkSwapchainKHR(result["members"]["swapchain"]);}();
[&]() {
counter=deserialize_VkSurfaceCounterFlagBitsEXT(result["members"]["counter"]);}();
[&]() {

        if (result["members"]["pCounterValue"].contains("null")){
        pCounterValue=NULL;
        return;
        }
    [&]() {
*(pCounterValue)=deserialize_uint64_t(result["members"]["pCounterValue"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkGetPhysicalDeviceSurfaceCapabilities2EXT(
VkPhysicalDevice physicalDevice,
 VkSurfaceKHR surface,
 VkSurfaceCapabilities2EXT* pSurfaceCapabilities
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceSurfaceCapabilities2EXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["surface"]=[&]() {
    json return_pHWfgmh=json({});
    return serialize_VkSurfaceKHR(surface);}();
data_json["members"]["pSurfaceCapabilities"]=[&]() {
    json return_lVVGnrS=json({});
    
        if (pSurfaceCapabilities==NULL){
            return_lVVGnrS["null"]=true;
            return return_lVVGnrS;
        }
        return_lVVGnrS=[&]() {
    json return_vGrXvsb=json({});
    return serialize_VkSurfaceCapabilities2EXT(*pSurfaceCapabilities);}();
return return_lVVGnrS;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();
[&]() {
surface=deserialize_VkSurfaceKHR(result["members"]["surface"]);}();
[&]() {

        if (result["members"]["pSurfaceCapabilities"].contains("null")){
        pSurfaceCapabilities=NULL;
        return;
        }
    [&]() {
*(pSurfaceCapabilities)=deserialize_VkSurfaceCapabilities2EXT(result["members"]["pSurfaceCapabilities"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkEnumeratePhysicalDeviceGroups(
VkInstance instance,
 uint32_t* pPhysicalDeviceGroupCount,
 VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkEnumeratePhysicalDeviceGroups";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)instance];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["instance"]=[&]() {
    json return_uDnIwUL=json({});
    return serialize_VkInstance(instance);}();
data_json["members"]["pPhysicalDeviceGroupCount"]=[&]() {
    json return_rckhlsR=json({});
    
        if (pPhysicalDeviceGroupCount==NULL){
            return_rckhlsR["null"]=true;
            return return_rckhlsR;
        }
        return_rckhlsR=[&]() {
    json return_nUYgnis=json({});
    return serialize_uint32_t(*pPhysicalDeviceGroupCount);}();
return return_rckhlsR;}();
data_json["members"]["pPhysicalDeviceGroupProperties"]=[&]() {
    json return_ZCzUUyX=json({});
    
        if (pPhysicalDeviceGroupProperties==NULL){
            return_ZCzUUyX["null"]=true;
            return return_ZCzUUyX;
        }
        
        return_ZCzUUyX["members"]={};
        for(int ZCzUUyX=0; ZCzUUyX < *pPhysicalDeviceGroupCount; ZCzUUyX++){
            json temp;
            temp=[&]() {
    json return_QMtGBGd=json({});
    return serialize_VkPhysicalDeviceGroupProperties(pPhysicalDeviceGroupProperties[ZCzUUyX]);}();
            return_ZCzUUyX["members"].push_back(temp);
        }
        return return_ZCzUUyX;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
instance=deserialize_VkInstance(result["members"]["instance"]);}();
[&]() {

        if (result["members"]["pPhysicalDeviceGroupCount"].contains("null")){
        pPhysicalDeviceGroupCount=NULL;
        return;
        }
    [&]() {
*(pPhysicalDeviceGroupCount)=deserialize_uint32_t(result["members"]["pPhysicalDeviceGroupCount"]);}();
}();
[&]() {

        if (result["members"]["pPhysicalDeviceGroupProperties"].contains("null")){
        pPhysicalDeviceGroupProperties=NULL;
        return;
        }
    
        for (int jsXlTyN=0; jsXlTyN < *pPhysicalDeviceGroupCount; jsXlTyN++){
            [&]() {
pPhysicalDeviceGroupProperties[jsXlTyN]=deserialize_VkPhysicalDeviceGroupProperties(result["members"]["pPhysicalDeviceGroupProperties"]["members"][jsXlTyN]);}();;
        }
        }();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkEnumeratePhysicalDeviceGroupsKHR(
VkInstance instance,
 uint32_t* pPhysicalDeviceGroupCount,
 VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkEnumeratePhysicalDeviceGroupsKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)instance];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["instance"]=[&]() {
    json return_uDnIwUL=json({});
    return serialize_VkInstance(instance);}();
data_json["members"]["pPhysicalDeviceGroupCount"]=[&]() {
    json return_rckhlsR=json({});
    
        if (pPhysicalDeviceGroupCount==NULL){
            return_rckhlsR["null"]=true;
            return return_rckhlsR;
        }
        return_rckhlsR=[&]() {
    json return_nUYgnis=json({});
    return serialize_uint32_t(*pPhysicalDeviceGroupCount);}();
return return_rckhlsR;}();
data_json["members"]["pPhysicalDeviceGroupProperties"]=[&]() {
    json return_ZCzUUyX=json({});
    
        if (pPhysicalDeviceGroupProperties==NULL){
            return_ZCzUUyX["null"]=true;
            return return_ZCzUUyX;
        }
        
        return_ZCzUUyX["members"]={};
        for(int ZCzUUyX=0; ZCzUUyX < *pPhysicalDeviceGroupCount; ZCzUUyX++){
            json temp;
            temp=[&]() {
    json return_QMtGBGd=json({});
    return serialize_VkPhysicalDeviceGroupProperties(pPhysicalDeviceGroupProperties[ZCzUUyX]);}();
            return_ZCzUUyX["members"].push_back(temp);
        }
        return return_ZCzUUyX;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
instance=deserialize_VkInstance(result["members"]["instance"]);}();
[&]() {

        if (result["members"]["pPhysicalDeviceGroupCount"].contains("null")){
        pPhysicalDeviceGroupCount=NULL;
        return;
        }
    [&]() {
*(pPhysicalDeviceGroupCount)=deserialize_uint32_t(result["members"]["pPhysicalDeviceGroupCount"]);}();
}();
[&]() {

        if (result["members"]["pPhysicalDeviceGroupProperties"].contains("null")){
        pPhysicalDeviceGroupProperties=NULL;
        return;
        }
    
        for (int jsXlTyN=0; jsXlTyN < *pPhysicalDeviceGroupCount; jsXlTyN++){
            [&]() {
pPhysicalDeviceGroupProperties[jsXlTyN]=deserialize_VkPhysicalDeviceGroupProperties(result["members"]["pPhysicalDeviceGroupProperties"]["members"][jsXlTyN]);}();;
        }
        }();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkGetDeviceGroupPeerMemoryFeatures(
VkDevice device,
 uint32_t heapIndex,
 uint32_t localDeviceIndex,
 uint32_t remoteDeviceIndex,
 VkPeerMemoryFeatureFlags* pPeerMemoryFeatures
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetDeviceGroupPeerMemoryFeatures";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["heapIndex"]=[&]() {
    json return_dCXMENZ=json({});
    return serialize_uint32_t(heapIndex);}();
data_json["members"]["localDeviceIndex"]=[&]() {
    json return_EaAFmUr=json({});
    return serialize_uint32_t(localDeviceIndex);}();
data_json["members"]["remoteDeviceIndex"]=[&]() {
    json return_JGKeMlP=json({});
    return serialize_uint32_t(remoteDeviceIndex);}();
data_json["members"]["pPeerMemoryFeatures"]=[&]() {
    json return_BeDVtEx=json({});
    
        if (pPeerMemoryFeatures==NULL){
            return_BeDVtEx["null"]=true;
            return return_BeDVtEx;
        }
        return_BeDVtEx=[&]() {
    json return_PPthqkz=json({});
    return serialize_VkPeerMemoryFeatureFlags(*pPeerMemoryFeatures);}();
return return_BeDVtEx;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
heapIndex=deserialize_uint32_t(result["members"]["heapIndex"]);}();
[&]() {
localDeviceIndex=deserialize_uint32_t(result["members"]["localDeviceIndex"]);}();
[&]() {
remoteDeviceIndex=deserialize_uint32_t(result["members"]["remoteDeviceIndex"]);}();
[&]() {

        if (result["members"]["pPeerMemoryFeatures"].contains("null")){
        pPeerMemoryFeatures=NULL;
        return;
        }
    [&]() {
*(pPeerMemoryFeatures)=deserialize_VkPeerMemoryFeatureFlags(result["members"]["pPeerMemoryFeatures"]);}();
}();
}
void vkGetDeviceGroupPeerMemoryFeaturesKHR(
VkDevice device,
 uint32_t heapIndex,
 uint32_t localDeviceIndex,
 uint32_t remoteDeviceIndex,
 VkPeerMemoryFeatureFlags* pPeerMemoryFeatures
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetDeviceGroupPeerMemoryFeaturesKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["heapIndex"]=[&]() {
    json return_dCXMENZ=json({});
    return serialize_uint32_t(heapIndex);}();
data_json["members"]["localDeviceIndex"]=[&]() {
    json return_EaAFmUr=json({});
    return serialize_uint32_t(localDeviceIndex);}();
data_json["members"]["remoteDeviceIndex"]=[&]() {
    json return_JGKeMlP=json({});
    return serialize_uint32_t(remoteDeviceIndex);}();
data_json["members"]["pPeerMemoryFeatures"]=[&]() {
    json return_BeDVtEx=json({});
    
        if (pPeerMemoryFeatures==NULL){
            return_BeDVtEx["null"]=true;
            return return_BeDVtEx;
        }
        return_BeDVtEx=[&]() {
    json return_PPthqkz=json({});
    return serialize_VkPeerMemoryFeatureFlags(*pPeerMemoryFeatures);}();
return return_BeDVtEx;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
heapIndex=deserialize_uint32_t(result["members"]["heapIndex"]);}();
[&]() {
localDeviceIndex=deserialize_uint32_t(result["members"]["localDeviceIndex"]);}();
[&]() {
remoteDeviceIndex=deserialize_uint32_t(result["members"]["remoteDeviceIndex"]);}();
[&]() {

        if (result["members"]["pPeerMemoryFeatures"].contains("null")){
        pPeerMemoryFeatures=NULL;
        return;
        }
    [&]() {
*(pPeerMemoryFeatures)=deserialize_VkPeerMemoryFeatureFlags(result["members"]["pPeerMemoryFeatures"]);}();
}();
}
VkResult vkBindBufferMemory2(
VkDevice device,
 uint32_t bindInfoCount,
 const VkBindBufferMemoryInfo* pBindInfos
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkBindBufferMemory2";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["bindInfoCount"]=[&]() {
    json return_nEBKnUd=json({});
    return serialize_uint32_t(bindInfoCount);}();
data_json["members"]["pBindInfos"]=[&]() {
    json return_ceTTvTZ=json({});
    
        if (pBindInfos==NULL){
            return_ceTTvTZ["null"]=true;
            return return_ceTTvTZ;
        }
        
        return_ceTTvTZ["members"]={};
        for(int ceTTvTZ=0; ceTTvTZ < bindInfoCount; ceTTvTZ++){
            json temp;
            temp=[&]() {
    json return_QoLuBuw=json({});
    return serialize_VkBindBufferMemoryInfo(pBindInfos[ceTTvTZ]);}();
            return_ceTTvTZ["members"].push_back(temp);
        }
        return return_ceTTvTZ;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
bindInfoCount=deserialize_uint32_t(result["members"]["bindInfoCount"]);}();

VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkBindBufferMemory2KHR(
VkDevice device,
 uint32_t bindInfoCount,
 const VkBindBufferMemoryInfo* pBindInfos
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkBindBufferMemory2KHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["bindInfoCount"]=[&]() {
    json return_nEBKnUd=json({});
    return serialize_uint32_t(bindInfoCount);}();
data_json["members"]["pBindInfos"]=[&]() {
    json return_ceTTvTZ=json({});
    
        if (pBindInfos==NULL){
            return_ceTTvTZ["null"]=true;
            return return_ceTTvTZ;
        }
        
        return_ceTTvTZ["members"]={};
        for(int ceTTvTZ=0; ceTTvTZ < bindInfoCount; ceTTvTZ++){
            json temp;
            temp=[&]() {
    json return_QoLuBuw=json({});
    return serialize_VkBindBufferMemoryInfo(pBindInfos[ceTTvTZ]);}();
            return_ceTTvTZ["members"].push_back(temp);
        }
        return return_ceTTvTZ;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
bindInfoCount=deserialize_uint32_t(result["members"]["bindInfoCount"]);}();

VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkBindImageMemory2(
VkDevice device,
 uint32_t bindInfoCount,
 const VkBindImageMemoryInfo* pBindInfos
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkBindImageMemory2";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["bindInfoCount"]=[&]() {
    json return_nEBKnUd=json({});
    return serialize_uint32_t(bindInfoCount);}();
data_json["members"]["pBindInfos"]=[&]() {
    json return_JFDeQkX=json({});
    
        if (pBindInfos==NULL){
            return_JFDeQkX["null"]=true;
            return return_JFDeQkX;
        }
        
        return_JFDeQkX["members"]={};
        for(int JFDeQkX=0; JFDeQkX < bindInfoCount; JFDeQkX++){
            json temp;
            temp=[&]() {
    json return_NMwMEVF=json({});
    return serialize_VkBindImageMemoryInfo(pBindInfos[JFDeQkX]);}();
            return_JFDeQkX["members"].push_back(temp);
        }
        return return_JFDeQkX;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
bindInfoCount=deserialize_uint32_t(result["members"]["bindInfoCount"]);}();

VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkBindImageMemory2KHR(
VkDevice device,
 uint32_t bindInfoCount,
 const VkBindImageMemoryInfo* pBindInfos
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkBindImageMemory2KHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["bindInfoCount"]=[&]() {
    json return_nEBKnUd=json({});
    return serialize_uint32_t(bindInfoCount);}();
data_json["members"]["pBindInfos"]=[&]() {
    json return_JFDeQkX=json({});
    
        if (pBindInfos==NULL){
            return_JFDeQkX["null"]=true;
            return return_JFDeQkX;
        }
        
        return_JFDeQkX["members"]={};
        for(int JFDeQkX=0; JFDeQkX < bindInfoCount; JFDeQkX++){
            json temp;
            temp=[&]() {
    json return_NMwMEVF=json({});
    return serialize_VkBindImageMemoryInfo(pBindInfos[JFDeQkX]);}();
            return_JFDeQkX["members"].push_back(temp);
        }
        return return_JFDeQkX;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
bindInfoCount=deserialize_uint32_t(result["members"]["bindInfoCount"]);}();

VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkCmdSetDeviceMask(
VkCommandBuffer commandBuffer,
 uint32_t deviceMask
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetDeviceMask";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["deviceMask"]=[&]() {
    json return_AVXudcw=json({});
    return serialize_uint32_t(deviceMask);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
deviceMask=deserialize_uint32_t(result["members"]["deviceMask"]);}();
}
void vkCmdSetDeviceMaskKHR(
VkCommandBuffer commandBuffer,
 uint32_t deviceMask
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetDeviceMaskKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["deviceMask"]=[&]() {
    json return_AVXudcw=json({});
    return serialize_uint32_t(deviceMask);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
deviceMask=deserialize_uint32_t(result["members"]["deviceMask"]);}();
}
VkResult vkGetDeviceGroupPresentCapabilitiesKHR(
VkDevice device,
 VkDeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetDeviceGroupPresentCapabilitiesKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pDeviceGroupPresentCapabilities"]=[&]() {
    json return_dljCelU=json({});
    
        if (pDeviceGroupPresentCapabilities==NULL){
            return_dljCelU["null"]=true;
            return return_dljCelU;
        }
        return_dljCelU=[&]() {
    json return_UrpHRQN=json({});
    return serialize_VkDeviceGroupPresentCapabilitiesKHR(*pDeviceGroupPresentCapabilities);}();
return return_dljCelU;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {

        if (result["members"]["pDeviceGroupPresentCapabilities"].contains("null")){
        pDeviceGroupPresentCapabilities=NULL;
        return;
        }
    [&]() {
*(pDeviceGroupPresentCapabilities)=deserialize_VkDeviceGroupPresentCapabilitiesKHR(result["members"]["pDeviceGroupPresentCapabilities"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkGetDeviceGroupSurfacePresentModesKHR(
VkDevice device,
 VkSurfaceKHR surface,
 VkDeviceGroupPresentModeFlagsKHR* pModes
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetDeviceGroupSurfacePresentModesKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["surface"]=[&]() {
    json return_pHWfgmh=json({});
    return serialize_VkSurfaceKHR(surface);}();
data_json["members"]["pModes"]=[&]() {
    json return_eSGSKjz=json({});
    
        if (pModes==NULL){
            return_eSGSKjz["null"]=true;
            return return_eSGSKjz;
        }
        return_eSGSKjz=[&]() {
    json return_nTCRZmH=json({});
    return serialize_VkDeviceGroupPresentModeFlagsKHR(*pModes);}();
return return_eSGSKjz;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
surface=deserialize_VkSurfaceKHR(result["members"]["surface"]);}();
[&]() {

        if (result["members"]["pModes"].contains("null")){
        pModes=NULL;
        return;
        }
    [&]() {
*(pModes)=deserialize_VkDeviceGroupPresentModeFlagsKHR(result["members"]["pModes"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkAcquireNextImage2KHR(
VkDevice device,
 const VkAcquireNextImageInfoKHR* pAcquireInfo,
 uint32_t* pImageIndex
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkAcquireNextImage2KHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pAcquireInfo"]=[&]() {
    json return_HPTwCeq=json({});
    
        if (pAcquireInfo==NULL){
            return_HPTwCeq["null"]=true;
            return return_HPTwCeq;
        }
        return_HPTwCeq=[&]() {
    json return_rKKlAZI=json({});
    return serialize_VkAcquireNextImageInfoKHR(*pAcquireInfo);}();
return return_HPTwCeq;}();
data_json["members"]["pImageIndex"]=[&]() {
    json return_wAoznVg=json({});
    
        if (pImageIndex==NULL){
            return_wAoznVg["null"]=true;
            return return_wAoznVg;
        }
        return_wAoznVg=[&]() {
    json return_flfHmxH=json({});
    return serialize_uint32_t(*pImageIndex);}();
return return_wAoznVg;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

[&]() {

        if (result["members"]["pImageIndex"].contains("null")){
        pImageIndex=NULL;
        return;
        }
    [&]() {
*(pImageIndex)=deserialize_uint32_t(result["members"]["pImageIndex"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkCmdDispatchBase(
VkCommandBuffer commandBuffer,
 uint32_t baseGroupX,
 uint32_t baseGroupY,
 uint32_t baseGroupZ,
 uint32_t groupCountX,
 uint32_t groupCountY,
 uint32_t groupCountZ
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdDispatchBase";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["baseGroupX"]=[&]() {
    json return_JCJCWCu=json({});
    return serialize_uint32_t(baseGroupX);}();
data_json["members"]["baseGroupY"]=[&]() {
    json return_mKAghTp=json({});
    return serialize_uint32_t(baseGroupY);}();
data_json["members"]["baseGroupZ"]=[&]() {
    json return_ddpFUZV=json({});
    return serialize_uint32_t(baseGroupZ);}();
data_json["members"]["groupCountX"]=[&]() {
    json return_BCsqVBT=json({});
    return serialize_uint32_t(groupCountX);}();
data_json["members"]["groupCountY"]=[&]() {
    json return_PuRhYIE=json({});
    return serialize_uint32_t(groupCountY);}();
data_json["members"]["groupCountZ"]=[&]() {
    json return_OaBSWyk=json({});
    return serialize_uint32_t(groupCountZ);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
baseGroupX=deserialize_uint32_t(result["members"]["baseGroupX"]);}();
[&]() {
baseGroupY=deserialize_uint32_t(result["members"]["baseGroupY"]);}();
[&]() {
baseGroupZ=deserialize_uint32_t(result["members"]["baseGroupZ"]);}();
[&]() {
groupCountX=deserialize_uint32_t(result["members"]["groupCountX"]);}();
[&]() {
groupCountY=deserialize_uint32_t(result["members"]["groupCountY"]);}();
[&]() {
groupCountZ=deserialize_uint32_t(result["members"]["groupCountZ"]);}();
}
void vkCmdDispatchBaseKHR(
VkCommandBuffer commandBuffer,
 uint32_t baseGroupX,
 uint32_t baseGroupY,
 uint32_t baseGroupZ,
 uint32_t groupCountX,
 uint32_t groupCountY,
 uint32_t groupCountZ
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdDispatchBaseKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["baseGroupX"]=[&]() {
    json return_JCJCWCu=json({});
    return serialize_uint32_t(baseGroupX);}();
data_json["members"]["baseGroupY"]=[&]() {
    json return_mKAghTp=json({});
    return serialize_uint32_t(baseGroupY);}();
data_json["members"]["baseGroupZ"]=[&]() {
    json return_ddpFUZV=json({});
    return serialize_uint32_t(baseGroupZ);}();
data_json["members"]["groupCountX"]=[&]() {
    json return_BCsqVBT=json({});
    return serialize_uint32_t(groupCountX);}();
data_json["members"]["groupCountY"]=[&]() {
    json return_PuRhYIE=json({});
    return serialize_uint32_t(groupCountY);}();
data_json["members"]["groupCountZ"]=[&]() {
    json return_OaBSWyk=json({});
    return serialize_uint32_t(groupCountZ);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
baseGroupX=deserialize_uint32_t(result["members"]["baseGroupX"]);}();
[&]() {
baseGroupY=deserialize_uint32_t(result["members"]["baseGroupY"]);}();
[&]() {
baseGroupZ=deserialize_uint32_t(result["members"]["baseGroupZ"]);}();
[&]() {
groupCountX=deserialize_uint32_t(result["members"]["groupCountX"]);}();
[&]() {
groupCountY=deserialize_uint32_t(result["members"]["groupCountY"]);}();
[&]() {
groupCountZ=deserialize_uint32_t(result["members"]["groupCountZ"]);}();
}
VkResult vkGetPhysicalDevicePresentRectanglesKHR(
VkPhysicalDevice physicalDevice,
 VkSurfaceKHR surface,
 uint32_t* pRectCount,
 VkRect2D* pRects
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDevicePresentRectanglesKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["surface"]=[&]() {
    json return_pHWfgmh=json({});
    return serialize_VkSurfaceKHR(surface);}();
data_json["members"]["pRectCount"]=[&]() {
    json return_qXTpPvD=json({});
    
        if (pRectCount==NULL){
            return_qXTpPvD["null"]=true;
            return return_qXTpPvD;
        }
        return_qXTpPvD=[&]() {
    json return_lpjtWNe=json({});
    return serialize_uint32_t(*pRectCount);}();
return return_qXTpPvD;}();
data_json["members"]["pRects"]=[&]() {
    json return_DcRxHgA=json({});
    
        if (pRects==NULL){
            return_DcRxHgA["null"]=true;
            return return_DcRxHgA;
        }
        
        return_DcRxHgA["members"]={};
        for(int DcRxHgA=0; DcRxHgA < *pRectCount; DcRxHgA++){
            json temp;
            temp=[&]() {
    json return_WVICqte=json({});
    return serialize_VkRect2D(pRects[DcRxHgA]);}();
            return_DcRxHgA["members"].push_back(temp);
        }
        return return_DcRxHgA;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();
[&]() {
surface=deserialize_VkSurfaceKHR(result["members"]["surface"]);}();
[&]() {

        if (result["members"]["pRectCount"].contains("null")){
        pRectCount=NULL;
        return;
        }
    [&]() {
*(pRectCount)=deserialize_uint32_t(result["members"]["pRectCount"]);}();
}();
[&]() {

        if (result["members"]["pRects"].contains("null")){
        pRects=NULL;
        return;
        }
    
        for (int bzJJlMH=0; bzJJlMH < *pRectCount; bzJJlMH++){
            [&]() {
pRects[bzJJlMH]=deserialize_VkRect2D(result["members"]["pRects"]["members"][bzJJlMH]);}();;
        }
        }();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkCreateDescriptorUpdateTemplate(
VkDevice device,
 const VkDescriptorUpdateTemplateCreateInfo* pCreateInfo,
 const VkAllocationCallbacks* pAllocator,
 VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreateDescriptorUpdateTemplate";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pCreateInfo"]=[&]() {
    json return_hTQEFse=json({});
    
        if (pCreateInfo==NULL){
            return_hTQEFse["null"]=true;
            return return_hTQEFse;
        }
        return_hTQEFse=[&]() {
    json return_yhilPlm=json({});
    return serialize_VkDescriptorUpdateTemplateCreateInfo(*pCreateInfo);}();
return return_hTQEFse;}();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pDescriptorUpdateTemplate"]=[&]() {
    json return_gtnBaaU=json({});
    
        if (pDescriptorUpdateTemplate==NULL){
            return_gtnBaaU["null"]=true;
            return return_gtnBaaU;
        }
        return_gtnBaaU=[&]() {
    json return_niXXoRW=json({});
    return serialize_VkDescriptorUpdateTemplate(*pDescriptorUpdateTemplate);}();
return return_gtnBaaU;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();


[&]() {

        if (result["members"]["pDescriptorUpdateTemplate"].contains("null")){
        pDescriptorUpdateTemplate=NULL;
        return;
        }
    [&]() {
*(pDescriptorUpdateTemplate)=deserialize_VkDescriptorUpdateTemplate(result["members"]["pDescriptorUpdateTemplate"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                handle_to_parent_handle_struct[(uintptr_t)(*pDescriptorUpdateTemplate)]=parent;
                
return return_value;
}
VkResult vkCreateDescriptorUpdateTemplateKHR(
VkDevice device,
 const VkDescriptorUpdateTemplateCreateInfo* pCreateInfo,
 const VkAllocationCallbacks* pAllocator,
 VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreateDescriptorUpdateTemplateKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pCreateInfo"]=[&]() {
    json return_hTQEFse=json({});
    
        if (pCreateInfo==NULL){
            return_hTQEFse["null"]=true;
            return return_hTQEFse;
        }
        return_hTQEFse=[&]() {
    json return_yhilPlm=json({});
    return serialize_VkDescriptorUpdateTemplateCreateInfo(*pCreateInfo);}();
return return_hTQEFse;}();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pDescriptorUpdateTemplate"]=[&]() {
    json return_gtnBaaU=json({});
    
        if (pDescriptorUpdateTemplate==NULL){
            return_gtnBaaU["null"]=true;
            return return_gtnBaaU;
        }
        return_gtnBaaU=[&]() {
    json return_niXXoRW=json({});
    return serialize_VkDescriptorUpdateTemplate(*pDescriptorUpdateTemplate);}();
return return_gtnBaaU;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();


[&]() {

        if (result["members"]["pDescriptorUpdateTemplate"].contains("null")){
        pDescriptorUpdateTemplate=NULL;
        return;
        }
    [&]() {
*(pDescriptorUpdateTemplate)=deserialize_VkDescriptorUpdateTemplate(result["members"]["pDescriptorUpdateTemplate"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                handle_to_parent_handle_struct[(uintptr_t)(*pDescriptorUpdateTemplate)]=parent;
                
return return_value;
}
void vkDestroyDescriptorUpdateTemplate(
VkDevice device,
 VkDescriptorUpdateTemplate descriptorUpdateTemplate,
 const VkAllocationCallbacks* pAllocator
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkDestroyDescriptorUpdateTemplate";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["descriptorUpdateTemplate"]=[&]() {
    json return_PlwoVFz=json({});
    return serialize_VkDescriptorUpdateTemplate(descriptorUpdateTemplate);}();
data_json["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
descriptorUpdateTemplate=deserialize_VkDescriptorUpdateTemplate(result["members"]["descriptorUpdateTemplate"]);}();

}
void vkDestroyDescriptorUpdateTemplateKHR(
VkDevice device,
 VkDescriptorUpdateTemplate descriptorUpdateTemplate,
 const VkAllocationCallbacks* pAllocator
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkDestroyDescriptorUpdateTemplateKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["descriptorUpdateTemplate"]=[&]() {
    json return_PlwoVFz=json({});
    return serialize_VkDescriptorUpdateTemplate(descriptorUpdateTemplate);}();
data_json["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
descriptorUpdateTemplate=deserialize_VkDescriptorUpdateTemplate(result["members"]["descriptorUpdateTemplate"]);}();

}
void vkUpdateDescriptorSetWithTemplate(
VkDevice device,
 VkDescriptorSet descriptorSet,
 VkDescriptorUpdateTemplate descriptorUpdateTemplate,
 const void* pData
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkUpdateDescriptorSetWithTemplate";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["descriptorSet"]=[&]() {
    json return_BDcvznl=json({});
    return serialize_VkDescriptorSet(descriptorSet);}();
data_json["members"]["descriptorUpdateTemplate"]=[&]() {
    json return_PlwoVFz=json({});
    return serialize_VkDescriptorUpdateTemplate(descriptorUpdateTemplate);}();
data_json["members"]["pData"]=[&]() {
    json return_WJrszUi=json({});
    
        if (pData==NULL){
            return_WJrszUi["null"]=true;
            return return_WJrszUi;
        }
        return serialize_void_p(pData);
}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
descriptorSet=deserialize_VkDescriptorSet(result["members"]["descriptorSet"]);}();
[&]() {
descriptorUpdateTemplate=deserialize_VkDescriptorUpdateTemplate(result["members"]["descriptorUpdateTemplate"]);}();

}
void vkUpdateDescriptorSetWithTemplateKHR(
VkDevice device,
 VkDescriptorSet descriptorSet,
 VkDescriptorUpdateTemplate descriptorUpdateTemplate,
 const void* pData
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkUpdateDescriptorSetWithTemplateKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["descriptorSet"]=[&]() {
    json return_BDcvznl=json({});
    return serialize_VkDescriptorSet(descriptorSet);}();
data_json["members"]["descriptorUpdateTemplate"]=[&]() {
    json return_PlwoVFz=json({});
    return serialize_VkDescriptorUpdateTemplate(descriptorUpdateTemplate);}();
data_json["members"]["pData"]=[&]() {
    json return_WJrszUi=json({});
    
        if (pData==NULL){
            return_WJrszUi["null"]=true;
            return return_WJrszUi;
        }
        return serialize_void_p(pData);
}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
descriptorSet=deserialize_VkDescriptorSet(result["members"]["descriptorSet"]);}();
[&]() {
descriptorUpdateTemplate=deserialize_VkDescriptorUpdateTemplate(result["members"]["descriptorUpdateTemplate"]);}();

}
void vkCmdPushDescriptorSetWithTemplateKHR(
VkCommandBuffer commandBuffer,
 VkDescriptorUpdateTemplate descriptorUpdateTemplate,
 VkPipelineLayout layout,
 uint32_t set,
 const void* pData
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdPushDescriptorSetWithTemplateKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["descriptorUpdateTemplate"]=[&]() {
    json return_PlwoVFz=json({});
    return serialize_VkDescriptorUpdateTemplate(descriptorUpdateTemplate);}();
data_json["members"]["layout"]=[&]() {
    json return_PdiawKY=json({});
    return serialize_VkPipelineLayout(layout);}();
data_json["members"]["set"]=[&]() {
    json return_GklIuIu=json({});
    return serialize_uint32_t(set);}();
data_json["members"]["pData"]=[&]() {
    json return_WJrszUi=json({});
    
        if (pData==NULL){
            return_WJrszUi["null"]=true;
            return return_WJrszUi;
        }
        return serialize_void_p(pData);
}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
descriptorUpdateTemplate=deserialize_VkDescriptorUpdateTemplate(result["members"]["descriptorUpdateTemplate"]);}();
[&]() {
layout=deserialize_VkPipelineLayout(result["members"]["layout"]);}();
[&]() {
set=deserialize_uint32_t(result["members"]["set"]);}();

}
void vkSetHdrMetadataEXT(
VkDevice device,
 uint32_t swapchainCount,
 const VkSwapchainKHR* pSwapchains,
 const VkHdrMetadataEXT* pMetadata
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkSetHdrMetadataEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["swapchainCount"]=[&]() {
    json return_dVrIDXh=json({});
    return serialize_uint32_t(swapchainCount);}();
data_json["members"]["pSwapchains"]=[&]() {
    json return_NEhxscZ=json({});
    
        if (pSwapchains==NULL){
            return_NEhxscZ["null"]=true;
            return return_NEhxscZ;
        }
        
        return_NEhxscZ["members"]={};
        for(int NEhxscZ=0; NEhxscZ < swapchainCount; NEhxscZ++){
            json temp;
            temp=[&]() {
    json return_kwGAIvt=json({});
    return serialize_VkSwapchainKHR(pSwapchains[NEhxscZ]);}();
            return_NEhxscZ["members"].push_back(temp);
        }
        return return_NEhxscZ;
        }();
data_json["members"]["pMetadata"]=[&]() {
    json return_xFHRbEo=json({});
    
        if (pMetadata==NULL){
            return_xFHRbEo["null"]=true;
            return return_xFHRbEo;
        }
        
        return_xFHRbEo["members"]={};
        for(int xFHRbEo=0; xFHRbEo < swapchainCount; xFHRbEo++){
            json temp;
            temp=[&]() {
    json return_SQUdDyG=json({});
    return serialize_VkHdrMetadataEXT(pMetadata[xFHRbEo]);}();
            return_xFHRbEo["members"].push_back(temp);
        }
        return return_xFHRbEo;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
swapchainCount=deserialize_uint32_t(result["members"]["swapchainCount"]);}();


}
VkResult vkGetSwapchainStatusKHR(
VkDevice device,
 VkSwapchainKHR swapchain
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetSwapchainStatusKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["swapchain"]=[&]() {
    json return_zIgOjVA=json({});
    return serialize_VkSwapchainKHR(swapchain);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
swapchain=deserialize_VkSwapchainKHR(result["members"]["swapchain"]);}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkGetRefreshCycleDurationGOOGLE(
VkDevice device,
 VkSwapchainKHR swapchain,
 VkRefreshCycleDurationGOOGLE* pDisplayTimingProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetRefreshCycleDurationGOOGLE";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["swapchain"]=[&]() {
    json return_pJrgkgd=json({});
    return serialize_VkSwapchainKHR(swapchain);}();
data_json["members"]["pDisplayTimingProperties"]=[&]() {
    json return_qKcuXbY=json({});
    
        if (pDisplayTimingProperties==NULL){
            return_qKcuXbY["null"]=true;
            return return_qKcuXbY;
        }
        return_qKcuXbY=[&]() {
    json return_uOoqFpQ=json({});
    return serialize_VkRefreshCycleDurationGOOGLE(*pDisplayTimingProperties);}();
return return_qKcuXbY;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
swapchain=deserialize_VkSwapchainKHR(result["members"]["swapchain"]);}();
[&]() {

        if (result["members"]["pDisplayTimingProperties"].contains("null")){
        pDisplayTimingProperties=NULL;
        return;
        }
    [&]() {
*(pDisplayTimingProperties)=deserialize_VkRefreshCycleDurationGOOGLE(result["members"]["pDisplayTimingProperties"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkGetPastPresentationTimingGOOGLE(
VkDevice device,
 VkSwapchainKHR swapchain,
 uint32_t* pPresentationTimingCount,
 VkPastPresentationTimingGOOGLE* pPresentationTimings
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPastPresentationTimingGOOGLE";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["swapchain"]=[&]() {
    json return_pJrgkgd=json({});
    return serialize_VkSwapchainKHR(swapchain);}();
data_json["members"]["pPresentationTimingCount"]=[&]() {
    json return_lsIaBBc=json({});
    
        if (pPresentationTimingCount==NULL){
            return_lsIaBBc["null"]=true;
            return return_lsIaBBc;
        }
        return_lsIaBBc=[&]() {
    json return_oVeWZVA=json({});
    return serialize_uint32_t(*pPresentationTimingCount);}();
return return_lsIaBBc;}();
data_json["members"]["pPresentationTimings"]=[&]() {
    json return_EWUOiFE=json({});
    
        if (pPresentationTimings==NULL){
            return_EWUOiFE["null"]=true;
            return return_EWUOiFE;
        }
        
        return_EWUOiFE["members"]={};
        for(int EWUOiFE=0; EWUOiFE < *pPresentationTimingCount; EWUOiFE++){
            json temp;
            temp=[&]() {
    json return_eqekKFy=json({});
    return serialize_VkPastPresentationTimingGOOGLE(pPresentationTimings[EWUOiFE]);}();
            return_EWUOiFE["members"].push_back(temp);
        }
        return return_EWUOiFE;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
swapchain=deserialize_VkSwapchainKHR(result["members"]["swapchain"]);}();
[&]() {

        if (result["members"]["pPresentationTimingCount"].contains("null")){
        pPresentationTimingCount=NULL;
        return;
        }
    [&]() {
*(pPresentationTimingCount)=deserialize_uint32_t(result["members"]["pPresentationTimingCount"]);}();
}();
[&]() {

        if (result["members"]["pPresentationTimings"].contains("null")){
        pPresentationTimings=NULL;
        return;
        }
    
        for (int PdtsbOB=0; PdtsbOB < *pPresentationTimingCount; PdtsbOB++){
            [&]() {
pPresentationTimings[PdtsbOB]=deserialize_VkPastPresentationTimingGOOGLE(result["members"]["pPresentationTimings"]["members"][PdtsbOB]);}();;
        }
        }();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkCmdSetViewportWScalingNV(
VkCommandBuffer commandBuffer,
 uint32_t firstViewport,
 uint32_t viewportCount,
 const VkViewportWScalingNV* pViewportWScalings
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetViewportWScalingNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["firstViewport"]=[&]() {
    json return_zZVDUCF=json({});
    return serialize_uint32_t(firstViewport);}();
data_json["members"]["viewportCount"]=[&]() {
    json return_pDFybJm=json({});
    return serialize_uint32_t(viewportCount);}();
data_json["members"]["pViewportWScalings"]=[&]() {
    json return_OEePdax=json({});
    
        if (pViewportWScalings==NULL){
            return_OEePdax["null"]=true;
            return return_OEePdax;
        }
        
        return_OEePdax["members"]={};
        for(int OEePdax=0; OEePdax < viewportCount; OEePdax++){
            json temp;
            temp=[&]() {
    json return_qlPYRZJ=json({});
    return serialize_VkViewportWScalingNV(pViewportWScalings[OEePdax]);}();
            return_OEePdax["members"].push_back(temp);
        }
        return return_OEePdax;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
firstViewport=deserialize_uint32_t(result["members"]["firstViewport"]);}();
[&]() {
viewportCount=deserialize_uint32_t(result["members"]["viewportCount"]);}();

}
void vkCmdSetDiscardRectangleEXT(
VkCommandBuffer commandBuffer,
 uint32_t firstDiscardRectangle,
 uint32_t discardRectangleCount,
 const VkRect2D* pDiscardRectangles
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetDiscardRectangleEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["firstDiscardRectangle"]=[&]() {
    json return_gwTWrOQ=json({});
    return serialize_uint32_t(firstDiscardRectangle);}();
data_json["members"]["discardRectangleCount"]=[&]() {
    json return_AcMqNLo=json({});
    return serialize_uint32_t(discardRectangleCount);}();
data_json["members"]["pDiscardRectangles"]=[&]() {
    json return_IYYaqXK=json({});
    
        if (pDiscardRectangles==NULL){
            return_IYYaqXK["null"]=true;
            return return_IYYaqXK;
        }
        
        return_IYYaqXK["members"]={};
        for(int IYYaqXK=0; IYYaqXK < discardRectangleCount; IYYaqXK++){
            json temp;
            temp=[&]() {
    json return_TDZblgQ=json({});
    return serialize_VkRect2D(pDiscardRectangles[IYYaqXK]);}();
            return_IYYaqXK["members"].push_back(temp);
        }
        return return_IYYaqXK;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
firstDiscardRectangle=deserialize_uint32_t(result["members"]["firstDiscardRectangle"]);}();
[&]() {
discardRectangleCount=deserialize_uint32_t(result["members"]["discardRectangleCount"]);}();

}
void vkCmdSetDiscardRectangleEnableEXT(
VkCommandBuffer commandBuffer,
 VkBool32 discardRectangleEnable
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetDiscardRectangleEnableEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["discardRectangleEnable"]=[&]() {
    json return_GNyjEHV=json({});
    return_GNyjEHV=[&]() {
    json return_ZVEmrBQ=json({});
    return serialize_uint32_t(discardRectangleEnable);}();return return_GNyjEHV;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
[&]() {
discardRectangleEnable=deserialize_uint32_t(result["members"]["discardRectangleEnable"]);}();}();
}
void vkCmdSetDiscardRectangleModeEXT(
VkCommandBuffer commandBuffer,
 VkDiscardRectangleModeEXT discardRectangleMode
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetDiscardRectangleModeEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["discardRectangleMode"]=[&]() {
    json return_lbSRFNX=json({});
    return serialize_VkDiscardRectangleModeEXT(discardRectangleMode);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
discardRectangleMode=deserialize_VkDiscardRectangleModeEXT(result["members"]["discardRectangleMode"]);}();
}
void vkCmdSetSampleLocationsEXT(
VkCommandBuffer commandBuffer,
 const VkSampleLocationsInfoEXT* pSampleLocationsInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetSampleLocationsEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pSampleLocationsInfo"]=[&]() {
    json return_kwFhXKV=json({});
    
        if (pSampleLocationsInfo==NULL){
            return_kwFhXKV["null"]=true;
            return return_kwFhXKV;
        }
        return_kwFhXKV=[&]() {
    json return_LwDCgvR=json({});
    return serialize_VkSampleLocationsInfoEXT(*pSampleLocationsInfo);}();
return return_kwFhXKV;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();

}
void vkGetPhysicalDeviceMultisamplePropertiesEXT(
VkPhysicalDevice physicalDevice,
 VkSampleCountFlagBits samples,
 VkMultisamplePropertiesEXT* pMultisampleProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceMultisamplePropertiesEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["samples"]=[&]() {
    json return_EMNaydU=json({});
    return serialize_VkSampleCountFlagBits(samples);}();
data_json["members"]["pMultisampleProperties"]=[&]() {
    json return_PREXSTI=json({});
    
        if (pMultisampleProperties==NULL){
            return_PREXSTI["null"]=true;
            return return_PREXSTI;
        }
        return_PREXSTI=[&]() {
    json return_zTNeaPy=json({});
    return serialize_VkMultisamplePropertiesEXT(*pMultisampleProperties);}();
return return_PREXSTI;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();
[&]() {
samples=deserialize_VkSampleCountFlagBits(result["members"]["samples"]);}();
[&]() {

        if (result["members"]["pMultisampleProperties"].contains("null")){
        pMultisampleProperties=NULL;
        return;
        }
    [&]() {
*(pMultisampleProperties)=deserialize_VkMultisamplePropertiesEXT(result["members"]["pMultisampleProperties"]);}();
}();
}
VkResult vkGetPhysicalDeviceSurfaceCapabilities2KHR(
VkPhysicalDevice physicalDevice,
 const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo,
 VkSurfaceCapabilities2KHR* pSurfaceCapabilities
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceSurfaceCapabilities2KHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["pSurfaceInfo"]=[&]() {
    json return_Lucdtqn=json({});
    
        if (pSurfaceInfo==NULL){
            return_Lucdtqn["null"]=true;
            return return_Lucdtqn;
        }
        return_Lucdtqn=[&]() {
    json return_tsDtFzO=json({});
    return serialize_VkPhysicalDeviceSurfaceInfo2KHR(*pSurfaceInfo);}();
return return_Lucdtqn;}();
data_json["members"]["pSurfaceCapabilities"]=[&]() {
    json return_YAklVrf=json({});
    
        if (pSurfaceCapabilities==NULL){
            return_YAklVrf["null"]=true;
            return return_YAklVrf;
        }
        return_YAklVrf=[&]() {
    json return_VoSbADg=json({});
    return serialize_VkSurfaceCapabilities2KHR(*pSurfaceCapabilities);}();
return return_YAklVrf;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();

[&]() {

        if (result["members"]["pSurfaceCapabilities"].contains("null")){
        pSurfaceCapabilities=NULL;
        return;
        }
    [&]() {
*(pSurfaceCapabilities)=deserialize_VkSurfaceCapabilities2KHR(result["members"]["pSurfaceCapabilities"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkGetPhysicalDeviceSurfaceFormats2KHR(
VkPhysicalDevice physicalDevice,
 const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo,
 uint32_t* pSurfaceFormatCount,
 VkSurfaceFormat2KHR* pSurfaceFormats
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceSurfaceFormats2KHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["pSurfaceInfo"]=[&]() {
    json return_Lucdtqn=json({});
    
        if (pSurfaceInfo==NULL){
            return_Lucdtqn["null"]=true;
            return return_Lucdtqn;
        }
        return_Lucdtqn=[&]() {
    json return_tsDtFzO=json({});
    return serialize_VkPhysicalDeviceSurfaceInfo2KHR(*pSurfaceInfo);}();
return return_Lucdtqn;}();
data_json["members"]["pSurfaceFormatCount"]=[&]() {
    json return_ZQIGOcP=json({});
    
        if (pSurfaceFormatCount==NULL){
            return_ZQIGOcP["null"]=true;
            return return_ZQIGOcP;
        }
        return_ZQIGOcP=[&]() {
    json return_dNAZxxw=json({});
    return serialize_uint32_t(*pSurfaceFormatCount);}();
return return_ZQIGOcP;}();
data_json["members"]["pSurfaceFormats"]=[&]() {
    json return_nsnfPfK=json({});
    
        if (pSurfaceFormats==NULL){
            return_nsnfPfK["null"]=true;
            return return_nsnfPfK;
        }
        
        return_nsnfPfK["members"]={};
        for(int nsnfPfK=0; nsnfPfK < *pSurfaceFormatCount; nsnfPfK++){
            json temp;
            temp=[&]() {
    json return_ippkfhi=json({});
    return serialize_VkSurfaceFormat2KHR(pSurfaceFormats[nsnfPfK]);}();
            return_nsnfPfK["members"].push_back(temp);
        }
        return return_nsnfPfK;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();

[&]() {

        if (result["members"]["pSurfaceFormatCount"].contains("null")){
        pSurfaceFormatCount=NULL;
        return;
        }
    [&]() {
*(pSurfaceFormatCount)=deserialize_uint32_t(result["members"]["pSurfaceFormatCount"]);}();
}();
[&]() {

        if (result["members"]["pSurfaceFormats"].contains("null")){
        pSurfaceFormats=NULL;
        return;
        }
    
        for (int wxirLYs=0; wxirLYs < *pSurfaceFormatCount; wxirLYs++){
            [&]() {
pSurfaceFormats[wxirLYs]=deserialize_VkSurfaceFormat2KHR(result["members"]["pSurfaceFormats"]["members"][wxirLYs]);}();;
        }
        }();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkGetPhysicalDeviceDisplayProperties2KHR(
VkPhysicalDevice physicalDevice,
 uint32_t* pPropertyCount,
 VkDisplayProperties2KHR* pProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceDisplayProperties2KHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["pPropertyCount"]=[&]() {
    json return_MnYOHdG=json({});
    
        if (pPropertyCount==NULL){
            return_MnYOHdG["null"]=true;
            return return_MnYOHdG;
        }
        return_MnYOHdG=[&]() {
    json return_rPOmKzR=json({});
    return serialize_uint32_t(*pPropertyCount);}();
return return_MnYOHdG;}();
data_json["members"]["pProperties"]=[&]() {
    json return_AQbkzIN=json({});
    
        if (pProperties==NULL){
            return_AQbkzIN["null"]=true;
            return return_AQbkzIN;
        }
        
        return_AQbkzIN["members"]={};
        for(int AQbkzIN=0; AQbkzIN < *pPropertyCount; AQbkzIN++){
            json temp;
            temp=[&]() {
    json return_YyuosqA=json({});
    return serialize_VkDisplayProperties2KHR(pProperties[AQbkzIN]);}();
            return_AQbkzIN["members"].push_back(temp);
        }
        return return_AQbkzIN;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();
[&]() {

        if (result["members"]["pPropertyCount"].contains("null")){
        pPropertyCount=NULL;
        return;
        }
    [&]() {
*(pPropertyCount)=deserialize_uint32_t(result["members"]["pPropertyCount"]);}();
}();
[&]() {

        if (result["members"]["pProperties"].contains("null")){
        pProperties=NULL;
        return;
        }
    
        for (int rnXFzEv=0; rnXFzEv < *pPropertyCount; rnXFzEv++){
            [&]() {
pProperties[rnXFzEv]=deserialize_VkDisplayProperties2KHR(result["members"]["pProperties"]["members"][rnXFzEv]);}();;
        }
        }();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkGetPhysicalDeviceDisplayPlaneProperties2KHR(
VkPhysicalDevice physicalDevice,
 uint32_t* pPropertyCount,
 VkDisplayPlaneProperties2KHR* pProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceDisplayPlaneProperties2KHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["pPropertyCount"]=[&]() {
    json return_MnYOHdG=json({});
    
        if (pPropertyCount==NULL){
            return_MnYOHdG["null"]=true;
            return return_MnYOHdG;
        }
        return_MnYOHdG=[&]() {
    json return_rPOmKzR=json({});
    return serialize_uint32_t(*pPropertyCount);}();
return return_MnYOHdG;}();
data_json["members"]["pProperties"]=[&]() {
    json return_tVqYOWi=json({});
    
        if (pProperties==NULL){
            return_tVqYOWi["null"]=true;
            return return_tVqYOWi;
        }
        
        return_tVqYOWi["members"]={};
        for(int tVqYOWi=0; tVqYOWi < *pPropertyCount; tVqYOWi++){
            json temp;
            temp=[&]() {
    json return_qtKqPRF=json({});
    return serialize_VkDisplayPlaneProperties2KHR(pProperties[tVqYOWi]);}();
            return_tVqYOWi["members"].push_back(temp);
        }
        return return_tVqYOWi;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();
[&]() {

        if (result["members"]["pPropertyCount"].contains("null")){
        pPropertyCount=NULL;
        return;
        }
    [&]() {
*(pPropertyCount)=deserialize_uint32_t(result["members"]["pPropertyCount"]);}();
}();
[&]() {

        if (result["members"]["pProperties"].contains("null")){
        pProperties=NULL;
        return;
        }
    
        for (int xChkiOj=0; xChkiOj < *pPropertyCount; xChkiOj++){
            [&]() {
pProperties[xChkiOj]=deserialize_VkDisplayPlaneProperties2KHR(result["members"]["pProperties"]["members"][xChkiOj]);}();;
        }
        }();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkGetDisplayModeProperties2KHR(
VkPhysicalDevice physicalDevice,
 VkDisplayKHR display,
 uint32_t* pPropertyCount,
 VkDisplayModeProperties2KHR* pProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetDisplayModeProperties2KHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["display"]=[&]() {
    json return_wRgwvSz=json({});
    return serialize_VkDisplayKHR(display);}();
data_json["members"]["pPropertyCount"]=[&]() {
    json return_MnYOHdG=json({});
    
        if (pPropertyCount==NULL){
            return_MnYOHdG["null"]=true;
            return return_MnYOHdG;
        }
        return_MnYOHdG=[&]() {
    json return_rPOmKzR=json({});
    return serialize_uint32_t(*pPropertyCount);}();
return return_MnYOHdG;}();
data_json["members"]["pProperties"]=[&]() {
    json return_AmdBXBf=json({});
    
        if (pProperties==NULL){
            return_AmdBXBf["null"]=true;
            return return_AmdBXBf;
        }
        
        return_AmdBXBf["members"]={};
        for(int AmdBXBf=0; AmdBXBf < *pPropertyCount; AmdBXBf++){
            json temp;
            temp=[&]() {
    json return_HuMPrJh=json({});
    return serialize_VkDisplayModeProperties2KHR(pProperties[AmdBXBf]);}();
            return_AmdBXBf["members"].push_back(temp);
        }
        return return_AmdBXBf;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();
[&]() {
display=deserialize_VkDisplayKHR(result["members"]["display"]);}();
[&]() {

        if (result["members"]["pPropertyCount"].contains("null")){
        pPropertyCount=NULL;
        return;
        }
    [&]() {
*(pPropertyCount)=deserialize_uint32_t(result["members"]["pPropertyCount"]);}();
}();
[&]() {

        if (result["members"]["pProperties"].contains("null")){
        pProperties=NULL;
        return;
        }
    
        for (int EonYGdQ=0; EonYGdQ < *pPropertyCount; EonYGdQ++){
            [&]() {
pProperties[EonYGdQ]=deserialize_VkDisplayModeProperties2KHR(result["members"]["pProperties"]["members"][EonYGdQ]);}();;
        }
        }();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkGetDisplayPlaneCapabilities2KHR(
VkPhysicalDevice physicalDevice,
 const VkDisplayPlaneInfo2KHR* pDisplayPlaneInfo,
 VkDisplayPlaneCapabilities2KHR* pCapabilities
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetDisplayPlaneCapabilities2KHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["pDisplayPlaneInfo"]=[&]() {
    json return_PAguIfD=json({});
    
        if (pDisplayPlaneInfo==NULL){
            return_PAguIfD["null"]=true;
            return return_PAguIfD;
        }
        return_PAguIfD=[&]() {
    json return_LnimCFA=json({});
    return serialize_VkDisplayPlaneInfo2KHR(*pDisplayPlaneInfo);}();
return return_PAguIfD;}();
data_json["members"]["pCapabilities"]=[&]() {
    json return_RosOiXm=json({});
    
        if (pCapabilities==NULL){
            return_RosOiXm["null"]=true;
            return return_RosOiXm;
        }
        return_RosOiXm=[&]() {
    json return_YQNpBIC=json({});
    return serialize_VkDisplayPlaneCapabilities2KHR(*pCapabilities);}();
return return_RosOiXm;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();

[&]() {

        if (result["members"]["pCapabilities"].contains("null")){
        pCapabilities=NULL;
        return;
        }
    [&]() {
*(pCapabilities)=deserialize_VkDisplayPlaneCapabilities2KHR(result["members"]["pCapabilities"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkGetBufferMemoryRequirements2(
VkDevice device,
 const VkBufferMemoryRequirementsInfo2* pInfo,
 VkMemoryRequirements2* pMemoryRequirements
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetBufferMemoryRequirements2";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pInfo"]=[&]() {
    json return_ZQiaFNN=json({});
    
        if (pInfo==NULL){
            return_ZQiaFNN["null"]=true;
            return return_ZQiaFNN;
        }
        return_ZQiaFNN=[&]() {
    json return_ygJSYsp=json({});
    return serialize_VkBufferMemoryRequirementsInfo2(*pInfo);}();
return return_ZQiaFNN;}();
data_json["members"]["pMemoryRequirements"]=[&]() {
    json return_aEBODbS=json({});
    
        if (pMemoryRequirements==NULL){
            return_aEBODbS["null"]=true;
            return return_aEBODbS;
        }
        return_aEBODbS=[&]() {
    json return_hGmebmD=json({});
    return serialize_VkMemoryRequirements2(*pMemoryRequirements);}();
return return_aEBODbS;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

[&]() {

        if (result["members"]["pMemoryRequirements"].contains("null")){
        pMemoryRequirements=NULL;
        return;
        }
    [&]() {
*(pMemoryRequirements)=deserialize_VkMemoryRequirements2(result["members"]["pMemoryRequirements"]);}();
}();
}
void vkGetBufferMemoryRequirements2KHR(
VkDevice device,
 const VkBufferMemoryRequirementsInfo2* pInfo,
 VkMemoryRequirements2* pMemoryRequirements
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetBufferMemoryRequirements2KHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pInfo"]=[&]() {
    json return_ZQiaFNN=json({});
    
        if (pInfo==NULL){
            return_ZQiaFNN["null"]=true;
            return return_ZQiaFNN;
        }
        return_ZQiaFNN=[&]() {
    json return_ygJSYsp=json({});
    return serialize_VkBufferMemoryRequirementsInfo2(*pInfo);}();
return return_ZQiaFNN;}();
data_json["members"]["pMemoryRequirements"]=[&]() {
    json return_aEBODbS=json({});
    
        if (pMemoryRequirements==NULL){
            return_aEBODbS["null"]=true;
            return return_aEBODbS;
        }
        return_aEBODbS=[&]() {
    json return_hGmebmD=json({});
    return serialize_VkMemoryRequirements2(*pMemoryRequirements);}();
return return_aEBODbS;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

[&]() {

        if (result["members"]["pMemoryRequirements"].contains("null")){
        pMemoryRequirements=NULL;
        return;
        }
    [&]() {
*(pMemoryRequirements)=deserialize_VkMemoryRequirements2(result["members"]["pMemoryRequirements"]);}();
}();
}
void vkGetImageMemoryRequirements2(
VkDevice device,
 const VkImageMemoryRequirementsInfo2* pInfo,
 VkMemoryRequirements2* pMemoryRequirements
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetImageMemoryRequirements2";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pInfo"]=[&]() {
    json return_dFkNZCM=json({});
    
        if (pInfo==NULL){
            return_dFkNZCM["null"]=true;
            return return_dFkNZCM;
        }
        return_dFkNZCM=[&]() {
    json return_BdGgtuU=json({});
    return serialize_VkImageMemoryRequirementsInfo2(*pInfo);}();
return return_dFkNZCM;}();
data_json["members"]["pMemoryRequirements"]=[&]() {
    json return_aEBODbS=json({});
    
        if (pMemoryRequirements==NULL){
            return_aEBODbS["null"]=true;
            return return_aEBODbS;
        }
        return_aEBODbS=[&]() {
    json return_hGmebmD=json({});
    return serialize_VkMemoryRequirements2(*pMemoryRequirements);}();
return return_aEBODbS;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

[&]() {

        if (result["members"]["pMemoryRequirements"].contains("null")){
        pMemoryRequirements=NULL;
        return;
        }
    [&]() {
*(pMemoryRequirements)=deserialize_VkMemoryRequirements2(result["members"]["pMemoryRequirements"]);}();
}();
}
void vkGetImageMemoryRequirements2KHR(
VkDevice device,
 const VkImageMemoryRequirementsInfo2* pInfo,
 VkMemoryRequirements2* pMemoryRequirements
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetImageMemoryRequirements2KHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pInfo"]=[&]() {
    json return_dFkNZCM=json({});
    
        if (pInfo==NULL){
            return_dFkNZCM["null"]=true;
            return return_dFkNZCM;
        }
        return_dFkNZCM=[&]() {
    json return_BdGgtuU=json({});
    return serialize_VkImageMemoryRequirementsInfo2(*pInfo);}();
return return_dFkNZCM;}();
data_json["members"]["pMemoryRequirements"]=[&]() {
    json return_aEBODbS=json({});
    
        if (pMemoryRequirements==NULL){
            return_aEBODbS["null"]=true;
            return return_aEBODbS;
        }
        return_aEBODbS=[&]() {
    json return_hGmebmD=json({});
    return serialize_VkMemoryRequirements2(*pMemoryRequirements);}();
return return_aEBODbS;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

[&]() {

        if (result["members"]["pMemoryRequirements"].contains("null")){
        pMemoryRequirements=NULL;
        return;
        }
    [&]() {
*(pMemoryRequirements)=deserialize_VkMemoryRequirements2(result["members"]["pMemoryRequirements"]);}();
}();
}
void vkGetImageSparseMemoryRequirements2(
VkDevice device,
 const VkImageSparseMemoryRequirementsInfo2* pInfo,
 uint32_t* pSparseMemoryRequirementCount,
 VkSparseImageMemoryRequirements2* pSparseMemoryRequirements
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetImageSparseMemoryRequirements2";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pInfo"]=[&]() {
    json return_ZLvwpLF=json({});
    
        if (pInfo==NULL){
            return_ZLvwpLF["null"]=true;
            return return_ZLvwpLF;
        }
        return_ZLvwpLF=[&]() {
    json return_hgioKrs=json({});
    return serialize_VkImageSparseMemoryRequirementsInfo2(*pInfo);}();
return return_ZLvwpLF;}();
data_json["members"]["pSparseMemoryRequirementCount"]=[&]() {
    json return_HoOHmri=json({});
    
        if (pSparseMemoryRequirementCount==NULL){
            return_HoOHmri["null"]=true;
            return return_HoOHmri;
        }
        return_HoOHmri=[&]() {
    json return_auEoviK=json({});
    return serialize_uint32_t(*pSparseMemoryRequirementCount);}();
return return_HoOHmri;}();
data_json["members"]["pSparseMemoryRequirements"]=[&]() {
    json return_iRLsorw=json({});
    
        if (pSparseMemoryRequirements==NULL){
            return_iRLsorw["null"]=true;
            return return_iRLsorw;
        }
        
        return_iRLsorw["members"]={};
        for(int iRLsorw=0; iRLsorw < *pSparseMemoryRequirementCount; iRLsorw++){
            json temp;
            temp=[&]() {
    json return_hRAaTcF=json({});
    return serialize_VkSparseImageMemoryRequirements2(pSparseMemoryRequirements[iRLsorw]);}();
            return_iRLsorw["members"].push_back(temp);
        }
        return return_iRLsorw;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

[&]() {

        if (result["members"]["pSparseMemoryRequirementCount"].contains("null")){
        pSparseMemoryRequirementCount=NULL;
        return;
        }
    [&]() {
*(pSparseMemoryRequirementCount)=deserialize_uint32_t(result["members"]["pSparseMemoryRequirementCount"]);}();
}();
[&]() {

        if (result["members"]["pSparseMemoryRequirements"].contains("null")){
        pSparseMemoryRequirements=NULL;
        return;
        }
    
        for (int kBUHmjI=0; kBUHmjI < *pSparseMemoryRequirementCount; kBUHmjI++){
            [&]() {
pSparseMemoryRequirements[kBUHmjI]=deserialize_VkSparseImageMemoryRequirements2(result["members"]["pSparseMemoryRequirements"]["members"][kBUHmjI]);}();;
        }
        }();
}
void vkGetImageSparseMemoryRequirements2KHR(
VkDevice device,
 const VkImageSparseMemoryRequirementsInfo2* pInfo,
 uint32_t* pSparseMemoryRequirementCount,
 VkSparseImageMemoryRequirements2* pSparseMemoryRequirements
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetImageSparseMemoryRequirements2KHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pInfo"]=[&]() {
    json return_ZLvwpLF=json({});
    
        if (pInfo==NULL){
            return_ZLvwpLF["null"]=true;
            return return_ZLvwpLF;
        }
        return_ZLvwpLF=[&]() {
    json return_hgioKrs=json({});
    return serialize_VkImageSparseMemoryRequirementsInfo2(*pInfo);}();
return return_ZLvwpLF;}();
data_json["members"]["pSparseMemoryRequirementCount"]=[&]() {
    json return_HoOHmri=json({});
    
        if (pSparseMemoryRequirementCount==NULL){
            return_HoOHmri["null"]=true;
            return return_HoOHmri;
        }
        return_HoOHmri=[&]() {
    json return_auEoviK=json({});
    return serialize_uint32_t(*pSparseMemoryRequirementCount);}();
return return_HoOHmri;}();
data_json["members"]["pSparseMemoryRequirements"]=[&]() {
    json return_iRLsorw=json({});
    
        if (pSparseMemoryRequirements==NULL){
            return_iRLsorw["null"]=true;
            return return_iRLsorw;
        }
        
        return_iRLsorw["members"]={};
        for(int iRLsorw=0; iRLsorw < *pSparseMemoryRequirementCount; iRLsorw++){
            json temp;
            temp=[&]() {
    json return_hRAaTcF=json({});
    return serialize_VkSparseImageMemoryRequirements2(pSparseMemoryRequirements[iRLsorw]);}();
            return_iRLsorw["members"].push_back(temp);
        }
        return return_iRLsorw;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

[&]() {

        if (result["members"]["pSparseMemoryRequirementCount"].contains("null")){
        pSparseMemoryRequirementCount=NULL;
        return;
        }
    [&]() {
*(pSparseMemoryRequirementCount)=deserialize_uint32_t(result["members"]["pSparseMemoryRequirementCount"]);}();
}();
[&]() {

        if (result["members"]["pSparseMemoryRequirements"].contains("null")){
        pSparseMemoryRequirements=NULL;
        return;
        }
    
        for (int kBUHmjI=0; kBUHmjI < *pSparseMemoryRequirementCount; kBUHmjI++){
            [&]() {
pSparseMemoryRequirements[kBUHmjI]=deserialize_VkSparseImageMemoryRequirements2(result["members"]["pSparseMemoryRequirements"]["members"][kBUHmjI]);}();;
        }
        }();
}
void vkGetDeviceBufferMemoryRequirements(
VkDevice device,
 const VkDeviceBufferMemoryRequirements* pInfo,
 VkMemoryRequirements2* pMemoryRequirements
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetDeviceBufferMemoryRequirements";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pInfo"]=[&]() {
    json return_azJPowA=json({});
    
        if (pInfo==NULL){
            return_azJPowA["null"]=true;
            return return_azJPowA;
        }
        return_azJPowA=[&]() {
    json return_GNbYvZr=json({});
    return serialize_VkDeviceBufferMemoryRequirements(*pInfo);}();
return return_azJPowA;}();
data_json["members"]["pMemoryRequirements"]=[&]() {
    json return_aEBODbS=json({});
    
        if (pMemoryRequirements==NULL){
            return_aEBODbS["null"]=true;
            return return_aEBODbS;
        }
        return_aEBODbS=[&]() {
    json return_hGmebmD=json({});
    return serialize_VkMemoryRequirements2(*pMemoryRequirements);}();
return return_aEBODbS;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

[&]() {

        if (result["members"]["pMemoryRequirements"].contains("null")){
        pMemoryRequirements=NULL;
        return;
        }
    [&]() {
*(pMemoryRequirements)=deserialize_VkMemoryRequirements2(result["members"]["pMemoryRequirements"]);}();
}();
}
void vkGetDeviceBufferMemoryRequirementsKHR(
VkDevice device,
 const VkDeviceBufferMemoryRequirements* pInfo,
 VkMemoryRequirements2* pMemoryRequirements
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetDeviceBufferMemoryRequirementsKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pInfo"]=[&]() {
    json return_azJPowA=json({});
    
        if (pInfo==NULL){
            return_azJPowA["null"]=true;
            return return_azJPowA;
        }
        return_azJPowA=[&]() {
    json return_GNbYvZr=json({});
    return serialize_VkDeviceBufferMemoryRequirements(*pInfo);}();
return return_azJPowA;}();
data_json["members"]["pMemoryRequirements"]=[&]() {
    json return_aEBODbS=json({});
    
        if (pMemoryRequirements==NULL){
            return_aEBODbS["null"]=true;
            return return_aEBODbS;
        }
        return_aEBODbS=[&]() {
    json return_hGmebmD=json({});
    return serialize_VkMemoryRequirements2(*pMemoryRequirements);}();
return return_aEBODbS;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

[&]() {

        if (result["members"]["pMemoryRequirements"].contains("null")){
        pMemoryRequirements=NULL;
        return;
        }
    [&]() {
*(pMemoryRequirements)=deserialize_VkMemoryRequirements2(result["members"]["pMemoryRequirements"]);}();
}();
}
void vkGetDeviceImageMemoryRequirements(
VkDevice device,
 const VkDeviceImageMemoryRequirements* pInfo,
 VkMemoryRequirements2* pMemoryRequirements
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetDeviceImageMemoryRequirements";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pInfo"]=[&]() {
    json return_XfvUMPP=json({});
    
        if (pInfo==NULL){
            return_XfvUMPP["null"]=true;
            return return_XfvUMPP;
        }
        return_XfvUMPP=[&]() {
    json return_tLUfmzr=json({});
    return serialize_VkDeviceImageMemoryRequirements(*pInfo);}();
return return_XfvUMPP;}();
data_json["members"]["pMemoryRequirements"]=[&]() {
    json return_aEBODbS=json({});
    
        if (pMemoryRequirements==NULL){
            return_aEBODbS["null"]=true;
            return return_aEBODbS;
        }
        return_aEBODbS=[&]() {
    json return_hGmebmD=json({});
    return serialize_VkMemoryRequirements2(*pMemoryRequirements);}();
return return_aEBODbS;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

[&]() {

        if (result["members"]["pMemoryRequirements"].contains("null")){
        pMemoryRequirements=NULL;
        return;
        }
    [&]() {
*(pMemoryRequirements)=deserialize_VkMemoryRequirements2(result["members"]["pMemoryRequirements"]);}();
}();
}
void vkGetDeviceImageMemoryRequirementsKHR(
VkDevice device,
 const VkDeviceImageMemoryRequirements* pInfo,
 VkMemoryRequirements2* pMemoryRequirements
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetDeviceImageMemoryRequirementsKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pInfo"]=[&]() {
    json return_XfvUMPP=json({});
    
        if (pInfo==NULL){
            return_XfvUMPP["null"]=true;
            return return_XfvUMPP;
        }
        return_XfvUMPP=[&]() {
    json return_tLUfmzr=json({});
    return serialize_VkDeviceImageMemoryRequirements(*pInfo);}();
return return_XfvUMPP;}();
data_json["members"]["pMemoryRequirements"]=[&]() {
    json return_aEBODbS=json({});
    
        if (pMemoryRequirements==NULL){
            return_aEBODbS["null"]=true;
            return return_aEBODbS;
        }
        return_aEBODbS=[&]() {
    json return_hGmebmD=json({});
    return serialize_VkMemoryRequirements2(*pMemoryRequirements);}();
return return_aEBODbS;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

[&]() {

        if (result["members"]["pMemoryRequirements"].contains("null")){
        pMemoryRequirements=NULL;
        return;
        }
    [&]() {
*(pMemoryRequirements)=deserialize_VkMemoryRequirements2(result["members"]["pMemoryRequirements"]);}();
}();
}
void vkGetDeviceImageSparseMemoryRequirements(
VkDevice device,
 const VkDeviceImageMemoryRequirements* pInfo,
 uint32_t* pSparseMemoryRequirementCount,
 VkSparseImageMemoryRequirements2* pSparseMemoryRequirements
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetDeviceImageSparseMemoryRequirements";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pInfo"]=[&]() {
    json return_XfvUMPP=json({});
    
        if (pInfo==NULL){
            return_XfvUMPP["null"]=true;
            return return_XfvUMPP;
        }
        return_XfvUMPP=[&]() {
    json return_tLUfmzr=json({});
    return serialize_VkDeviceImageMemoryRequirements(*pInfo);}();
return return_XfvUMPP;}();
data_json["members"]["pSparseMemoryRequirementCount"]=[&]() {
    json return_HoOHmri=json({});
    
        if (pSparseMemoryRequirementCount==NULL){
            return_HoOHmri["null"]=true;
            return return_HoOHmri;
        }
        return_HoOHmri=[&]() {
    json return_auEoviK=json({});
    return serialize_uint32_t(*pSparseMemoryRequirementCount);}();
return return_HoOHmri;}();
data_json["members"]["pSparseMemoryRequirements"]=[&]() {
    json return_iRLsorw=json({});
    
        if (pSparseMemoryRequirements==NULL){
            return_iRLsorw["null"]=true;
            return return_iRLsorw;
        }
        
        return_iRLsorw["members"]={};
        for(int iRLsorw=0; iRLsorw < *pSparseMemoryRequirementCount; iRLsorw++){
            json temp;
            temp=[&]() {
    json return_hRAaTcF=json({});
    return serialize_VkSparseImageMemoryRequirements2(pSparseMemoryRequirements[iRLsorw]);}();
            return_iRLsorw["members"].push_back(temp);
        }
        return return_iRLsorw;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

[&]() {

        if (result["members"]["pSparseMemoryRequirementCount"].contains("null")){
        pSparseMemoryRequirementCount=NULL;
        return;
        }
    [&]() {
*(pSparseMemoryRequirementCount)=deserialize_uint32_t(result["members"]["pSparseMemoryRequirementCount"]);}();
}();
[&]() {

        if (result["members"]["pSparseMemoryRequirements"].contains("null")){
        pSparseMemoryRequirements=NULL;
        return;
        }
    
        for (int kBUHmjI=0; kBUHmjI < *pSparseMemoryRequirementCount; kBUHmjI++){
            [&]() {
pSparseMemoryRequirements[kBUHmjI]=deserialize_VkSparseImageMemoryRequirements2(result["members"]["pSparseMemoryRequirements"]["members"][kBUHmjI]);}();;
        }
        }();
}
void vkGetDeviceImageSparseMemoryRequirementsKHR(
VkDevice device,
 const VkDeviceImageMemoryRequirements* pInfo,
 uint32_t* pSparseMemoryRequirementCount,
 VkSparseImageMemoryRequirements2* pSparseMemoryRequirements
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetDeviceImageSparseMemoryRequirementsKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pInfo"]=[&]() {
    json return_XfvUMPP=json({});
    
        if (pInfo==NULL){
            return_XfvUMPP["null"]=true;
            return return_XfvUMPP;
        }
        return_XfvUMPP=[&]() {
    json return_tLUfmzr=json({});
    return serialize_VkDeviceImageMemoryRequirements(*pInfo);}();
return return_XfvUMPP;}();
data_json["members"]["pSparseMemoryRequirementCount"]=[&]() {
    json return_HoOHmri=json({});
    
        if (pSparseMemoryRequirementCount==NULL){
            return_HoOHmri["null"]=true;
            return return_HoOHmri;
        }
        return_HoOHmri=[&]() {
    json return_auEoviK=json({});
    return serialize_uint32_t(*pSparseMemoryRequirementCount);}();
return return_HoOHmri;}();
data_json["members"]["pSparseMemoryRequirements"]=[&]() {
    json return_iRLsorw=json({});
    
        if (pSparseMemoryRequirements==NULL){
            return_iRLsorw["null"]=true;
            return return_iRLsorw;
        }
        
        return_iRLsorw["members"]={};
        for(int iRLsorw=0; iRLsorw < *pSparseMemoryRequirementCount; iRLsorw++){
            json temp;
            temp=[&]() {
    json return_hRAaTcF=json({});
    return serialize_VkSparseImageMemoryRequirements2(pSparseMemoryRequirements[iRLsorw]);}();
            return_iRLsorw["members"].push_back(temp);
        }
        return return_iRLsorw;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

[&]() {

        if (result["members"]["pSparseMemoryRequirementCount"].contains("null")){
        pSparseMemoryRequirementCount=NULL;
        return;
        }
    [&]() {
*(pSparseMemoryRequirementCount)=deserialize_uint32_t(result["members"]["pSparseMemoryRequirementCount"]);}();
}();
[&]() {

        if (result["members"]["pSparseMemoryRequirements"].contains("null")){
        pSparseMemoryRequirements=NULL;
        return;
        }
    
        for (int kBUHmjI=0; kBUHmjI < *pSparseMemoryRequirementCount; kBUHmjI++){
            [&]() {
pSparseMemoryRequirements[kBUHmjI]=deserialize_VkSparseImageMemoryRequirements2(result["members"]["pSparseMemoryRequirements"]["members"][kBUHmjI]);}();;
        }
        }();
}
VkResult vkCreateSamplerYcbcrConversion(
VkDevice device,
 const VkSamplerYcbcrConversionCreateInfo* pCreateInfo,
 const VkAllocationCallbacks* pAllocator,
 VkSamplerYcbcrConversion* pYcbcrConversion
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreateSamplerYcbcrConversion";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pCreateInfo"]=[&]() {
    json return_hdhefTH=json({});
    
        if (pCreateInfo==NULL){
            return_hdhefTH["null"]=true;
            return return_hdhefTH;
        }
        return_hdhefTH=[&]() {
    json return_rrGxmFU=json({});
    return serialize_VkSamplerYcbcrConversionCreateInfo(*pCreateInfo);}();
return return_hdhefTH;}();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pYcbcrConversion"]=[&]() {
    json return_lClrQTW=json({});
    
        if (pYcbcrConversion==NULL){
            return_lClrQTW["null"]=true;
            return return_lClrQTW;
        }
        return_lClrQTW=[&]() {
    json return_ZQLuRXM=json({});
    return serialize_VkSamplerYcbcrConversion(*pYcbcrConversion);}();
return return_lClrQTW;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();


[&]() {

        if (result["members"]["pYcbcrConversion"].contains("null")){
        pYcbcrConversion=NULL;
        return;
        }
    [&]() {
*(pYcbcrConversion)=deserialize_VkSamplerYcbcrConversion(result["members"]["pYcbcrConversion"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                handle_to_parent_handle_struct[(uintptr_t)(*pYcbcrConversion)]=parent;
                
return return_value;
}
VkResult vkCreateSamplerYcbcrConversionKHR(
VkDevice device,
 const VkSamplerYcbcrConversionCreateInfo* pCreateInfo,
 const VkAllocationCallbacks* pAllocator,
 VkSamplerYcbcrConversion* pYcbcrConversion
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreateSamplerYcbcrConversionKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pCreateInfo"]=[&]() {
    json return_hdhefTH=json({});
    
        if (pCreateInfo==NULL){
            return_hdhefTH["null"]=true;
            return return_hdhefTH;
        }
        return_hdhefTH=[&]() {
    json return_rrGxmFU=json({});
    return serialize_VkSamplerYcbcrConversionCreateInfo(*pCreateInfo);}();
return return_hdhefTH;}();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pYcbcrConversion"]=[&]() {
    json return_lClrQTW=json({});
    
        if (pYcbcrConversion==NULL){
            return_lClrQTW["null"]=true;
            return return_lClrQTW;
        }
        return_lClrQTW=[&]() {
    json return_ZQLuRXM=json({});
    return serialize_VkSamplerYcbcrConversion(*pYcbcrConversion);}();
return return_lClrQTW;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();


[&]() {

        if (result["members"]["pYcbcrConversion"].contains("null")){
        pYcbcrConversion=NULL;
        return;
        }
    [&]() {
*(pYcbcrConversion)=deserialize_VkSamplerYcbcrConversion(result["members"]["pYcbcrConversion"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                handle_to_parent_handle_struct[(uintptr_t)(*pYcbcrConversion)]=parent;
                
return return_value;
}
void vkDestroySamplerYcbcrConversion(
VkDevice device,
 VkSamplerYcbcrConversion ycbcrConversion,
 const VkAllocationCallbacks* pAllocator
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkDestroySamplerYcbcrConversion";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["ycbcrConversion"]=[&]() {
    json return_urCDhJJ=json({});
    return serialize_VkSamplerYcbcrConversion(ycbcrConversion);}();
data_json["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
ycbcrConversion=deserialize_VkSamplerYcbcrConversion(result["members"]["ycbcrConversion"]);}();

}
void vkDestroySamplerYcbcrConversionKHR(
VkDevice device,
 VkSamplerYcbcrConversion ycbcrConversion,
 const VkAllocationCallbacks* pAllocator
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkDestroySamplerYcbcrConversionKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["ycbcrConversion"]=[&]() {
    json return_urCDhJJ=json({});
    return serialize_VkSamplerYcbcrConversion(ycbcrConversion);}();
data_json["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
ycbcrConversion=deserialize_VkSamplerYcbcrConversion(result["members"]["ycbcrConversion"]);}();

}
void vkGetDeviceQueue2(
VkDevice device,
 const VkDeviceQueueInfo2* pQueueInfo,
 VkQueue* pQueue
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetDeviceQueue2";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pQueueInfo"]=[&]() {
    json return_RBMnySx=json({});
    
        if (pQueueInfo==NULL){
            return_RBMnySx["null"]=true;
            return return_RBMnySx;
        }
        return_RBMnySx=[&]() {
    json return_nUzFkAr=json({});
    return serialize_VkDeviceQueueInfo2(*pQueueInfo);}();
return return_RBMnySx;}();
data_json["members"]["pQueue"]=[&]() {
    json return_WCWxniJ=json({});
    
        if (pQueue==NULL){
            return_WCWxniJ["null"]=true;
            return return_WCWxniJ;
        }
        return_WCWxniJ=[&]() {
    json return_NsjiHxF=json({});
    return serialize_VkQueue(*pQueue);}();
return return_WCWxniJ;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

[&]() {

        if (result["members"]["pQueue"].contains("null")){
        pQueue=NULL;
        return;
        }
    [&]() {
*(pQueue)=deserialize_VkQueue(result["members"]["pQueue"]);}();
}();
}
VkResult vkCreateValidationCacheEXT(
VkDevice device,
 const VkValidationCacheCreateInfoEXT* pCreateInfo,
 const VkAllocationCallbacks* pAllocator,
 VkValidationCacheEXT* pValidationCache
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreateValidationCacheEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pCreateInfo"]=[&]() {
    json return_vHvwxxp=json({});
    
        if (pCreateInfo==NULL){
            return_vHvwxxp["null"]=true;
            return return_vHvwxxp;
        }
        return_vHvwxxp=[&]() {
    json return_FXyxAMF=json({});
    return serialize_VkValidationCacheCreateInfoEXT(*pCreateInfo);}();
return return_vHvwxxp;}();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pValidationCache"]=[&]() {
    json return_gwTOVQJ=json({});
    
        if (pValidationCache==NULL){
            return_gwTOVQJ["null"]=true;
            return return_gwTOVQJ;
        }
        return_gwTOVQJ=[&]() {
    json return_FjUsjMy=json({});
    return serialize_VkValidationCacheEXT(*pValidationCache);}();
return return_gwTOVQJ;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();


[&]() {

        if (result["members"]["pValidationCache"].contains("null")){
        pValidationCache=NULL;
        return;
        }
    [&]() {
*(pValidationCache)=deserialize_VkValidationCacheEXT(result["members"]["pValidationCache"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                handle_to_parent_handle_struct[(uintptr_t)(*pValidationCache)]=parent;
                
return return_value;
}
void vkDestroyValidationCacheEXT(
VkDevice device,
 VkValidationCacheEXT validationCache,
 const VkAllocationCallbacks* pAllocator
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkDestroyValidationCacheEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["validationCache"]=[&]() {
    json return_QCMJpoc=json({});
    return serialize_VkValidationCacheEXT(validationCache);}();
data_json["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
validationCache=deserialize_VkValidationCacheEXT(result["members"]["validationCache"]);}();

}
VkResult vkGetValidationCacheDataEXT(
VkDevice device,
 VkValidationCacheEXT validationCache,
 size_t* pDataSize,
 void* pData
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetValidationCacheDataEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["validationCache"]=[&]() {
    json return_QCMJpoc=json({});
    return serialize_VkValidationCacheEXT(validationCache);}();
data_json["members"]["pDataSize"]=[&]() {
    json return_DeyPpRh=json({});
    
        if (pDataSize==NULL){
            return_DeyPpRh["null"]=true;
            return return_DeyPpRh;
        }
        return_DeyPpRh=[&]() {
    json return_ffvzSRv=json({});
    return serialize_size_t(*pDataSize);}();
return return_DeyPpRh;}();
data_json["members"]["pData"]=[&]() {
    json return_MOqETBu=json({});
    
        if (pData==NULL){
            return_MOqETBu["null"]=true;
            return return_MOqETBu;
        }
        return serialize_void_p(pData);
}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
validationCache=deserialize_VkValidationCacheEXT(result["members"]["validationCache"]);}();
[&]() {

        if (result["members"]["pDataSize"].contains("null")){
        pDataSize=NULL;
        return;
        }
    [&]() {
*(pDataSize)=deserialize_size_t(result["members"]["pDataSize"]);}();
}();
[&]() {

        if (result["members"]["pData"].contains("null")){
        pData=NULL;
        return;
        }
    pData=deserialize_void_p(result["members"]["pData"]);
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkMergeValidationCachesEXT(
VkDevice device,
 VkValidationCacheEXT dstCache,
 uint32_t srcCacheCount,
 const VkValidationCacheEXT* pSrcCaches
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkMergeValidationCachesEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["dstCache"]=[&]() {
    json return_YrSEdOD=json({});
    return serialize_VkValidationCacheEXT(dstCache);}();
data_json["members"]["srcCacheCount"]=[&]() {
    json return_agrMtpa=json({});
    return serialize_uint32_t(srcCacheCount);}();
data_json["members"]["pSrcCaches"]=[&]() {
    json return_NhjxrOm=json({});
    
        if (pSrcCaches==NULL){
            return_NhjxrOm["null"]=true;
            return return_NhjxrOm;
        }
        
        return_NhjxrOm["members"]={};
        for(int NhjxrOm=0; NhjxrOm < srcCacheCount; NhjxrOm++){
            json temp;
            temp=[&]() {
    json return_UxJKTXX=json({});
    return serialize_VkValidationCacheEXT(pSrcCaches[NhjxrOm]);}();
            return_NhjxrOm["members"].push_back(temp);
        }
        return return_NhjxrOm;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
dstCache=deserialize_VkValidationCacheEXT(result["members"]["dstCache"]);}();
[&]() {
srcCacheCount=deserialize_uint32_t(result["members"]["srcCacheCount"]);}();

VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkGetDescriptorSetLayoutSupport(
VkDevice device,
 const VkDescriptorSetLayoutCreateInfo* pCreateInfo,
 VkDescriptorSetLayoutSupport* pSupport
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetDescriptorSetLayoutSupport";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pCreateInfo"]=[&]() {
    json return_DbQjwWK=json({});
    
        if (pCreateInfo==NULL){
            return_DbQjwWK["null"]=true;
            return return_DbQjwWK;
        }
        return_DbQjwWK=[&]() {
    json return_vQZpbNT=json({});
    return serialize_VkDescriptorSetLayoutCreateInfo(*pCreateInfo);}();
return return_DbQjwWK;}();
data_json["members"]["pSupport"]=[&]() {
    json return_RLuZPkt=json({});
    
        if (pSupport==NULL){
            return_RLuZPkt["null"]=true;
            return return_RLuZPkt;
        }
        return_RLuZPkt=[&]() {
    json return_WFJIsPM=json({});
    return serialize_VkDescriptorSetLayoutSupport(*pSupport);}();
return return_RLuZPkt;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

[&]() {

        if (result["members"]["pSupport"].contains("null")){
        pSupport=NULL;
        return;
        }
    [&]() {
*(pSupport)=deserialize_VkDescriptorSetLayoutSupport(result["members"]["pSupport"]);}();
}();
}
void vkGetDescriptorSetLayoutSupportKHR(
VkDevice device,
 const VkDescriptorSetLayoutCreateInfo* pCreateInfo,
 VkDescriptorSetLayoutSupport* pSupport
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetDescriptorSetLayoutSupportKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pCreateInfo"]=[&]() {
    json return_DbQjwWK=json({});
    
        if (pCreateInfo==NULL){
            return_DbQjwWK["null"]=true;
            return return_DbQjwWK;
        }
        return_DbQjwWK=[&]() {
    json return_vQZpbNT=json({});
    return serialize_VkDescriptorSetLayoutCreateInfo(*pCreateInfo);}();
return return_DbQjwWK;}();
data_json["members"]["pSupport"]=[&]() {
    json return_RLuZPkt=json({});
    
        if (pSupport==NULL){
            return_RLuZPkt["null"]=true;
            return return_RLuZPkt;
        }
        return_RLuZPkt=[&]() {
    json return_WFJIsPM=json({});
    return serialize_VkDescriptorSetLayoutSupport(*pSupport);}();
return return_RLuZPkt;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

[&]() {

        if (result["members"]["pSupport"].contains("null")){
        pSupport=NULL;
        return;
        }
    [&]() {
*(pSupport)=deserialize_VkDescriptorSetLayoutSupport(result["members"]["pSupport"]);}();
}();
}
VkResult vkGetShaderInfoAMD(
VkDevice device,
 VkPipeline pipeline,
 VkShaderStageFlagBits shaderStage,
 VkShaderInfoTypeAMD infoType,
 size_t* pInfoSize,
 void* pInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetShaderInfoAMD";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pipeline"]=[&]() {
    json return_xIUyQCN=json({});
    return serialize_VkPipeline(pipeline);}();
data_json["members"]["shaderStage"]=[&]() {
    json return_WnCdRPH=json({});
    return serialize_VkShaderStageFlagBits(shaderStage);}();
data_json["members"]["infoType"]=[&]() {
    json return_ZxWKiTr=json({});
    return serialize_VkShaderInfoTypeAMD(infoType);}();
data_json["members"]["pInfoSize"]=[&]() {
    json return_KUPLRHW=json({});
    
        if (pInfoSize==NULL){
            return_KUPLRHW["null"]=true;
            return return_KUPLRHW;
        }
        return_KUPLRHW=[&]() {
    json return_uoeGvBd=json({});
    return serialize_size_t(*pInfoSize);}();
return return_KUPLRHW;}();
data_json["members"]["pInfo"]=[&]() {
    json return_qcUUUDM=json({});
    
        if (pInfo==NULL){
            return_qcUUUDM["null"]=true;
            return return_qcUUUDM;
        }
        return serialize_void_p(pInfo);
}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
pipeline=deserialize_VkPipeline(result["members"]["pipeline"]);}();
[&]() {
shaderStage=deserialize_VkShaderStageFlagBits(result["members"]["shaderStage"]);}();
[&]() {
infoType=deserialize_VkShaderInfoTypeAMD(result["members"]["infoType"]);}();
[&]() {

        if (result["members"]["pInfoSize"].contains("null")){
        pInfoSize=NULL;
        return;
        }
    [&]() {
*(pInfoSize)=deserialize_size_t(result["members"]["pInfoSize"]);}();
}();
[&]() {

        if (result["members"]["pInfo"].contains("null")){
        pInfo=NULL;
        return;
        }
    pInfo=deserialize_void_p(result["members"]["pInfo"]);
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkSetLocalDimmingAMD(
VkDevice device,
 VkSwapchainKHR swapChain,
 VkBool32 localDimmingEnable
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkSetLocalDimmingAMD";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["swapChain"]=[&]() {
    json return_PeXJhje=json({});
    return serialize_VkSwapchainKHR(swapChain);}();
data_json["members"]["localDimmingEnable"]=[&]() {
    json return_gsXxvNE=json({});
    return_gsXxvNE=[&]() {
    json return_eUeubzD=json({});
    return serialize_uint32_t(localDimmingEnable);}();return return_gsXxvNE;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
swapChain=deserialize_VkSwapchainKHR(result["members"]["swapChain"]);}();
[&]() {
[&]() {
localDimmingEnable=deserialize_uint32_t(result["members"]["localDimmingEnable"]);}();}();
}
VkResult vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(
VkPhysicalDevice physicalDevice,
 uint32_t* pTimeDomainCount,
 VkTimeDomainEXT* pTimeDomains
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["pTimeDomainCount"]=[&]() {
    json return_AxwjReb=json({});
    
        if (pTimeDomainCount==NULL){
            return_AxwjReb["null"]=true;
            return return_AxwjReb;
        }
        return_AxwjReb=[&]() {
    json return_PVfsOkd=json({});
    return serialize_uint32_t(*pTimeDomainCount);}();
return return_AxwjReb;}();
data_json["members"]["pTimeDomains"]=[&]() {
    json return_AfevBYr=json({});
    
        if (pTimeDomains==NULL){
            return_AfevBYr["null"]=true;
            return return_AfevBYr;
        }
        
        return_AfevBYr["members"]={};
        for(int AfevBYr=0; AfevBYr < *pTimeDomainCount; AfevBYr++){
            json temp;
            temp=[&]() {
    json return_rMZzNXw=json({});
    return serialize_VkTimeDomainEXT(pTimeDomains[AfevBYr]);}();
            return_AfevBYr["members"].push_back(temp);
        }
        return return_AfevBYr;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();
[&]() {

        if (result["members"]["pTimeDomainCount"].contains("null")){
        pTimeDomainCount=NULL;
        return;
        }
    [&]() {
*(pTimeDomainCount)=deserialize_uint32_t(result["members"]["pTimeDomainCount"]);}();
}();
[&]() {

        if (result["members"]["pTimeDomains"].contains("null")){
        pTimeDomains=NULL;
        return;
        }
    
        for (int fagEyWI=0; fagEyWI < *pTimeDomainCount; fagEyWI++){
            [&]() {
pTimeDomains[fagEyWI]=deserialize_VkTimeDomainEXT(result["members"]["pTimeDomains"]["members"][fagEyWI]);}();;
        }
        }();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkGetCalibratedTimestampsEXT(
VkDevice device,
 uint32_t timestampCount,
 const VkCalibratedTimestampInfoEXT* pTimestampInfos,
 uint64_t* pTimestamps,
 uint64_t* pMaxDeviation
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetCalibratedTimestampsEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["timestampCount"]=[&]() {
    json return_fQlIzBf=json({});
    return serialize_uint32_t(timestampCount);}();
data_json["members"]["pTimestampInfos"]=[&]() {
    json return_CXeOIVu=json({});
    
        if (pTimestampInfos==NULL){
            return_CXeOIVu["null"]=true;
            return return_CXeOIVu;
        }
        
        return_CXeOIVu["members"]={};
        for(int CXeOIVu=0; CXeOIVu < timestampCount; CXeOIVu++){
            json temp;
            temp=[&]() {
    json return_wVKqfWO=json({});
    return serialize_VkCalibratedTimestampInfoEXT(pTimestampInfos[CXeOIVu]);}();
            return_CXeOIVu["members"].push_back(temp);
        }
        return return_CXeOIVu;
        }();
data_json["members"]["pTimestamps"]=[&]() {
    json return_RvqbfBY=json({});
    
        if (pTimestamps==NULL){
            return_RvqbfBY["null"]=true;
            return return_RvqbfBY;
        }
        
        return_RvqbfBY["members"]={};
        for(int RvqbfBY=0; RvqbfBY < timestampCount; RvqbfBY++){
            json temp;
            temp=[&]() {
    json return_ITGUnvH=json({});
    return serialize_uint64_t(pTimestamps[RvqbfBY]);}();
            return_RvqbfBY["members"].push_back(temp);
        }
        return return_RvqbfBY;
        }();
data_json["members"]["pMaxDeviation"]=[&]() {
    json return_mAcbwvC=json({});
    
        if (pMaxDeviation==NULL){
            return_mAcbwvC["null"]=true;
            return return_mAcbwvC;
        }
        return_mAcbwvC=[&]() {
    json return_RNPMlFZ=json({});
    return serialize_uint64_t(*pMaxDeviation);}();
return return_mAcbwvC;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
timestampCount=deserialize_uint32_t(result["members"]["timestampCount"]);}();

[&]() {

        if (result["members"]["pTimestamps"].contains("null")){
        pTimestamps=NULL;
        return;
        }
    
        for (int QYcNNUa=0; QYcNNUa < timestampCount; QYcNNUa++){
            [&]() {
pTimestamps[QYcNNUa]=deserialize_uint64_t(result["members"]["pTimestamps"]["members"][QYcNNUa]);}();;
        }
        }();
[&]() {

        if (result["members"]["pMaxDeviation"].contains("null")){
        pMaxDeviation=NULL;
        return;
        }
    [&]() {
*(pMaxDeviation)=deserialize_uint64_t(result["members"]["pMaxDeviation"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkSetDebugUtilsObjectNameEXT(
VkDevice device,
 const VkDebugUtilsObjectNameInfoEXT* pNameInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkSetDebugUtilsObjectNameEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pNameInfo"]=[&]() {
    json return_YLVgCDA=json({});
    
        if (pNameInfo==NULL){
            return_YLVgCDA["null"]=true;
            return return_YLVgCDA;
        }
        return_YLVgCDA=[&]() {
    json return_MipETWW=json({});
    return serialize_VkDebugUtilsObjectNameInfoEXT(*pNameInfo);}();
return return_YLVgCDA;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkSetDebugUtilsObjectTagEXT(
VkDevice device,
 const VkDebugUtilsObjectTagInfoEXT* pTagInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkSetDebugUtilsObjectTagEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pTagInfo"]=[&]() {
    json return_HWYOysZ=json({});
    
        if (pTagInfo==NULL){
            return_HWYOysZ["null"]=true;
            return return_HWYOysZ;
        }
        return_HWYOysZ=[&]() {
    json return_ACwQoAG=json({});
    return serialize_VkDebugUtilsObjectTagInfoEXT(*pTagInfo);}();
return return_HWYOysZ;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkQueueBeginDebugUtilsLabelEXT(
VkQueue queue,
 const VkDebugUtilsLabelEXT* pLabelInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkQueueBeginDebugUtilsLabelEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)queue];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["queue"]=[&]() {
    json return_KYhcIBS=json({});
    return serialize_VkQueue(queue);}();
data_json["members"]["pLabelInfo"]=[&]() {
    json return_QfllhgL=json({});
    
        if (pLabelInfo==NULL){
            return_QfllhgL["null"]=true;
            return return_QfllhgL;
        }
        return_QfllhgL=[&]() {
    json return_SWoyDNv=json({});
    return serialize_VkDebugUtilsLabelEXT(*pLabelInfo);}();
return return_QfllhgL;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
queue=deserialize_VkQueue(result["members"]["queue"]);}();

}
void vkQueueEndDebugUtilsLabelEXT(
VkQueue queue
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkQueueEndDebugUtilsLabelEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)queue];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["queue"]=[&]() {
    json return_sfVGawV=json({});
    return serialize_VkQueue(queue);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
queue=deserialize_VkQueue(result["members"]["queue"]);}();
}
void vkQueueInsertDebugUtilsLabelEXT(
VkQueue queue,
 const VkDebugUtilsLabelEXT* pLabelInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkQueueInsertDebugUtilsLabelEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)queue];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["queue"]=[&]() {
    json return_KYhcIBS=json({});
    return serialize_VkQueue(queue);}();
data_json["members"]["pLabelInfo"]=[&]() {
    json return_QfllhgL=json({});
    
        if (pLabelInfo==NULL){
            return_QfllhgL["null"]=true;
            return return_QfllhgL;
        }
        return_QfllhgL=[&]() {
    json return_SWoyDNv=json({});
    return serialize_VkDebugUtilsLabelEXT(*pLabelInfo);}();
return return_QfllhgL;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
queue=deserialize_VkQueue(result["members"]["queue"]);}();

}
void vkCmdBeginDebugUtilsLabelEXT(
VkCommandBuffer commandBuffer,
 const VkDebugUtilsLabelEXT* pLabelInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdBeginDebugUtilsLabelEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pLabelInfo"]=[&]() {
    json return_QfllhgL=json({});
    
        if (pLabelInfo==NULL){
            return_QfllhgL["null"]=true;
            return return_QfllhgL;
        }
        return_QfllhgL=[&]() {
    json return_SWoyDNv=json({});
    return serialize_VkDebugUtilsLabelEXT(*pLabelInfo);}();
return return_QfllhgL;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();

}
void vkCmdEndDebugUtilsLabelEXT(
VkCommandBuffer commandBuffer
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdEndDebugUtilsLabelEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_GVaXYIY=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
}
void vkCmdInsertDebugUtilsLabelEXT(
VkCommandBuffer commandBuffer,
 const VkDebugUtilsLabelEXT* pLabelInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdInsertDebugUtilsLabelEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pLabelInfo"]=[&]() {
    json return_QfllhgL=json({});
    
        if (pLabelInfo==NULL){
            return_QfllhgL["null"]=true;
            return return_QfllhgL;
        }
        return_QfllhgL=[&]() {
    json return_SWoyDNv=json({});
    return serialize_VkDebugUtilsLabelEXT(*pLabelInfo);}();
return return_QfllhgL;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();

}
VkResult vkCreateDebugUtilsMessengerEXT(
VkInstance instance,
 const VkDebugUtilsMessengerCreateInfoEXT* pCreateInfo,
 const VkAllocationCallbacks* pAllocator,
 VkDebugUtilsMessengerEXT* pMessenger
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreateDebugUtilsMessengerEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)instance];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["instance"]=[&]() {
    json return_uDnIwUL=json({});
    return serialize_VkInstance(instance);}();
data_json["members"]["pCreateInfo"]=[&]() {
    json return_cRzxKgy=json({});
    
        if (pCreateInfo==NULL){
            return_cRzxKgy["null"]=true;
            return return_cRzxKgy;
        }
        return_cRzxKgy=[&]() {
    json return_kUNkfty=json({});
    return serialize_VkDebugUtilsMessengerCreateInfoEXT(*pCreateInfo);}();
return return_cRzxKgy;}();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pMessenger"]=[&]() {
    json return_ZCRusdY=json({});
    
        if (pMessenger==NULL){
            return_ZCRusdY["null"]=true;
            return return_ZCRusdY;
        }
        return_ZCRusdY=[&]() {
    json return_KfGiSKV=json({});
    return serialize_VkDebugUtilsMessengerEXT(*pMessenger);}();
return return_ZCRusdY;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
instance=deserialize_VkInstance(result["members"]["instance"]);}();


[&]() {

        if (result["members"]["pMessenger"].contains("null")){
        pMessenger=NULL;
        return;
        }
    [&]() {
*(pMessenger)=deserialize_VkDebugUtilsMessengerEXT(result["members"]["pMessenger"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                handle_to_parent_handle_struct[(uintptr_t)(*pMessenger)]=parent;
                
return return_value;
}
void vkDestroyDebugUtilsMessengerEXT(
VkInstance instance,
 VkDebugUtilsMessengerEXT messenger,
 const VkAllocationCallbacks* pAllocator
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkDestroyDebugUtilsMessengerEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)instance];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["instance"]=[&]() {
    json return_uDnIwUL=json({});
    return serialize_VkInstance(instance);}();
data_json["members"]["messenger"]=[&]() {
    json return_XFdKcnL=json({});
    return serialize_VkDebugUtilsMessengerEXT(messenger);}();
data_json["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
instance=deserialize_VkInstance(result["members"]["instance"]);}();
[&]() {
messenger=deserialize_VkDebugUtilsMessengerEXT(result["members"]["messenger"]);}();

}
void vkSubmitDebugUtilsMessageEXT(
VkInstance instance,
 VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity,
 VkDebugUtilsMessageTypeFlagsEXT messageTypes,
 const VkDebugUtilsMessengerCallbackDataEXT* pCallbackData
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkSubmitDebugUtilsMessageEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)instance];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["instance"]=[&]() {
    json return_uDnIwUL=json({});
    return serialize_VkInstance(instance);}();
data_json["members"]["messageSeverity"]=[&]() {
    json return_jQnYuTr=json({});
    return serialize_VkDebugUtilsMessageSeverityFlagBitsEXT(messageSeverity);}();
data_json["members"]["messageTypes"]=[&]() {
    json return_xYqUWaX=json({});
    return serialize_VkDebugUtilsMessageTypeFlagsEXT(messageTypes);}();
data_json["members"]["pCallbackData"]=[&]() {
    json return_gnnYNco=json({});
    
        if (pCallbackData==NULL){
            return_gnnYNco["null"]=true;
            return return_gnnYNco;
        }
        return_gnnYNco=[&]() {
    json return_XgvhkWm=json({});
    return serialize_VkDebugUtilsMessengerCallbackDataEXT(*pCallbackData);}();
return return_gnnYNco;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
instance=deserialize_VkInstance(result["members"]["instance"]);}();
[&]() {
messageSeverity=deserialize_VkDebugUtilsMessageSeverityFlagBitsEXT(result["members"]["messageSeverity"]);}();
[&]() {
messageTypes=deserialize_VkDebugUtilsMessageTypeFlagsEXT(result["members"]["messageTypes"]);}();

}
VkResult vkGetMemoryHostPointerPropertiesEXT(
VkDevice device,
 VkExternalMemoryHandleTypeFlagBits handleType,
 const void* pHostPointer,
 VkMemoryHostPointerPropertiesEXT* pMemoryHostPointerProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetMemoryHostPointerPropertiesEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["handleType"]=[&]() {
    json return_ZfjPdbS=json({});
    return serialize_VkExternalMemoryHandleTypeFlagBits(handleType);}();
data_json["members"]["pHostPointer"]=[&]() {
    json return_WXbmMtZ=json({});
    
        if (pHostPointer==NULL){
            return_WXbmMtZ["null"]=true;
            return return_WXbmMtZ;
        }
        return serialize_void_p(pHostPointer);
}();
data_json["members"]["pMemoryHostPointerProperties"]=[&]() {
    json return_NWIiYEs=json({});
    
        if (pMemoryHostPointerProperties==NULL){
            return_NWIiYEs["null"]=true;
            return return_NWIiYEs;
        }
        return_NWIiYEs=[&]() {
    json return_jMzjxpR=json({});
    return serialize_VkMemoryHostPointerPropertiesEXT(*pMemoryHostPointerProperties);}();
return return_NWIiYEs;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
handleType=deserialize_VkExternalMemoryHandleTypeFlagBits(result["members"]["handleType"]);}();

[&]() {

        if (result["members"]["pMemoryHostPointerProperties"].contains("null")){
        pMemoryHostPointerProperties=NULL;
        return;
        }
    [&]() {
*(pMemoryHostPointerProperties)=deserialize_VkMemoryHostPointerPropertiesEXT(result["members"]["pMemoryHostPointerProperties"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkCmdWriteBufferMarkerAMD(
VkCommandBuffer commandBuffer,
 VkPipelineStageFlagBits pipelineStage,
 VkBuffer dstBuffer,
 VkDeviceSize dstOffset,
 uint32_t marker
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdWriteBufferMarkerAMD";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pipelineStage"]=[&]() {
    json return_zuwjquI=json({});
    return serialize_VkPipelineStageFlagBits(pipelineStage);}();
data_json["members"]["dstBuffer"]=[&]() {
    json return_CcROAZq=json({});
    return serialize_VkBuffer(dstBuffer);}();
data_json["members"]["dstOffset"]=[&]() {
    json return_Hccaenu=json({});
    return_Hccaenu=[&]() {
    json return_RfkrhBA=json({});
    return serialize_uint64_t(dstOffset);}();return return_Hccaenu;}();
data_json["members"]["marker"]=[&]() {
    json return_pGdkgqF=json({});
    return serialize_uint32_t(marker);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
pipelineStage=deserialize_VkPipelineStageFlagBits(result["members"]["pipelineStage"]);}();
[&]() {
dstBuffer=deserialize_VkBuffer(result["members"]["dstBuffer"]);}();
[&]() {
[&]() {
dstOffset=deserialize_uint64_t(result["members"]["dstOffset"]);}();}();
[&]() {
marker=deserialize_uint32_t(result["members"]["marker"]);}();
}
VkResult vkCreateRenderPass2(
VkDevice device,
 const VkRenderPassCreateInfo2* pCreateInfo,
 const VkAllocationCallbacks* pAllocator,
 VkRenderPass* pRenderPass
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreateRenderPass2";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pCreateInfo"]=[&]() {
    json return_mHsWrMp=json({});
    
        if (pCreateInfo==NULL){
            return_mHsWrMp["null"]=true;
            return return_mHsWrMp;
        }
        return_mHsWrMp=[&]() {
    json return_lxRYfgY=json({});
    return serialize_VkRenderPassCreateInfo2(*pCreateInfo);}();
return return_mHsWrMp;}();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pRenderPass"]=[&]() {
    json return_TnevtBk=json({});
    
        if (pRenderPass==NULL){
            return_TnevtBk["null"]=true;
            return return_TnevtBk;
        }
        return_TnevtBk=[&]() {
    json return_fRCidTE=json({});
    return serialize_VkRenderPass(*pRenderPass);}();
return return_TnevtBk;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();


[&]() {

        if (result["members"]["pRenderPass"].contains("null")){
        pRenderPass=NULL;
        return;
        }
    [&]() {
*(pRenderPass)=deserialize_VkRenderPass(result["members"]["pRenderPass"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                handle_to_parent_handle_struct[(uintptr_t)(*pRenderPass)]=parent;
                
return return_value;
}
VkResult vkCreateRenderPass2KHR(
VkDevice device,
 const VkRenderPassCreateInfo2* pCreateInfo,
 const VkAllocationCallbacks* pAllocator,
 VkRenderPass* pRenderPass
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreateRenderPass2KHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pCreateInfo"]=[&]() {
    json return_mHsWrMp=json({});
    
        if (pCreateInfo==NULL){
            return_mHsWrMp["null"]=true;
            return return_mHsWrMp;
        }
        return_mHsWrMp=[&]() {
    json return_lxRYfgY=json({});
    return serialize_VkRenderPassCreateInfo2(*pCreateInfo);}();
return return_mHsWrMp;}();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pRenderPass"]=[&]() {
    json return_TnevtBk=json({});
    
        if (pRenderPass==NULL){
            return_TnevtBk["null"]=true;
            return return_TnevtBk;
        }
        return_TnevtBk=[&]() {
    json return_fRCidTE=json({});
    return serialize_VkRenderPass(*pRenderPass);}();
return return_TnevtBk;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();


[&]() {

        if (result["members"]["pRenderPass"].contains("null")){
        pRenderPass=NULL;
        return;
        }
    [&]() {
*(pRenderPass)=deserialize_VkRenderPass(result["members"]["pRenderPass"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                handle_to_parent_handle_struct[(uintptr_t)(*pRenderPass)]=parent;
                
return return_value;
}
void vkCmdBeginRenderPass2(
VkCommandBuffer commandBuffer,
 const VkRenderPassBeginInfo*      pRenderPassBegin,
 const VkSubpassBeginInfo*      pSubpassBeginInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdBeginRenderPass2";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pRenderPassBegin"]=[&]() {
    json return_EfjxAfe=json({});
    
        if (pRenderPassBegin==NULL){
            return_EfjxAfe["null"]=true;
            return return_EfjxAfe;
        }
        return_EfjxAfe=[&]() {
    json return_YgBLuHT=json({});
    return serialize_VkRenderPassBeginInfo(*pRenderPassBegin);}();
return return_EfjxAfe;}();
data_json["members"]["pSubpassBeginInfo"]=[&]() {
    json return_CLoPPjt=json({});
    
        if (pSubpassBeginInfo==NULL){
            return_CLoPPjt["null"]=true;
            return return_CLoPPjt;
        }
        return_CLoPPjt=[&]() {
    json return_YJISrcL=json({});
    return serialize_VkSubpassBeginInfo(*pSubpassBeginInfo);}();
return return_CLoPPjt;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();


}
void vkCmdBeginRenderPass2KHR(
VkCommandBuffer commandBuffer,
 const VkRenderPassBeginInfo*      pRenderPassBegin,
 const VkSubpassBeginInfo*      pSubpassBeginInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdBeginRenderPass2KHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pRenderPassBegin"]=[&]() {
    json return_EfjxAfe=json({});
    
        if (pRenderPassBegin==NULL){
            return_EfjxAfe["null"]=true;
            return return_EfjxAfe;
        }
        return_EfjxAfe=[&]() {
    json return_YgBLuHT=json({});
    return serialize_VkRenderPassBeginInfo(*pRenderPassBegin);}();
return return_EfjxAfe;}();
data_json["members"]["pSubpassBeginInfo"]=[&]() {
    json return_CLoPPjt=json({});
    
        if (pSubpassBeginInfo==NULL){
            return_CLoPPjt["null"]=true;
            return return_CLoPPjt;
        }
        return_CLoPPjt=[&]() {
    json return_YJISrcL=json({});
    return serialize_VkSubpassBeginInfo(*pSubpassBeginInfo);}();
return return_CLoPPjt;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();


}
void vkCmdNextSubpass2(
VkCommandBuffer commandBuffer,
 const VkSubpassBeginInfo*      pSubpassBeginInfo,
 const VkSubpassEndInfo*        pSubpassEndInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdNextSubpass2";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pSubpassBeginInfo"]=[&]() {
    json return_XBrSGWX=json({});
    
        if (pSubpassBeginInfo==NULL){
            return_XBrSGWX["null"]=true;
            return return_XBrSGWX;
        }
        return_XBrSGWX=[&]() {
    json return_xIWLlee=json({});
    return serialize_VkSubpassBeginInfo(*pSubpassBeginInfo);}();
return return_XBrSGWX;}();
data_json["members"]["pSubpassEndInfo"]=[&]() {
    json return_pzJYPYs=json({});
    
        if (pSubpassEndInfo==NULL){
            return_pzJYPYs["null"]=true;
            return return_pzJYPYs;
        }
        return_pzJYPYs=[&]() {
    json return_yCxVMln=json({});
    return serialize_VkSubpassEndInfo(*pSubpassEndInfo);}();
return return_pzJYPYs;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();


}
void vkCmdNextSubpass2KHR(
VkCommandBuffer commandBuffer,
 const VkSubpassBeginInfo*      pSubpassBeginInfo,
 const VkSubpassEndInfo*        pSubpassEndInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdNextSubpass2KHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pSubpassBeginInfo"]=[&]() {
    json return_XBrSGWX=json({});
    
        if (pSubpassBeginInfo==NULL){
            return_XBrSGWX["null"]=true;
            return return_XBrSGWX;
        }
        return_XBrSGWX=[&]() {
    json return_xIWLlee=json({});
    return serialize_VkSubpassBeginInfo(*pSubpassBeginInfo);}();
return return_XBrSGWX;}();
data_json["members"]["pSubpassEndInfo"]=[&]() {
    json return_pzJYPYs=json({});
    
        if (pSubpassEndInfo==NULL){
            return_pzJYPYs["null"]=true;
            return return_pzJYPYs;
        }
        return_pzJYPYs=[&]() {
    json return_yCxVMln=json({});
    return serialize_VkSubpassEndInfo(*pSubpassEndInfo);}();
return return_pzJYPYs;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();


}
void vkCmdEndRenderPass2(
VkCommandBuffer commandBuffer,
 const VkSubpassEndInfo*        pSubpassEndInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdEndRenderPass2";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pSubpassEndInfo"]=[&]() {
    json return_pzJYPYs=json({});
    
        if (pSubpassEndInfo==NULL){
            return_pzJYPYs["null"]=true;
            return return_pzJYPYs;
        }
        return_pzJYPYs=[&]() {
    json return_yCxVMln=json({});
    return serialize_VkSubpassEndInfo(*pSubpassEndInfo);}();
return return_pzJYPYs;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();

}
void vkCmdEndRenderPass2KHR(
VkCommandBuffer commandBuffer,
 const VkSubpassEndInfo*        pSubpassEndInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdEndRenderPass2KHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pSubpassEndInfo"]=[&]() {
    json return_pzJYPYs=json({});
    
        if (pSubpassEndInfo==NULL){
            return_pzJYPYs["null"]=true;
            return return_pzJYPYs;
        }
        return_pzJYPYs=[&]() {
    json return_yCxVMln=json({});
    return serialize_VkSubpassEndInfo(*pSubpassEndInfo);}();
return return_pzJYPYs;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();

}
VkResult vkGetSemaphoreCounterValue(
VkDevice device,
 VkSemaphore semaphore,
 uint64_t* pValue
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetSemaphoreCounterValue";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["semaphore"]=[&]() {
    json return_NeBBGDW=json({});
    return serialize_VkSemaphore(semaphore);}();
data_json["members"]["pValue"]=[&]() {
    json return_SkZiOMx=json({});
    
        if (pValue==NULL){
            return_SkZiOMx["null"]=true;
            return return_SkZiOMx;
        }
        return_SkZiOMx=[&]() {
    json return_RtvooWd=json({});
    return serialize_uint64_t(*pValue);}();
return return_SkZiOMx;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
semaphore=deserialize_VkSemaphore(result["members"]["semaphore"]);}();
[&]() {

        if (result["members"]["pValue"].contains("null")){
        pValue=NULL;
        return;
        }
    [&]() {
*(pValue)=deserialize_uint64_t(result["members"]["pValue"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkGetSemaphoreCounterValueKHR(
VkDevice device,
 VkSemaphore semaphore,
 uint64_t* pValue
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetSemaphoreCounterValueKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["semaphore"]=[&]() {
    json return_NeBBGDW=json({});
    return serialize_VkSemaphore(semaphore);}();
data_json["members"]["pValue"]=[&]() {
    json return_SkZiOMx=json({});
    
        if (pValue==NULL){
            return_SkZiOMx["null"]=true;
            return return_SkZiOMx;
        }
        return_SkZiOMx=[&]() {
    json return_RtvooWd=json({});
    return serialize_uint64_t(*pValue);}();
return return_SkZiOMx;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
semaphore=deserialize_VkSemaphore(result["members"]["semaphore"]);}();
[&]() {

        if (result["members"]["pValue"].contains("null")){
        pValue=NULL;
        return;
        }
    [&]() {
*(pValue)=deserialize_uint64_t(result["members"]["pValue"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkWaitSemaphores(
VkDevice device,
 const VkSemaphoreWaitInfo* pWaitInfo,
 uint64_t timeout
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkWaitSemaphores";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pWaitInfo"]=[&]() {
    json return_GcqlCML=json({});
    
        if (pWaitInfo==NULL){
            return_GcqlCML["null"]=true;
            return return_GcqlCML;
        }
        return_GcqlCML=[&]() {
    json return_wwBbQyu=json({});
    return serialize_VkSemaphoreWaitInfo(*pWaitInfo);}();
return return_GcqlCML;}();
data_json["members"]["timeout"]=[&]() {
    json return_CYRKadv=json({});
    return serialize_uint64_t(timeout);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

[&]() {
timeout=deserialize_uint64_t(result["members"]["timeout"]);}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkWaitSemaphoresKHR(
VkDevice device,
 const VkSemaphoreWaitInfo* pWaitInfo,
 uint64_t timeout
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkWaitSemaphoresKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pWaitInfo"]=[&]() {
    json return_GcqlCML=json({});
    
        if (pWaitInfo==NULL){
            return_GcqlCML["null"]=true;
            return return_GcqlCML;
        }
        return_GcqlCML=[&]() {
    json return_wwBbQyu=json({});
    return serialize_VkSemaphoreWaitInfo(*pWaitInfo);}();
return return_GcqlCML;}();
data_json["members"]["timeout"]=[&]() {
    json return_CYRKadv=json({});
    return serialize_uint64_t(timeout);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

[&]() {
timeout=deserialize_uint64_t(result["members"]["timeout"]);}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkSignalSemaphore(
VkDevice device,
 const VkSemaphoreSignalInfo* pSignalInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkSignalSemaphore";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pSignalInfo"]=[&]() {
    json return_HVHlwUx=json({});
    
        if (pSignalInfo==NULL){
            return_HVHlwUx["null"]=true;
            return return_HVHlwUx;
        }
        return_HVHlwUx=[&]() {
    json return_XZuTQco=json({});
    return serialize_VkSemaphoreSignalInfo(*pSignalInfo);}();
return return_HVHlwUx;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkSignalSemaphoreKHR(
VkDevice device,
 const VkSemaphoreSignalInfo* pSignalInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkSignalSemaphoreKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pSignalInfo"]=[&]() {
    json return_HVHlwUx=json({});
    
        if (pSignalInfo==NULL){
            return_HVHlwUx["null"]=true;
            return return_HVHlwUx;
        }
        return_HVHlwUx=[&]() {
    json return_XZuTQco=json({});
    return serialize_VkSemaphoreSignalInfo(*pSignalInfo);}();
return return_HVHlwUx;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkCmdDrawIndirectCount(
VkCommandBuffer commandBuffer,
 VkBuffer buffer,
 VkDeviceSize offset,
 VkBuffer countBuffer,
 VkDeviceSize countBufferOffset,
 uint32_t maxDrawCount,
 uint32_t stride
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdDrawIndirectCount";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["buffer"]=[&]() {
    json return_Fjwvwzv=json({});
    return serialize_VkBuffer(buffer);}();
data_json["members"]["offset"]=[&]() {
    json return_vTtZMhj=json({});
    return_vTtZMhj=[&]() {
    json return_eEWibmR=json({});
    return serialize_uint64_t(offset);}();return return_vTtZMhj;}();
data_json["members"]["countBuffer"]=[&]() {
    json return_thNJVdM=json({});
    return serialize_VkBuffer(countBuffer);}();
data_json["members"]["countBufferOffset"]=[&]() {
    json return_TrBaFUo=json({});
    return_TrBaFUo=[&]() {
    json return_xhKrPKX=json({});
    return serialize_uint64_t(countBufferOffset);}();return return_TrBaFUo;}();
data_json["members"]["maxDrawCount"]=[&]() {
    json return_HpcjsyV=json({});
    return serialize_uint32_t(maxDrawCount);}();
data_json["members"]["stride"]=[&]() {
    json return_TkKksoe=json({});
    return serialize_uint32_t(stride);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
buffer=deserialize_VkBuffer(result["members"]["buffer"]);}();
[&]() {
[&]() {
offset=deserialize_uint64_t(result["members"]["offset"]);}();}();
[&]() {
countBuffer=deserialize_VkBuffer(result["members"]["countBuffer"]);}();
[&]() {
[&]() {
countBufferOffset=deserialize_uint64_t(result["members"]["countBufferOffset"]);}();}();
[&]() {
maxDrawCount=deserialize_uint32_t(result["members"]["maxDrawCount"]);}();
[&]() {
stride=deserialize_uint32_t(result["members"]["stride"]);}();
}
void vkCmdDrawIndirectCountKHR(
VkCommandBuffer commandBuffer,
 VkBuffer buffer,
 VkDeviceSize offset,
 VkBuffer countBuffer,
 VkDeviceSize countBufferOffset,
 uint32_t maxDrawCount,
 uint32_t stride
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdDrawIndirectCountKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["buffer"]=[&]() {
    json return_Fjwvwzv=json({});
    return serialize_VkBuffer(buffer);}();
data_json["members"]["offset"]=[&]() {
    json return_vTtZMhj=json({});
    return_vTtZMhj=[&]() {
    json return_eEWibmR=json({});
    return serialize_uint64_t(offset);}();return return_vTtZMhj;}();
data_json["members"]["countBuffer"]=[&]() {
    json return_thNJVdM=json({});
    return serialize_VkBuffer(countBuffer);}();
data_json["members"]["countBufferOffset"]=[&]() {
    json return_TrBaFUo=json({});
    return_TrBaFUo=[&]() {
    json return_xhKrPKX=json({});
    return serialize_uint64_t(countBufferOffset);}();return return_TrBaFUo;}();
data_json["members"]["maxDrawCount"]=[&]() {
    json return_HpcjsyV=json({});
    return serialize_uint32_t(maxDrawCount);}();
data_json["members"]["stride"]=[&]() {
    json return_TkKksoe=json({});
    return serialize_uint32_t(stride);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
buffer=deserialize_VkBuffer(result["members"]["buffer"]);}();
[&]() {
[&]() {
offset=deserialize_uint64_t(result["members"]["offset"]);}();}();
[&]() {
countBuffer=deserialize_VkBuffer(result["members"]["countBuffer"]);}();
[&]() {
[&]() {
countBufferOffset=deserialize_uint64_t(result["members"]["countBufferOffset"]);}();}();
[&]() {
maxDrawCount=deserialize_uint32_t(result["members"]["maxDrawCount"]);}();
[&]() {
stride=deserialize_uint32_t(result["members"]["stride"]);}();
}
void vkCmdDrawIndirectCountAMD(
VkCommandBuffer commandBuffer,
 VkBuffer buffer,
 VkDeviceSize offset,
 VkBuffer countBuffer,
 VkDeviceSize countBufferOffset,
 uint32_t maxDrawCount,
 uint32_t stride
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdDrawIndirectCountAMD";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["buffer"]=[&]() {
    json return_Fjwvwzv=json({});
    return serialize_VkBuffer(buffer);}();
data_json["members"]["offset"]=[&]() {
    json return_vTtZMhj=json({});
    return_vTtZMhj=[&]() {
    json return_eEWibmR=json({});
    return serialize_uint64_t(offset);}();return return_vTtZMhj;}();
data_json["members"]["countBuffer"]=[&]() {
    json return_thNJVdM=json({});
    return serialize_VkBuffer(countBuffer);}();
data_json["members"]["countBufferOffset"]=[&]() {
    json return_TrBaFUo=json({});
    return_TrBaFUo=[&]() {
    json return_xhKrPKX=json({});
    return serialize_uint64_t(countBufferOffset);}();return return_TrBaFUo;}();
data_json["members"]["maxDrawCount"]=[&]() {
    json return_HpcjsyV=json({});
    return serialize_uint32_t(maxDrawCount);}();
data_json["members"]["stride"]=[&]() {
    json return_TkKksoe=json({});
    return serialize_uint32_t(stride);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
buffer=deserialize_VkBuffer(result["members"]["buffer"]);}();
[&]() {
[&]() {
offset=deserialize_uint64_t(result["members"]["offset"]);}();}();
[&]() {
countBuffer=deserialize_VkBuffer(result["members"]["countBuffer"]);}();
[&]() {
[&]() {
countBufferOffset=deserialize_uint64_t(result["members"]["countBufferOffset"]);}();}();
[&]() {
maxDrawCount=deserialize_uint32_t(result["members"]["maxDrawCount"]);}();
[&]() {
stride=deserialize_uint32_t(result["members"]["stride"]);}();
}
void vkCmdDrawIndexedIndirectCount(
VkCommandBuffer commandBuffer,
 VkBuffer buffer,
 VkDeviceSize offset,
 VkBuffer countBuffer,
 VkDeviceSize countBufferOffset,
 uint32_t maxDrawCount,
 uint32_t stride
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdDrawIndexedIndirectCount";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["buffer"]=[&]() {
    json return_Fjwvwzv=json({});
    return serialize_VkBuffer(buffer);}();
data_json["members"]["offset"]=[&]() {
    json return_vTtZMhj=json({});
    return_vTtZMhj=[&]() {
    json return_eEWibmR=json({});
    return serialize_uint64_t(offset);}();return return_vTtZMhj;}();
data_json["members"]["countBuffer"]=[&]() {
    json return_thNJVdM=json({});
    return serialize_VkBuffer(countBuffer);}();
data_json["members"]["countBufferOffset"]=[&]() {
    json return_TrBaFUo=json({});
    return_TrBaFUo=[&]() {
    json return_xhKrPKX=json({});
    return serialize_uint64_t(countBufferOffset);}();return return_TrBaFUo;}();
data_json["members"]["maxDrawCount"]=[&]() {
    json return_HpcjsyV=json({});
    return serialize_uint32_t(maxDrawCount);}();
data_json["members"]["stride"]=[&]() {
    json return_TkKksoe=json({});
    return serialize_uint32_t(stride);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
buffer=deserialize_VkBuffer(result["members"]["buffer"]);}();
[&]() {
[&]() {
offset=deserialize_uint64_t(result["members"]["offset"]);}();}();
[&]() {
countBuffer=deserialize_VkBuffer(result["members"]["countBuffer"]);}();
[&]() {
[&]() {
countBufferOffset=deserialize_uint64_t(result["members"]["countBufferOffset"]);}();}();
[&]() {
maxDrawCount=deserialize_uint32_t(result["members"]["maxDrawCount"]);}();
[&]() {
stride=deserialize_uint32_t(result["members"]["stride"]);}();
}
void vkCmdDrawIndexedIndirectCountKHR(
VkCommandBuffer commandBuffer,
 VkBuffer buffer,
 VkDeviceSize offset,
 VkBuffer countBuffer,
 VkDeviceSize countBufferOffset,
 uint32_t maxDrawCount,
 uint32_t stride
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdDrawIndexedIndirectCountKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["buffer"]=[&]() {
    json return_Fjwvwzv=json({});
    return serialize_VkBuffer(buffer);}();
data_json["members"]["offset"]=[&]() {
    json return_vTtZMhj=json({});
    return_vTtZMhj=[&]() {
    json return_eEWibmR=json({});
    return serialize_uint64_t(offset);}();return return_vTtZMhj;}();
data_json["members"]["countBuffer"]=[&]() {
    json return_thNJVdM=json({});
    return serialize_VkBuffer(countBuffer);}();
data_json["members"]["countBufferOffset"]=[&]() {
    json return_TrBaFUo=json({});
    return_TrBaFUo=[&]() {
    json return_xhKrPKX=json({});
    return serialize_uint64_t(countBufferOffset);}();return return_TrBaFUo;}();
data_json["members"]["maxDrawCount"]=[&]() {
    json return_HpcjsyV=json({});
    return serialize_uint32_t(maxDrawCount);}();
data_json["members"]["stride"]=[&]() {
    json return_TkKksoe=json({});
    return serialize_uint32_t(stride);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
buffer=deserialize_VkBuffer(result["members"]["buffer"]);}();
[&]() {
[&]() {
offset=deserialize_uint64_t(result["members"]["offset"]);}();}();
[&]() {
countBuffer=deserialize_VkBuffer(result["members"]["countBuffer"]);}();
[&]() {
[&]() {
countBufferOffset=deserialize_uint64_t(result["members"]["countBufferOffset"]);}();}();
[&]() {
maxDrawCount=deserialize_uint32_t(result["members"]["maxDrawCount"]);}();
[&]() {
stride=deserialize_uint32_t(result["members"]["stride"]);}();
}
void vkCmdDrawIndexedIndirectCountAMD(
VkCommandBuffer commandBuffer,
 VkBuffer buffer,
 VkDeviceSize offset,
 VkBuffer countBuffer,
 VkDeviceSize countBufferOffset,
 uint32_t maxDrawCount,
 uint32_t stride
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdDrawIndexedIndirectCountAMD";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["buffer"]=[&]() {
    json return_Fjwvwzv=json({});
    return serialize_VkBuffer(buffer);}();
data_json["members"]["offset"]=[&]() {
    json return_vTtZMhj=json({});
    return_vTtZMhj=[&]() {
    json return_eEWibmR=json({});
    return serialize_uint64_t(offset);}();return return_vTtZMhj;}();
data_json["members"]["countBuffer"]=[&]() {
    json return_thNJVdM=json({});
    return serialize_VkBuffer(countBuffer);}();
data_json["members"]["countBufferOffset"]=[&]() {
    json return_TrBaFUo=json({});
    return_TrBaFUo=[&]() {
    json return_xhKrPKX=json({});
    return serialize_uint64_t(countBufferOffset);}();return return_TrBaFUo;}();
data_json["members"]["maxDrawCount"]=[&]() {
    json return_HpcjsyV=json({});
    return serialize_uint32_t(maxDrawCount);}();
data_json["members"]["stride"]=[&]() {
    json return_TkKksoe=json({});
    return serialize_uint32_t(stride);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
buffer=deserialize_VkBuffer(result["members"]["buffer"]);}();
[&]() {
[&]() {
offset=deserialize_uint64_t(result["members"]["offset"]);}();}();
[&]() {
countBuffer=deserialize_VkBuffer(result["members"]["countBuffer"]);}();
[&]() {
[&]() {
countBufferOffset=deserialize_uint64_t(result["members"]["countBufferOffset"]);}();}();
[&]() {
maxDrawCount=deserialize_uint32_t(result["members"]["maxDrawCount"]);}();
[&]() {
stride=deserialize_uint32_t(result["members"]["stride"]);}();
}
void vkCmdSetCheckpointNV(
VkCommandBuffer commandBuffer,
 const void* pCheckpointMarker
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetCheckpointNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pCheckpointMarker"]=[&]() {
    json return_qCRgzCw=json({});
    
        if (pCheckpointMarker==NULL){
            return_qCRgzCw["null"]=true;
            return return_qCRgzCw;
        }
        return serialize_void_p(pCheckpointMarker);
}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();

}
void vkGetQueueCheckpointDataNV(
VkQueue queue,
 uint32_t* pCheckpointDataCount,
 VkCheckpointDataNV* pCheckpointData
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetQueueCheckpointDataNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)queue];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["queue"]=[&]() {
    json return_KYhcIBS=json({});
    return serialize_VkQueue(queue);}();
data_json["members"]["pCheckpointDataCount"]=[&]() {
    json return_eEWDbVZ=json({});
    
        if (pCheckpointDataCount==NULL){
            return_eEWDbVZ["null"]=true;
            return return_eEWDbVZ;
        }
        return_eEWDbVZ=[&]() {
    json return_UKDbbYU=json({});
    return serialize_uint32_t(*pCheckpointDataCount);}();
return return_eEWDbVZ;}();
data_json["members"]["pCheckpointData"]=[&]() {
    json return_mSstNmc=json({});
    
        if (pCheckpointData==NULL){
            return_mSstNmc["null"]=true;
            return return_mSstNmc;
        }
        
        return_mSstNmc["members"]={};
        for(int mSstNmc=0; mSstNmc < *pCheckpointDataCount; mSstNmc++){
            json temp;
            temp=[&]() {
    json return_WCHKdpS=json({});
    return serialize_VkCheckpointDataNV(pCheckpointData[mSstNmc]);}();
            return_mSstNmc["members"].push_back(temp);
        }
        return return_mSstNmc;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
queue=deserialize_VkQueue(result["members"]["queue"]);}();
[&]() {

        if (result["members"]["pCheckpointDataCount"].contains("null")){
        pCheckpointDataCount=NULL;
        return;
        }
    [&]() {
*(pCheckpointDataCount)=deserialize_uint32_t(result["members"]["pCheckpointDataCount"]);}();
}();
[&]() {

        if (result["members"]["pCheckpointData"].contains("null")){
        pCheckpointData=NULL;
        return;
        }
    
        for (int kXsnMrC=0; kXsnMrC < *pCheckpointDataCount; kXsnMrC++){
            [&]() {
pCheckpointData[kXsnMrC]=deserialize_VkCheckpointDataNV(result["members"]["pCheckpointData"]["members"][kXsnMrC]);}();;
        }
        }();
}
void vkCmdBindTransformFeedbackBuffersEXT(
VkCommandBuffer commandBuffer,
 uint32_t firstBinding,
 uint32_t bindingCount,
 const VkBuffer* pBuffers,
 const VkDeviceSize* pOffsets,
 const VkDeviceSize* pSizes
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdBindTransformFeedbackBuffersEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["firstBinding"]=[&]() {
    json return_JzarCRw=json({});
    return serialize_uint32_t(firstBinding);}();
data_json["members"]["bindingCount"]=[&]() {
    json return_KKQzFnF=json({});
    return serialize_uint32_t(bindingCount);}();
data_json["members"]["pBuffers"]=[&]() {
    json return_mLfEgSk=json({});
    
        if (pBuffers==NULL){
            return_mLfEgSk["null"]=true;
            return return_mLfEgSk;
        }
        
        return_mLfEgSk["members"]={};
        for(int mLfEgSk=0; mLfEgSk < bindingCount; mLfEgSk++){
            json temp;
            temp=[&]() {
    json return_sdCvutr=json({});
    return serialize_VkBuffer(pBuffers[mLfEgSk]);}();
            return_mLfEgSk["members"].push_back(temp);
        }
        return return_mLfEgSk;
        }();
data_json["members"]["pOffsets"]=[&]() {
    json return_esRfpyF=json({});
    
        if (pOffsets==NULL){
            return_esRfpyF["null"]=true;
            return return_esRfpyF;
        }
        
        return_esRfpyF["members"]={};
        for(int esRfpyF=0; esRfpyF < bindingCount; esRfpyF++){
            json temp;
            temp=[&]() {
    json return_sWZhkpG=json({});
    return_sWZhkpG=[&]() {
    json return_hRuQZpF=json({});
    return serialize_uint64_t(pOffsets[esRfpyF]);}();return return_sWZhkpG;}();
            return_esRfpyF["members"].push_back(temp);
        }
        return return_esRfpyF;
        }();
data_json["members"]["pSizes"]=[&]() {
    json return_mVDKkyS=json({});
    
        if (pSizes==NULL){
            return_mVDKkyS["null"]=true;
            return return_mVDKkyS;
        }
        
        return_mVDKkyS["members"]={};
        for(int mVDKkyS=0; mVDKkyS < bindingCount; mVDKkyS++){
            json temp;
            temp=[&]() {
    json return_lOVNMLW=json({});
    return_lOVNMLW=[&]() {
    json return_kZliHYx=json({});
    return serialize_uint64_t(pSizes[mVDKkyS]);}();return return_lOVNMLW;}();
            return_mVDKkyS["members"].push_back(temp);
        }
        return return_mVDKkyS;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
firstBinding=deserialize_uint32_t(result["members"]["firstBinding"]);}();
[&]() {
bindingCount=deserialize_uint32_t(result["members"]["bindingCount"]);}();



}
void vkCmdBeginTransformFeedbackEXT(
VkCommandBuffer commandBuffer,
 uint32_t firstCounterBuffer,
 uint32_t counterBufferCount,
 const VkBuffer* pCounterBuffers,
 const VkDeviceSize* pCounterBufferOffsets
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdBeginTransformFeedbackEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["firstCounterBuffer"]=[&]() {
    json return_geBeGPE=json({});
    return serialize_uint32_t(firstCounterBuffer);}();
data_json["members"]["counterBufferCount"]=[&]() {
    json return_zhOOlbT=json({});
    return serialize_uint32_t(counterBufferCount);}();
data_json["members"]["pCounterBuffers"]=[&]() {
    json return_HOIiIpu=json({});
    
        if (pCounterBuffers==NULL){
            return_HOIiIpu["null"]=true;
            return return_HOIiIpu;
        }
        
        return_HOIiIpu["members"]={};
        for(int HOIiIpu=0; HOIiIpu < counterBufferCount; HOIiIpu++){
            json temp;
            temp=[&]() {
    json return_lTaMwCI=json({});
    return serialize_VkBuffer(pCounterBuffers[HOIiIpu]);}();
            return_HOIiIpu["members"].push_back(temp);
        }
        return return_HOIiIpu;
        }();
data_json["members"]["pCounterBufferOffsets"]=[&]() {
    json return_cSdHcxS=json({});
    
        if (pCounterBufferOffsets==NULL){
            return_cSdHcxS["null"]=true;
            return return_cSdHcxS;
        }
        
        return_cSdHcxS["members"]={};
        for(int cSdHcxS=0; cSdHcxS < counterBufferCount; cSdHcxS++){
            json temp;
            temp=[&]() {
    json return_gBEMEmP=json({});
    return_gBEMEmP=[&]() {
    json return_UCHxNRw=json({});
    return serialize_uint64_t(pCounterBufferOffsets[cSdHcxS]);}();return return_gBEMEmP;}();
            return_cSdHcxS["members"].push_back(temp);
        }
        return return_cSdHcxS;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
firstCounterBuffer=deserialize_uint32_t(result["members"]["firstCounterBuffer"]);}();
[&]() {
counterBufferCount=deserialize_uint32_t(result["members"]["counterBufferCount"]);}();


}
void vkCmdEndTransformFeedbackEXT(
VkCommandBuffer commandBuffer,
 uint32_t firstCounterBuffer,
 uint32_t counterBufferCount,
 const VkBuffer* pCounterBuffers,
 const VkDeviceSize* pCounterBufferOffsets
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdEndTransformFeedbackEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["firstCounterBuffer"]=[&]() {
    json return_geBeGPE=json({});
    return serialize_uint32_t(firstCounterBuffer);}();
data_json["members"]["counterBufferCount"]=[&]() {
    json return_zhOOlbT=json({});
    return serialize_uint32_t(counterBufferCount);}();
data_json["members"]["pCounterBuffers"]=[&]() {
    json return_HOIiIpu=json({});
    
        if (pCounterBuffers==NULL){
            return_HOIiIpu["null"]=true;
            return return_HOIiIpu;
        }
        
        return_HOIiIpu["members"]={};
        for(int HOIiIpu=0; HOIiIpu < counterBufferCount; HOIiIpu++){
            json temp;
            temp=[&]() {
    json return_lTaMwCI=json({});
    return serialize_VkBuffer(pCounterBuffers[HOIiIpu]);}();
            return_HOIiIpu["members"].push_back(temp);
        }
        return return_HOIiIpu;
        }();
data_json["members"]["pCounterBufferOffsets"]=[&]() {
    json return_cSdHcxS=json({});
    
        if (pCounterBufferOffsets==NULL){
            return_cSdHcxS["null"]=true;
            return return_cSdHcxS;
        }
        
        return_cSdHcxS["members"]={};
        for(int cSdHcxS=0; cSdHcxS < counterBufferCount; cSdHcxS++){
            json temp;
            temp=[&]() {
    json return_gBEMEmP=json({});
    return_gBEMEmP=[&]() {
    json return_UCHxNRw=json({});
    return serialize_uint64_t(pCounterBufferOffsets[cSdHcxS]);}();return return_gBEMEmP;}();
            return_cSdHcxS["members"].push_back(temp);
        }
        return return_cSdHcxS;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
firstCounterBuffer=deserialize_uint32_t(result["members"]["firstCounterBuffer"]);}();
[&]() {
counterBufferCount=deserialize_uint32_t(result["members"]["counterBufferCount"]);}();


}
void vkCmdBeginQueryIndexedEXT(
VkCommandBuffer commandBuffer,
 VkQueryPool queryPool,
 uint32_t query,
 VkQueryControlFlags flags,
 uint32_t index
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdBeginQueryIndexedEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["queryPool"]=[&]() {
    json return_hLGHCzh=json({});
    return serialize_VkQueryPool(queryPool);}();
data_json["members"]["query"]=[&]() {
    json return_NtquCQL=json({});
    return serialize_uint32_t(query);}();
data_json["members"]["flags"]=[&]() {
    json return_TfeulOL=json({});
    return serialize_VkQueryControlFlags(flags);}();
data_json["members"]["index"]=[&]() {
    json return_dMdKGtU=json({});
    return serialize_uint32_t(index);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
queryPool=deserialize_VkQueryPool(result["members"]["queryPool"]);}();
[&]() {
query=deserialize_uint32_t(result["members"]["query"]);}();
[&]() {
flags=deserialize_VkQueryControlFlags(result["members"]["flags"]);}();
[&]() {
index=deserialize_uint32_t(result["members"]["index"]);}();
}
void vkCmdEndQueryIndexedEXT(
VkCommandBuffer commandBuffer,
 VkQueryPool queryPool,
 uint32_t query,
 uint32_t index
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdEndQueryIndexedEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["queryPool"]=[&]() {
    json return_hLGHCzh=json({});
    return serialize_VkQueryPool(queryPool);}();
data_json["members"]["query"]=[&]() {
    json return_NtquCQL=json({});
    return serialize_uint32_t(query);}();
data_json["members"]["index"]=[&]() {
    json return_dMdKGtU=json({});
    return serialize_uint32_t(index);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
queryPool=deserialize_VkQueryPool(result["members"]["queryPool"]);}();
[&]() {
query=deserialize_uint32_t(result["members"]["query"]);}();
[&]() {
index=deserialize_uint32_t(result["members"]["index"]);}();
}
void vkCmdDrawIndirectByteCountEXT(
VkCommandBuffer commandBuffer,
 uint32_t instanceCount,
 uint32_t firstInstance,
 VkBuffer counterBuffer,
 VkDeviceSize counterBufferOffset,
 uint32_t counterOffset,
 uint32_t vertexStride
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdDrawIndirectByteCountEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["instanceCount"]=[&]() {
    json return_esOolQK=json({});
    return serialize_uint32_t(instanceCount);}();
data_json["members"]["firstInstance"]=[&]() {
    json return_tzucUME=json({});
    return serialize_uint32_t(firstInstance);}();
data_json["members"]["counterBuffer"]=[&]() {
    json return_rcCIiHq=json({});
    return serialize_VkBuffer(counterBuffer);}();
data_json["members"]["counterBufferOffset"]=[&]() {
    json return_zztdzmN=json({});
    return_zztdzmN=[&]() {
    json return_ngurqzU=json({});
    return serialize_uint64_t(counterBufferOffset);}();return return_zztdzmN;}();
data_json["members"]["counterOffset"]=[&]() {
    json return_pkGqJHc=json({});
    return serialize_uint32_t(counterOffset);}();
data_json["members"]["vertexStride"]=[&]() {
    json return_QTjdEBY=json({});
    return serialize_uint32_t(vertexStride);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
instanceCount=deserialize_uint32_t(result["members"]["instanceCount"]);}();
[&]() {
firstInstance=deserialize_uint32_t(result["members"]["firstInstance"]);}();
[&]() {
counterBuffer=deserialize_VkBuffer(result["members"]["counterBuffer"]);}();
[&]() {
[&]() {
counterBufferOffset=deserialize_uint64_t(result["members"]["counterBufferOffset"]);}();}();
[&]() {
counterOffset=deserialize_uint32_t(result["members"]["counterOffset"]);}();
[&]() {
vertexStride=deserialize_uint32_t(result["members"]["vertexStride"]);}();
}
void vkCmdSetExclusiveScissorNV(
VkCommandBuffer commandBuffer,
 uint32_t firstExclusiveScissor,
 uint32_t exclusiveScissorCount,
 const VkRect2D* pExclusiveScissors
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetExclusiveScissorNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["firstExclusiveScissor"]=[&]() {
    json return_eglWzBy=json({});
    return serialize_uint32_t(firstExclusiveScissor);}();
data_json["members"]["exclusiveScissorCount"]=[&]() {
    json return_BELFdqe=json({});
    return serialize_uint32_t(exclusiveScissorCount);}();
data_json["members"]["pExclusiveScissors"]=[&]() {
    json return_SriNWmm=json({});
    
        if (pExclusiveScissors==NULL){
            return_SriNWmm["null"]=true;
            return return_SriNWmm;
        }
        
        return_SriNWmm["members"]={};
        for(int SriNWmm=0; SriNWmm < exclusiveScissorCount; SriNWmm++){
            json temp;
            temp=[&]() {
    json return_JjSKlxj=json({});
    return serialize_VkRect2D(pExclusiveScissors[SriNWmm]);}();
            return_SriNWmm["members"].push_back(temp);
        }
        return return_SriNWmm;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
firstExclusiveScissor=deserialize_uint32_t(result["members"]["firstExclusiveScissor"]);}();
[&]() {
exclusiveScissorCount=deserialize_uint32_t(result["members"]["exclusiveScissorCount"]);}();

}
void vkCmdSetExclusiveScissorEnableNV(
VkCommandBuffer commandBuffer,
 uint32_t firstExclusiveScissor,
 uint32_t exclusiveScissorCount,
 const VkBool32* pExclusiveScissorEnables
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetExclusiveScissorEnableNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["firstExclusiveScissor"]=[&]() {
    json return_eglWzBy=json({});
    return serialize_uint32_t(firstExclusiveScissor);}();
data_json["members"]["exclusiveScissorCount"]=[&]() {
    json return_BELFdqe=json({});
    return serialize_uint32_t(exclusiveScissorCount);}();
data_json["members"]["pExclusiveScissorEnables"]=[&]() {
    json return_AgWOaGE=json({});
    
        if (pExclusiveScissorEnables==NULL){
            return_AgWOaGE["null"]=true;
            return return_AgWOaGE;
        }
        
        return_AgWOaGE["members"]={};
        for(int AgWOaGE=0; AgWOaGE < exclusiveScissorCount; AgWOaGE++){
            json temp;
            temp=[&]() {
    json return_rwjsvth=json({});
    return_rwjsvth=[&]() {
    json return_fFMxzOA=json({});
    return serialize_uint32_t(pExclusiveScissorEnables[AgWOaGE]);}();return return_rwjsvth;}();
            return_AgWOaGE["members"].push_back(temp);
        }
        return return_AgWOaGE;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
firstExclusiveScissor=deserialize_uint32_t(result["members"]["firstExclusiveScissor"]);}();
[&]() {
exclusiveScissorCount=deserialize_uint32_t(result["members"]["exclusiveScissorCount"]);}();

}
void vkCmdBindShadingRateImageNV(
VkCommandBuffer commandBuffer,
 VkImageView imageView,
 VkImageLayout imageLayout
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdBindShadingRateImageNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["imageView"]=[&]() {
    json return_TXEDCEI=json({});
    return serialize_VkImageView(imageView);}();
data_json["members"]["imageLayout"]=[&]() {
    json return_VWPBLHf=json({});
    return serialize_VkImageLayout(imageLayout);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
imageView=deserialize_VkImageView(result["members"]["imageView"]);}();
[&]() {
imageLayout=deserialize_VkImageLayout(result["members"]["imageLayout"]);}();
}
void vkCmdSetViewportShadingRatePaletteNV(
VkCommandBuffer commandBuffer,
 uint32_t firstViewport,
 uint32_t viewportCount,
 const VkShadingRatePaletteNV* pShadingRatePalettes
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetViewportShadingRatePaletteNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["firstViewport"]=[&]() {
    json return_zZVDUCF=json({});
    return serialize_uint32_t(firstViewport);}();
data_json["members"]["viewportCount"]=[&]() {
    json return_pDFybJm=json({});
    return serialize_uint32_t(viewportCount);}();
data_json["members"]["pShadingRatePalettes"]=[&]() {
    json return_fXiOHDa=json({});
    
        if (pShadingRatePalettes==NULL){
            return_fXiOHDa["null"]=true;
            return return_fXiOHDa;
        }
        
        return_fXiOHDa["members"]={};
        for(int fXiOHDa=0; fXiOHDa < viewportCount; fXiOHDa++){
            json temp;
            temp=[&]() {
    json return_kCMraaK=json({});
    return serialize_VkShadingRatePaletteNV(pShadingRatePalettes[fXiOHDa]);}();
            return_fXiOHDa["members"].push_back(temp);
        }
        return return_fXiOHDa;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
firstViewport=deserialize_uint32_t(result["members"]["firstViewport"]);}();
[&]() {
viewportCount=deserialize_uint32_t(result["members"]["viewportCount"]);}();

}
void vkCmdSetCoarseSampleOrderNV(
VkCommandBuffer commandBuffer,
 VkCoarseSampleOrderTypeNV sampleOrderType,
 uint32_t customSampleOrderCount,
 const VkCoarseSampleOrderCustomNV* pCustomSampleOrders
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetCoarseSampleOrderNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["sampleOrderType"]=[&]() {
    json return_vDLCHIp=json({});
    return serialize_VkCoarseSampleOrderTypeNV(sampleOrderType);}();
data_json["members"]["customSampleOrderCount"]=[&]() {
    json return_RgkihMk=json({});
    return serialize_uint32_t(customSampleOrderCount);}();
data_json["members"]["pCustomSampleOrders"]=[&]() {
    json return_bdDmLBo=json({});
    
        if (pCustomSampleOrders==NULL){
            return_bdDmLBo["null"]=true;
            return return_bdDmLBo;
        }
        
        return_bdDmLBo["members"]={};
        for(int bdDmLBo=0; bdDmLBo < customSampleOrderCount; bdDmLBo++){
            json temp;
            temp=[&]() {
    json return_AEcoccS=json({});
    return serialize_VkCoarseSampleOrderCustomNV(pCustomSampleOrders[bdDmLBo]);}();
            return_bdDmLBo["members"].push_back(temp);
        }
        return return_bdDmLBo;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
sampleOrderType=deserialize_VkCoarseSampleOrderTypeNV(result["members"]["sampleOrderType"]);}();
[&]() {
customSampleOrderCount=deserialize_uint32_t(result["members"]["customSampleOrderCount"]);}();

}
void vkCmdDrawMeshTasksNV(
VkCommandBuffer commandBuffer,
 uint32_t taskCount,
 uint32_t firstTask
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdDrawMeshTasksNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["taskCount"]=[&]() {
    json return_LoPNKjn=json({});
    return serialize_uint32_t(taskCount);}();
data_json["members"]["firstTask"]=[&]() {
    json return_riSVVrx=json({});
    return serialize_uint32_t(firstTask);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
taskCount=deserialize_uint32_t(result["members"]["taskCount"]);}();
[&]() {
firstTask=deserialize_uint32_t(result["members"]["firstTask"]);}();
}
void vkCmdDrawMeshTasksIndirectNV(
VkCommandBuffer commandBuffer,
 VkBuffer buffer,
 VkDeviceSize offset,
 uint32_t drawCount,
 uint32_t stride
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdDrawMeshTasksIndirectNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["buffer"]=[&]() {
    json return_Fjwvwzv=json({});
    return serialize_VkBuffer(buffer);}();
data_json["members"]["offset"]=[&]() {
    json return_vTtZMhj=json({});
    return_vTtZMhj=[&]() {
    json return_eEWibmR=json({});
    return serialize_uint64_t(offset);}();return return_vTtZMhj;}();
data_json["members"]["drawCount"]=[&]() {
    json return_tDYkDda=json({});
    return serialize_uint32_t(drawCount);}();
data_json["members"]["stride"]=[&]() {
    json return_TkKksoe=json({});
    return serialize_uint32_t(stride);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
buffer=deserialize_VkBuffer(result["members"]["buffer"]);}();
[&]() {
[&]() {
offset=deserialize_uint64_t(result["members"]["offset"]);}();}();
[&]() {
drawCount=deserialize_uint32_t(result["members"]["drawCount"]);}();
[&]() {
stride=deserialize_uint32_t(result["members"]["stride"]);}();
}
void vkCmdDrawMeshTasksIndirectCountNV(
VkCommandBuffer commandBuffer,
 VkBuffer buffer,
 VkDeviceSize offset,
 VkBuffer countBuffer,
 VkDeviceSize countBufferOffset,
 uint32_t maxDrawCount,
 uint32_t stride
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdDrawMeshTasksIndirectCountNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["buffer"]=[&]() {
    json return_Fjwvwzv=json({});
    return serialize_VkBuffer(buffer);}();
data_json["members"]["offset"]=[&]() {
    json return_vTtZMhj=json({});
    return_vTtZMhj=[&]() {
    json return_eEWibmR=json({});
    return serialize_uint64_t(offset);}();return return_vTtZMhj;}();
data_json["members"]["countBuffer"]=[&]() {
    json return_thNJVdM=json({});
    return serialize_VkBuffer(countBuffer);}();
data_json["members"]["countBufferOffset"]=[&]() {
    json return_TrBaFUo=json({});
    return_TrBaFUo=[&]() {
    json return_xhKrPKX=json({});
    return serialize_uint64_t(countBufferOffset);}();return return_TrBaFUo;}();
data_json["members"]["maxDrawCount"]=[&]() {
    json return_HpcjsyV=json({});
    return serialize_uint32_t(maxDrawCount);}();
data_json["members"]["stride"]=[&]() {
    json return_TkKksoe=json({});
    return serialize_uint32_t(stride);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
buffer=deserialize_VkBuffer(result["members"]["buffer"]);}();
[&]() {
[&]() {
offset=deserialize_uint64_t(result["members"]["offset"]);}();}();
[&]() {
countBuffer=deserialize_VkBuffer(result["members"]["countBuffer"]);}();
[&]() {
[&]() {
countBufferOffset=deserialize_uint64_t(result["members"]["countBufferOffset"]);}();}();
[&]() {
maxDrawCount=deserialize_uint32_t(result["members"]["maxDrawCount"]);}();
[&]() {
stride=deserialize_uint32_t(result["members"]["stride"]);}();
}
void vkCmdDrawMeshTasksEXT(
VkCommandBuffer commandBuffer,
 uint32_t groupCountX,
 uint32_t groupCountY,
 uint32_t groupCountZ
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdDrawMeshTasksEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["groupCountX"]=[&]() {
    json return_BCsqVBT=json({});
    return serialize_uint32_t(groupCountX);}();
data_json["members"]["groupCountY"]=[&]() {
    json return_PuRhYIE=json({});
    return serialize_uint32_t(groupCountY);}();
data_json["members"]["groupCountZ"]=[&]() {
    json return_OaBSWyk=json({});
    return serialize_uint32_t(groupCountZ);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
groupCountX=deserialize_uint32_t(result["members"]["groupCountX"]);}();
[&]() {
groupCountY=deserialize_uint32_t(result["members"]["groupCountY"]);}();
[&]() {
groupCountZ=deserialize_uint32_t(result["members"]["groupCountZ"]);}();
}
void vkCmdDrawMeshTasksIndirectEXT(
VkCommandBuffer commandBuffer,
 VkBuffer buffer,
 VkDeviceSize offset,
 uint32_t drawCount,
 uint32_t stride
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdDrawMeshTasksIndirectEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["buffer"]=[&]() {
    json return_Fjwvwzv=json({});
    return serialize_VkBuffer(buffer);}();
data_json["members"]["offset"]=[&]() {
    json return_vTtZMhj=json({});
    return_vTtZMhj=[&]() {
    json return_eEWibmR=json({});
    return serialize_uint64_t(offset);}();return return_vTtZMhj;}();
data_json["members"]["drawCount"]=[&]() {
    json return_tDYkDda=json({});
    return serialize_uint32_t(drawCount);}();
data_json["members"]["stride"]=[&]() {
    json return_TkKksoe=json({});
    return serialize_uint32_t(stride);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
buffer=deserialize_VkBuffer(result["members"]["buffer"]);}();
[&]() {
[&]() {
offset=deserialize_uint64_t(result["members"]["offset"]);}();}();
[&]() {
drawCount=deserialize_uint32_t(result["members"]["drawCount"]);}();
[&]() {
stride=deserialize_uint32_t(result["members"]["stride"]);}();
}
void vkCmdDrawMeshTasksIndirectCountEXT(
VkCommandBuffer commandBuffer,
 VkBuffer buffer,
 VkDeviceSize offset,
 VkBuffer countBuffer,
 VkDeviceSize countBufferOffset,
 uint32_t maxDrawCount,
 uint32_t stride
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdDrawMeshTasksIndirectCountEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["buffer"]=[&]() {
    json return_Fjwvwzv=json({});
    return serialize_VkBuffer(buffer);}();
data_json["members"]["offset"]=[&]() {
    json return_vTtZMhj=json({});
    return_vTtZMhj=[&]() {
    json return_eEWibmR=json({});
    return serialize_uint64_t(offset);}();return return_vTtZMhj;}();
data_json["members"]["countBuffer"]=[&]() {
    json return_thNJVdM=json({});
    return serialize_VkBuffer(countBuffer);}();
data_json["members"]["countBufferOffset"]=[&]() {
    json return_TrBaFUo=json({});
    return_TrBaFUo=[&]() {
    json return_xhKrPKX=json({});
    return serialize_uint64_t(countBufferOffset);}();return return_TrBaFUo;}();
data_json["members"]["maxDrawCount"]=[&]() {
    json return_HpcjsyV=json({});
    return serialize_uint32_t(maxDrawCount);}();
data_json["members"]["stride"]=[&]() {
    json return_TkKksoe=json({});
    return serialize_uint32_t(stride);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
buffer=deserialize_VkBuffer(result["members"]["buffer"]);}();
[&]() {
[&]() {
offset=deserialize_uint64_t(result["members"]["offset"]);}();}();
[&]() {
countBuffer=deserialize_VkBuffer(result["members"]["countBuffer"]);}();
[&]() {
[&]() {
countBufferOffset=deserialize_uint64_t(result["members"]["countBufferOffset"]);}();}();
[&]() {
maxDrawCount=deserialize_uint32_t(result["members"]["maxDrawCount"]);}();
[&]() {
stride=deserialize_uint32_t(result["members"]["stride"]);}();
}
VkResult vkCompileDeferredNV(
VkDevice device,
 VkPipeline pipeline,
 uint32_t shader
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCompileDeferredNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pipeline"]=[&]() {
    json return_xIUyQCN=json({});
    return serialize_VkPipeline(pipeline);}();
data_json["members"]["shader"]=[&]() {
    json return_kPurEfy=json({});
    return serialize_uint32_t(shader);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
pipeline=deserialize_VkPipeline(result["members"]["pipeline"]);}();
[&]() {
shader=deserialize_uint32_t(result["members"]["shader"]);}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkCreateAccelerationStructureNV(
VkDevice device,
 const VkAccelerationStructureCreateInfoNV* pCreateInfo,
 const VkAllocationCallbacks* pAllocator,
 VkAccelerationStructureNV* pAccelerationStructure
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreateAccelerationStructureNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pCreateInfo"]=[&]() {
    json return_QHGzvOB=json({});
    
        if (pCreateInfo==NULL){
            return_QHGzvOB["null"]=true;
            return return_QHGzvOB;
        }
        return_QHGzvOB=[&]() {
    json return_HvfPXhs=json({});
    return serialize_VkAccelerationStructureCreateInfoNV(*pCreateInfo);}();
return return_QHGzvOB;}();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pAccelerationStructure"]=[&]() {
    json return_OUUStUb=json({});
    
        if (pAccelerationStructure==NULL){
            return_OUUStUb["null"]=true;
            return return_OUUStUb;
        }
        return_OUUStUb=[&]() {
    json return_hgQLQrQ=json({});
    return serialize_VkAccelerationStructureNV(*pAccelerationStructure);}();
return return_OUUStUb;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();


[&]() {

        if (result["members"]["pAccelerationStructure"].contains("null")){
        pAccelerationStructure=NULL;
        return;
        }
    [&]() {
*(pAccelerationStructure)=deserialize_VkAccelerationStructureNV(result["members"]["pAccelerationStructure"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                handle_to_parent_handle_struct[(uintptr_t)(*pAccelerationStructure)]=parent;
                
return return_value;
}
void vkCmdBindInvocationMaskHUAWEI(
VkCommandBuffer commandBuffer,
 VkImageView imageView,
 VkImageLayout imageLayout
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdBindInvocationMaskHUAWEI";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["imageView"]=[&]() {
    json return_TXEDCEI=json({});
    return serialize_VkImageView(imageView);}();
data_json["members"]["imageLayout"]=[&]() {
    json return_VWPBLHf=json({});
    return serialize_VkImageLayout(imageLayout);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
imageView=deserialize_VkImageView(result["members"]["imageView"]);}();
[&]() {
imageLayout=deserialize_VkImageLayout(result["members"]["imageLayout"]);}();
}
void vkDestroyAccelerationStructureKHR(
VkDevice device,
 VkAccelerationStructureKHR accelerationStructure,
 const VkAllocationCallbacks* pAllocator
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkDestroyAccelerationStructureKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["accelerationStructure"]=[&]() {
    json return_ovGXAXW=json({});
    return serialize_VkAccelerationStructureKHR(accelerationStructure);}();
data_json["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
accelerationStructure=deserialize_VkAccelerationStructureKHR(result["members"]["accelerationStructure"]);}();

}
void vkDestroyAccelerationStructureNV(
VkDevice device,
 VkAccelerationStructureNV accelerationStructure,
 const VkAllocationCallbacks* pAllocator
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkDestroyAccelerationStructureNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["accelerationStructure"]=[&]() {
    json return_rkmFIkM=json({});
    return serialize_VkAccelerationStructureNV(accelerationStructure);}();
data_json["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
accelerationStructure=deserialize_VkAccelerationStructureNV(result["members"]["accelerationStructure"]);}();

}
void vkGetAccelerationStructureMemoryRequirementsNV(
VkDevice device,
 const VkAccelerationStructureMemoryRequirementsInfoNV* pInfo,
 VkMemoryRequirements2KHR* pMemoryRequirements
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetAccelerationStructureMemoryRequirementsNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pInfo"]=[&]() {
    json return_uolFqCu=json({});
    
        if (pInfo==NULL){
            return_uolFqCu["null"]=true;
            return return_uolFqCu;
        }
        return_uolFqCu=[&]() {
    json return_rYaMKkD=json({});
    return serialize_VkAccelerationStructureMemoryRequirementsInfoNV(*pInfo);}();
return return_uolFqCu;}();
data_json["members"]["pMemoryRequirements"]=[&]() {
    json return_sgoXXWQ=json({});
    
        if (pMemoryRequirements==NULL){
            return_sgoXXWQ["null"]=true;
            return return_sgoXXWQ;
        }
        return_sgoXXWQ=[&]() {
    json return_GFyVRIH=json({});
    return serialize_VkMemoryRequirements2KHR(*pMemoryRequirements);}();
return return_sgoXXWQ;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

[&]() {

        if (result["members"]["pMemoryRequirements"].contains("null")){
        pMemoryRequirements=NULL;
        return;
        }
    [&]() {
*(pMemoryRequirements)=deserialize_VkMemoryRequirements2KHR(result["members"]["pMemoryRequirements"]);}();
}();
}
VkResult vkBindAccelerationStructureMemoryNV(
VkDevice device,
 uint32_t bindInfoCount,
 const VkBindAccelerationStructureMemoryInfoNV* pBindInfos
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkBindAccelerationStructureMemoryNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["bindInfoCount"]=[&]() {
    json return_nEBKnUd=json({});
    return serialize_uint32_t(bindInfoCount);}();
data_json["members"]["pBindInfos"]=[&]() {
    json return_dMgTFoy=json({});
    
        if (pBindInfos==NULL){
            return_dMgTFoy["null"]=true;
            return return_dMgTFoy;
        }
        
        return_dMgTFoy["members"]={};
        for(int dMgTFoy=0; dMgTFoy < bindInfoCount; dMgTFoy++){
            json temp;
            temp=[&]() {
    json return_njGghCw=json({});
    return serialize_VkBindAccelerationStructureMemoryInfoNV(pBindInfos[dMgTFoy]);}();
            return_dMgTFoy["members"].push_back(temp);
        }
        return return_dMgTFoy;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
bindInfoCount=deserialize_uint32_t(result["members"]["bindInfoCount"]);}();

VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkCmdCopyAccelerationStructureNV(
VkCommandBuffer commandBuffer,
 VkAccelerationStructureNV dst,
 VkAccelerationStructureNV src,
 VkCopyAccelerationStructureModeKHR mode
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdCopyAccelerationStructureNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["dst"]=[&]() {
    json return_oiVovyG=json({});
    return serialize_VkAccelerationStructureNV(dst);}();
data_json["members"]["src"]=[&]() {
    json return_HZibFqs=json({});
    return serialize_VkAccelerationStructureNV(src);}();
data_json["members"]["mode"]=[&]() {
    json return_UGYAeSh=json({});
    return serialize_VkCopyAccelerationStructureModeKHR(mode);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
dst=deserialize_VkAccelerationStructureNV(result["members"]["dst"]);}();
[&]() {
src=deserialize_VkAccelerationStructureNV(result["members"]["src"]);}();
[&]() {
mode=deserialize_VkCopyAccelerationStructureModeKHR(result["members"]["mode"]);}();
}
void vkCmdCopyAccelerationStructureKHR(
VkCommandBuffer commandBuffer,
 const VkCopyAccelerationStructureInfoKHR* pInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdCopyAccelerationStructureKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pInfo"]=[&]() {
    json return_QZQfWxf=json({});
    
        if (pInfo==NULL){
            return_QZQfWxf["null"]=true;
            return return_QZQfWxf;
        }
        return_QZQfWxf=[&]() {
    json return_CYXvkHX=json({});
    return serialize_VkCopyAccelerationStructureInfoKHR(*pInfo);}();
return return_QZQfWxf;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();

}
VkResult vkCopyAccelerationStructureKHR(
VkDevice device,
 VkDeferredOperationKHR deferredOperation,
 const VkCopyAccelerationStructureInfoKHR* pInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCopyAccelerationStructureKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["deferredOperation"]=[&]() {
    json return_zJwBFEh=json({});
    return serialize_VkDeferredOperationKHR(deferredOperation);}();
data_json["members"]["pInfo"]=[&]() {
    json return_QZQfWxf=json({});
    
        if (pInfo==NULL){
            return_QZQfWxf["null"]=true;
            return return_QZQfWxf;
        }
        return_QZQfWxf=[&]() {
    json return_CYXvkHX=json({});
    return serialize_VkCopyAccelerationStructureInfoKHR(*pInfo);}();
return return_QZQfWxf;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
deferredOperation=deserialize_VkDeferredOperationKHR(result["members"]["deferredOperation"]);}();

VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkCmdCopyAccelerationStructureToMemoryKHR(
VkCommandBuffer commandBuffer,
 const VkCopyAccelerationStructureToMemoryInfoKHR* pInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdCopyAccelerationStructureToMemoryKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pInfo"]=[&]() {
    json return_UbSBUTG=json({});
    
        if (pInfo==NULL){
            return_UbSBUTG["null"]=true;
            return return_UbSBUTG;
        }
        return_UbSBUTG=[&]() {
    json return_bLQFDoY=json({});
    return serialize_VkCopyAccelerationStructureToMemoryInfoKHR(*pInfo);}();
return return_UbSBUTG;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();

}
VkResult vkCopyAccelerationStructureToMemoryKHR(
VkDevice device,
 VkDeferredOperationKHR deferredOperation,
 const VkCopyAccelerationStructureToMemoryInfoKHR* pInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCopyAccelerationStructureToMemoryKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["deferredOperation"]=[&]() {
    json return_zJwBFEh=json({});
    return serialize_VkDeferredOperationKHR(deferredOperation);}();
data_json["members"]["pInfo"]=[&]() {
    json return_UbSBUTG=json({});
    
        if (pInfo==NULL){
            return_UbSBUTG["null"]=true;
            return return_UbSBUTG;
        }
        return_UbSBUTG=[&]() {
    json return_bLQFDoY=json({});
    return serialize_VkCopyAccelerationStructureToMemoryInfoKHR(*pInfo);}();
return return_UbSBUTG;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
deferredOperation=deserialize_VkDeferredOperationKHR(result["members"]["deferredOperation"]);}();

VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkCmdCopyMemoryToAccelerationStructureKHR(
VkCommandBuffer commandBuffer,
 const VkCopyMemoryToAccelerationStructureInfoKHR* pInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdCopyMemoryToAccelerationStructureKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pInfo"]=[&]() {
    json return_XBqtfOw=json({});
    
        if (pInfo==NULL){
            return_XBqtfOw["null"]=true;
            return return_XBqtfOw;
        }
        return_XBqtfOw=[&]() {
    json return_WveWJBj=json({});
    return serialize_VkCopyMemoryToAccelerationStructureInfoKHR(*pInfo);}();
return return_XBqtfOw;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();

}
VkResult vkCopyMemoryToAccelerationStructureKHR(
VkDevice device,
 VkDeferredOperationKHR deferredOperation,
 const VkCopyMemoryToAccelerationStructureInfoKHR* pInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCopyMemoryToAccelerationStructureKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["deferredOperation"]=[&]() {
    json return_zJwBFEh=json({});
    return serialize_VkDeferredOperationKHR(deferredOperation);}();
data_json["members"]["pInfo"]=[&]() {
    json return_XBqtfOw=json({});
    
        if (pInfo==NULL){
            return_XBqtfOw["null"]=true;
            return return_XBqtfOw;
        }
        return_XBqtfOw=[&]() {
    json return_WveWJBj=json({});
    return serialize_VkCopyMemoryToAccelerationStructureInfoKHR(*pInfo);}();
return return_XBqtfOw;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
deferredOperation=deserialize_VkDeferredOperationKHR(result["members"]["deferredOperation"]);}();

VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkCmdWriteAccelerationStructuresPropertiesKHR(
VkCommandBuffer commandBuffer,
 uint32_t accelerationStructureCount,
 const VkAccelerationStructureKHR* pAccelerationStructures,
 VkQueryType queryType,
 VkQueryPool queryPool,
 uint32_t firstQuery
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdWriteAccelerationStructuresPropertiesKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["accelerationStructureCount"]=[&]() {
    json return_uZBOMkp=json({});
    return serialize_uint32_t(accelerationStructureCount);}();
data_json["members"]["pAccelerationStructures"]=[&]() {
    json return_nkEYnKy=json({});
    
        if (pAccelerationStructures==NULL){
            return_nkEYnKy["null"]=true;
            return return_nkEYnKy;
        }
        
        return_nkEYnKy["members"]={};
        for(int nkEYnKy=0; nkEYnKy < accelerationStructureCount; nkEYnKy++){
            json temp;
            temp=[&]() {
    json return_bnpjJYl=json({});
    return serialize_VkAccelerationStructureKHR(pAccelerationStructures[nkEYnKy]);}();
            return_nkEYnKy["members"].push_back(temp);
        }
        return return_nkEYnKy;
        }();
data_json["members"]["queryType"]=[&]() {
    json return_wXKRLGm=json({});
    return serialize_VkQueryType(queryType);}();
data_json["members"]["queryPool"]=[&]() {
    json return_hLGHCzh=json({});
    return serialize_VkQueryPool(queryPool);}();
data_json["members"]["firstQuery"]=[&]() {
    json return_uiTbigF=json({});
    return serialize_uint32_t(firstQuery);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
accelerationStructureCount=deserialize_uint32_t(result["members"]["accelerationStructureCount"]);}();

[&]() {
queryType=deserialize_VkQueryType(result["members"]["queryType"]);}();
[&]() {
queryPool=deserialize_VkQueryPool(result["members"]["queryPool"]);}();
[&]() {
firstQuery=deserialize_uint32_t(result["members"]["firstQuery"]);}();
}
void vkCmdWriteAccelerationStructuresPropertiesNV(
VkCommandBuffer commandBuffer,
 uint32_t accelerationStructureCount,
 const VkAccelerationStructureNV* pAccelerationStructures,
 VkQueryType queryType,
 VkQueryPool queryPool,
 uint32_t firstQuery
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdWriteAccelerationStructuresPropertiesNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["accelerationStructureCount"]=[&]() {
    json return_uZBOMkp=json({});
    return serialize_uint32_t(accelerationStructureCount);}();
data_json["members"]["pAccelerationStructures"]=[&]() {
    json return_pIFnKId=json({});
    
        if (pAccelerationStructures==NULL){
            return_pIFnKId["null"]=true;
            return return_pIFnKId;
        }
        
        return_pIFnKId["members"]={};
        for(int pIFnKId=0; pIFnKId < accelerationStructureCount; pIFnKId++){
            json temp;
            temp=[&]() {
    json return_lDIpmuK=json({});
    return serialize_VkAccelerationStructureNV(pAccelerationStructures[pIFnKId]);}();
            return_pIFnKId["members"].push_back(temp);
        }
        return return_pIFnKId;
        }();
data_json["members"]["queryType"]=[&]() {
    json return_wXKRLGm=json({});
    return serialize_VkQueryType(queryType);}();
data_json["members"]["queryPool"]=[&]() {
    json return_hLGHCzh=json({});
    return serialize_VkQueryPool(queryPool);}();
data_json["members"]["firstQuery"]=[&]() {
    json return_uiTbigF=json({});
    return serialize_uint32_t(firstQuery);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
accelerationStructureCount=deserialize_uint32_t(result["members"]["accelerationStructureCount"]);}();

[&]() {
queryType=deserialize_VkQueryType(result["members"]["queryType"]);}();
[&]() {
queryPool=deserialize_VkQueryPool(result["members"]["queryPool"]);}();
[&]() {
firstQuery=deserialize_uint32_t(result["members"]["firstQuery"]);}();
}
void vkCmdBuildAccelerationStructureNV(
VkCommandBuffer commandBuffer,
 const VkAccelerationStructureInfoNV* pInfo,
 VkBuffer instanceData,
 VkDeviceSize instanceOffset,
 VkBool32 update,
 VkAccelerationStructureNV dst,
 VkAccelerationStructureNV src,
 VkBuffer scratch,
 VkDeviceSize scratchOffset
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdBuildAccelerationStructureNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pInfo"]=[&]() {
    json return_zEchnlc=json({});
    
        if (pInfo==NULL){
            return_zEchnlc["null"]=true;
            return return_zEchnlc;
        }
        return_zEchnlc=[&]() {
    json return_pRSEkqO=json({});
    return serialize_VkAccelerationStructureInfoNV(*pInfo);}();
return return_zEchnlc;}();
data_json["members"]["instanceData"]=[&]() {
    json return_fiKNiQi=json({});
    return serialize_VkBuffer(instanceData);}();
data_json["members"]["instanceOffset"]=[&]() {
    json return_ShKmWts=json({});
    return_ShKmWts=[&]() {
    json return_hsbCtXu=json({});
    return serialize_uint64_t(instanceOffset);}();return return_ShKmWts;}();
data_json["members"]["update"]=[&]() {
    json return_iAxnBTf=json({});
    return_iAxnBTf=[&]() {
    json return_hKRwamK=json({});
    return serialize_uint32_t(update);}();return return_iAxnBTf;}();
data_json["members"]["dst"]=[&]() {
    json return_oiVovyG=json({});
    return serialize_VkAccelerationStructureNV(dst);}();
data_json["members"]["src"]=[&]() {
    json return_HZibFqs=json({});
    return serialize_VkAccelerationStructureNV(src);}();
data_json["members"]["scratch"]=[&]() {
    json return_vNfNINw=json({});
    return serialize_VkBuffer(scratch);}();
data_json["members"]["scratchOffset"]=[&]() {
    json return_ttEtZbd=json({});
    return_ttEtZbd=[&]() {
    json return_ShpZlgu=json({});
    return serialize_uint64_t(scratchOffset);}();return return_ttEtZbd;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();

[&]() {
instanceData=deserialize_VkBuffer(result["members"]["instanceData"]);}();
[&]() {
[&]() {
instanceOffset=deserialize_uint64_t(result["members"]["instanceOffset"]);}();}();
[&]() {
[&]() {
update=deserialize_uint32_t(result["members"]["update"]);}();}();
[&]() {
dst=deserialize_VkAccelerationStructureNV(result["members"]["dst"]);}();
[&]() {
src=deserialize_VkAccelerationStructureNV(result["members"]["src"]);}();
[&]() {
scratch=deserialize_VkBuffer(result["members"]["scratch"]);}();
[&]() {
[&]() {
scratchOffset=deserialize_uint64_t(result["members"]["scratchOffset"]);}();}();
}
VkResult vkWriteAccelerationStructuresPropertiesKHR(
VkDevice device,
 uint32_t accelerationStructureCount,
 const VkAccelerationStructureKHR* pAccelerationStructures,
 VkQueryType  queryType,
 size_t       dataSize,
 void* pData,
 size_t stride
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkWriteAccelerationStructuresPropertiesKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["accelerationStructureCount"]=[&]() {
    json return_uZBOMkp=json({});
    return serialize_uint32_t(accelerationStructureCount);}();
data_json["members"]["pAccelerationStructures"]=[&]() {
    json return_nkEYnKy=json({});
    
        if (pAccelerationStructures==NULL){
            return_nkEYnKy["null"]=true;
            return return_nkEYnKy;
        }
        
        return_nkEYnKy["members"]={};
        for(int nkEYnKy=0; nkEYnKy < accelerationStructureCount; nkEYnKy++){
            json temp;
            temp=[&]() {
    json return_bnpjJYl=json({});
    return serialize_VkAccelerationStructureKHR(pAccelerationStructures[nkEYnKy]);}();
            return_nkEYnKy["members"].push_back(temp);
        }
        return return_nkEYnKy;
        }();
data_json["members"]["queryType"]=[&]() {
    json return_WQjFQIb=json({});
    return serialize_VkQueryType(queryType);}();
data_json["members"]["dataSize"]=[&]() {
    json return_ocxeENf=json({});
    return serialize_size_t(dataSize);}();
data_json["members"]["pData"]=[&]() {
    json return_uMNHZoi=json({});
    
        if (pData==NULL){
            return_uMNHZoi["null"]=true;
            return return_uMNHZoi;
        }
        return serialize_void_p(pData);
}();
data_json["members"]["stride"]=[&]() {
    json return_LQXemmN=json({});
    return serialize_size_t(stride);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
accelerationStructureCount=deserialize_uint32_t(result["members"]["accelerationStructureCount"]);}();

[&]() {
queryType=deserialize_VkQueryType(result["members"]["queryType"]);}();
[&]() {
dataSize=deserialize_size_t(result["members"]["dataSize"]);}();
[&]() {

        if (result["members"]["pData"].contains("null")){
        pData=NULL;
        return;
        }
    pData=deserialize_void_p(result["members"]["pData"]);
}();
[&]() {
stride=deserialize_size_t(result["members"]["stride"]);}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkCmdTraceRaysKHR(
VkCommandBuffer commandBuffer,
 const VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable,
 const VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable,
 const VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable,
 const VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable,
 uint32_t width,
 uint32_t height,
 uint32_t depth
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdTraceRaysKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pRaygenShaderBindingTable"]=[&]() {
    json return_ovMxhry=json({});
    
        if (pRaygenShaderBindingTable==NULL){
            return_ovMxhry["null"]=true;
            return return_ovMxhry;
        }
        return_ovMxhry=[&]() {
    json return_PJQqQIU=json({});
    return serialize_VkStridedDeviceAddressRegionKHR(*pRaygenShaderBindingTable);}();
return return_ovMxhry;}();
data_json["members"]["pMissShaderBindingTable"]=[&]() {
    json return_FnwCNhh=json({});
    
        if (pMissShaderBindingTable==NULL){
            return_FnwCNhh["null"]=true;
            return return_FnwCNhh;
        }
        return_FnwCNhh=[&]() {
    json return_CTZxbuR=json({});
    return serialize_VkStridedDeviceAddressRegionKHR(*pMissShaderBindingTable);}();
return return_FnwCNhh;}();
data_json["members"]["pHitShaderBindingTable"]=[&]() {
    json return_CWpPDRZ=json({});
    
        if (pHitShaderBindingTable==NULL){
            return_CWpPDRZ["null"]=true;
            return return_CWpPDRZ;
        }
        return_CWpPDRZ=[&]() {
    json return_HQpDGRG=json({});
    return serialize_VkStridedDeviceAddressRegionKHR(*pHitShaderBindingTable);}();
return return_CWpPDRZ;}();
data_json["members"]["pCallableShaderBindingTable"]=[&]() {
    json return_DKflgoV=json({});
    
        if (pCallableShaderBindingTable==NULL){
            return_DKflgoV["null"]=true;
            return return_DKflgoV;
        }
        return_DKflgoV=[&]() {
    json return_PwmuDmK=json({});
    return serialize_VkStridedDeviceAddressRegionKHR(*pCallableShaderBindingTable);}();
return return_DKflgoV;}();
data_json["members"]["width"]=[&]() {
    json return_FLfchzm=json({});
    return serialize_uint32_t(width);}();
data_json["members"]["height"]=[&]() {
    json return_qhQceRR=json({});
    return serialize_uint32_t(height);}();
data_json["members"]["depth"]=[&]() {
    json return_jHWxEop=json({});
    return serialize_uint32_t(depth);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();




[&]() {
width=deserialize_uint32_t(result["members"]["width"]);}();
[&]() {
height=deserialize_uint32_t(result["members"]["height"]);}();
[&]() {
depth=deserialize_uint32_t(result["members"]["depth"]);}();
}
void vkCmdTraceRaysNV(
VkCommandBuffer commandBuffer,
 VkBuffer raygenShaderBindingTableBuffer,
 VkDeviceSize raygenShaderBindingOffset,
 VkBuffer missShaderBindingTableBuffer,
 VkDeviceSize missShaderBindingOffset,
 VkDeviceSize missShaderBindingStride,
 VkBuffer hitShaderBindingTableBuffer,
 VkDeviceSize hitShaderBindingOffset,
 VkDeviceSize hitShaderBindingStride,
 VkBuffer callableShaderBindingTableBuffer,
 VkDeviceSize callableShaderBindingOffset,
 VkDeviceSize callableShaderBindingStride,
 uint32_t width,
 uint32_t height,
 uint32_t depth
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdTraceRaysNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["raygenShaderBindingTableBuffer"]=[&]() {
    json return_yYiZjgK=json({});
    return serialize_VkBuffer(raygenShaderBindingTableBuffer);}();
data_json["members"]["raygenShaderBindingOffset"]=[&]() {
    json return_naPCpCz=json({});
    return_naPCpCz=[&]() {
    json return_HIflnCm=json({});
    return serialize_uint64_t(raygenShaderBindingOffset);}();return return_naPCpCz;}();
data_json["members"]["missShaderBindingTableBuffer"]=[&]() {
    json return_jxUlsMI=json({});
    return serialize_VkBuffer(missShaderBindingTableBuffer);}();
data_json["members"]["missShaderBindingOffset"]=[&]() {
    json return_uziqWWk=json({});
    return_uziqWWk=[&]() {
    json return_pmnolQm=json({});
    return serialize_uint64_t(missShaderBindingOffset);}();return return_uziqWWk;}();
data_json["members"]["missShaderBindingStride"]=[&]() {
    json return_iCMGLnr=json({});
    return_iCMGLnr=[&]() {
    json return_sSDxlWL=json({});
    return serialize_uint64_t(missShaderBindingStride);}();return return_iCMGLnr;}();
data_json["members"]["hitShaderBindingTableBuffer"]=[&]() {
    json return_lbNDgRB=json({});
    return serialize_VkBuffer(hitShaderBindingTableBuffer);}();
data_json["members"]["hitShaderBindingOffset"]=[&]() {
    json return_irSRrzx=json({});
    return_irSRrzx=[&]() {
    json return_mZfsEtS=json({});
    return serialize_uint64_t(hitShaderBindingOffset);}();return return_irSRrzx;}();
data_json["members"]["hitShaderBindingStride"]=[&]() {
    json return_xuASJjr=json({});
    return_xuASJjr=[&]() {
    json return_fgLyxzH=json({});
    return serialize_uint64_t(hitShaderBindingStride);}();return return_xuASJjr;}();
data_json["members"]["callableShaderBindingTableBuffer"]=[&]() {
    json return_yvuNELH=json({});
    return serialize_VkBuffer(callableShaderBindingTableBuffer);}();
data_json["members"]["callableShaderBindingOffset"]=[&]() {
    json return_SGvXKbw=json({});
    return_SGvXKbw=[&]() {
    json return_nPfGRBg=json({});
    return serialize_uint64_t(callableShaderBindingOffset);}();return return_SGvXKbw;}();
data_json["members"]["callableShaderBindingStride"]=[&]() {
    json return_IrnYgla=json({});
    return_IrnYgla=[&]() {
    json return_tdEmoHb=json({});
    return serialize_uint64_t(callableShaderBindingStride);}();return return_IrnYgla;}();
data_json["members"]["width"]=[&]() {
    json return_FLfchzm=json({});
    return serialize_uint32_t(width);}();
data_json["members"]["height"]=[&]() {
    json return_qhQceRR=json({});
    return serialize_uint32_t(height);}();
data_json["members"]["depth"]=[&]() {
    json return_jHWxEop=json({});
    return serialize_uint32_t(depth);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
raygenShaderBindingTableBuffer=deserialize_VkBuffer(result["members"]["raygenShaderBindingTableBuffer"]);}();
[&]() {
[&]() {
raygenShaderBindingOffset=deserialize_uint64_t(result["members"]["raygenShaderBindingOffset"]);}();}();
[&]() {
missShaderBindingTableBuffer=deserialize_VkBuffer(result["members"]["missShaderBindingTableBuffer"]);}();
[&]() {
[&]() {
missShaderBindingOffset=deserialize_uint64_t(result["members"]["missShaderBindingOffset"]);}();}();
[&]() {
[&]() {
missShaderBindingStride=deserialize_uint64_t(result["members"]["missShaderBindingStride"]);}();}();
[&]() {
hitShaderBindingTableBuffer=deserialize_VkBuffer(result["members"]["hitShaderBindingTableBuffer"]);}();
[&]() {
[&]() {
hitShaderBindingOffset=deserialize_uint64_t(result["members"]["hitShaderBindingOffset"]);}();}();
[&]() {
[&]() {
hitShaderBindingStride=deserialize_uint64_t(result["members"]["hitShaderBindingStride"]);}();}();
[&]() {
callableShaderBindingTableBuffer=deserialize_VkBuffer(result["members"]["callableShaderBindingTableBuffer"]);}();
[&]() {
[&]() {
callableShaderBindingOffset=deserialize_uint64_t(result["members"]["callableShaderBindingOffset"]);}();}();
[&]() {
[&]() {
callableShaderBindingStride=deserialize_uint64_t(result["members"]["callableShaderBindingStride"]);}();}();
[&]() {
width=deserialize_uint32_t(result["members"]["width"]);}();
[&]() {
height=deserialize_uint32_t(result["members"]["height"]);}();
[&]() {
depth=deserialize_uint32_t(result["members"]["depth"]);}();
}
VkResult vkGetRayTracingShaderGroupHandlesKHR(
VkDevice device,
 VkPipeline pipeline,
 uint32_t firstGroup,
 uint32_t groupCount,
 size_t dataSize,
 void* pData
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetRayTracingShaderGroupHandlesKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pipeline"]=[&]() {
    json return_xIUyQCN=json({});
    return serialize_VkPipeline(pipeline);}();
data_json["members"]["firstGroup"]=[&]() {
    json return_JAcxNPa=json({});
    return serialize_uint32_t(firstGroup);}();
data_json["members"]["groupCount"]=[&]() {
    json return_dyouaca=json({});
    return serialize_uint32_t(groupCount);}();
data_json["members"]["dataSize"]=[&]() {
    json return_mCuLMQj=json({});
    return serialize_size_t(dataSize);}();
data_json["members"]["pData"]=[&]() {
    json return_SWOVaNE=json({});
    
        if (pData==NULL){
            return_SWOVaNE["null"]=true;
            return return_SWOVaNE;
        }
        return serialize_void_p(pData);
}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
pipeline=deserialize_VkPipeline(result["members"]["pipeline"]);}();
[&]() {
firstGroup=deserialize_uint32_t(result["members"]["firstGroup"]);}();
[&]() {
groupCount=deserialize_uint32_t(result["members"]["groupCount"]);}();
[&]() {
dataSize=deserialize_size_t(result["members"]["dataSize"]);}();
[&]() {

        if (result["members"]["pData"].contains("null")){
        pData=NULL;
        return;
        }
    pData=deserialize_void_p(result["members"]["pData"]);
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkGetRayTracingShaderGroupHandlesNV(
VkDevice device,
 VkPipeline pipeline,
 uint32_t firstGroup,
 uint32_t groupCount,
 size_t dataSize,
 void* pData
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetRayTracingShaderGroupHandlesNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pipeline"]=[&]() {
    json return_xIUyQCN=json({});
    return serialize_VkPipeline(pipeline);}();
data_json["members"]["firstGroup"]=[&]() {
    json return_JAcxNPa=json({});
    return serialize_uint32_t(firstGroup);}();
data_json["members"]["groupCount"]=[&]() {
    json return_dyouaca=json({});
    return serialize_uint32_t(groupCount);}();
data_json["members"]["dataSize"]=[&]() {
    json return_mCuLMQj=json({});
    return serialize_size_t(dataSize);}();
data_json["members"]["pData"]=[&]() {
    json return_SWOVaNE=json({});
    
        if (pData==NULL){
            return_SWOVaNE["null"]=true;
            return return_SWOVaNE;
        }
        return serialize_void_p(pData);
}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
pipeline=deserialize_VkPipeline(result["members"]["pipeline"]);}();
[&]() {
firstGroup=deserialize_uint32_t(result["members"]["firstGroup"]);}();
[&]() {
groupCount=deserialize_uint32_t(result["members"]["groupCount"]);}();
[&]() {
dataSize=deserialize_size_t(result["members"]["dataSize"]);}();
[&]() {

        if (result["members"]["pData"].contains("null")){
        pData=NULL;
        return;
        }
    pData=deserialize_void_p(result["members"]["pData"]);
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(
VkDevice device,
 VkPipeline pipeline,
 uint32_t firstGroup,
 uint32_t groupCount,
 size_t dataSize,
 void* pData
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pipeline"]=[&]() {
    json return_xIUyQCN=json({});
    return serialize_VkPipeline(pipeline);}();
data_json["members"]["firstGroup"]=[&]() {
    json return_JAcxNPa=json({});
    return serialize_uint32_t(firstGroup);}();
data_json["members"]["groupCount"]=[&]() {
    json return_dyouaca=json({});
    return serialize_uint32_t(groupCount);}();
data_json["members"]["dataSize"]=[&]() {
    json return_mCuLMQj=json({});
    return serialize_size_t(dataSize);}();
data_json["members"]["pData"]=[&]() {
    json return_SWOVaNE=json({});
    
        if (pData==NULL){
            return_SWOVaNE["null"]=true;
            return return_SWOVaNE;
        }
        return serialize_void_p(pData);
}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
pipeline=deserialize_VkPipeline(result["members"]["pipeline"]);}();
[&]() {
firstGroup=deserialize_uint32_t(result["members"]["firstGroup"]);}();
[&]() {
groupCount=deserialize_uint32_t(result["members"]["groupCount"]);}();
[&]() {
dataSize=deserialize_size_t(result["members"]["dataSize"]);}();
[&]() {

        if (result["members"]["pData"].contains("null")){
        pData=NULL;
        return;
        }
    pData=deserialize_void_p(result["members"]["pData"]);
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkGetAccelerationStructureHandleNV(
VkDevice device,
 VkAccelerationStructureNV accelerationStructure,
 size_t dataSize,
 void* pData
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetAccelerationStructureHandleNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["accelerationStructure"]=[&]() {
    json return_rkmFIkM=json({});
    return serialize_VkAccelerationStructureNV(accelerationStructure);}();
data_json["members"]["dataSize"]=[&]() {
    json return_mCuLMQj=json({});
    return serialize_size_t(dataSize);}();
data_json["members"]["pData"]=[&]() {
    json return_SWOVaNE=json({});
    
        if (pData==NULL){
            return_SWOVaNE["null"]=true;
            return return_SWOVaNE;
        }
        return serialize_void_p(pData);
}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
accelerationStructure=deserialize_VkAccelerationStructureNV(result["members"]["accelerationStructure"]);}();
[&]() {
dataSize=deserialize_size_t(result["members"]["dataSize"]);}();
[&]() {

        if (result["members"]["pData"].contains("null")){
        pData=NULL;
        return;
        }
    pData=deserialize_void_p(result["members"]["pData"]);
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkCreateRayTracingPipelinesNV(
VkDevice device,
 VkPipelineCache pipelineCache,
 uint32_t createInfoCount,
 const VkRayTracingPipelineCreateInfoNV* pCreateInfos,
 const VkAllocationCallbacks* pAllocator,
 VkPipeline* pPipelines
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreateRayTracingPipelinesNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pipelineCache"]=[&]() {
    json return_sRQlJCP=json({});
    return serialize_VkPipelineCache(pipelineCache);}();
data_json["members"]["createInfoCount"]=[&]() {
    json return_cRiHaUT=json({});
    return serialize_uint32_t(createInfoCount);}();
data_json["members"]["pCreateInfos"]=[&]() {
    json return_uVtulgk=json({});
    
        if (pCreateInfos==NULL){
            return_uVtulgk["null"]=true;
            return return_uVtulgk;
        }
        
        return_uVtulgk["members"]={};
        for(int uVtulgk=0; uVtulgk < createInfoCount; uVtulgk++){
            json temp;
            temp=[&]() {
    json return_usuknva=json({});
    return serialize_VkRayTracingPipelineCreateInfoNV(pCreateInfos[uVtulgk]);}();
            return_uVtulgk["members"].push_back(temp);
        }
        return return_uVtulgk;
        }();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pPipelines"]=[&]() {
    json return_kBzHgXu=json({});
    
        if (pPipelines==NULL){
            return_kBzHgXu["null"]=true;
            return return_kBzHgXu;
        }
        
        return_kBzHgXu["members"]={};
        for(int kBzHgXu=0; kBzHgXu < createInfoCount; kBzHgXu++){
            json temp;
            temp=[&]() {
    json return_EvuMoqq=json({});
    return serialize_VkPipeline(pPipelines[kBzHgXu]);}();
            return_kBzHgXu["members"].push_back(temp);
        }
        return return_kBzHgXu;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
pipelineCache=deserialize_VkPipelineCache(result["members"]["pipelineCache"]);}();
[&]() {
createInfoCount=deserialize_uint32_t(result["members"]["createInfoCount"]);}();


[&]() {

        if (result["members"]["pPipelines"].contains("null")){
        pPipelines=NULL;
        return;
        }
    
        for (int HHbbdGU=0; HHbbdGU < createInfoCount; HHbbdGU++){
            [&]() {
pPipelines[HHbbdGU]=deserialize_VkPipeline(result["members"]["pPipelines"]["members"][HHbbdGU]);}();;
        }
        }();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                for (int i=0; i<createInfoCount; i++){
                    handle_to_parent_handle_struct[(uintptr_t)pPipelines[i]]=parent;
                }
                
return return_value;
}
VkResult vkCreateRayTracingPipelinesKHR(
VkDevice device,
 VkDeferredOperationKHR deferredOperation,
 VkPipelineCache pipelineCache,
 uint32_t createInfoCount,
 const VkRayTracingPipelineCreateInfoKHR* pCreateInfos,
 const VkAllocationCallbacks* pAllocator,
 VkPipeline* pPipelines
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreateRayTracingPipelinesKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["deferredOperation"]=[&]() {
    json return_zJwBFEh=json({});
    return serialize_VkDeferredOperationKHR(deferredOperation);}();
data_json["members"]["pipelineCache"]=[&]() {
    json return_sRQlJCP=json({});
    return serialize_VkPipelineCache(pipelineCache);}();
data_json["members"]["createInfoCount"]=[&]() {
    json return_cRiHaUT=json({});
    return serialize_uint32_t(createInfoCount);}();
data_json["members"]["pCreateInfos"]=[&]() {
    json return_nOOeENZ=json({});
    
        if (pCreateInfos==NULL){
            return_nOOeENZ["null"]=true;
            return return_nOOeENZ;
        }
        
        return_nOOeENZ["members"]={};
        for(int nOOeENZ=0; nOOeENZ < createInfoCount; nOOeENZ++){
            json temp;
            temp=[&]() {
    json return_vnJZNDw=json({});
    return serialize_VkRayTracingPipelineCreateInfoKHR(pCreateInfos[nOOeENZ]);}();
            return_nOOeENZ["members"].push_back(temp);
        }
        return return_nOOeENZ;
        }();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pPipelines"]=[&]() {
    json return_kBzHgXu=json({});
    
        if (pPipelines==NULL){
            return_kBzHgXu["null"]=true;
            return return_kBzHgXu;
        }
        
        return_kBzHgXu["members"]={};
        for(int kBzHgXu=0; kBzHgXu < createInfoCount; kBzHgXu++){
            json temp;
            temp=[&]() {
    json return_EvuMoqq=json({});
    return serialize_VkPipeline(pPipelines[kBzHgXu]);}();
            return_kBzHgXu["members"].push_back(temp);
        }
        return return_kBzHgXu;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
deferredOperation=deserialize_VkDeferredOperationKHR(result["members"]["deferredOperation"]);}();
[&]() {
pipelineCache=deserialize_VkPipelineCache(result["members"]["pipelineCache"]);}();
[&]() {
createInfoCount=deserialize_uint32_t(result["members"]["createInfoCount"]);}();


[&]() {

        if (result["members"]["pPipelines"].contains("null")){
        pPipelines=NULL;
        return;
        }
    
        for (int HHbbdGU=0; HHbbdGU < createInfoCount; HHbbdGU++){
            [&]() {
pPipelines[HHbbdGU]=deserialize_VkPipeline(result["members"]["pPipelines"]["members"][HHbbdGU]);}();;
        }
        }();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                for (int i=0; i<createInfoCount; i++){
                    handle_to_parent_handle_struct[(uintptr_t)pPipelines[i]]=parent;
                }
                
return return_value;
}
VkResult vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(
VkPhysicalDevice physicalDevice,
 uint32_t* pPropertyCount,
 VkCooperativeMatrixPropertiesNV* pProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["pPropertyCount"]=[&]() {
    json return_MnYOHdG=json({});
    
        if (pPropertyCount==NULL){
            return_MnYOHdG["null"]=true;
            return return_MnYOHdG;
        }
        return_MnYOHdG=[&]() {
    json return_rPOmKzR=json({});
    return serialize_uint32_t(*pPropertyCount);}();
return return_MnYOHdG;}();
data_json["members"]["pProperties"]=[&]() {
    json return_shCwBnn=json({});
    
        if (pProperties==NULL){
            return_shCwBnn["null"]=true;
            return return_shCwBnn;
        }
        
        return_shCwBnn["members"]={};
        for(int shCwBnn=0; shCwBnn < *pPropertyCount; shCwBnn++){
            json temp;
            temp=[&]() {
    json return_VPqqROx=json({});
    return serialize_VkCooperativeMatrixPropertiesNV(pProperties[shCwBnn]);}();
            return_shCwBnn["members"].push_back(temp);
        }
        return return_shCwBnn;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();
[&]() {

        if (result["members"]["pPropertyCount"].contains("null")){
        pPropertyCount=NULL;
        return;
        }
    [&]() {
*(pPropertyCount)=deserialize_uint32_t(result["members"]["pPropertyCount"]);}();
}();
[&]() {

        if (result["members"]["pProperties"].contains("null")){
        pProperties=NULL;
        return;
        }
    
        for (int MbfmOZT=0; MbfmOZT < *pPropertyCount; MbfmOZT++){
            [&]() {
pProperties[MbfmOZT]=deserialize_VkCooperativeMatrixPropertiesNV(result["members"]["pProperties"]["members"][MbfmOZT]);}();;
        }
        }();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkCmdTraceRaysIndirectKHR(
VkCommandBuffer commandBuffer,
 const VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable,
 const VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable,
 const VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable,
 const VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable,
 VkDeviceAddress indirectDeviceAddress
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdTraceRaysIndirectKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pRaygenShaderBindingTable"]=[&]() {
    json return_ovMxhry=json({});
    
        if (pRaygenShaderBindingTable==NULL){
            return_ovMxhry["null"]=true;
            return return_ovMxhry;
        }
        return_ovMxhry=[&]() {
    json return_PJQqQIU=json({});
    return serialize_VkStridedDeviceAddressRegionKHR(*pRaygenShaderBindingTable);}();
return return_ovMxhry;}();
data_json["members"]["pMissShaderBindingTable"]=[&]() {
    json return_FnwCNhh=json({});
    
        if (pMissShaderBindingTable==NULL){
            return_FnwCNhh["null"]=true;
            return return_FnwCNhh;
        }
        return_FnwCNhh=[&]() {
    json return_CTZxbuR=json({});
    return serialize_VkStridedDeviceAddressRegionKHR(*pMissShaderBindingTable);}();
return return_FnwCNhh;}();
data_json["members"]["pHitShaderBindingTable"]=[&]() {
    json return_CWpPDRZ=json({});
    
        if (pHitShaderBindingTable==NULL){
            return_CWpPDRZ["null"]=true;
            return return_CWpPDRZ;
        }
        return_CWpPDRZ=[&]() {
    json return_HQpDGRG=json({});
    return serialize_VkStridedDeviceAddressRegionKHR(*pHitShaderBindingTable);}();
return return_CWpPDRZ;}();
data_json["members"]["pCallableShaderBindingTable"]=[&]() {
    json return_DKflgoV=json({});
    
        if (pCallableShaderBindingTable==NULL){
            return_DKflgoV["null"]=true;
            return return_DKflgoV;
        }
        return_DKflgoV=[&]() {
    json return_PwmuDmK=json({});
    return serialize_VkStridedDeviceAddressRegionKHR(*pCallableShaderBindingTable);}();
return return_DKflgoV;}();
data_json["members"]["indirectDeviceAddress"]=[&]() {
    json return_qpqHZzS=json({});
    return_qpqHZzS=[&]() {
    json return_EltxpPH=json({});
    return serialize_uint64_t(indirectDeviceAddress);}();return return_qpqHZzS;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();




[&]() {
[&]() {
indirectDeviceAddress=deserialize_uint64_t(result["members"]["indirectDeviceAddress"]);}();}();
}
void vkCmdTraceRaysIndirect2KHR(
VkCommandBuffer commandBuffer,
 VkDeviceAddress indirectDeviceAddress
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdTraceRaysIndirect2KHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["indirectDeviceAddress"]=[&]() {
    json return_qpqHZzS=json({});
    return_qpqHZzS=[&]() {
    json return_EltxpPH=json({});
    return serialize_uint64_t(indirectDeviceAddress);}();return return_qpqHZzS;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
[&]() {
indirectDeviceAddress=deserialize_uint64_t(result["members"]["indirectDeviceAddress"]);}();}();
}
void vkGetDeviceAccelerationStructureCompatibilityKHR(
VkDevice device,
 const VkAccelerationStructureVersionInfoKHR* pVersionInfo,
 VkAccelerationStructureCompatibilityKHR* pCompatibility
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetDeviceAccelerationStructureCompatibilityKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pVersionInfo"]=[&]() {
    json return_kqLSIBb=json({});
    
        if (pVersionInfo==NULL){
            return_kqLSIBb["null"]=true;
            return return_kqLSIBb;
        }
        return_kqLSIBb=[&]() {
    json return_zSnDpwP=json({});
    return serialize_VkAccelerationStructureVersionInfoKHR(*pVersionInfo);}();
return return_kqLSIBb;}();
data_json["members"]["pCompatibility"]=[&]() {
    json return_pFzhFrX=json({});
    
        if (pCompatibility==NULL){
            return_pFzhFrX["null"]=true;
            return return_pFzhFrX;
        }
        return_pFzhFrX=[&]() {
    json return_rJRBcNi=json({});
    return serialize_VkAccelerationStructureCompatibilityKHR(*pCompatibility);}();
return return_pFzhFrX;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

[&]() {

        if (result["members"]["pCompatibility"].contains("null")){
        pCompatibility=NULL;
        return;
        }
    [&]() {
*(pCompatibility)=deserialize_VkAccelerationStructureCompatibilityKHR(result["members"]["pCompatibility"]);}();
}();
}
VkDeviceSize vkGetRayTracingShaderGroupStackSizeKHR(
VkDevice device,
 VkPipeline pipeline,
 uint32_t group,
 VkShaderGroupShaderKHR groupShader
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetRayTracingShaderGroupStackSizeKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pipeline"]=[&]() {
    json return_xIUyQCN=json({});
    return serialize_VkPipeline(pipeline);}();
data_json["members"]["group"]=[&]() {
    json return_xTPVAxI=json({});
    return serialize_uint32_t(group);}();
data_json["members"]["groupShader"]=[&]() {
    json return_oHnLhUe=json({});
    return serialize_VkShaderGroupShaderKHR(groupShader);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
pipeline=deserialize_VkPipeline(result["members"]["pipeline"]);}();
[&]() {
group=deserialize_uint32_t(result["members"]["group"]);}();
[&]() {
groupShader=deserialize_VkShaderGroupShaderKHR(result["members"]["groupShader"]);}();
VkDeviceSize return_value;
[&]() {
[&]() {
return_value=deserialize_uint64_t(result["return"]);}();}();
return return_value;
}
void vkCmdSetRayTracingPipelineStackSizeKHR(
VkCommandBuffer commandBuffer,
 uint32_t pipelineStackSize
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetRayTracingPipelineStackSizeKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pipelineStackSize"]=[&]() {
    json return_CXJZzXP=json({});
    return serialize_uint32_t(pipelineStackSize);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
pipelineStackSize=deserialize_uint32_t(result["members"]["pipelineStackSize"]);}();
}
uint32_t vkGetImageViewHandleNVX(
VkDevice device,
 const VkImageViewHandleInfoNVX* pInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetImageViewHandleNVX";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pInfo"]=[&]() {
    json return_wRfjyoW=json({});
    
        if (pInfo==NULL){
            return_wRfjyoW["null"]=true;
            return return_wRfjyoW;
        }
        return_wRfjyoW=[&]() {
    json return_zKZAobN=json({});
    return serialize_VkImageViewHandleInfoNVX(*pInfo);}();
return return_wRfjyoW;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

uint32_t return_value;
[&]() {
return_value=deserialize_uint32_t(result["return"]);}();
return return_value;
}
VkResult vkGetImageViewAddressNVX(
VkDevice device,
 VkImageView imageView,
 VkImageViewAddressPropertiesNVX* pProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetImageViewAddressNVX";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["imageView"]=[&]() {
    json return_TXEDCEI=json({});
    return serialize_VkImageView(imageView);}();
data_json["members"]["pProperties"]=[&]() {
    json return_TUehTTT=json({});
    
        if (pProperties==NULL){
            return_TUehTTT["null"]=true;
            return return_TUehTTT;
        }
        return_TUehTTT=[&]() {
    json return_ODrqQdQ=json({});
    return serialize_VkImageViewAddressPropertiesNVX(*pProperties);}();
return return_TUehTTT;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
imageView=deserialize_VkImageView(result["members"]["imageView"]);}();
[&]() {

        if (result["members"]["pProperties"].contains("null")){
        pProperties=NULL;
        return;
        }
    [&]() {
*(pProperties)=deserialize_VkImageViewAddressPropertiesNVX(result["members"]["pProperties"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(
VkPhysicalDevice physicalDevice,
 uint32_t queueFamilyIndex,
 uint32_t* pCounterCount,
 VkPerformanceCounterKHR* pCounters,
 VkPerformanceCounterDescriptionKHR* pCounterDescriptions
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["queueFamilyIndex"]=[&]() {
    json return_lNjYgkI=json({});
    return serialize_uint32_t(queueFamilyIndex);}();
data_json["members"]["pCounterCount"]=[&]() {
    json return_oPyRbUV=json({});
    
        if (pCounterCount==NULL){
            return_oPyRbUV["null"]=true;
            return return_oPyRbUV;
        }
        return_oPyRbUV=[&]() {
    json return_NBGwjon=json({});
    return serialize_uint32_t(*pCounterCount);}();
return return_oPyRbUV;}();
data_json["members"]["pCounters"]=[&]() {
    json return_EIjpIbv=json({});
    
        if (pCounters==NULL){
            return_EIjpIbv["null"]=true;
            return return_EIjpIbv;
        }
        
        return_EIjpIbv["members"]={};
        for(int EIjpIbv=0; EIjpIbv < *pCounterCount; EIjpIbv++){
            json temp;
            temp=[&]() {
    json return_DKxveuA=json({});
    return serialize_VkPerformanceCounterKHR(pCounters[EIjpIbv]);}();
            return_EIjpIbv["members"].push_back(temp);
        }
        return return_EIjpIbv;
        }();
data_json["members"]["pCounterDescriptions"]=[&]() {
    json return_FhfvHxi=json({});
    
        if (pCounterDescriptions==NULL){
            return_FhfvHxi["null"]=true;
            return return_FhfvHxi;
        }
        
        return_FhfvHxi["members"]={};
        for(int FhfvHxi=0; FhfvHxi < *pCounterCount; FhfvHxi++){
            json temp;
            temp=[&]() {
    json return_jtABVnr=json({});
    return serialize_VkPerformanceCounterDescriptionKHR(pCounterDescriptions[FhfvHxi]);}();
            return_FhfvHxi["members"].push_back(temp);
        }
        return return_FhfvHxi;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();
[&]() {
queueFamilyIndex=deserialize_uint32_t(result["members"]["queueFamilyIndex"]);}();
[&]() {

        if (result["members"]["pCounterCount"].contains("null")){
        pCounterCount=NULL;
        return;
        }
    [&]() {
*(pCounterCount)=deserialize_uint32_t(result["members"]["pCounterCount"]);}();
}();
[&]() {

        if (result["members"]["pCounters"].contains("null")){
        pCounters=NULL;
        return;
        }
    
        for (int xczNonH=0; xczNonH < *pCounterCount; xczNonH++){
            [&]() {
pCounters[xczNonH]=deserialize_VkPerformanceCounterKHR(result["members"]["pCounters"]["members"][xczNonH]);}();;
        }
        }();
[&]() {

        if (result["members"]["pCounterDescriptions"].contains("null")){
        pCounterDescriptions=NULL;
        return;
        }
    
        for (int hecnMPf=0; hecnMPf < *pCounterCount; hecnMPf++){
            [&]() {
pCounterDescriptions[hecnMPf]=deserialize_VkPerformanceCounterDescriptionKHR(result["members"]["pCounterDescriptions"]["members"][hecnMPf]);}();;
        }
        }();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(
VkPhysicalDevice physicalDevice,
 const VkQueryPoolPerformanceCreateInfoKHR* pPerformanceQueryCreateInfo,
 uint32_t* pNumPasses
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["pPerformanceQueryCreateInfo"]=[&]() {
    json return_HdYvhTs=json({});
    
        if (pPerformanceQueryCreateInfo==NULL){
            return_HdYvhTs["null"]=true;
            return return_HdYvhTs;
        }
        return_HdYvhTs=[&]() {
    json return_ewXtyvx=json({});
    return serialize_VkQueryPoolPerformanceCreateInfoKHR(*pPerformanceQueryCreateInfo);}();
return return_HdYvhTs;}();
data_json["members"]["pNumPasses"]=[&]() {
    json return_NECAfdR=json({});
    
        if (pNumPasses==NULL){
            return_NECAfdR["null"]=true;
            return return_NECAfdR;
        }
        return_NECAfdR=[&]() {
    json return_ycHAJvu=json({});
    return serialize_uint32_t(*pNumPasses);}();
return return_NECAfdR;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();

[&]() {

        if (result["members"]["pNumPasses"].contains("null")){
        pNumPasses=NULL;
        return;
        }
    [&]() {
*(pNumPasses)=deserialize_uint32_t(result["members"]["pNumPasses"]);}();
}();
}
VkResult vkAcquireProfilingLockKHR(
VkDevice device,
 const VkAcquireProfilingLockInfoKHR* pInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkAcquireProfilingLockKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pInfo"]=[&]() {
    json return_PvvMlSF=json({});
    
        if (pInfo==NULL){
            return_PvvMlSF["null"]=true;
            return return_PvvMlSF;
        }
        return_PvvMlSF=[&]() {
    json return_OBbeGbH=json({});
    return serialize_VkAcquireProfilingLockInfoKHR(*pInfo);}();
return return_PvvMlSF;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkReleaseProfilingLockKHR(
VkDevice device
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkReleaseProfilingLockKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_ZkFakia=json({});
    return serialize_VkDevice(device);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
}
VkResult vkGetImageDrmFormatModifierPropertiesEXT(
VkDevice device,
 VkImage image,
 VkImageDrmFormatModifierPropertiesEXT* pProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetImageDrmFormatModifierPropertiesEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["image"]=[&]() {
    json return_fgEkUQK=json({});
    return serialize_VkImage(image);}();
data_json["members"]["pProperties"]=[&]() {
    json return_NsUKWEd=json({});
    
        if (pProperties==NULL){
            return_NsUKWEd["null"]=true;
            return return_NsUKWEd;
        }
        return_NsUKWEd=[&]() {
    json return_XzXKleg=json({});
    return serialize_VkImageDrmFormatModifierPropertiesEXT(*pProperties);}();
return return_NsUKWEd;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
image=deserialize_VkImage(result["members"]["image"]);}();
[&]() {

        if (result["members"]["pProperties"].contains("null")){
        pProperties=NULL;
        return;
        }
    [&]() {
*(pProperties)=deserialize_VkImageDrmFormatModifierPropertiesEXT(result["members"]["pProperties"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
uint64_t vkGetBufferOpaqueCaptureAddress(
VkDevice device,
 const VkBufferDeviceAddressInfo* pInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetBufferOpaqueCaptureAddress";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pInfo"]=[&]() {
    json return_oEfTpxK=json({});
    
        if (pInfo==NULL){
            return_oEfTpxK["null"]=true;
            return return_oEfTpxK;
        }
        return_oEfTpxK=[&]() {
    json return_pUqNezH=json({});
    return serialize_VkBufferDeviceAddressInfo(*pInfo);}();
return return_oEfTpxK;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

uint64_t return_value;
[&]() {
return_value=deserialize_uint64_t(result["return"]);}();
return return_value;
}
uint64_t vkGetBufferOpaqueCaptureAddressKHR(
VkDevice device,
 const VkBufferDeviceAddressInfo* pInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetBufferOpaqueCaptureAddressKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pInfo"]=[&]() {
    json return_oEfTpxK=json({});
    
        if (pInfo==NULL){
            return_oEfTpxK["null"]=true;
            return return_oEfTpxK;
        }
        return_oEfTpxK=[&]() {
    json return_pUqNezH=json({});
    return serialize_VkBufferDeviceAddressInfo(*pInfo);}();
return return_oEfTpxK;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

uint64_t return_value;
[&]() {
return_value=deserialize_uint64_t(result["return"]);}();
return return_value;
}
VkDeviceAddress vkGetBufferDeviceAddress(
VkDevice device,
 const VkBufferDeviceAddressInfo* pInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetBufferDeviceAddress";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pInfo"]=[&]() {
    json return_oEfTpxK=json({});
    
        if (pInfo==NULL){
            return_oEfTpxK["null"]=true;
            return return_oEfTpxK;
        }
        return_oEfTpxK=[&]() {
    json return_pUqNezH=json({});
    return serialize_VkBufferDeviceAddressInfo(*pInfo);}();
return return_oEfTpxK;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

VkDeviceAddress return_value;
[&]() {
[&]() {
return_value=deserialize_uint64_t(result["return"]);}();}();
return return_value;
}
VkDeviceAddress vkGetBufferDeviceAddressKHR(
VkDevice device,
 const VkBufferDeviceAddressInfo* pInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetBufferDeviceAddressKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pInfo"]=[&]() {
    json return_oEfTpxK=json({});
    
        if (pInfo==NULL){
            return_oEfTpxK["null"]=true;
            return return_oEfTpxK;
        }
        return_oEfTpxK=[&]() {
    json return_pUqNezH=json({});
    return serialize_VkBufferDeviceAddressInfo(*pInfo);}();
return return_oEfTpxK;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

VkDeviceAddress return_value;
[&]() {
[&]() {
return_value=deserialize_uint64_t(result["return"]);}();}();
return return_value;
}
VkDeviceAddress vkGetBufferDeviceAddressEXT(
VkDevice device,
 const VkBufferDeviceAddressInfo* pInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetBufferDeviceAddressEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pInfo"]=[&]() {
    json return_oEfTpxK=json({});
    
        if (pInfo==NULL){
            return_oEfTpxK["null"]=true;
            return return_oEfTpxK;
        }
        return_oEfTpxK=[&]() {
    json return_pUqNezH=json({});
    return serialize_VkBufferDeviceAddressInfo(*pInfo);}();
return return_oEfTpxK;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

VkDeviceAddress return_value;
[&]() {
[&]() {
return_value=deserialize_uint64_t(result["return"]);}();}();
return return_value;
}
VkResult vkCreateHeadlessSurfaceEXT(
VkInstance instance,
 const VkHeadlessSurfaceCreateInfoEXT* pCreateInfo,
 const VkAllocationCallbacks* pAllocator,
 VkSurfaceKHR* pSurface
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreateHeadlessSurfaceEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)instance];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["instance"]=[&]() {
    json return_uDnIwUL=json({});
    return serialize_VkInstance(instance);}();
data_json["members"]["pCreateInfo"]=[&]() {
    json return_LeBhbUW=json({});
    
        if (pCreateInfo==NULL){
            return_LeBhbUW["null"]=true;
            return return_LeBhbUW;
        }
        return_LeBhbUW=[&]() {
    json return_Itysrmz=json({});
    return serialize_VkHeadlessSurfaceCreateInfoEXT(*pCreateInfo);}();
return return_LeBhbUW;}();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pSurface"]=[&]() {
    json return_BdLSuHF=json({});
    
        if (pSurface==NULL){
            return_BdLSuHF["null"]=true;
            return return_BdLSuHF;
        }
        return_BdLSuHF=[&]() {
    json return_WuReHBv=json({});
    return serialize_VkSurfaceKHR(*pSurface);}();
return return_BdLSuHF;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
instance=deserialize_VkInstance(result["members"]["instance"]);}();


[&]() {

        if (result["members"]["pSurface"].contains("null")){
        pSurface=NULL;
        return;
        }
    [&]() {
*(pSurface)=deserialize_VkSurfaceKHR(result["members"]["pSurface"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                handle_to_parent_handle_struct[(uintptr_t)(*pSurface)]=parent;
                
return return_value;
}
VkResult vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(
VkPhysicalDevice physicalDevice,
 uint32_t* pCombinationCount,
 VkFramebufferMixedSamplesCombinationNV* pCombinations
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["pCombinationCount"]=[&]() {
    json return_bIGXtAz=json({});
    
        if (pCombinationCount==NULL){
            return_bIGXtAz["null"]=true;
            return return_bIGXtAz;
        }
        return_bIGXtAz=[&]() {
    json return_WFpfPvy=json({});
    return serialize_uint32_t(*pCombinationCount);}();
return return_bIGXtAz;}();
data_json["members"]["pCombinations"]=[&]() {
    json return_uJJqVND=json({});
    
        if (pCombinations==NULL){
            return_uJJqVND["null"]=true;
            return return_uJJqVND;
        }
        
        return_uJJqVND["members"]={};
        for(int uJJqVND=0; uJJqVND < *pCombinationCount; uJJqVND++){
            json temp;
            temp=[&]() {
    json return_GCepRzv=json({});
    return serialize_VkFramebufferMixedSamplesCombinationNV(pCombinations[uJJqVND]);}();
            return_uJJqVND["members"].push_back(temp);
        }
        return return_uJJqVND;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();
[&]() {

        if (result["members"]["pCombinationCount"].contains("null")){
        pCombinationCount=NULL;
        return;
        }
    [&]() {
*(pCombinationCount)=deserialize_uint32_t(result["members"]["pCombinationCount"]);}();
}();
[&]() {

        if (result["members"]["pCombinations"].contains("null")){
        pCombinations=NULL;
        return;
        }
    
        for (int XvjMMDn=0; XvjMMDn < *pCombinationCount; XvjMMDn++){
            [&]() {
pCombinations[XvjMMDn]=deserialize_VkFramebufferMixedSamplesCombinationNV(result["members"]["pCombinations"]["members"][XvjMMDn]);}();;
        }
        }();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkInitializePerformanceApiINTEL(
VkDevice device,
 const VkInitializePerformanceApiInfoINTEL* pInitializeInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkInitializePerformanceApiINTEL";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pInitializeInfo"]=[&]() {
    json return_CovSjPo=json({});
    
        if (pInitializeInfo==NULL){
            return_CovSjPo["null"]=true;
            return return_CovSjPo;
        }
        return_CovSjPo=[&]() {
    json return_ZraxxKc=json({});
    return serialize_VkInitializePerformanceApiInfoINTEL(*pInitializeInfo);}();
return return_CovSjPo;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkUninitializePerformanceApiINTEL(
VkDevice device
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkUninitializePerformanceApiINTEL";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_ZkFakia=json({});
    return serialize_VkDevice(device);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
}
VkResult vkCmdSetPerformanceMarkerINTEL(
VkCommandBuffer commandBuffer,
 const VkPerformanceMarkerInfoINTEL* pMarkerInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetPerformanceMarkerINTEL";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pMarkerInfo"]=[&]() {
    json return_wkrGWmk=json({});
    
        if (pMarkerInfo==NULL){
            return_wkrGWmk["null"]=true;
            return return_wkrGWmk;
        }
        return_wkrGWmk=[&]() {
    json return_sqrEfUj=json({});
    return serialize_VkPerformanceMarkerInfoINTEL(*pMarkerInfo);}();
return return_wkrGWmk;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();

VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkCmdSetPerformanceStreamMarkerINTEL(
VkCommandBuffer commandBuffer,
 const VkPerformanceStreamMarkerInfoINTEL* pMarkerInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetPerformanceStreamMarkerINTEL";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pMarkerInfo"]=[&]() {
    json return_kGNypPg=json({});
    
        if (pMarkerInfo==NULL){
            return_kGNypPg["null"]=true;
            return return_kGNypPg;
        }
        return_kGNypPg=[&]() {
    json return_LizgTJX=json({});
    return serialize_VkPerformanceStreamMarkerInfoINTEL(*pMarkerInfo);}();
return return_kGNypPg;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();

VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkCmdSetPerformanceOverrideINTEL(
VkCommandBuffer commandBuffer,
 const VkPerformanceOverrideInfoINTEL* pOverrideInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetPerformanceOverrideINTEL";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pOverrideInfo"]=[&]() {
    json return_HHdsdYE=json({});
    
        if (pOverrideInfo==NULL){
            return_HHdsdYE["null"]=true;
            return return_HHdsdYE;
        }
        return_HHdsdYE=[&]() {
    json return_BQQPrcm=json({});
    return serialize_VkPerformanceOverrideInfoINTEL(*pOverrideInfo);}();
return return_HHdsdYE;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();

VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkAcquirePerformanceConfigurationINTEL(
VkDevice device,
 const VkPerformanceConfigurationAcquireInfoINTEL* pAcquireInfo,
 VkPerformanceConfigurationINTEL* pConfiguration
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkAcquirePerformanceConfigurationINTEL";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pAcquireInfo"]=[&]() {
    json return_gJOhvLs=json({});
    
        if (pAcquireInfo==NULL){
            return_gJOhvLs["null"]=true;
            return return_gJOhvLs;
        }
        return_gJOhvLs=[&]() {
    json return_GRhiEBK=json({});
    return serialize_VkPerformanceConfigurationAcquireInfoINTEL(*pAcquireInfo);}();
return return_gJOhvLs;}();
data_json["members"]["pConfiguration"]=[&]() {
    json return_zYnksFs=json({});
    
        if (pConfiguration==NULL){
            return_zYnksFs["null"]=true;
            return return_zYnksFs;
        }
        return_zYnksFs=[&]() {
    json return_UNGoqvL=json({});
    return serialize_VkPerformanceConfigurationINTEL(*pConfiguration);}();
return return_zYnksFs;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

[&]() {

        if (result["members"]["pConfiguration"].contains("null")){
        pConfiguration=NULL;
        return;
        }
    [&]() {
*(pConfiguration)=deserialize_VkPerformanceConfigurationINTEL(result["members"]["pConfiguration"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkReleasePerformanceConfigurationINTEL(
VkDevice device,
 VkPerformanceConfigurationINTEL configuration
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkReleasePerformanceConfigurationINTEL";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["configuration"]=[&]() {
    json return_swIsNOn=json({});
    return serialize_VkPerformanceConfigurationINTEL(configuration);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
configuration=deserialize_VkPerformanceConfigurationINTEL(result["members"]["configuration"]);}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkQueueSetPerformanceConfigurationINTEL(
VkQueue queue,
 VkPerformanceConfigurationINTEL configuration
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkQueueSetPerformanceConfigurationINTEL";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)queue];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["queue"]=[&]() {
    json return_KYhcIBS=json({});
    return serialize_VkQueue(queue);}();
data_json["members"]["configuration"]=[&]() {
    json return_swIsNOn=json({});
    return serialize_VkPerformanceConfigurationINTEL(configuration);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
queue=deserialize_VkQueue(result["members"]["queue"]);}();
[&]() {
configuration=deserialize_VkPerformanceConfigurationINTEL(result["members"]["configuration"]);}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkGetPerformanceParameterINTEL(
VkDevice device,
 VkPerformanceParameterTypeINTEL parameter,
 VkPerformanceValueINTEL* pValue
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPerformanceParameterINTEL";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["parameter"]=[&]() {
    json return_LpjyNtP=json({});
    return serialize_VkPerformanceParameterTypeINTEL(parameter);}();
data_json["members"]["pValue"]=[&]() {
    json return_qndEXiC=json({});
    
        if (pValue==NULL){
            return_qndEXiC["null"]=true;
            return return_qndEXiC;
        }
        return_qndEXiC=[&]() {
    json return_GDYyVfl=json({});
    return serialize_VkPerformanceValueINTEL(*pValue);}();
return return_qndEXiC;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
parameter=deserialize_VkPerformanceParameterTypeINTEL(result["members"]["parameter"]);}();
[&]() {

        if (result["members"]["pValue"].contains("null")){
        pValue=NULL;
        return;
        }
    [&]() {
*(pValue)=deserialize_VkPerformanceValueINTEL(result["members"]["pValue"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
uint64_t vkGetDeviceMemoryOpaqueCaptureAddress(
VkDevice device,
 const VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetDeviceMemoryOpaqueCaptureAddress";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pInfo"]=[&]() {
    json return_VEmTKsL=json({});
    
        if (pInfo==NULL){
            return_VEmTKsL["null"]=true;
            return return_VEmTKsL;
        }
        return_VEmTKsL=[&]() {
    json return_iErkadK=json({});
    return serialize_VkDeviceMemoryOpaqueCaptureAddressInfo(*pInfo);}();
return return_VEmTKsL;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

uint64_t return_value;
[&]() {
return_value=deserialize_uint64_t(result["return"]);}();
return return_value;
}
uint64_t vkGetDeviceMemoryOpaqueCaptureAddressKHR(
VkDevice device,
 const VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetDeviceMemoryOpaqueCaptureAddressKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pInfo"]=[&]() {
    json return_VEmTKsL=json({});
    
        if (pInfo==NULL){
            return_VEmTKsL["null"]=true;
            return return_VEmTKsL;
        }
        return_VEmTKsL=[&]() {
    json return_iErkadK=json({});
    return serialize_VkDeviceMemoryOpaqueCaptureAddressInfo(*pInfo);}();
return return_VEmTKsL;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

uint64_t return_value;
[&]() {
return_value=deserialize_uint64_t(result["return"]);}();
return return_value;
}
VkResult vkGetPipelineExecutablePropertiesKHR(
VkDevice                        device,
 const VkPipelineInfoKHR*        pPipelineInfo,
 uint32_t* pExecutableCount,
 VkPipelineExecutablePropertiesKHR* pProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPipelineExecutablePropertiesKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_gfYkxqS=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pPipelineInfo"]=[&]() {
    json return_HwyBGwa=json({});
    
        if (pPipelineInfo==NULL){
            return_HwyBGwa["null"]=true;
            return return_HwyBGwa;
        }
        return_HwyBGwa=[&]() {
    json return_TLfnwTW=json({});
    return serialize_VkPipelineInfoKHR(*pPipelineInfo);}();
return return_HwyBGwa;}();
data_json["members"]["pExecutableCount"]=[&]() {
    json return_LkLaFMy=json({});
    
        if (pExecutableCount==NULL){
            return_LkLaFMy["null"]=true;
            return return_LkLaFMy;
        }
        return_LkLaFMy=[&]() {
    json return_QiRcvmU=json({});
    return serialize_uint32_t(*pExecutableCount);}();
return return_LkLaFMy;}();
data_json["members"]["pProperties"]=[&]() {
    json return_MfBMWZU=json({});
    
        if (pProperties==NULL){
            return_MfBMWZU["null"]=true;
            return return_MfBMWZU;
        }
        
        return_MfBMWZU["members"]={};
        for(int MfBMWZU=0; MfBMWZU < *pExecutableCount; MfBMWZU++){
            json temp;
            temp=[&]() {
    json return_qZWFlaZ=json({});
    return serialize_VkPipelineExecutablePropertiesKHR(pProperties[MfBMWZU]);}();
            return_MfBMWZU["members"].push_back(temp);
        }
        return return_MfBMWZU;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

[&]() {

        if (result["members"]["pExecutableCount"].contains("null")){
        pExecutableCount=NULL;
        return;
        }
    [&]() {
*(pExecutableCount)=deserialize_uint32_t(result["members"]["pExecutableCount"]);}();
}();
[&]() {

        if (result["members"]["pProperties"].contains("null")){
        pProperties=NULL;
        return;
        }
    
        for (int UWMvWwe=0; UWMvWwe < *pExecutableCount; UWMvWwe++){
            [&]() {
pProperties[UWMvWwe]=deserialize_VkPipelineExecutablePropertiesKHR(result["members"]["pProperties"]["members"][UWMvWwe]);}();;
        }
        }();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkGetPipelineExecutableStatisticsKHR(
VkDevice                        device,
 const VkPipelineExecutableInfoKHR*  pExecutableInfo,
 uint32_t* pStatisticCount,
 VkPipelineExecutableStatisticKHR* pStatistics
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPipelineExecutableStatisticsKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_gfYkxqS=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pExecutableInfo"]=[&]() {
    json return_tEKaePe=json({});
    
        if (pExecutableInfo==NULL){
            return_tEKaePe["null"]=true;
            return return_tEKaePe;
        }
        return_tEKaePe=[&]() {
    json return_FTuApiV=json({});
    return serialize_VkPipelineExecutableInfoKHR(*pExecutableInfo);}();
return return_tEKaePe;}();
data_json["members"]["pStatisticCount"]=[&]() {
    json return_VzPQOCh=json({});
    
        if (pStatisticCount==NULL){
            return_VzPQOCh["null"]=true;
            return return_VzPQOCh;
        }
        return_VzPQOCh=[&]() {
    json return_BZTRrPz=json({});
    return serialize_uint32_t(*pStatisticCount);}();
return return_VzPQOCh;}();
data_json["members"]["pStatistics"]=[&]() {
    json return_PgeZbCC=json({});
    
        if (pStatistics==NULL){
            return_PgeZbCC["null"]=true;
            return return_PgeZbCC;
        }
        
        return_PgeZbCC["members"]={};
        for(int PgeZbCC=0; PgeZbCC < *pStatisticCount; PgeZbCC++){
            json temp;
            temp=[&]() {
    json return_QdNNlyg=json({});
    return serialize_VkPipelineExecutableStatisticKHR(pStatistics[PgeZbCC]);}();
            return_PgeZbCC["members"].push_back(temp);
        }
        return return_PgeZbCC;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

[&]() {

        if (result["members"]["pStatisticCount"].contains("null")){
        pStatisticCount=NULL;
        return;
        }
    [&]() {
*(pStatisticCount)=deserialize_uint32_t(result["members"]["pStatisticCount"]);}();
}();
[&]() {

        if (result["members"]["pStatistics"].contains("null")){
        pStatistics=NULL;
        return;
        }
    
        for (int CbVfpTx=0; CbVfpTx < *pStatisticCount; CbVfpTx++){
            [&]() {
pStatistics[CbVfpTx]=deserialize_VkPipelineExecutableStatisticKHR(result["members"]["pStatistics"]["members"][CbVfpTx]);}();;
        }
        }();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkGetPipelineExecutableInternalRepresentationsKHR(
VkDevice                        device,
 const VkPipelineExecutableInfoKHR*  pExecutableInfo,
 uint32_t* pInternalRepresentationCount,
 VkPipelineExecutableInternalRepresentationKHR* pInternalRepresentations
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPipelineExecutableInternalRepresentationsKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_gfYkxqS=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pExecutableInfo"]=[&]() {
    json return_tEKaePe=json({});
    
        if (pExecutableInfo==NULL){
            return_tEKaePe["null"]=true;
            return return_tEKaePe;
        }
        return_tEKaePe=[&]() {
    json return_FTuApiV=json({});
    return serialize_VkPipelineExecutableInfoKHR(*pExecutableInfo);}();
return return_tEKaePe;}();
data_json["members"]["pInternalRepresentationCount"]=[&]() {
    json return_bDuryxI=json({});
    
        if (pInternalRepresentationCount==NULL){
            return_bDuryxI["null"]=true;
            return return_bDuryxI;
        }
        return_bDuryxI=[&]() {
    json return_ITcWWaQ=json({});
    return serialize_uint32_t(*pInternalRepresentationCount);}();
return return_bDuryxI;}();
data_json["members"]["pInternalRepresentations"]=[&]() {
    json return_SLcxFBK=json({});
    
        if (pInternalRepresentations==NULL){
            return_SLcxFBK["null"]=true;
            return return_SLcxFBK;
        }
        
        return_SLcxFBK["members"]={};
        for(int SLcxFBK=0; SLcxFBK < *pInternalRepresentationCount; SLcxFBK++){
            json temp;
            temp=[&]() {
    json return_cNvmAUw=json({});
    return serialize_VkPipelineExecutableInternalRepresentationKHR(pInternalRepresentations[SLcxFBK]);}();
            return_SLcxFBK["members"].push_back(temp);
        }
        return return_SLcxFBK;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

[&]() {

        if (result["members"]["pInternalRepresentationCount"].contains("null")){
        pInternalRepresentationCount=NULL;
        return;
        }
    [&]() {
*(pInternalRepresentationCount)=deserialize_uint32_t(result["members"]["pInternalRepresentationCount"]);}();
}();
[&]() {

        if (result["members"]["pInternalRepresentations"].contains("null")){
        pInternalRepresentations=NULL;
        return;
        }
    
        for (int UdoPHFJ=0; UdoPHFJ < *pInternalRepresentationCount; UdoPHFJ++){
            [&]() {
pInternalRepresentations[UdoPHFJ]=deserialize_VkPipelineExecutableInternalRepresentationKHR(result["members"]["pInternalRepresentations"]["members"][UdoPHFJ]);}();;
        }
        }();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkCmdSetLineStippleEXT(
VkCommandBuffer commandBuffer,
 uint32_t lineStippleFactor,
 uint16_t lineStipplePattern
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetLineStippleEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["lineStippleFactor"]=[&]() {
    json return_fFBaCJi=json({});
    return serialize_uint32_t(lineStippleFactor);}();
data_json["members"]["lineStipplePattern"]=[&]() {
    json return_ssNNuVt=json({});
    return serialize_uint16_t(lineStipplePattern);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
lineStippleFactor=deserialize_uint32_t(result["members"]["lineStippleFactor"]);}();
[&]() {
lineStipplePattern=deserialize_uint16_t(result["members"]["lineStipplePattern"]);}();
}
VkResult vkGetPhysicalDeviceToolProperties(
VkPhysicalDevice physicalDevice,
 uint32_t* pToolCount,
 VkPhysicalDeviceToolProperties* pToolProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceToolProperties";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["pToolCount"]=[&]() {
    json return_FgrrCOe=json({});
    
        if (pToolCount==NULL){
            return_FgrrCOe["null"]=true;
            return return_FgrrCOe;
        }
        return_FgrrCOe=[&]() {
    json return_ScTAvyk=json({});
    return serialize_uint32_t(*pToolCount);}();
return return_FgrrCOe;}();
data_json["members"]["pToolProperties"]=[&]() {
    json return_MwoqEkr=json({});
    
        if (pToolProperties==NULL){
            return_MwoqEkr["null"]=true;
            return return_MwoqEkr;
        }
        
        return_MwoqEkr["members"]={};
        for(int MwoqEkr=0; MwoqEkr < *pToolCount; MwoqEkr++){
            json temp;
            temp=[&]() {
    json return_ezdcFdP=json({});
    return serialize_VkPhysicalDeviceToolProperties(pToolProperties[MwoqEkr]);}();
            return_MwoqEkr["members"].push_back(temp);
        }
        return return_MwoqEkr;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();
[&]() {

        if (result["members"]["pToolCount"].contains("null")){
        pToolCount=NULL;
        return;
        }
    [&]() {
*(pToolCount)=deserialize_uint32_t(result["members"]["pToolCount"]);}();
}();
[&]() {

        if (result["members"]["pToolProperties"].contains("null")){
        pToolProperties=NULL;
        return;
        }
    
        for (int bpJVaxt=0; bpJVaxt < *pToolCount; bpJVaxt++){
            [&]() {
pToolProperties[bpJVaxt]=deserialize_VkPhysicalDeviceToolProperties(result["members"]["pToolProperties"]["members"][bpJVaxt]);}();;
        }
        }();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkGetPhysicalDeviceToolPropertiesEXT(
VkPhysicalDevice physicalDevice,
 uint32_t* pToolCount,
 VkPhysicalDeviceToolProperties* pToolProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceToolPropertiesEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["pToolCount"]=[&]() {
    json return_FgrrCOe=json({});
    
        if (pToolCount==NULL){
            return_FgrrCOe["null"]=true;
            return return_FgrrCOe;
        }
        return_FgrrCOe=[&]() {
    json return_ScTAvyk=json({});
    return serialize_uint32_t(*pToolCount);}();
return return_FgrrCOe;}();
data_json["members"]["pToolProperties"]=[&]() {
    json return_MwoqEkr=json({});
    
        if (pToolProperties==NULL){
            return_MwoqEkr["null"]=true;
            return return_MwoqEkr;
        }
        
        return_MwoqEkr["members"]={};
        for(int MwoqEkr=0; MwoqEkr < *pToolCount; MwoqEkr++){
            json temp;
            temp=[&]() {
    json return_ezdcFdP=json({});
    return serialize_VkPhysicalDeviceToolProperties(pToolProperties[MwoqEkr]);}();
            return_MwoqEkr["members"].push_back(temp);
        }
        return return_MwoqEkr;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();
[&]() {

        if (result["members"]["pToolCount"].contains("null")){
        pToolCount=NULL;
        return;
        }
    [&]() {
*(pToolCount)=deserialize_uint32_t(result["members"]["pToolCount"]);}();
}();
[&]() {

        if (result["members"]["pToolProperties"].contains("null")){
        pToolProperties=NULL;
        return;
        }
    
        for (int bpJVaxt=0; bpJVaxt < *pToolCount; bpJVaxt++){
            [&]() {
pToolProperties[bpJVaxt]=deserialize_VkPhysicalDeviceToolProperties(result["members"]["pToolProperties"]["members"][bpJVaxt]);}();;
        }
        }();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkCreateAccelerationStructureKHR(
VkDevice                                           device,
 const VkAccelerationStructureCreateInfoKHR*        pCreateInfo,
 const VkAllocationCallbacks*       pAllocator,
 VkAccelerationStructureKHR*                        pAccelerationStructure
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreateAccelerationStructureKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_fUuTEWM=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pCreateInfo"]=[&]() {
    json return_iJQlCga=json({});
    
        if (pCreateInfo==NULL){
            return_iJQlCga["null"]=true;
            return return_iJQlCga;
        }
        return_iJQlCga=[&]() {
    json return_ibEtlkn=json({});
    return serialize_VkAccelerationStructureCreateInfoKHR(*pCreateInfo);}();
return return_iJQlCga;}();
data_json["members"]["pAllocator"]=[&]() {
    json return_sNVoEUY=json({});
    
        if (pAllocator==NULL){
            return_sNVoEUY["null"]=true;
            return return_sNVoEUY;
        }
        return_sNVoEUY=[&]() {
    json return_rkNRtqM=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_sNVoEUY;}();
data_json["members"]["pAccelerationStructure"]=[&]() {
    json return_MTkmBUe=json({});
    
        if (pAccelerationStructure==NULL){
            return_MTkmBUe["null"]=true;
            return return_MTkmBUe;
        }
        return_MTkmBUe=[&]() {
    json return_GaYJnPv=json({});
    return serialize_VkAccelerationStructureKHR(*pAccelerationStructure);}();
return return_MTkmBUe;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();


[&]() {

        if (result["members"]["pAccelerationStructure"].contains("null")){
        pAccelerationStructure=NULL;
        return;
        }
    [&]() {
*(pAccelerationStructure)=deserialize_VkAccelerationStructureKHR(result["members"]["pAccelerationStructure"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                handle_to_parent_handle_struct[(uintptr_t)(*pAccelerationStructure)]=parent;
                
return return_value;
}
void vkCmdBuildAccelerationStructuresKHR(
VkCommandBuffer                                    commandBuffer,
 uint32_t infoCount,
 const VkAccelerationStructureBuildGeometryInfoKHR* pInfos,
 const VkAccelerationStructureBuildRangeInfoKHR* const* ppBuildRangeInfos
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdBuildAccelerationStructuresKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_XLdGYWc=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["infoCount"]=[&]() {
    json return_Wujdqpv=json({});
    return serialize_uint32_t(infoCount);}();
data_json["members"]["pInfos"]=[&]() {
    json return_TTUtDcj=json({});
    
        if (pInfos==NULL){
            return_TTUtDcj["null"]=true;
            return return_TTUtDcj;
        }
        
        return_TTUtDcj["members"]={};
        for(int TTUtDcj=0; TTUtDcj < infoCount; TTUtDcj++){
            json temp;
            temp=[&]() {
    json return_iixjkyv=json({});
    return serialize_VkAccelerationStructureBuildGeometryInfoKHR(pInfos[TTUtDcj]);}();
            return_TTUtDcj["members"].push_back(temp);
        }
        return return_TTUtDcj;
        }();
data_json["members"]["ppBuildRangeInfos"]=[&]() {
    json return_FepwNEA=json({});
    
        if (ppBuildRangeInfos==NULL){
            return_FepwNEA["null"]=true;
            return return_FepwNEA;
        }
        
        return_FepwNEA["members"]={};
        for(int FepwNEA=0; FepwNEA < infoCount; FepwNEA++){
            json temp;
            temp=[&]() {
    json return_lHHXjZl=json({});
    
        if (ppBuildRangeInfos[FepwNEA]==NULL){
            return_lHHXjZl["null"]=true;
            return return_lHHXjZl;
        }
        return_lHHXjZl=[&]() {
    json return_HbGBIoh=json({});
    return serialize_VkAccelerationStructureBuildRangeInfoKHR(*ppBuildRangeInfos[FepwNEA]);}();
return return_lHHXjZl;}();
            return_FepwNEA["members"].push_back(temp);
        }
        return return_FepwNEA;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
infoCount=deserialize_uint32_t(result["members"]["infoCount"]);}();


}
void vkCmdBuildAccelerationStructuresIndirectKHR(
VkCommandBuffer                  commandBuffer,
 uint32_t                                           infoCount,
 const VkAccelerationStructureBuildGeometryInfoKHR* pInfos,
 const VkDeviceAddress*             pIndirectDeviceAddresses,
 const uint32_t*                    pIndirectStrides,
 const uint32_t* const*             ppMaxPrimitiveCounts
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdBuildAccelerationStructuresIndirectKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_bKSpebt=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["infoCount"]=[&]() {
    json return_OOnmQvH=json({});
    return serialize_uint32_t(infoCount);}();
data_json["members"]["pInfos"]=[&]() {
    json return_TTUtDcj=json({});
    
        if (pInfos==NULL){
            return_TTUtDcj["null"]=true;
            return return_TTUtDcj;
        }
        
        return_TTUtDcj["members"]={};
        for(int TTUtDcj=0; TTUtDcj < infoCount; TTUtDcj++){
            json temp;
            temp=[&]() {
    json return_iixjkyv=json({});
    return serialize_VkAccelerationStructureBuildGeometryInfoKHR(pInfos[TTUtDcj]);}();
            return_TTUtDcj["members"].push_back(temp);
        }
        return return_TTUtDcj;
        }();
data_json["members"]["pIndirectDeviceAddresses"]=[&]() {
    json return_OwZsgZX=json({});
    
        if (pIndirectDeviceAddresses==NULL){
            return_OwZsgZX["null"]=true;
            return return_OwZsgZX;
        }
        
        return_OwZsgZX["members"]={};
        for(int OwZsgZX=0; OwZsgZX < infoCount; OwZsgZX++){
            json temp;
            temp=[&]() {
    json return_LCMPzwg=json({});
    return_LCMPzwg=[&]() {
    json return_jkfWtoI=json({});
    return serialize_uint64_t(pIndirectDeviceAddresses[OwZsgZX]);}();return return_LCMPzwg;}();
            return_OwZsgZX["members"].push_back(temp);
        }
        return return_OwZsgZX;
        }();
data_json["members"]["pIndirectStrides"]=[&]() {
    json return_mFMuFEu=json({});
    
        if (pIndirectStrides==NULL){
            return_mFMuFEu["null"]=true;
            return return_mFMuFEu;
        }
        
        return_mFMuFEu["members"]={};
        for(int mFMuFEu=0; mFMuFEu < infoCount; mFMuFEu++){
            json temp;
            temp=[&]() {
    json return_KlNvzLe=json({});
    return serialize_uint32_t(pIndirectStrides[mFMuFEu]);}();
            return_mFMuFEu["members"].push_back(temp);
        }
        return return_mFMuFEu;
        }();
data_json["members"]["ppMaxPrimitiveCounts"]=[&]() {
    json return_bjTxLAj=json({});
    
        if (ppMaxPrimitiveCounts==NULL){
            return_bjTxLAj["null"]=true;
            return return_bjTxLAj;
        }
        
        return_bjTxLAj["members"]={};
        for(int bjTxLAj=0; bjTxLAj < infoCount; bjTxLAj++){
            json temp;
            temp=[&]() {
    json return_YCjurkR=json({});
    
        if (ppMaxPrimitiveCounts[bjTxLAj]==NULL){
            return_YCjurkR["null"]=true;
            return return_YCjurkR;
        }
        return_YCjurkR=[&]() {
    json return_wCwXUfM=json({});
    return serialize_uint32_t(*ppMaxPrimitiveCounts[bjTxLAj]);}();
return return_YCjurkR;}();
            return_bjTxLAj["members"].push_back(temp);
        }
        return return_bjTxLAj;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
infoCount=deserialize_uint32_t(result["members"]["infoCount"]);}();




}
VkResult vkBuildAccelerationStructuresKHR(
VkDevice                                           device,
 VkDeferredOperationKHR deferredOperation,
 uint32_t infoCount,
 const VkAccelerationStructureBuildGeometryInfoKHR* pInfos,
 const VkAccelerationStructureBuildRangeInfoKHR* const* ppBuildRangeInfos
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkBuildAccelerationStructuresKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_fUuTEWM=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["deferredOperation"]=[&]() {
    json return_zJwBFEh=json({});
    return serialize_VkDeferredOperationKHR(deferredOperation);}();
data_json["members"]["infoCount"]=[&]() {
    json return_Wujdqpv=json({});
    return serialize_uint32_t(infoCount);}();
data_json["members"]["pInfos"]=[&]() {
    json return_TTUtDcj=json({});
    
        if (pInfos==NULL){
            return_TTUtDcj["null"]=true;
            return return_TTUtDcj;
        }
        
        return_TTUtDcj["members"]={};
        for(int TTUtDcj=0; TTUtDcj < infoCount; TTUtDcj++){
            json temp;
            temp=[&]() {
    json return_iixjkyv=json({});
    return serialize_VkAccelerationStructureBuildGeometryInfoKHR(pInfos[TTUtDcj]);}();
            return_TTUtDcj["members"].push_back(temp);
        }
        return return_TTUtDcj;
        }();
data_json["members"]["ppBuildRangeInfos"]=[&]() {
    json return_FepwNEA=json({});
    
        if (ppBuildRangeInfos==NULL){
            return_FepwNEA["null"]=true;
            return return_FepwNEA;
        }
        
        return_FepwNEA["members"]={};
        for(int FepwNEA=0; FepwNEA < infoCount; FepwNEA++){
            json temp;
            temp=[&]() {
    json return_lHHXjZl=json({});
    
        if (ppBuildRangeInfos[FepwNEA]==NULL){
            return_lHHXjZl["null"]=true;
            return return_lHHXjZl;
        }
        return_lHHXjZl=[&]() {
    json return_HbGBIoh=json({});
    return serialize_VkAccelerationStructureBuildRangeInfoKHR(*ppBuildRangeInfos[FepwNEA]);}();
return return_lHHXjZl;}();
            return_FepwNEA["members"].push_back(temp);
        }
        return return_FepwNEA;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
deferredOperation=deserialize_VkDeferredOperationKHR(result["members"]["deferredOperation"]);}();
[&]() {
infoCount=deserialize_uint32_t(result["members"]["infoCount"]);}();


VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkDeviceAddress vkGetAccelerationStructureDeviceAddressKHR(
VkDevice device,
 const VkAccelerationStructureDeviceAddressInfoKHR* pInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetAccelerationStructureDeviceAddressKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pInfo"]=[&]() {
    json return_LRvGJOb=json({});
    
        if (pInfo==NULL){
            return_LRvGJOb["null"]=true;
            return return_LRvGJOb;
        }
        return_LRvGJOb=[&]() {
    json return_aosBGwy=json({});
    return serialize_VkAccelerationStructureDeviceAddressInfoKHR(*pInfo);}();
return return_LRvGJOb;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

VkDeviceAddress return_value;
[&]() {
[&]() {
return_value=deserialize_uint64_t(result["return"]);}();}();
return return_value;
}
VkResult vkCreateDeferredOperationKHR(
VkDevice device,
 const VkAllocationCallbacks* pAllocator,
 VkDeferredOperationKHR* pDeferredOperation
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreateDeferredOperationKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pDeferredOperation"]=[&]() {
    json return_CKyJuyJ=json({});
    
        if (pDeferredOperation==NULL){
            return_CKyJuyJ["null"]=true;
            return return_CKyJuyJ;
        }
        return_CKyJuyJ=[&]() {
    json return_LxYeBVp=json({});
    return serialize_VkDeferredOperationKHR(*pDeferredOperation);}();
return return_CKyJuyJ;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

[&]() {

        if (result["members"]["pDeferredOperation"].contains("null")){
        pDeferredOperation=NULL;
        return;
        }
    [&]() {
*(pDeferredOperation)=deserialize_VkDeferredOperationKHR(result["members"]["pDeferredOperation"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                handle_to_parent_handle_struct[(uintptr_t)(*pDeferredOperation)]=parent;
                
return return_value;
}
void vkDestroyDeferredOperationKHR(
VkDevice device,
 VkDeferredOperationKHR operation,
 const VkAllocationCallbacks* pAllocator
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkDestroyDeferredOperationKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["operation"]=[&]() {
    json return_LKUIfnC=json({});
    return serialize_VkDeferredOperationKHR(operation);}();
data_json["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
operation=deserialize_VkDeferredOperationKHR(result["members"]["operation"]);}();

}
uint32_t vkGetDeferredOperationMaxConcurrencyKHR(
VkDevice device,
 VkDeferredOperationKHR operation
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetDeferredOperationMaxConcurrencyKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["operation"]=[&]() {
    json return_PKjUYUb=json({});
    return serialize_VkDeferredOperationKHR(operation);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
operation=deserialize_VkDeferredOperationKHR(result["members"]["operation"]);}();
uint32_t return_value;
[&]() {
return_value=deserialize_uint32_t(result["return"]);}();
return return_value;
}
VkResult vkGetDeferredOperationResultKHR(
VkDevice device,
 VkDeferredOperationKHR operation
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetDeferredOperationResultKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["operation"]=[&]() {
    json return_PKjUYUb=json({});
    return serialize_VkDeferredOperationKHR(operation);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
operation=deserialize_VkDeferredOperationKHR(result["members"]["operation"]);}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkDeferredOperationJoinKHR(
VkDevice device,
 VkDeferredOperationKHR operation
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkDeferredOperationJoinKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["operation"]=[&]() {
    json return_PKjUYUb=json({});
    return serialize_VkDeferredOperationKHR(operation);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
operation=deserialize_VkDeferredOperationKHR(result["members"]["operation"]);}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkGetPipelineIndirectMemoryRequirementsNV(
VkDevice device,
 const VkComputePipelineCreateInfo* pCreateInfo,
 VkMemoryRequirements2* pMemoryRequirements
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPipelineIndirectMemoryRequirementsNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pCreateInfo"]=[&]() {
    json return_IDIAeld=json({});
    
        if (pCreateInfo==NULL){
            return_IDIAeld["null"]=true;
            return return_IDIAeld;
        }
        return_IDIAeld=[&]() {
    json return_AuEVYwy=json({});
    return serialize_VkComputePipelineCreateInfo(*pCreateInfo);}();
return return_IDIAeld;}();
data_json["members"]["pMemoryRequirements"]=[&]() {
    json return_aEBODbS=json({});
    
        if (pMemoryRequirements==NULL){
            return_aEBODbS["null"]=true;
            return return_aEBODbS;
        }
        return_aEBODbS=[&]() {
    json return_hGmebmD=json({});
    return serialize_VkMemoryRequirements2(*pMemoryRequirements);}();
return return_aEBODbS;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

[&]() {

        if (result["members"]["pMemoryRequirements"].contains("null")){
        pMemoryRequirements=NULL;
        return;
        }
    [&]() {
*(pMemoryRequirements)=deserialize_VkMemoryRequirements2(result["members"]["pMemoryRequirements"]);}();
}();
}
VkDeviceAddress vkGetPipelineIndirectDeviceAddressNV(
VkDevice device,
 const VkPipelineIndirectDeviceAddressInfoNV* pInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPipelineIndirectDeviceAddressNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pInfo"]=[&]() {
    json return_lCiRNLA=json({});
    
        if (pInfo==NULL){
            return_lCiRNLA["null"]=true;
            return return_lCiRNLA;
        }
        return_lCiRNLA=[&]() {
    json return_kmdAoQQ=json({});
    return serialize_VkPipelineIndirectDeviceAddressInfoNV(*pInfo);}();
return return_lCiRNLA;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

VkDeviceAddress return_value;
[&]() {
[&]() {
return_value=deserialize_uint64_t(result["return"]);}();}();
return return_value;
}
void vkCmdSetCullMode(
VkCommandBuffer commandBuffer,
 VkCullModeFlags cullMode
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetCullMode";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["cullMode"]=[&]() {
    json return_dAeZuYI=json({});
    return serialize_VkCullModeFlags(cullMode);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
cullMode=deserialize_VkCullModeFlags(result["members"]["cullMode"]);}();
}
void vkCmdSetCullModeEXT(
VkCommandBuffer commandBuffer,
 VkCullModeFlags cullMode
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetCullModeEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["cullMode"]=[&]() {
    json return_dAeZuYI=json({});
    return serialize_VkCullModeFlags(cullMode);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
cullMode=deserialize_VkCullModeFlags(result["members"]["cullMode"]);}();
}
void vkCmdSetFrontFace(
VkCommandBuffer commandBuffer,
 VkFrontFace frontFace
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetFrontFace";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["frontFace"]=[&]() {
    json return_UMqipcu=json({});
    return serialize_VkFrontFace(frontFace);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
frontFace=deserialize_VkFrontFace(result["members"]["frontFace"]);}();
}
void vkCmdSetFrontFaceEXT(
VkCommandBuffer commandBuffer,
 VkFrontFace frontFace
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetFrontFaceEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["frontFace"]=[&]() {
    json return_UMqipcu=json({});
    return serialize_VkFrontFace(frontFace);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
frontFace=deserialize_VkFrontFace(result["members"]["frontFace"]);}();
}
void vkCmdSetPrimitiveTopology(
VkCommandBuffer commandBuffer,
 VkPrimitiveTopology primitiveTopology
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetPrimitiveTopology";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["primitiveTopology"]=[&]() {
    json return_DubMBkq=json({});
    return serialize_VkPrimitiveTopology(primitiveTopology);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
primitiveTopology=deserialize_VkPrimitiveTopology(result["members"]["primitiveTopology"]);}();
}
void vkCmdSetPrimitiveTopologyEXT(
VkCommandBuffer commandBuffer,
 VkPrimitiveTopology primitiveTopology
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetPrimitiveTopologyEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["primitiveTopology"]=[&]() {
    json return_DubMBkq=json({});
    return serialize_VkPrimitiveTopology(primitiveTopology);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
primitiveTopology=deserialize_VkPrimitiveTopology(result["members"]["primitiveTopology"]);}();
}
void vkCmdSetViewportWithCount(
VkCommandBuffer commandBuffer,
 uint32_t viewportCount,
 const VkViewport* pViewports
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetViewportWithCount";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["viewportCount"]=[&]() {
    json return_pDFybJm=json({});
    return serialize_uint32_t(viewportCount);}();
data_json["members"]["pViewports"]=[&]() {
    json return_wNAxnoK=json({});
    
        if (pViewports==NULL){
            return_wNAxnoK["null"]=true;
            return return_wNAxnoK;
        }
        
        return_wNAxnoK["members"]={};
        for(int wNAxnoK=0; wNAxnoK < viewportCount; wNAxnoK++){
            json temp;
            temp=[&]() {
    json return_HSUHymr=json({});
    return serialize_VkViewport(pViewports[wNAxnoK]);}();
            return_wNAxnoK["members"].push_back(temp);
        }
        return return_wNAxnoK;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
viewportCount=deserialize_uint32_t(result["members"]["viewportCount"]);}();

}
void vkCmdSetViewportWithCountEXT(
VkCommandBuffer commandBuffer,
 uint32_t viewportCount,
 const VkViewport* pViewports
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetViewportWithCountEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["viewportCount"]=[&]() {
    json return_pDFybJm=json({});
    return serialize_uint32_t(viewportCount);}();
data_json["members"]["pViewports"]=[&]() {
    json return_wNAxnoK=json({});
    
        if (pViewports==NULL){
            return_wNAxnoK["null"]=true;
            return return_wNAxnoK;
        }
        
        return_wNAxnoK["members"]={};
        for(int wNAxnoK=0; wNAxnoK < viewportCount; wNAxnoK++){
            json temp;
            temp=[&]() {
    json return_HSUHymr=json({});
    return serialize_VkViewport(pViewports[wNAxnoK]);}();
            return_wNAxnoK["members"].push_back(temp);
        }
        return return_wNAxnoK;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
viewportCount=deserialize_uint32_t(result["members"]["viewportCount"]);}();

}
void vkCmdSetScissorWithCount(
VkCommandBuffer commandBuffer,
 uint32_t scissorCount,
 const VkRect2D* pScissors
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetScissorWithCount";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["scissorCount"]=[&]() {
    json return_aFbyEkl=json({});
    return serialize_uint32_t(scissorCount);}();
data_json["members"]["pScissors"]=[&]() {
    json return_HoUaZsF=json({});
    
        if (pScissors==NULL){
            return_HoUaZsF["null"]=true;
            return return_HoUaZsF;
        }
        
        return_HoUaZsF["members"]={};
        for(int HoUaZsF=0; HoUaZsF < scissorCount; HoUaZsF++){
            json temp;
            temp=[&]() {
    json return_fcbwury=json({});
    return serialize_VkRect2D(pScissors[HoUaZsF]);}();
            return_HoUaZsF["members"].push_back(temp);
        }
        return return_HoUaZsF;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
scissorCount=deserialize_uint32_t(result["members"]["scissorCount"]);}();

}
void vkCmdSetScissorWithCountEXT(
VkCommandBuffer commandBuffer,
 uint32_t scissorCount,
 const VkRect2D* pScissors
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetScissorWithCountEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["scissorCount"]=[&]() {
    json return_aFbyEkl=json({});
    return serialize_uint32_t(scissorCount);}();
data_json["members"]["pScissors"]=[&]() {
    json return_HoUaZsF=json({});
    
        if (pScissors==NULL){
            return_HoUaZsF["null"]=true;
            return return_HoUaZsF;
        }
        
        return_HoUaZsF["members"]={};
        for(int HoUaZsF=0; HoUaZsF < scissorCount; HoUaZsF++){
            json temp;
            temp=[&]() {
    json return_fcbwury=json({});
    return serialize_VkRect2D(pScissors[HoUaZsF]);}();
            return_HoUaZsF["members"].push_back(temp);
        }
        return return_HoUaZsF;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
scissorCount=deserialize_uint32_t(result["members"]["scissorCount"]);}();

}
void vkCmdBindIndexBuffer2KHR(
VkCommandBuffer commandBuffer,
 VkBuffer buffer,
 VkDeviceSize offset,
 VkDeviceSize size,
 VkIndexType indexType
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdBindIndexBuffer2KHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["buffer"]=[&]() {
    json return_Fjwvwzv=json({});
    return serialize_VkBuffer(buffer);}();
data_json["members"]["offset"]=[&]() {
    json return_vTtZMhj=json({});
    return_vTtZMhj=[&]() {
    json return_eEWibmR=json({});
    return serialize_uint64_t(offset);}();return return_vTtZMhj;}();
data_json["members"]["size"]=[&]() {
    json return_EcDMigR=json({});
    return_EcDMigR=[&]() {
    json return_vDcVgJV=json({});
    return serialize_uint64_t(size);}();return return_EcDMigR;}();
data_json["members"]["indexType"]=[&]() {
    json return_VcYhjnj=json({});
    return serialize_VkIndexType(indexType);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
buffer=deserialize_VkBuffer(result["members"]["buffer"]);}();
[&]() {
[&]() {
offset=deserialize_uint64_t(result["members"]["offset"]);}();}();
[&]() {
[&]() {
size=deserialize_uint64_t(result["members"]["size"]);}();}();
[&]() {
indexType=deserialize_VkIndexType(result["members"]["indexType"]);}();
}
void vkCmdBindVertexBuffers2(
VkCommandBuffer commandBuffer,
 uint32_t firstBinding,
 uint32_t bindingCount,
 const VkBuffer* pBuffers,
 const VkDeviceSize* pOffsets,
 const VkDeviceSize* pSizes,
 const VkDeviceSize* pStrides
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdBindVertexBuffers2";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["firstBinding"]=[&]() {
    json return_JzarCRw=json({});
    return serialize_uint32_t(firstBinding);}();
data_json["members"]["bindingCount"]=[&]() {
    json return_KKQzFnF=json({});
    return serialize_uint32_t(bindingCount);}();
data_json["members"]["pBuffers"]=[&]() {
    json return_mLfEgSk=json({});
    
        if (pBuffers==NULL){
            return_mLfEgSk["null"]=true;
            return return_mLfEgSk;
        }
        
        return_mLfEgSk["members"]={};
        for(int mLfEgSk=0; mLfEgSk < bindingCount; mLfEgSk++){
            json temp;
            temp=[&]() {
    json return_sdCvutr=json({});
    return serialize_VkBuffer(pBuffers[mLfEgSk]);}();
            return_mLfEgSk["members"].push_back(temp);
        }
        return return_mLfEgSk;
        }();
data_json["members"]["pOffsets"]=[&]() {
    json return_esRfpyF=json({});
    
        if (pOffsets==NULL){
            return_esRfpyF["null"]=true;
            return return_esRfpyF;
        }
        
        return_esRfpyF["members"]={};
        for(int esRfpyF=0; esRfpyF < bindingCount; esRfpyF++){
            json temp;
            temp=[&]() {
    json return_sWZhkpG=json({});
    return_sWZhkpG=[&]() {
    json return_hRuQZpF=json({});
    return serialize_uint64_t(pOffsets[esRfpyF]);}();return return_sWZhkpG;}();
            return_esRfpyF["members"].push_back(temp);
        }
        return return_esRfpyF;
        }();
data_json["members"]["pSizes"]=[&]() {
    json return_RBHkmii=json({});
    
        if (pSizes==NULL){
            return_RBHkmii["null"]=true;
            return return_RBHkmii;
        }
        
        return_RBHkmii["members"]={};
        for(int RBHkmii=0; RBHkmii < bindingCount; RBHkmii++){
            json temp;
            temp=[&]() {
    json return_tdqWtNc=json({});
    return_tdqWtNc=[&]() {
    json return_rdEpStj=json({});
    return serialize_uint64_t(pSizes[RBHkmii]);}();return return_tdqWtNc;}();
            return_RBHkmii["members"].push_back(temp);
        }
        return return_RBHkmii;
        }();
data_json["members"]["pStrides"]=[&]() {
    json return_oeZvugE=json({});
    
        if (pStrides==NULL){
            return_oeZvugE["null"]=true;
            return return_oeZvugE;
        }
        
        return_oeZvugE["members"]={};
        for(int oeZvugE=0; oeZvugE < bindingCount; oeZvugE++){
            json temp;
            temp=[&]() {
    json return_VLLWSVC=json({});
    return_VLLWSVC=[&]() {
    json return_bUoPhng=json({});
    return serialize_uint64_t(pStrides[oeZvugE]);}();return return_VLLWSVC;}();
            return_oeZvugE["members"].push_back(temp);
        }
        return return_oeZvugE;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
firstBinding=deserialize_uint32_t(result["members"]["firstBinding"]);}();
[&]() {
bindingCount=deserialize_uint32_t(result["members"]["bindingCount"]);}();




}
void vkCmdBindVertexBuffers2EXT(
VkCommandBuffer commandBuffer,
 uint32_t firstBinding,
 uint32_t bindingCount,
 const VkBuffer* pBuffers,
 const VkDeviceSize* pOffsets,
 const VkDeviceSize* pSizes,
 const VkDeviceSize* pStrides
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdBindVertexBuffers2EXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["firstBinding"]=[&]() {
    json return_JzarCRw=json({});
    return serialize_uint32_t(firstBinding);}();
data_json["members"]["bindingCount"]=[&]() {
    json return_KKQzFnF=json({});
    return serialize_uint32_t(bindingCount);}();
data_json["members"]["pBuffers"]=[&]() {
    json return_mLfEgSk=json({});
    
        if (pBuffers==NULL){
            return_mLfEgSk["null"]=true;
            return return_mLfEgSk;
        }
        
        return_mLfEgSk["members"]={};
        for(int mLfEgSk=0; mLfEgSk < bindingCount; mLfEgSk++){
            json temp;
            temp=[&]() {
    json return_sdCvutr=json({});
    return serialize_VkBuffer(pBuffers[mLfEgSk]);}();
            return_mLfEgSk["members"].push_back(temp);
        }
        return return_mLfEgSk;
        }();
data_json["members"]["pOffsets"]=[&]() {
    json return_esRfpyF=json({});
    
        if (pOffsets==NULL){
            return_esRfpyF["null"]=true;
            return return_esRfpyF;
        }
        
        return_esRfpyF["members"]={};
        for(int esRfpyF=0; esRfpyF < bindingCount; esRfpyF++){
            json temp;
            temp=[&]() {
    json return_sWZhkpG=json({});
    return_sWZhkpG=[&]() {
    json return_hRuQZpF=json({});
    return serialize_uint64_t(pOffsets[esRfpyF]);}();return return_sWZhkpG;}();
            return_esRfpyF["members"].push_back(temp);
        }
        return return_esRfpyF;
        }();
data_json["members"]["pSizes"]=[&]() {
    json return_RBHkmii=json({});
    
        if (pSizes==NULL){
            return_RBHkmii["null"]=true;
            return return_RBHkmii;
        }
        
        return_RBHkmii["members"]={};
        for(int RBHkmii=0; RBHkmii < bindingCount; RBHkmii++){
            json temp;
            temp=[&]() {
    json return_tdqWtNc=json({});
    return_tdqWtNc=[&]() {
    json return_rdEpStj=json({});
    return serialize_uint64_t(pSizes[RBHkmii]);}();return return_tdqWtNc;}();
            return_RBHkmii["members"].push_back(temp);
        }
        return return_RBHkmii;
        }();
data_json["members"]["pStrides"]=[&]() {
    json return_oeZvugE=json({});
    
        if (pStrides==NULL){
            return_oeZvugE["null"]=true;
            return return_oeZvugE;
        }
        
        return_oeZvugE["members"]={};
        for(int oeZvugE=0; oeZvugE < bindingCount; oeZvugE++){
            json temp;
            temp=[&]() {
    json return_VLLWSVC=json({});
    return_VLLWSVC=[&]() {
    json return_bUoPhng=json({});
    return serialize_uint64_t(pStrides[oeZvugE]);}();return return_VLLWSVC;}();
            return_oeZvugE["members"].push_back(temp);
        }
        return return_oeZvugE;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
firstBinding=deserialize_uint32_t(result["members"]["firstBinding"]);}();
[&]() {
bindingCount=deserialize_uint32_t(result["members"]["bindingCount"]);}();




}
void vkCmdSetDepthTestEnable(
VkCommandBuffer commandBuffer,
 VkBool32 depthTestEnable
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetDepthTestEnable";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["depthTestEnable"]=[&]() {
    json return_qYxwYki=json({});
    return_qYxwYki=[&]() {
    json return_tUVNIDV=json({});
    return serialize_uint32_t(depthTestEnable);}();return return_qYxwYki;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
[&]() {
depthTestEnable=deserialize_uint32_t(result["members"]["depthTestEnable"]);}();}();
}
void vkCmdSetDepthTestEnableEXT(
VkCommandBuffer commandBuffer,
 VkBool32 depthTestEnable
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetDepthTestEnableEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["depthTestEnable"]=[&]() {
    json return_qYxwYki=json({});
    return_qYxwYki=[&]() {
    json return_tUVNIDV=json({});
    return serialize_uint32_t(depthTestEnable);}();return return_qYxwYki;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
[&]() {
depthTestEnable=deserialize_uint32_t(result["members"]["depthTestEnable"]);}();}();
}
void vkCmdSetDepthWriteEnable(
VkCommandBuffer commandBuffer,
 VkBool32 depthWriteEnable
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetDepthWriteEnable";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["depthWriteEnable"]=[&]() {
    json return_busnIZO=json({});
    return_busnIZO=[&]() {
    json return_VqpOVml=json({});
    return serialize_uint32_t(depthWriteEnable);}();return return_busnIZO;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
[&]() {
depthWriteEnable=deserialize_uint32_t(result["members"]["depthWriteEnable"]);}();}();
}
void vkCmdSetDepthWriteEnableEXT(
VkCommandBuffer commandBuffer,
 VkBool32 depthWriteEnable
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetDepthWriteEnableEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["depthWriteEnable"]=[&]() {
    json return_busnIZO=json({});
    return_busnIZO=[&]() {
    json return_VqpOVml=json({});
    return serialize_uint32_t(depthWriteEnable);}();return return_busnIZO;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
[&]() {
depthWriteEnable=deserialize_uint32_t(result["members"]["depthWriteEnable"]);}();}();
}
void vkCmdSetDepthCompareOp(
VkCommandBuffer commandBuffer,
 VkCompareOp depthCompareOp
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetDepthCompareOp";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["depthCompareOp"]=[&]() {
    json return_XsmHvKq=json({});
    return serialize_VkCompareOp(depthCompareOp);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
depthCompareOp=deserialize_VkCompareOp(result["members"]["depthCompareOp"]);}();
}
void vkCmdSetDepthCompareOpEXT(
VkCommandBuffer commandBuffer,
 VkCompareOp depthCompareOp
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetDepthCompareOpEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["depthCompareOp"]=[&]() {
    json return_XsmHvKq=json({});
    return serialize_VkCompareOp(depthCompareOp);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
depthCompareOp=deserialize_VkCompareOp(result["members"]["depthCompareOp"]);}();
}
void vkCmdSetDepthBoundsTestEnable(
VkCommandBuffer commandBuffer,
 VkBool32 depthBoundsTestEnable
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetDepthBoundsTestEnable";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["depthBoundsTestEnable"]=[&]() {
    json return_hQuXotg=json({});
    return_hQuXotg=[&]() {
    json return_nYagQtX=json({});
    return serialize_uint32_t(depthBoundsTestEnable);}();return return_hQuXotg;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
[&]() {
depthBoundsTestEnable=deserialize_uint32_t(result["members"]["depthBoundsTestEnable"]);}();}();
}
void vkCmdSetDepthBoundsTestEnableEXT(
VkCommandBuffer commandBuffer,
 VkBool32 depthBoundsTestEnable
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetDepthBoundsTestEnableEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["depthBoundsTestEnable"]=[&]() {
    json return_hQuXotg=json({});
    return_hQuXotg=[&]() {
    json return_nYagQtX=json({});
    return serialize_uint32_t(depthBoundsTestEnable);}();return return_hQuXotg;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
[&]() {
depthBoundsTestEnable=deserialize_uint32_t(result["members"]["depthBoundsTestEnable"]);}();}();
}
void vkCmdSetStencilTestEnable(
VkCommandBuffer commandBuffer,
 VkBool32 stencilTestEnable
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetStencilTestEnable";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["stencilTestEnable"]=[&]() {
    json return_ObkuCZG=json({});
    return_ObkuCZG=[&]() {
    json return_EnnpddA=json({});
    return serialize_uint32_t(stencilTestEnable);}();return return_ObkuCZG;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
[&]() {
stencilTestEnable=deserialize_uint32_t(result["members"]["stencilTestEnable"]);}();}();
}
void vkCmdSetStencilTestEnableEXT(
VkCommandBuffer commandBuffer,
 VkBool32 stencilTestEnable
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetStencilTestEnableEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["stencilTestEnable"]=[&]() {
    json return_ObkuCZG=json({});
    return_ObkuCZG=[&]() {
    json return_EnnpddA=json({});
    return serialize_uint32_t(stencilTestEnable);}();return return_ObkuCZG;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
[&]() {
stencilTestEnable=deserialize_uint32_t(result["members"]["stencilTestEnable"]);}();}();
}
void vkCmdSetStencilOp(
VkCommandBuffer commandBuffer,
 VkStencilFaceFlags faceMask,
 VkStencilOp failOp,
 VkStencilOp passOp,
 VkStencilOp depthFailOp,
 VkCompareOp compareOp
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetStencilOp";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["faceMask"]=[&]() {
    json return_zgrwSjb=json({});
    return serialize_VkStencilFaceFlags(faceMask);}();
data_json["members"]["failOp"]=[&]() {
    json return_FBWQPdC=json({});
    return serialize_VkStencilOp(failOp);}();
data_json["members"]["passOp"]=[&]() {
    json return_fWFxxZL=json({});
    return serialize_VkStencilOp(passOp);}();
data_json["members"]["depthFailOp"]=[&]() {
    json return_XXLuRmr=json({});
    return serialize_VkStencilOp(depthFailOp);}();
data_json["members"]["compareOp"]=[&]() {
    json return_fRQiFEF=json({});
    return serialize_VkCompareOp(compareOp);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
faceMask=deserialize_VkStencilFaceFlags(result["members"]["faceMask"]);}();
[&]() {
failOp=deserialize_VkStencilOp(result["members"]["failOp"]);}();
[&]() {
passOp=deserialize_VkStencilOp(result["members"]["passOp"]);}();
[&]() {
depthFailOp=deserialize_VkStencilOp(result["members"]["depthFailOp"]);}();
[&]() {
compareOp=deserialize_VkCompareOp(result["members"]["compareOp"]);}();
}
void vkCmdSetStencilOpEXT(
VkCommandBuffer commandBuffer,
 VkStencilFaceFlags faceMask,
 VkStencilOp failOp,
 VkStencilOp passOp,
 VkStencilOp depthFailOp,
 VkCompareOp compareOp
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetStencilOpEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["faceMask"]=[&]() {
    json return_zgrwSjb=json({});
    return serialize_VkStencilFaceFlags(faceMask);}();
data_json["members"]["failOp"]=[&]() {
    json return_FBWQPdC=json({});
    return serialize_VkStencilOp(failOp);}();
data_json["members"]["passOp"]=[&]() {
    json return_fWFxxZL=json({});
    return serialize_VkStencilOp(passOp);}();
data_json["members"]["depthFailOp"]=[&]() {
    json return_XXLuRmr=json({});
    return serialize_VkStencilOp(depthFailOp);}();
data_json["members"]["compareOp"]=[&]() {
    json return_fRQiFEF=json({});
    return serialize_VkCompareOp(compareOp);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
faceMask=deserialize_VkStencilFaceFlags(result["members"]["faceMask"]);}();
[&]() {
failOp=deserialize_VkStencilOp(result["members"]["failOp"]);}();
[&]() {
passOp=deserialize_VkStencilOp(result["members"]["passOp"]);}();
[&]() {
depthFailOp=deserialize_VkStencilOp(result["members"]["depthFailOp"]);}();
[&]() {
compareOp=deserialize_VkCompareOp(result["members"]["compareOp"]);}();
}
void vkCmdSetPatchControlPointsEXT(
VkCommandBuffer commandBuffer,
 uint32_t patchControlPoints
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetPatchControlPointsEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["patchControlPoints"]=[&]() {
    json return_hMXwzbS=json({});
    return serialize_uint32_t(patchControlPoints);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
patchControlPoints=deserialize_uint32_t(result["members"]["patchControlPoints"]);}();
}
void vkCmdSetRasterizerDiscardEnable(
VkCommandBuffer commandBuffer,
 VkBool32 rasterizerDiscardEnable
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetRasterizerDiscardEnable";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["rasterizerDiscardEnable"]=[&]() {
    json return_aQrQuZN=json({});
    return_aQrQuZN=[&]() {
    json return_nPJPYWH=json({});
    return serialize_uint32_t(rasterizerDiscardEnable);}();return return_aQrQuZN;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
[&]() {
rasterizerDiscardEnable=deserialize_uint32_t(result["members"]["rasterizerDiscardEnable"]);}();}();
}
void vkCmdSetRasterizerDiscardEnableEXT(
VkCommandBuffer commandBuffer,
 VkBool32 rasterizerDiscardEnable
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetRasterizerDiscardEnableEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["rasterizerDiscardEnable"]=[&]() {
    json return_aQrQuZN=json({});
    return_aQrQuZN=[&]() {
    json return_nPJPYWH=json({});
    return serialize_uint32_t(rasterizerDiscardEnable);}();return return_aQrQuZN;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
[&]() {
rasterizerDiscardEnable=deserialize_uint32_t(result["members"]["rasterizerDiscardEnable"]);}();}();
}
void vkCmdSetDepthBiasEnable(
VkCommandBuffer commandBuffer,
 VkBool32 depthBiasEnable
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetDepthBiasEnable";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["depthBiasEnable"]=[&]() {
    json return_WNrmSdQ=json({});
    return_WNrmSdQ=[&]() {
    json return_tWEfVWE=json({});
    return serialize_uint32_t(depthBiasEnable);}();return return_WNrmSdQ;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
[&]() {
depthBiasEnable=deserialize_uint32_t(result["members"]["depthBiasEnable"]);}();}();
}
void vkCmdSetDepthBiasEnableEXT(
VkCommandBuffer commandBuffer,
 VkBool32 depthBiasEnable
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetDepthBiasEnableEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["depthBiasEnable"]=[&]() {
    json return_WNrmSdQ=json({});
    return_WNrmSdQ=[&]() {
    json return_tWEfVWE=json({});
    return serialize_uint32_t(depthBiasEnable);}();return return_WNrmSdQ;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
[&]() {
depthBiasEnable=deserialize_uint32_t(result["members"]["depthBiasEnable"]);}();}();
}
void vkCmdSetLogicOpEXT(
VkCommandBuffer commandBuffer,
 VkLogicOp logicOp
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetLogicOpEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["logicOp"]=[&]() {
    json return_YKivIbb=json({});
    return serialize_VkLogicOp(logicOp);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
logicOp=deserialize_VkLogicOp(result["members"]["logicOp"]);}();
}
void vkCmdSetPrimitiveRestartEnable(
VkCommandBuffer commandBuffer,
 VkBool32 primitiveRestartEnable
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetPrimitiveRestartEnable";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["primitiveRestartEnable"]=[&]() {
    json return_EXDlsDK=json({});
    return_EXDlsDK=[&]() {
    json return_tMUubda=json({});
    return serialize_uint32_t(primitiveRestartEnable);}();return return_EXDlsDK;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
[&]() {
primitiveRestartEnable=deserialize_uint32_t(result["members"]["primitiveRestartEnable"]);}();}();
}
void vkCmdSetPrimitiveRestartEnableEXT(
VkCommandBuffer commandBuffer,
 VkBool32 primitiveRestartEnable
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetPrimitiveRestartEnableEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["primitiveRestartEnable"]=[&]() {
    json return_EXDlsDK=json({});
    return_EXDlsDK=[&]() {
    json return_tMUubda=json({});
    return serialize_uint32_t(primitiveRestartEnable);}();return return_EXDlsDK;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
[&]() {
primitiveRestartEnable=deserialize_uint32_t(result["members"]["primitiveRestartEnable"]);}();}();
}
void vkCmdSetTessellationDomainOriginEXT(
VkCommandBuffer commandBuffer,
 VkTessellationDomainOrigin domainOrigin
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetTessellationDomainOriginEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["domainOrigin"]=[&]() {
    json return_fpBUivI=json({});
    return serialize_VkTessellationDomainOrigin(domainOrigin);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
domainOrigin=deserialize_VkTessellationDomainOrigin(result["members"]["domainOrigin"]);}();
}
void vkCmdSetDepthClampEnableEXT(
VkCommandBuffer commandBuffer,
 VkBool32 depthClampEnable
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetDepthClampEnableEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["depthClampEnable"]=[&]() {
    json return_JdgiFAA=json({});
    return_JdgiFAA=[&]() {
    json return_jObEjmU=json({});
    return serialize_uint32_t(depthClampEnable);}();return return_JdgiFAA;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
[&]() {
depthClampEnable=deserialize_uint32_t(result["members"]["depthClampEnable"]);}();}();
}
void vkCmdSetPolygonModeEXT(
VkCommandBuffer commandBuffer,
 VkPolygonMode polygonMode
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetPolygonModeEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["polygonMode"]=[&]() {
    json return_NNYkWqR=json({});
    return serialize_VkPolygonMode(polygonMode);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
polygonMode=deserialize_VkPolygonMode(result["members"]["polygonMode"]);}();
}
void vkCmdSetRasterizationSamplesEXT(
VkCommandBuffer commandBuffer,
 VkSampleCountFlagBits  rasterizationSamples
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetRasterizationSamplesEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["rasterizationSamples"]=[&]() {
    json return_vXvcCRN=json({});
    return serialize_VkSampleCountFlagBits(rasterizationSamples);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
rasterizationSamples=deserialize_VkSampleCountFlagBits(result["members"]["rasterizationSamples"]);}();
}
void vkCmdSetSampleMaskEXT(
VkCommandBuffer commandBuffer,
 VkSampleCountFlagBits  samples,
 const VkSampleMask*    pSampleMask
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetSampleMaskEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["samples"]=[&]() {
    json return_GUZifKZ=json({});
    return serialize_VkSampleCountFlagBits(samples);}();
data_json["members"]["pSampleMask"]=[&]() {
    json return_mAdzwNS=json({});
    
        if (pSampleMask==NULL){
            return_mAdzwNS["null"]=true;
            return return_mAdzwNS;
        }
        
        return_mAdzwNS["members"]={};
        for(int mAdzwNS=0; mAdzwNS < (samples + 31) / 32; mAdzwNS++){
            json temp;
            temp=[&]() {
    json return_CSUlKtZ=json({});
    return_CSUlKtZ=[&]() {
    json return_yjhXluf=json({});
    return serialize_uint32_t(pSampleMask[mAdzwNS]);}();return return_CSUlKtZ;}();
            return_mAdzwNS["members"].push_back(temp);
        }
        return return_mAdzwNS;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
samples=deserialize_VkSampleCountFlagBits(result["members"]["samples"]);}();

}
void vkCmdSetAlphaToCoverageEnableEXT(
VkCommandBuffer commandBuffer,
 VkBool32 alphaToCoverageEnable
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetAlphaToCoverageEnableEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["alphaToCoverageEnable"]=[&]() {
    json return_yXmeAyB=json({});
    return_yXmeAyB=[&]() {
    json return_lMWBIng=json({});
    return serialize_uint32_t(alphaToCoverageEnable);}();return return_yXmeAyB;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
[&]() {
alphaToCoverageEnable=deserialize_uint32_t(result["members"]["alphaToCoverageEnable"]);}();}();
}
void vkCmdSetAlphaToOneEnableEXT(
VkCommandBuffer commandBuffer,
 VkBool32 alphaToOneEnable
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetAlphaToOneEnableEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["alphaToOneEnable"]=[&]() {
    json return_fBDiLmL=json({});
    return_fBDiLmL=[&]() {
    json return_IRJYATM=json({});
    return serialize_uint32_t(alphaToOneEnable);}();return return_fBDiLmL;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
[&]() {
alphaToOneEnable=deserialize_uint32_t(result["members"]["alphaToOneEnable"]);}();}();
}
void vkCmdSetLogicOpEnableEXT(
VkCommandBuffer commandBuffer,
 VkBool32 logicOpEnable
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetLogicOpEnableEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["logicOpEnable"]=[&]() {
    json return_OxBMHyB=json({});
    return_OxBMHyB=[&]() {
    json return_GUsjiyw=json({});
    return serialize_uint32_t(logicOpEnable);}();return return_OxBMHyB;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
[&]() {
logicOpEnable=deserialize_uint32_t(result["members"]["logicOpEnable"]);}();}();
}
void vkCmdSetColorBlendEnableEXT(
VkCommandBuffer commandBuffer,
 uint32_t firstAttachment,
 uint32_t attachmentCount,
 const VkBool32* pColorBlendEnables
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetColorBlendEnableEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["firstAttachment"]=[&]() {
    json return_VUODySw=json({});
    return serialize_uint32_t(firstAttachment);}();
data_json["members"]["attachmentCount"]=[&]() {
    json return_RLrTJzT=json({});
    return serialize_uint32_t(attachmentCount);}();
data_json["members"]["pColorBlendEnables"]=[&]() {
    json return_DNHsXon=json({});
    
        if (pColorBlendEnables==NULL){
            return_DNHsXon["null"]=true;
            return return_DNHsXon;
        }
        
        return_DNHsXon["members"]={};
        for(int DNHsXon=0; DNHsXon < attachmentCount; DNHsXon++){
            json temp;
            temp=[&]() {
    json return_rBkDbyH=json({});
    return_rBkDbyH=[&]() {
    json return_nIdADfB=json({});
    return serialize_uint32_t(pColorBlendEnables[DNHsXon]);}();return return_rBkDbyH;}();
            return_DNHsXon["members"].push_back(temp);
        }
        return return_DNHsXon;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
firstAttachment=deserialize_uint32_t(result["members"]["firstAttachment"]);}();
[&]() {
attachmentCount=deserialize_uint32_t(result["members"]["attachmentCount"]);}();

}
void vkCmdSetColorBlendEquationEXT(
VkCommandBuffer commandBuffer,
 uint32_t firstAttachment,
 uint32_t attachmentCount,
 const VkColorBlendEquationEXT* pColorBlendEquations
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetColorBlendEquationEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["firstAttachment"]=[&]() {
    json return_VUODySw=json({});
    return serialize_uint32_t(firstAttachment);}();
data_json["members"]["attachmentCount"]=[&]() {
    json return_RLrTJzT=json({});
    return serialize_uint32_t(attachmentCount);}();
data_json["members"]["pColorBlendEquations"]=[&]() {
    json return_QfnSuhN=json({});
    
        if (pColorBlendEquations==NULL){
            return_QfnSuhN["null"]=true;
            return return_QfnSuhN;
        }
        
        return_QfnSuhN["members"]={};
        for(int QfnSuhN=0; QfnSuhN < attachmentCount; QfnSuhN++){
            json temp;
            temp=[&]() {
    json return_goOAgww=json({});
    return serialize_VkColorBlendEquationEXT(pColorBlendEquations[QfnSuhN]);}();
            return_QfnSuhN["members"].push_back(temp);
        }
        return return_QfnSuhN;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
firstAttachment=deserialize_uint32_t(result["members"]["firstAttachment"]);}();
[&]() {
attachmentCount=deserialize_uint32_t(result["members"]["attachmentCount"]);}();

}
void vkCmdSetColorWriteMaskEXT(
VkCommandBuffer commandBuffer,
 uint32_t firstAttachment,
 uint32_t attachmentCount,
 const VkColorComponentFlags* pColorWriteMasks
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetColorWriteMaskEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["firstAttachment"]=[&]() {
    json return_VUODySw=json({});
    return serialize_uint32_t(firstAttachment);}();
data_json["members"]["attachmentCount"]=[&]() {
    json return_RLrTJzT=json({});
    return serialize_uint32_t(attachmentCount);}();
data_json["members"]["pColorWriteMasks"]=[&]() {
    json return_DyLrJGy=json({});
    
        if (pColorWriteMasks==NULL){
            return_DyLrJGy["null"]=true;
            return return_DyLrJGy;
        }
        
        return_DyLrJGy["members"]={};
        for(int DyLrJGy=0; DyLrJGy < attachmentCount; DyLrJGy++){
            json temp;
            temp=[&]() {
    json return_JQJNDhM=json({});
    return serialize_VkColorComponentFlags(pColorWriteMasks[DyLrJGy]);}();
            return_DyLrJGy["members"].push_back(temp);
        }
        return return_DyLrJGy;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
firstAttachment=deserialize_uint32_t(result["members"]["firstAttachment"]);}();
[&]() {
attachmentCount=deserialize_uint32_t(result["members"]["attachmentCount"]);}();

}
void vkCmdSetRasterizationStreamEXT(
VkCommandBuffer commandBuffer,
 uint32_t rasterizationStream
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetRasterizationStreamEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["rasterizationStream"]=[&]() {
    json return_bCzuttw=json({});
    return serialize_uint32_t(rasterizationStream);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
rasterizationStream=deserialize_uint32_t(result["members"]["rasterizationStream"]);}();
}
void vkCmdSetConservativeRasterizationModeEXT(
VkCommandBuffer commandBuffer,
 VkConservativeRasterizationModeEXT conservativeRasterizationMode
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetConservativeRasterizationModeEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["conservativeRasterizationMode"]=[&]() {
    json return_DwxCKaT=json({});
    return serialize_VkConservativeRasterizationModeEXT(conservativeRasterizationMode);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
conservativeRasterizationMode=deserialize_VkConservativeRasterizationModeEXT(result["members"]["conservativeRasterizationMode"]);}();
}
void vkCmdSetExtraPrimitiveOverestimationSizeEXT(
VkCommandBuffer commandBuffer,
 float extraPrimitiveOverestimationSize
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetExtraPrimitiveOverestimationSizeEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["extraPrimitiveOverestimationSize"]=[&]() {
    json return_DPkmoCg=json({});
    return serialize_float(extraPrimitiveOverestimationSize);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
extraPrimitiveOverestimationSize=deserialize_float(result["members"]["extraPrimitiveOverestimationSize"]);}();
}
void vkCmdSetDepthClipEnableEXT(
VkCommandBuffer commandBuffer,
 VkBool32 depthClipEnable
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetDepthClipEnableEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["depthClipEnable"]=[&]() {
    json return_AlGABdK=json({});
    return_AlGABdK=[&]() {
    json return_xABTGzX=json({});
    return serialize_uint32_t(depthClipEnable);}();return return_AlGABdK;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
[&]() {
depthClipEnable=deserialize_uint32_t(result["members"]["depthClipEnable"]);}();}();
}
void vkCmdSetSampleLocationsEnableEXT(
VkCommandBuffer commandBuffer,
 VkBool32 sampleLocationsEnable
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetSampleLocationsEnableEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["sampleLocationsEnable"]=[&]() {
    json return_rdPCitk=json({});
    return_rdPCitk=[&]() {
    json return_CNhVpIb=json({});
    return serialize_uint32_t(sampleLocationsEnable);}();return return_rdPCitk;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
[&]() {
sampleLocationsEnable=deserialize_uint32_t(result["members"]["sampleLocationsEnable"]);}();}();
}
void vkCmdSetColorBlendAdvancedEXT(
VkCommandBuffer commandBuffer,
 uint32_t firstAttachment,
 uint32_t attachmentCount,
 const VkColorBlendAdvancedEXT* pColorBlendAdvanced
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetColorBlendAdvancedEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["firstAttachment"]=[&]() {
    json return_VUODySw=json({});
    return serialize_uint32_t(firstAttachment);}();
data_json["members"]["attachmentCount"]=[&]() {
    json return_RLrTJzT=json({});
    return serialize_uint32_t(attachmentCount);}();
data_json["members"]["pColorBlendAdvanced"]=[&]() {
    json return_eDrJFOf=json({});
    
        if (pColorBlendAdvanced==NULL){
            return_eDrJFOf["null"]=true;
            return return_eDrJFOf;
        }
        
        return_eDrJFOf["members"]={};
        for(int eDrJFOf=0; eDrJFOf < attachmentCount; eDrJFOf++){
            json temp;
            temp=[&]() {
    json return_aBspNNY=json({});
    return serialize_VkColorBlendAdvancedEXT(pColorBlendAdvanced[eDrJFOf]);}();
            return_eDrJFOf["members"].push_back(temp);
        }
        return return_eDrJFOf;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
firstAttachment=deserialize_uint32_t(result["members"]["firstAttachment"]);}();
[&]() {
attachmentCount=deserialize_uint32_t(result["members"]["attachmentCount"]);}();

}
void vkCmdSetProvokingVertexModeEXT(
VkCommandBuffer commandBuffer,
 VkProvokingVertexModeEXT provokingVertexMode
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetProvokingVertexModeEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["provokingVertexMode"]=[&]() {
    json return_CtlTmjS=json({});
    return serialize_VkProvokingVertexModeEXT(provokingVertexMode);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
provokingVertexMode=deserialize_VkProvokingVertexModeEXT(result["members"]["provokingVertexMode"]);}();
}
void vkCmdSetLineRasterizationModeEXT(
VkCommandBuffer commandBuffer,
 VkLineRasterizationModeEXT lineRasterizationMode
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetLineRasterizationModeEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["lineRasterizationMode"]=[&]() {
    json return_lTuyzWo=json({});
    return serialize_VkLineRasterizationModeEXT(lineRasterizationMode);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
lineRasterizationMode=deserialize_VkLineRasterizationModeEXT(result["members"]["lineRasterizationMode"]);}();
}
void vkCmdSetLineStippleEnableEXT(
VkCommandBuffer commandBuffer,
 VkBool32 stippledLineEnable
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetLineStippleEnableEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["stippledLineEnable"]=[&]() {
    json return_HynEJkr=json({});
    return_HynEJkr=[&]() {
    json return_BTinZSA=json({});
    return serialize_uint32_t(stippledLineEnable);}();return return_HynEJkr;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
[&]() {
stippledLineEnable=deserialize_uint32_t(result["members"]["stippledLineEnable"]);}();}();
}
void vkCmdSetDepthClipNegativeOneToOneEXT(
VkCommandBuffer commandBuffer,
 VkBool32 negativeOneToOne
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetDepthClipNegativeOneToOneEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["negativeOneToOne"]=[&]() {
    json return_pZfdozP=json({});
    return_pZfdozP=[&]() {
    json return_yWyYPkg=json({});
    return serialize_uint32_t(negativeOneToOne);}();return return_pZfdozP;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
[&]() {
negativeOneToOne=deserialize_uint32_t(result["members"]["negativeOneToOne"]);}();}();
}
void vkCmdSetViewportWScalingEnableNV(
VkCommandBuffer commandBuffer,
 VkBool32 viewportWScalingEnable
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetViewportWScalingEnableNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["viewportWScalingEnable"]=[&]() {
    json return_aSezjYo=json({});
    return_aSezjYo=[&]() {
    json return_QbFhHmF=json({});
    return serialize_uint32_t(viewportWScalingEnable);}();return return_aSezjYo;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
[&]() {
viewportWScalingEnable=deserialize_uint32_t(result["members"]["viewportWScalingEnable"]);}();}();
}
void vkCmdSetViewportSwizzleNV(
VkCommandBuffer commandBuffer,
 uint32_t firstViewport,
 uint32_t viewportCount,
 const VkViewportSwizzleNV* pViewportSwizzles
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetViewportSwizzleNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["firstViewport"]=[&]() {
    json return_zZVDUCF=json({});
    return serialize_uint32_t(firstViewport);}();
data_json["members"]["viewportCount"]=[&]() {
    json return_pDFybJm=json({});
    return serialize_uint32_t(viewportCount);}();
data_json["members"]["pViewportSwizzles"]=[&]() {
    json return_hBTAvcj=json({});
    
        if (pViewportSwizzles==NULL){
            return_hBTAvcj["null"]=true;
            return return_hBTAvcj;
        }
        
        return_hBTAvcj["members"]={};
        for(int hBTAvcj=0; hBTAvcj < viewportCount; hBTAvcj++){
            json temp;
            temp=[&]() {
    json return_ZPCUgfq=json({});
    return serialize_VkViewportSwizzleNV(pViewportSwizzles[hBTAvcj]);}();
            return_hBTAvcj["members"].push_back(temp);
        }
        return return_hBTAvcj;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
firstViewport=deserialize_uint32_t(result["members"]["firstViewport"]);}();
[&]() {
viewportCount=deserialize_uint32_t(result["members"]["viewportCount"]);}();

}
void vkCmdSetCoverageToColorEnableNV(
VkCommandBuffer commandBuffer,
 VkBool32 coverageToColorEnable
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetCoverageToColorEnableNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["coverageToColorEnable"]=[&]() {
    json return_AbmvQhI=json({});
    return_AbmvQhI=[&]() {
    json return_abubMPK=json({});
    return serialize_uint32_t(coverageToColorEnable);}();return return_AbmvQhI;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
[&]() {
coverageToColorEnable=deserialize_uint32_t(result["members"]["coverageToColorEnable"]);}();}();
}
void vkCmdSetCoverageToColorLocationNV(
VkCommandBuffer commandBuffer,
 uint32_t coverageToColorLocation
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetCoverageToColorLocationNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["coverageToColorLocation"]=[&]() {
    json return_QwNFKhe=json({});
    return serialize_uint32_t(coverageToColorLocation);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
coverageToColorLocation=deserialize_uint32_t(result["members"]["coverageToColorLocation"]);}();
}
void vkCmdSetCoverageModulationModeNV(
VkCommandBuffer commandBuffer,
 VkCoverageModulationModeNV coverageModulationMode
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetCoverageModulationModeNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["coverageModulationMode"]=[&]() {
    json return_sUViadz=json({});
    return serialize_VkCoverageModulationModeNV(coverageModulationMode);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
coverageModulationMode=deserialize_VkCoverageModulationModeNV(result["members"]["coverageModulationMode"]);}();
}
void vkCmdSetCoverageModulationTableEnableNV(
VkCommandBuffer commandBuffer,
 VkBool32 coverageModulationTableEnable
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetCoverageModulationTableEnableNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["coverageModulationTableEnable"]=[&]() {
    json return_tjiTtXU=json({});
    return_tjiTtXU=[&]() {
    json return_kLLGxEa=json({});
    return serialize_uint32_t(coverageModulationTableEnable);}();return return_tjiTtXU;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
[&]() {
coverageModulationTableEnable=deserialize_uint32_t(result["members"]["coverageModulationTableEnable"]);}();}();
}
void vkCmdSetCoverageModulationTableNV(
VkCommandBuffer commandBuffer,
 uint32_t coverageModulationTableCount,
 const float* pCoverageModulationTable
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetCoverageModulationTableNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["coverageModulationTableCount"]=[&]() {
    json return_qJlplXz=json({});
    return serialize_uint32_t(coverageModulationTableCount);}();
data_json["members"]["pCoverageModulationTable"]=[&]() {
    json return_NzQqvGg=json({});
    
        if (pCoverageModulationTable==NULL){
            return_NzQqvGg["null"]=true;
            return return_NzQqvGg;
        }
        
        return_NzQqvGg["members"]={};
        for(int NzQqvGg=0; NzQqvGg < coverageModulationTableCount; NzQqvGg++){
            json temp;
            temp=[&]() {
    json return_yIqJeKk=json({});
    return serialize_float(pCoverageModulationTable[NzQqvGg]);}();
            return_NzQqvGg["members"].push_back(temp);
        }
        return return_NzQqvGg;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
coverageModulationTableCount=deserialize_uint32_t(result["members"]["coverageModulationTableCount"]);}();

}
void vkCmdSetShadingRateImageEnableNV(
VkCommandBuffer commandBuffer,
 VkBool32 shadingRateImageEnable
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetShadingRateImageEnableNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["shadingRateImageEnable"]=[&]() {
    json return_hLjlyMs=json({});
    return_hLjlyMs=[&]() {
    json return_KSCsQda=json({});
    return serialize_uint32_t(shadingRateImageEnable);}();return return_hLjlyMs;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
[&]() {
shadingRateImageEnable=deserialize_uint32_t(result["members"]["shadingRateImageEnable"]);}();}();
}
void vkCmdSetCoverageReductionModeNV(
VkCommandBuffer commandBuffer,
 VkCoverageReductionModeNV coverageReductionMode
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetCoverageReductionModeNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["coverageReductionMode"]=[&]() {
    json return_XLStYBV=json({});
    return serialize_VkCoverageReductionModeNV(coverageReductionMode);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
coverageReductionMode=deserialize_VkCoverageReductionModeNV(result["members"]["coverageReductionMode"]);}();
}
void vkCmdSetRepresentativeFragmentTestEnableNV(
VkCommandBuffer commandBuffer,
 VkBool32 representativeFragmentTestEnable
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetRepresentativeFragmentTestEnableNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["representativeFragmentTestEnable"]=[&]() {
    json return_uGfPNvm=json({});
    return_uGfPNvm=[&]() {
    json return_pmLNcAY=json({});
    return serialize_uint32_t(representativeFragmentTestEnable);}();return return_uGfPNvm;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
[&]() {
representativeFragmentTestEnable=deserialize_uint32_t(result["members"]["representativeFragmentTestEnable"]);}();}();
}
VkResult vkCreatePrivateDataSlot(
VkDevice device,
 const VkPrivateDataSlotCreateInfo* pCreateInfo,
 const VkAllocationCallbacks* pAllocator,
 VkPrivateDataSlot* pPrivateDataSlot
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreatePrivateDataSlot";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pCreateInfo"]=[&]() {
    json return_UKIqoGH=json({});
    
        if (pCreateInfo==NULL){
            return_UKIqoGH["null"]=true;
            return return_UKIqoGH;
        }
        return_UKIqoGH=[&]() {
    json return_kfBqEux=json({});
    return serialize_VkPrivateDataSlotCreateInfo(*pCreateInfo);}();
return return_UKIqoGH;}();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pPrivateDataSlot"]=[&]() {
    json return_WdYulQe=json({});
    
        if (pPrivateDataSlot==NULL){
            return_WdYulQe["null"]=true;
            return return_WdYulQe;
        }
        return_WdYulQe=[&]() {
    json return_KNrfrvF=json({});
    return serialize_VkPrivateDataSlot(*pPrivateDataSlot);}();
return return_WdYulQe;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();


[&]() {

        if (result["members"]["pPrivateDataSlot"].contains("null")){
        pPrivateDataSlot=NULL;
        return;
        }
    [&]() {
*(pPrivateDataSlot)=deserialize_VkPrivateDataSlot(result["members"]["pPrivateDataSlot"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                handle_to_parent_handle_struct[(uintptr_t)(*pPrivateDataSlot)]=parent;
                
return return_value;
}
VkResult vkCreatePrivateDataSlotEXT(
VkDevice device,
 const VkPrivateDataSlotCreateInfo* pCreateInfo,
 const VkAllocationCallbacks* pAllocator,
 VkPrivateDataSlot* pPrivateDataSlot
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreatePrivateDataSlotEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pCreateInfo"]=[&]() {
    json return_UKIqoGH=json({});
    
        if (pCreateInfo==NULL){
            return_UKIqoGH["null"]=true;
            return return_UKIqoGH;
        }
        return_UKIqoGH=[&]() {
    json return_kfBqEux=json({});
    return serialize_VkPrivateDataSlotCreateInfo(*pCreateInfo);}();
return return_UKIqoGH;}();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pPrivateDataSlot"]=[&]() {
    json return_WdYulQe=json({});
    
        if (pPrivateDataSlot==NULL){
            return_WdYulQe["null"]=true;
            return return_WdYulQe;
        }
        return_WdYulQe=[&]() {
    json return_KNrfrvF=json({});
    return serialize_VkPrivateDataSlot(*pPrivateDataSlot);}();
return return_WdYulQe;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();


[&]() {

        if (result["members"]["pPrivateDataSlot"].contains("null")){
        pPrivateDataSlot=NULL;
        return;
        }
    [&]() {
*(pPrivateDataSlot)=deserialize_VkPrivateDataSlot(result["members"]["pPrivateDataSlot"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                handle_to_parent_handle_struct[(uintptr_t)(*pPrivateDataSlot)]=parent;
                
return return_value;
}
void vkDestroyPrivateDataSlot(
VkDevice device,
 VkPrivateDataSlot privateDataSlot,
 const VkAllocationCallbacks* pAllocator
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkDestroyPrivateDataSlot";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["privateDataSlot"]=[&]() {
    json return_IxSRPBt=json({});
    return serialize_VkPrivateDataSlot(privateDataSlot);}();
data_json["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
privateDataSlot=deserialize_VkPrivateDataSlot(result["members"]["privateDataSlot"]);}();

}
void vkDestroyPrivateDataSlotEXT(
VkDevice device,
 VkPrivateDataSlot privateDataSlot,
 const VkAllocationCallbacks* pAllocator
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkDestroyPrivateDataSlotEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["privateDataSlot"]=[&]() {
    json return_IxSRPBt=json({});
    return serialize_VkPrivateDataSlot(privateDataSlot);}();
data_json["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
privateDataSlot=deserialize_VkPrivateDataSlot(result["members"]["privateDataSlot"]);}();

}
VkResult vkSetPrivateData(
VkDevice device,
 VkObjectType objectType,
 uint64_t objectHandle,
 VkPrivateDataSlot privateDataSlot,
 uint64_t data
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkSetPrivateData";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["objectType"]=[&]() {
    json return_FKOHNgI=json({});
    return serialize_VkObjectType(objectType);}();
data_json["members"]["objectHandle"]=[&]() {
    json return_QENirqr=json({});
    return serialize_uint64_t(objectHandle);}();
data_json["members"]["privateDataSlot"]=[&]() {
    json return_IxSRPBt=json({});
    return serialize_VkPrivateDataSlot(privateDataSlot);}();
data_json["members"]["data"]=[&]() {
    json return_UBNkBfg=json({});
    return serialize_uint64_t(data);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
objectType=deserialize_VkObjectType(result["members"]["objectType"]);}();
[&]() {
objectHandle=deserialize_uint64_t(result["members"]["objectHandle"]);}();
[&]() {
privateDataSlot=deserialize_VkPrivateDataSlot(result["members"]["privateDataSlot"]);}();
[&]() {
data=deserialize_uint64_t(result["members"]["data"]);}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkSetPrivateDataEXT(
VkDevice device,
 VkObjectType objectType,
 uint64_t objectHandle,
 VkPrivateDataSlot privateDataSlot,
 uint64_t data
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkSetPrivateDataEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["objectType"]=[&]() {
    json return_FKOHNgI=json({});
    return serialize_VkObjectType(objectType);}();
data_json["members"]["objectHandle"]=[&]() {
    json return_QENirqr=json({});
    return serialize_uint64_t(objectHandle);}();
data_json["members"]["privateDataSlot"]=[&]() {
    json return_IxSRPBt=json({});
    return serialize_VkPrivateDataSlot(privateDataSlot);}();
data_json["members"]["data"]=[&]() {
    json return_UBNkBfg=json({});
    return serialize_uint64_t(data);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
objectType=deserialize_VkObjectType(result["members"]["objectType"]);}();
[&]() {
objectHandle=deserialize_uint64_t(result["members"]["objectHandle"]);}();
[&]() {
privateDataSlot=deserialize_VkPrivateDataSlot(result["members"]["privateDataSlot"]);}();
[&]() {
data=deserialize_uint64_t(result["members"]["data"]);}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkGetPrivateData(
VkDevice device,
 VkObjectType objectType,
 uint64_t objectHandle,
 VkPrivateDataSlot privateDataSlot,
 uint64_t* pData
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPrivateData";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["objectType"]=[&]() {
    json return_FKOHNgI=json({});
    return serialize_VkObjectType(objectType);}();
data_json["members"]["objectHandle"]=[&]() {
    json return_QENirqr=json({});
    return serialize_uint64_t(objectHandle);}();
data_json["members"]["privateDataSlot"]=[&]() {
    json return_IxSRPBt=json({});
    return serialize_VkPrivateDataSlot(privateDataSlot);}();
data_json["members"]["pData"]=[&]() {
    json return_jFrVNYC=json({});
    
        if (pData==NULL){
            return_jFrVNYC["null"]=true;
            return return_jFrVNYC;
        }
        return_jFrVNYC=[&]() {
    json return_hjoBxyr=json({});
    return serialize_uint64_t(*pData);}();
return return_jFrVNYC;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
objectType=deserialize_VkObjectType(result["members"]["objectType"]);}();
[&]() {
objectHandle=deserialize_uint64_t(result["members"]["objectHandle"]);}();
[&]() {
privateDataSlot=deserialize_VkPrivateDataSlot(result["members"]["privateDataSlot"]);}();
[&]() {

        if (result["members"]["pData"].contains("null")){
        pData=NULL;
        return;
        }
    [&]() {
*(pData)=deserialize_uint64_t(result["members"]["pData"]);}();
}();
}
void vkGetPrivateDataEXT(
VkDevice device,
 VkObjectType objectType,
 uint64_t objectHandle,
 VkPrivateDataSlot privateDataSlot,
 uint64_t* pData
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPrivateDataEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["objectType"]=[&]() {
    json return_FKOHNgI=json({});
    return serialize_VkObjectType(objectType);}();
data_json["members"]["objectHandle"]=[&]() {
    json return_QENirqr=json({});
    return serialize_uint64_t(objectHandle);}();
data_json["members"]["privateDataSlot"]=[&]() {
    json return_IxSRPBt=json({});
    return serialize_VkPrivateDataSlot(privateDataSlot);}();
data_json["members"]["pData"]=[&]() {
    json return_jFrVNYC=json({});
    
        if (pData==NULL){
            return_jFrVNYC["null"]=true;
            return return_jFrVNYC;
        }
        return_jFrVNYC=[&]() {
    json return_hjoBxyr=json({});
    return serialize_uint64_t(*pData);}();
return return_jFrVNYC;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
objectType=deserialize_VkObjectType(result["members"]["objectType"]);}();
[&]() {
objectHandle=deserialize_uint64_t(result["members"]["objectHandle"]);}();
[&]() {
privateDataSlot=deserialize_VkPrivateDataSlot(result["members"]["privateDataSlot"]);}();
[&]() {

        if (result["members"]["pData"].contains("null")){
        pData=NULL;
        return;
        }
    [&]() {
*(pData)=deserialize_uint64_t(result["members"]["pData"]);}();
}();
}
void vkCmdCopyBuffer2(
VkCommandBuffer commandBuffer,
 const VkCopyBufferInfo2* pCopyBufferInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdCopyBuffer2";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pCopyBufferInfo"]=[&]() {
    json return_WJOqvuo=json({});
    
        if (pCopyBufferInfo==NULL){
            return_WJOqvuo["null"]=true;
            return return_WJOqvuo;
        }
        return_WJOqvuo=[&]() {
    json return_UxOOivS=json({});
    return serialize_VkCopyBufferInfo2(*pCopyBufferInfo);}();
return return_WJOqvuo;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();

}
void vkCmdCopyBuffer2KHR(
VkCommandBuffer commandBuffer,
 const VkCopyBufferInfo2* pCopyBufferInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdCopyBuffer2KHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pCopyBufferInfo"]=[&]() {
    json return_WJOqvuo=json({});
    
        if (pCopyBufferInfo==NULL){
            return_WJOqvuo["null"]=true;
            return return_WJOqvuo;
        }
        return_WJOqvuo=[&]() {
    json return_UxOOivS=json({});
    return serialize_VkCopyBufferInfo2(*pCopyBufferInfo);}();
return return_WJOqvuo;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();

}
void vkCmdCopyImage2(
VkCommandBuffer commandBuffer,
 const VkCopyImageInfo2* pCopyImageInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdCopyImage2";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pCopyImageInfo"]=[&]() {
    json return_NAsYnFQ=json({});
    
        if (pCopyImageInfo==NULL){
            return_NAsYnFQ["null"]=true;
            return return_NAsYnFQ;
        }
        return_NAsYnFQ=[&]() {
    json return_MUwLGSh=json({});
    return serialize_VkCopyImageInfo2(*pCopyImageInfo);}();
return return_NAsYnFQ;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();

}
void vkCmdCopyImage2KHR(
VkCommandBuffer commandBuffer,
 const VkCopyImageInfo2* pCopyImageInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdCopyImage2KHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pCopyImageInfo"]=[&]() {
    json return_NAsYnFQ=json({});
    
        if (pCopyImageInfo==NULL){
            return_NAsYnFQ["null"]=true;
            return return_NAsYnFQ;
        }
        return_NAsYnFQ=[&]() {
    json return_MUwLGSh=json({});
    return serialize_VkCopyImageInfo2(*pCopyImageInfo);}();
return return_NAsYnFQ;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();

}
void vkCmdBlitImage2(
VkCommandBuffer commandBuffer,
 const VkBlitImageInfo2* pBlitImageInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdBlitImage2";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pBlitImageInfo"]=[&]() {
    json return_TfIvjlb=json({});
    
        if (pBlitImageInfo==NULL){
            return_TfIvjlb["null"]=true;
            return return_TfIvjlb;
        }
        return_TfIvjlb=[&]() {
    json return_VkQeMIx=json({});
    return serialize_VkBlitImageInfo2(*pBlitImageInfo);}();
return return_TfIvjlb;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();

}
void vkCmdBlitImage2KHR(
VkCommandBuffer commandBuffer,
 const VkBlitImageInfo2* pBlitImageInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdBlitImage2KHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pBlitImageInfo"]=[&]() {
    json return_TfIvjlb=json({});
    
        if (pBlitImageInfo==NULL){
            return_TfIvjlb["null"]=true;
            return return_TfIvjlb;
        }
        return_TfIvjlb=[&]() {
    json return_VkQeMIx=json({});
    return serialize_VkBlitImageInfo2(*pBlitImageInfo);}();
return return_TfIvjlb;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();

}
void vkCmdCopyBufferToImage2(
VkCommandBuffer commandBuffer,
 const VkCopyBufferToImageInfo2* pCopyBufferToImageInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdCopyBufferToImage2";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pCopyBufferToImageInfo"]=[&]() {
    json return_BAFniQJ=json({});
    
        if (pCopyBufferToImageInfo==NULL){
            return_BAFniQJ["null"]=true;
            return return_BAFniQJ;
        }
        return_BAFniQJ=[&]() {
    json return_LpmivNp=json({});
    return serialize_VkCopyBufferToImageInfo2(*pCopyBufferToImageInfo);}();
return return_BAFniQJ;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();

}
void vkCmdCopyBufferToImage2KHR(
VkCommandBuffer commandBuffer,
 const VkCopyBufferToImageInfo2* pCopyBufferToImageInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdCopyBufferToImage2KHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pCopyBufferToImageInfo"]=[&]() {
    json return_BAFniQJ=json({});
    
        if (pCopyBufferToImageInfo==NULL){
            return_BAFniQJ["null"]=true;
            return return_BAFniQJ;
        }
        return_BAFniQJ=[&]() {
    json return_LpmivNp=json({});
    return serialize_VkCopyBufferToImageInfo2(*pCopyBufferToImageInfo);}();
return return_BAFniQJ;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();

}
void vkCmdCopyImageToBuffer2(
VkCommandBuffer commandBuffer,
 const VkCopyImageToBufferInfo2* pCopyImageToBufferInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdCopyImageToBuffer2";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pCopyImageToBufferInfo"]=[&]() {
    json return_giJOUhS=json({});
    
        if (pCopyImageToBufferInfo==NULL){
            return_giJOUhS["null"]=true;
            return return_giJOUhS;
        }
        return_giJOUhS=[&]() {
    json return_vCWCuVZ=json({});
    return serialize_VkCopyImageToBufferInfo2(*pCopyImageToBufferInfo);}();
return return_giJOUhS;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();

}
void vkCmdCopyImageToBuffer2KHR(
VkCommandBuffer commandBuffer,
 const VkCopyImageToBufferInfo2* pCopyImageToBufferInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdCopyImageToBuffer2KHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pCopyImageToBufferInfo"]=[&]() {
    json return_giJOUhS=json({});
    
        if (pCopyImageToBufferInfo==NULL){
            return_giJOUhS["null"]=true;
            return return_giJOUhS;
        }
        return_giJOUhS=[&]() {
    json return_vCWCuVZ=json({});
    return serialize_VkCopyImageToBufferInfo2(*pCopyImageToBufferInfo);}();
return return_giJOUhS;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();

}
void vkCmdResolveImage2(
VkCommandBuffer commandBuffer,
 const VkResolveImageInfo2* pResolveImageInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdResolveImage2";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pResolveImageInfo"]=[&]() {
    json return_DoRDwhn=json({});
    
        if (pResolveImageInfo==NULL){
            return_DoRDwhn["null"]=true;
            return return_DoRDwhn;
        }
        return_DoRDwhn=[&]() {
    json return_TrXxkcS=json({});
    return serialize_VkResolveImageInfo2(*pResolveImageInfo);}();
return return_DoRDwhn;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();

}
void vkCmdResolveImage2KHR(
VkCommandBuffer commandBuffer,
 const VkResolveImageInfo2* pResolveImageInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdResolveImage2KHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pResolveImageInfo"]=[&]() {
    json return_DoRDwhn=json({});
    
        if (pResolveImageInfo==NULL){
            return_DoRDwhn["null"]=true;
            return return_DoRDwhn;
        }
        return_DoRDwhn=[&]() {
    json return_TrXxkcS=json({});
    return serialize_VkResolveImageInfo2(*pResolveImageInfo);}();
return return_DoRDwhn;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();

}
void vkCmdSetFragmentShadingRateKHR(
VkCommandBuffer           commandBuffer,
 const VkExtent2D*                           pFragmentSize,
 const VkFragmentShadingRateCombinerOpKHR    combinerOps[2]
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetFragmentShadingRateKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_xppcZEe=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pFragmentSize"]=[&]() {
    json return_zJznnYs=json({});
    
        if (pFragmentSize==NULL){
            return_zJznnYs["null"]=true;
            return return_zJznnYs;
        }
        return_zJznnYs=[&]() {
    json return_qoUHOWY=json({});
    return serialize_VkExtent2D(*pFragmentSize);}();
return return_zJznnYs;}();
data_json["members"]["combinerOps"]=[&]() {
    json return_LNemlte=json({});
    
        return_LNemlte["members"]={};
        for(int LNemlte=0; LNemlte < 2; LNemlte++){
            json temp;
            temp=[&]() {
    json return_MsuTaUl=json({});
    return serialize_VkFragmentShadingRateCombinerOpKHR(combinerOps[LNemlte]);}();
            return_LNemlte["members"].push_back(temp);
        }
        return return_LNemlte;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();

[&]() {

        for (int QcNeQOM=0; QcNeQOM < 2; QcNeQOM++){
            ;
        }
        }();
}
VkResult vkGetPhysicalDeviceFragmentShadingRatesKHR(
VkPhysicalDevice physicalDevice,
 uint32_t* pFragmentShadingRateCount,
 VkPhysicalDeviceFragmentShadingRateKHR* pFragmentShadingRates
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceFragmentShadingRatesKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["pFragmentShadingRateCount"]=[&]() {
    json return_uHuUHdU=json({});
    
        if (pFragmentShadingRateCount==NULL){
            return_uHuUHdU["null"]=true;
            return return_uHuUHdU;
        }
        return_uHuUHdU=[&]() {
    json return_jCtTEZy=json({});
    return serialize_uint32_t(*pFragmentShadingRateCount);}();
return return_uHuUHdU;}();
data_json["members"]["pFragmentShadingRates"]=[&]() {
    json return_HQFayFb=json({});
    
        if (pFragmentShadingRates==NULL){
            return_HQFayFb["null"]=true;
            return return_HQFayFb;
        }
        
        return_HQFayFb["members"]={};
        for(int HQFayFb=0; HQFayFb < *pFragmentShadingRateCount; HQFayFb++){
            json temp;
            temp=[&]() {
    json return_HszRaLD=json({});
    return serialize_VkPhysicalDeviceFragmentShadingRateKHR(pFragmentShadingRates[HQFayFb]);}();
            return_HQFayFb["members"].push_back(temp);
        }
        return return_HQFayFb;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();
[&]() {

        if (result["members"]["pFragmentShadingRateCount"].contains("null")){
        pFragmentShadingRateCount=NULL;
        return;
        }
    [&]() {
*(pFragmentShadingRateCount)=deserialize_uint32_t(result["members"]["pFragmentShadingRateCount"]);}();
}();
[&]() {

        if (result["members"]["pFragmentShadingRates"].contains("null")){
        pFragmentShadingRates=NULL;
        return;
        }
    
        for (int tobxeBq=0; tobxeBq < *pFragmentShadingRateCount; tobxeBq++){
            [&]() {
pFragmentShadingRates[tobxeBq]=deserialize_VkPhysicalDeviceFragmentShadingRateKHR(result["members"]["pFragmentShadingRates"]["members"][tobxeBq]);}();;
        }
        }();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkCmdSetFragmentShadingRateEnumNV(
VkCommandBuffer           commandBuffer,
 VkFragmentShadingRateNV                     shadingRate,
 const VkFragmentShadingRateCombinerOpKHR    combinerOps[2]
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetFragmentShadingRateEnumNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_xppcZEe=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["shadingRate"]=[&]() {
    json return_WOshTwT=json({});
    return serialize_VkFragmentShadingRateNV(shadingRate);}();
data_json["members"]["combinerOps"]=[&]() {
    json return_LNemlte=json({});
    
        return_LNemlte["members"]={};
        for(int LNemlte=0; LNemlte < 2; LNemlte++){
            json temp;
            temp=[&]() {
    json return_MsuTaUl=json({});
    return serialize_VkFragmentShadingRateCombinerOpKHR(combinerOps[LNemlte]);}();
            return_LNemlte["members"].push_back(temp);
        }
        return return_LNemlte;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
shadingRate=deserialize_VkFragmentShadingRateNV(result["members"]["shadingRate"]);}();
[&]() {

        for (int QcNeQOM=0; QcNeQOM < 2; QcNeQOM++){
            ;
        }
        }();
}
void vkGetAccelerationStructureBuildSizesKHR(
VkDevice                                            device,
 VkAccelerationStructureBuildTypeKHR                 buildType,
 const VkAccelerationStructureBuildGeometryInfoKHR*  pBuildInfo,
 const uint32_t*  pMaxPrimitiveCounts,
 VkAccelerationStructureBuildSizesInfoKHR*           pSizeInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetAccelerationStructureBuildSizesKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_hNzkaKt=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["buildType"]=[&]() {
    json return_kfIIDlQ=json({});
    return serialize_VkAccelerationStructureBuildTypeKHR(buildType);}();
data_json["members"]["pBuildInfo"]=[&]() {
    json return_mtYeHhm=json({});
    
        if (pBuildInfo==NULL){
            return_mtYeHhm["null"]=true;
            return return_mtYeHhm;
        }
        return_mtYeHhm=[&]() {
    json return_SEVqHCs=json({});
    return serialize_VkAccelerationStructureBuildGeometryInfoKHR(*pBuildInfo);}();
return return_mtYeHhm;}();
data_json["members"]["pMaxPrimitiveCounts"]=[&]() {
    json return_PomaCLF=json({});
    
        if (pMaxPrimitiveCounts==NULL){
            return_PomaCLF["null"]=true;
            return return_PomaCLF;
        }
        
        return_PomaCLF["members"]={};
        for(int PomaCLF=0; PomaCLF < pBuildInfo->geometryCount; PomaCLF++){
            json temp;
            temp=[&]() {
    json return_RRTYYEU=json({});
    return serialize_uint32_t(pMaxPrimitiveCounts[PomaCLF]);}();
            return_PomaCLF["members"].push_back(temp);
        }
        return return_PomaCLF;
        }();
data_json["members"]["pSizeInfo"]=[&]() {
    json return_pwVaXgY=json({});
    
        if (pSizeInfo==NULL){
            return_pwVaXgY["null"]=true;
            return return_pwVaXgY;
        }
        return_pwVaXgY=[&]() {
    json return_lvnSQDn=json({});
    return serialize_VkAccelerationStructureBuildSizesInfoKHR(*pSizeInfo);}();
return return_pwVaXgY;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
buildType=deserialize_VkAccelerationStructureBuildTypeKHR(result["members"]["buildType"]);}();


[&]() {

        if (result["members"]["pSizeInfo"].contains("null")){
        pSizeInfo=NULL;
        return;
        }
    [&]() {
*(pSizeInfo)=deserialize_VkAccelerationStructureBuildSizesInfoKHR(result["members"]["pSizeInfo"]);}();
}();
}
void vkCmdSetVertexInputEXT(
VkCommandBuffer commandBuffer,
 uint32_t vertexBindingDescriptionCount,
 const VkVertexInputBindingDescription2EXT* pVertexBindingDescriptions,
 uint32_t vertexAttributeDescriptionCount,
 const VkVertexInputAttributeDescription2EXT* pVertexAttributeDescriptions
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetVertexInputEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["vertexBindingDescriptionCount"]=[&]() {
    json return_wjHVkdR=json({});
    return serialize_uint32_t(vertexBindingDescriptionCount);}();
data_json["members"]["pVertexBindingDescriptions"]=[&]() {
    json return_xczWBKo=json({});
    
        if (pVertexBindingDescriptions==NULL){
            return_xczWBKo["null"]=true;
            return return_xczWBKo;
        }
        
        return_xczWBKo["members"]={};
        for(int xczWBKo=0; xczWBKo < vertexBindingDescriptionCount; xczWBKo++){
            json temp;
            temp=[&]() {
    json return_dRINQvs=json({});
    return serialize_VkVertexInputBindingDescription2EXT(pVertexBindingDescriptions[xczWBKo]);}();
            return_xczWBKo["members"].push_back(temp);
        }
        return return_xczWBKo;
        }();
data_json["members"]["vertexAttributeDescriptionCount"]=[&]() {
    json return_ppBaKoo=json({});
    return serialize_uint32_t(vertexAttributeDescriptionCount);}();
data_json["members"]["pVertexAttributeDescriptions"]=[&]() {
    json return_gHcJtep=json({});
    
        if (pVertexAttributeDescriptions==NULL){
            return_gHcJtep["null"]=true;
            return return_gHcJtep;
        }
        
        return_gHcJtep["members"]={};
        for(int gHcJtep=0; gHcJtep < vertexAttributeDescriptionCount; gHcJtep++){
            json temp;
            temp=[&]() {
    json return_vwtGMqq=json({});
    return serialize_VkVertexInputAttributeDescription2EXT(pVertexAttributeDescriptions[gHcJtep]);}();
            return_gHcJtep["members"].push_back(temp);
        }
        return return_gHcJtep;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
vertexBindingDescriptionCount=deserialize_uint32_t(result["members"]["vertexBindingDescriptionCount"]);}();

[&]() {
vertexAttributeDescriptionCount=deserialize_uint32_t(result["members"]["vertexAttributeDescriptionCount"]);}();

}
void vkCmdSetColorWriteEnableEXT(
VkCommandBuffer       commandBuffer,
 uint32_t                                attachmentCount,
 const VkBool32*   pColorWriteEnables
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetColorWriteEnableEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_EOdbxEE=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["attachmentCount"]=[&]() {
    json return_iAlOkZp=json({});
    return serialize_uint32_t(attachmentCount);}();
data_json["members"]["pColorWriteEnables"]=[&]() {
    json return_JEUmWLf=json({});
    
        if (pColorWriteEnables==NULL){
            return_JEUmWLf["null"]=true;
            return return_JEUmWLf;
        }
        
        return_JEUmWLf["members"]={};
        for(int JEUmWLf=0; JEUmWLf < attachmentCount; JEUmWLf++){
            json temp;
            temp=[&]() {
    json return_yGcccEA=json({});
    return_yGcccEA=[&]() {
    json return_REiOilp=json({});
    return serialize_uint32_t(pColorWriteEnables[JEUmWLf]);}();return return_yGcccEA;}();
            return_JEUmWLf["members"].push_back(temp);
        }
        return return_JEUmWLf;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
attachmentCount=deserialize_uint32_t(result["members"]["attachmentCount"]);}();

}
void vkCmdSetEvent2(
VkCommandBuffer                   commandBuffer,
 VkEvent                                             event,
 const VkDependencyInfo*                             pDependencyInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetEvent2";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_jOBmfhz=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["event"]=[&]() {
    json return_LFOObCs=json({});
    return serialize_VkEvent(event);}();
data_json["members"]["pDependencyInfo"]=[&]() {
    json return_kkgOCck=json({});
    
        if (pDependencyInfo==NULL){
            return_kkgOCck["null"]=true;
            return return_kkgOCck;
        }
        return_kkgOCck=[&]() {
    json return_pkUQycB=json({});
    return serialize_VkDependencyInfo(*pDependencyInfo);}();
return return_kkgOCck;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
event=deserialize_VkEvent(result["members"]["event"]);}();

}
void vkCmdSetEvent2KHR(
VkCommandBuffer                   commandBuffer,
 VkEvent                                             event,
 const VkDependencyInfo*                             pDependencyInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetEvent2KHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_jOBmfhz=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["event"]=[&]() {
    json return_LFOObCs=json({});
    return serialize_VkEvent(event);}();
data_json["members"]["pDependencyInfo"]=[&]() {
    json return_kkgOCck=json({});
    
        if (pDependencyInfo==NULL){
            return_kkgOCck["null"]=true;
            return return_kkgOCck;
        }
        return_kkgOCck=[&]() {
    json return_pkUQycB=json({});
    return serialize_VkDependencyInfo(*pDependencyInfo);}();
return return_kkgOCck;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
event=deserialize_VkEvent(result["members"]["event"]);}();

}
void vkCmdResetEvent2(
VkCommandBuffer                   commandBuffer,
 VkEvent                                             event,
 VkPipelineStageFlags2               stageMask
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdResetEvent2";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_jOBmfhz=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["event"]=[&]() {
    json return_LFOObCs=json({});
    return serialize_VkEvent(event);}();
data_json["members"]["stageMask"]=[&]() {
    json return_cPWzAnW=json({});
    return serialize_VkPipelineStageFlags2(stageMask);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
event=deserialize_VkEvent(result["members"]["event"]);}();
[&]() {
stageMask=deserialize_VkPipelineStageFlags2(result["members"]["stageMask"]);}();
}
void vkCmdResetEvent2KHR(
VkCommandBuffer                   commandBuffer,
 VkEvent                                             event,
 VkPipelineStageFlags2               stageMask
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdResetEvent2KHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_jOBmfhz=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["event"]=[&]() {
    json return_LFOObCs=json({});
    return serialize_VkEvent(event);}();
data_json["members"]["stageMask"]=[&]() {
    json return_cPWzAnW=json({});
    return serialize_VkPipelineStageFlags2(stageMask);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
event=deserialize_VkEvent(result["members"]["event"]);}();
[&]() {
stageMask=deserialize_VkPipelineStageFlags2(result["members"]["stageMask"]);}();
}
void vkCmdWaitEvents2(
VkCommandBuffer                   commandBuffer,
 uint32_t                                            eventCount,
 const VkEvent*                     pEvents,
 const VkDependencyInfo*            pDependencyInfos
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdWaitEvents2";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_jOBmfhz=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["eventCount"]=[&]() {
    json return_rbibyBV=json({});
    return serialize_uint32_t(eventCount);}();
data_json["members"]["pEvents"]=[&]() {
    json return_UJPrNIv=json({});
    
        if (pEvents==NULL){
            return_UJPrNIv["null"]=true;
            return return_UJPrNIv;
        }
        
        return_UJPrNIv["members"]={};
        for(int UJPrNIv=0; UJPrNIv < eventCount; UJPrNIv++){
            json temp;
            temp=[&]() {
    json return_vIWZEEQ=json({});
    return serialize_VkEvent(pEvents[UJPrNIv]);}();
            return_UJPrNIv["members"].push_back(temp);
        }
        return return_UJPrNIv;
        }();
data_json["members"]["pDependencyInfos"]=[&]() {
    json return_JaVtYbE=json({});
    
        if (pDependencyInfos==NULL){
            return_JaVtYbE["null"]=true;
            return return_JaVtYbE;
        }
        
        return_JaVtYbE["members"]={};
        for(int JaVtYbE=0; JaVtYbE < eventCount; JaVtYbE++){
            json temp;
            temp=[&]() {
    json return_DohkEPA=json({});
    return serialize_VkDependencyInfo(pDependencyInfos[JaVtYbE]);}();
            return_JaVtYbE["members"].push_back(temp);
        }
        return return_JaVtYbE;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
eventCount=deserialize_uint32_t(result["members"]["eventCount"]);}();


}
void vkCmdWaitEvents2KHR(
VkCommandBuffer                   commandBuffer,
 uint32_t                                            eventCount,
 const VkEvent*                     pEvents,
 const VkDependencyInfo*            pDependencyInfos
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdWaitEvents2KHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_jOBmfhz=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["eventCount"]=[&]() {
    json return_rbibyBV=json({});
    return serialize_uint32_t(eventCount);}();
data_json["members"]["pEvents"]=[&]() {
    json return_UJPrNIv=json({});
    
        if (pEvents==NULL){
            return_UJPrNIv["null"]=true;
            return return_UJPrNIv;
        }
        
        return_UJPrNIv["members"]={};
        for(int UJPrNIv=0; UJPrNIv < eventCount; UJPrNIv++){
            json temp;
            temp=[&]() {
    json return_vIWZEEQ=json({});
    return serialize_VkEvent(pEvents[UJPrNIv]);}();
            return_UJPrNIv["members"].push_back(temp);
        }
        return return_UJPrNIv;
        }();
data_json["members"]["pDependencyInfos"]=[&]() {
    json return_JaVtYbE=json({});
    
        if (pDependencyInfos==NULL){
            return_JaVtYbE["null"]=true;
            return return_JaVtYbE;
        }
        
        return_JaVtYbE["members"]={};
        for(int JaVtYbE=0; JaVtYbE < eventCount; JaVtYbE++){
            json temp;
            temp=[&]() {
    json return_DohkEPA=json({});
    return serialize_VkDependencyInfo(pDependencyInfos[JaVtYbE]);}();
            return_JaVtYbE["members"].push_back(temp);
        }
        return return_JaVtYbE;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
eventCount=deserialize_uint32_t(result["members"]["eventCount"]);}();


}
void vkCmdPipelineBarrier2(
VkCommandBuffer                   commandBuffer,
 const VkDependencyInfo*                             pDependencyInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdPipelineBarrier2";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_jOBmfhz=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pDependencyInfo"]=[&]() {
    json return_kkgOCck=json({});
    
        if (pDependencyInfo==NULL){
            return_kkgOCck["null"]=true;
            return return_kkgOCck;
        }
        return_kkgOCck=[&]() {
    json return_pkUQycB=json({});
    return serialize_VkDependencyInfo(*pDependencyInfo);}();
return return_kkgOCck;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();

}
void vkCmdPipelineBarrier2KHR(
VkCommandBuffer                   commandBuffer,
 const VkDependencyInfo*                             pDependencyInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdPipelineBarrier2KHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_jOBmfhz=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pDependencyInfo"]=[&]() {
    json return_kkgOCck=json({});
    
        if (pDependencyInfo==NULL){
            return_kkgOCck["null"]=true;
            return return_kkgOCck;
        }
        return_kkgOCck=[&]() {
    json return_pkUQycB=json({});
    return serialize_VkDependencyInfo(*pDependencyInfo);}();
return return_kkgOCck;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();

}
VkResult vkQueueSubmit2(
VkQueue                           queue,
 uint32_t                            submitCount,
 const VkSubmitInfo2*              pSubmits,
 VkFence           fence
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkQueueSubmit2";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)queue];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["queue"]=[&]() {
    json return_AkqMTbB=json({});
    return serialize_VkQueue(queue);}();
data_json["members"]["submitCount"]=[&]() {
    json return_ytAANCG=json({});
    return serialize_uint32_t(submitCount);}();
data_json["members"]["pSubmits"]=[&]() {
    json return_eUrnsts=json({});
    
        if (pSubmits==NULL){
            return_eUrnsts["null"]=true;
            return return_eUrnsts;
        }
        
        return_eUrnsts["members"]={};
        for(int eUrnsts=0; eUrnsts < submitCount; eUrnsts++){
            json temp;
            temp=[&]() {
    json return_crZjbBA=json({});
    return serialize_VkSubmitInfo2(pSubmits[eUrnsts]);}();
            return_eUrnsts["members"].push_back(temp);
        }
        return return_eUrnsts;
        }();
data_json["members"]["fence"]=[&]() {
    json return_tKvDatk=json({});
    return serialize_VkFence(fence);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
queue=deserialize_VkQueue(result["members"]["queue"]);}();
[&]() {
submitCount=deserialize_uint32_t(result["members"]["submitCount"]);}();

[&]() {
fence=deserialize_VkFence(result["members"]["fence"]);}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkQueueSubmit2KHR(
VkQueue                           queue,
 uint32_t                            submitCount,
 const VkSubmitInfo2*              pSubmits,
 VkFence           fence
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkQueueSubmit2KHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)queue];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["queue"]=[&]() {
    json return_AkqMTbB=json({});
    return serialize_VkQueue(queue);}();
data_json["members"]["submitCount"]=[&]() {
    json return_ytAANCG=json({});
    return serialize_uint32_t(submitCount);}();
data_json["members"]["pSubmits"]=[&]() {
    json return_eUrnsts=json({});
    
        if (pSubmits==NULL){
            return_eUrnsts["null"]=true;
            return return_eUrnsts;
        }
        
        return_eUrnsts["members"]={};
        for(int eUrnsts=0; eUrnsts < submitCount; eUrnsts++){
            json temp;
            temp=[&]() {
    json return_crZjbBA=json({});
    return serialize_VkSubmitInfo2(pSubmits[eUrnsts]);}();
            return_eUrnsts["members"].push_back(temp);
        }
        return return_eUrnsts;
        }();
data_json["members"]["fence"]=[&]() {
    json return_tKvDatk=json({});
    return serialize_VkFence(fence);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
queue=deserialize_VkQueue(result["members"]["queue"]);}();
[&]() {
submitCount=deserialize_uint32_t(result["members"]["submitCount"]);}();

[&]() {
fence=deserialize_VkFence(result["members"]["fence"]);}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkCmdWriteTimestamp2(
VkCommandBuffer                   commandBuffer,
 VkPipelineStageFlags2               stage,
 VkQueryPool                                         queryPool,
 uint32_t                                            query
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdWriteTimestamp2";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_jOBmfhz=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["stage"]=[&]() {
    json return_bQYmQjO=json({});
    return serialize_VkPipelineStageFlags2(stage);}();
data_json["members"]["queryPool"]=[&]() {
    json return_xTjaouv=json({});
    return serialize_VkQueryPool(queryPool);}();
data_json["members"]["query"]=[&]() {
    json return_zJOZHoy=json({});
    return serialize_uint32_t(query);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
stage=deserialize_VkPipelineStageFlags2(result["members"]["stage"]);}();
[&]() {
queryPool=deserialize_VkQueryPool(result["members"]["queryPool"]);}();
[&]() {
query=deserialize_uint32_t(result["members"]["query"]);}();
}
void vkCmdWriteTimestamp2KHR(
VkCommandBuffer                   commandBuffer,
 VkPipelineStageFlags2               stage,
 VkQueryPool                                         queryPool,
 uint32_t                                            query
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdWriteTimestamp2KHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_jOBmfhz=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["stage"]=[&]() {
    json return_bQYmQjO=json({});
    return serialize_VkPipelineStageFlags2(stage);}();
data_json["members"]["queryPool"]=[&]() {
    json return_xTjaouv=json({});
    return serialize_VkQueryPool(queryPool);}();
data_json["members"]["query"]=[&]() {
    json return_zJOZHoy=json({});
    return serialize_uint32_t(query);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
stage=deserialize_VkPipelineStageFlags2(result["members"]["stage"]);}();
[&]() {
queryPool=deserialize_VkQueryPool(result["members"]["queryPool"]);}();
[&]() {
query=deserialize_uint32_t(result["members"]["query"]);}();
}
void vkCmdWriteBufferMarker2AMD(
VkCommandBuffer                   commandBuffer,
 VkPipelineStageFlags2               stage,
 VkBuffer                                            dstBuffer,
 VkDeviceSize                                        dstOffset,
 uint32_t                                            marker
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdWriteBufferMarker2AMD";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_jOBmfhz=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["stage"]=[&]() {
    json return_bQYmQjO=json({});
    return serialize_VkPipelineStageFlags2(stage);}();
data_json["members"]["dstBuffer"]=[&]() {
    json return_ARHYxHB=json({});
    return serialize_VkBuffer(dstBuffer);}();
data_json["members"]["dstOffset"]=[&]() {
    json return_gUfOvvi=json({});
    return_gUfOvvi=[&]() {
    json return_ruHhseZ=json({});
    return serialize_uint64_t(dstOffset);}();return return_gUfOvvi;}();
data_json["members"]["marker"]=[&]() {
    json return_UfTOyNL=json({});
    return serialize_uint32_t(marker);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
stage=deserialize_VkPipelineStageFlags2(result["members"]["stage"]);}();
[&]() {
dstBuffer=deserialize_VkBuffer(result["members"]["dstBuffer"]);}();
[&]() {
[&]() {
dstOffset=deserialize_uint64_t(result["members"]["dstOffset"]);}();}();
[&]() {
marker=deserialize_uint32_t(result["members"]["marker"]);}();
}
void vkGetQueueCheckpointData2NV(
VkQueue queue,
 uint32_t* pCheckpointDataCount,
 VkCheckpointData2NV* pCheckpointData
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetQueueCheckpointData2NV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)queue];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["queue"]=[&]() {
    json return_KYhcIBS=json({});
    return serialize_VkQueue(queue);}();
data_json["members"]["pCheckpointDataCount"]=[&]() {
    json return_eEWDbVZ=json({});
    
        if (pCheckpointDataCount==NULL){
            return_eEWDbVZ["null"]=true;
            return return_eEWDbVZ;
        }
        return_eEWDbVZ=[&]() {
    json return_UKDbbYU=json({});
    return serialize_uint32_t(*pCheckpointDataCount);}();
return return_eEWDbVZ;}();
data_json["members"]["pCheckpointData"]=[&]() {
    json return_YyAfdUR=json({});
    
        if (pCheckpointData==NULL){
            return_YyAfdUR["null"]=true;
            return return_YyAfdUR;
        }
        
        return_YyAfdUR["members"]={};
        for(int YyAfdUR=0; YyAfdUR < *pCheckpointDataCount; YyAfdUR++){
            json temp;
            temp=[&]() {
    json return_ipmppqq=json({});
    return serialize_VkCheckpointData2NV(pCheckpointData[YyAfdUR]);}();
            return_YyAfdUR["members"].push_back(temp);
        }
        return return_YyAfdUR;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
queue=deserialize_VkQueue(result["members"]["queue"]);}();
[&]() {

        if (result["members"]["pCheckpointDataCount"].contains("null")){
        pCheckpointDataCount=NULL;
        return;
        }
    [&]() {
*(pCheckpointDataCount)=deserialize_uint32_t(result["members"]["pCheckpointDataCount"]);}();
}();
[&]() {

        if (result["members"]["pCheckpointData"].contains("null")){
        pCheckpointData=NULL;
        return;
        }
    
        for (int ERpWoyW=0; ERpWoyW < *pCheckpointDataCount; ERpWoyW++){
            [&]() {
pCheckpointData[ERpWoyW]=deserialize_VkCheckpointData2NV(result["members"]["pCheckpointData"]["members"][ERpWoyW]);}();;
        }
        }();
}
VkResult vkCopyMemoryToImageEXT(
VkDevice device,
 const VkCopyMemoryToImageInfoEXT* pCopyMemoryToImageInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCopyMemoryToImageEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pCopyMemoryToImageInfo"]=[&]() {
    json return_FHlXCaf=json({});
    
        if (pCopyMemoryToImageInfo==NULL){
            return_FHlXCaf["null"]=true;
            return return_FHlXCaf;
        }
        return_FHlXCaf=[&]() {
    json return_vFsAmYp=json({});
    return serialize_VkCopyMemoryToImageInfoEXT(*pCopyMemoryToImageInfo);}();
return return_FHlXCaf;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkCopyImageToMemoryEXT(
VkDevice device,
 const VkCopyImageToMemoryInfoEXT* pCopyImageToMemoryInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCopyImageToMemoryEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pCopyImageToMemoryInfo"]=[&]() {
    json return_tRkegag=json({});
    
        if (pCopyImageToMemoryInfo==NULL){
            return_tRkegag["null"]=true;
            return return_tRkegag;
        }
        return_tRkegag=[&]() {
    json return_lauELyb=json({});
    return serialize_VkCopyImageToMemoryInfoEXT(*pCopyImageToMemoryInfo);}();
return return_tRkegag;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkCopyImageToImageEXT(
VkDevice device,
 const VkCopyImageToImageInfoEXT* pCopyImageToImageInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCopyImageToImageEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pCopyImageToImageInfo"]=[&]() {
    json return_cylMZXt=json({});
    
        if (pCopyImageToImageInfo==NULL){
            return_cylMZXt["null"]=true;
            return return_cylMZXt;
        }
        return_cylMZXt=[&]() {
    json return_jEOpQEf=json({});
    return serialize_VkCopyImageToImageInfoEXT(*pCopyImageToImageInfo);}();
return return_cylMZXt;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkTransitionImageLayoutEXT(
VkDevice device,
 uint32_t transitionCount,
 const VkHostImageLayoutTransitionInfoEXT* pTransitions
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkTransitionImageLayoutEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["transitionCount"]=[&]() {
    json return_WZGNEGI=json({});
    return serialize_uint32_t(transitionCount);}();
data_json["members"]["pTransitions"]=[&]() {
    json return_atdqDNE=json({});
    
        if (pTransitions==NULL){
            return_atdqDNE["null"]=true;
            return return_atdqDNE;
        }
        
        return_atdqDNE["members"]={};
        for(int atdqDNE=0; atdqDNE < transitionCount; atdqDNE++){
            json temp;
            temp=[&]() {
    json return_ubwLBWM=json({});
    return serialize_VkHostImageLayoutTransitionInfoEXT(pTransitions[atdqDNE]);}();
            return_atdqDNE["members"].push_back(temp);
        }
        return return_atdqDNE;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
transitionCount=deserialize_uint32_t(result["members"]["transitionCount"]);}();

VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkGetPhysicalDeviceVideoCapabilitiesKHR(
VkPhysicalDevice physicalDevice,
 const VkVideoProfileInfoKHR* pVideoProfile,
 VkVideoCapabilitiesKHR* pCapabilities
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceVideoCapabilitiesKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["pVideoProfile"]=[&]() {
    json return_YZvOTMw=json({});
    
        if (pVideoProfile==NULL){
            return_YZvOTMw["null"]=true;
            return return_YZvOTMw;
        }
        return_YZvOTMw=[&]() {
    json return_anReIvE=json({});
    return serialize_VkVideoProfileInfoKHR(*pVideoProfile);}();
return return_YZvOTMw;}();
data_json["members"]["pCapabilities"]=[&]() {
    json return_twwgZMf=json({});
    
        if (pCapabilities==NULL){
            return_twwgZMf["null"]=true;
            return return_twwgZMf;
        }
        return_twwgZMf=[&]() {
    json return_bmHziZT=json({});
    return serialize_VkVideoCapabilitiesKHR(*pCapabilities);}();
return return_twwgZMf;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();

[&]() {

        if (result["members"]["pCapabilities"].contains("null")){
        pCapabilities=NULL;
        return;
        }
    [&]() {
*(pCapabilities)=deserialize_VkVideoCapabilitiesKHR(result["members"]["pCapabilities"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkGetPhysicalDeviceVideoFormatPropertiesKHR(
VkPhysicalDevice physicalDevice,
 const VkPhysicalDeviceVideoFormatInfoKHR* pVideoFormatInfo,
 uint32_t* pVideoFormatPropertyCount,
 VkVideoFormatPropertiesKHR* pVideoFormatProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceVideoFormatPropertiesKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["pVideoFormatInfo"]=[&]() {
    json return_bgdbFXK=json({});
    
        if (pVideoFormatInfo==NULL){
            return_bgdbFXK["null"]=true;
            return return_bgdbFXK;
        }
        return_bgdbFXK=[&]() {
    json return_dtfQwKm=json({});
    return serialize_VkPhysicalDeviceVideoFormatInfoKHR(*pVideoFormatInfo);}();
return return_bgdbFXK;}();
data_json["members"]["pVideoFormatPropertyCount"]=[&]() {
    json return_GSWxFnI=json({});
    
        if (pVideoFormatPropertyCount==NULL){
            return_GSWxFnI["null"]=true;
            return return_GSWxFnI;
        }
        return_GSWxFnI=[&]() {
    json return_ajiQgGQ=json({});
    return serialize_uint32_t(*pVideoFormatPropertyCount);}();
return return_GSWxFnI;}();
data_json["members"]["pVideoFormatProperties"]=[&]() {
    json return_mqYKdAf=json({});
    
        if (pVideoFormatProperties==NULL){
            return_mqYKdAf["null"]=true;
            return return_mqYKdAf;
        }
        
        return_mqYKdAf["members"]={};
        for(int mqYKdAf=0; mqYKdAf < *pVideoFormatPropertyCount; mqYKdAf++){
            json temp;
            temp=[&]() {
    json return_juwSumr=json({});
    return serialize_VkVideoFormatPropertiesKHR(pVideoFormatProperties[mqYKdAf]);}();
            return_mqYKdAf["members"].push_back(temp);
        }
        return return_mqYKdAf;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();

[&]() {

        if (result["members"]["pVideoFormatPropertyCount"].contains("null")){
        pVideoFormatPropertyCount=NULL;
        return;
        }
    [&]() {
*(pVideoFormatPropertyCount)=deserialize_uint32_t(result["members"]["pVideoFormatPropertyCount"]);}();
}();
[&]() {

        if (result["members"]["pVideoFormatProperties"].contains("null")){
        pVideoFormatProperties=NULL;
        return;
        }
    
        for (int bqDBSoD=0; bqDBSoD < *pVideoFormatPropertyCount; bqDBSoD++){
            [&]() {
pVideoFormatProperties[bqDBSoD]=deserialize_VkVideoFormatPropertiesKHR(result["members"]["pVideoFormatProperties"]["members"][bqDBSoD]);}();;
        }
        }();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkCreateVideoSessionKHR(
VkDevice device,
 const VkVideoSessionCreateInfoKHR* pCreateInfo,
 const VkAllocationCallbacks* pAllocator,
 VkVideoSessionKHR* pVideoSession
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreateVideoSessionKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pCreateInfo"]=[&]() {
    json return_rmJpRbP=json({});
    
        if (pCreateInfo==NULL){
            return_rmJpRbP["null"]=true;
            return return_rmJpRbP;
        }
        return_rmJpRbP=[&]() {
    json return_deJSMVb=json({});
    return serialize_VkVideoSessionCreateInfoKHR(*pCreateInfo);}();
return return_rmJpRbP;}();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pVideoSession"]=[&]() {
    json return_UBFowBY=json({});
    
        if (pVideoSession==NULL){
            return_UBFowBY["null"]=true;
            return return_UBFowBY;
        }
        return_UBFowBY=[&]() {
    json return_QOYJBKh=json({});
    return serialize_VkVideoSessionKHR(*pVideoSession);}();
return return_UBFowBY;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();


[&]() {

        if (result["members"]["pVideoSession"].contains("null")){
        pVideoSession=NULL;
        return;
        }
    [&]() {
*(pVideoSession)=deserialize_VkVideoSessionKHR(result["members"]["pVideoSession"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                handle_to_parent_handle_struct[(uintptr_t)(*pVideoSession)]=parent;
                
return return_value;
}
void vkDestroyVideoSessionKHR(
VkDevice device,
 VkVideoSessionKHR videoSession,
 const VkAllocationCallbacks* pAllocator
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkDestroyVideoSessionKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["videoSession"]=[&]() {
    json return_ZYpVKpf=json({});
    return serialize_VkVideoSessionKHR(videoSession);}();
data_json["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
videoSession=deserialize_VkVideoSessionKHR(result["members"]["videoSession"]);}();

}
VkResult vkCreateVideoSessionParametersKHR(
VkDevice device,
 const VkVideoSessionParametersCreateInfoKHR* pCreateInfo,
 const VkAllocationCallbacks* pAllocator,
 VkVideoSessionParametersKHR* pVideoSessionParameters
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreateVideoSessionParametersKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pCreateInfo"]=[&]() {
    json return_xmLtjFp=json({});
    
        if (pCreateInfo==NULL){
            return_xmLtjFp["null"]=true;
            return return_xmLtjFp;
        }
        return_xmLtjFp=[&]() {
    json return_CEOGoXg=json({});
    return serialize_VkVideoSessionParametersCreateInfoKHR(*pCreateInfo);}();
return return_xmLtjFp;}();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pVideoSessionParameters"]=[&]() {
    json return_cFKdyDw=json({});
    
        if (pVideoSessionParameters==NULL){
            return_cFKdyDw["null"]=true;
            return return_cFKdyDw;
        }
        return_cFKdyDw=[&]() {
    json return_nOvdNqm=json({});
    return serialize_VkVideoSessionParametersKHR(*pVideoSessionParameters);}();
return return_cFKdyDw;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();


[&]() {

        if (result["members"]["pVideoSessionParameters"].contains("null")){
        pVideoSessionParameters=NULL;
        return;
        }
    [&]() {
*(pVideoSessionParameters)=deserialize_VkVideoSessionParametersKHR(result["members"]["pVideoSessionParameters"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                handle_to_parent_handle_struct[(uintptr_t)(*pVideoSessionParameters)]=parent;
                
return return_value;
}
VkResult vkUpdateVideoSessionParametersKHR(
VkDevice device,
 VkVideoSessionParametersKHR videoSessionParameters,
 const VkVideoSessionParametersUpdateInfoKHR* pUpdateInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkUpdateVideoSessionParametersKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["videoSessionParameters"]=[&]() {
    json return_miAIXYA=json({});
    return serialize_VkVideoSessionParametersKHR(videoSessionParameters);}();
data_json["members"]["pUpdateInfo"]=[&]() {
    json return_BKRYRwF=json({});
    
        if (pUpdateInfo==NULL){
            return_BKRYRwF["null"]=true;
            return return_BKRYRwF;
        }
        return_BKRYRwF=[&]() {
    json return_fOpUzep=json({});
    return serialize_VkVideoSessionParametersUpdateInfoKHR(*pUpdateInfo);}();
return return_BKRYRwF;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
videoSessionParameters=deserialize_VkVideoSessionParametersKHR(result["members"]["videoSessionParameters"]);}();

VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkDestroyVideoSessionParametersKHR(
VkDevice device,
 VkVideoSessionParametersKHR videoSessionParameters,
 const VkAllocationCallbacks* pAllocator
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkDestroyVideoSessionParametersKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["videoSessionParameters"]=[&]() {
    json return_miAIXYA=json({});
    return serialize_VkVideoSessionParametersKHR(videoSessionParameters);}();
data_json["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
videoSessionParameters=deserialize_VkVideoSessionParametersKHR(result["members"]["videoSessionParameters"]);}();

}
VkResult vkGetVideoSessionMemoryRequirementsKHR(
VkDevice device,
 VkVideoSessionKHR videoSession,
 uint32_t* pMemoryRequirementsCount,
 VkVideoSessionMemoryRequirementsKHR* pMemoryRequirements
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetVideoSessionMemoryRequirementsKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["videoSession"]=[&]() {
    json return_ZYpVKpf=json({});
    return serialize_VkVideoSessionKHR(videoSession);}();
data_json["members"]["pMemoryRequirementsCount"]=[&]() {
    json return_ZDpkRKM=json({});
    
        if (pMemoryRequirementsCount==NULL){
            return_ZDpkRKM["null"]=true;
            return return_ZDpkRKM;
        }
        return_ZDpkRKM=[&]() {
    json return_XJQvXYg=json({});
    return serialize_uint32_t(*pMemoryRequirementsCount);}();
return return_ZDpkRKM;}();
data_json["members"]["pMemoryRequirements"]=[&]() {
    json return_yppiIKe=json({});
    
        if (pMemoryRequirements==NULL){
            return_yppiIKe["null"]=true;
            return return_yppiIKe;
        }
        
        return_yppiIKe["members"]={};
        for(int yppiIKe=0; yppiIKe < *pMemoryRequirementsCount; yppiIKe++){
            json temp;
            temp=[&]() {
    json return_EOUGvsk=json({});
    return serialize_VkVideoSessionMemoryRequirementsKHR(pMemoryRequirements[yppiIKe]);}();
            return_yppiIKe["members"].push_back(temp);
        }
        return return_yppiIKe;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
videoSession=deserialize_VkVideoSessionKHR(result["members"]["videoSession"]);}();
[&]() {

        if (result["members"]["pMemoryRequirementsCount"].contains("null")){
        pMemoryRequirementsCount=NULL;
        return;
        }
    [&]() {
*(pMemoryRequirementsCount)=deserialize_uint32_t(result["members"]["pMemoryRequirementsCount"]);}();
}();
[&]() {

        if (result["members"]["pMemoryRequirements"].contains("null")){
        pMemoryRequirements=NULL;
        return;
        }
    
        for (int tTrhcXE=0; tTrhcXE < *pMemoryRequirementsCount; tTrhcXE++){
            [&]() {
pMemoryRequirements[tTrhcXE]=deserialize_VkVideoSessionMemoryRequirementsKHR(result["members"]["pMemoryRequirements"]["members"][tTrhcXE]);}();;
        }
        }();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkBindVideoSessionMemoryKHR(
VkDevice device,
 VkVideoSessionKHR videoSession,
 uint32_t bindSessionMemoryInfoCount,
 const VkBindVideoSessionMemoryInfoKHR* pBindSessionMemoryInfos
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkBindVideoSessionMemoryKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["videoSession"]=[&]() {
    json return_ZYpVKpf=json({});
    return serialize_VkVideoSessionKHR(videoSession);}();
data_json["members"]["bindSessionMemoryInfoCount"]=[&]() {
    json return_dUdWXHJ=json({});
    return serialize_uint32_t(bindSessionMemoryInfoCount);}();
data_json["members"]["pBindSessionMemoryInfos"]=[&]() {
    json return_WgajFYh=json({});
    
        if (pBindSessionMemoryInfos==NULL){
            return_WgajFYh["null"]=true;
            return return_WgajFYh;
        }
        
        return_WgajFYh["members"]={};
        for(int WgajFYh=0; WgajFYh < bindSessionMemoryInfoCount; WgajFYh++){
            json temp;
            temp=[&]() {
    json return_fNvdWGR=json({});
    return serialize_VkBindVideoSessionMemoryInfoKHR(pBindSessionMemoryInfos[WgajFYh]);}();
            return_WgajFYh["members"].push_back(temp);
        }
        return return_WgajFYh;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
videoSession=deserialize_VkVideoSessionKHR(result["members"]["videoSession"]);}();
[&]() {
bindSessionMemoryInfoCount=deserialize_uint32_t(result["members"]["bindSessionMemoryInfoCount"]);}();

VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkCmdDecodeVideoKHR(
VkCommandBuffer commandBuffer,
 const VkVideoDecodeInfoKHR* pDecodeInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdDecodeVideoKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pDecodeInfo"]=[&]() {
    json return_CMuqgQm=json({});
    
        if (pDecodeInfo==NULL){
            return_CMuqgQm["null"]=true;
            return return_CMuqgQm;
        }
        return_CMuqgQm=[&]() {
    json return_nlTrSGw=json({});
    return serialize_VkVideoDecodeInfoKHR(*pDecodeInfo);}();
return return_CMuqgQm;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();

}
void vkCmdBeginVideoCodingKHR(
VkCommandBuffer commandBuffer,
 const VkVideoBeginCodingInfoKHR* pBeginInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdBeginVideoCodingKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pBeginInfo"]=[&]() {
    json return_GNqfByK=json({});
    
        if (pBeginInfo==NULL){
            return_GNqfByK["null"]=true;
            return return_GNqfByK;
        }
        return_GNqfByK=[&]() {
    json return_XeGQDnJ=json({});
    return serialize_VkVideoBeginCodingInfoKHR(*pBeginInfo);}();
return return_GNqfByK;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();

}
void vkCmdControlVideoCodingKHR(
VkCommandBuffer commandBuffer,
 const VkVideoCodingControlInfoKHR* pCodingControlInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdControlVideoCodingKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pCodingControlInfo"]=[&]() {
    json return_udkYcOu=json({});
    
        if (pCodingControlInfo==NULL){
            return_udkYcOu["null"]=true;
            return return_udkYcOu;
        }
        return_udkYcOu=[&]() {
    json return_JFGxAJc=json({});
    return serialize_VkVideoCodingControlInfoKHR(*pCodingControlInfo);}();
return return_udkYcOu;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();

}
void vkCmdEndVideoCodingKHR(
VkCommandBuffer commandBuffer,
 const VkVideoEndCodingInfoKHR* pEndCodingInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdEndVideoCodingKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pEndCodingInfo"]=[&]() {
    json return_ZVrxRdf=json({});
    
        if (pEndCodingInfo==NULL){
            return_ZVrxRdf["null"]=true;
            return return_ZVrxRdf;
        }
        return_ZVrxRdf=[&]() {
    json return_xskgusC=json({});
    return serialize_VkVideoEndCodingInfoKHR(*pEndCodingInfo);}();
return return_ZVrxRdf;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();

}
void vkCmdDecompressMemoryNV(
VkCommandBuffer commandBuffer,
 uint32_t decompressRegionCount,
 const VkDecompressMemoryRegionNV* pDecompressMemoryRegions
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdDecompressMemoryNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["decompressRegionCount"]=[&]() {
    json return_sZSLHxr=json({});
    return serialize_uint32_t(decompressRegionCount);}();
data_json["members"]["pDecompressMemoryRegions"]=[&]() {
    json return_cprvgEs=json({});
    
        if (pDecompressMemoryRegions==NULL){
            return_cprvgEs["null"]=true;
            return return_cprvgEs;
        }
        
        return_cprvgEs["members"]={};
        for(int cprvgEs=0; cprvgEs < decompressRegionCount; cprvgEs++){
            json temp;
            temp=[&]() {
    json return_VcDjPXS=json({});
    return serialize_VkDecompressMemoryRegionNV(pDecompressMemoryRegions[cprvgEs]);}();
            return_cprvgEs["members"].push_back(temp);
        }
        return return_cprvgEs;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
decompressRegionCount=deserialize_uint32_t(result["members"]["decompressRegionCount"]);}();

}
void vkCmdDecompressMemoryIndirectCountNV(
VkCommandBuffer commandBuffer,
 VkDeviceAddress indirectCommandsAddress,
 VkDeviceAddress indirectCommandsCountAddress,
 uint32_t stride
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdDecompressMemoryIndirectCountNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["indirectCommandsAddress"]=[&]() {
    json return_zzTLJEz=json({});
    return_zzTLJEz=[&]() {
    json return_JdSQWnn=json({});
    return serialize_uint64_t(indirectCommandsAddress);}();return return_zzTLJEz;}();
data_json["members"]["indirectCommandsCountAddress"]=[&]() {
    json return_cdtwxLc=json({});
    return_cdtwxLc=[&]() {
    json return_cCANSkU=json({});
    return serialize_uint64_t(indirectCommandsCountAddress);}();return return_cdtwxLc;}();
data_json["members"]["stride"]=[&]() {
    json return_TkKksoe=json({});
    return serialize_uint32_t(stride);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
[&]() {
indirectCommandsAddress=deserialize_uint64_t(result["members"]["indirectCommandsAddress"]);}();}();
[&]() {
[&]() {
indirectCommandsCountAddress=deserialize_uint64_t(result["members"]["indirectCommandsCountAddress"]);}();}();
[&]() {
stride=deserialize_uint32_t(result["members"]["stride"]);}();
}
VkResult vkCreateCuModuleNVX(
VkDevice device,
 const VkCuModuleCreateInfoNVX* pCreateInfo,
 const VkAllocationCallbacks* pAllocator,
 VkCuModuleNVX* pModule
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreateCuModuleNVX";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pCreateInfo"]=[&]() {
    json return_kFVCjhJ=json({});
    
        if (pCreateInfo==NULL){
            return_kFVCjhJ["null"]=true;
            return return_kFVCjhJ;
        }
        return_kFVCjhJ=[&]() {
    json return_XxmfhaZ=json({});
    return serialize_VkCuModuleCreateInfoNVX(*pCreateInfo);}();
return return_kFVCjhJ;}();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pModule"]=[&]() {
    json return_JNcoqEH=json({});
    
        if (pModule==NULL){
            return_JNcoqEH["null"]=true;
            return return_JNcoqEH;
        }
        return_JNcoqEH=[&]() {
    json return_ZBAbGub=json({});
    return serialize_VkCuModuleNVX(*pModule);}();
return return_JNcoqEH;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();


[&]() {

        if (result["members"]["pModule"].contains("null")){
        pModule=NULL;
        return;
        }
    [&]() {
*(pModule)=deserialize_VkCuModuleNVX(result["members"]["pModule"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                handle_to_parent_handle_struct[(uintptr_t)(*pModule)]=parent;
                
return return_value;
}
VkResult vkCreateCuFunctionNVX(
VkDevice device,
 const VkCuFunctionCreateInfoNVX* pCreateInfo,
 const VkAllocationCallbacks* pAllocator,
 VkCuFunctionNVX* pFunction
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreateCuFunctionNVX";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pCreateInfo"]=[&]() {
    json return_iZkjdek=json({});
    
        if (pCreateInfo==NULL){
            return_iZkjdek["null"]=true;
            return return_iZkjdek;
        }
        return_iZkjdek=[&]() {
    json return_trJWXWi=json({});
    return serialize_VkCuFunctionCreateInfoNVX(*pCreateInfo);}();
return return_iZkjdek;}();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pFunction"]=[&]() {
    json return_McZaipD=json({});
    
        if (pFunction==NULL){
            return_McZaipD["null"]=true;
            return return_McZaipD;
        }
        return_McZaipD=[&]() {
    json return_dRtoVIO=json({});
    return serialize_VkCuFunctionNVX(*pFunction);}();
return return_McZaipD;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();


[&]() {

        if (result["members"]["pFunction"].contains("null")){
        pFunction=NULL;
        return;
        }
    [&]() {
*(pFunction)=deserialize_VkCuFunctionNVX(result["members"]["pFunction"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                handle_to_parent_handle_struct[(uintptr_t)(*pFunction)]=parent;
                
return return_value;
}
void vkDestroyCuModuleNVX(
VkDevice device,
 VkCuModuleNVX module,
 const VkAllocationCallbacks* pAllocator
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkDestroyCuModuleNVX";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["module"]=[&]() {
    json return_ejetVAq=json({});
    return serialize_VkCuModuleNVX(module);}();
data_json["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
module=deserialize_VkCuModuleNVX(result["members"]["module"]);}();

}
void vkDestroyCuFunctionNVX(
VkDevice device,
 VkCuFunctionNVX function,
 const VkAllocationCallbacks* pAllocator
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkDestroyCuFunctionNVX";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["function"]=[&]() {
    json return_cMOMknV=json({});
    return serialize_VkCuFunctionNVX(function);}();
data_json["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
function=deserialize_VkCuFunctionNVX(result["members"]["function"]);}();

}
void vkCmdCuLaunchKernelNVX(
VkCommandBuffer commandBuffer,
 const VkCuLaunchInfoNVX* pLaunchInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdCuLaunchKernelNVX";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pLaunchInfo"]=[&]() {
    json return_GlpDTMX=json({});
    
        if (pLaunchInfo==NULL){
            return_GlpDTMX["null"]=true;
            return return_GlpDTMX;
        }
        return_GlpDTMX=[&]() {
    json return_MSKfdcp=json({});
    return serialize_VkCuLaunchInfoNVX(*pLaunchInfo);}();
return return_GlpDTMX;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();

}
void vkGetDescriptorSetLayoutSizeEXT(
VkDevice device,
 VkDescriptorSetLayout layout,
 VkDeviceSize* pLayoutSizeInBytes
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetDescriptorSetLayoutSizeEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["layout"]=[&]() {
    json return_ccIkAsz=json({});
    return serialize_VkDescriptorSetLayout(layout);}();
data_json["members"]["pLayoutSizeInBytes"]=[&]() {
    json return_SyjiaTi=json({});
    
        if (pLayoutSizeInBytes==NULL){
            return_SyjiaTi["null"]=true;
            return return_SyjiaTi;
        }
        return_SyjiaTi=[&]() {
    json return_stKKgQh=json({});
    return_stKKgQh=[&]() {
    json return_EArMfYS=json({});
    return serialize_uint64_t(*pLayoutSizeInBytes);}();return return_stKKgQh;}();
return return_SyjiaTi;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
layout=deserialize_VkDescriptorSetLayout(result["members"]["layout"]);}();
[&]() {

        if (result["members"]["pLayoutSizeInBytes"].contains("null")){
        pLayoutSizeInBytes=NULL;
        return;
        }
    [&]() {

        if (result["members"]["pLayoutSizeInBytes"].contains("null")){
        pLayoutSizeInBytes=NULL;
        return;
        }
    [&]() {
*(pLayoutSizeInBytes)=deserialize_uint64_t(result["members"]["pLayoutSizeInBytes"]);}();
}();}();
}
void vkGetDescriptorSetLayoutBindingOffsetEXT(
VkDevice device,
 VkDescriptorSetLayout layout,
 uint32_t binding,
 VkDeviceSize* pOffset
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetDescriptorSetLayoutBindingOffsetEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["layout"]=[&]() {
    json return_ccIkAsz=json({});
    return serialize_VkDescriptorSetLayout(layout);}();
data_json["members"]["binding"]=[&]() {
    json return_KRnawxS=json({});
    return serialize_uint32_t(binding);}();
data_json["members"]["pOffset"]=[&]() {
    json return_FmcfIzq=json({});
    
        if (pOffset==NULL){
            return_FmcfIzq["null"]=true;
            return return_FmcfIzq;
        }
        return_FmcfIzq=[&]() {
    json return_WvAkrUu=json({});
    return_WvAkrUu=[&]() {
    json return_WvxpFBI=json({});
    return serialize_uint64_t(*pOffset);}();return return_WvAkrUu;}();
return return_FmcfIzq;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
layout=deserialize_VkDescriptorSetLayout(result["members"]["layout"]);}();
[&]() {
binding=deserialize_uint32_t(result["members"]["binding"]);}();
[&]() {

        if (result["members"]["pOffset"].contains("null")){
        pOffset=NULL;
        return;
        }
    [&]() {

        if (result["members"]["pOffset"].contains("null")){
        pOffset=NULL;
        return;
        }
    [&]() {
*(pOffset)=deserialize_uint64_t(result["members"]["pOffset"]);}();
}();}();
}
void vkGetDescriptorEXT(
VkDevice device,
 const VkDescriptorGetInfoEXT* pDescriptorInfo,
 size_t dataSize,
 void* pDescriptor
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetDescriptorEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pDescriptorInfo"]=[&]() {
    json return_lKhzvuD=json({});
    
        if (pDescriptorInfo==NULL){
            return_lKhzvuD["null"]=true;
            return return_lKhzvuD;
        }
        return_lKhzvuD=[&]() {
    json return_UImTSLh=json({});
    return serialize_VkDescriptorGetInfoEXT(*pDescriptorInfo);}();
return return_lKhzvuD;}();
data_json["members"]["dataSize"]=[&]() {
    json return_mCuLMQj=json({});
    return serialize_size_t(dataSize);}();
data_json["members"]["pDescriptor"]=[&]() {
    json return_ZdmvhAV=json({});
    
        if (pDescriptor==NULL){
            return_ZdmvhAV["null"]=true;
            return return_ZdmvhAV;
        }
        return serialize_void_p(pDescriptor);
}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

[&]() {
dataSize=deserialize_size_t(result["members"]["dataSize"]);}();
[&]() {

        if (result["members"]["pDescriptor"].contains("null")){
        pDescriptor=NULL;
        return;
        }
    pDescriptor=deserialize_void_p(result["members"]["pDescriptor"]);
}();
}
void vkCmdBindDescriptorBuffersEXT(
VkCommandBuffer commandBuffer,
 uint32_t bufferCount,
 const VkDescriptorBufferBindingInfoEXT* pBindingInfos
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdBindDescriptorBuffersEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["bufferCount"]=[&]() {
    json return_InaKdbQ=json({});
    return serialize_uint32_t(bufferCount);}();
data_json["members"]["pBindingInfos"]=[&]() {
    json return_vYwbYil=json({});
    
        if (pBindingInfos==NULL){
            return_vYwbYil["null"]=true;
            return return_vYwbYil;
        }
        
        return_vYwbYil["members"]={};
        for(int vYwbYil=0; vYwbYil < bufferCount; vYwbYil++){
            json temp;
            temp=[&]() {
    json return_NLgEjpI=json({});
    return serialize_VkDescriptorBufferBindingInfoEXT(pBindingInfos[vYwbYil]);}();
            return_vYwbYil["members"].push_back(temp);
        }
        return return_vYwbYil;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
bufferCount=deserialize_uint32_t(result["members"]["bufferCount"]);}();

}
void vkCmdSetDescriptorBufferOffsetsEXT(
VkCommandBuffer commandBuffer,
 VkPipelineBindPoint pipelineBindPoint,
 VkPipelineLayout layout,
 uint32_t firstSet,
 uint32_t setCount,
 const uint32_t* pBufferIndices,
 const VkDeviceSize* pOffsets
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetDescriptorBufferOffsetsEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pipelineBindPoint"]=[&]() {
    json return_wEDWbiR=json({});
    return serialize_VkPipelineBindPoint(pipelineBindPoint);}();
data_json["members"]["layout"]=[&]() {
    json return_PdiawKY=json({});
    return serialize_VkPipelineLayout(layout);}();
data_json["members"]["firstSet"]=[&]() {
    json return_YqLcKAn=json({});
    return serialize_uint32_t(firstSet);}();
data_json["members"]["setCount"]=[&]() {
    json return_pdgtsus=json({});
    return serialize_uint32_t(setCount);}();
data_json["members"]["pBufferIndices"]=[&]() {
    json return_TqIzcyO=json({});
    
        if (pBufferIndices==NULL){
            return_TqIzcyO["null"]=true;
            return return_TqIzcyO;
        }
        
        return_TqIzcyO["members"]={};
        for(int TqIzcyO=0; TqIzcyO < setCount; TqIzcyO++){
            json temp;
            temp=[&]() {
    json return_YGyucEe=json({});
    return serialize_uint32_t(pBufferIndices[TqIzcyO]);}();
            return_TqIzcyO["members"].push_back(temp);
        }
        return return_TqIzcyO;
        }();
data_json["members"]["pOffsets"]=[&]() {
    json return_pTiYwMM=json({});
    
        if (pOffsets==NULL){
            return_pTiYwMM["null"]=true;
            return return_pTiYwMM;
        }
        
        return_pTiYwMM["members"]={};
        for(int pTiYwMM=0; pTiYwMM < setCount; pTiYwMM++){
            json temp;
            temp=[&]() {
    json return_oNJRTOL=json({});
    return_oNJRTOL=[&]() {
    json return_EugoIAN=json({});
    return serialize_uint64_t(pOffsets[pTiYwMM]);}();return return_oNJRTOL;}();
            return_pTiYwMM["members"].push_back(temp);
        }
        return return_pTiYwMM;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
pipelineBindPoint=deserialize_VkPipelineBindPoint(result["members"]["pipelineBindPoint"]);}();
[&]() {
layout=deserialize_VkPipelineLayout(result["members"]["layout"]);}();
[&]() {
firstSet=deserialize_uint32_t(result["members"]["firstSet"]);}();
[&]() {
setCount=deserialize_uint32_t(result["members"]["setCount"]);}();


}
void vkCmdBindDescriptorBufferEmbeddedSamplersEXT(
VkCommandBuffer commandBuffer,
 VkPipelineBindPoint pipelineBindPoint,
 VkPipelineLayout layout,
 uint32_t set
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdBindDescriptorBufferEmbeddedSamplersEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pipelineBindPoint"]=[&]() {
    json return_wEDWbiR=json({});
    return serialize_VkPipelineBindPoint(pipelineBindPoint);}();
data_json["members"]["layout"]=[&]() {
    json return_PdiawKY=json({});
    return serialize_VkPipelineLayout(layout);}();
data_json["members"]["set"]=[&]() {
    json return_NjfzWMp=json({});
    return serialize_uint32_t(set);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
pipelineBindPoint=deserialize_VkPipelineBindPoint(result["members"]["pipelineBindPoint"]);}();
[&]() {
layout=deserialize_VkPipelineLayout(result["members"]["layout"]);}();
[&]() {
set=deserialize_uint32_t(result["members"]["set"]);}();
}
VkResult vkGetBufferOpaqueCaptureDescriptorDataEXT(
VkDevice device,
 const VkBufferCaptureDescriptorDataInfoEXT* pInfo,
 void* pData
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetBufferOpaqueCaptureDescriptorDataEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pInfo"]=[&]() {
    json return_ZfwdcoQ=json({});
    
        if (pInfo==NULL){
            return_ZfwdcoQ["null"]=true;
            return return_ZfwdcoQ;
        }
        return_ZfwdcoQ=[&]() {
    json return_YXsxrjm=json({});
    return serialize_VkBufferCaptureDescriptorDataInfoEXT(*pInfo);}();
return return_ZfwdcoQ;}();
data_json["members"]["pData"]=[&]() {
    json return_XiNRkbL=json({});
    
        if (pData==NULL){
            return_XiNRkbL["null"]=true;
            return return_XiNRkbL;
        }
        return serialize_void_p(pData);
}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

[&]() {

        if (result["members"]["pData"].contains("null")){
        pData=NULL;
        return;
        }
    pData=deserialize_void_p(result["members"]["pData"]);
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkGetImageOpaqueCaptureDescriptorDataEXT(
VkDevice device,
 const VkImageCaptureDescriptorDataInfoEXT* pInfo,
 void* pData
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetImageOpaqueCaptureDescriptorDataEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pInfo"]=[&]() {
    json return_wMoNHwj=json({});
    
        if (pInfo==NULL){
            return_wMoNHwj["null"]=true;
            return return_wMoNHwj;
        }
        return_wMoNHwj=[&]() {
    json return_YyPWklO=json({});
    return serialize_VkImageCaptureDescriptorDataInfoEXT(*pInfo);}();
return return_wMoNHwj;}();
data_json["members"]["pData"]=[&]() {
    json return_XiNRkbL=json({});
    
        if (pData==NULL){
            return_XiNRkbL["null"]=true;
            return return_XiNRkbL;
        }
        return serialize_void_p(pData);
}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

[&]() {

        if (result["members"]["pData"].contains("null")){
        pData=NULL;
        return;
        }
    pData=deserialize_void_p(result["members"]["pData"]);
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkGetImageViewOpaqueCaptureDescriptorDataEXT(
VkDevice device,
 const VkImageViewCaptureDescriptorDataInfoEXT* pInfo,
 void* pData
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetImageViewOpaqueCaptureDescriptorDataEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pInfo"]=[&]() {
    json return_FNuXZoH=json({});
    
        if (pInfo==NULL){
            return_FNuXZoH["null"]=true;
            return return_FNuXZoH;
        }
        return_FNuXZoH=[&]() {
    json return_feknriS=json({});
    return serialize_VkImageViewCaptureDescriptorDataInfoEXT(*pInfo);}();
return return_FNuXZoH;}();
data_json["members"]["pData"]=[&]() {
    json return_XiNRkbL=json({});
    
        if (pData==NULL){
            return_XiNRkbL["null"]=true;
            return return_XiNRkbL;
        }
        return serialize_void_p(pData);
}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

[&]() {

        if (result["members"]["pData"].contains("null")){
        pData=NULL;
        return;
        }
    pData=deserialize_void_p(result["members"]["pData"]);
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkGetSamplerOpaqueCaptureDescriptorDataEXT(
VkDevice device,
 const VkSamplerCaptureDescriptorDataInfoEXT* pInfo,
 void* pData
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetSamplerOpaqueCaptureDescriptorDataEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pInfo"]=[&]() {
    json return_WHrsceu=json({});
    
        if (pInfo==NULL){
            return_WHrsceu["null"]=true;
            return return_WHrsceu;
        }
        return_WHrsceu=[&]() {
    json return_WbvdTvC=json({});
    return serialize_VkSamplerCaptureDescriptorDataInfoEXT(*pInfo);}();
return return_WHrsceu;}();
data_json["members"]["pData"]=[&]() {
    json return_XiNRkbL=json({});
    
        if (pData==NULL){
            return_XiNRkbL["null"]=true;
            return return_XiNRkbL;
        }
        return serialize_void_p(pData);
}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

[&]() {

        if (result["members"]["pData"].contains("null")){
        pData=NULL;
        return;
        }
    pData=deserialize_void_p(result["members"]["pData"]);
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT(
VkDevice device,
 const VkAccelerationStructureCaptureDescriptorDataInfoEXT* pInfo,
 void* pData
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pInfo"]=[&]() {
    json return_wZuoBYs=json({});
    
        if (pInfo==NULL){
            return_wZuoBYs["null"]=true;
            return return_wZuoBYs;
        }
        return_wZuoBYs=[&]() {
    json return_quNwqNe=json({});
    return serialize_VkAccelerationStructureCaptureDescriptorDataInfoEXT(*pInfo);}();
return return_wZuoBYs;}();
data_json["members"]["pData"]=[&]() {
    json return_XiNRkbL=json({});
    
        if (pData==NULL){
            return_XiNRkbL["null"]=true;
            return return_XiNRkbL;
        }
        return serialize_void_p(pData);
}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

[&]() {

        if (result["members"]["pData"].contains("null")){
        pData=NULL;
        return;
        }
    pData=deserialize_void_p(result["members"]["pData"]);
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkSetDeviceMemoryPriorityEXT(
VkDevice       device,
 VkDeviceMemory memory,
 float          priority
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkSetDeviceMemoryPriorityEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_vGOpNwU=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["memory"]=[&]() {
    json return_OJZmLJB=json({});
    return serialize_VkDeviceMemory(memory);}();
data_json["members"]["priority"]=[&]() {
    json return_ZkiwPOa=json({});
    return serialize_float(priority);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
memory=deserialize_VkDeviceMemory(result["members"]["memory"]);}();
[&]() {
priority=deserialize_float(result["members"]["priority"]);}();
}
VkResult vkAcquireDrmDisplayEXT(
VkPhysicalDevice physicalDevice,
 int32_t drmFd,
 VkDisplayKHR display
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkAcquireDrmDisplayEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["drmFd"]=[&]() {
    json return_giyfTKv=json({});
    return serialize_int32_t(drmFd);}();
data_json["members"]["display"]=[&]() {
    json return_iLJAKDL=json({});
    return serialize_VkDisplayKHR(display);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();
[&]() {
drmFd=deserialize_int32_t(result["members"]["drmFd"]);}();
[&]() {
display=deserialize_VkDisplayKHR(result["members"]["display"]);}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkGetDrmDisplayEXT(
VkPhysicalDevice physicalDevice,
 int32_t drmFd,
 uint32_t connectorId,
 VkDisplayKHR* display
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetDrmDisplayEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["drmFd"]=[&]() {
    json return_giyfTKv=json({});
    return serialize_int32_t(drmFd);}();
data_json["members"]["connectorId"]=[&]() {
    json return_OVzyQSW=json({});
    return serialize_uint32_t(connectorId);}();
data_json["members"]["display"]=[&]() {
    json return_BihiZSI=json({});
    
        if (display==NULL){
            return_BihiZSI["null"]=true;
            return return_BihiZSI;
        }
        return_BihiZSI=[&]() {
    json return_iEWxCiQ=json({});
    return serialize_VkDisplayKHR(*display);}();
return return_BihiZSI;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();
[&]() {
drmFd=deserialize_int32_t(result["members"]["drmFd"]);}();
[&]() {
connectorId=deserialize_uint32_t(result["members"]["connectorId"]);}();
[&]() {

        if (result["members"]["display"].contains("null")){
        display=NULL;
        return;
        }
    [&]() {
*(display)=deserialize_VkDisplayKHR(result["members"]["display"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkWaitForPresentKHR(
VkDevice device,
 VkSwapchainKHR swapchain,
 uint64_t presentId,
 uint64_t timeout
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkWaitForPresentKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["swapchain"]=[&]() {
    json return_pJrgkgd=json({});
    return serialize_VkSwapchainKHR(swapchain);}();
data_json["members"]["presentId"]=[&]() {
    json return_YQbptip=json({});
    return serialize_uint64_t(presentId);}();
data_json["members"]["timeout"]=[&]() {
    json return_CYRKadv=json({});
    return serialize_uint64_t(timeout);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
swapchain=deserialize_VkSwapchainKHR(result["members"]["swapchain"]);}();
[&]() {
presentId=deserialize_uint64_t(result["members"]["presentId"]);}();
[&]() {
timeout=deserialize_uint64_t(result["members"]["timeout"]);}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkCmdBeginRendering(
VkCommandBuffer                   commandBuffer,
 const VkRenderingInfo*                              pRenderingInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdBeginRendering";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_jOBmfhz=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pRenderingInfo"]=[&]() {
    json return_krduLwc=json({});
    
        if (pRenderingInfo==NULL){
            return_krduLwc["null"]=true;
            return return_krduLwc;
        }
        return_krduLwc=[&]() {
    json return_sJXklhY=json({});
    return serialize_VkRenderingInfo(*pRenderingInfo);}();
return return_krduLwc;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();

}
void vkCmdBeginRenderingKHR(
VkCommandBuffer                   commandBuffer,
 const VkRenderingInfo*                              pRenderingInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdBeginRenderingKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_jOBmfhz=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pRenderingInfo"]=[&]() {
    json return_krduLwc=json({});
    
        if (pRenderingInfo==NULL){
            return_krduLwc["null"]=true;
            return return_krduLwc;
        }
        return_krduLwc=[&]() {
    json return_sJXklhY=json({});
    return serialize_VkRenderingInfo(*pRenderingInfo);}();
return return_krduLwc;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();

}
void vkCmdEndRendering(
VkCommandBuffer                   commandBuffer
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdEndRendering";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_gkxzaOE=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
}
void vkCmdEndRenderingKHR(
VkCommandBuffer                   commandBuffer
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdEndRenderingKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_gkxzaOE=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
}
void vkGetDescriptorSetLayoutHostMappingInfoVALVE(
VkDevice device,
 const VkDescriptorSetBindingReferenceVALVE* pBindingReference,
 VkDescriptorSetLayoutHostMappingInfoVALVE* pHostMapping
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetDescriptorSetLayoutHostMappingInfoVALVE";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pBindingReference"]=[&]() {
    json return_mSXRhmL=json({});
    
        if (pBindingReference==NULL){
            return_mSXRhmL["null"]=true;
            return return_mSXRhmL;
        }
        return_mSXRhmL=[&]() {
    json return_UAhZVMj=json({});
    return serialize_VkDescriptorSetBindingReferenceVALVE(*pBindingReference);}();
return return_mSXRhmL;}();
data_json["members"]["pHostMapping"]=[&]() {
    json return_zFoJqwR=json({});
    
        if (pHostMapping==NULL){
            return_zFoJqwR["null"]=true;
            return return_zFoJqwR;
        }
        return_zFoJqwR=[&]() {
    json return_qLAnuMO=json({});
    return serialize_VkDescriptorSetLayoutHostMappingInfoVALVE(*pHostMapping);}();
return return_zFoJqwR;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

[&]() {

        if (result["members"]["pHostMapping"].contains("null")){
        pHostMapping=NULL;
        return;
        }
    [&]() {
*(pHostMapping)=deserialize_VkDescriptorSetLayoutHostMappingInfoVALVE(result["members"]["pHostMapping"]);}();
}();
}
void vkGetDescriptorSetHostMappingVALVE(
VkDevice device,
 VkDescriptorSet descriptorSet,
 void** ppData
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetDescriptorSetHostMappingVALVE";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["descriptorSet"]=[&]() {
    json return_BDcvznl=json({});
    return serialize_VkDescriptorSet(descriptorSet);}();
data_json["members"]["ppData"]=[&]() {
    json return_PsFVEjO=json({});
    
        if (ppData==NULL){
            return_PsFVEjO["null"]=true;
            return return_PsFVEjO;
        }
        return_PsFVEjO=[&]() {
    json return_KWNLtTl=json({});
    
        if (*ppData==NULL){
            return_KWNLtTl["null"]=true;
            return return_KWNLtTl;
        }
        return serialize_void_p(*ppData);
}();
return return_PsFVEjO;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
descriptorSet=deserialize_VkDescriptorSet(result["members"]["descriptorSet"]);}();
[&]() {

        if (result["members"]["ppData"].contains("null")){
        ppData=NULL;
        return;
        }
    [&]() {

        if (result["members"]["ppData"].contains("null")){
        *(ppData)=NULL;
        return;
        }
    *(ppData)=deserialize_void_p(result["members"]["ppData"]);
}();
}();
}
VkResult vkCreateMicromapEXT(
VkDevice                                           device,
 const VkMicromapCreateInfoEXT*        pCreateInfo,
 const VkAllocationCallbacks*       pAllocator,
 VkMicromapEXT*                        pMicromap
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreateMicromapEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_fUuTEWM=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pCreateInfo"]=[&]() {
    json return_ElvIxlu=json({});
    
        if (pCreateInfo==NULL){
            return_ElvIxlu["null"]=true;
            return return_ElvIxlu;
        }
        return_ElvIxlu=[&]() {
    json return_XQNACUf=json({});
    return serialize_VkMicromapCreateInfoEXT(*pCreateInfo);}();
return return_ElvIxlu;}();
data_json["members"]["pAllocator"]=[&]() {
    json return_sNVoEUY=json({});
    
        if (pAllocator==NULL){
            return_sNVoEUY["null"]=true;
            return return_sNVoEUY;
        }
        return_sNVoEUY=[&]() {
    json return_rkNRtqM=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_sNVoEUY;}();
data_json["members"]["pMicromap"]=[&]() {
    json return_PvwFtTD=json({});
    
        if (pMicromap==NULL){
            return_PvwFtTD["null"]=true;
            return return_PvwFtTD;
        }
        return_PvwFtTD=[&]() {
    json return_ujPtDeT=json({});
    return serialize_VkMicromapEXT(*pMicromap);}();
return return_PvwFtTD;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();


[&]() {

        if (result["members"]["pMicromap"].contains("null")){
        pMicromap=NULL;
        return;
        }
    [&]() {
*(pMicromap)=deserialize_VkMicromapEXT(result["members"]["pMicromap"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                handle_to_parent_handle_struct[(uintptr_t)(*pMicromap)]=parent;
                
return return_value;
}
void vkCmdBuildMicromapsEXT(
VkCommandBuffer                                    commandBuffer,
 uint32_t infoCount,
 const VkMicromapBuildInfoEXT* pInfos
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdBuildMicromapsEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_XLdGYWc=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["infoCount"]=[&]() {
    json return_Wujdqpv=json({});
    return serialize_uint32_t(infoCount);}();
data_json["members"]["pInfos"]=[&]() {
    json return_DMuENWx=json({});
    
        if (pInfos==NULL){
            return_DMuENWx["null"]=true;
            return return_DMuENWx;
        }
        
        return_DMuENWx["members"]={};
        for(int DMuENWx=0; DMuENWx < infoCount; DMuENWx++){
            json temp;
            temp=[&]() {
    json return_FikHDmT=json({});
    return serialize_VkMicromapBuildInfoEXT(pInfos[DMuENWx]);}();
            return_DMuENWx["members"].push_back(temp);
        }
        return return_DMuENWx;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
infoCount=deserialize_uint32_t(result["members"]["infoCount"]);}();

}
VkResult vkBuildMicromapsEXT(
VkDevice                                           device,
 VkDeferredOperationKHR deferredOperation,
 uint32_t infoCount,
 const VkMicromapBuildInfoEXT* pInfos
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkBuildMicromapsEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_fUuTEWM=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["deferredOperation"]=[&]() {
    json return_zJwBFEh=json({});
    return serialize_VkDeferredOperationKHR(deferredOperation);}();
data_json["members"]["infoCount"]=[&]() {
    json return_Wujdqpv=json({});
    return serialize_uint32_t(infoCount);}();
data_json["members"]["pInfos"]=[&]() {
    json return_DMuENWx=json({});
    
        if (pInfos==NULL){
            return_DMuENWx["null"]=true;
            return return_DMuENWx;
        }
        
        return_DMuENWx["members"]={};
        for(int DMuENWx=0; DMuENWx < infoCount; DMuENWx++){
            json temp;
            temp=[&]() {
    json return_FikHDmT=json({});
    return serialize_VkMicromapBuildInfoEXT(pInfos[DMuENWx]);}();
            return_DMuENWx["members"].push_back(temp);
        }
        return return_DMuENWx;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
deferredOperation=deserialize_VkDeferredOperationKHR(result["members"]["deferredOperation"]);}();
[&]() {
infoCount=deserialize_uint32_t(result["members"]["infoCount"]);}();

VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkDestroyMicromapEXT(
VkDevice device,
 VkMicromapEXT micromap,
 const VkAllocationCallbacks* pAllocator
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkDestroyMicromapEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["micromap"]=[&]() {
    json return_IFCAGZC=json({});
    return serialize_VkMicromapEXT(micromap);}();
data_json["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
micromap=deserialize_VkMicromapEXT(result["members"]["micromap"]);}();

}
void vkCmdCopyMicromapEXT(
VkCommandBuffer commandBuffer,
 const VkCopyMicromapInfoEXT* pInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdCopyMicromapEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pInfo"]=[&]() {
    json return_TrwWiWF=json({});
    
        if (pInfo==NULL){
            return_TrwWiWF["null"]=true;
            return return_TrwWiWF;
        }
        return_TrwWiWF=[&]() {
    json return_CpNVFvb=json({});
    return serialize_VkCopyMicromapInfoEXT(*pInfo);}();
return return_TrwWiWF;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();

}
VkResult vkCopyMicromapEXT(
VkDevice device,
 VkDeferredOperationKHR deferredOperation,
 const VkCopyMicromapInfoEXT* pInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCopyMicromapEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["deferredOperation"]=[&]() {
    json return_zJwBFEh=json({});
    return serialize_VkDeferredOperationKHR(deferredOperation);}();
data_json["members"]["pInfo"]=[&]() {
    json return_TrwWiWF=json({});
    
        if (pInfo==NULL){
            return_TrwWiWF["null"]=true;
            return return_TrwWiWF;
        }
        return_TrwWiWF=[&]() {
    json return_CpNVFvb=json({});
    return serialize_VkCopyMicromapInfoEXT(*pInfo);}();
return return_TrwWiWF;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
deferredOperation=deserialize_VkDeferredOperationKHR(result["members"]["deferredOperation"]);}();

VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkCmdCopyMicromapToMemoryEXT(
VkCommandBuffer commandBuffer,
 const VkCopyMicromapToMemoryInfoEXT* pInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdCopyMicromapToMemoryEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pInfo"]=[&]() {
    json return_SHeoyPq=json({});
    
        if (pInfo==NULL){
            return_SHeoyPq["null"]=true;
            return return_SHeoyPq;
        }
        return_SHeoyPq=[&]() {
    json return_XoBaSij=json({});
    return serialize_VkCopyMicromapToMemoryInfoEXT(*pInfo);}();
return return_SHeoyPq;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();

}
VkResult vkCopyMicromapToMemoryEXT(
VkDevice device,
 VkDeferredOperationKHR deferredOperation,
 const VkCopyMicromapToMemoryInfoEXT* pInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCopyMicromapToMemoryEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["deferredOperation"]=[&]() {
    json return_zJwBFEh=json({});
    return serialize_VkDeferredOperationKHR(deferredOperation);}();
data_json["members"]["pInfo"]=[&]() {
    json return_SHeoyPq=json({});
    
        if (pInfo==NULL){
            return_SHeoyPq["null"]=true;
            return return_SHeoyPq;
        }
        return_SHeoyPq=[&]() {
    json return_XoBaSij=json({});
    return serialize_VkCopyMicromapToMemoryInfoEXT(*pInfo);}();
return return_SHeoyPq;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
deferredOperation=deserialize_VkDeferredOperationKHR(result["members"]["deferredOperation"]);}();

VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkCmdCopyMemoryToMicromapEXT(
VkCommandBuffer commandBuffer,
 const VkCopyMemoryToMicromapInfoEXT* pInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdCopyMemoryToMicromapEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pInfo"]=[&]() {
    json return_CUDMZsl=json({});
    
        if (pInfo==NULL){
            return_CUDMZsl["null"]=true;
            return return_CUDMZsl;
        }
        return_CUDMZsl=[&]() {
    json return_YGWhePm=json({});
    return serialize_VkCopyMemoryToMicromapInfoEXT(*pInfo);}();
return return_CUDMZsl;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();

}
VkResult vkCopyMemoryToMicromapEXT(
VkDevice device,
 VkDeferredOperationKHR deferredOperation,
 const VkCopyMemoryToMicromapInfoEXT* pInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCopyMemoryToMicromapEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["deferredOperation"]=[&]() {
    json return_zJwBFEh=json({});
    return serialize_VkDeferredOperationKHR(deferredOperation);}();
data_json["members"]["pInfo"]=[&]() {
    json return_CUDMZsl=json({});
    
        if (pInfo==NULL){
            return_CUDMZsl["null"]=true;
            return return_CUDMZsl;
        }
        return_CUDMZsl=[&]() {
    json return_YGWhePm=json({});
    return serialize_VkCopyMemoryToMicromapInfoEXT(*pInfo);}();
return return_CUDMZsl;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
deferredOperation=deserialize_VkDeferredOperationKHR(result["members"]["deferredOperation"]);}();

VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkCmdWriteMicromapsPropertiesEXT(
VkCommandBuffer commandBuffer,
 uint32_t micromapCount,
 const VkMicromapEXT* pMicromaps,
 VkQueryType queryType,
 VkQueryPool queryPool,
 uint32_t firstQuery
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdWriteMicromapsPropertiesEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["micromapCount"]=[&]() {
    json return_fmeSWnV=json({});
    return serialize_uint32_t(micromapCount);}();
data_json["members"]["pMicromaps"]=[&]() {
    json return_EECOdlA=json({});
    
        if (pMicromaps==NULL){
            return_EECOdlA["null"]=true;
            return return_EECOdlA;
        }
        
        return_EECOdlA["members"]={};
        for(int EECOdlA=0; EECOdlA < micromapCount; EECOdlA++){
            json temp;
            temp=[&]() {
    json return_oJyaOjR=json({});
    return serialize_VkMicromapEXT(pMicromaps[EECOdlA]);}();
            return_EECOdlA["members"].push_back(temp);
        }
        return return_EECOdlA;
        }();
data_json["members"]["queryType"]=[&]() {
    json return_wXKRLGm=json({});
    return serialize_VkQueryType(queryType);}();
data_json["members"]["queryPool"]=[&]() {
    json return_hLGHCzh=json({});
    return serialize_VkQueryPool(queryPool);}();
data_json["members"]["firstQuery"]=[&]() {
    json return_uiTbigF=json({});
    return serialize_uint32_t(firstQuery);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
micromapCount=deserialize_uint32_t(result["members"]["micromapCount"]);}();

[&]() {
queryType=deserialize_VkQueryType(result["members"]["queryType"]);}();
[&]() {
queryPool=deserialize_VkQueryPool(result["members"]["queryPool"]);}();
[&]() {
firstQuery=deserialize_uint32_t(result["members"]["firstQuery"]);}();
}
VkResult vkWriteMicromapsPropertiesEXT(
VkDevice device,
 uint32_t micromapCount,
 const VkMicromapEXT* pMicromaps,
 VkQueryType  queryType,
 size_t       dataSize,
 void* pData,
 size_t stride
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkWriteMicromapsPropertiesEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["micromapCount"]=[&]() {
    json return_fmeSWnV=json({});
    return serialize_uint32_t(micromapCount);}();
data_json["members"]["pMicromaps"]=[&]() {
    json return_EECOdlA=json({});
    
        if (pMicromaps==NULL){
            return_EECOdlA["null"]=true;
            return return_EECOdlA;
        }
        
        return_EECOdlA["members"]={};
        for(int EECOdlA=0; EECOdlA < micromapCount; EECOdlA++){
            json temp;
            temp=[&]() {
    json return_oJyaOjR=json({});
    return serialize_VkMicromapEXT(pMicromaps[EECOdlA]);}();
            return_EECOdlA["members"].push_back(temp);
        }
        return return_EECOdlA;
        }();
data_json["members"]["queryType"]=[&]() {
    json return_WQjFQIb=json({});
    return serialize_VkQueryType(queryType);}();
data_json["members"]["dataSize"]=[&]() {
    json return_ocxeENf=json({});
    return serialize_size_t(dataSize);}();
data_json["members"]["pData"]=[&]() {
    json return_uMNHZoi=json({});
    
        if (pData==NULL){
            return_uMNHZoi["null"]=true;
            return return_uMNHZoi;
        }
        return serialize_void_p(pData);
}();
data_json["members"]["stride"]=[&]() {
    json return_LQXemmN=json({});
    return serialize_size_t(stride);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
micromapCount=deserialize_uint32_t(result["members"]["micromapCount"]);}();

[&]() {
queryType=deserialize_VkQueryType(result["members"]["queryType"]);}();
[&]() {
dataSize=deserialize_size_t(result["members"]["dataSize"]);}();
[&]() {

        if (result["members"]["pData"].contains("null")){
        pData=NULL;
        return;
        }
    pData=deserialize_void_p(result["members"]["pData"]);
}();
[&]() {
stride=deserialize_size_t(result["members"]["stride"]);}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkGetDeviceMicromapCompatibilityEXT(
VkDevice device,
 const VkMicromapVersionInfoEXT* pVersionInfo,
 VkAccelerationStructureCompatibilityKHR* pCompatibility
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetDeviceMicromapCompatibilityEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pVersionInfo"]=[&]() {
    json return_MASFelG=json({});
    
        if (pVersionInfo==NULL){
            return_MASFelG["null"]=true;
            return return_MASFelG;
        }
        return_MASFelG=[&]() {
    json return_MQuMkye=json({});
    return serialize_VkMicromapVersionInfoEXT(*pVersionInfo);}();
return return_MASFelG;}();
data_json["members"]["pCompatibility"]=[&]() {
    json return_pFzhFrX=json({});
    
        if (pCompatibility==NULL){
            return_pFzhFrX["null"]=true;
            return return_pFzhFrX;
        }
        return_pFzhFrX=[&]() {
    json return_rJRBcNi=json({});
    return serialize_VkAccelerationStructureCompatibilityKHR(*pCompatibility);}();
return return_pFzhFrX;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

[&]() {

        if (result["members"]["pCompatibility"].contains("null")){
        pCompatibility=NULL;
        return;
        }
    [&]() {
*(pCompatibility)=deserialize_VkAccelerationStructureCompatibilityKHR(result["members"]["pCompatibility"]);}();
}();
}
void vkGetMicromapBuildSizesEXT(
VkDevice                                            device,
 VkAccelerationStructureBuildTypeKHR                 buildType,
 const VkMicromapBuildInfoEXT*  pBuildInfo,
 VkMicromapBuildSizesInfoEXT*           pSizeInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetMicromapBuildSizesEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_hNzkaKt=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["buildType"]=[&]() {
    json return_kfIIDlQ=json({});
    return serialize_VkAccelerationStructureBuildTypeKHR(buildType);}();
data_json["members"]["pBuildInfo"]=[&]() {
    json return_NHxNfgQ=json({});
    
        if (pBuildInfo==NULL){
            return_NHxNfgQ["null"]=true;
            return return_NHxNfgQ;
        }
        return_NHxNfgQ=[&]() {
    json return_kdNXqMJ=json({});
    return serialize_VkMicromapBuildInfoEXT(*pBuildInfo);}();
return return_NHxNfgQ;}();
data_json["members"]["pSizeInfo"]=[&]() {
    json return_aHvteGR=json({});
    
        if (pSizeInfo==NULL){
            return_aHvteGR["null"]=true;
            return return_aHvteGR;
        }
        return_aHvteGR=[&]() {
    json return_IzhsCCY=json({});
    return serialize_VkMicromapBuildSizesInfoEXT(*pSizeInfo);}();
return return_aHvteGR;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
buildType=deserialize_VkAccelerationStructureBuildTypeKHR(result["members"]["buildType"]);}();

[&]() {

        if (result["members"]["pSizeInfo"].contains("null")){
        pSizeInfo=NULL;
        return;
        }
    [&]() {
*(pSizeInfo)=deserialize_VkMicromapBuildSizesInfoEXT(result["members"]["pSizeInfo"]);}();
}();
}
void vkGetShaderModuleIdentifierEXT(
VkDevice device,
 VkShaderModule shaderModule,
 VkShaderModuleIdentifierEXT* pIdentifier
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetShaderModuleIdentifierEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["shaderModule"]=[&]() {
    json return_StBFTOZ=json({});
    return serialize_VkShaderModule(shaderModule);}();
data_json["members"]["pIdentifier"]=[&]() {
    json return_ihsGwgD=json({});
    
        if (pIdentifier==NULL){
            return_ihsGwgD["null"]=true;
            return return_ihsGwgD;
        }
        return_ihsGwgD=[&]() {
    json return_frQlYdL=json({});
    return serialize_VkShaderModuleIdentifierEXT(*pIdentifier);}();
return return_ihsGwgD;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
shaderModule=deserialize_VkShaderModule(result["members"]["shaderModule"]);}();
[&]() {

        if (result["members"]["pIdentifier"].contains("null")){
        pIdentifier=NULL;
        return;
        }
    [&]() {
*(pIdentifier)=deserialize_VkShaderModuleIdentifierEXT(result["members"]["pIdentifier"]);}();
}();
}
void vkGetShaderModuleCreateInfoIdentifierEXT(
VkDevice device,
 const VkShaderModuleCreateInfo* pCreateInfo,
 VkShaderModuleIdentifierEXT* pIdentifier
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetShaderModuleCreateInfoIdentifierEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pCreateInfo"]=[&]() {
    json return_zQuPJLA=json({});
    
        if (pCreateInfo==NULL){
            return_zQuPJLA["null"]=true;
            return return_zQuPJLA;
        }
        return_zQuPJLA=[&]() {
    json return_BZkuQie=json({});
    return serialize_VkShaderModuleCreateInfo(*pCreateInfo);}();
return return_zQuPJLA;}();
data_json["members"]["pIdentifier"]=[&]() {
    json return_ihsGwgD=json({});
    
        if (pIdentifier==NULL){
            return_ihsGwgD["null"]=true;
            return return_ihsGwgD;
        }
        return_ihsGwgD=[&]() {
    json return_frQlYdL=json({});
    return serialize_VkShaderModuleIdentifierEXT(*pIdentifier);}();
return return_ihsGwgD;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

[&]() {

        if (result["members"]["pIdentifier"].contains("null")){
        pIdentifier=NULL;
        return;
        }
    [&]() {
*(pIdentifier)=deserialize_VkShaderModuleIdentifierEXT(result["members"]["pIdentifier"]);}();
}();
}
void vkGetImageSubresourceLayout2KHR(
VkDevice device,
 VkImage image,
 const VkImageSubresource2KHR* pSubresource,
 VkSubresourceLayout2KHR* pLayout
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetImageSubresourceLayout2KHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["image"]=[&]() {
    json return_fgEkUQK=json({});
    return serialize_VkImage(image);}();
data_json["members"]["pSubresource"]=[&]() {
    json return_bZdtNsN=json({});
    
        if (pSubresource==NULL){
            return_bZdtNsN["null"]=true;
            return return_bZdtNsN;
        }
        return_bZdtNsN=[&]() {
    json return_BmMhjUO=json({});
    return serialize_VkImageSubresource2KHR(*pSubresource);}();
return return_bZdtNsN;}();
data_json["members"]["pLayout"]=[&]() {
    json return_iqRegYw=json({});
    
        if (pLayout==NULL){
            return_iqRegYw["null"]=true;
            return return_iqRegYw;
        }
        return_iqRegYw=[&]() {
    json return_YfnftDn=json({});
    return serialize_VkSubresourceLayout2KHR(*pLayout);}();
return return_iqRegYw;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
image=deserialize_VkImage(result["members"]["image"]);}();

[&]() {

        if (result["members"]["pLayout"].contains("null")){
        pLayout=NULL;
        return;
        }
    [&]() {
*(pLayout)=deserialize_VkSubresourceLayout2KHR(result["members"]["pLayout"]);}();
}();
}
void vkGetImageSubresourceLayout2EXT(
VkDevice device,
 VkImage image,
 const VkImageSubresource2KHR* pSubresource,
 VkSubresourceLayout2KHR* pLayout
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetImageSubresourceLayout2EXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["image"]=[&]() {
    json return_fgEkUQK=json({});
    return serialize_VkImage(image);}();
data_json["members"]["pSubresource"]=[&]() {
    json return_bZdtNsN=json({});
    
        if (pSubresource==NULL){
            return_bZdtNsN["null"]=true;
            return return_bZdtNsN;
        }
        return_bZdtNsN=[&]() {
    json return_BmMhjUO=json({});
    return serialize_VkImageSubresource2KHR(*pSubresource);}();
return return_bZdtNsN;}();
data_json["members"]["pLayout"]=[&]() {
    json return_iqRegYw=json({});
    
        if (pLayout==NULL){
            return_iqRegYw["null"]=true;
            return return_iqRegYw;
        }
        return_iqRegYw=[&]() {
    json return_YfnftDn=json({});
    return serialize_VkSubresourceLayout2KHR(*pLayout);}();
return return_iqRegYw;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
image=deserialize_VkImage(result["members"]["image"]);}();

[&]() {

        if (result["members"]["pLayout"].contains("null")){
        pLayout=NULL;
        return;
        }
    [&]() {
*(pLayout)=deserialize_VkSubresourceLayout2KHR(result["members"]["pLayout"]);}();
}();
}
VkResult vkGetPipelinePropertiesEXT(
VkDevice device,
 const VkPipelineInfoEXT* pPipelineInfo,
 VkBaseOutStructure* pPipelineProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPipelinePropertiesEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pPipelineInfo"]=[&]() {
    json return_TzcetmW=json({});
    
        if (pPipelineInfo==NULL){
            return_TzcetmW["null"]=true;
            return return_TzcetmW;
        }
        return_TzcetmW=[&]() {
    json return_TvTaBaR=json({});
    return serialize_VkPipelineInfoEXT(*pPipelineInfo);}();
return return_TzcetmW;}();
data_json["members"]["pPipelineProperties"]=[&]() {
    json return_PQgRlGt=json({});
    
        if (pPipelineProperties==NULL){
            return_PQgRlGt["null"]=true;
            return return_PQgRlGt;
        }
        return_PQgRlGt=[&]() {
    json return_HFHIkaz=json({});
    return serialize_VkBaseOutStructure(*pPipelineProperties);}();
return return_PQgRlGt;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

[&]() {

        if (result["members"]["pPipelineProperties"].contains("null")){
        pPipelineProperties=NULL;
        return;
        }
    [&]() {
*(pPipelineProperties)=deserialize_VkBaseOutStructure(result["members"]["pPipelineProperties"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkGetFramebufferTilePropertiesQCOM(
VkDevice device,
 VkFramebuffer framebuffer,
 uint32_t* pPropertiesCount,
 VkTilePropertiesQCOM* pProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetFramebufferTilePropertiesQCOM";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["framebuffer"]=[&]() {
    json return_MEXIdZv=json({});
    return serialize_VkFramebuffer(framebuffer);}();
data_json["members"]["pPropertiesCount"]=[&]() {
    json return_hMPRREQ=json({});
    
        if (pPropertiesCount==NULL){
            return_hMPRREQ["null"]=true;
            return return_hMPRREQ;
        }
        return_hMPRREQ=[&]() {
    json return_ZiDDZIr=json({});
    return serialize_uint32_t(*pPropertiesCount);}();
return return_hMPRREQ;}();
data_json["members"]["pProperties"]=[&]() {
    json return_dSLFKCd=json({});
    
        if (pProperties==NULL){
            return_dSLFKCd["null"]=true;
            return return_dSLFKCd;
        }
        
        return_dSLFKCd["members"]={};
        for(int dSLFKCd=0; dSLFKCd < *pPropertiesCount; dSLFKCd++){
            json temp;
            temp=[&]() {
    json return_nfjHsYg=json({});
    return serialize_VkTilePropertiesQCOM(pProperties[dSLFKCd]);}();
            return_dSLFKCd["members"].push_back(temp);
        }
        return return_dSLFKCd;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
framebuffer=deserialize_VkFramebuffer(result["members"]["framebuffer"]);}();
[&]() {

        if (result["members"]["pPropertiesCount"].contains("null")){
        pPropertiesCount=NULL;
        return;
        }
    [&]() {
*(pPropertiesCount)=deserialize_uint32_t(result["members"]["pPropertiesCount"]);}();
}();
[&]() {

        if (result["members"]["pProperties"].contains("null")){
        pProperties=NULL;
        return;
        }
    
        for (int oyCTPcZ=0; oyCTPcZ < *pPropertiesCount; oyCTPcZ++){
            [&]() {
pProperties[oyCTPcZ]=deserialize_VkTilePropertiesQCOM(result["members"]["pProperties"]["members"][oyCTPcZ]);}();;
        }
        }();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkGetDynamicRenderingTilePropertiesQCOM(
VkDevice device,
 const VkRenderingInfo* pRenderingInfo,
 VkTilePropertiesQCOM* pProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetDynamicRenderingTilePropertiesQCOM";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pRenderingInfo"]=[&]() {
    json return_iKQOGWZ=json({});
    
        if (pRenderingInfo==NULL){
            return_iKQOGWZ["null"]=true;
            return return_iKQOGWZ;
        }
        return_iKQOGWZ=[&]() {
    json return_jwLNECd=json({});
    return serialize_VkRenderingInfo(*pRenderingInfo);}();
return return_iKQOGWZ;}();
data_json["members"]["pProperties"]=[&]() {
    json return_hhhTRmg=json({});
    
        if (pProperties==NULL){
            return_hhhTRmg["null"]=true;
            return return_hhhTRmg;
        }
        return_hhhTRmg=[&]() {
    json return_voIHYba=json({});
    return serialize_VkTilePropertiesQCOM(*pProperties);}();
return return_hhhTRmg;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

[&]() {

        if (result["members"]["pProperties"].contains("null")){
        pProperties=NULL;
        return;
        }
    [&]() {
*(pProperties)=deserialize_VkTilePropertiesQCOM(result["members"]["pProperties"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkGetPhysicalDeviceOpticalFlowImageFormatsNV(
VkPhysicalDevice physicalDevice,
 const VkOpticalFlowImageFormatInfoNV* pOpticalFlowImageFormatInfo,
 uint32_t* pFormatCount,
 VkOpticalFlowImageFormatPropertiesNV* pImageFormatProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceOpticalFlowImageFormatsNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["pOpticalFlowImageFormatInfo"]=[&]() {
    json return_CciqzNV=json({});
    
        if (pOpticalFlowImageFormatInfo==NULL){
            return_CciqzNV["null"]=true;
            return return_CciqzNV;
        }
        return_CciqzNV=[&]() {
    json return_PMfUBcq=json({});
    return serialize_VkOpticalFlowImageFormatInfoNV(*pOpticalFlowImageFormatInfo);}();
return return_CciqzNV;}();
data_json["members"]["pFormatCount"]=[&]() {
    json return_ZfwQvOT=json({});
    
        if (pFormatCount==NULL){
            return_ZfwQvOT["null"]=true;
            return return_ZfwQvOT;
        }
        return_ZfwQvOT=[&]() {
    json return_NYBQprC=json({});
    return serialize_uint32_t(*pFormatCount);}();
return return_ZfwQvOT;}();
data_json["members"]["pImageFormatProperties"]=[&]() {
    json return_yTLWayQ=json({});
    
        if (pImageFormatProperties==NULL){
            return_yTLWayQ["null"]=true;
            return return_yTLWayQ;
        }
        
        return_yTLWayQ["members"]={};
        for(int yTLWayQ=0; yTLWayQ < *pFormatCount; yTLWayQ++){
            json temp;
            temp=[&]() {
    json return_DiyyGXn=json({});
    return serialize_VkOpticalFlowImageFormatPropertiesNV(pImageFormatProperties[yTLWayQ]);}();
            return_yTLWayQ["members"].push_back(temp);
        }
        return return_yTLWayQ;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();

[&]() {

        if (result["members"]["pFormatCount"].contains("null")){
        pFormatCount=NULL;
        return;
        }
    [&]() {
*(pFormatCount)=deserialize_uint32_t(result["members"]["pFormatCount"]);}();
}();
[&]() {

        if (result["members"]["pImageFormatProperties"].contains("null")){
        pImageFormatProperties=NULL;
        return;
        }
    
        for (int piPbHeR=0; piPbHeR < *pFormatCount; piPbHeR++){
            [&]() {
pImageFormatProperties[piPbHeR]=deserialize_VkOpticalFlowImageFormatPropertiesNV(result["members"]["pImageFormatProperties"]["members"][piPbHeR]);}();;
        }
        }();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkCreateOpticalFlowSessionNV(
VkDevice device,
 const VkOpticalFlowSessionCreateInfoNV* pCreateInfo,
 const VkAllocationCallbacks* pAllocator,
 VkOpticalFlowSessionNV* pSession
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreateOpticalFlowSessionNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pCreateInfo"]=[&]() {
    json return_TkRREmZ=json({});
    
        if (pCreateInfo==NULL){
            return_TkRREmZ["null"]=true;
            return return_TkRREmZ;
        }
        return_TkRREmZ=[&]() {
    json return_kUpaTJd=json({});
    return serialize_VkOpticalFlowSessionCreateInfoNV(*pCreateInfo);}();
return return_TkRREmZ;}();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pSession"]=[&]() {
    json return_LIJRsCt=json({});
    
        if (pSession==NULL){
            return_LIJRsCt["null"]=true;
            return return_LIJRsCt;
        }
        return_LIJRsCt=[&]() {
    json return_qSNFHFy=json({});
    return serialize_VkOpticalFlowSessionNV(*pSession);}();
return return_LIJRsCt;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();


[&]() {

        if (result["members"]["pSession"].contains("null")){
        pSession=NULL;
        return;
        }
    [&]() {
*(pSession)=deserialize_VkOpticalFlowSessionNV(result["members"]["pSession"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                handle_to_parent_handle_struct[(uintptr_t)(*pSession)]=parent;
                
return return_value;
}
void vkDestroyOpticalFlowSessionNV(
VkDevice device,
 VkOpticalFlowSessionNV session,
 const VkAllocationCallbacks* pAllocator
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkDestroyOpticalFlowSessionNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["session"]=[&]() {
    json return_QXLUMFZ=json({});
    return serialize_VkOpticalFlowSessionNV(session);}();
data_json["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
session=deserialize_VkOpticalFlowSessionNV(result["members"]["session"]);}();

}
VkResult vkBindOpticalFlowSessionImageNV(
VkDevice device,
 VkOpticalFlowSessionNV session,
 VkOpticalFlowSessionBindingPointNV bindingPoint,
 VkImageView view,
 VkImageLayout layout
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkBindOpticalFlowSessionImageNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["session"]=[&]() {
    json return_QXLUMFZ=json({});
    return serialize_VkOpticalFlowSessionNV(session);}();
data_json["members"]["bindingPoint"]=[&]() {
    json return_FqTNUsz=json({});
    return serialize_VkOpticalFlowSessionBindingPointNV(bindingPoint);}();
data_json["members"]["view"]=[&]() {
    json return_NzIpQJV=json({});
    return serialize_VkImageView(view);}();
data_json["members"]["layout"]=[&]() {
    json return_YJLInjw=json({});
    return serialize_VkImageLayout(layout);}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
session=deserialize_VkOpticalFlowSessionNV(result["members"]["session"]);}();
[&]() {
bindingPoint=deserialize_VkOpticalFlowSessionBindingPointNV(result["members"]["bindingPoint"]);}();
[&]() {
view=deserialize_VkImageView(result["members"]["view"]);}();
[&]() {
layout=deserialize_VkImageLayout(result["members"]["layout"]);}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkCmdOpticalFlowExecuteNV(
VkCommandBuffer commandBuffer,
 VkOpticalFlowSessionNV session,
 const VkOpticalFlowExecuteInfoNV* pExecuteInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdOpticalFlowExecuteNV";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["session"]=[&]() {
    json return_QXLUMFZ=json({});
    return serialize_VkOpticalFlowSessionNV(session);}();
data_json["members"]["pExecuteInfo"]=[&]() {
    json return_USYZqXI=json({});
    
        if (pExecuteInfo==NULL){
            return_USYZqXI["null"]=true;
            return return_USYZqXI;
        }
        return_USYZqXI=[&]() {
    json return_QJMlrvC=json({});
    return serialize_VkOpticalFlowExecuteInfoNV(*pExecuteInfo);}();
return return_USYZqXI;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
session=deserialize_VkOpticalFlowSessionNV(result["members"]["session"]);}();

}
VkResult vkGetDeviceFaultInfoEXT(
VkDevice device,
 VkDeviceFaultCountsEXT* pFaultCounts,
 VkDeviceFaultInfoEXT* pFaultInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetDeviceFaultInfoEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pFaultCounts"]=[&]() {
    json return_gPJvsOD=json({});
    
        if (pFaultCounts==NULL){
            return_gPJvsOD["null"]=true;
            return return_gPJvsOD;
        }
        return_gPJvsOD=[&]() {
    json return_gjrmbIU=json({});
    return serialize_VkDeviceFaultCountsEXT(*pFaultCounts);}();
return return_gPJvsOD;}();
data_json["members"]["pFaultInfo"]=[&]() {
    json return_bOwqwxH=json({});
    
        if (pFaultInfo==NULL){
            return_bOwqwxH["null"]=true;
            return return_bOwqwxH;
        }
        return_bOwqwxH=[&]() {
    json return_XETFneH=json({});
    return serialize_VkDeviceFaultInfoEXT(*pFaultInfo);}();
return return_bOwqwxH;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {

        if (result["members"]["pFaultCounts"].contains("null")){
        pFaultCounts=NULL;
        return;
        }
    [&]() {
*(pFaultCounts)=deserialize_VkDeviceFaultCountsEXT(result["members"]["pFaultCounts"]);}();
}();
[&]() {

        if (result["members"]["pFaultInfo"].contains("null")){
        pFaultInfo=NULL;
        return;
        }
    [&]() {
*(pFaultInfo)=deserialize_VkDeviceFaultInfoEXT(result["members"]["pFaultInfo"]);}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkCmdSetDepthBias2EXT(
VkCommandBuffer commandBuffer,
 const VkDepthBiasInfoEXT*         pDepthBiasInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdSetDepthBias2EXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["pDepthBiasInfo"]=[&]() {
    json return_EVfWBBK=json({});
    
        if (pDepthBiasInfo==NULL){
            return_EVfWBBK["null"]=true;
            return return_EVfWBBK;
        }
        return_EVfWBBK=[&]() {
    json return_HAQYcaj=json({});
    return serialize_VkDepthBiasInfoEXT(*pDepthBiasInfo);}();
return return_EVfWBBK;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();

}
VkResult vkReleaseSwapchainImagesEXT(
VkDevice device,
 const VkReleaseSwapchainImagesInfoEXT* pReleaseInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkReleaseSwapchainImagesEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pReleaseInfo"]=[&]() {
    json return_bWEwLpe=json({});
    
        if (pReleaseInfo==NULL){
            return_bWEwLpe["null"]=true;
            return return_bWEwLpe;
        }
        return_bWEwLpe=[&]() {
    json return_PhnUYNe=json({});
    return serialize_VkReleaseSwapchainImagesInfoEXT(*pReleaseInfo);}();
return return_bWEwLpe;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkGetDeviceImageSubresourceLayoutKHR(
VkDevice device,
 const VkDeviceImageSubresourceInfoKHR* pInfo,
 VkSubresourceLayout2KHR* pLayout
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetDeviceImageSubresourceLayoutKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pInfo"]=[&]() {
    json return_VkxpJce=json({});
    
        if (pInfo==NULL){
            return_VkxpJce["null"]=true;
            return return_VkxpJce;
        }
        return_VkxpJce=[&]() {
    json return_GAhdQQQ=json({});
    return serialize_VkDeviceImageSubresourceInfoKHR(*pInfo);}();
return return_VkxpJce;}();
data_json["members"]["pLayout"]=[&]() {
    json return_iqRegYw=json({});
    
        if (pLayout==NULL){
            return_iqRegYw["null"]=true;
            return return_iqRegYw;
        }
        return_iqRegYw=[&]() {
    json return_YfnftDn=json({});
    return serialize_VkSubresourceLayout2KHR(*pLayout);}();
return return_iqRegYw;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

[&]() {

        if (result["members"]["pLayout"].contains("null")){
        pLayout=NULL;
        return;
        }
    [&]() {
*(pLayout)=deserialize_VkSubresourceLayout2KHR(result["members"]["pLayout"]);}();
}();
}
VkResult vkMapMemory2KHR(
VkDevice device,
 const VkMemoryMapInfoKHR* pMemoryMapInfo,
 void** ppData
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkMapMemory2KHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

        auto info=new MemInfo();
        
        VkDeviceSize whole_size;
        vkGetDeviceMemoryCommitment(device,pMemoryMapInfo->memory,&whole_size);
        info->size=whole_size;
        
        devicememory_to_mem_info[(uintptr_t)pMemoryMapInfo->memory]=info;
        
{
VkMemoryMapInfoKHR* pMemoryMapInfo=pMemoryMapInfo;

        pMemoryMapInfo->size=whole_size;
        pMemoryMapInfo->offset=0;
        
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pMemoryMapInfo"]=[&]() {
    json return_iAssYzz=json({});
    
        if (pMemoryMapInfo==NULL){
            return_iAssYzz["null"]=true;
            return return_iAssYzz;
        }
        return_iAssYzz=[&]() {
    json return_gjOOAnJ=json({});
    return serialize_VkMemoryMapInfoKHR(*pMemoryMapInfo);}();
return return_iAssYzz;}();
data_json["members"]["ppData"]=[&]() {
    json return_PsFVEjO=json({});
    
        if (ppData==NULL){
            return_PsFVEjO["null"]=true;
            return return_PsFVEjO;
        }
        return_PsFVEjO=[&]() {
    json return_KWNLtTl=json({});
    
        if (*ppData==NULL){
            return_KWNLtTl["null"]=true;
            return return_KWNLtTl;
        }
        return serialize_void_p(*ppData);
}();
return return_PsFVEjO;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

[&]() {

        if (result["members"]["ppData"].contains("null")){
        ppData=NULL;
        return;
        }
    [&]() {

        if (result["members"]["ppData"].contains("null")){
        *(ppData)=NULL;
        return;
        }
    *(ppData)=deserialize_void_p(result["members"]["ppData"]);
}();
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

        info->fd=shm_open_anon(); //Make new place for memory
        ftruncate(info->fd,info->size);
        
        info->mem=mmap(NULL,info->size, PROT_EXEC | PROT_READ | PROT_WRITE, MAP_SHARED, info->fd,0);
        
        auto client_mem=(uintptr_t)info->mem;
        uintptr_t server_mem=result["members"]["ppData"]["ptr"];
        
        client_to_server_mem[client_mem]=server_mem;
        server_to_client_mem[server_mem]=client_mem;
        
        memcpy(info->mem,*ppData,info->size);
        
        *ppData=mmap(NULL,pMemoryMapInfo->size,PROT_EXEC | PROT_READ | PROT_WRITE, MAP_SHARED,info->fd,pMemoryMapInfo->offset);
        
        info->mapped_ranges.push_back(*ppData);
        
        
return return_value;
}
VkResult vkUnmapMemory2KHR(
VkDevice device,
 const VkMemoryUnmapInfoKHR* pMemoryUnmapInfo
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkUnmapMemory2KHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["pMemoryUnmapInfo"]=[&]() {
    json return_MSeIZcJ=json({});
    
        if (pMemoryUnmapInfo==NULL){
            return_MSeIZcJ["null"]=true;
            return return_MSeIZcJ;
        }
        return_MSeIZcJ=[&]() {
    json return_FbaHlKW=json({});
    return serialize_VkMemoryUnmapInfoKHR(*pMemoryUnmapInfo);}();
return return_MSeIZcJ;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();

VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
VkResult vkCreateShadersEXT(
VkDevice device,
 uint32_t createInfoCount,
 const VkShaderCreateInfoEXT* pCreateInfos,
 const VkAllocationCallbacks* pAllocator,
 VkShaderEXT* pShaders
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCreateShadersEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["createInfoCount"]=[&]() {
    json return_cRiHaUT=json({});
    return serialize_uint32_t(createInfoCount);}();
data_json["members"]["pCreateInfos"]=[&]() {
    json return_VEGzEfV=json({});
    
        if (pCreateInfos==NULL){
            return_VEGzEfV["null"]=true;
            return return_VEGzEfV;
        }
        
        return_VEGzEfV["members"]={};
        for(int VEGzEfV=0; VEGzEfV < createInfoCount; VEGzEfV++){
            json temp;
            temp=[&]() {
    json return_dCUcdrw=json({});
    return serialize_VkShaderCreateInfoEXT(pCreateInfos[VEGzEfV]);}();
            return_VEGzEfV["members"].push_back(temp);
        }
        return return_VEGzEfV;
        }();
data_json["members"]["pAllocator"]=[&]() {
    json return_ZuJzhrn=json({});
    
        if (pAllocator==NULL){
            return_ZuJzhrn["null"]=true;
            return return_ZuJzhrn;
        }
        return_ZuJzhrn=[&]() {
    json return_ikEGvrH=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_ZuJzhrn;}();
data_json["members"]["pShaders"]=[&]() {
    json return_paFlOkF=json({});
    
        if (pShaders==NULL){
            return_paFlOkF["null"]=true;
            return return_paFlOkF;
        }
        
        return_paFlOkF["members"]={};
        for(int paFlOkF=0; paFlOkF < createInfoCount; paFlOkF++){
            json temp;
            temp=[&]() {
    json return_jCBwGPT=json({});
    return serialize_VkShaderEXT(pShaders[paFlOkF]);}();
            return_paFlOkF["members"].push_back(temp);
        }
        return return_paFlOkF;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
createInfoCount=deserialize_uint32_t(result["members"]["createInfoCount"]);}();


[&]() {

        if (result["members"]["pShaders"].contains("null")){
        pShaders=NULL;
        return;
        }
    
        for (int WCIUpbh=0; WCIUpbh < createInfoCount; WCIUpbh++){
            [&]() {
pShaders[WCIUpbh]=deserialize_VkShaderEXT(result["members"]["pShaders"]["members"][WCIUpbh]);}();;
        }
        }();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();

                for (int i=0; i<createInfoCount; i++){
                    handle_to_parent_handle_struct[(uintptr_t)pShaders[i]]=parent;
                }
                
return return_value;
}
void vkDestroyShaderEXT(
VkDevice device,
 VkShaderEXT shader,
 const VkAllocationCallbacks* pAllocator
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkDestroyShaderEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["shader"]=[&]() {
    json return_kTxlicC=json({});
    return serialize_VkShaderEXT(shader);}();
data_json["members"]["pAllocator"]=[&]() {
    json return_JstQEaC=json({});
    
        if (pAllocator==NULL){
            return_JstQEaC["null"]=true;
            return return_JstQEaC;
        }
        return_JstQEaC=[&]() {
    json return_dcollKl=json({});
    return serialize_VkAllocationCallbacks(*pAllocator);}();
return return_JstQEaC;}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
shader=deserialize_VkShaderEXT(result["members"]["shader"]);}();

}
VkResult vkGetShaderBinaryDataEXT(
VkDevice device,
 VkShaderEXT shader,
 size_t* pDataSize,
 void* pData
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetShaderBinaryDataEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)device];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["device"]=[&]() {
    json return_PcIXWsz=json({});
    return serialize_VkDevice(device);}();
data_json["members"]["shader"]=[&]() {
    json return_kTxlicC=json({});
    return serialize_VkShaderEXT(shader);}();
data_json["members"]["pDataSize"]=[&]() {
    json return_DeyPpRh=json({});
    
        if (pDataSize==NULL){
            return_DeyPpRh["null"]=true;
            return return_DeyPpRh;
        }
        return_DeyPpRh=[&]() {
    json return_ffvzSRv=json({});
    return serialize_size_t(*pDataSize);}();
return return_DeyPpRh;}();
data_json["members"]["pData"]=[&]() {
    json return_MOqETBu=json({});
    
        if (pData==NULL){
            return_MOqETBu["null"]=true;
            return return_MOqETBu;
        }
        return serialize_void_p(pData);
}();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
device=deserialize_VkDevice(result["members"]["device"]);}();
[&]() {
shader=deserialize_VkShaderEXT(result["members"]["shader"]);}();
[&]() {

        if (result["members"]["pDataSize"].contains("null")){
        pDataSize=NULL;
        return;
        }
    [&]() {
*(pDataSize)=deserialize_size_t(result["members"]["pDataSize"]);}();
}();
[&]() {

        if (result["members"]["pData"].contains("null")){
        pData=NULL;
        return;
        }
    pData=deserialize_void_p(result["members"]["pData"]);
}();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
void vkCmdBindShadersEXT(
VkCommandBuffer commandBuffer,
 uint32_t stageCount,
 const VkShaderStageFlagBits* pStages,
 const VkShaderEXT* pShaders
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkCmdBindShadersEXT";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)commandBuffer];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["commandBuffer"]=[&]() {
    json return_mRVOwyP=json({});
    return serialize_VkCommandBuffer(commandBuffer);}();
data_json["members"]["stageCount"]=[&]() {
    json return_TNsnBml=json({});
    return serialize_uint32_t(stageCount);}();
data_json["members"]["pStages"]=[&]() {
    json return_TrQNrwC=json({});
    
        if (pStages==NULL){
            return_TrQNrwC["null"]=true;
            return return_TrQNrwC;
        }
        
        return_TrQNrwC["members"]={};
        for(int TrQNrwC=0; TrQNrwC < stageCount; TrQNrwC++){
            json temp;
            temp=[&]() {
    json return_pJyofbO=json({});
    return serialize_VkShaderStageFlagBits(pStages[TrQNrwC]);}();
            return_TrQNrwC["members"].push_back(temp);
        }
        return return_TrQNrwC;
        }();
data_json["members"]["pShaders"]=[&]() {
    json return_yZLrDLm=json({});
    
        if (pShaders==NULL){
            return_yZLrDLm["null"]=true;
            return return_yZLrDLm;
        }
        
        return_yZLrDLm["members"]={};
        for(int yZLrDLm=0; yZLrDLm < stageCount; yZLrDLm++){
            json temp;
            temp=[&]() {
    json return_enWRKDR=json({});
    return serialize_VkShaderEXT(pShaders[yZLrDLm]);}();
            return_yZLrDLm["members"].push_back(temp);
        }
        return return_yZLrDLm;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
commandBuffer=deserialize_VkCommandBuffer(result["members"]["commandBuffer"]);}();
[&]() {
stageCount=deserialize_uint32_t(result["members"]["stageCount"]);}();


}
VkResult vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR(
VkPhysicalDevice physicalDevice,
 uint32_t* pPropertyCount,
 VkCooperativeMatrixPropertiesKHR* pProperties
){
//Will only be called by the client
auto data_json=json({});
data_json["type"]="command_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR";

        auto parent=handle_to_parent_handle_struct[(uintptr_t)physicalDevice];
        if (parent.device!=NULL){
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.device;
        }else{
            data_json["parent"]["type"]="Instance";
            data_json["parent"]["handle"]=(uintptr_t)parent.instance;
        }
        

{
data_json["members"]["physicalDevice"]=[&]() {
    json return_UTHMtVO=json({});
    return serialize_VkPhysicalDevice(physicalDevice);}();
data_json["members"]["pPropertyCount"]=[&]() {
    json return_MnYOHdG=json({});
    
        if (pPropertyCount==NULL){
            return_MnYOHdG["null"]=true;
            return return_MnYOHdG;
        }
        return_MnYOHdG=[&]() {
    json return_rPOmKzR=json({});
    return serialize_uint32_t(*pPropertyCount);}();
return return_MnYOHdG;}();
data_json["members"]["pProperties"]=[&]() {
    json return_jLCyrCC=json({});
    
        if (pProperties==NULL){
            return_jLCyrCC["null"]=true;
            return return_jLCyrCC;
        }
        
        return_jLCyrCC["members"]={};
        for(int jLCyrCC=0; jLCyrCC < *pPropertyCount; jLCyrCC++){
            json temp;
            temp=[&]() {
    json return_kucuiCA=json({});
    return serialize_VkCooperativeMatrixPropertiesKHR(pProperties[jLCyrCC]);}();
            return_jLCyrCC["members"].push_back(temp);
        }
        return return_jLCyrCC;
        }();
}

        writeToConn(data_json);
        json result;
        while(true){
            result=readFromConn();
            std::string result_type=result["type"];
            if (result_type=="sync_init"){
                handle_sync_init(result);
            }
            else if (result_type=="Response"){
                break;
            }  
    

        else if (result_type=="PFN_vkInternalAllocationNotification_request"){
            handle_PFN_vkInternalAllocationNotification_request(result);
        }
        

        else if (result_type=="PFN_vkInternalFreeNotification_request"){
            handle_PFN_vkInternalFreeNotification_request(result);
        }
        

        else if (result_type=="PFN_vkReallocationFunction_request"){
            handle_PFN_vkReallocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkAllocationFunction_request"){
            handle_PFN_vkAllocationFunction_request(result);
        }
        

        else if (result_type=="PFN_vkFreeFunction_request"){
            handle_PFN_vkFreeFunction_request(result);
        }
        

        else if (result_type=="PFN_vkDebugReportCallbackEXT_request"){
            handle_PFN_vkDebugReportCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDebugUtilsMessengerCallbackEXT_request"){
            handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(result);
        }
        

        else if (result_type=="PFN_vkDeviceMemoryReportCallbackEXT_request"){
            handle_PFN_vkDeviceMemoryReportCallbackEXT_request(result);
        }
        
}
[&]() {
physicalDevice=deserialize_VkPhysicalDevice(result["members"]["physicalDevice"]);}();
[&]() {

        if (result["members"]["pPropertyCount"].contains("null")){
        pPropertyCount=NULL;
        return;
        }
    [&]() {
*(pPropertyCount)=deserialize_uint32_t(result["members"]["pPropertyCount"]);}();
}();
[&]() {

        if (result["members"]["pProperties"].contains("null")){
        pProperties=NULL;
        return;
        }
    
        for (int KJlZdfT=0; KJlZdfT < *pPropertyCount; KJlZdfT++){
            [&]() {
pProperties[KJlZdfT]=deserialize_VkCooperativeMatrixPropertiesKHR(result["members"]["pProperties"]["members"][KJlZdfT]);}();;
        }
        }();
VkResult return_value;
[&]() {
return_value=deserialize_VkResult(result["return"]);}();
return return_value;
}
}
#endif

#ifndef CLIENT
int main(int argc, char** argv){
    startServer();
    std::promise<void>().get_future().wait(); //Wait forever
}
#endif

