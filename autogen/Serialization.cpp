
#include <ThreadStruct.hpp>

#include <schema.capnp.h>
using namespace capnp;

#include <Serialization.hpp>
#include <Server.hpp>
#include <Synchronization.hpp>
#include <map>


typedef struct {
    void* pUserData;

uintptr_t PFN_vkVoidFunction;
uintptr_t PFN_vkAllocationFunction;
uintptr_t PFN_vkDebugUtilsMessengerCallbackEXT;
uintptr_t PFN_vkReallocationFunction;
uintptr_t PFN_vkDebugReportCallbackEXT;
uintptr_t PFN_vkDeviceMemoryReportCallbackEXT;
uintptr_t PFN_vkFreeFunction;
uintptr_t PFN_vkGetInstanceProcAddrLUNARG;
uintptr_t PFN_vkInternalFreeNotification;
uintptr_t PFN_vkFaultCallbackFunction;
uintptr_t PFN_vkInternalAllocationNotification;
} pUserData;

void serialize_pNext(PNext::Builder builder, void* member){
    if (member==NULL){
        builder.initNone();
        return;
    }
    
    auto chain=((VkBaseInStructure*)member);
    switch(chain->sType){


    case :
        return serialize_struct(builder.getVkBaseOutStructure(), ((VkBaseOutStructure*)(member))[0]);
    

    case :
        return serialize_struct(builder.getVkBaseInStructure(), ((VkBaseInStructure*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_APPLICATION_INFO:
        return serialize_struct(builder.getVkApplicationInfo(), ((VkApplicationInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO:
        return serialize_struct(builder.getVkDeviceQueueCreateInfo(), ((VkDeviceQueueCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO:
        return serialize_struct(builder.getVkDeviceCreateInfo(), ((VkDeviceCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO:
        return serialize_struct(builder.getVkInstanceCreateInfo(), ((VkInstanceCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO:
        return serialize_struct(builder.getVkMemoryAllocateInfo(), ((VkMemoryAllocateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE:
        return serialize_struct(builder.getVkMappedMemoryRange(), ((VkMappedMemoryRange*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET:
        return serialize_struct(builder.getVkWriteDescriptorSet(), ((VkWriteDescriptorSet*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET:
        return serialize_struct(builder.getVkCopyDescriptorSet(), ((VkCopyDescriptorSet*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_BUFFER_USAGE_FLAGS_2_CREATE_INFO_KHR:
        return serialize_struct(builder.getVkBufferUsageFlags2CreateInfoKHR(), ((VkBufferUsageFlags2CreateInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO:
        return serialize_struct(builder.getVkBufferCreateInfo(), ((VkBufferCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO:
        return serialize_struct(builder.getVkBufferViewCreateInfo(), ((VkBufferViewCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_MEMORY_BARRIER:
        return serialize_struct(builder.getVkMemoryBarrier(), ((VkMemoryBarrier*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER:
        return serialize_struct(builder.getVkBufferMemoryBarrier(), ((VkBufferMemoryBarrier*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER:
        return serialize_struct(builder.getVkImageMemoryBarrier(), ((VkImageMemoryBarrier*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO:
        return serialize_struct(builder.getVkImageCreateInfo(), ((VkImageCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO:
        return serialize_struct(builder.getVkImageViewCreateInfo(), ((VkImageViewCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_BIND_SPARSE_INFO:
        return serialize_struct(builder.getVkBindSparseInfo(), ((VkBindSparseInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO:
        return serialize_struct(builder.getVkShaderModuleCreateInfo(), ((VkShaderModuleCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO:
        return serialize_struct(builder.getVkDescriptorSetLayoutCreateInfo(), ((VkDescriptorSetLayoutCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO:
        return serialize_struct(builder.getVkDescriptorPoolCreateInfo(), ((VkDescriptorPoolCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO:
        return serialize_struct(builder.getVkDescriptorSetAllocateInfo(), ((VkDescriptorSetAllocateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO:
        return serialize_struct(builder.getVkPipelineShaderStageCreateInfo(), ((VkPipelineShaderStageCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO:
        return serialize_struct(builder.getVkComputePipelineCreateInfo(), ((VkComputePipelineCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_INDIRECT_BUFFER_INFO_NV:
        return serialize_struct(builder.getVkComputePipelineIndirectBufferInfoNV(), ((VkComputePipelineIndirectBufferInfoNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_CREATE_FLAGS_2_CREATE_INFO_KHR:
        return serialize_struct(builder.getVkPipelineCreateFlags2CreateInfoKHR(), ((VkPipelineCreateFlags2CreateInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO:
        return serialize_struct(builder.getVkPipelineVertexInputStateCreateInfo(), ((VkPipelineVertexInputStateCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO:
        return serialize_struct(builder.getVkPipelineInputAssemblyStateCreateInfo(), ((VkPipelineInputAssemblyStateCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO:
        return serialize_struct(builder.getVkPipelineTessellationStateCreateInfo(), ((VkPipelineTessellationStateCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO:
        return serialize_struct(builder.getVkPipelineViewportStateCreateInfo(), ((VkPipelineViewportStateCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO:
        return serialize_struct(builder.getVkPipelineRasterizationStateCreateInfo(), ((VkPipelineRasterizationStateCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO:
        return serialize_struct(builder.getVkPipelineMultisampleStateCreateInfo(), ((VkPipelineMultisampleStateCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO:
        return serialize_struct(builder.getVkPipelineColorBlendStateCreateInfo(), ((VkPipelineColorBlendStateCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO:
        return serialize_struct(builder.getVkPipelineDynamicStateCreateInfo(), ((VkPipelineDynamicStateCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO:
        return serialize_struct(builder.getVkPipelineDepthStencilStateCreateInfo(), ((VkPipelineDepthStencilStateCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO:
        return serialize_struct(builder.getVkGraphicsPipelineCreateInfo(), ((VkGraphicsPipelineCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO:
        return serialize_struct(builder.getVkPipelineCacheCreateInfo(), ((VkPipelineCacheCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO:
        return serialize_struct(builder.getVkPipelineLayoutCreateInfo(), ((VkPipelineLayoutCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO:
        return serialize_struct(builder.getVkSamplerCreateInfo(), ((VkSamplerCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO:
        return serialize_struct(builder.getVkCommandPoolCreateInfo(), ((VkCommandPoolCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO:
        return serialize_struct(builder.getVkCommandBufferAllocateInfo(), ((VkCommandBufferAllocateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO:
        return serialize_struct(builder.getVkCommandBufferInheritanceInfo(), ((VkCommandBufferInheritanceInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO:
        return serialize_struct(builder.getVkCommandBufferBeginInfo(), ((VkCommandBufferBeginInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO:
        return serialize_struct(builder.getVkRenderPassBeginInfo(), ((VkRenderPassBeginInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO:
        return serialize_struct(builder.getVkRenderPassCreateInfo(), ((VkRenderPassCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_EVENT_CREATE_INFO:
        return serialize_struct(builder.getVkEventCreateInfo(), ((VkEventCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_FENCE_CREATE_INFO:
        return serialize_struct(builder.getVkFenceCreateInfo(), ((VkFenceCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO:
        return serialize_struct(builder.getVkSemaphoreCreateInfo(), ((VkSemaphoreCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO:
        return serialize_struct(builder.getVkQueryPoolCreateInfo(), ((VkQueryPoolCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO:
        return serialize_struct(builder.getVkFramebufferCreateInfo(), ((VkFramebufferCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SUBMIT_INFO:
        return serialize_struct(builder.getVkSubmitInfo(), ((VkSubmitInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR:
        return serialize_struct(builder.getVkDisplayModeCreateInfoKHR(), ((VkDisplayModeCreateInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR:
        return serialize_struct(builder.getVkDisplaySurfaceCreateInfoKHR(), ((VkDisplaySurfaceCreateInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR:
        return serialize_struct(builder.getVkDisplayPresentInfoKHR(), ((VkDisplayPresentInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR:
        return serialize_struct(builder.getVkXlibSurfaceCreateInfoKHR(), ((VkXlibSurfaceCreateInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR:
        return serialize_struct(builder.getVkXcbSurfaceCreateInfoKHR(), ((VkXcbSurfaceCreateInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR:
        return serialize_struct(builder.getVkSwapchainCreateInfoKHR(), ((VkSwapchainCreateInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PRESENT_INFO_KHR:
        return serialize_struct(builder.getVkPresentInfoKHR(), ((VkPresentInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT:
        return serialize_struct(builder.getVkDebugReportCallbackCreateInfoEXT(), ((VkDebugReportCallbackCreateInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT:
        return serialize_struct(builder.getVkValidationFlagsEXT(), ((VkValidationFlagsEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT:
        return serialize_struct(builder.getVkValidationFeaturesEXT(), ((VkValidationFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD:
        return serialize_struct(builder.getVkPipelineRasterizationStateRasterizationOrderAMD(), ((VkPipelineRasterizationStateRasterizationOrderAMD*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT:
        return serialize_struct(builder.getVkDebugMarkerObjectNameInfoEXT(), ((VkDebugMarkerObjectNameInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT:
        return serialize_struct(builder.getVkDebugMarkerObjectTagInfoEXT(), ((VkDebugMarkerObjectTagInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT:
        return serialize_struct(builder.getVkDebugMarkerMarkerInfoEXT(), ((VkDebugMarkerMarkerInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV:
        return serialize_struct(builder.getVkDedicatedAllocationImageCreateInfoNV(), ((VkDedicatedAllocationImageCreateInfoNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV:
        return serialize_struct(builder.getVkDedicatedAllocationBufferCreateInfoNV(), ((VkDedicatedAllocationBufferCreateInfoNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV:
        return serialize_struct(builder.getVkDedicatedAllocationMemoryAllocateInfoNV(), ((VkDedicatedAllocationMemoryAllocateInfoNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV:
        return serialize_struct(builder.getVkExternalMemoryImageCreateInfoNV(), ((VkExternalMemoryImageCreateInfoNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV:
        return serialize_struct(builder.getVkExportMemoryAllocateInfoNV(), ((VkExportMemoryAllocateInfoNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV:
        return serialize_struct(builder.getVkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV(), ((VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_COMPUTE_FEATURES_NV:
        return serialize_struct(builder.getVkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV(), ((VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO:
        return serialize_struct(builder.getVkDevicePrivateDataCreateInfo(), ((VkDevicePrivateDataCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO:
        return serialize_struct(builder.getVkPrivateDataSlotCreateInfo(), ((VkPrivateDataSlotCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES:
        return serialize_struct(builder.getVkPhysicalDevicePrivateDataFeatures(), ((VkPhysicalDevicePrivateDataFeatures*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV:
        return serialize_struct(builder.getVkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV(), ((VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceMultiDrawPropertiesEXT(), ((VkPhysicalDeviceMultiDrawPropertiesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV:
        return serialize_struct(builder.getVkGraphicsShaderGroupCreateInfoNV(), ((VkGraphicsShaderGroupCreateInfoNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV:
        return serialize_struct(builder.getVkGraphicsPipelineShaderGroupsCreateInfoNV(), ((VkGraphicsPipelineShaderGroupsCreateInfoNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV:
        return serialize_struct(builder.getVkIndirectCommandsLayoutTokenNV(), ((VkIndirectCommandsLayoutTokenNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV:
        return serialize_struct(builder.getVkIndirectCommandsLayoutCreateInfoNV(), ((VkIndirectCommandsLayoutCreateInfoNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV:
        return serialize_struct(builder.getVkGeneratedCommandsInfoNV(), ((VkGeneratedCommandsInfoNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV:
        return serialize_struct(builder.getVkGeneratedCommandsMemoryRequirementsInfoNV(), ((VkGeneratedCommandsMemoryRequirementsInfoNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_INDIRECT_DEVICE_ADDRESS_INFO_NV:
        return serialize_struct(builder.getVkPipelineIndirectDeviceAddressInfoNV(), ((VkPipelineIndirectDeviceAddressInfoNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2:
        return serialize_struct(builder.getVkPhysicalDeviceFeatures2(), ((VkPhysicalDeviceFeatures2*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2:
        return serialize_struct(builder.getVkPhysicalDeviceProperties2(), ((VkPhysicalDeviceProperties2*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2:
        return serialize_struct(builder.getVkFormatProperties2(), ((VkFormatProperties2*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2:
        return serialize_struct(builder.getVkImageFormatProperties2(), ((VkImageFormatProperties2*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2:
        return serialize_struct(builder.getVkPhysicalDeviceImageFormatInfo2(), ((VkPhysicalDeviceImageFormatInfo2*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2:
        return serialize_struct(builder.getVkQueueFamilyProperties2(), ((VkQueueFamilyProperties2*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2:
        return serialize_struct(builder.getVkPhysicalDeviceMemoryProperties2(), ((VkPhysicalDeviceMemoryProperties2*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2:
        return serialize_struct(builder.getVkSparseImageFormatProperties2(), ((VkSparseImageFormatProperties2*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2:
        return serialize_struct(builder.getVkPhysicalDeviceSparseImageFormatInfo2(), ((VkPhysicalDeviceSparseImageFormatInfo2*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR:
        return serialize_struct(builder.getVkPhysicalDevicePushDescriptorPropertiesKHR(), ((VkPhysicalDevicePushDescriptorPropertiesKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES:
        return serialize_struct(builder.getVkPhysicalDeviceDriverProperties(), ((VkPhysicalDeviceDriverProperties*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR:
        return serialize_struct(builder.getVkPresentRegionsKHR(), ((VkPresentRegionsKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES:
        return serialize_struct(builder.getVkPhysicalDeviceVariablePointersFeatures(), ((VkPhysicalDeviceVariablePointersFeatures*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO:
        return serialize_struct(builder.getVkPhysicalDeviceExternalImageFormatInfo(), ((VkPhysicalDeviceExternalImageFormatInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES:
        return serialize_struct(builder.getVkExternalImageFormatProperties(), ((VkExternalImageFormatProperties*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO:
        return serialize_struct(builder.getVkPhysicalDeviceExternalBufferInfo(), ((VkPhysicalDeviceExternalBufferInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES:
        return serialize_struct(builder.getVkExternalBufferProperties(), ((VkExternalBufferProperties*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES:
        return serialize_struct(builder.getVkPhysicalDeviceIDProperties(), ((VkPhysicalDeviceIDProperties*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO:
        return serialize_struct(builder.getVkExternalMemoryImageCreateInfo(), ((VkExternalMemoryImageCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO:
        return serialize_struct(builder.getVkExternalMemoryBufferCreateInfo(), ((VkExternalMemoryBufferCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO:
        return serialize_struct(builder.getVkExportMemoryAllocateInfo(), ((VkExportMemoryAllocateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR:
        return serialize_struct(builder.getVkImportMemoryFdInfoKHR(), ((VkImportMemoryFdInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR:
        return serialize_struct(builder.getVkMemoryFdPropertiesKHR(), ((VkMemoryFdPropertiesKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR:
        return serialize_struct(builder.getVkMemoryGetFdInfoKHR(), ((VkMemoryGetFdInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO:
        return serialize_struct(builder.getVkPhysicalDeviceExternalSemaphoreInfo(), ((VkPhysicalDeviceExternalSemaphoreInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES:
        return serialize_struct(builder.getVkExternalSemaphoreProperties(), ((VkExternalSemaphoreProperties*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO:
        return serialize_struct(builder.getVkExportSemaphoreCreateInfo(), ((VkExportSemaphoreCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR:
        return serialize_struct(builder.getVkImportSemaphoreFdInfoKHR(), ((VkImportSemaphoreFdInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR:
        return serialize_struct(builder.getVkSemaphoreGetFdInfoKHR(), ((VkSemaphoreGetFdInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO:
        return serialize_struct(builder.getVkPhysicalDeviceExternalFenceInfo(), ((VkPhysicalDeviceExternalFenceInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES:
        return serialize_struct(builder.getVkExternalFenceProperties(), ((VkExternalFenceProperties*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO:
        return serialize_struct(builder.getVkExportFenceCreateInfo(), ((VkExportFenceCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR:
        return serialize_struct(builder.getVkImportFenceFdInfoKHR(), ((VkImportFenceFdInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR:
        return serialize_struct(builder.getVkFenceGetFdInfoKHR(), ((VkFenceGetFdInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES:
        return serialize_struct(builder.getVkPhysicalDeviceMultiviewFeatures(), ((VkPhysicalDeviceMultiviewFeatures*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES:
        return serialize_struct(builder.getVkPhysicalDeviceMultiviewProperties(), ((VkPhysicalDeviceMultiviewProperties*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO:
        return serialize_struct(builder.getVkRenderPassMultiviewCreateInfo(), ((VkRenderPassMultiviewCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT:
        return serialize_struct(builder.getVkSurfaceCapabilities2EXT(), ((VkSurfaceCapabilities2EXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT:
        return serialize_struct(builder.getVkDisplayPowerInfoEXT(), ((VkDisplayPowerInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT:
        return serialize_struct(builder.getVkDeviceEventInfoEXT(), ((VkDeviceEventInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT:
        return serialize_struct(builder.getVkDisplayEventInfoEXT(), ((VkDisplayEventInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT:
        return serialize_struct(builder.getVkSwapchainCounterCreateInfoEXT(), ((VkSwapchainCounterCreateInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES:
        return serialize_struct(builder.getVkPhysicalDeviceGroupProperties(), ((VkPhysicalDeviceGroupProperties*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO:
        return serialize_struct(builder.getVkMemoryAllocateFlagsInfo(), ((VkMemoryAllocateFlagsInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO:
        return serialize_struct(builder.getVkBindBufferMemoryInfo(), ((VkBindBufferMemoryInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO:
        return serialize_struct(builder.getVkBindBufferMemoryDeviceGroupInfo(), ((VkBindBufferMemoryDeviceGroupInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO:
        return serialize_struct(builder.getVkBindImageMemoryInfo(), ((VkBindImageMemoryInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO:
        return serialize_struct(builder.getVkBindImageMemoryDeviceGroupInfo(), ((VkBindImageMemoryDeviceGroupInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO:
        return serialize_struct(builder.getVkDeviceGroupRenderPassBeginInfo(), ((VkDeviceGroupRenderPassBeginInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO:
        return serialize_struct(builder.getVkDeviceGroupCommandBufferBeginInfo(), ((VkDeviceGroupCommandBufferBeginInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO:
        return serialize_struct(builder.getVkDeviceGroupSubmitInfo(), ((VkDeviceGroupSubmitInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO:
        return serialize_struct(builder.getVkDeviceGroupBindSparseInfo(), ((VkDeviceGroupBindSparseInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR:
        return serialize_struct(builder.getVkDeviceGroupPresentCapabilitiesKHR(), ((VkDeviceGroupPresentCapabilitiesKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR:
        return serialize_struct(builder.getVkImageSwapchainCreateInfoKHR(), ((VkImageSwapchainCreateInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR:
        return serialize_struct(builder.getVkBindImageMemorySwapchainInfoKHR(), ((VkBindImageMemorySwapchainInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR:
        return serialize_struct(builder.getVkAcquireNextImageInfoKHR(), ((VkAcquireNextImageInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR:
        return serialize_struct(builder.getVkDeviceGroupPresentInfoKHR(), ((VkDeviceGroupPresentInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO:
        return serialize_struct(builder.getVkDeviceGroupDeviceCreateInfo(), ((VkDeviceGroupDeviceCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR:
        return serialize_struct(builder.getVkDeviceGroupSwapchainCreateInfoKHR(), ((VkDeviceGroupSwapchainCreateInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO:
        return serialize_struct(builder.getVkDescriptorUpdateTemplateCreateInfo(), ((VkDescriptorUpdateTemplateCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR:
        return serialize_struct(builder.getVkPhysicalDevicePresentIdFeaturesKHR(), ((VkPhysicalDevicePresentIdFeaturesKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PRESENT_ID_KHR:
        return serialize_struct(builder.getVkPresentIdKHR(), ((VkPresentIdKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR:
        return serialize_struct(builder.getVkPhysicalDevicePresentWaitFeaturesKHR(), ((VkPhysicalDevicePresentWaitFeaturesKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_HDR_METADATA_EXT:
        return serialize_struct(builder.getVkHdrMetadataEXT(), ((VkHdrMetadataEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD:
        return serialize_struct(builder.getVkDisplayNativeHdrSurfaceCapabilitiesAMD(), ((VkDisplayNativeHdrSurfaceCapabilitiesAMD*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD:
        return serialize_struct(builder.getVkSwapchainDisplayNativeHdrCreateInfoAMD(), ((VkSwapchainDisplayNativeHdrCreateInfoAMD*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE:
        return serialize_struct(builder.getVkPresentTimesInfoGOOGLE(), ((VkPresentTimesInfoGOOGLE*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV:
        return serialize_struct(builder.getVkPipelineViewportWScalingStateCreateInfoNV(), ((VkPipelineViewportWScalingStateCreateInfoNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV:
        return serialize_struct(builder.getVkPipelineViewportSwizzleStateCreateInfoNV(), ((VkPipelineViewportSwizzleStateCreateInfoNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceDiscardRectanglePropertiesEXT(), ((VkPhysicalDeviceDiscardRectanglePropertiesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT:
        return serialize_struct(builder.getVkPipelineDiscardRectangleStateCreateInfoEXT(), ((VkPipelineDiscardRectangleStateCreateInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX:
        return serialize_struct(builder.getVkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(), ((VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO:
        return serialize_struct(builder.getVkRenderPassInputAttachmentAspectCreateInfo(), ((VkRenderPassInputAttachmentAspectCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR:
        return serialize_struct(builder.getVkPhysicalDeviceSurfaceInfo2KHR(), ((VkPhysicalDeviceSurfaceInfo2KHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR:
        return serialize_struct(builder.getVkSurfaceCapabilities2KHR(), ((VkSurfaceCapabilities2KHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR:
        return serialize_struct(builder.getVkSurfaceFormat2KHR(), ((VkSurfaceFormat2KHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR:
        return serialize_struct(builder.getVkDisplayProperties2KHR(), ((VkDisplayProperties2KHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR:
        return serialize_struct(builder.getVkDisplayPlaneProperties2KHR(), ((VkDisplayPlaneProperties2KHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR:
        return serialize_struct(builder.getVkDisplayModeProperties2KHR(), ((VkDisplayModeProperties2KHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR:
        return serialize_struct(builder.getVkDisplayPlaneInfo2KHR(), ((VkDisplayPlaneInfo2KHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR:
        return serialize_struct(builder.getVkDisplayPlaneCapabilities2KHR(), ((VkDisplayPlaneCapabilities2KHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR:
        return serialize_struct(builder.getVkSharedPresentSurfaceCapabilitiesKHR(), ((VkSharedPresentSurfaceCapabilitiesKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES:
        return serialize_struct(builder.getVkPhysicalDevice16BitStorageFeatures(), ((VkPhysicalDevice16BitStorageFeatures*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES:
        return serialize_struct(builder.getVkPhysicalDeviceSubgroupProperties(), ((VkPhysicalDeviceSubgroupProperties*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES:
        return serialize_struct(builder.getVkPhysicalDeviceShaderSubgroupExtendedTypesFeatures(), ((VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2:
        return serialize_struct(builder.getVkBufferMemoryRequirementsInfo2(), ((VkBufferMemoryRequirementsInfo2*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS:
        return serialize_struct(builder.getVkDeviceBufferMemoryRequirements(), ((VkDeviceBufferMemoryRequirements*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2:
        return serialize_struct(builder.getVkImageMemoryRequirementsInfo2(), ((VkImageMemoryRequirementsInfo2*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2:
        return serialize_struct(builder.getVkImageSparseMemoryRequirementsInfo2(), ((VkImageSparseMemoryRequirementsInfo2*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS:
        return serialize_struct(builder.getVkDeviceImageMemoryRequirements(), ((VkDeviceImageMemoryRequirements*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2:
        return serialize_struct(builder.getVkMemoryRequirements2(), ((VkMemoryRequirements2*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2:
        return serialize_struct(builder.getVkSparseImageMemoryRequirements2(), ((VkSparseImageMemoryRequirements2*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES:
        return serialize_struct(builder.getVkPhysicalDevicePointClippingProperties(), ((VkPhysicalDevicePointClippingProperties*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS:
        return serialize_struct(builder.getVkMemoryDedicatedRequirements(), ((VkMemoryDedicatedRequirements*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO:
        return serialize_struct(builder.getVkMemoryDedicatedAllocateInfo(), ((VkMemoryDedicatedAllocateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO:
        return serialize_struct(builder.getVkImageViewUsageCreateInfo(), ((VkImageViewUsageCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_IMAGE_VIEW_SLICED_CREATE_INFO_EXT:
        return serialize_struct(builder.getVkImageViewSlicedCreateInfoEXT(), ((VkImageViewSlicedCreateInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO:
        return serialize_struct(builder.getVkPipelineTessellationDomainOriginStateCreateInfo(), ((VkPipelineTessellationDomainOriginStateCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO:
        return serialize_struct(builder.getVkSamplerYcbcrConversionInfo(), ((VkSamplerYcbcrConversionInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO:
        return serialize_struct(builder.getVkSamplerYcbcrConversionCreateInfo(), ((VkSamplerYcbcrConversionCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO:
        return serialize_struct(builder.getVkBindImagePlaneMemoryInfo(), ((VkBindImagePlaneMemoryInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO:
        return serialize_struct(builder.getVkImagePlaneMemoryRequirementsInfo(), ((VkImagePlaneMemoryRequirementsInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES:
        return serialize_struct(builder.getVkPhysicalDeviceSamplerYcbcrConversionFeatures(), ((VkPhysicalDeviceSamplerYcbcrConversionFeatures*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES:
        return serialize_struct(builder.getVkSamplerYcbcrConversionImageFormatProperties(), ((VkSamplerYcbcrConversionImageFormatProperties*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD:
        return serialize_struct(builder.getVkTextureLODGatherFormatPropertiesAMD(), ((VkTextureLODGatherFormatPropertiesAMD*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT:
        return serialize_struct(builder.getVkConditionalRenderingBeginInfoEXT(), ((VkConditionalRenderingBeginInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO:
        return serialize_struct(builder.getVkProtectedSubmitInfo(), ((VkProtectedSubmitInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES:
        return serialize_struct(builder.getVkPhysicalDeviceProtectedMemoryFeatures(), ((VkPhysicalDeviceProtectedMemoryFeatures*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES:
        return serialize_struct(builder.getVkPhysicalDeviceProtectedMemoryProperties(), ((VkPhysicalDeviceProtectedMemoryProperties*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2:
        return serialize_struct(builder.getVkDeviceQueueInfo2(), ((VkDeviceQueueInfo2*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV:
        return serialize_struct(builder.getVkPipelineCoverageToColorStateCreateInfoNV(), ((VkPipelineCoverageToColorStateCreateInfoNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES:
        return serialize_struct(builder.getVkPhysicalDeviceSamplerFilterMinmaxProperties(), ((VkPhysicalDeviceSamplerFilterMinmaxProperties*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT:
        return serialize_struct(builder.getVkSampleLocationsInfoEXT(), ((VkSampleLocationsInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT:
        return serialize_struct(builder.getVkRenderPassSampleLocationsBeginInfoEXT(), ((VkRenderPassSampleLocationsBeginInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT:
        return serialize_struct(builder.getVkPipelineSampleLocationsStateCreateInfoEXT(), ((VkPipelineSampleLocationsStateCreateInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceSampleLocationsPropertiesEXT(), ((VkPhysicalDeviceSampleLocationsPropertiesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT:
        return serialize_struct(builder.getVkMultisamplePropertiesEXT(), ((VkMultisamplePropertiesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO:
        return serialize_struct(builder.getVkSamplerReductionModeCreateInfo(), ((VkSamplerReductionModeCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceBlendOperationAdvancedFeaturesEXT(), ((VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceMultiDrawFeaturesEXT(), ((VkPhysicalDeviceMultiDrawFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceBlendOperationAdvancedPropertiesEXT(), ((VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT:
        return serialize_struct(builder.getVkPipelineColorBlendAdvancedStateCreateInfoEXT(), ((VkPipelineColorBlendAdvancedStateCreateInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES:
        return serialize_struct(builder.getVkPhysicalDeviceInlineUniformBlockFeatures(), ((VkPhysicalDeviceInlineUniformBlockFeatures*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES:
        return serialize_struct(builder.getVkPhysicalDeviceInlineUniformBlockProperties(), ((VkPhysicalDeviceInlineUniformBlockProperties*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK:
        return serialize_struct(builder.getVkWriteDescriptorSetInlineUniformBlock(), ((VkWriteDescriptorSetInlineUniformBlock*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO:
        return serialize_struct(builder.getVkDescriptorPoolInlineUniformBlockCreateInfo(), ((VkDescriptorPoolInlineUniformBlockCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV:
        return serialize_struct(builder.getVkPipelineCoverageModulationStateCreateInfoNV(), ((VkPipelineCoverageModulationStateCreateInfoNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO:
        return serialize_struct(builder.getVkImageFormatListCreateInfo(), ((VkImageFormatListCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT:
        return serialize_struct(builder.getVkValidationCacheCreateInfoEXT(), ((VkValidationCacheCreateInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT:
        return serialize_struct(builder.getVkShaderModuleValidationCacheCreateInfoEXT(), ((VkShaderModuleValidationCacheCreateInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES:
        return serialize_struct(builder.getVkPhysicalDeviceMaintenance3Properties(), ((VkPhysicalDeviceMaintenance3Properties*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES:
        return serialize_struct(builder.getVkPhysicalDeviceMaintenance4Features(), ((VkPhysicalDeviceMaintenance4Features*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES:
        return serialize_struct(builder.getVkPhysicalDeviceMaintenance4Properties(), ((VkPhysicalDeviceMaintenance4Properties*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES_KHR:
        return serialize_struct(builder.getVkPhysicalDeviceMaintenance5FeaturesKHR(), ((VkPhysicalDeviceMaintenance5FeaturesKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES_KHR:
        return serialize_struct(builder.getVkPhysicalDeviceMaintenance5PropertiesKHR(), ((VkPhysicalDeviceMaintenance5PropertiesKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_RENDERING_AREA_INFO_KHR:
        return serialize_struct(builder.getVkRenderingAreaInfoKHR(), ((VkRenderingAreaInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT:
        return serialize_struct(builder.getVkDescriptorSetLayoutSupport(), ((VkDescriptorSetLayoutSupport*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES:
        return serialize_struct(builder.getVkPhysicalDeviceShaderDrawParametersFeatures(), ((VkPhysicalDeviceShaderDrawParametersFeatures*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES:
        return serialize_struct(builder.getVkPhysicalDeviceShaderFloat16Int8Features(), ((VkPhysicalDeviceShaderFloat16Int8Features*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES:
        return serialize_struct(builder.getVkPhysicalDeviceFloatControlsProperties(), ((VkPhysicalDeviceFloatControlsProperties*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES:
        return serialize_struct(builder.getVkPhysicalDeviceHostQueryResetFeatures(), ((VkPhysicalDeviceHostQueryResetFeatures*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR:
        return serialize_struct(builder.getVkDeviceQueueGlobalPriorityCreateInfoKHR(), ((VkDeviceQueueGlobalPriorityCreateInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR:
        return serialize_struct(builder.getVkPhysicalDeviceGlobalPriorityQueryFeaturesKHR(), ((VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR:
        return serialize_struct(builder.getVkQueueFamilyGlobalPriorityPropertiesKHR(), ((VkQueueFamilyGlobalPriorityPropertiesKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT:
        return serialize_struct(builder.getVkDebugUtilsObjectNameInfoEXT(), ((VkDebugUtilsObjectNameInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT:
        return serialize_struct(builder.getVkDebugUtilsObjectTagInfoEXT(), ((VkDebugUtilsObjectTagInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT:
        return serialize_struct(builder.getVkDebugUtilsLabelEXT(), ((VkDebugUtilsLabelEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT:
        return serialize_struct(builder.getVkDebugUtilsMessengerCreateInfoEXT(), ((VkDebugUtilsMessengerCreateInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT:
        return serialize_struct(builder.getVkDebugUtilsMessengerCallbackDataEXT(), ((VkDebugUtilsMessengerCallbackDataEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceDeviceMemoryReportFeaturesEXT(), ((VkPhysicalDeviceDeviceMemoryReportFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT:
        return serialize_struct(builder.getVkDeviceDeviceMemoryReportCreateInfoEXT(), ((VkDeviceDeviceMemoryReportCreateInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT:
        return serialize_struct(builder.getVkDeviceMemoryReportCallbackDataEXT(), ((VkDeviceMemoryReportCallbackDataEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT:
        return serialize_struct(builder.getVkImportMemoryHostPointerInfoEXT(), ((VkImportMemoryHostPointerInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT:
        return serialize_struct(builder.getVkMemoryHostPointerPropertiesEXT(), ((VkMemoryHostPointerPropertiesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceExternalMemoryHostPropertiesEXT(), ((VkPhysicalDeviceExternalMemoryHostPropertiesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceConservativeRasterizationPropertiesEXT(), ((VkPhysicalDeviceConservativeRasterizationPropertiesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT:
        return serialize_struct(builder.getVkCalibratedTimestampInfoEXT(), ((VkCalibratedTimestampInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD:
        return serialize_struct(builder.getVkPhysicalDeviceShaderCorePropertiesAMD(), ((VkPhysicalDeviceShaderCorePropertiesAMD*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD:
        return serialize_struct(builder.getVkPhysicalDeviceShaderCoreProperties2AMD(), ((VkPhysicalDeviceShaderCoreProperties2AMD*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT:
        return serialize_struct(builder.getVkPipelineRasterizationConservativeStateCreateInfoEXT(), ((VkPipelineRasterizationConservativeStateCreateInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES:
        return serialize_struct(builder.getVkPhysicalDeviceDescriptorIndexingFeatures(), ((VkPhysicalDeviceDescriptorIndexingFeatures*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES:
        return serialize_struct(builder.getVkPhysicalDeviceDescriptorIndexingProperties(), ((VkPhysicalDeviceDescriptorIndexingProperties*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO:
        return serialize_struct(builder.getVkDescriptorSetLayoutBindingFlagsCreateInfo(), ((VkDescriptorSetLayoutBindingFlagsCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO:
        return serialize_struct(builder.getVkDescriptorSetVariableDescriptorCountAllocateInfo(), ((VkDescriptorSetVariableDescriptorCountAllocateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT:
        return serialize_struct(builder.getVkDescriptorSetVariableDescriptorCountLayoutSupport(), ((VkDescriptorSetVariableDescriptorCountLayoutSupport*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2:
        return serialize_struct(builder.getVkAttachmentDescription2(), ((VkAttachmentDescription2*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2:
        return serialize_struct(builder.getVkAttachmentReference2(), ((VkAttachmentReference2*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2:
        return serialize_struct(builder.getVkSubpassDescription2(), ((VkSubpassDescription2*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2:
        return serialize_struct(builder.getVkSubpassDependency2(), ((VkSubpassDependency2*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2:
        return serialize_struct(builder.getVkRenderPassCreateInfo2(), ((VkRenderPassCreateInfo2*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO:
        return serialize_struct(builder.getVkSubpassBeginInfo(), ((VkSubpassBeginInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SUBPASS_END_INFO:
        return serialize_struct(builder.getVkSubpassEndInfo(), ((VkSubpassEndInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES:
        return serialize_struct(builder.getVkPhysicalDeviceTimelineSemaphoreFeatures(), ((VkPhysicalDeviceTimelineSemaphoreFeatures*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES:
        return serialize_struct(builder.getVkPhysicalDeviceTimelineSemaphoreProperties(), ((VkPhysicalDeviceTimelineSemaphoreProperties*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO:
        return serialize_struct(builder.getVkSemaphoreTypeCreateInfo(), ((VkSemaphoreTypeCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO:
        return serialize_struct(builder.getVkTimelineSemaphoreSubmitInfo(), ((VkTimelineSemaphoreSubmitInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO:
        return serialize_struct(builder.getVkSemaphoreWaitInfo(), ((VkSemaphoreWaitInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO:
        return serialize_struct(builder.getVkSemaphoreSignalInfo(), ((VkSemaphoreSignalInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT:
        return serialize_struct(builder.getVkPipelineVertexInputDivisorStateCreateInfoEXT(), ((VkPipelineVertexInputDivisorStateCreateInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceVertexAttributeDivisorPropertiesEXT(), ((VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT:
        return serialize_struct(builder.getVkPhysicalDevicePCIBusInfoPropertiesEXT(), ((VkPhysicalDevicePCIBusInfoPropertiesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT:
        return serialize_struct(builder.getVkCommandBufferInheritanceConditionalRenderingInfoEXT(), ((VkCommandBufferInheritanceConditionalRenderingInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES:
        return serialize_struct(builder.getVkPhysicalDevice8BitStorageFeatures(), ((VkPhysicalDevice8BitStorageFeatures*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceConditionalRenderingFeaturesEXT(), ((VkPhysicalDeviceConditionalRenderingFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES:
        return serialize_struct(builder.getVkPhysicalDeviceVulkanMemoryModelFeatures(), ((VkPhysicalDeviceVulkanMemoryModelFeatures*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES:
        return serialize_struct(builder.getVkPhysicalDeviceShaderAtomicInt64Features(), ((VkPhysicalDeviceShaderAtomicInt64Features*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceShaderAtomicFloatFeaturesEXT(), ((VkPhysicalDeviceShaderAtomicFloatFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceShaderAtomicFloat2FeaturesEXT(), ((VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceVertexAttributeDivisorFeaturesEXT(), ((VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV:
        return serialize_struct(builder.getVkQueueFamilyCheckpointPropertiesNV(), ((VkQueueFamilyCheckpointPropertiesNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV:
        return serialize_struct(builder.getVkCheckpointDataNV(), ((VkCheckpointDataNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES:
        return serialize_struct(builder.getVkPhysicalDeviceDepthStencilResolveProperties(), ((VkPhysicalDeviceDepthStencilResolveProperties*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE:
        return serialize_struct(builder.getVkSubpassDescriptionDepthStencilResolve(), ((VkSubpassDescriptionDepthStencilResolve*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT:
        return serialize_struct(builder.getVkImageViewASTCDecodeModeEXT(), ((VkImageViewASTCDecodeModeEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceASTCDecodeFeaturesEXT(), ((VkPhysicalDeviceASTCDecodeFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceTransformFeedbackFeaturesEXT(), ((VkPhysicalDeviceTransformFeedbackFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceTransformFeedbackPropertiesEXT(), ((VkPhysicalDeviceTransformFeedbackPropertiesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT:
        return serialize_struct(builder.getVkPipelineRasterizationStateStreamCreateInfoEXT(), ((VkPipelineRasterizationStateStreamCreateInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV:
        return serialize_struct(builder.getVkPhysicalDeviceRepresentativeFragmentTestFeaturesNV(), ((VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV:
        return serialize_struct(builder.getVkPipelineRepresentativeFragmentTestStateCreateInfoNV(), ((VkPipelineRepresentativeFragmentTestStateCreateInfoNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV:
        return serialize_struct(builder.getVkPhysicalDeviceExclusiveScissorFeaturesNV(), ((VkPhysicalDeviceExclusiveScissorFeaturesNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV:
        return serialize_struct(builder.getVkPipelineViewportExclusiveScissorStateCreateInfoNV(), ((VkPipelineViewportExclusiveScissorStateCreateInfoNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV:
        return serialize_struct(builder.getVkPhysicalDeviceCornerSampledImageFeaturesNV(), ((VkPhysicalDeviceCornerSampledImageFeaturesNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV:
        return serialize_struct(builder.getVkPhysicalDeviceComputeShaderDerivativesFeaturesNV(), ((VkPhysicalDeviceComputeShaderDerivativesFeaturesNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV:
        return serialize_struct(builder.getVkPhysicalDeviceShaderImageFootprintFeaturesNV(), ((VkPhysicalDeviceShaderImageFootprintFeaturesNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV:
        return serialize_struct(builder.getVkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(), ((VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV:
        return serialize_struct(builder.getVkPhysicalDeviceCopyMemoryIndirectFeaturesNV(), ((VkPhysicalDeviceCopyMemoryIndirectFeaturesNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV:
        return serialize_struct(builder.getVkPhysicalDeviceCopyMemoryIndirectPropertiesNV(), ((VkPhysicalDeviceCopyMemoryIndirectPropertiesNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV:
        return serialize_struct(builder.getVkPhysicalDeviceMemoryDecompressionFeaturesNV(), ((VkPhysicalDeviceMemoryDecompressionFeaturesNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV:
        return serialize_struct(builder.getVkPhysicalDeviceMemoryDecompressionPropertiesNV(), ((VkPhysicalDeviceMemoryDecompressionPropertiesNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV:
        return serialize_struct(builder.getVkPipelineViewportShadingRateImageStateCreateInfoNV(), ((VkPipelineViewportShadingRateImageStateCreateInfoNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV:
        return serialize_struct(builder.getVkPhysicalDeviceShadingRateImageFeaturesNV(), ((VkPhysicalDeviceShadingRateImageFeaturesNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV:
        return serialize_struct(builder.getVkPhysicalDeviceShadingRateImagePropertiesNV(), ((VkPhysicalDeviceShadingRateImagePropertiesNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI:
        return serialize_struct(builder.getVkPhysicalDeviceInvocationMaskFeaturesHUAWEI(), ((VkPhysicalDeviceInvocationMaskFeaturesHUAWEI*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV:
        return serialize_struct(builder.getVkPipelineViewportCoarseSampleOrderStateCreateInfoNV(), ((VkPipelineViewportCoarseSampleOrderStateCreateInfoNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV:
        return serialize_struct(builder.getVkPhysicalDeviceMeshShaderFeaturesNV(), ((VkPhysicalDeviceMeshShaderFeaturesNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV:
        return serialize_struct(builder.getVkPhysicalDeviceMeshShaderPropertiesNV(), ((VkPhysicalDeviceMeshShaderPropertiesNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceMeshShaderFeaturesEXT(), ((VkPhysicalDeviceMeshShaderFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceMeshShaderPropertiesEXT(), ((VkPhysicalDeviceMeshShaderPropertiesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV:
        return serialize_struct(builder.getVkRayTracingShaderGroupCreateInfoNV(), ((VkRayTracingShaderGroupCreateInfoNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR:
        return serialize_struct(builder.getVkRayTracingShaderGroupCreateInfoKHR(), ((VkRayTracingShaderGroupCreateInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV:
        return serialize_struct(builder.getVkRayTracingPipelineCreateInfoNV(), ((VkRayTracingPipelineCreateInfoNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR:
        return serialize_struct(builder.getVkRayTracingPipelineCreateInfoKHR(), ((VkRayTracingPipelineCreateInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV:
        return serialize_struct(builder.getVkGeometryTrianglesNV(), ((VkGeometryTrianglesNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV:
        return serialize_struct(builder.getVkGeometryAABBNV(), ((VkGeometryAABBNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_GEOMETRY_NV:
        return serialize_struct(builder.getVkGeometryNV(), ((VkGeometryNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV:
        return serialize_struct(builder.getVkAccelerationStructureInfoNV(), ((VkAccelerationStructureInfoNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV:
        return serialize_struct(builder.getVkAccelerationStructureCreateInfoNV(), ((VkAccelerationStructureCreateInfoNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV:
        return serialize_struct(builder.getVkBindAccelerationStructureMemoryInfoNV(), ((VkBindAccelerationStructureMemoryInfoNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR:
        return serialize_struct(builder.getVkWriteDescriptorSetAccelerationStructureKHR(), ((VkWriteDescriptorSetAccelerationStructureKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV:
        return serialize_struct(builder.getVkWriteDescriptorSetAccelerationStructureNV(), ((VkWriteDescriptorSetAccelerationStructureNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV:
        return serialize_struct(builder.getVkAccelerationStructureMemoryRequirementsInfoNV(), ((VkAccelerationStructureMemoryRequirementsInfoNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR:
        return serialize_struct(builder.getVkPhysicalDeviceAccelerationStructureFeaturesKHR(), ((VkPhysicalDeviceAccelerationStructureFeaturesKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR:
        return serialize_struct(builder.getVkPhysicalDeviceRayTracingPipelineFeaturesKHR(), ((VkPhysicalDeviceRayTracingPipelineFeaturesKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR:
        return serialize_struct(builder.getVkPhysicalDeviceRayQueryFeaturesKHR(), ((VkPhysicalDeviceRayQueryFeaturesKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR:
        return serialize_struct(builder.getVkPhysicalDeviceAccelerationStructurePropertiesKHR(), ((VkPhysicalDeviceAccelerationStructurePropertiesKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR:
        return serialize_struct(builder.getVkPhysicalDeviceRayTracingPipelinePropertiesKHR(), ((VkPhysicalDeviceRayTracingPipelinePropertiesKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV:
        return serialize_struct(builder.getVkPhysicalDeviceRayTracingPropertiesNV(), ((VkPhysicalDeviceRayTracingPropertiesNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR:
        return serialize_struct(builder.getVkPhysicalDeviceRayTracingMaintenance1FeaturesKHR(), ((VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT:
        return serialize_struct(builder.getVkDrmFormatModifierPropertiesListEXT(), ((VkDrmFormatModifierPropertiesListEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceImageDrmFormatModifierInfoEXT(), ((VkPhysicalDeviceImageDrmFormatModifierInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT:
        return serialize_struct(builder.getVkImageDrmFormatModifierListCreateInfoEXT(), ((VkImageDrmFormatModifierListCreateInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT:
        return serialize_struct(builder.getVkImageDrmFormatModifierExplicitCreateInfoEXT(), ((VkImageDrmFormatModifierExplicitCreateInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT:
        return serialize_struct(builder.getVkImageDrmFormatModifierPropertiesEXT(), ((VkImageDrmFormatModifierPropertiesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO:
        return serialize_struct(builder.getVkImageStencilUsageCreateInfo(), ((VkImageStencilUsageCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD:
        return serialize_struct(builder.getVkDeviceMemoryOverallocationCreateInfoAMD(), ((VkDeviceMemoryOverallocationCreateInfoAMD*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceFragmentDensityMapFeaturesEXT(), ((VkPhysicalDeviceFragmentDensityMapFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceFragmentDensityMap2FeaturesEXT(), ((VkPhysicalDeviceFragmentDensityMap2FeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM:
        return serialize_struct(builder.getVkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM(), ((VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceFragmentDensityMapPropertiesEXT(), ((VkPhysicalDeviceFragmentDensityMapPropertiesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceFragmentDensityMap2PropertiesEXT(), ((VkPhysicalDeviceFragmentDensityMap2PropertiesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM:
        return serialize_struct(builder.getVkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM(), ((VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT:
        return serialize_struct(builder.getVkRenderPassFragmentDensityMapCreateInfoEXT(), ((VkRenderPassFragmentDensityMapCreateInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM:
        return serialize_struct(builder.getVkSubpassFragmentDensityMapOffsetEndInfoQCOM(), ((VkSubpassFragmentDensityMapOffsetEndInfoQCOM*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES:
        return serialize_struct(builder.getVkPhysicalDeviceScalarBlockLayoutFeatures(), ((VkPhysicalDeviceScalarBlockLayoutFeatures*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR:
        return serialize_struct(builder.getVkSurfaceProtectedCapabilitiesKHR(), ((VkSurfaceProtectedCapabilitiesKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES:
        return serialize_struct(builder.getVkPhysicalDeviceUniformBufferStandardLayoutFeatures(), ((VkPhysicalDeviceUniformBufferStandardLayoutFeatures*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceDepthClipEnableFeaturesEXT(), ((VkPhysicalDeviceDepthClipEnableFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT:
        return serialize_struct(builder.getVkPipelineRasterizationDepthClipStateCreateInfoEXT(), ((VkPipelineRasterizationDepthClipStateCreateInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceMemoryBudgetPropertiesEXT(), ((VkPhysicalDeviceMemoryBudgetPropertiesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceMemoryPriorityFeaturesEXT(), ((VkPhysicalDeviceMemoryPriorityFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT:
        return serialize_struct(builder.getVkMemoryPriorityAllocateInfoEXT(), ((VkMemoryPriorityAllocateInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT(), ((VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES:
        return serialize_struct(builder.getVkPhysicalDeviceBufferDeviceAddressFeatures(), ((VkPhysicalDeviceBufferDeviceAddressFeatures*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceBufferDeviceAddressFeaturesEXT(), ((VkPhysicalDeviceBufferDeviceAddressFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO:
        return serialize_struct(builder.getVkBufferDeviceAddressInfo(), ((VkBufferDeviceAddressInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO:
        return serialize_struct(builder.getVkBufferOpaqueCaptureAddressCreateInfo(), ((VkBufferOpaqueCaptureAddressCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT:
        return serialize_struct(builder.getVkBufferDeviceAddressCreateInfoEXT(), ((VkBufferDeviceAddressCreateInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceImageViewImageFormatInfoEXT(), ((VkPhysicalDeviceImageViewImageFormatInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT:
        return serialize_struct(builder.getVkFilterCubicImageViewImageFormatPropertiesEXT(), ((VkFilterCubicImageViewImageFormatPropertiesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES:
        return serialize_struct(builder.getVkPhysicalDeviceImagelessFramebufferFeatures(), ((VkPhysicalDeviceImagelessFramebufferFeatures*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO:
        return serialize_struct(builder.getVkFramebufferAttachmentsCreateInfo(), ((VkFramebufferAttachmentsCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO:
        return serialize_struct(builder.getVkFramebufferAttachmentImageInfo(), ((VkFramebufferAttachmentImageInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO:
        return serialize_struct(builder.getVkRenderPassAttachmentBeginInfo(), ((VkRenderPassAttachmentBeginInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES:
        return serialize_struct(builder.getVkPhysicalDeviceTextureCompressionASTCHDRFeatures(), ((VkPhysicalDeviceTextureCompressionASTCHDRFeatures*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV:
        return serialize_struct(builder.getVkPhysicalDeviceCooperativeMatrixFeaturesNV(), ((VkPhysicalDeviceCooperativeMatrixFeaturesNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV:
        return serialize_struct(builder.getVkPhysicalDeviceCooperativeMatrixPropertiesNV(), ((VkPhysicalDeviceCooperativeMatrixPropertiesNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV:
        return serialize_struct(builder.getVkCooperativeMatrixPropertiesNV(), ((VkCooperativeMatrixPropertiesNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceYcbcrImageArraysFeaturesEXT(), ((VkPhysicalDeviceYcbcrImageArraysFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX:
        return serialize_struct(builder.getVkImageViewHandleInfoNVX(), ((VkImageViewHandleInfoNVX*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX:
        return serialize_struct(builder.getVkImageViewAddressPropertiesNVX(), ((VkImageViewAddressPropertiesNVX*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO:
        return serialize_struct(builder.getVkPipelineCreationFeedbackCreateInfo(), ((VkPipelineCreationFeedbackCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV:
        return serialize_struct(builder.getVkPhysicalDevicePresentBarrierFeaturesNV(), ((VkPhysicalDevicePresentBarrierFeaturesNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_PRESENT_BARRIER_NV:
        return serialize_struct(builder.getVkSurfaceCapabilitiesPresentBarrierNV(), ((VkSurfaceCapabilitiesPresentBarrierNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV:
        return serialize_struct(builder.getVkSwapchainPresentBarrierCreateInfoNV(), ((VkSwapchainPresentBarrierCreateInfoNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR:
        return serialize_struct(builder.getVkPhysicalDevicePerformanceQueryFeaturesKHR(), ((VkPhysicalDevicePerformanceQueryFeaturesKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR:
        return serialize_struct(builder.getVkPhysicalDevicePerformanceQueryPropertiesKHR(), ((VkPhysicalDevicePerformanceQueryPropertiesKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR:
        return serialize_struct(builder.getVkPerformanceCounterKHR(), ((VkPerformanceCounterKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR:
        return serialize_struct(builder.getVkPerformanceCounterDescriptionKHR(), ((VkPerformanceCounterDescriptionKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR:
        return serialize_struct(builder.getVkQueryPoolPerformanceCreateInfoKHR(), ((VkQueryPoolPerformanceCreateInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR:
        return serialize_struct(builder.getVkAcquireProfilingLockInfoKHR(), ((VkAcquireProfilingLockInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR:
        return serialize_struct(builder.getVkPerformanceQuerySubmitInfoKHR(), ((VkPerformanceQuerySubmitInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT:
        return serialize_struct(builder.getVkHeadlessSurfaceCreateInfoEXT(), ((VkHeadlessSurfaceCreateInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV:
        return serialize_struct(builder.getVkPhysicalDeviceCoverageReductionModeFeaturesNV(), ((VkPhysicalDeviceCoverageReductionModeFeaturesNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV:
        return serialize_struct(builder.getVkPipelineCoverageReductionStateCreateInfoNV(), ((VkPipelineCoverageReductionStateCreateInfoNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV:
        return serialize_struct(builder.getVkFramebufferMixedSamplesCombinationNV(), ((VkFramebufferMixedSamplesCombinationNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL:
        return serialize_struct(builder.getVkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL(), ((VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL:
        return serialize_struct(builder.getVkInitializePerformanceApiInfoINTEL(), ((VkInitializePerformanceApiInfoINTEL*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL:
        return serialize_struct(builder.getVkQueryPoolPerformanceQueryCreateInfoINTEL(), ((VkQueryPoolPerformanceQueryCreateInfoINTEL*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL:
        return serialize_struct(builder.getVkPerformanceMarkerInfoINTEL(), ((VkPerformanceMarkerInfoINTEL*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL:
        return serialize_struct(builder.getVkPerformanceStreamMarkerInfoINTEL(), ((VkPerformanceStreamMarkerInfoINTEL*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL:
        return serialize_struct(builder.getVkPerformanceOverrideInfoINTEL(), ((VkPerformanceOverrideInfoINTEL*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL:
        return serialize_struct(builder.getVkPerformanceConfigurationAcquireInfoINTEL(), ((VkPerformanceConfigurationAcquireInfoINTEL*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR:
        return serialize_struct(builder.getVkPhysicalDeviceShaderClockFeaturesKHR(), ((VkPhysicalDeviceShaderClockFeaturesKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceIndexTypeUint8FeaturesEXT(), ((VkPhysicalDeviceIndexTypeUint8FeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV:
        return serialize_struct(builder.getVkPhysicalDeviceShaderSMBuiltinsPropertiesNV(), ((VkPhysicalDeviceShaderSMBuiltinsPropertiesNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV:
        return serialize_struct(builder.getVkPhysicalDeviceShaderSMBuiltinsFeaturesNV(), ((VkPhysicalDeviceShaderSMBuiltinsFeaturesNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceFragmentShaderInterlockFeaturesEXT(), ((VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES:
        return serialize_struct(builder.getVkPhysicalDeviceSeparateDepthStencilLayoutsFeatures(), ((VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT:
        return serialize_struct(builder.getVkAttachmentReferenceStencilLayout(), ((VkAttachmentReferenceStencilLayout*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT(), ((VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT:
        return serialize_struct(builder.getVkAttachmentDescriptionStencilLayout(), ((VkAttachmentDescriptionStencilLayout*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR:
        return serialize_struct(builder.getVkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR(), ((VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR:
        return serialize_struct(builder.getVkPipelineInfoKHR(), ((VkPipelineInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR:
        return serialize_struct(builder.getVkPipelineExecutablePropertiesKHR(), ((VkPipelineExecutablePropertiesKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR:
        return serialize_struct(builder.getVkPipelineExecutableInfoKHR(), ((VkPipelineExecutableInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR:
        return serialize_struct(builder.getVkPipelineExecutableStatisticKHR(), ((VkPipelineExecutableStatisticKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR:
        return serialize_struct(builder.getVkPipelineExecutableInternalRepresentationKHR(), ((VkPipelineExecutableInternalRepresentationKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES:
        return serialize_struct(builder.getVkPhysicalDeviceShaderDemoteToHelperInvocationFeatures(), ((VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceTexelBufferAlignmentFeaturesEXT(), ((VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES:
        return serialize_struct(builder.getVkPhysicalDeviceTexelBufferAlignmentProperties(), ((VkPhysicalDeviceTexelBufferAlignmentProperties*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES:
        return serialize_struct(builder.getVkPhysicalDeviceSubgroupSizeControlFeatures(), ((VkPhysicalDeviceSubgroupSizeControlFeatures*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES:
        return serialize_struct(builder.getVkPhysicalDeviceSubgroupSizeControlProperties(), ((VkPhysicalDeviceSubgroupSizeControlProperties*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO:
        return serialize_struct(builder.getVkPipelineShaderStageRequiredSubgroupSizeCreateInfo(), ((VkPipelineShaderStageRequiredSubgroupSizeCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI:
        return serialize_struct(builder.getVkSubpassShadingPipelineCreateInfoHUAWEI(), ((VkSubpassShadingPipelineCreateInfoHUAWEI*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI:
        return serialize_struct(builder.getVkPhysicalDeviceSubpassShadingPropertiesHUAWEI(), ((VkPhysicalDeviceSubpassShadingPropertiesHUAWEI*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_PROPERTIES_HUAWEI:
        return serialize_struct(builder.getVkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI(), ((VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO:
        return serialize_struct(builder.getVkMemoryOpaqueCaptureAddressAllocateInfo(), ((VkMemoryOpaqueCaptureAddressAllocateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO:
        return serialize_struct(builder.getVkDeviceMemoryOpaqueCaptureAddressInfo(), ((VkDeviceMemoryOpaqueCaptureAddressInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceLineRasterizationFeaturesEXT(), ((VkPhysicalDeviceLineRasterizationFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceLineRasterizationPropertiesEXT(), ((VkPhysicalDeviceLineRasterizationPropertiesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT:
        return serialize_struct(builder.getVkPipelineRasterizationLineStateCreateInfoEXT(), ((VkPipelineRasterizationLineStateCreateInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES:
        return serialize_struct(builder.getVkPhysicalDevicePipelineCreationCacheControlFeatures(), ((VkPhysicalDevicePipelineCreationCacheControlFeatures*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES:
        return serialize_struct(builder.getVkPhysicalDeviceVulkan11Features(), ((VkPhysicalDeviceVulkan11Features*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES:
        return serialize_struct(builder.getVkPhysicalDeviceVulkan11Properties(), ((VkPhysicalDeviceVulkan11Properties*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES:
        return serialize_struct(builder.getVkPhysicalDeviceVulkan12Features(), ((VkPhysicalDeviceVulkan12Features*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES:
        return serialize_struct(builder.getVkPhysicalDeviceVulkan12Properties(), ((VkPhysicalDeviceVulkan12Properties*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES:
        return serialize_struct(builder.getVkPhysicalDeviceVulkan13Features(), ((VkPhysicalDeviceVulkan13Features*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES:
        return serialize_struct(builder.getVkPhysicalDeviceVulkan13Properties(), ((VkPhysicalDeviceVulkan13Properties*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD:
        return serialize_struct(builder.getVkPipelineCompilerControlCreateInfoAMD(), ((VkPipelineCompilerControlCreateInfoAMD*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD:
        return serialize_struct(builder.getVkPhysicalDeviceCoherentMemoryFeaturesAMD(), ((VkPhysicalDeviceCoherentMemoryFeaturesAMD*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES:
        return serialize_struct(builder.getVkPhysicalDeviceToolProperties(), ((VkPhysicalDeviceToolProperties*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT:
        return serialize_struct(builder.getVkSamplerCustomBorderColorCreateInfoEXT(), ((VkSamplerCustomBorderColorCreateInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceCustomBorderColorPropertiesEXT(), ((VkPhysicalDeviceCustomBorderColorPropertiesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceCustomBorderColorFeaturesEXT(), ((VkPhysicalDeviceCustomBorderColorFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT:
        return serialize_struct(builder.getVkSamplerBorderColorComponentMappingCreateInfoEXT(), ((VkSamplerBorderColorComponentMappingCreateInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceBorderColorSwizzleFeaturesEXT(), ((VkPhysicalDeviceBorderColorSwizzleFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR:
        return serialize_struct(builder.getVkAccelerationStructureGeometryTrianglesDataKHR(), ((VkAccelerationStructureGeometryTrianglesDataKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR:
        return serialize_struct(builder.getVkAccelerationStructureGeometryAabbsDataKHR(), ((VkAccelerationStructureGeometryAabbsDataKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR:
        return serialize_struct(builder.getVkAccelerationStructureGeometryInstancesDataKHR(), ((VkAccelerationStructureGeometryInstancesDataKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR:
        return serialize_struct(builder.getVkAccelerationStructureGeometryKHR(), ((VkAccelerationStructureGeometryKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR:
        return serialize_struct(builder.getVkAccelerationStructureBuildGeometryInfoKHR(), ((VkAccelerationStructureBuildGeometryInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR:
        return serialize_struct(builder.getVkAccelerationStructureCreateInfoKHR(), ((VkAccelerationStructureCreateInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR:
        return serialize_struct(builder.getVkAccelerationStructureDeviceAddressInfoKHR(), ((VkAccelerationStructureDeviceAddressInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR:
        return serialize_struct(builder.getVkAccelerationStructureVersionInfoKHR(), ((VkAccelerationStructureVersionInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR:
        return serialize_struct(builder.getVkCopyAccelerationStructureInfoKHR(), ((VkCopyAccelerationStructureInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR:
        return serialize_struct(builder.getVkCopyAccelerationStructureToMemoryInfoKHR(), ((VkCopyAccelerationStructureToMemoryInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR:
        return serialize_struct(builder.getVkCopyMemoryToAccelerationStructureInfoKHR(), ((VkCopyMemoryToAccelerationStructureInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR:
        return serialize_struct(builder.getVkRayTracingPipelineInterfaceCreateInfoKHR(), ((VkRayTracingPipelineInterfaceCreateInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR:
        return serialize_struct(builder.getVkPipelineLibraryCreateInfoKHR(), ((VkPipelineLibraryCreateInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceExtendedDynamicStateFeaturesEXT(), ((VkPhysicalDeviceExtendedDynamicStateFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceExtendedDynamicState2FeaturesEXT(), ((VkPhysicalDeviceExtendedDynamicState2FeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceExtendedDynamicState3FeaturesEXT(), ((VkPhysicalDeviceExtendedDynamicState3FeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceExtendedDynamicState3PropertiesEXT(), ((VkPhysicalDeviceExtendedDynamicState3PropertiesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM:
        return serialize_struct(builder.getVkRenderPassTransformBeginInfoQCOM(), ((VkRenderPassTransformBeginInfoQCOM*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM:
        return serialize_struct(builder.getVkCopyCommandTransformInfoQCOM(), ((VkCopyCommandTransformInfoQCOM*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM:
        return serialize_struct(builder.getVkCommandBufferInheritanceRenderPassTransformInfoQCOM(), ((VkCommandBufferInheritanceRenderPassTransformInfoQCOM*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV:
        return serialize_struct(builder.getVkPhysicalDeviceDiagnosticsConfigFeaturesNV(), ((VkPhysicalDeviceDiagnosticsConfigFeaturesNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV:
        return serialize_struct(builder.getVkDeviceDiagnosticsConfigCreateInfoNV(), ((VkDeviceDiagnosticsConfigCreateInfoNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES:
        return serialize_struct(builder.getVkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures(), ((VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR:
        return serialize_struct(builder.getVkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR(), ((VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceRobustness2FeaturesEXT(), ((VkPhysicalDeviceRobustness2FeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceRobustness2PropertiesEXT(), ((VkPhysicalDeviceRobustness2PropertiesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES:
        return serialize_struct(builder.getVkPhysicalDeviceImageRobustnessFeatures(), ((VkPhysicalDeviceImageRobustnessFeatures*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR:
        return serialize_struct(builder.getVkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR(), ((VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDevice4444FormatsFeaturesEXT(), ((VkPhysicalDevice4444FormatsFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI:
        return serialize_struct(builder.getVkPhysicalDeviceSubpassShadingFeaturesHUAWEI(), ((VkPhysicalDeviceSubpassShadingFeaturesHUAWEI*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_FEATURES_HUAWEI:
        return serialize_struct(builder.getVkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI(), ((VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_BUFFER_COPY_2:
        return serialize_struct(builder.getVkBufferCopy2(), ((VkBufferCopy2*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_IMAGE_COPY_2:
        return serialize_struct(builder.getVkImageCopy2(), ((VkImageCopy2*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_IMAGE_BLIT_2:
        return serialize_struct(builder.getVkImageBlit2(), ((VkImageBlit2*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2:
        return serialize_struct(builder.getVkBufferImageCopy2(), ((VkBufferImageCopy2*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2:
        return serialize_struct(builder.getVkImageResolve2(), ((VkImageResolve2*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2:
        return serialize_struct(builder.getVkCopyBufferInfo2(), ((VkCopyBufferInfo2*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2:
        return serialize_struct(builder.getVkCopyImageInfo2(), ((VkCopyImageInfo2*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2:
        return serialize_struct(builder.getVkBlitImageInfo2(), ((VkBlitImageInfo2*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2:
        return serialize_struct(builder.getVkCopyBufferToImageInfo2(), ((VkCopyBufferToImageInfo2*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2:
        return serialize_struct(builder.getVkCopyImageToBufferInfo2(), ((VkCopyImageToBufferInfo2*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2:
        return serialize_struct(builder.getVkResolveImageInfo2(), ((VkResolveImageInfo2*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT(), ((VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR:
        return serialize_struct(builder.getVkFragmentShadingRateAttachmentInfoKHR(), ((VkFragmentShadingRateAttachmentInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR:
        return serialize_struct(builder.getVkPipelineFragmentShadingRateStateCreateInfoKHR(), ((VkPipelineFragmentShadingRateStateCreateInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR:
        return serialize_struct(builder.getVkPhysicalDeviceFragmentShadingRateFeaturesKHR(), ((VkPhysicalDeviceFragmentShadingRateFeaturesKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR:
        return serialize_struct(builder.getVkPhysicalDeviceFragmentShadingRatePropertiesKHR(), ((VkPhysicalDeviceFragmentShadingRatePropertiesKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR:
        return serialize_struct(builder.getVkPhysicalDeviceFragmentShadingRateKHR(), ((VkPhysicalDeviceFragmentShadingRateKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES:
        return serialize_struct(builder.getVkPhysicalDeviceShaderTerminateInvocationFeatures(), ((VkPhysicalDeviceShaderTerminateInvocationFeatures*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV:
        return serialize_struct(builder.getVkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV(), ((VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV:
        return serialize_struct(builder.getVkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV(), ((VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV:
        return serialize_struct(builder.getVkPipelineFragmentShadingRateEnumStateCreateInfoNV(), ((VkPipelineFragmentShadingRateEnumStateCreateInfoNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR:
        return serialize_struct(builder.getVkAccelerationStructureBuildSizesInfoKHR(), ((VkAccelerationStructureBuildSizesInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceImage2DViewOf3DFeaturesEXT(), ((VkPhysicalDeviceImage2DViewOf3DFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_SLICED_VIEW_OF_3D_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT(), ((VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT(), ((VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceMutableDescriptorTypeFeaturesEXT(), ((VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT:
        return serialize_struct(builder.getVkMutableDescriptorTypeCreateInfoEXT(), ((VkMutableDescriptorTypeCreateInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceDepthClipControlFeaturesEXT(), ((VkPhysicalDeviceDepthClipControlFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT:
        return serialize_struct(builder.getVkPipelineViewportDepthClipControlCreateInfoEXT(), ((VkPipelineViewportDepthClipControlCreateInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceVertexInputDynamicStateFeaturesEXT(), ((VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV:
        return serialize_struct(builder.getVkPhysicalDeviceExternalMemoryRDMAFeaturesNV(), ((VkPhysicalDeviceExternalMemoryRDMAFeaturesNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT:
        return serialize_struct(builder.getVkVertexInputBindingDescription2EXT(), ((VkVertexInputBindingDescription2EXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT:
        return serialize_struct(builder.getVkVertexInputAttributeDescription2EXT(), ((VkVertexInputAttributeDescription2EXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceColorWriteEnableFeaturesEXT(), ((VkPhysicalDeviceColorWriteEnableFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT:
        return serialize_struct(builder.getVkPipelineColorWriteCreateInfoEXT(), ((VkPipelineColorWriteCreateInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_MEMORY_BARRIER_2:
        return serialize_struct(builder.getVkMemoryBarrier2(), ((VkMemoryBarrier2*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2:
        return serialize_struct(builder.getVkImageMemoryBarrier2(), ((VkImageMemoryBarrier2*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2:
        return serialize_struct(builder.getVkBufferMemoryBarrier2(), ((VkBufferMemoryBarrier2*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DEPENDENCY_INFO:
        return serialize_struct(builder.getVkDependencyInfo(), ((VkDependencyInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO:
        return serialize_struct(builder.getVkSemaphoreSubmitInfo(), ((VkSemaphoreSubmitInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO:
        return serialize_struct(builder.getVkCommandBufferSubmitInfo(), ((VkCommandBufferSubmitInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SUBMIT_INFO_2:
        return serialize_struct(builder.getVkSubmitInfo2(), ((VkSubmitInfo2*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV:
        return serialize_struct(builder.getVkQueueFamilyCheckpointProperties2NV(), ((VkQueueFamilyCheckpointProperties2NV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV:
        return serialize_struct(builder.getVkCheckpointData2NV(), ((VkCheckpointData2NV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES:
        return serialize_struct(builder.getVkPhysicalDeviceSynchronization2Features(), ((VkPhysicalDeviceSynchronization2Features*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceHostImageCopyFeaturesEXT(), ((VkPhysicalDeviceHostImageCopyFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceHostImageCopyPropertiesEXT(), ((VkPhysicalDeviceHostImageCopyPropertiesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_MEMORY_TO_IMAGE_COPY_EXT:
        return serialize_struct(builder.getVkMemoryToImageCopyEXT(), ((VkMemoryToImageCopyEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_IMAGE_TO_MEMORY_COPY_EXT:
        return serialize_struct(builder.getVkImageToMemoryCopyEXT(), ((VkImageToMemoryCopyEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_COPY_MEMORY_TO_IMAGE_INFO_EXT:
        return serialize_struct(builder.getVkCopyMemoryToImageInfoEXT(), ((VkCopyMemoryToImageInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_COPY_IMAGE_TO_MEMORY_INFO_EXT:
        return serialize_struct(builder.getVkCopyImageToMemoryInfoEXT(), ((VkCopyImageToMemoryInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_COPY_IMAGE_TO_IMAGE_INFO_EXT:
        return serialize_struct(builder.getVkCopyImageToImageInfoEXT(), ((VkCopyImageToImageInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_HOST_IMAGE_LAYOUT_TRANSITION_INFO_EXT:
        return serialize_struct(builder.getVkHostImageLayoutTransitionInfoEXT(), ((VkHostImageLayoutTransitionInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SUBRESOURCE_HOST_MEMCPY_SIZE_EXT:
        return serialize_struct(builder.getVkSubresourceHostMemcpySizeEXT(), ((VkSubresourceHostMemcpySizeEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY_EXT:
        return serialize_struct(builder.getVkHostImageCopyDevicePerformanceQueryEXT(), ((VkHostImageCopyDevicePerformanceQueryEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT(), ((VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceLegacyDitheringFeaturesEXT(), ((VkPhysicalDeviceLegacyDitheringFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT(), ((VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT:
        return serialize_struct(builder.getVkSubpassResolvePerformanceQueryEXT(), ((VkSubpassResolvePerformanceQueryEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT:
        return serialize_struct(builder.getVkMultisampledRenderToSingleSampledInfoEXT(), ((VkMultisampledRenderToSingleSampledInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDevicePipelineProtectedAccessFeaturesEXT(), ((VkPhysicalDevicePipelineProtectedAccessFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_QUEUE_FAMILY_VIDEO_PROPERTIES_KHR:
        return serialize_struct(builder.getVkQueueFamilyVideoPropertiesKHR(), ((VkQueueFamilyVideoPropertiesKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR:
        return serialize_struct(builder.getVkQueueFamilyQueryResultStatusPropertiesKHR(), ((VkQueueFamilyQueryResultStatusPropertiesKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_VIDEO_PROFILE_LIST_INFO_KHR:
        return serialize_struct(builder.getVkVideoProfileListInfoKHR(), ((VkVideoProfileListInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR:
        return serialize_struct(builder.getVkPhysicalDeviceVideoFormatInfoKHR(), ((VkPhysicalDeviceVideoFormatInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR:
        return serialize_struct(builder.getVkVideoFormatPropertiesKHR(), ((VkVideoFormatPropertiesKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_VIDEO_PROFILE_INFO_KHR:
        return serialize_struct(builder.getVkVideoProfileInfoKHR(), ((VkVideoProfileInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR:
        return serialize_struct(builder.getVkVideoCapabilitiesKHR(), ((VkVideoCapabilitiesKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR:
        return serialize_struct(builder.getVkVideoSessionMemoryRequirementsKHR(), ((VkVideoSessionMemoryRequirementsKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_BIND_VIDEO_SESSION_MEMORY_INFO_KHR:
        return serialize_struct(builder.getVkBindVideoSessionMemoryInfoKHR(), ((VkBindVideoSessionMemoryInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_INFO_KHR:
        return serialize_struct(builder.getVkVideoPictureResourceInfoKHR(), ((VkVideoPictureResourceInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_INFO_KHR:
        return serialize_struct(builder.getVkVideoReferenceSlotInfoKHR(), ((VkVideoReferenceSlotInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_VIDEO_DECODE_CAPABILITIES_KHR:
        return serialize_struct(builder.getVkVideoDecodeCapabilitiesKHR(), ((VkVideoDecodeCapabilitiesKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_VIDEO_DECODE_USAGE_INFO_KHR:
        return serialize_struct(builder.getVkVideoDecodeUsageInfoKHR(), ((VkVideoDecodeUsageInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR:
        return serialize_struct(builder.getVkVideoDecodeInfoKHR(), ((VkVideoDecodeInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_INFO_KHR:
        return serialize_struct(builder.getVkVideoDecodeH264ProfileInfoKHR(), ((VkVideoDecodeH264ProfileInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_KHR:
        return serialize_struct(builder.getVkVideoDecodeH264CapabilitiesKHR(), ((VkVideoDecodeH264CapabilitiesKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR:
        return serialize_struct(builder.getVkVideoDecodeH264SessionParametersAddInfoKHR(), ((VkVideoDecodeH264SessionParametersAddInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR:
        return serialize_struct(builder.getVkVideoDecodeH264SessionParametersCreateInfoKHR(), ((VkVideoDecodeH264SessionParametersCreateInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_KHR:
        return serialize_struct(builder.getVkVideoDecodeH264PictureInfoKHR(), ((VkVideoDecodeH264PictureInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_KHR:
        return serialize_struct(builder.getVkVideoDecodeH264DpbSlotInfoKHR(), ((VkVideoDecodeH264DpbSlotInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_INFO_KHR:
        return serialize_struct(builder.getVkVideoDecodeH265ProfileInfoKHR(), ((VkVideoDecodeH265ProfileInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_KHR:
        return serialize_struct(builder.getVkVideoDecodeH265CapabilitiesKHR(), ((VkVideoDecodeH265CapabilitiesKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR:
        return serialize_struct(builder.getVkVideoDecodeH265SessionParametersAddInfoKHR(), ((VkVideoDecodeH265SessionParametersAddInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR:
        return serialize_struct(builder.getVkVideoDecodeH265SessionParametersCreateInfoKHR(), ((VkVideoDecodeH265SessionParametersCreateInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_KHR:
        return serialize_struct(builder.getVkVideoDecodeH265PictureInfoKHR(), ((VkVideoDecodeH265PictureInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_KHR:
        return serialize_struct(builder.getVkVideoDecodeH265DpbSlotInfoKHR(), ((VkVideoDecodeH265DpbSlotInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR:
        return serialize_struct(builder.getVkVideoSessionCreateInfoKHR(), ((VkVideoSessionCreateInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR:
        return serialize_struct(builder.getVkVideoSessionParametersCreateInfoKHR(), ((VkVideoSessionParametersCreateInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR:
        return serialize_struct(builder.getVkVideoSessionParametersUpdateInfoKHR(), ((VkVideoSessionParametersUpdateInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR:
        return serialize_struct(builder.getVkVideoBeginCodingInfoKHR(), ((VkVideoBeginCodingInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR:
        return serialize_struct(builder.getVkVideoEndCodingInfoKHR(), ((VkVideoEndCodingInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR:
        return serialize_struct(builder.getVkVideoCodingControlInfoKHR(), ((VkVideoCodingControlInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV:
        return serialize_struct(builder.getVkPhysicalDeviceInheritedViewportScissorFeaturesNV(), ((VkPhysicalDeviceInheritedViewportScissorFeaturesNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV:
        return serialize_struct(builder.getVkCommandBufferInheritanceViewportScissorInfoNV(), ((VkCommandBufferInheritanceViewportScissorInfoNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT(), ((VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceProvokingVertexFeaturesEXT(), ((VkPhysicalDeviceProvokingVertexFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceProvokingVertexPropertiesEXT(), ((VkPhysicalDeviceProvokingVertexPropertiesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT:
        return serialize_struct(builder.getVkPipelineRasterizationProvokingVertexStateCreateInfoEXT(), ((VkPipelineRasterizationProvokingVertexStateCreateInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX:
        return serialize_struct(builder.getVkCuModuleCreateInfoNVX(), ((VkCuModuleCreateInfoNVX*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX:
        return serialize_struct(builder.getVkCuFunctionCreateInfoNVX(), ((VkCuFunctionCreateInfoNVX*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX:
        return serialize_struct(builder.getVkCuLaunchInfoNVX(), ((VkCuLaunchInfoNVX*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceDescriptorBufferFeaturesEXT(), ((VkPhysicalDeviceDescriptorBufferFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceDescriptorBufferPropertiesEXT(), ((VkPhysicalDeviceDescriptorBufferPropertiesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT(), ((VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DESCRIPTOR_ADDRESS_INFO_EXT:
        return serialize_struct(builder.getVkDescriptorAddressInfoEXT(), ((VkDescriptorAddressInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_INFO_EXT:
        return serialize_struct(builder.getVkDescriptorBufferBindingInfoEXT(), ((VkDescriptorBufferBindingInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT:
        return serialize_struct(builder.getVkDescriptorBufferBindingPushDescriptorBufferHandleEXT(), ((VkDescriptorBufferBindingPushDescriptorBufferHandleEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DESCRIPTOR_GET_INFO_EXT:
        return serialize_struct(builder.getVkDescriptorGetInfoEXT(), ((VkDescriptorGetInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT:
        return serialize_struct(builder.getVkBufferCaptureDescriptorDataInfoEXT(), ((VkBufferCaptureDescriptorDataInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT:
        return serialize_struct(builder.getVkImageCaptureDescriptorDataInfoEXT(), ((VkImageCaptureDescriptorDataInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT:
        return serialize_struct(builder.getVkImageViewCaptureDescriptorDataInfoEXT(), ((VkImageViewCaptureDescriptorDataInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT:
        return serialize_struct(builder.getVkSamplerCaptureDescriptorDataInfoEXT(), ((VkSamplerCaptureDescriptorDataInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT:
        return serialize_struct(builder.getVkAccelerationStructureCaptureDescriptorDataInfoEXT(), ((VkAccelerationStructureCaptureDescriptorDataInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT:
        return serialize_struct(builder.getVkOpaqueCaptureDescriptorDataCreateInfoEXT(), ((VkOpaqueCaptureDescriptorDataCreateInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES:
        return serialize_struct(builder.getVkPhysicalDeviceShaderIntegerDotProductFeatures(), ((VkPhysicalDeviceShaderIntegerDotProductFeatures*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES:
        return serialize_struct(builder.getVkPhysicalDeviceShaderIntegerDotProductProperties(), ((VkPhysicalDeviceShaderIntegerDotProductProperties*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceDrmPropertiesEXT(), ((VkPhysicalDeviceDrmPropertiesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR:
        return serialize_struct(builder.getVkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR(), ((VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR:
        return serialize_struct(builder.getVkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR(), ((VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV:
        return serialize_struct(builder.getVkPhysicalDeviceRayTracingMotionBlurFeaturesNV(), ((VkPhysicalDeviceRayTracingMotionBlurFeaturesNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV:
        return serialize_struct(builder.getVkAccelerationStructureGeometryMotionTrianglesDataNV(), ((VkAccelerationStructureGeometryMotionTrianglesDataNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV:
        return serialize_struct(builder.getVkAccelerationStructureMotionInfoNV(), ((VkAccelerationStructureMotionInfoNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV:
        return serialize_struct(builder.getVkMemoryGetRemoteAddressInfoNV(), ((VkMemoryGetRemoteAddressInfoNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceRGBA10X6FormatsFeaturesEXT(), ((VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3:
        return serialize_struct(builder.getVkFormatProperties3(), ((VkFormatProperties3*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT:
        return serialize_struct(builder.getVkDrmFormatModifierPropertiesList2EXT(), ((VkDrmFormatModifierPropertiesList2EXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO:
        return serialize_struct(builder.getVkPipelineRenderingCreateInfo(), ((VkPipelineRenderingCreateInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_RENDERING_INFO:
        return serialize_struct(builder.getVkRenderingInfo(), ((VkRenderingInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO:
        return serialize_struct(builder.getVkRenderingAttachmentInfo(), ((VkRenderingAttachmentInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR:
        return serialize_struct(builder.getVkRenderingFragmentShadingRateAttachmentInfoKHR(), ((VkRenderingFragmentShadingRateAttachmentInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT:
        return serialize_struct(builder.getVkRenderingFragmentDensityMapAttachmentInfoEXT(), ((VkRenderingFragmentDensityMapAttachmentInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES:
        return serialize_struct(builder.getVkPhysicalDeviceDynamicRenderingFeatures(), ((VkPhysicalDeviceDynamicRenderingFeatures*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO:
        return serialize_struct(builder.getVkCommandBufferInheritanceRenderingInfo(), ((VkCommandBufferInheritanceRenderingInfo*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD:
        return serialize_struct(builder.getVkAttachmentSampleCountInfoAMD(), ((VkAttachmentSampleCountInfoAMD*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX:
        return serialize_struct(builder.getVkMultiviewPerViewAttributesInfoNVX(), ((VkMultiviewPerViewAttributesInfoNVX*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceImageViewMinLodFeaturesEXT(), ((VkPhysicalDeviceImageViewMinLodFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT:
        return serialize_struct(builder.getVkImageViewMinLodCreateInfoEXT(), ((VkImageViewMinLodCreateInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT(), ((VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV:
        return serialize_struct(builder.getVkPhysicalDeviceLinearColorAttachmentFeaturesNV(), ((VkPhysicalDeviceLinearColorAttachmentFeaturesNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT(), ((VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT(), ((VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT:
        return serialize_struct(builder.getVkGraphicsPipelineLibraryCreateInfoEXT(), ((VkGraphicsPipelineLibraryCreateInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE:
        return serialize_struct(builder.getVkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE(), ((VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE:
        return serialize_struct(builder.getVkDescriptorSetBindingReferenceVALVE(), ((VkDescriptorSetBindingReferenceVALVE*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE:
        return serialize_struct(builder.getVkDescriptorSetLayoutHostMappingInfoVALVE(), ((VkDescriptorSetLayoutHostMappingInfoVALVE*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceShaderModuleIdentifierFeaturesEXT(), ((VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceShaderModuleIdentifierPropertiesEXT(), ((VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT:
        return serialize_struct(builder.getVkPipelineShaderStageModuleIdentifierCreateInfoEXT(), ((VkPipelineShaderStageModuleIdentifierCreateInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SHADER_MODULE_IDENTIFIER_EXT:
        return serialize_struct(builder.getVkShaderModuleIdentifierEXT(), ((VkShaderModuleIdentifierEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT:
        return serialize_struct(builder.getVkImageCompressionControlEXT(), ((VkImageCompressionControlEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceImageCompressionControlFeaturesEXT(), ((VkPhysicalDeviceImageCompressionControlFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT:
        return serialize_struct(builder.getVkImageCompressionPropertiesEXT(), ((VkImageCompressionPropertiesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT(), ((VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_KHR:
        return serialize_struct(builder.getVkImageSubresource2KHR(), ((VkImageSubresource2KHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_KHR:
        return serialize_struct(builder.getVkSubresourceLayout2KHR(), ((VkSubresourceLayout2KHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_CONTROL_EXT:
        return serialize_struct(builder.getVkRenderPassCreationControlEXT(), ((VkRenderPassCreationControlEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT:
        return serialize_struct(builder.getVkRenderPassCreationFeedbackCreateInfoEXT(), ((VkRenderPassCreationFeedbackCreateInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT:
        return serialize_struct(builder.getVkRenderPassSubpassFeedbackCreateInfoEXT(), ((VkRenderPassSubpassFeedbackCreateInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT(), ((VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_MICROMAP_BUILD_INFO_EXT:
        return serialize_struct(builder.getVkMicromapBuildInfoEXT(), ((VkMicromapBuildInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_MICROMAP_CREATE_INFO_EXT:
        return serialize_struct(builder.getVkMicromapCreateInfoEXT(), ((VkMicromapCreateInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_MICROMAP_VERSION_INFO_EXT:
        return serialize_struct(builder.getVkMicromapVersionInfoEXT(), ((VkMicromapVersionInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_COPY_MICROMAP_INFO_EXT:
        return serialize_struct(builder.getVkCopyMicromapInfoEXT(), ((VkCopyMicromapInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_COPY_MICROMAP_TO_MEMORY_INFO_EXT:
        return serialize_struct(builder.getVkCopyMicromapToMemoryInfoEXT(), ((VkCopyMicromapToMemoryInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_COPY_MEMORY_TO_MICROMAP_INFO_EXT:
        return serialize_struct(builder.getVkCopyMemoryToMicromapInfoEXT(), ((VkCopyMemoryToMicromapInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_MICROMAP_BUILD_SIZES_INFO_EXT:
        return serialize_struct(builder.getVkMicromapBuildSizesInfoEXT(), ((VkMicromapBuildSizesInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceOpacityMicromapFeaturesEXT(), ((VkPhysicalDeviceOpacityMicromapFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceOpacityMicromapPropertiesEXT(), ((VkPhysicalDeviceOpacityMicromapPropertiesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT:
        return serialize_struct(builder.getVkAccelerationStructureTrianglesOpacityMicromapEXT(), ((VkAccelerationStructureTrianglesOpacityMicromapEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_PROPERTIES_IDENTIFIER_EXT:
        return serialize_struct(builder.getVkPipelinePropertiesIdentifierEXT(), ((VkPipelinePropertiesIdentifierEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDevicePipelinePropertiesFeaturesEXT(), ((VkPhysicalDevicePipelinePropertiesFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD:
        return serialize_struct(builder.getVkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD(), ((VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXT:
        return serialize_struct(builder.getVkExternalMemoryAcquireUnmodifiedEXT(), ((VkExternalMemoryAcquireUnmodifiedEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT(), ((VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDevicePipelineRobustnessFeaturesEXT(), ((VkPhysicalDevicePipelineRobustnessFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO_EXT:
        return serialize_struct(builder.getVkPipelineRobustnessCreateInfoEXT(), ((VkPipelineRobustnessCreateInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT:
        return serialize_struct(builder.getVkPhysicalDevicePipelineRobustnessPropertiesEXT(), ((VkPhysicalDevicePipelineRobustnessPropertiesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM:
        return serialize_struct(builder.getVkImageViewSampleWeightCreateInfoQCOM(), ((VkImageViewSampleWeightCreateInfoQCOM*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM:
        return serialize_struct(builder.getVkPhysicalDeviceImageProcessingFeaturesQCOM(), ((VkPhysicalDeviceImageProcessingFeaturesQCOM*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM:
        return serialize_struct(builder.getVkPhysicalDeviceImageProcessingPropertiesQCOM(), ((VkPhysicalDeviceImageProcessingPropertiesQCOM*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM:
        return serialize_struct(builder.getVkPhysicalDeviceTilePropertiesFeaturesQCOM(), ((VkPhysicalDeviceTilePropertiesFeaturesQCOM*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_TILE_PROPERTIES_QCOM:
        return serialize_struct(builder.getVkTilePropertiesQCOM(), ((VkTilePropertiesQCOM*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC:
        return serialize_struct(builder.getVkPhysicalDeviceAmigoProfilingFeaturesSEC(), ((VkPhysicalDeviceAmigoProfilingFeaturesSEC*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_AMIGO_PROFILING_SUBMIT_INFO_SEC:
        return serialize_struct(builder.getVkAmigoProfilingSubmitInfoSEC(), ((VkAmigoProfilingSubmitInfoSEC*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT(), ((VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceDepthClampZeroOneFeaturesEXT(), ((VkPhysicalDeviceDepthClampZeroOneFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceAddressBindingReportFeaturesEXT(), ((VkPhysicalDeviceAddressBindingReportFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT:
        return serialize_struct(builder.getVkDeviceAddressBindingCallbackDataEXT(), ((VkDeviceAddressBindingCallbackDataEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV:
        return serialize_struct(builder.getVkPhysicalDeviceOpticalFlowFeaturesNV(), ((VkPhysicalDeviceOpticalFlowFeaturesNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV:
        return serialize_struct(builder.getVkPhysicalDeviceOpticalFlowPropertiesNV(), ((VkPhysicalDeviceOpticalFlowPropertiesNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV:
        return serialize_struct(builder.getVkOpticalFlowImageFormatInfoNV(), ((VkOpticalFlowImageFormatInfoNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV:
        return serialize_struct(builder.getVkOpticalFlowImageFormatPropertiesNV(), ((VkOpticalFlowImageFormatPropertiesNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_INFO_NV:
        return serialize_struct(builder.getVkOpticalFlowSessionCreateInfoNV(), ((VkOpticalFlowSessionCreateInfoNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV:
        return serialize_struct(builder.getVkOpticalFlowSessionCreatePrivateDataInfoNV(), ((VkOpticalFlowSessionCreatePrivateDataInfoNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_OPTICAL_FLOW_EXECUTE_INFO_NV:
        return serialize_struct(builder.getVkOpticalFlowExecuteInfoNV(), ((VkOpticalFlowExecuteInfoNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FAULT_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceFaultFeaturesEXT(), ((VkPhysicalDeviceFaultFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DEVICE_FAULT_COUNTS_EXT:
        return serialize_struct(builder.getVkDeviceFaultCountsEXT(), ((VkDeviceFaultCountsEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DEVICE_FAULT_INFO_EXT:
        return serialize_struct(builder.getVkDeviceFaultInfoEXT(), ((VkDeviceFaultInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_LIBRARY_GROUP_HANDLES_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT(), ((VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DEPTH_BIAS_INFO_EXT:
        return serialize_struct(builder.getVkDepthBiasInfoEXT(), ((VkDepthBiasInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DEPTH_BIAS_REPRESENTATION_INFO_EXT:
        return serialize_struct(builder.getVkDepthBiasRepresentationInfoEXT(), ((VkDepthBiasRepresentationInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM:
        return serialize_struct(builder.getVkPhysicalDeviceShaderCoreBuiltinsPropertiesARM(), ((VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM:
        return serialize_struct(builder.getVkPhysicalDeviceShaderCoreBuiltinsFeaturesARM(), ((VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_FRAME_BOUNDARY_EXT:
        return serialize_struct(builder.getVkFrameBoundaryEXT(), ((VkFrameBoundaryEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAME_BOUNDARY_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceFrameBoundaryFeaturesEXT(), ((VkPhysicalDeviceFrameBoundaryFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT(), ((VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_EXT:
        return serialize_struct(builder.getVkSurfacePresentModeEXT(), ((VkSurfacePresentModeEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SURFACE_PRESENT_SCALING_CAPABILITIES_EXT:
        return serialize_struct(builder.getVkSurfacePresentScalingCapabilitiesEXT(), ((VkSurfacePresentScalingCapabilitiesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_COMPATIBILITY_EXT:
        return serialize_struct(builder.getVkSurfacePresentModeCompatibilityEXT(), ((VkSurfacePresentModeCompatibilityEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceSwapchainMaintenance1FeaturesEXT(), ((VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_FENCE_INFO_EXT:
        return serialize_struct(builder.getVkSwapchainPresentFenceInfoEXT(), ((VkSwapchainPresentFenceInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODES_CREATE_INFO_EXT:
        return serialize_struct(builder.getVkSwapchainPresentModesCreateInfoEXT(), ((VkSwapchainPresentModesCreateInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODE_INFO_EXT:
        return serialize_struct(builder.getVkSwapchainPresentModeInfoEXT(), ((VkSwapchainPresentModeInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_SCALING_CREATE_INFO_EXT:
        return serialize_struct(builder.getVkSwapchainPresentScalingCreateInfoEXT(), ((VkSwapchainPresentScalingCreateInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_RELEASE_SWAPCHAIN_IMAGES_INFO_EXT:
        return serialize_struct(builder.getVkReleaseSwapchainImagesInfoEXT(), ((VkReleaseSwapchainImagesInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_BIAS_CONTROL_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceDepthBiasControlFeaturesEXT(), ((VkPhysicalDeviceDepthBiasControlFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV:
        return serialize_struct(builder.getVkPhysicalDeviceRayTracingInvocationReorderFeaturesNV(), ((VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV:
        return serialize_struct(builder.getVkPhysicalDeviceRayTracingInvocationReorderPropertiesNV(), ((VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_INFO_LUNARG:
        return serialize_struct(builder.getVkDirectDriverLoadingInfoLUNARG(), ((VkDirectDriverLoadingInfoLUNARG*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_LIST_LUNARG:
        return serialize_struct(builder.getVkDirectDriverLoadingListLUNARG(), ((VkDirectDriverLoadingListLUNARG*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_VIEWPORTS_FEATURES_QCOM:
        return serialize_struct(builder.getVkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM(), ((VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_POSITION_FETCH_FEATURES_KHR:
        return serialize_struct(builder.getVkPhysicalDeviceRayTracingPositionFetchFeaturesKHR(), ((VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_DEVICE_IMAGE_SUBRESOURCE_INFO_KHR:
        return serialize_struct(builder.getVkDeviceImageSubresourceInfoKHR(), ((VkDeviceImageSubresourceInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_ARM:
        return serialize_struct(builder.getVkPhysicalDeviceShaderCorePropertiesARM(), ((VkPhysicalDeviceShaderCorePropertiesARM*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_RENDER_AREAS_FEATURES_QCOM:
        return serialize_struct(builder.getVkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM(), ((VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_RENDER_AREAS_RENDER_PASS_BEGIN_INFO_QCOM:
        return serialize_struct(builder.getVkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM(), ((VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_QUERY_LOW_LATENCY_SUPPORT_NV:
        return serialize_struct(builder.getVkQueryLowLatencySupportNV(), ((VkQueryLowLatencySupportNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_MEMORY_MAP_INFO_KHR:
        return serialize_struct(builder.getVkMemoryMapInfoKHR(), ((VkMemoryMapInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO_KHR:
        return serialize_struct(builder.getVkMemoryUnmapInfoKHR(), ((VkMemoryUnmapInfoKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceShaderObjectFeaturesEXT(), ((VkPhysicalDeviceShaderObjectFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_PROPERTIES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceShaderObjectPropertiesEXT(), ((VkPhysicalDeviceShaderObjectPropertiesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SHADER_CREATE_INFO_EXT:
        return serialize_struct(builder.getVkShaderCreateInfoEXT(), ((VkShaderCreateInfoEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_FEATURES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceShaderTileImageFeaturesEXT(), ((VkPhysicalDeviceShaderTileImageFeaturesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_PROPERTIES_EXT:
        return serialize_struct(builder.getVkPhysicalDeviceShaderTileImagePropertiesEXT(), ((VkPhysicalDeviceShaderTileImagePropertiesEXT*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_KHR:
        return serialize_struct(builder.getVkPhysicalDeviceCooperativeMatrixFeaturesKHR(), ((VkPhysicalDeviceCooperativeMatrixFeaturesKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_KHR:
        return serialize_struct(builder.getVkCooperativeMatrixPropertiesKHR(), ((VkCooperativeMatrixPropertiesKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_KHR:
        return serialize_struct(builder.getVkPhysicalDeviceCooperativeMatrixPropertiesKHR(), ((VkPhysicalDeviceCooperativeMatrixPropertiesKHR*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_CLAMP_FEATURES_QCOM:
        return serialize_struct(builder.getVkPhysicalDeviceCubicClampFeaturesQCOM(), ((VkPhysicalDeviceCubicClampFeaturesQCOM*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_DEGAMMA_FEATURES_QCOM:
        return serialize_struct(builder.getVkPhysicalDeviceYcbcrDegammaFeaturesQCOM(), ((VkPhysicalDeviceYcbcrDegammaFeaturesQCOM*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_YCBCR_DEGAMMA_CREATE_INFO_QCOM:
        return serialize_struct(builder.getVkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM(), ((VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_WEIGHTS_FEATURES_QCOM:
        return serialize_struct(builder.getVkPhysicalDeviceCubicWeightsFeaturesQCOM(), ((VkPhysicalDeviceCubicWeightsFeaturesQCOM*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SAMPLER_CUBIC_WEIGHTS_CREATE_INFO_QCOM:
        return serialize_struct(builder.getVkSamplerCubicWeightsCreateInfoQCOM(), ((VkSamplerCubicWeightsCreateInfoQCOM*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_BLIT_IMAGE_CUBIC_WEIGHTS_INFO_QCOM:
        return serialize_struct(builder.getVkBlitImageCubicWeightsInfoQCOM(), ((VkBlitImageCubicWeightsInfoQCOM*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_FEATURES_QCOM:
        return serialize_struct(builder.getVkPhysicalDeviceImageProcessing2FeaturesQCOM(), ((VkPhysicalDeviceImageProcessing2FeaturesQCOM*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_PROPERTIES_QCOM:
        return serialize_struct(builder.getVkPhysicalDeviceImageProcessing2PropertiesQCOM(), ((VkPhysicalDeviceImageProcessing2PropertiesQCOM*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_SAMPLER_BLOCK_MATCH_WINDOW_CREATE_INFO_QCOM:
        return serialize_struct(builder.getVkSamplerBlockMatchWindowCreateInfoQCOM(), ((VkSamplerBlockMatchWindowCreateInfoQCOM*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_POOL_OVERALLOCATION_FEATURES_NV:
        return serialize_struct(builder.getVkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV(), ((VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV*)(member))[0]);
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_DRIVER_PROPERTIES_MSFT:
        return serialize_struct(builder.getVkPhysicalDeviceLayeredDriverPropertiesMSFT(), ((VkPhysicalDeviceLayeredDriverPropertiesMSFT*)(member))[0]);
    

default:
    return serialize_pNext(builder, (void*)(chain->pNext)); //Ignore invalid sTypes
}
}


void* deserialize_pNext(PNext::Reader& reader){
    if (reader.hasNone()){
        return NULL;
    }
    
    void* result;
    switch (reader.which()){


    case PNext::VkBaseOutStructure:
        result=(VkBaseOutStructure*)malloc(sizeof(VkBaseOutStructure));
        result[0]=deserialize_struct(reader.getVkBaseOutStructure());
        return result;
    

    case PNext::VkBaseInStructure:
        result=(VkBaseInStructure*)malloc(sizeof(VkBaseInStructure));
        result[0]=deserialize_struct(reader.getVkBaseInStructure());
        return result;
    

    case PNext::VkOffset2D:
        result=(VkOffset2D*)malloc(sizeof(VkOffset2D));
        result[0]=deserialize_struct(reader.getVkOffset2D());
        return result;
    

    case PNext::VkOffset3D:
        result=(VkOffset3D*)malloc(sizeof(VkOffset3D));
        result[0]=deserialize_struct(reader.getVkOffset3D());
        return result;
    

    case PNext::VkExtent2D:
        result=(VkExtent2D*)malloc(sizeof(VkExtent2D));
        result[0]=deserialize_struct(reader.getVkExtent2D());
        return result;
    

    case PNext::VkExtent3D:
        result=(VkExtent3D*)malloc(sizeof(VkExtent3D));
        result[0]=deserialize_struct(reader.getVkExtent3D());
        return result;
    

    case PNext::VkViewport:
        result=(VkViewport*)malloc(sizeof(VkViewport));
        result[0]=deserialize_struct(reader.getVkViewport());
        return result;
    

    case PNext::VkRect2D:
        result=(VkRect2D*)malloc(sizeof(VkRect2D));
        result[0]=deserialize_struct(reader.getVkRect2D());
        return result;
    

    case PNext::VkClearRect:
        result=(VkClearRect*)malloc(sizeof(VkClearRect));
        result[0]=deserialize_struct(reader.getVkClearRect());
        return result;
    

    case PNext::VkComponentMapping:
        result=(VkComponentMapping*)malloc(sizeof(VkComponentMapping));
        result[0]=deserialize_struct(reader.getVkComponentMapping());
        return result;
    

    case PNext::VkPhysicalDeviceProperties:
        result=(VkPhysicalDeviceProperties*)malloc(sizeof(VkPhysicalDeviceProperties));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceProperties());
        return result;
    

    case PNext::VkExtensionProperties:
        result=(VkExtensionProperties*)malloc(sizeof(VkExtensionProperties));
        result[0]=deserialize_struct(reader.getVkExtensionProperties());
        return result;
    

    case PNext::VkLayerProperties:
        result=(VkLayerProperties*)malloc(sizeof(VkLayerProperties));
        result[0]=deserialize_struct(reader.getVkLayerProperties());
        return result;
    

    case PNext::VkApplicationInfo:
        result=(VkApplicationInfo*)malloc(sizeof(VkApplicationInfo));
        result[0]=deserialize_struct(reader.getVkApplicationInfo());
        return result;
    

    case PNext::VkAllocationCallbacks:
        result=(VkAllocationCallbacks*)malloc(sizeof(VkAllocationCallbacks));
        result[0]=deserialize_struct(reader.getVkAllocationCallbacks());
        return result;
    

    case PNext::VkDeviceQueueCreateInfo:
        result=(VkDeviceQueueCreateInfo*)malloc(sizeof(VkDeviceQueueCreateInfo));
        result[0]=deserialize_struct(reader.getVkDeviceQueueCreateInfo());
        return result;
    

    case PNext::VkDeviceCreateInfo:
        result=(VkDeviceCreateInfo*)malloc(sizeof(VkDeviceCreateInfo));
        result[0]=deserialize_struct(reader.getVkDeviceCreateInfo());
        return result;
    

    case PNext::VkInstanceCreateInfo:
        result=(VkInstanceCreateInfo*)malloc(sizeof(VkInstanceCreateInfo));
        result[0]=deserialize_struct(reader.getVkInstanceCreateInfo());
        return result;
    

    case PNext::VkQueueFamilyProperties:
        result=(VkQueueFamilyProperties*)malloc(sizeof(VkQueueFamilyProperties));
        result[0]=deserialize_struct(reader.getVkQueueFamilyProperties());
        return result;
    

    case PNext::VkPhysicalDeviceMemoryProperties:
        result=(VkPhysicalDeviceMemoryProperties*)malloc(sizeof(VkPhysicalDeviceMemoryProperties));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceMemoryProperties());
        return result;
    

    case PNext::VkMemoryAllocateInfo:
        result=(VkMemoryAllocateInfo*)malloc(sizeof(VkMemoryAllocateInfo));
        result[0]=deserialize_struct(reader.getVkMemoryAllocateInfo());
        return result;
    

    case PNext::VkMemoryRequirements:
        result=(VkMemoryRequirements*)malloc(sizeof(VkMemoryRequirements));
        result[0]=deserialize_struct(reader.getVkMemoryRequirements());
        return result;
    

    case PNext::VkSparseImageFormatProperties:
        result=(VkSparseImageFormatProperties*)malloc(sizeof(VkSparseImageFormatProperties));
        result[0]=deserialize_struct(reader.getVkSparseImageFormatProperties());
        return result;
    

    case PNext::VkSparseImageMemoryRequirements:
        result=(VkSparseImageMemoryRequirements*)malloc(sizeof(VkSparseImageMemoryRequirements));
        result[0]=deserialize_struct(reader.getVkSparseImageMemoryRequirements());
        return result;
    

    case PNext::VkMemoryType:
        result=(VkMemoryType*)malloc(sizeof(VkMemoryType));
        result[0]=deserialize_struct(reader.getVkMemoryType());
        return result;
    

    case PNext::VkMemoryHeap:
        result=(VkMemoryHeap*)malloc(sizeof(VkMemoryHeap));
        result[0]=deserialize_struct(reader.getVkMemoryHeap());
        return result;
    

    case PNext::VkMappedMemoryRange:
        result=(VkMappedMemoryRange*)malloc(sizeof(VkMappedMemoryRange));
        result[0]=deserialize_struct(reader.getVkMappedMemoryRange());
        return result;
    

    case PNext::VkFormatProperties:
        result=(VkFormatProperties*)malloc(sizeof(VkFormatProperties));
        result[0]=deserialize_struct(reader.getVkFormatProperties());
        return result;
    

    case PNext::VkImageFormatProperties:
        result=(VkImageFormatProperties*)malloc(sizeof(VkImageFormatProperties));
        result[0]=deserialize_struct(reader.getVkImageFormatProperties());
        return result;
    

    case PNext::VkDescriptorBufferInfo:
        result=(VkDescriptorBufferInfo*)malloc(sizeof(VkDescriptorBufferInfo));
        result[0]=deserialize_struct(reader.getVkDescriptorBufferInfo());
        return result;
    

    case PNext::VkDescriptorImageInfo:
        result=(VkDescriptorImageInfo*)malloc(sizeof(VkDescriptorImageInfo));
        result[0]=deserialize_struct(reader.getVkDescriptorImageInfo());
        return result;
    

    case PNext::VkWriteDescriptorSet:
        result=(VkWriteDescriptorSet*)malloc(sizeof(VkWriteDescriptorSet));
        result[0]=deserialize_struct(reader.getVkWriteDescriptorSet());
        return result;
    

    case PNext::VkCopyDescriptorSet:
        result=(VkCopyDescriptorSet*)malloc(sizeof(VkCopyDescriptorSet));
        result[0]=deserialize_struct(reader.getVkCopyDescriptorSet());
        return result;
    

    case PNext::VkBufferUsageFlags2CreateInfoKHR:
        result=(VkBufferUsageFlags2CreateInfoKHR*)malloc(sizeof(VkBufferUsageFlags2CreateInfoKHR));
        result[0]=deserialize_struct(reader.getVkBufferUsageFlags2CreateInfoKHR());
        return result;
    

    case PNext::VkBufferCreateInfo:
        result=(VkBufferCreateInfo*)malloc(sizeof(VkBufferCreateInfo));
        result[0]=deserialize_struct(reader.getVkBufferCreateInfo());
        return result;
    

    case PNext::VkBufferViewCreateInfo:
        result=(VkBufferViewCreateInfo*)malloc(sizeof(VkBufferViewCreateInfo));
        result[0]=deserialize_struct(reader.getVkBufferViewCreateInfo());
        return result;
    

    case PNext::VkImageSubresource:
        result=(VkImageSubresource*)malloc(sizeof(VkImageSubresource));
        result[0]=deserialize_struct(reader.getVkImageSubresource());
        return result;
    

    case PNext::VkImageSubresourceLayers:
        result=(VkImageSubresourceLayers*)malloc(sizeof(VkImageSubresourceLayers));
        result[0]=deserialize_struct(reader.getVkImageSubresourceLayers());
        return result;
    

    case PNext::VkImageSubresourceRange:
        result=(VkImageSubresourceRange*)malloc(sizeof(VkImageSubresourceRange));
        result[0]=deserialize_struct(reader.getVkImageSubresourceRange());
        return result;
    

    case PNext::VkMemoryBarrier:
        result=(VkMemoryBarrier*)malloc(sizeof(VkMemoryBarrier));
        result[0]=deserialize_struct(reader.getVkMemoryBarrier());
        return result;
    

    case PNext::VkBufferMemoryBarrier:
        result=(VkBufferMemoryBarrier*)malloc(sizeof(VkBufferMemoryBarrier));
        result[0]=deserialize_struct(reader.getVkBufferMemoryBarrier());
        return result;
    

    case PNext::VkImageMemoryBarrier:
        result=(VkImageMemoryBarrier*)malloc(sizeof(VkImageMemoryBarrier));
        result[0]=deserialize_struct(reader.getVkImageMemoryBarrier());
        return result;
    

    case PNext::VkImageCreateInfo:
        result=(VkImageCreateInfo*)malloc(sizeof(VkImageCreateInfo));
        result[0]=deserialize_struct(reader.getVkImageCreateInfo());
        return result;
    

    case PNext::VkSubresourceLayout:
        result=(VkSubresourceLayout*)malloc(sizeof(VkSubresourceLayout));
        result[0]=deserialize_struct(reader.getVkSubresourceLayout());
        return result;
    

    case PNext::VkImageViewCreateInfo:
        result=(VkImageViewCreateInfo*)malloc(sizeof(VkImageViewCreateInfo));
        result[0]=deserialize_struct(reader.getVkImageViewCreateInfo());
        return result;
    

    case PNext::VkBufferCopy:
        result=(VkBufferCopy*)malloc(sizeof(VkBufferCopy));
        result[0]=deserialize_struct(reader.getVkBufferCopy());
        return result;
    

    case PNext::VkSparseMemoryBind:
        result=(VkSparseMemoryBind*)malloc(sizeof(VkSparseMemoryBind));
        result[0]=deserialize_struct(reader.getVkSparseMemoryBind());
        return result;
    

    case PNext::VkSparseImageMemoryBind:
        result=(VkSparseImageMemoryBind*)malloc(sizeof(VkSparseImageMemoryBind));
        result[0]=deserialize_struct(reader.getVkSparseImageMemoryBind());
        return result;
    

    case PNext::VkSparseBufferMemoryBindInfo:
        result=(VkSparseBufferMemoryBindInfo*)malloc(sizeof(VkSparseBufferMemoryBindInfo));
        result[0]=deserialize_struct(reader.getVkSparseBufferMemoryBindInfo());
        return result;
    

    case PNext::VkSparseImageOpaqueMemoryBindInfo:
        result=(VkSparseImageOpaqueMemoryBindInfo*)malloc(sizeof(VkSparseImageOpaqueMemoryBindInfo));
        result[0]=deserialize_struct(reader.getVkSparseImageOpaqueMemoryBindInfo());
        return result;
    

    case PNext::VkSparseImageMemoryBindInfo:
        result=(VkSparseImageMemoryBindInfo*)malloc(sizeof(VkSparseImageMemoryBindInfo));
        result[0]=deserialize_struct(reader.getVkSparseImageMemoryBindInfo());
        return result;
    

    case PNext::VkBindSparseInfo:
        result=(VkBindSparseInfo*)malloc(sizeof(VkBindSparseInfo));
        result[0]=deserialize_struct(reader.getVkBindSparseInfo());
        return result;
    

    case PNext::VkImageCopy:
        result=(VkImageCopy*)malloc(sizeof(VkImageCopy));
        result[0]=deserialize_struct(reader.getVkImageCopy());
        return result;
    

    case PNext::VkImageBlit:
        result=(VkImageBlit*)malloc(sizeof(VkImageBlit));
        result[0]=deserialize_struct(reader.getVkImageBlit());
        return result;
    

    case PNext::VkBufferImageCopy:
        result=(VkBufferImageCopy*)malloc(sizeof(VkBufferImageCopy));
        result[0]=deserialize_struct(reader.getVkBufferImageCopy());
        return result;
    

    case PNext::VkCopyMemoryIndirectCommandNV:
        result=(VkCopyMemoryIndirectCommandNV*)malloc(sizeof(VkCopyMemoryIndirectCommandNV));
        result[0]=deserialize_struct(reader.getVkCopyMemoryIndirectCommandNV());
        return result;
    

    case PNext::VkCopyMemoryToImageIndirectCommandNV:
        result=(VkCopyMemoryToImageIndirectCommandNV*)malloc(sizeof(VkCopyMemoryToImageIndirectCommandNV));
        result[0]=deserialize_struct(reader.getVkCopyMemoryToImageIndirectCommandNV());
        return result;
    

    case PNext::VkImageResolve:
        result=(VkImageResolve*)malloc(sizeof(VkImageResolve));
        result[0]=deserialize_struct(reader.getVkImageResolve());
        return result;
    

    case PNext::VkShaderModuleCreateInfo:
        result=(VkShaderModuleCreateInfo*)malloc(sizeof(VkShaderModuleCreateInfo));
        result[0]=deserialize_struct(reader.getVkShaderModuleCreateInfo());
        return result;
    

    case PNext::VkDescriptorSetLayoutBinding:
        result=(VkDescriptorSetLayoutBinding*)malloc(sizeof(VkDescriptorSetLayoutBinding));
        result[0]=deserialize_struct(reader.getVkDescriptorSetLayoutBinding());
        return result;
    

    case PNext::VkDescriptorSetLayoutCreateInfo:
        result=(VkDescriptorSetLayoutCreateInfo*)malloc(sizeof(VkDescriptorSetLayoutCreateInfo));
        result[0]=deserialize_struct(reader.getVkDescriptorSetLayoutCreateInfo());
        return result;
    

    case PNext::VkDescriptorPoolSize:
        result=(VkDescriptorPoolSize*)malloc(sizeof(VkDescriptorPoolSize));
        result[0]=deserialize_struct(reader.getVkDescriptorPoolSize());
        return result;
    

    case PNext::VkDescriptorPoolCreateInfo:
        result=(VkDescriptorPoolCreateInfo*)malloc(sizeof(VkDescriptorPoolCreateInfo));
        result[0]=deserialize_struct(reader.getVkDescriptorPoolCreateInfo());
        return result;
    

    case PNext::VkDescriptorSetAllocateInfo:
        result=(VkDescriptorSetAllocateInfo*)malloc(sizeof(VkDescriptorSetAllocateInfo));
        result[0]=deserialize_struct(reader.getVkDescriptorSetAllocateInfo());
        return result;
    

    case PNext::VkSpecializationMapEntry:
        result=(VkSpecializationMapEntry*)malloc(sizeof(VkSpecializationMapEntry));
        result[0]=deserialize_struct(reader.getVkSpecializationMapEntry());
        return result;
    

    case PNext::VkSpecializationInfo:
        result=(VkSpecializationInfo*)malloc(sizeof(VkSpecializationInfo));
        result[0]=deserialize_struct(reader.getVkSpecializationInfo());
        return result;
    

    case PNext::VkPipelineShaderStageCreateInfo:
        result=(VkPipelineShaderStageCreateInfo*)malloc(sizeof(VkPipelineShaderStageCreateInfo));
        result[0]=deserialize_struct(reader.getVkPipelineShaderStageCreateInfo());
        return result;
    

    case PNext::VkComputePipelineCreateInfo:
        result=(VkComputePipelineCreateInfo*)malloc(sizeof(VkComputePipelineCreateInfo));
        result[0]=deserialize_struct(reader.getVkComputePipelineCreateInfo());
        return result;
    

    case PNext::VkComputePipelineIndirectBufferInfoNV:
        result=(VkComputePipelineIndirectBufferInfoNV*)malloc(sizeof(VkComputePipelineIndirectBufferInfoNV));
        result[0]=deserialize_struct(reader.getVkComputePipelineIndirectBufferInfoNV());
        return result;
    

    case PNext::VkPipelineCreateFlags2CreateInfoKHR:
        result=(VkPipelineCreateFlags2CreateInfoKHR*)malloc(sizeof(VkPipelineCreateFlags2CreateInfoKHR));
        result[0]=deserialize_struct(reader.getVkPipelineCreateFlags2CreateInfoKHR());
        return result;
    

    case PNext::VkVertexInputBindingDescription:
        result=(VkVertexInputBindingDescription*)malloc(sizeof(VkVertexInputBindingDescription));
        result[0]=deserialize_struct(reader.getVkVertexInputBindingDescription());
        return result;
    

    case PNext::VkVertexInputAttributeDescription:
        result=(VkVertexInputAttributeDescription*)malloc(sizeof(VkVertexInputAttributeDescription));
        result[0]=deserialize_struct(reader.getVkVertexInputAttributeDescription());
        return result;
    

    case PNext::VkPipelineVertexInputStateCreateInfo:
        result=(VkPipelineVertexInputStateCreateInfo*)malloc(sizeof(VkPipelineVertexInputStateCreateInfo));
        result[0]=deserialize_struct(reader.getVkPipelineVertexInputStateCreateInfo());
        return result;
    

    case PNext::VkPipelineInputAssemblyStateCreateInfo:
        result=(VkPipelineInputAssemblyStateCreateInfo*)malloc(sizeof(VkPipelineInputAssemblyStateCreateInfo));
        result[0]=deserialize_struct(reader.getVkPipelineInputAssemblyStateCreateInfo());
        return result;
    

    case PNext::VkPipelineTessellationStateCreateInfo:
        result=(VkPipelineTessellationStateCreateInfo*)malloc(sizeof(VkPipelineTessellationStateCreateInfo));
        result[0]=deserialize_struct(reader.getVkPipelineTessellationStateCreateInfo());
        return result;
    

    case PNext::VkPipelineViewportStateCreateInfo:
        result=(VkPipelineViewportStateCreateInfo*)malloc(sizeof(VkPipelineViewportStateCreateInfo));
        result[0]=deserialize_struct(reader.getVkPipelineViewportStateCreateInfo());
        return result;
    

    case PNext::VkPipelineRasterizationStateCreateInfo:
        result=(VkPipelineRasterizationStateCreateInfo*)malloc(sizeof(VkPipelineRasterizationStateCreateInfo));
        result[0]=deserialize_struct(reader.getVkPipelineRasterizationStateCreateInfo());
        return result;
    

    case PNext::VkPipelineMultisampleStateCreateInfo:
        result=(VkPipelineMultisampleStateCreateInfo*)malloc(sizeof(VkPipelineMultisampleStateCreateInfo));
        result[0]=deserialize_struct(reader.getVkPipelineMultisampleStateCreateInfo());
        return result;
    

    case PNext::VkPipelineColorBlendAttachmentState:
        result=(VkPipelineColorBlendAttachmentState*)malloc(sizeof(VkPipelineColorBlendAttachmentState));
        result[0]=deserialize_struct(reader.getVkPipelineColorBlendAttachmentState());
        return result;
    

    case PNext::VkPipelineColorBlendStateCreateInfo:
        result=(VkPipelineColorBlendStateCreateInfo*)malloc(sizeof(VkPipelineColorBlendStateCreateInfo));
        result[0]=deserialize_struct(reader.getVkPipelineColorBlendStateCreateInfo());
        return result;
    

    case PNext::VkPipelineDynamicStateCreateInfo:
        result=(VkPipelineDynamicStateCreateInfo*)malloc(sizeof(VkPipelineDynamicStateCreateInfo));
        result[0]=deserialize_struct(reader.getVkPipelineDynamicStateCreateInfo());
        return result;
    

    case PNext::VkStencilOpState:
        result=(VkStencilOpState*)malloc(sizeof(VkStencilOpState));
        result[0]=deserialize_struct(reader.getVkStencilOpState());
        return result;
    

    case PNext::VkPipelineDepthStencilStateCreateInfo:
        result=(VkPipelineDepthStencilStateCreateInfo*)malloc(sizeof(VkPipelineDepthStencilStateCreateInfo));
        result[0]=deserialize_struct(reader.getVkPipelineDepthStencilStateCreateInfo());
        return result;
    

    case PNext::VkGraphicsPipelineCreateInfo:
        result=(VkGraphicsPipelineCreateInfo*)malloc(sizeof(VkGraphicsPipelineCreateInfo));
        result[0]=deserialize_struct(reader.getVkGraphicsPipelineCreateInfo());
        return result;
    

    case PNext::VkPipelineCacheCreateInfo:
        result=(VkPipelineCacheCreateInfo*)malloc(sizeof(VkPipelineCacheCreateInfo));
        result[0]=deserialize_struct(reader.getVkPipelineCacheCreateInfo());
        return result;
    

    case PNext::VkPipelineCacheHeaderVersionOne:
        result=(VkPipelineCacheHeaderVersionOne*)malloc(sizeof(VkPipelineCacheHeaderVersionOne));
        result[0]=deserialize_struct(reader.getVkPipelineCacheHeaderVersionOne());
        return result;
    

    case PNext::VkPushConstantRange:
        result=(VkPushConstantRange*)malloc(sizeof(VkPushConstantRange));
        result[0]=deserialize_struct(reader.getVkPushConstantRange());
        return result;
    

    case PNext::VkPipelineLayoutCreateInfo:
        result=(VkPipelineLayoutCreateInfo*)malloc(sizeof(VkPipelineLayoutCreateInfo));
        result[0]=deserialize_struct(reader.getVkPipelineLayoutCreateInfo());
        return result;
    

    case PNext::VkSamplerCreateInfo:
        result=(VkSamplerCreateInfo*)malloc(sizeof(VkSamplerCreateInfo));
        result[0]=deserialize_struct(reader.getVkSamplerCreateInfo());
        return result;
    

    case PNext::VkCommandPoolCreateInfo:
        result=(VkCommandPoolCreateInfo*)malloc(sizeof(VkCommandPoolCreateInfo));
        result[0]=deserialize_struct(reader.getVkCommandPoolCreateInfo());
        return result;
    

    case PNext::VkCommandBufferAllocateInfo:
        result=(VkCommandBufferAllocateInfo*)malloc(sizeof(VkCommandBufferAllocateInfo));
        result[0]=deserialize_struct(reader.getVkCommandBufferAllocateInfo());
        return result;
    

    case PNext::VkCommandBufferInheritanceInfo:
        result=(VkCommandBufferInheritanceInfo*)malloc(sizeof(VkCommandBufferInheritanceInfo));
        result[0]=deserialize_struct(reader.getVkCommandBufferInheritanceInfo());
        return result;
    

    case PNext::VkCommandBufferBeginInfo:
        result=(VkCommandBufferBeginInfo*)malloc(sizeof(VkCommandBufferBeginInfo));
        result[0]=deserialize_struct(reader.getVkCommandBufferBeginInfo());
        return result;
    

    case PNext::VkRenderPassBeginInfo:
        result=(VkRenderPassBeginInfo*)malloc(sizeof(VkRenderPassBeginInfo));
        result[0]=deserialize_struct(reader.getVkRenderPassBeginInfo());
        return result;
    

    case PNext::VkClearColorValue:
        result=(VkClearColorValue*)malloc(sizeof(VkClearColorValue));
        result[0]=deserialize_struct(reader.getVkClearColorValue());
        return result;
    

    case PNext::VkClearDepthStencilValue:
        result=(VkClearDepthStencilValue*)malloc(sizeof(VkClearDepthStencilValue));
        result[0]=deserialize_struct(reader.getVkClearDepthStencilValue());
        return result;
    

    case PNext::VkClearValue:
        result=(VkClearValue*)malloc(sizeof(VkClearValue));
        result[0]=deserialize_struct(reader.getVkClearValue());
        return result;
    

    case PNext::VkClearAttachment:
        result=(VkClearAttachment*)malloc(sizeof(VkClearAttachment));
        result[0]=deserialize_struct(reader.getVkClearAttachment());
        return result;
    

    case PNext::VkAttachmentDescription:
        result=(VkAttachmentDescription*)malloc(sizeof(VkAttachmentDescription));
        result[0]=deserialize_struct(reader.getVkAttachmentDescription());
        return result;
    

    case PNext::VkAttachmentReference:
        result=(VkAttachmentReference*)malloc(sizeof(VkAttachmentReference));
        result[0]=deserialize_struct(reader.getVkAttachmentReference());
        return result;
    

    case PNext::VkSubpassDescription:
        result=(VkSubpassDescription*)malloc(sizeof(VkSubpassDescription));
        result[0]=deserialize_struct(reader.getVkSubpassDescription());
        return result;
    

    case PNext::VkSubpassDependency:
        result=(VkSubpassDependency*)malloc(sizeof(VkSubpassDependency));
        result[0]=deserialize_struct(reader.getVkSubpassDependency());
        return result;
    

    case PNext::VkRenderPassCreateInfo:
        result=(VkRenderPassCreateInfo*)malloc(sizeof(VkRenderPassCreateInfo));
        result[0]=deserialize_struct(reader.getVkRenderPassCreateInfo());
        return result;
    

    case PNext::VkEventCreateInfo:
        result=(VkEventCreateInfo*)malloc(sizeof(VkEventCreateInfo));
        result[0]=deserialize_struct(reader.getVkEventCreateInfo());
        return result;
    

    case PNext::VkFenceCreateInfo:
        result=(VkFenceCreateInfo*)malloc(sizeof(VkFenceCreateInfo));
        result[0]=deserialize_struct(reader.getVkFenceCreateInfo());
        return result;
    

    case PNext::VkPhysicalDeviceFeatures:
        result=(VkPhysicalDeviceFeatures*)malloc(sizeof(VkPhysicalDeviceFeatures));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceFeatures());
        return result;
    

    case PNext::VkPhysicalDeviceSparseProperties:
        result=(VkPhysicalDeviceSparseProperties*)malloc(sizeof(VkPhysicalDeviceSparseProperties));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceSparseProperties());
        return result;
    

    case PNext::VkPhysicalDeviceLimits:
        result=(VkPhysicalDeviceLimits*)malloc(sizeof(VkPhysicalDeviceLimits));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceLimits());
        return result;
    

    case PNext::VkSemaphoreCreateInfo:
        result=(VkSemaphoreCreateInfo*)malloc(sizeof(VkSemaphoreCreateInfo));
        result[0]=deserialize_struct(reader.getVkSemaphoreCreateInfo());
        return result;
    

    case PNext::VkQueryPoolCreateInfo:
        result=(VkQueryPoolCreateInfo*)malloc(sizeof(VkQueryPoolCreateInfo));
        result[0]=deserialize_struct(reader.getVkQueryPoolCreateInfo());
        return result;
    

    case PNext::VkFramebufferCreateInfo:
        result=(VkFramebufferCreateInfo*)malloc(sizeof(VkFramebufferCreateInfo));
        result[0]=deserialize_struct(reader.getVkFramebufferCreateInfo());
        return result;
    

    case PNext::VkDrawIndirectCommand:
        result=(VkDrawIndirectCommand*)malloc(sizeof(VkDrawIndirectCommand));
        result[0]=deserialize_struct(reader.getVkDrawIndirectCommand());
        return result;
    

    case PNext::VkDrawIndexedIndirectCommand:
        result=(VkDrawIndexedIndirectCommand*)malloc(sizeof(VkDrawIndexedIndirectCommand));
        result[0]=deserialize_struct(reader.getVkDrawIndexedIndirectCommand());
        return result;
    

    case PNext::VkDispatchIndirectCommand:
        result=(VkDispatchIndirectCommand*)malloc(sizeof(VkDispatchIndirectCommand));
        result[0]=deserialize_struct(reader.getVkDispatchIndirectCommand());
        return result;
    

    case PNext::VkMultiDrawInfoEXT:
        result=(VkMultiDrawInfoEXT*)malloc(sizeof(VkMultiDrawInfoEXT));
        result[0]=deserialize_struct(reader.getVkMultiDrawInfoEXT());
        return result;
    

    case PNext::VkMultiDrawIndexedInfoEXT:
        result=(VkMultiDrawIndexedInfoEXT*)malloc(sizeof(VkMultiDrawIndexedInfoEXT));
        result[0]=deserialize_struct(reader.getVkMultiDrawIndexedInfoEXT());
        return result;
    

    case PNext::VkSubmitInfo:
        result=(VkSubmitInfo*)malloc(sizeof(VkSubmitInfo));
        result[0]=deserialize_struct(reader.getVkSubmitInfo());
        return result;
    

    case PNext::VkDisplayPropertiesKHR:
        result=(VkDisplayPropertiesKHR*)malloc(sizeof(VkDisplayPropertiesKHR));
        result[0]=deserialize_struct(reader.getVkDisplayPropertiesKHR());
        return result;
    

    case PNext::VkDisplayPlanePropertiesKHR:
        result=(VkDisplayPlanePropertiesKHR*)malloc(sizeof(VkDisplayPlanePropertiesKHR));
        result[0]=deserialize_struct(reader.getVkDisplayPlanePropertiesKHR());
        return result;
    

    case PNext::VkDisplayModeParametersKHR:
        result=(VkDisplayModeParametersKHR*)malloc(sizeof(VkDisplayModeParametersKHR));
        result[0]=deserialize_struct(reader.getVkDisplayModeParametersKHR());
        return result;
    

    case PNext::VkDisplayModePropertiesKHR:
        result=(VkDisplayModePropertiesKHR*)malloc(sizeof(VkDisplayModePropertiesKHR));
        result[0]=deserialize_struct(reader.getVkDisplayModePropertiesKHR());
        return result;
    

    case PNext::VkDisplayModeCreateInfoKHR:
        result=(VkDisplayModeCreateInfoKHR*)malloc(sizeof(VkDisplayModeCreateInfoKHR));
        result[0]=deserialize_struct(reader.getVkDisplayModeCreateInfoKHR());
        return result;
    

    case PNext::VkDisplayPlaneCapabilitiesKHR:
        result=(VkDisplayPlaneCapabilitiesKHR*)malloc(sizeof(VkDisplayPlaneCapabilitiesKHR));
        result[0]=deserialize_struct(reader.getVkDisplayPlaneCapabilitiesKHR());
        return result;
    

    case PNext::VkDisplaySurfaceCreateInfoKHR:
        result=(VkDisplaySurfaceCreateInfoKHR*)malloc(sizeof(VkDisplaySurfaceCreateInfoKHR));
        result[0]=deserialize_struct(reader.getVkDisplaySurfaceCreateInfoKHR());
        return result;
    

    case PNext::VkDisplayPresentInfoKHR:
        result=(VkDisplayPresentInfoKHR*)malloc(sizeof(VkDisplayPresentInfoKHR));
        result[0]=deserialize_struct(reader.getVkDisplayPresentInfoKHR());
        return result;
    

    case PNext::VkSurfaceCapabilitiesKHR:
        result=(VkSurfaceCapabilitiesKHR*)malloc(sizeof(VkSurfaceCapabilitiesKHR));
        result[0]=deserialize_struct(reader.getVkSurfaceCapabilitiesKHR());
        return result;
    

    case PNext::VkXlibSurfaceCreateInfoKHR:
        result=(VkXlibSurfaceCreateInfoKHR*)malloc(sizeof(VkXlibSurfaceCreateInfoKHR));
        result[0]=deserialize_struct(reader.getVkXlibSurfaceCreateInfoKHR());
        return result;
    

    case PNext::VkXcbSurfaceCreateInfoKHR:
        result=(VkXcbSurfaceCreateInfoKHR*)malloc(sizeof(VkXcbSurfaceCreateInfoKHR));
        result[0]=deserialize_struct(reader.getVkXcbSurfaceCreateInfoKHR());
        return result;
    

    case PNext::VkSurfaceFormatKHR:
        result=(VkSurfaceFormatKHR*)malloc(sizeof(VkSurfaceFormatKHR));
        result[0]=deserialize_struct(reader.getVkSurfaceFormatKHR());
        return result;
    

    case PNext::VkSwapchainCreateInfoKHR:
        result=(VkSwapchainCreateInfoKHR*)malloc(sizeof(VkSwapchainCreateInfoKHR));
        result[0]=deserialize_struct(reader.getVkSwapchainCreateInfoKHR());
        return result;
    

    case PNext::VkPresentInfoKHR:
        result=(VkPresentInfoKHR*)malloc(sizeof(VkPresentInfoKHR));
        result[0]=deserialize_struct(reader.getVkPresentInfoKHR());
        return result;
    

    case PNext::VkDebugReportCallbackCreateInfoEXT:
        result=(VkDebugReportCallbackCreateInfoEXT*)malloc(sizeof(VkDebugReportCallbackCreateInfoEXT));
        result[0]=deserialize_struct(reader.getVkDebugReportCallbackCreateInfoEXT());
        return result;
    

    case PNext::VkValidationFlagsEXT:
        result=(VkValidationFlagsEXT*)malloc(sizeof(VkValidationFlagsEXT));
        result[0]=deserialize_struct(reader.getVkValidationFlagsEXT());
        return result;
    

    case PNext::VkValidationFeaturesEXT:
        result=(VkValidationFeaturesEXT*)malloc(sizeof(VkValidationFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkValidationFeaturesEXT());
        return result;
    

    case PNext::VkPipelineRasterizationStateRasterizationOrderAMD:
        result=(VkPipelineRasterizationStateRasterizationOrderAMD*)malloc(sizeof(VkPipelineRasterizationStateRasterizationOrderAMD));
        result[0]=deserialize_struct(reader.getVkPipelineRasterizationStateRasterizationOrderAMD());
        return result;
    

    case PNext::VkDebugMarkerObjectNameInfoEXT:
        result=(VkDebugMarkerObjectNameInfoEXT*)malloc(sizeof(VkDebugMarkerObjectNameInfoEXT));
        result[0]=deserialize_struct(reader.getVkDebugMarkerObjectNameInfoEXT());
        return result;
    

    case PNext::VkDebugMarkerObjectTagInfoEXT:
        result=(VkDebugMarkerObjectTagInfoEXT*)malloc(sizeof(VkDebugMarkerObjectTagInfoEXT));
        result[0]=deserialize_struct(reader.getVkDebugMarkerObjectTagInfoEXT());
        return result;
    

    case PNext::VkDebugMarkerMarkerInfoEXT:
        result=(VkDebugMarkerMarkerInfoEXT*)malloc(sizeof(VkDebugMarkerMarkerInfoEXT));
        result[0]=deserialize_struct(reader.getVkDebugMarkerMarkerInfoEXT());
        return result;
    

    case PNext::VkDedicatedAllocationImageCreateInfoNV:
        result=(VkDedicatedAllocationImageCreateInfoNV*)malloc(sizeof(VkDedicatedAllocationImageCreateInfoNV));
        result[0]=deserialize_struct(reader.getVkDedicatedAllocationImageCreateInfoNV());
        return result;
    

    case PNext::VkDedicatedAllocationBufferCreateInfoNV:
        result=(VkDedicatedAllocationBufferCreateInfoNV*)malloc(sizeof(VkDedicatedAllocationBufferCreateInfoNV));
        result[0]=deserialize_struct(reader.getVkDedicatedAllocationBufferCreateInfoNV());
        return result;
    

    case PNext::VkDedicatedAllocationMemoryAllocateInfoNV:
        result=(VkDedicatedAllocationMemoryAllocateInfoNV*)malloc(sizeof(VkDedicatedAllocationMemoryAllocateInfoNV));
        result[0]=deserialize_struct(reader.getVkDedicatedAllocationMemoryAllocateInfoNV());
        return result;
    

    case PNext::VkExternalImageFormatPropertiesNV:
        result=(VkExternalImageFormatPropertiesNV*)malloc(sizeof(VkExternalImageFormatPropertiesNV));
        result[0]=deserialize_struct(reader.getVkExternalImageFormatPropertiesNV());
        return result;
    

    case PNext::VkExternalMemoryImageCreateInfoNV:
        result=(VkExternalMemoryImageCreateInfoNV*)malloc(sizeof(VkExternalMemoryImageCreateInfoNV));
        result[0]=deserialize_struct(reader.getVkExternalMemoryImageCreateInfoNV());
        return result;
    

    case PNext::VkExportMemoryAllocateInfoNV:
        result=(VkExportMemoryAllocateInfoNV*)malloc(sizeof(VkExportMemoryAllocateInfoNV));
        result[0]=deserialize_struct(reader.getVkExportMemoryAllocateInfoNV());
        return result;
    

    case PNext::VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV:
        result=(VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV*)malloc(sizeof(VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV());
        return result;
    

    case PNext::VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV:
        result=(VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV*)malloc(sizeof(VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV());
        return result;
    

    case PNext::VkDevicePrivateDataCreateInfo:
        result=(VkDevicePrivateDataCreateInfo*)malloc(sizeof(VkDevicePrivateDataCreateInfo));
        result[0]=deserialize_struct(reader.getVkDevicePrivateDataCreateInfo());
        return result;
    

    case PNext::VkPrivateDataSlotCreateInfo:
        result=(VkPrivateDataSlotCreateInfo*)malloc(sizeof(VkPrivateDataSlotCreateInfo));
        result[0]=deserialize_struct(reader.getVkPrivateDataSlotCreateInfo());
        return result;
    

    case PNext::VkPhysicalDevicePrivateDataFeatures:
        result=(VkPhysicalDevicePrivateDataFeatures*)malloc(sizeof(VkPhysicalDevicePrivateDataFeatures));
        result[0]=deserialize_struct(reader.getVkPhysicalDevicePrivateDataFeatures());
        return result;
    

    case PNext::VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV:
        result=(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV*)malloc(sizeof(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV());
        return result;
    

    case PNext::VkPhysicalDeviceMultiDrawPropertiesEXT:
        result=(VkPhysicalDeviceMultiDrawPropertiesEXT*)malloc(sizeof(VkPhysicalDeviceMultiDrawPropertiesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceMultiDrawPropertiesEXT());
        return result;
    

    case PNext::VkGraphicsShaderGroupCreateInfoNV:
        result=(VkGraphicsShaderGroupCreateInfoNV*)malloc(sizeof(VkGraphicsShaderGroupCreateInfoNV));
        result[0]=deserialize_struct(reader.getVkGraphicsShaderGroupCreateInfoNV());
        return result;
    

    case PNext::VkGraphicsPipelineShaderGroupsCreateInfoNV:
        result=(VkGraphicsPipelineShaderGroupsCreateInfoNV*)malloc(sizeof(VkGraphicsPipelineShaderGroupsCreateInfoNV));
        result[0]=deserialize_struct(reader.getVkGraphicsPipelineShaderGroupsCreateInfoNV());
        return result;
    

    case PNext::VkBindShaderGroupIndirectCommandNV:
        result=(VkBindShaderGroupIndirectCommandNV*)malloc(sizeof(VkBindShaderGroupIndirectCommandNV));
        result[0]=deserialize_struct(reader.getVkBindShaderGroupIndirectCommandNV());
        return result;
    

    case PNext::VkBindIndexBufferIndirectCommandNV:
        result=(VkBindIndexBufferIndirectCommandNV*)malloc(sizeof(VkBindIndexBufferIndirectCommandNV));
        result[0]=deserialize_struct(reader.getVkBindIndexBufferIndirectCommandNV());
        return result;
    

    case PNext::VkBindVertexBufferIndirectCommandNV:
        result=(VkBindVertexBufferIndirectCommandNV*)malloc(sizeof(VkBindVertexBufferIndirectCommandNV));
        result[0]=deserialize_struct(reader.getVkBindVertexBufferIndirectCommandNV());
        return result;
    

    case PNext::VkSetStateFlagsIndirectCommandNV:
        result=(VkSetStateFlagsIndirectCommandNV*)malloc(sizeof(VkSetStateFlagsIndirectCommandNV));
        result[0]=deserialize_struct(reader.getVkSetStateFlagsIndirectCommandNV());
        return result;
    

    case PNext::VkIndirectCommandsStreamNV:
        result=(VkIndirectCommandsStreamNV*)malloc(sizeof(VkIndirectCommandsStreamNV));
        result[0]=deserialize_struct(reader.getVkIndirectCommandsStreamNV());
        return result;
    

    case PNext::VkIndirectCommandsLayoutTokenNV:
        result=(VkIndirectCommandsLayoutTokenNV*)malloc(sizeof(VkIndirectCommandsLayoutTokenNV));
        result[0]=deserialize_struct(reader.getVkIndirectCommandsLayoutTokenNV());
        return result;
    

    case PNext::VkIndirectCommandsLayoutCreateInfoNV:
        result=(VkIndirectCommandsLayoutCreateInfoNV*)malloc(sizeof(VkIndirectCommandsLayoutCreateInfoNV));
        result[0]=deserialize_struct(reader.getVkIndirectCommandsLayoutCreateInfoNV());
        return result;
    

    case PNext::VkGeneratedCommandsInfoNV:
        result=(VkGeneratedCommandsInfoNV*)malloc(sizeof(VkGeneratedCommandsInfoNV));
        result[0]=deserialize_struct(reader.getVkGeneratedCommandsInfoNV());
        return result;
    

    case PNext::VkGeneratedCommandsMemoryRequirementsInfoNV:
        result=(VkGeneratedCommandsMemoryRequirementsInfoNV*)malloc(sizeof(VkGeneratedCommandsMemoryRequirementsInfoNV));
        result[0]=deserialize_struct(reader.getVkGeneratedCommandsMemoryRequirementsInfoNV());
        return result;
    

    case PNext::VkPipelineIndirectDeviceAddressInfoNV:
        result=(VkPipelineIndirectDeviceAddressInfoNV*)malloc(sizeof(VkPipelineIndirectDeviceAddressInfoNV));
        result[0]=deserialize_struct(reader.getVkPipelineIndirectDeviceAddressInfoNV());
        return result;
    

    case PNext::VkBindPipelineIndirectCommandNV:
        result=(VkBindPipelineIndirectCommandNV*)malloc(sizeof(VkBindPipelineIndirectCommandNV));
        result[0]=deserialize_struct(reader.getVkBindPipelineIndirectCommandNV());
        return result;
    

    case PNext::VkPhysicalDeviceFeatures2:
        result=(VkPhysicalDeviceFeatures2*)malloc(sizeof(VkPhysicalDeviceFeatures2));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceFeatures2());
        return result;
    

    case PNext::VkPhysicalDeviceProperties2:
        result=(VkPhysicalDeviceProperties2*)malloc(sizeof(VkPhysicalDeviceProperties2));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceProperties2());
        return result;
    

    case PNext::VkFormatProperties2:
        result=(VkFormatProperties2*)malloc(sizeof(VkFormatProperties2));
        result[0]=deserialize_struct(reader.getVkFormatProperties2());
        return result;
    

    case PNext::VkImageFormatProperties2:
        result=(VkImageFormatProperties2*)malloc(sizeof(VkImageFormatProperties2));
        result[0]=deserialize_struct(reader.getVkImageFormatProperties2());
        return result;
    

    case PNext::VkPhysicalDeviceImageFormatInfo2:
        result=(VkPhysicalDeviceImageFormatInfo2*)malloc(sizeof(VkPhysicalDeviceImageFormatInfo2));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceImageFormatInfo2());
        return result;
    

    case PNext::VkQueueFamilyProperties2:
        result=(VkQueueFamilyProperties2*)malloc(sizeof(VkQueueFamilyProperties2));
        result[0]=deserialize_struct(reader.getVkQueueFamilyProperties2());
        return result;
    

    case PNext::VkPhysicalDeviceMemoryProperties2:
        result=(VkPhysicalDeviceMemoryProperties2*)malloc(sizeof(VkPhysicalDeviceMemoryProperties2));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceMemoryProperties2());
        return result;
    

    case PNext::VkSparseImageFormatProperties2:
        result=(VkSparseImageFormatProperties2*)malloc(sizeof(VkSparseImageFormatProperties2));
        result[0]=deserialize_struct(reader.getVkSparseImageFormatProperties2());
        return result;
    

    case PNext::VkPhysicalDeviceSparseImageFormatInfo2:
        result=(VkPhysicalDeviceSparseImageFormatInfo2*)malloc(sizeof(VkPhysicalDeviceSparseImageFormatInfo2));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceSparseImageFormatInfo2());
        return result;
    

    case PNext::VkPhysicalDevicePushDescriptorPropertiesKHR:
        result=(VkPhysicalDevicePushDescriptorPropertiesKHR*)malloc(sizeof(VkPhysicalDevicePushDescriptorPropertiesKHR));
        result[0]=deserialize_struct(reader.getVkPhysicalDevicePushDescriptorPropertiesKHR());
        return result;
    

    case PNext::VkConformanceVersion:
        result=(VkConformanceVersion*)malloc(sizeof(VkConformanceVersion));
        result[0]=deserialize_struct(reader.getVkConformanceVersion());
        return result;
    

    case PNext::VkPhysicalDeviceDriverProperties:
        result=(VkPhysicalDeviceDriverProperties*)malloc(sizeof(VkPhysicalDeviceDriverProperties));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceDriverProperties());
        return result;
    

    case PNext::VkPresentRegionsKHR:
        result=(VkPresentRegionsKHR*)malloc(sizeof(VkPresentRegionsKHR));
        result[0]=deserialize_struct(reader.getVkPresentRegionsKHR());
        return result;
    

    case PNext::VkPresentRegionKHR:
        result=(VkPresentRegionKHR*)malloc(sizeof(VkPresentRegionKHR));
        result[0]=deserialize_struct(reader.getVkPresentRegionKHR());
        return result;
    

    case PNext::VkRectLayerKHR:
        result=(VkRectLayerKHR*)malloc(sizeof(VkRectLayerKHR));
        result[0]=deserialize_struct(reader.getVkRectLayerKHR());
        return result;
    

    case PNext::VkPhysicalDeviceVariablePointersFeatures:
        result=(VkPhysicalDeviceVariablePointersFeatures*)malloc(sizeof(VkPhysicalDeviceVariablePointersFeatures));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceVariablePointersFeatures());
        return result;
    

    case PNext::VkExternalMemoryProperties:
        result=(VkExternalMemoryProperties*)malloc(sizeof(VkExternalMemoryProperties));
        result[0]=deserialize_struct(reader.getVkExternalMemoryProperties());
        return result;
    

    case PNext::VkPhysicalDeviceExternalImageFormatInfo:
        result=(VkPhysicalDeviceExternalImageFormatInfo*)malloc(sizeof(VkPhysicalDeviceExternalImageFormatInfo));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceExternalImageFormatInfo());
        return result;
    

    case PNext::VkExternalImageFormatProperties:
        result=(VkExternalImageFormatProperties*)malloc(sizeof(VkExternalImageFormatProperties));
        result[0]=deserialize_struct(reader.getVkExternalImageFormatProperties());
        return result;
    

    case PNext::VkPhysicalDeviceExternalBufferInfo:
        result=(VkPhysicalDeviceExternalBufferInfo*)malloc(sizeof(VkPhysicalDeviceExternalBufferInfo));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceExternalBufferInfo());
        return result;
    

    case PNext::VkExternalBufferProperties:
        result=(VkExternalBufferProperties*)malloc(sizeof(VkExternalBufferProperties));
        result[0]=deserialize_struct(reader.getVkExternalBufferProperties());
        return result;
    

    case PNext::VkPhysicalDeviceIDProperties:
        result=(VkPhysicalDeviceIDProperties*)malloc(sizeof(VkPhysicalDeviceIDProperties));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceIDProperties());
        return result;
    

    case PNext::VkExternalMemoryImageCreateInfo:
        result=(VkExternalMemoryImageCreateInfo*)malloc(sizeof(VkExternalMemoryImageCreateInfo));
        result[0]=deserialize_struct(reader.getVkExternalMemoryImageCreateInfo());
        return result;
    

    case PNext::VkExternalMemoryBufferCreateInfo:
        result=(VkExternalMemoryBufferCreateInfo*)malloc(sizeof(VkExternalMemoryBufferCreateInfo));
        result[0]=deserialize_struct(reader.getVkExternalMemoryBufferCreateInfo());
        return result;
    

    case PNext::VkExportMemoryAllocateInfo:
        result=(VkExportMemoryAllocateInfo*)malloc(sizeof(VkExportMemoryAllocateInfo));
        result[0]=deserialize_struct(reader.getVkExportMemoryAllocateInfo());
        return result;
    

    case PNext::VkImportMemoryFdInfoKHR:
        result=(VkImportMemoryFdInfoKHR*)malloc(sizeof(VkImportMemoryFdInfoKHR));
        result[0]=deserialize_struct(reader.getVkImportMemoryFdInfoKHR());
        return result;
    

    case PNext::VkMemoryFdPropertiesKHR:
        result=(VkMemoryFdPropertiesKHR*)malloc(sizeof(VkMemoryFdPropertiesKHR));
        result[0]=deserialize_struct(reader.getVkMemoryFdPropertiesKHR());
        return result;
    

    case PNext::VkMemoryGetFdInfoKHR:
        result=(VkMemoryGetFdInfoKHR*)malloc(sizeof(VkMemoryGetFdInfoKHR));
        result[0]=deserialize_struct(reader.getVkMemoryGetFdInfoKHR());
        return result;
    

    case PNext::VkPhysicalDeviceExternalSemaphoreInfo:
        result=(VkPhysicalDeviceExternalSemaphoreInfo*)malloc(sizeof(VkPhysicalDeviceExternalSemaphoreInfo));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceExternalSemaphoreInfo());
        return result;
    

    case PNext::VkExternalSemaphoreProperties:
        result=(VkExternalSemaphoreProperties*)malloc(sizeof(VkExternalSemaphoreProperties));
        result[0]=deserialize_struct(reader.getVkExternalSemaphoreProperties());
        return result;
    

    case PNext::VkExportSemaphoreCreateInfo:
        result=(VkExportSemaphoreCreateInfo*)malloc(sizeof(VkExportSemaphoreCreateInfo));
        result[0]=deserialize_struct(reader.getVkExportSemaphoreCreateInfo());
        return result;
    

    case PNext::VkImportSemaphoreFdInfoKHR:
        result=(VkImportSemaphoreFdInfoKHR*)malloc(sizeof(VkImportSemaphoreFdInfoKHR));
        result[0]=deserialize_struct(reader.getVkImportSemaphoreFdInfoKHR());
        return result;
    

    case PNext::VkSemaphoreGetFdInfoKHR:
        result=(VkSemaphoreGetFdInfoKHR*)malloc(sizeof(VkSemaphoreGetFdInfoKHR));
        result[0]=deserialize_struct(reader.getVkSemaphoreGetFdInfoKHR());
        return result;
    

    case PNext::VkPhysicalDeviceExternalFenceInfo:
        result=(VkPhysicalDeviceExternalFenceInfo*)malloc(sizeof(VkPhysicalDeviceExternalFenceInfo));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceExternalFenceInfo());
        return result;
    

    case PNext::VkExternalFenceProperties:
        result=(VkExternalFenceProperties*)malloc(sizeof(VkExternalFenceProperties));
        result[0]=deserialize_struct(reader.getVkExternalFenceProperties());
        return result;
    

    case PNext::VkExportFenceCreateInfo:
        result=(VkExportFenceCreateInfo*)malloc(sizeof(VkExportFenceCreateInfo));
        result[0]=deserialize_struct(reader.getVkExportFenceCreateInfo());
        return result;
    

    case PNext::VkImportFenceFdInfoKHR:
        result=(VkImportFenceFdInfoKHR*)malloc(sizeof(VkImportFenceFdInfoKHR));
        result[0]=deserialize_struct(reader.getVkImportFenceFdInfoKHR());
        return result;
    

    case PNext::VkFenceGetFdInfoKHR:
        result=(VkFenceGetFdInfoKHR*)malloc(sizeof(VkFenceGetFdInfoKHR));
        result[0]=deserialize_struct(reader.getVkFenceGetFdInfoKHR());
        return result;
    

    case PNext::VkPhysicalDeviceMultiviewFeatures:
        result=(VkPhysicalDeviceMultiviewFeatures*)malloc(sizeof(VkPhysicalDeviceMultiviewFeatures));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceMultiviewFeatures());
        return result;
    

    case PNext::VkPhysicalDeviceMultiviewProperties:
        result=(VkPhysicalDeviceMultiviewProperties*)malloc(sizeof(VkPhysicalDeviceMultiviewProperties));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceMultiviewProperties());
        return result;
    

    case PNext::VkRenderPassMultiviewCreateInfo:
        result=(VkRenderPassMultiviewCreateInfo*)malloc(sizeof(VkRenderPassMultiviewCreateInfo));
        result[0]=deserialize_struct(reader.getVkRenderPassMultiviewCreateInfo());
        return result;
    

    case PNext::VkSurfaceCapabilities2EXT:
        result=(VkSurfaceCapabilities2EXT*)malloc(sizeof(VkSurfaceCapabilities2EXT));
        result[0]=deserialize_struct(reader.getVkSurfaceCapabilities2EXT());
        return result;
    

    case PNext::VkDisplayPowerInfoEXT:
        result=(VkDisplayPowerInfoEXT*)malloc(sizeof(VkDisplayPowerInfoEXT));
        result[0]=deserialize_struct(reader.getVkDisplayPowerInfoEXT());
        return result;
    

    case PNext::VkDeviceEventInfoEXT:
        result=(VkDeviceEventInfoEXT*)malloc(sizeof(VkDeviceEventInfoEXT));
        result[0]=deserialize_struct(reader.getVkDeviceEventInfoEXT());
        return result;
    

    case PNext::VkDisplayEventInfoEXT:
        result=(VkDisplayEventInfoEXT*)malloc(sizeof(VkDisplayEventInfoEXT));
        result[0]=deserialize_struct(reader.getVkDisplayEventInfoEXT());
        return result;
    

    case PNext::VkSwapchainCounterCreateInfoEXT:
        result=(VkSwapchainCounterCreateInfoEXT*)malloc(sizeof(VkSwapchainCounterCreateInfoEXT));
        result[0]=deserialize_struct(reader.getVkSwapchainCounterCreateInfoEXT());
        return result;
    

    case PNext::VkPhysicalDeviceGroupProperties:
        result=(VkPhysicalDeviceGroupProperties*)malloc(sizeof(VkPhysicalDeviceGroupProperties));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceGroupProperties());
        return result;
    

    case PNext::VkMemoryAllocateFlagsInfo:
        result=(VkMemoryAllocateFlagsInfo*)malloc(sizeof(VkMemoryAllocateFlagsInfo));
        result[0]=deserialize_struct(reader.getVkMemoryAllocateFlagsInfo());
        return result;
    

    case PNext::VkBindBufferMemoryInfo:
        result=(VkBindBufferMemoryInfo*)malloc(sizeof(VkBindBufferMemoryInfo));
        result[0]=deserialize_struct(reader.getVkBindBufferMemoryInfo());
        return result;
    

    case PNext::VkBindBufferMemoryDeviceGroupInfo:
        result=(VkBindBufferMemoryDeviceGroupInfo*)malloc(sizeof(VkBindBufferMemoryDeviceGroupInfo));
        result[0]=deserialize_struct(reader.getVkBindBufferMemoryDeviceGroupInfo());
        return result;
    

    case PNext::VkBindImageMemoryInfo:
        result=(VkBindImageMemoryInfo*)malloc(sizeof(VkBindImageMemoryInfo));
        result[0]=deserialize_struct(reader.getVkBindImageMemoryInfo());
        return result;
    

    case PNext::VkBindImageMemoryDeviceGroupInfo:
        result=(VkBindImageMemoryDeviceGroupInfo*)malloc(sizeof(VkBindImageMemoryDeviceGroupInfo));
        result[0]=deserialize_struct(reader.getVkBindImageMemoryDeviceGroupInfo());
        return result;
    

    case PNext::VkDeviceGroupRenderPassBeginInfo:
        result=(VkDeviceGroupRenderPassBeginInfo*)malloc(sizeof(VkDeviceGroupRenderPassBeginInfo));
        result[0]=deserialize_struct(reader.getVkDeviceGroupRenderPassBeginInfo());
        return result;
    

    case PNext::VkDeviceGroupCommandBufferBeginInfo:
        result=(VkDeviceGroupCommandBufferBeginInfo*)malloc(sizeof(VkDeviceGroupCommandBufferBeginInfo));
        result[0]=deserialize_struct(reader.getVkDeviceGroupCommandBufferBeginInfo());
        return result;
    

    case PNext::VkDeviceGroupSubmitInfo:
        result=(VkDeviceGroupSubmitInfo*)malloc(sizeof(VkDeviceGroupSubmitInfo));
        result[0]=deserialize_struct(reader.getVkDeviceGroupSubmitInfo());
        return result;
    

    case PNext::VkDeviceGroupBindSparseInfo:
        result=(VkDeviceGroupBindSparseInfo*)malloc(sizeof(VkDeviceGroupBindSparseInfo));
        result[0]=deserialize_struct(reader.getVkDeviceGroupBindSparseInfo());
        return result;
    

    case PNext::VkDeviceGroupPresentCapabilitiesKHR:
        result=(VkDeviceGroupPresentCapabilitiesKHR*)malloc(sizeof(VkDeviceGroupPresentCapabilitiesKHR));
        result[0]=deserialize_struct(reader.getVkDeviceGroupPresentCapabilitiesKHR());
        return result;
    

    case PNext::VkImageSwapchainCreateInfoKHR:
        result=(VkImageSwapchainCreateInfoKHR*)malloc(sizeof(VkImageSwapchainCreateInfoKHR));
        result[0]=deserialize_struct(reader.getVkImageSwapchainCreateInfoKHR());
        return result;
    

    case PNext::VkBindImageMemorySwapchainInfoKHR:
        result=(VkBindImageMemorySwapchainInfoKHR*)malloc(sizeof(VkBindImageMemorySwapchainInfoKHR));
        result[0]=deserialize_struct(reader.getVkBindImageMemorySwapchainInfoKHR());
        return result;
    

    case PNext::VkAcquireNextImageInfoKHR:
        result=(VkAcquireNextImageInfoKHR*)malloc(sizeof(VkAcquireNextImageInfoKHR));
        result[0]=deserialize_struct(reader.getVkAcquireNextImageInfoKHR());
        return result;
    

    case PNext::VkDeviceGroupPresentInfoKHR:
        result=(VkDeviceGroupPresentInfoKHR*)malloc(sizeof(VkDeviceGroupPresentInfoKHR));
        result[0]=deserialize_struct(reader.getVkDeviceGroupPresentInfoKHR());
        return result;
    

    case PNext::VkDeviceGroupDeviceCreateInfo:
        result=(VkDeviceGroupDeviceCreateInfo*)malloc(sizeof(VkDeviceGroupDeviceCreateInfo));
        result[0]=deserialize_struct(reader.getVkDeviceGroupDeviceCreateInfo());
        return result;
    

    case PNext::VkDeviceGroupSwapchainCreateInfoKHR:
        result=(VkDeviceGroupSwapchainCreateInfoKHR*)malloc(sizeof(VkDeviceGroupSwapchainCreateInfoKHR));
        result[0]=deserialize_struct(reader.getVkDeviceGroupSwapchainCreateInfoKHR());
        return result;
    

    case PNext::VkDescriptorUpdateTemplateEntry:
        result=(VkDescriptorUpdateTemplateEntry*)malloc(sizeof(VkDescriptorUpdateTemplateEntry));
        result[0]=deserialize_struct(reader.getVkDescriptorUpdateTemplateEntry());
        return result;
    

    case PNext::VkDescriptorUpdateTemplateCreateInfo:
        result=(VkDescriptorUpdateTemplateCreateInfo*)malloc(sizeof(VkDescriptorUpdateTemplateCreateInfo));
        result[0]=deserialize_struct(reader.getVkDescriptorUpdateTemplateCreateInfo());
        return result;
    

    case PNext::VkXYColorEXT:
        result=(VkXYColorEXT*)malloc(sizeof(VkXYColorEXT));
        result[0]=deserialize_struct(reader.getVkXYColorEXT());
        return result;
    

    case PNext::VkPhysicalDevicePresentIdFeaturesKHR:
        result=(VkPhysicalDevicePresentIdFeaturesKHR*)malloc(sizeof(VkPhysicalDevicePresentIdFeaturesKHR));
        result[0]=deserialize_struct(reader.getVkPhysicalDevicePresentIdFeaturesKHR());
        return result;
    

    case PNext::VkPresentIdKHR:
        result=(VkPresentIdKHR*)malloc(sizeof(VkPresentIdKHR));
        result[0]=deserialize_struct(reader.getVkPresentIdKHR());
        return result;
    

    case PNext::VkPhysicalDevicePresentWaitFeaturesKHR:
        result=(VkPhysicalDevicePresentWaitFeaturesKHR*)malloc(sizeof(VkPhysicalDevicePresentWaitFeaturesKHR));
        result[0]=deserialize_struct(reader.getVkPhysicalDevicePresentWaitFeaturesKHR());
        return result;
    

    case PNext::VkHdrMetadataEXT:
        result=(VkHdrMetadataEXT*)malloc(sizeof(VkHdrMetadataEXT));
        result[0]=deserialize_struct(reader.getVkHdrMetadataEXT());
        return result;
    

    case PNext::VkDisplayNativeHdrSurfaceCapabilitiesAMD:
        result=(VkDisplayNativeHdrSurfaceCapabilitiesAMD*)malloc(sizeof(VkDisplayNativeHdrSurfaceCapabilitiesAMD));
        result[0]=deserialize_struct(reader.getVkDisplayNativeHdrSurfaceCapabilitiesAMD());
        return result;
    

    case PNext::VkSwapchainDisplayNativeHdrCreateInfoAMD:
        result=(VkSwapchainDisplayNativeHdrCreateInfoAMD*)malloc(sizeof(VkSwapchainDisplayNativeHdrCreateInfoAMD));
        result[0]=deserialize_struct(reader.getVkSwapchainDisplayNativeHdrCreateInfoAMD());
        return result;
    

    case PNext::VkRefreshCycleDurationGOOGLE:
        result=(VkRefreshCycleDurationGOOGLE*)malloc(sizeof(VkRefreshCycleDurationGOOGLE));
        result[0]=deserialize_struct(reader.getVkRefreshCycleDurationGOOGLE());
        return result;
    

    case PNext::VkPastPresentationTimingGOOGLE:
        result=(VkPastPresentationTimingGOOGLE*)malloc(sizeof(VkPastPresentationTimingGOOGLE));
        result[0]=deserialize_struct(reader.getVkPastPresentationTimingGOOGLE());
        return result;
    

    case PNext::VkPresentTimesInfoGOOGLE:
        result=(VkPresentTimesInfoGOOGLE*)malloc(sizeof(VkPresentTimesInfoGOOGLE));
        result[0]=deserialize_struct(reader.getVkPresentTimesInfoGOOGLE());
        return result;
    

    case PNext::VkPresentTimeGOOGLE:
        result=(VkPresentTimeGOOGLE*)malloc(sizeof(VkPresentTimeGOOGLE));
        result[0]=deserialize_struct(reader.getVkPresentTimeGOOGLE());
        return result;
    

    case PNext::VkViewportWScalingNV:
        result=(VkViewportWScalingNV*)malloc(sizeof(VkViewportWScalingNV));
        result[0]=deserialize_struct(reader.getVkViewportWScalingNV());
        return result;
    

    case PNext::VkPipelineViewportWScalingStateCreateInfoNV:
        result=(VkPipelineViewportWScalingStateCreateInfoNV*)malloc(sizeof(VkPipelineViewportWScalingStateCreateInfoNV));
        result[0]=deserialize_struct(reader.getVkPipelineViewportWScalingStateCreateInfoNV());
        return result;
    

    case PNext::VkViewportSwizzleNV:
        result=(VkViewportSwizzleNV*)malloc(sizeof(VkViewportSwizzleNV));
        result[0]=deserialize_struct(reader.getVkViewportSwizzleNV());
        return result;
    

    case PNext::VkPipelineViewportSwizzleStateCreateInfoNV:
        result=(VkPipelineViewportSwizzleStateCreateInfoNV*)malloc(sizeof(VkPipelineViewportSwizzleStateCreateInfoNV));
        result[0]=deserialize_struct(reader.getVkPipelineViewportSwizzleStateCreateInfoNV());
        return result;
    

    case PNext::VkPhysicalDeviceDiscardRectanglePropertiesEXT:
        result=(VkPhysicalDeviceDiscardRectanglePropertiesEXT*)malloc(sizeof(VkPhysicalDeviceDiscardRectanglePropertiesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceDiscardRectanglePropertiesEXT());
        return result;
    

    case PNext::VkPipelineDiscardRectangleStateCreateInfoEXT:
        result=(VkPipelineDiscardRectangleStateCreateInfoEXT*)malloc(sizeof(VkPipelineDiscardRectangleStateCreateInfoEXT));
        result[0]=deserialize_struct(reader.getVkPipelineDiscardRectangleStateCreateInfoEXT());
        return result;
    

    case PNext::VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX:
        result=(VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX*)malloc(sizeof(VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX());
        return result;
    

    case PNext::VkInputAttachmentAspectReference:
        result=(VkInputAttachmentAspectReference*)malloc(sizeof(VkInputAttachmentAspectReference));
        result[0]=deserialize_struct(reader.getVkInputAttachmentAspectReference());
        return result;
    

    case PNext::VkRenderPassInputAttachmentAspectCreateInfo:
        result=(VkRenderPassInputAttachmentAspectCreateInfo*)malloc(sizeof(VkRenderPassInputAttachmentAspectCreateInfo));
        result[0]=deserialize_struct(reader.getVkRenderPassInputAttachmentAspectCreateInfo());
        return result;
    

    case PNext::VkPhysicalDeviceSurfaceInfo2KHR:
        result=(VkPhysicalDeviceSurfaceInfo2KHR*)malloc(sizeof(VkPhysicalDeviceSurfaceInfo2KHR));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceSurfaceInfo2KHR());
        return result;
    

    case PNext::VkSurfaceCapabilities2KHR:
        result=(VkSurfaceCapabilities2KHR*)malloc(sizeof(VkSurfaceCapabilities2KHR));
        result[0]=deserialize_struct(reader.getVkSurfaceCapabilities2KHR());
        return result;
    

    case PNext::VkSurfaceFormat2KHR:
        result=(VkSurfaceFormat2KHR*)malloc(sizeof(VkSurfaceFormat2KHR));
        result[0]=deserialize_struct(reader.getVkSurfaceFormat2KHR());
        return result;
    

    case PNext::VkDisplayProperties2KHR:
        result=(VkDisplayProperties2KHR*)malloc(sizeof(VkDisplayProperties2KHR));
        result[0]=deserialize_struct(reader.getVkDisplayProperties2KHR());
        return result;
    

    case PNext::VkDisplayPlaneProperties2KHR:
        result=(VkDisplayPlaneProperties2KHR*)malloc(sizeof(VkDisplayPlaneProperties2KHR));
        result[0]=deserialize_struct(reader.getVkDisplayPlaneProperties2KHR());
        return result;
    

    case PNext::VkDisplayModeProperties2KHR:
        result=(VkDisplayModeProperties2KHR*)malloc(sizeof(VkDisplayModeProperties2KHR));
        result[0]=deserialize_struct(reader.getVkDisplayModeProperties2KHR());
        return result;
    

    case PNext::VkDisplayPlaneInfo2KHR:
        result=(VkDisplayPlaneInfo2KHR*)malloc(sizeof(VkDisplayPlaneInfo2KHR));
        result[0]=deserialize_struct(reader.getVkDisplayPlaneInfo2KHR());
        return result;
    

    case PNext::VkDisplayPlaneCapabilities2KHR:
        result=(VkDisplayPlaneCapabilities2KHR*)malloc(sizeof(VkDisplayPlaneCapabilities2KHR));
        result[0]=deserialize_struct(reader.getVkDisplayPlaneCapabilities2KHR());
        return result;
    

    case PNext::VkSharedPresentSurfaceCapabilitiesKHR:
        result=(VkSharedPresentSurfaceCapabilitiesKHR*)malloc(sizeof(VkSharedPresentSurfaceCapabilitiesKHR));
        result[0]=deserialize_struct(reader.getVkSharedPresentSurfaceCapabilitiesKHR());
        return result;
    

    case PNext::VkPhysicalDevice16BitStorageFeatures:
        result=(VkPhysicalDevice16BitStorageFeatures*)malloc(sizeof(VkPhysicalDevice16BitStorageFeatures));
        result[0]=deserialize_struct(reader.getVkPhysicalDevice16BitStorageFeatures());
        return result;
    

    case PNext::VkPhysicalDeviceSubgroupProperties:
        result=(VkPhysicalDeviceSubgroupProperties*)malloc(sizeof(VkPhysicalDeviceSubgroupProperties));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceSubgroupProperties());
        return result;
    

    case PNext::VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures:
        result=(VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures*)malloc(sizeof(VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceShaderSubgroupExtendedTypesFeatures());
        return result;
    

    case PNext::VkBufferMemoryRequirementsInfo2:
        result=(VkBufferMemoryRequirementsInfo2*)malloc(sizeof(VkBufferMemoryRequirementsInfo2));
        result[0]=deserialize_struct(reader.getVkBufferMemoryRequirementsInfo2());
        return result;
    

    case PNext::VkDeviceBufferMemoryRequirements:
        result=(VkDeviceBufferMemoryRequirements*)malloc(sizeof(VkDeviceBufferMemoryRequirements));
        result[0]=deserialize_struct(reader.getVkDeviceBufferMemoryRequirements());
        return result;
    

    case PNext::VkImageMemoryRequirementsInfo2:
        result=(VkImageMemoryRequirementsInfo2*)malloc(sizeof(VkImageMemoryRequirementsInfo2));
        result[0]=deserialize_struct(reader.getVkImageMemoryRequirementsInfo2());
        return result;
    

    case PNext::VkImageSparseMemoryRequirementsInfo2:
        result=(VkImageSparseMemoryRequirementsInfo2*)malloc(sizeof(VkImageSparseMemoryRequirementsInfo2));
        result[0]=deserialize_struct(reader.getVkImageSparseMemoryRequirementsInfo2());
        return result;
    

    case PNext::VkDeviceImageMemoryRequirements:
        result=(VkDeviceImageMemoryRequirements*)malloc(sizeof(VkDeviceImageMemoryRequirements));
        result[0]=deserialize_struct(reader.getVkDeviceImageMemoryRequirements());
        return result;
    

    case PNext::VkMemoryRequirements2:
        result=(VkMemoryRequirements2*)malloc(sizeof(VkMemoryRequirements2));
        result[0]=deserialize_struct(reader.getVkMemoryRequirements2());
        return result;
    

    case PNext::VkSparseImageMemoryRequirements2:
        result=(VkSparseImageMemoryRequirements2*)malloc(sizeof(VkSparseImageMemoryRequirements2));
        result[0]=deserialize_struct(reader.getVkSparseImageMemoryRequirements2());
        return result;
    

    case PNext::VkPhysicalDevicePointClippingProperties:
        result=(VkPhysicalDevicePointClippingProperties*)malloc(sizeof(VkPhysicalDevicePointClippingProperties));
        result[0]=deserialize_struct(reader.getVkPhysicalDevicePointClippingProperties());
        return result;
    

    case PNext::VkMemoryDedicatedRequirements:
        result=(VkMemoryDedicatedRequirements*)malloc(sizeof(VkMemoryDedicatedRequirements));
        result[0]=deserialize_struct(reader.getVkMemoryDedicatedRequirements());
        return result;
    

    case PNext::VkMemoryDedicatedAllocateInfo:
        result=(VkMemoryDedicatedAllocateInfo*)malloc(sizeof(VkMemoryDedicatedAllocateInfo));
        result[0]=deserialize_struct(reader.getVkMemoryDedicatedAllocateInfo());
        return result;
    

    case PNext::VkImageViewUsageCreateInfo:
        result=(VkImageViewUsageCreateInfo*)malloc(sizeof(VkImageViewUsageCreateInfo));
        result[0]=deserialize_struct(reader.getVkImageViewUsageCreateInfo());
        return result;
    

    case PNext::VkImageViewSlicedCreateInfoEXT:
        result=(VkImageViewSlicedCreateInfoEXT*)malloc(sizeof(VkImageViewSlicedCreateInfoEXT));
        result[0]=deserialize_struct(reader.getVkImageViewSlicedCreateInfoEXT());
        return result;
    

    case PNext::VkPipelineTessellationDomainOriginStateCreateInfo:
        result=(VkPipelineTessellationDomainOriginStateCreateInfo*)malloc(sizeof(VkPipelineTessellationDomainOriginStateCreateInfo));
        result[0]=deserialize_struct(reader.getVkPipelineTessellationDomainOriginStateCreateInfo());
        return result;
    

    case PNext::VkSamplerYcbcrConversionInfo:
        result=(VkSamplerYcbcrConversionInfo*)malloc(sizeof(VkSamplerYcbcrConversionInfo));
        result[0]=deserialize_struct(reader.getVkSamplerYcbcrConversionInfo());
        return result;
    

    case PNext::VkSamplerYcbcrConversionCreateInfo:
        result=(VkSamplerYcbcrConversionCreateInfo*)malloc(sizeof(VkSamplerYcbcrConversionCreateInfo));
        result[0]=deserialize_struct(reader.getVkSamplerYcbcrConversionCreateInfo());
        return result;
    

    case PNext::VkBindImagePlaneMemoryInfo:
        result=(VkBindImagePlaneMemoryInfo*)malloc(sizeof(VkBindImagePlaneMemoryInfo));
        result[0]=deserialize_struct(reader.getVkBindImagePlaneMemoryInfo());
        return result;
    

    case PNext::VkImagePlaneMemoryRequirementsInfo:
        result=(VkImagePlaneMemoryRequirementsInfo*)malloc(sizeof(VkImagePlaneMemoryRequirementsInfo));
        result[0]=deserialize_struct(reader.getVkImagePlaneMemoryRequirementsInfo());
        return result;
    

    case PNext::VkPhysicalDeviceSamplerYcbcrConversionFeatures:
        result=(VkPhysicalDeviceSamplerYcbcrConversionFeatures*)malloc(sizeof(VkPhysicalDeviceSamplerYcbcrConversionFeatures));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceSamplerYcbcrConversionFeatures());
        return result;
    

    case PNext::VkSamplerYcbcrConversionImageFormatProperties:
        result=(VkSamplerYcbcrConversionImageFormatProperties*)malloc(sizeof(VkSamplerYcbcrConversionImageFormatProperties));
        result[0]=deserialize_struct(reader.getVkSamplerYcbcrConversionImageFormatProperties());
        return result;
    

    case PNext::VkTextureLODGatherFormatPropertiesAMD:
        result=(VkTextureLODGatherFormatPropertiesAMD*)malloc(sizeof(VkTextureLODGatherFormatPropertiesAMD));
        result[0]=deserialize_struct(reader.getVkTextureLODGatherFormatPropertiesAMD());
        return result;
    

    case PNext::VkConditionalRenderingBeginInfoEXT:
        result=(VkConditionalRenderingBeginInfoEXT*)malloc(sizeof(VkConditionalRenderingBeginInfoEXT));
        result[0]=deserialize_struct(reader.getVkConditionalRenderingBeginInfoEXT());
        return result;
    

    case PNext::VkProtectedSubmitInfo:
        result=(VkProtectedSubmitInfo*)malloc(sizeof(VkProtectedSubmitInfo));
        result[0]=deserialize_struct(reader.getVkProtectedSubmitInfo());
        return result;
    

    case PNext::VkPhysicalDeviceProtectedMemoryFeatures:
        result=(VkPhysicalDeviceProtectedMemoryFeatures*)malloc(sizeof(VkPhysicalDeviceProtectedMemoryFeatures));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceProtectedMemoryFeatures());
        return result;
    

    case PNext::VkPhysicalDeviceProtectedMemoryProperties:
        result=(VkPhysicalDeviceProtectedMemoryProperties*)malloc(sizeof(VkPhysicalDeviceProtectedMemoryProperties));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceProtectedMemoryProperties());
        return result;
    

    case PNext::VkDeviceQueueInfo2:
        result=(VkDeviceQueueInfo2*)malloc(sizeof(VkDeviceQueueInfo2));
        result[0]=deserialize_struct(reader.getVkDeviceQueueInfo2());
        return result;
    

    case PNext::VkPipelineCoverageToColorStateCreateInfoNV:
        result=(VkPipelineCoverageToColorStateCreateInfoNV*)malloc(sizeof(VkPipelineCoverageToColorStateCreateInfoNV));
        result[0]=deserialize_struct(reader.getVkPipelineCoverageToColorStateCreateInfoNV());
        return result;
    

    case PNext::VkPhysicalDeviceSamplerFilterMinmaxProperties:
        result=(VkPhysicalDeviceSamplerFilterMinmaxProperties*)malloc(sizeof(VkPhysicalDeviceSamplerFilterMinmaxProperties));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceSamplerFilterMinmaxProperties());
        return result;
    

    case PNext::VkSampleLocationEXT:
        result=(VkSampleLocationEXT*)malloc(sizeof(VkSampleLocationEXT));
        result[0]=deserialize_struct(reader.getVkSampleLocationEXT());
        return result;
    

    case PNext::VkSampleLocationsInfoEXT:
        result=(VkSampleLocationsInfoEXT*)malloc(sizeof(VkSampleLocationsInfoEXT));
        result[0]=deserialize_struct(reader.getVkSampleLocationsInfoEXT());
        return result;
    

    case PNext::VkAttachmentSampleLocationsEXT:
        result=(VkAttachmentSampleLocationsEXT*)malloc(sizeof(VkAttachmentSampleLocationsEXT));
        result[0]=deserialize_struct(reader.getVkAttachmentSampleLocationsEXT());
        return result;
    

    case PNext::VkSubpassSampleLocationsEXT:
        result=(VkSubpassSampleLocationsEXT*)malloc(sizeof(VkSubpassSampleLocationsEXT));
        result[0]=deserialize_struct(reader.getVkSubpassSampleLocationsEXT());
        return result;
    

    case PNext::VkRenderPassSampleLocationsBeginInfoEXT:
        result=(VkRenderPassSampleLocationsBeginInfoEXT*)malloc(sizeof(VkRenderPassSampleLocationsBeginInfoEXT));
        result[0]=deserialize_struct(reader.getVkRenderPassSampleLocationsBeginInfoEXT());
        return result;
    

    case PNext::VkPipelineSampleLocationsStateCreateInfoEXT:
        result=(VkPipelineSampleLocationsStateCreateInfoEXT*)malloc(sizeof(VkPipelineSampleLocationsStateCreateInfoEXT));
        result[0]=deserialize_struct(reader.getVkPipelineSampleLocationsStateCreateInfoEXT());
        return result;
    

    case PNext::VkPhysicalDeviceSampleLocationsPropertiesEXT:
        result=(VkPhysicalDeviceSampleLocationsPropertiesEXT*)malloc(sizeof(VkPhysicalDeviceSampleLocationsPropertiesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceSampleLocationsPropertiesEXT());
        return result;
    

    case PNext::VkMultisamplePropertiesEXT:
        result=(VkMultisamplePropertiesEXT*)malloc(sizeof(VkMultisamplePropertiesEXT));
        result[0]=deserialize_struct(reader.getVkMultisamplePropertiesEXT());
        return result;
    

    case PNext::VkSamplerReductionModeCreateInfo:
        result=(VkSamplerReductionModeCreateInfo*)malloc(sizeof(VkSamplerReductionModeCreateInfo));
        result[0]=deserialize_struct(reader.getVkSamplerReductionModeCreateInfo());
        return result;
    

    case PNext::VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT:
        result=(VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceBlendOperationAdvancedFeaturesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceMultiDrawFeaturesEXT:
        result=(VkPhysicalDeviceMultiDrawFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceMultiDrawFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceMultiDrawFeaturesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT:
        result=(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT*)malloc(sizeof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceBlendOperationAdvancedPropertiesEXT());
        return result;
    

    case PNext::VkPipelineColorBlendAdvancedStateCreateInfoEXT:
        result=(VkPipelineColorBlendAdvancedStateCreateInfoEXT*)malloc(sizeof(VkPipelineColorBlendAdvancedStateCreateInfoEXT));
        result[0]=deserialize_struct(reader.getVkPipelineColorBlendAdvancedStateCreateInfoEXT());
        return result;
    

    case PNext::VkPhysicalDeviceInlineUniformBlockFeatures:
        result=(VkPhysicalDeviceInlineUniformBlockFeatures*)malloc(sizeof(VkPhysicalDeviceInlineUniformBlockFeatures));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceInlineUniformBlockFeatures());
        return result;
    

    case PNext::VkPhysicalDeviceInlineUniformBlockProperties:
        result=(VkPhysicalDeviceInlineUniformBlockProperties*)malloc(sizeof(VkPhysicalDeviceInlineUniformBlockProperties));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceInlineUniformBlockProperties());
        return result;
    

    case PNext::VkWriteDescriptorSetInlineUniformBlock:
        result=(VkWriteDescriptorSetInlineUniformBlock*)malloc(sizeof(VkWriteDescriptorSetInlineUniformBlock));
        result[0]=deserialize_struct(reader.getVkWriteDescriptorSetInlineUniformBlock());
        return result;
    

    case PNext::VkDescriptorPoolInlineUniformBlockCreateInfo:
        result=(VkDescriptorPoolInlineUniformBlockCreateInfo*)malloc(sizeof(VkDescriptorPoolInlineUniformBlockCreateInfo));
        result[0]=deserialize_struct(reader.getVkDescriptorPoolInlineUniformBlockCreateInfo());
        return result;
    

    case PNext::VkPipelineCoverageModulationStateCreateInfoNV:
        result=(VkPipelineCoverageModulationStateCreateInfoNV*)malloc(sizeof(VkPipelineCoverageModulationStateCreateInfoNV));
        result[0]=deserialize_struct(reader.getVkPipelineCoverageModulationStateCreateInfoNV());
        return result;
    

    case PNext::VkImageFormatListCreateInfo:
        result=(VkImageFormatListCreateInfo*)malloc(sizeof(VkImageFormatListCreateInfo));
        result[0]=deserialize_struct(reader.getVkImageFormatListCreateInfo());
        return result;
    

    case PNext::VkValidationCacheCreateInfoEXT:
        result=(VkValidationCacheCreateInfoEXT*)malloc(sizeof(VkValidationCacheCreateInfoEXT));
        result[0]=deserialize_struct(reader.getVkValidationCacheCreateInfoEXT());
        return result;
    

    case PNext::VkShaderModuleValidationCacheCreateInfoEXT:
        result=(VkShaderModuleValidationCacheCreateInfoEXT*)malloc(sizeof(VkShaderModuleValidationCacheCreateInfoEXT));
        result[0]=deserialize_struct(reader.getVkShaderModuleValidationCacheCreateInfoEXT());
        return result;
    

    case PNext::VkPhysicalDeviceMaintenance3Properties:
        result=(VkPhysicalDeviceMaintenance3Properties*)malloc(sizeof(VkPhysicalDeviceMaintenance3Properties));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceMaintenance3Properties());
        return result;
    

    case PNext::VkPhysicalDeviceMaintenance4Features:
        result=(VkPhysicalDeviceMaintenance4Features*)malloc(sizeof(VkPhysicalDeviceMaintenance4Features));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceMaintenance4Features());
        return result;
    

    case PNext::VkPhysicalDeviceMaintenance4Properties:
        result=(VkPhysicalDeviceMaintenance4Properties*)malloc(sizeof(VkPhysicalDeviceMaintenance4Properties));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceMaintenance4Properties());
        return result;
    

    case PNext::VkPhysicalDeviceMaintenance5FeaturesKHR:
        result=(VkPhysicalDeviceMaintenance5FeaturesKHR*)malloc(sizeof(VkPhysicalDeviceMaintenance5FeaturesKHR));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceMaintenance5FeaturesKHR());
        return result;
    

    case PNext::VkPhysicalDeviceMaintenance5PropertiesKHR:
        result=(VkPhysicalDeviceMaintenance5PropertiesKHR*)malloc(sizeof(VkPhysicalDeviceMaintenance5PropertiesKHR));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceMaintenance5PropertiesKHR());
        return result;
    

    case PNext::VkRenderingAreaInfoKHR:
        result=(VkRenderingAreaInfoKHR*)malloc(sizeof(VkRenderingAreaInfoKHR));
        result[0]=deserialize_struct(reader.getVkRenderingAreaInfoKHR());
        return result;
    

    case PNext::VkDescriptorSetLayoutSupport:
        result=(VkDescriptorSetLayoutSupport*)malloc(sizeof(VkDescriptorSetLayoutSupport));
        result[0]=deserialize_struct(reader.getVkDescriptorSetLayoutSupport());
        return result;
    

    case PNext::VkPhysicalDeviceShaderDrawParametersFeatures:
        result=(VkPhysicalDeviceShaderDrawParametersFeatures*)malloc(sizeof(VkPhysicalDeviceShaderDrawParametersFeatures));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceShaderDrawParametersFeatures());
        return result;
    

    case PNext::VkPhysicalDeviceShaderFloat16Int8Features:
        result=(VkPhysicalDeviceShaderFloat16Int8Features*)malloc(sizeof(VkPhysicalDeviceShaderFloat16Int8Features));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceShaderFloat16Int8Features());
        return result;
    

    case PNext::VkPhysicalDeviceFloatControlsProperties:
        result=(VkPhysicalDeviceFloatControlsProperties*)malloc(sizeof(VkPhysicalDeviceFloatControlsProperties));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceFloatControlsProperties());
        return result;
    

    case PNext::VkPhysicalDeviceHostQueryResetFeatures:
        result=(VkPhysicalDeviceHostQueryResetFeatures*)malloc(sizeof(VkPhysicalDeviceHostQueryResetFeatures));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceHostQueryResetFeatures());
        return result;
    

    case PNext::VkShaderResourceUsageAMD:
        result=(VkShaderResourceUsageAMD*)malloc(sizeof(VkShaderResourceUsageAMD));
        result[0]=deserialize_struct(reader.getVkShaderResourceUsageAMD());
        return result;
    

    case PNext::VkShaderStatisticsInfoAMD:
        result=(VkShaderStatisticsInfoAMD*)malloc(sizeof(VkShaderStatisticsInfoAMD));
        result[0]=deserialize_struct(reader.getVkShaderStatisticsInfoAMD());
        return result;
    

    case PNext::VkDeviceQueueGlobalPriorityCreateInfoKHR:
        result=(VkDeviceQueueGlobalPriorityCreateInfoKHR*)malloc(sizeof(VkDeviceQueueGlobalPriorityCreateInfoKHR));
        result[0]=deserialize_struct(reader.getVkDeviceQueueGlobalPriorityCreateInfoKHR());
        return result;
    

    case PNext::VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR:
        result=(VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR*)malloc(sizeof(VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceGlobalPriorityQueryFeaturesKHR());
        return result;
    

    case PNext::VkQueueFamilyGlobalPriorityPropertiesKHR:
        result=(VkQueueFamilyGlobalPriorityPropertiesKHR*)malloc(sizeof(VkQueueFamilyGlobalPriorityPropertiesKHR));
        result[0]=deserialize_struct(reader.getVkQueueFamilyGlobalPriorityPropertiesKHR());
        return result;
    

    case PNext::VkDebugUtilsObjectNameInfoEXT:
        result=(VkDebugUtilsObjectNameInfoEXT*)malloc(sizeof(VkDebugUtilsObjectNameInfoEXT));
        result[0]=deserialize_struct(reader.getVkDebugUtilsObjectNameInfoEXT());
        return result;
    

    case PNext::VkDebugUtilsObjectTagInfoEXT:
        result=(VkDebugUtilsObjectTagInfoEXT*)malloc(sizeof(VkDebugUtilsObjectTagInfoEXT));
        result[0]=deserialize_struct(reader.getVkDebugUtilsObjectTagInfoEXT());
        return result;
    

    case PNext::VkDebugUtilsLabelEXT:
        result=(VkDebugUtilsLabelEXT*)malloc(sizeof(VkDebugUtilsLabelEXT));
        result[0]=deserialize_struct(reader.getVkDebugUtilsLabelEXT());
        return result;
    

    case PNext::VkDebugUtilsMessengerCreateInfoEXT:
        result=(VkDebugUtilsMessengerCreateInfoEXT*)malloc(sizeof(VkDebugUtilsMessengerCreateInfoEXT));
        result[0]=deserialize_struct(reader.getVkDebugUtilsMessengerCreateInfoEXT());
        return result;
    

    case PNext::VkDebugUtilsMessengerCallbackDataEXT:
        result=(VkDebugUtilsMessengerCallbackDataEXT*)malloc(sizeof(VkDebugUtilsMessengerCallbackDataEXT));
        result[0]=deserialize_struct(reader.getVkDebugUtilsMessengerCallbackDataEXT());
        return result;
    

    case PNext::VkPhysicalDeviceDeviceMemoryReportFeaturesEXT:
        result=(VkPhysicalDeviceDeviceMemoryReportFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceDeviceMemoryReportFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceDeviceMemoryReportFeaturesEXT());
        return result;
    

    case PNext::VkDeviceDeviceMemoryReportCreateInfoEXT:
        result=(VkDeviceDeviceMemoryReportCreateInfoEXT*)malloc(sizeof(VkDeviceDeviceMemoryReportCreateInfoEXT));
        result[0]=deserialize_struct(reader.getVkDeviceDeviceMemoryReportCreateInfoEXT());
        return result;
    

    case PNext::VkDeviceMemoryReportCallbackDataEXT:
        result=(VkDeviceMemoryReportCallbackDataEXT*)malloc(sizeof(VkDeviceMemoryReportCallbackDataEXT));
        result[0]=deserialize_struct(reader.getVkDeviceMemoryReportCallbackDataEXT());
        return result;
    

    case PNext::VkImportMemoryHostPointerInfoEXT:
        result=(VkImportMemoryHostPointerInfoEXT*)malloc(sizeof(VkImportMemoryHostPointerInfoEXT));
        result[0]=deserialize_struct(reader.getVkImportMemoryHostPointerInfoEXT());
        return result;
    

    case PNext::VkMemoryHostPointerPropertiesEXT:
        result=(VkMemoryHostPointerPropertiesEXT*)malloc(sizeof(VkMemoryHostPointerPropertiesEXT));
        result[0]=deserialize_struct(reader.getVkMemoryHostPointerPropertiesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceExternalMemoryHostPropertiesEXT:
        result=(VkPhysicalDeviceExternalMemoryHostPropertiesEXT*)malloc(sizeof(VkPhysicalDeviceExternalMemoryHostPropertiesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceExternalMemoryHostPropertiesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceConservativeRasterizationPropertiesEXT:
        result=(VkPhysicalDeviceConservativeRasterizationPropertiesEXT*)malloc(sizeof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceConservativeRasterizationPropertiesEXT());
        return result;
    

    case PNext::VkCalibratedTimestampInfoEXT:
        result=(VkCalibratedTimestampInfoEXT*)malloc(sizeof(VkCalibratedTimestampInfoEXT));
        result[0]=deserialize_struct(reader.getVkCalibratedTimestampInfoEXT());
        return result;
    

    case PNext::VkPhysicalDeviceShaderCorePropertiesAMD:
        result=(VkPhysicalDeviceShaderCorePropertiesAMD*)malloc(sizeof(VkPhysicalDeviceShaderCorePropertiesAMD));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceShaderCorePropertiesAMD());
        return result;
    

    case PNext::VkPhysicalDeviceShaderCoreProperties2AMD:
        result=(VkPhysicalDeviceShaderCoreProperties2AMD*)malloc(sizeof(VkPhysicalDeviceShaderCoreProperties2AMD));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceShaderCoreProperties2AMD());
        return result;
    

    case PNext::VkPipelineRasterizationConservativeStateCreateInfoEXT:
        result=(VkPipelineRasterizationConservativeStateCreateInfoEXT*)malloc(sizeof(VkPipelineRasterizationConservativeStateCreateInfoEXT));
        result[0]=deserialize_struct(reader.getVkPipelineRasterizationConservativeStateCreateInfoEXT());
        return result;
    

    case PNext::VkPhysicalDeviceDescriptorIndexingFeatures:
        result=(VkPhysicalDeviceDescriptorIndexingFeatures*)malloc(sizeof(VkPhysicalDeviceDescriptorIndexingFeatures));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceDescriptorIndexingFeatures());
        return result;
    

    case PNext::VkPhysicalDeviceDescriptorIndexingProperties:
        result=(VkPhysicalDeviceDescriptorIndexingProperties*)malloc(sizeof(VkPhysicalDeviceDescriptorIndexingProperties));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceDescriptorIndexingProperties());
        return result;
    

    case PNext::VkDescriptorSetLayoutBindingFlagsCreateInfo:
        result=(VkDescriptorSetLayoutBindingFlagsCreateInfo*)malloc(sizeof(VkDescriptorSetLayoutBindingFlagsCreateInfo));
        result[0]=deserialize_struct(reader.getVkDescriptorSetLayoutBindingFlagsCreateInfo());
        return result;
    

    case PNext::VkDescriptorSetVariableDescriptorCountAllocateInfo:
        result=(VkDescriptorSetVariableDescriptorCountAllocateInfo*)malloc(sizeof(VkDescriptorSetVariableDescriptorCountAllocateInfo));
        result[0]=deserialize_struct(reader.getVkDescriptorSetVariableDescriptorCountAllocateInfo());
        return result;
    

    case PNext::VkDescriptorSetVariableDescriptorCountLayoutSupport:
        result=(VkDescriptorSetVariableDescriptorCountLayoutSupport*)malloc(sizeof(VkDescriptorSetVariableDescriptorCountLayoutSupport));
        result[0]=deserialize_struct(reader.getVkDescriptorSetVariableDescriptorCountLayoutSupport());
        return result;
    

    case PNext::VkAttachmentDescription2:
        result=(VkAttachmentDescription2*)malloc(sizeof(VkAttachmentDescription2));
        result[0]=deserialize_struct(reader.getVkAttachmentDescription2());
        return result;
    

    case PNext::VkAttachmentReference2:
        result=(VkAttachmentReference2*)malloc(sizeof(VkAttachmentReference2));
        result[0]=deserialize_struct(reader.getVkAttachmentReference2());
        return result;
    

    case PNext::VkSubpassDescription2:
        result=(VkSubpassDescription2*)malloc(sizeof(VkSubpassDescription2));
        result[0]=deserialize_struct(reader.getVkSubpassDescription2());
        return result;
    

    case PNext::VkSubpassDependency2:
        result=(VkSubpassDependency2*)malloc(sizeof(VkSubpassDependency2));
        result[0]=deserialize_struct(reader.getVkSubpassDependency2());
        return result;
    

    case PNext::VkRenderPassCreateInfo2:
        result=(VkRenderPassCreateInfo2*)malloc(sizeof(VkRenderPassCreateInfo2));
        result[0]=deserialize_struct(reader.getVkRenderPassCreateInfo2());
        return result;
    

    case PNext::VkSubpassBeginInfo:
        result=(VkSubpassBeginInfo*)malloc(sizeof(VkSubpassBeginInfo));
        result[0]=deserialize_struct(reader.getVkSubpassBeginInfo());
        return result;
    

    case PNext::VkSubpassEndInfo:
        result=(VkSubpassEndInfo*)malloc(sizeof(VkSubpassEndInfo));
        result[0]=deserialize_struct(reader.getVkSubpassEndInfo());
        return result;
    

    case PNext::VkPhysicalDeviceTimelineSemaphoreFeatures:
        result=(VkPhysicalDeviceTimelineSemaphoreFeatures*)malloc(sizeof(VkPhysicalDeviceTimelineSemaphoreFeatures));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceTimelineSemaphoreFeatures());
        return result;
    

    case PNext::VkPhysicalDeviceTimelineSemaphoreProperties:
        result=(VkPhysicalDeviceTimelineSemaphoreProperties*)malloc(sizeof(VkPhysicalDeviceTimelineSemaphoreProperties));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceTimelineSemaphoreProperties());
        return result;
    

    case PNext::VkSemaphoreTypeCreateInfo:
        result=(VkSemaphoreTypeCreateInfo*)malloc(sizeof(VkSemaphoreTypeCreateInfo));
        result[0]=deserialize_struct(reader.getVkSemaphoreTypeCreateInfo());
        return result;
    

    case PNext::VkTimelineSemaphoreSubmitInfo:
        result=(VkTimelineSemaphoreSubmitInfo*)malloc(sizeof(VkTimelineSemaphoreSubmitInfo));
        result[0]=deserialize_struct(reader.getVkTimelineSemaphoreSubmitInfo());
        return result;
    

    case PNext::VkSemaphoreWaitInfo:
        result=(VkSemaphoreWaitInfo*)malloc(sizeof(VkSemaphoreWaitInfo));
        result[0]=deserialize_struct(reader.getVkSemaphoreWaitInfo());
        return result;
    

    case PNext::VkSemaphoreSignalInfo:
        result=(VkSemaphoreSignalInfo*)malloc(sizeof(VkSemaphoreSignalInfo));
        result[0]=deserialize_struct(reader.getVkSemaphoreSignalInfo());
        return result;
    

    case PNext::VkVertexInputBindingDivisorDescriptionEXT:
        result=(VkVertexInputBindingDivisorDescriptionEXT*)malloc(sizeof(VkVertexInputBindingDivisorDescriptionEXT));
        result[0]=deserialize_struct(reader.getVkVertexInputBindingDivisorDescriptionEXT());
        return result;
    

    case PNext::VkPipelineVertexInputDivisorStateCreateInfoEXT:
        result=(VkPipelineVertexInputDivisorStateCreateInfoEXT*)malloc(sizeof(VkPipelineVertexInputDivisorStateCreateInfoEXT));
        result[0]=deserialize_struct(reader.getVkPipelineVertexInputDivisorStateCreateInfoEXT());
        return result;
    

    case PNext::VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT:
        result=(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT*)malloc(sizeof(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceVertexAttributeDivisorPropertiesEXT());
        return result;
    

    case PNext::VkPhysicalDevicePCIBusInfoPropertiesEXT:
        result=(VkPhysicalDevicePCIBusInfoPropertiesEXT*)malloc(sizeof(VkPhysicalDevicePCIBusInfoPropertiesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDevicePCIBusInfoPropertiesEXT());
        return result;
    

    case PNext::VkCommandBufferInheritanceConditionalRenderingInfoEXT:
        result=(VkCommandBufferInheritanceConditionalRenderingInfoEXT*)malloc(sizeof(VkCommandBufferInheritanceConditionalRenderingInfoEXT));
        result[0]=deserialize_struct(reader.getVkCommandBufferInheritanceConditionalRenderingInfoEXT());
        return result;
    

    case PNext::VkPhysicalDevice8BitStorageFeatures:
        result=(VkPhysicalDevice8BitStorageFeatures*)malloc(sizeof(VkPhysicalDevice8BitStorageFeatures));
        result[0]=deserialize_struct(reader.getVkPhysicalDevice8BitStorageFeatures());
        return result;
    

    case PNext::VkPhysicalDeviceConditionalRenderingFeaturesEXT:
        result=(VkPhysicalDeviceConditionalRenderingFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceConditionalRenderingFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceConditionalRenderingFeaturesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceVulkanMemoryModelFeatures:
        result=(VkPhysicalDeviceVulkanMemoryModelFeatures*)malloc(sizeof(VkPhysicalDeviceVulkanMemoryModelFeatures));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceVulkanMemoryModelFeatures());
        return result;
    

    case PNext::VkPhysicalDeviceShaderAtomicInt64Features:
        result=(VkPhysicalDeviceShaderAtomicInt64Features*)malloc(sizeof(VkPhysicalDeviceShaderAtomicInt64Features));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceShaderAtomicInt64Features());
        return result;
    

    case PNext::VkPhysicalDeviceShaderAtomicFloatFeaturesEXT:
        result=(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceShaderAtomicFloatFeaturesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT:
        result=(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT*)malloc(sizeof(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceShaderAtomicFloat2FeaturesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT:
        result=(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceVertexAttributeDivisorFeaturesEXT());
        return result;
    

    case PNext::VkQueueFamilyCheckpointPropertiesNV:
        result=(VkQueueFamilyCheckpointPropertiesNV*)malloc(sizeof(VkQueueFamilyCheckpointPropertiesNV));
        result[0]=deserialize_struct(reader.getVkQueueFamilyCheckpointPropertiesNV());
        return result;
    

    case PNext::VkCheckpointDataNV:
        result=(VkCheckpointDataNV*)malloc(sizeof(VkCheckpointDataNV));
        result[0]=deserialize_struct(reader.getVkCheckpointDataNV());
        return result;
    

    case PNext::VkPhysicalDeviceDepthStencilResolveProperties:
        result=(VkPhysicalDeviceDepthStencilResolveProperties*)malloc(sizeof(VkPhysicalDeviceDepthStencilResolveProperties));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceDepthStencilResolveProperties());
        return result;
    

    case PNext::VkSubpassDescriptionDepthStencilResolve:
        result=(VkSubpassDescriptionDepthStencilResolve*)malloc(sizeof(VkSubpassDescriptionDepthStencilResolve));
        result[0]=deserialize_struct(reader.getVkSubpassDescriptionDepthStencilResolve());
        return result;
    

    case PNext::VkImageViewASTCDecodeModeEXT:
        result=(VkImageViewASTCDecodeModeEXT*)malloc(sizeof(VkImageViewASTCDecodeModeEXT));
        result[0]=deserialize_struct(reader.getVkImageViewASTCDecodeModeEXT());
        return result;
    

    case PNext::VkPhysicalDeviceASTCDecodeFeaturesEXT:
        result=(VkPhysicalDeviceASTCDecodeFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceASTCDecodeFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceASTCDecodeFeaturesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceTransformFeedbackFeaturesEXT:
        result=(VkPhysicalDeviceTransformFeedbackFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceTransformFeedbackFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceTransformFeedbackFeaturesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceTransformFeedbackPropertiesEXT:
        result=(VkPhysicalDeviceTransformFeedbackPropertiesEXT*)malloc(sizeof(VkPhysicalDeviceTransformFeedbackPropertiesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceTransformFeedbackPropertiesEXT());
        return result;
    

    case PNext::VkPipelineRasterizationStateStreamCreateInfoEXT:
        result=(VkPipelineRasterizationStateStreamCreateInfoEXT*)malloc(sizeof(VkPipelineRasterizationStateStreamCreateInfoEXT));
        result[0]=deserialize_struct(reader.getVkPipelineRasterizationStateStreamCreateInfoEXT());
        return result;
    

    case PNext::VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV:
        result=(VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV*)malloc(sizeof(VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceRepresentativeFragmentTestFeaturesNV());
        return result;
    

    case PNext::VkPipelineRepresentativeFragmentTestStateCreateInfoNV:
        result=(VkPipelineRepresentativeFragmentTestStateCreateInfoNV*)malloc(sizeof(VkPipelineRepresentativeFragmentTestStateCreateInfoNV));
        result[0]=deserialize_struct(reader.getVkPipelineRepresentativeFragmentTestStateCreateInfoNV());
        return result;
    

    case PNext::VkPhysicalDeviceExclusiveScissorFeaturesNV:
        result=(VkPhysicalDeviceExclusiveScissorFeaturesNV*)malloc(sizeof(VkPhysicalDeviceExclusiveScissorFeaturesNV));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceExclusiveScissorFeaturesNV());
        return result;
    

    case PNext::VkPipelineViewportExclusiveScissorStateCreateInfoNV:
        result=(VkPipelineViewportExclusiveScissorStateCreateInfoNV*)malloc(sizeof(VkPipelineViewportExclusiveScissorStateCreateInfoNV));
        result[0]=deserialize_struct(reader.getVkPipelineViewportExclusiveScissorStateCreateInfoNV());
        return result;
    

    case PNext::VkPhysicalDeviceCornerSampledImageFeaturesNV:
        result=(VkPhysicalDeviceCornerSampledImageFeaturesNV*)malloc(sizeof(VkPhysicalDeviceCornerSampledImageFeaturesNV));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceCornerSampledImageFeaturesNV());
        return result;
    

    case PNext::VkPhysicalDeviceComputeShaderDerivativesFeaturesNV:
        result=(VkPhysicalDeviceComputeShaderDerivativesFeaturesNV*)malloc(sizeof(VkPhysicalDeviceComputeShaderDerivativesFeaturesNV));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceComputeShaderDerivativesFeaturesNV());
        return result;
    

    case PNext::VkPhysicalDeviceShaderImageFootprintFeaturesNV:
        result=(VkPhysicalDeviceShaderImageFootprintFeaturesNV*)malloc(sizeof(VkPhysicalDeviceShaderImageFootprintFeaturesNV));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceShaderImageFootprintFeaturesNV());
        return result;
    

    case PNext::VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV:
        result=(VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV*)malloc(sizeof(VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV());
        return result;
    

    case PNext::VkPhysicalDeviceCopyMemoryIndirectFeaturesNV:
        result=(VkPhysicalDeviceCopyMemoryIndirectFeaturesNV*)malloc(sizeof(VkPhysicalDeviceCopyMemoryIndirectFeaturesNV));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceCopyMemoryIndirectFeaturesNV());
        return result;
    

    case PNext::VkPhysicalDeviceCopyMemoryIndirectPropertiesNV:
        result=(VkPhysicalDeviceCopyMemoryIndirectPropertiesNV*)malloc(sizeof(VkPhysicalDeviceCopyMemoryIndirectPropertiesNV));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceCopyMemoryIndirectPropertiesNV());
        return result;
    

    case PNext::VkPhysicalDeviceMemoryDecompressionFeaturesNV:
        result=(VkPhysicalDeviceMemoryDecompressionFeaturesNV*)malloc(sizeof(VkPhysicalDeviceMemoryDecompressionFeaturesNV));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceMemoryDecompressionFeaturesNV());
        return result;
    

    case PNext::VkPhysicalDeviceMemoryDecompressionPropertiesNV:
        result=(VkPhysicalDeviceMemoryDecompressionPropertiesNV*)malloc(sizeof(VkPhysicalDeviceMemoryDecompressionPropertiesNV));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceMemoryDecompressionPropertiesNV());
        return result;
    

    case PNext::VkShadingRatePaletteNV:
        result=(VkShadingRatePaletteNV*)malloc(sizeof(VkShadingRatePaletteNV));
        result[0]=deserialize_struct(reader.getVkShadingRatePaletteNV());
        return result;
    

    case PNext::VkPipelineViewportShadingRateImageStateCreateInfoNV:
        result=(VkPipelineViewportShadingRateImageStateCreateInfoNV*)malloc(sizeof(VkPipelineViewportShadingRateImageStateCreateInfoNV));
        result[0]=deserialize_struct(reader.getVkPipelineViewportShadingRateImageStateCreateInfoNV());
        return result;
    

    case PNext::VkPhysicalDeviceShadingRateImageFeaturesNV:
        result=(VkPhysicalDeviceShadingRateImageFeaturesNV*)malloc(sizeof(VkPhysicalDeviceShadingRateImageFeaturesNV));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceShadingRateImageFeaturesNV());
        return result;
    

    case PNext::VkPhysicalDeviceShadingRateImagePropertiesNV:
        result=(VkPhysicalDeviceShadingRateImagePropertiesNV*)malloc(sizeof(VkPhysicalDeviceShadingRateImagePropertiesNV));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceShadingRateImagePropertiesNV());
        return result;
    

    case PNext::VkPhysicalDeviceInvocationMaskFeaturesHUAWEI:
        result=(VkPhysicalDeviceInvocationMaskFeaturesHUAWEI*)malloc(sizeof(VkPhysicalDeviceInvocationMaskFeaturesHUAWEI));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceInvocationMaskFeaturesHUAWEI());
        return result;
    

    case PNext::VkCoarseSampleLocationNV:
        result=(VkCoarseSampleLocationNV*)malloc(sizeof(VkCoarseSampleLocationNV));
        result[0]=deserialize_struct(reader.getVkCoarseSampleLocationNV());
        return result;
    

    case PNext::VkCoarseSampleOrderCustomNV:
        result=(VkCoarseSampleOrderCustomNV*)malloc(sizeof(VkCoarseSampleOrderCustomNV));
        result[0]=deserialize_struct(reader.getVkCoarseSampleOrderCustomNV());
        return result;
    

    case PNext::VkPipelineViewportCoarseSampleOrderStateCreateInfoNV:
        result=(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV*)malloc(sizeof(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV));
        result[0]=deserialize_struct(reader.getVkPipelineViewportCoarseSampleOrderStateCreateInfoNV());
        return result;
    

    case PNext::VkPhysicalDeviceMeshShaderFeaturesNV:
        result=(VkPhysicalDeviceMeshShaderFeaturesNV*)malloc(sizeof(VkPhysicalDeviceMeshShaderFeaturesNV));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceMeshShaderFeaturesNV());
        return result;
    

    case PNext::VkPhysicalDeviceMeshShaderPropertiesNV:
        result=(VkPhysicalDeviceMeshShaderPropertiesNV*)malloc(sizeof(VkPhysicalDeviceMeshShaderPropertiesNV));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceMeshShaderPropertiesNV());
        return result;
    

    case PNext::VkDrawMeshTasksIndirectCommandNV:
        result=(VkDrawMeshTasksIndirectCommandNV*)malloc(sizeof(VkDrawMeshTasksIndirectCommandNV));
        result[0]=deserialize_struct(reader.getVkDrawMeshTasksIndirectCommandNV());
        return result;
    

    case PNext::VkPhysicalDeviceMeshShaderFeaturesEXT:
        result=(VkPhysicalDeviceMeshShaderFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceMeshShaderFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceMeshShaderFeaturesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceMeshShaderPropertiesEXT:
        result=(VkPhysicalDeviceMeshShaderPropertiesEXT*)malloc(sizeof(VkPhysicalDeviceMeshShaderPropertiesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceMeshShaderPropertiesEXT());
        return result;
    

    case PNext::VkDrawMeshTasksIndirectCommandEXT:
        result=(VkDrawMeshTasksIndirectCommandEXT*)malloc(sizeof(VkDrawMeshTasksIndirectCommandEXT));
        result[0]=deserialize_struct(reader.getVkDrawMeshTasksIndirectCommandEXT());
        return result;
    

    case PNext::VkRayTracingShaderGroupCreateInfoNV:
        result=(VkRayTracingShaderGroupCreateInfoNV*)malloc(sizeof(VkRayTracingShaderGroupCreateInfoNV));
        result[0]=deserialize_struct(reader.getVkRayTracingShaderGroupCreateInfoNV());
        return result;
    

    case PNext::VkRayTracingShaderGroupCreateInfoKHR:
        result=(VkRayTracingShaderGroupCreateInfoKHR*)malloc(sizeof(VkRayTracingShaderGroupCreateInfoKHR));
        result[0]=deserialize_struct(reader.getVkRayTracingShaderGroupCreateInfoKHR());
        return result;
    

    case PNext::VkRayTracingPipelineCreateInfoNV:
        result=(VkRayTracingPipelineCreateInfoNV*)malloc(sizeof(VkRayTracingPipelineCreateInfoNV));
        result[0]=deserialize_struct(reader.getVkRayTracingPipelineCreateInfoNV());
        return result;
    

    case PNext::VkRayTracingPipelineCreateInfoKHR:
        result=(VkRayTracingPipelineCreateInfoKHR*)malloc(sizeof(VkRayTracingPipelineCreateInfoKHR));
        result[0]=deserialize_struct(reader.getVkRayTracingPipelineCreateInfoKHR());
        return result;
    

    case PNext::VkGeometryTrianglesNV:
        result=(VkGeometryTrianglesNV*)malloc(sizeof(VkGeometryTrianglesNV));
        result[0]=deserialize_struct(reader.getVkGeometryTrianglesNV());
        return result;
    

    case PNext::VkGeometryAABBNV:
        result=(VkGeometryAABBNV*)malloc(sizeof(VkGeometryAABBNV));
        result[0]=deserialize_struct(reader.getVkGeometryAABBNV());
        return result;
    

    case PNext::VkGeometryDataNV:
        result=(VkGeometryDataNV*)malloc(sizeof(VkGeometryDataNV));
        result[0]=deserialize_struct(reader.getVkGeometryDataNV());
        return result;
    

    case PNext::VkGeometryNV:
        result=(VkGeometryNV*)malloc(sizeof(VkGeometryNV));
        result[0]=deserialize_struct(reader.getVkGeometryNV());
        return result;
    

    case PNext::VkAccelerationStructureInfoNV:
        result=(VkAccelerationStructureInfoNV*)malloc(sizeof(VkAccelerationStructureInfoNV));
        result[0]=deserialize_struct(reader.getVkAccelerationStructureInfoNV());
        return result;
    

    case PNext::VkAccelerationStructureCreateInfoNV:
        result=(VkAccelerationStructureCreateInfoNV*)malloc(sizeof(VkAccelerationStructureCreateInfoNV));
        result[0]=deserialize_struct(reader.getVkAccelerationStructureCreateInfoNV());
        return result;
    

    case PNext::VkBindAccelerationStructureMemoryInfoNV:
        result=(VkBindAccelerationStructureMemoryInfoNV*)malloc(sizeof(VkBindAccelerationStructureMemoryInfoNV));
        result[0]=deserialize_struct(reader.getVkBindAccelerationStructureMemoryInfoNV());
        return result;
    

    case PNext::VkWriteDescriptorSetAccelerationStructureKHR:
        result=(VkWriteDescriptorSetAccelerationStructureKHR*)malloc(sizeof(VkWriteDescriptorSetAccelerationStructureKHR));
        result[0]=deserialize_struct(reader.getVkWriteDescriptorSetAccelerationStructureKHR());
        return result;
    

    case PNext::VkWriteDescriptorSetAccelerationStructureNV:
        result=(VkWriteDescriptorSetAccelerationStructureNV*)malloc(sizeof(VkWriteDescriptorSetAccelerationStructureNV));
        result[0]=deserialize_struct(reader.getVkWriteDescriptorSetAccelerationStructureNV());
        return result;
    

    case PNext::VkAccelerationStructureMemoryRequirementsInfoNV:
        result=(VkAccelerationStructureMemoryRequirementsInfoNV*)malloc(sizeof(VkAccelerationStructureMemoryRequirementsInfoNV));
        result[0]=deserialize_struct(reader.getVkAccelerationStructureMemoryRequirementsInfoNV());
        return result;
    

    case PNext::VkPhysicalDeviceAccelerationStructureFeaturesKHR:
        result=(VkPhysicalDeviceAccelerationStructureFeaturesKHR*)malloc(sizeof(VkPhysicalDeviceAccelerationStructureFeaturesKHR));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceAccelerationStructureFeaturesKHR());
        return result;
    

    case PNext::VkPhysicalDeviceRayTracingPipelineFeaturesKHR:
        result=(VkPhysicalDeviceRayTracingPipelineFeaturesKHR*)malloc(sizeof(VkPhysicalDeviceRayTracingPipelineFeaturesKHR));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceRayTracingPipelineFeaturesKHR());
        return result;
    

    case PNext::VkPhysicalDeviceRayQueryFeaturesKHR:
        result=(VkPhysicalDeviceRayQueryFeaturesKHR*)malloc(sizeof(VkPhysicalDeviceRayQueryFeaturesKHR));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceRayQueryFeaturesKHR());
        return result;
    

    case PNext::VkPhysicalDeviceAccelerationStructurePropertiesKHR:
        result=(VkPhysicalDeviceAccelerationStructurePropertiesKHR*)malloc(sizeof(VkPhysicalDeviceAccelerationStructurePropertiesKHR));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceAccelerationStructurePropertiesKHR());
        return result;
    

    case PNext::VkPhysicalDeviceRayTracingPipelinePropertiesKHR:
        result=(VkPhysicalDeviceRayTracingPipelinePropertiesKHR*)malloc(sizeof(VkPhysicalDeviceRayTracingPipelinePropertiesKHR));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceRayTracingPipelinePropertiesKHR());
        return result;
    

    case PNext::VkPhysicalDeviceRayTracingPropertiesNV:
        result=(VkPhysicalDeviceRayTracingPropertiesNV*)malloc(sizeof(VkPhysicalDeviceRayTracingPropertiesNV));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceRayTracingPropertiesNV());
        return result;
    

    case PNext::VkStridedDeviceAddressRegionKHR:
        result=(VkStridedDeviceAddressRegionKHR*)malloc(sizeof(VkStridedDeviceAddressRegionKHR));
        result[0]=deserialize_struct(reader.getVkStridedDeviceAddressRegionKHR());
        return result;
    

    case PNext::VkTraceRaysIndirectCommandKHR:
        result=(VkTraceRaysIndirectCommandKHR*)malloc(sizeof(VkTraceRaysIndirectCommandKHR));
        result[0]=deserialize_struct(reader.getVkTraceRaysIndirectCommandKHR());
        return result;
    

    case PNext::VkTraceRaysIndirectCommand2KHR:
        result=(VkTraceRaysIndirectCommand2KHR*)malloc(sizeof(VkTraceRaysIndirectCommand2KHR));
        result[0]=deserialize_struct(reader.getVkTraceRaysIndirectCommand2KHR());
        return result;
    

    case PNext::VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR:
        result=(VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR*)malloc(sizeof(VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceRayTracingMaintenance1FeaturesKHR());
        return result;
    

    case PNext::VkDrmFormatModifierPropertiesListEXT:
        result=(VkDrmFormatModifierPropertiesListEXT*)malloc(sizeof(VkDrmFormatModifierPropertiesListEXT));
        result[0]=deserialize_struct(reader.getVkDrmFormatModifierPropertiesListEXT());
        return result;
    

    case PNext::VkDrmFormatModifierPropertiesEXT:
        result=(VkDrmFormatModifierPropertiesEXT*)malloc(sizeof(VkDrmFormatModifierPropertiesEXT));
        result[0]=deserialize_struct(reader.getVkDrmFormatModifierPropertiesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceImageDrmFormatModifierInfoEXT:
        result=(VkPhysicalDeviceImageDrmFormatModifierInfoEXT*)malloc(sizeof(VkPhysicalDeviceImageDrmFormatModifierInfoEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceImageDrmFormatModifierInfoEXT());
        return result;
    

    case PNext::VkImageDrmFormatModifierListCreateInfoEXT:
        result=(VkImageDrmFormatModifierListCreateInfoEXT*)malloc(sizeof(VkImageDrmFormatModifierListCreateInfoEXT));
        result[0]=deserialize_struct(reader.getVkImageDrmFormatModifierListCreateInfoEXT());
        return result;
    

    case PNext::VkImageDrmFormatModifierExplicitCreateInfoEXT:
        result=(VkImageDrmFormatModifierExplicitCreateInfoEXT*)malloc(sizeof(VkImageDrmFormatModifierExplicitCreateInfoEXT));
        result[0]=deserialize_struct(reader.getVkImageDrmFormatModifierExplicitCreateInfoEXT());
        return result;
    

    case PNext::VkImageDrmFormatModifierPropertiesEXT:
        result=(VkImageDrmFormatModifierPropertiesEXT*)malloc(sizeof(VkImageDrmFormatModifierPropertiesEXT));
        result[0]=deserialize_struct(reader.getVkImageDrmFormatModifierPropertiesEXT());
        return result;
    

    case PNext::VkImageStencilUsageCreateInfo:
        result=(VkImageStencilUsageCreateInfo*)malloc(sizeof(VkImageStencilUsageCreateInfo));
        result[0]=deserialize_struct(reader.getVkImageStencilUsageCreateInfo());
        return result;
    

    case PNext::VkDeviceMemoryOverallocationCreateInfoAMD:
        result=(VkDeviceMemoryOverallocationCreateInfoAMD*)malloc(sizeof(VkDeviceMemoryOverallocationCreateInfoAMD));
        result[0]=deserialize_struct(reader.getVkDeviceMemoryOverallocationCreateInfoAMD());
        return result;
    

    case PNext::VkPhysicalDeviceFragmentDensityMapFeaturesEXT:
        result=(VkPhysicalDeviceFragmentDensityMapFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceFragmentDensityMapFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceFragmentDensityMapFeaturesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceFragmentDensityMap2FeaturesEXT:
        result=(VkPhysicalDeviceFragmentDensityMap2FeaturesEXT*)malloc(sizeof(VkPhysicalDeviceFragmentDensityMap2FeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceFragmentDensityMap2FeaturesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM:
        result=(VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM*)malloc(sizeof(VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM());
        return result;
    

    case PNext::VkPhysicalDeviceFragmentDensityMapPropertiesEXT:
        result=(VkPhysicalDeviceFragmentDensityMapPropertiesEXT*)malloc(sizeof(VkPhysicalDeviceFragmentDensityMapPropertiesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceFragmentDensityMapPropertiesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceFragmentDensityMap2PropertiesEXT:
        result=(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT*)malloc(sizeof(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceFragmentDensityMap2PropertiesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM:
        result=(VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM*)malloc(sizeof(VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM());
        return result;
    

    case PNext::VkRenderPassFragmentDensityMapCreateInfoEXT:
        result=(VkRenderPassFragmentDensityMapCreateInfoEXT*)malloc(sizeof(VkRenderPassFragmentDensityMapCreateInfoEXT));
        result[0]=deserialize_struct(reader.getVkRenderPassFragmentDensityMapCreateInfoEXT());
        return result;
    

    case PNext::VkSubpassFragmentDensityMapOffsetEndInfoQCOM:
        result=(VkSubpassFragmentDensityMapOffsetEndInfoQCOM*)malloc(sizeof(VkSubpassFragmentDensityMapOffsetEndInfoQCOM));
        result[0]=deserialize_struct(reader.getVkSubpassFragmentDensityMapOffsetEndInfoQCOM());
        return result;
    

    case PNext::VkPhysicalDeviceScalarBlockLayoutFeatures:
        result=(VkPhysicalDeviceScalarBlockLayoutFeatures*)malloc(sizeof(VkPhysicalDeviceScalarBlockLayoutFeatures));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceScalarBlockLayoutFeatures());
        return result;
    

    case PNext::VkSurfaceProtectedCapabilitiesKHR:
        result=(VkSurfaceProtectedCapabilitiesKHR*)malloc(sizeof(VkSurfaceProtectedCapabilitiesKHR));
        result[0]=deserialize_struct(reader.getVkSurfaceProtectedCapabilitiesKHR());
        return result;
    

    case PNext::VkPhysicalDeviceUniformBufferStandardLayoutFeatures:
        result=(VkPhysicalDeviceUniformBufferStandardLayoutFeatures*)malloc(sizeof(VkPhysicalDeviceUniformBufferStandardLayoutFeatures));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceUniformBufferStandardLayoutFeatures());
        return result;
    

    case PNext::VkPhysicalDeviceDepthClipEnableFeaturesEXT:
        result=(VkPhysicalDeviceDepthClipEnableFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceDepthClipEnableFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceDepthClipEnableFeaturesEXT());
        return result;
    

    case PNext::VkPipelineRasterizationDepthClipStateCreateInfoEXT:
        result=(VkPipelineRasterizationDepthClipStateCreateInfoEXT*)malloc(sizeof(VkPipelineRasterizationDepthClipStateCreateInfoEXT));
        result[0]=deserialize_struct(reader.getVkPipelineRasterizationDepthClipStateCreateInfoEXT());
        return result;
    

    case PNext::VkPhysicalDeviceMemoryBudgetPropertiesEXT:
        result=(VkPhysicalDeviceMemoryBudgetPropertiesEXT*)malloc(sizeof(VkPhysicalDeviceMemoryBudgetPropertiesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceMemoryBudgetPropertiesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceMemoryPriorityFeaturesEXT:
        result=(VkPhysicalDeviceMemoryPriorityFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceMemoryPriorityFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceMemoryPriorityFeaturesEXT());
        return result;
    

    case PNext::VkMemoryPriorityAllocateInfoEXT:
        result=(VkMemoryPriorityAllocateInfoEXT*)malloc(sizeof(VkMemoryPriorityAllocateInfoEXT));
        result[0]=deserialize_struct(reader.getVkMemoryPriorityAllocateInfoEXT());
        return result;
    

    case PNext::VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT:
        result=(VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT*)malloc(sizeof(VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceBufferDeviceAddressFeatures:
        result=(VkPhysicalDeviceBufferDeviceAddressFeatures*)malloc(sizeof(VkPhysicalDeviceBufferDeviceAddressFeatures));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceBufferDeviceAddressFeatures());
        return result;
    

    case PNext::VkPhysicalDeviceBufferDeviceAddressFeaturesEXT:
        result=(VkPhysicalDeviceBufferDeviceAddressFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceBufferDeviceAddressFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceBufferDeviceAddressFeaturesEXT());
        return result;
    

    case PNext::VkBufferDeviceAddressInfo:
        result=(VkBufferDeviceAddressInfo*)malloc(sizeof(VkBufferDeviceAddressInfo));
        result[0]=deserialize_struct(reader.getVkBufferDeviceAddressInfo());
        return result;
    

    case PNext::VkBufferOpaqueCaptureAddressCreateInfo:
        result=(VkBufferOpaqueCaptureAddressCreateInfo*)malloc(sizeof(VkBufferOpaqueCaptureAddressCreateInfo));
        result[0]=deserialize_struct(reader.getVkBufferOpaqueCaptureAddressCreateInfo());
        return result;
    

    case PNext::VkBufferDeviceAddressCreateInfoEXT:
        result=(VkBufferDeviceAddressCreateInfoEXT*)malloc(sizeof(VkBufferDeviceAddressCreateInfoEXT));
        result[0]=deserialize_struct(reader.getVkBufferDeviceAddressCreateInfoEXT());
        return result;
    

    case PNext::VkPhysicalDeviceImageViewImageFormatInfoEXT:
        result=(VkPhysicalDeviceImageViewImageFormatInfoEXT*)malloc(sizeof(VkPhysicalDeviceImageViewImageFormatInfoEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceImageViewImageFormatInfoEXT());
        return result;
    

    case PNext::VkFilterCubicImageViewImageFormatPropertiesEXT:
        result=(VkFilterCubicImageViewImageFormatPropertiesEXT*)malloc(sizeof(VkFilterCubicImageViewImageFormatPropertiesEXT));
        result[0]=deserialize_struct(reader.getVkFilterCubicImageViewImageFormatPropertiesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceImagelessFramebufferFeatures:
        result=(VkPhysicalDeviceImagelessFramebufferFeatures*)malloc(sizeof(VkPhysicalDeviceImagelessFramebufferFeatures));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceImagelessFramebufferFeatures());
        return result;
    

    case PNext::VkFramebufferAttachmentsCreateInfo:
        result=(VkFramebufferAttachmentsCreateInfo*)malloc(sizeof(VkFramebufferAttachmentsCreateInfo));
        result[0]=deserialize_struct(reader.getVkFramebufferAttachmentsCreateInfo());
        return result;
    

    case PNext::VkFramebufferAttachmentImageInfo:
        result=(VkFramebufferAttachmentImageInfo*)malloc(sizeof(VkFramebufferAttachmentImageInfo));
        result[0]=deserialize_struct(reader.getVkFramebufferAttachmentImageInfo());
        return result;
    

    case PNext::VkRenderPassAttachmentBeginInfo:
        result=(VkRenderPassAttachmentBeginInfo*)malloc(sizeof(VkRenderPassAttachmentBeginInfo));
        result[0]=deserialize_struct(reader.getVkRenderPassAttachmentBeginInfo());
        return result;
    

    case PNext::VkPhysicalDeviceTextureCompressionASTCHDRFeatures:
        result=(VkPhysicalDeviceTextureCompressionASTCHDRFeatures*)malloc(sizeof(VkPhysicalDeviceTextureCompressionASTCHDRFeatures));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceTextureCompressionASTCHDRFeatures());
        return result;
    

    case PNext::VkPhysicalDeviceCooperativeMatrixFeaturesNV:
        result=(VkPhysicalDeviceCooperativeMatrixFeaturesNV*)malloc(sizeof(VkPhysicalDeviceCooperativeMatrixFeaturesNV));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceCooperativeMatrixFeaturesNV());
        return result;
    

    case PNext::VkPhysicalDeviceCooperativeMatrixPropertiesNV:
        result=(VkPhysicalDeviceCooperativeMatrixPropertiesNV*)malloc(sizeof(VkPhysicalDeviceCooperativeMatrixPropertiesNV));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceCooperativeMatrixPropertiesNV());
        return result;
    

    case PNext::VkCooperativeMatrixPropertiesNV:
        result=(VkCooperativeMatrixPropertiesNV*)malloc(sizeof(VkCooperativeMatrixPropertiesNV));
        result[0]=deserialize_struct(reader.getVkCooperativeMatrixPropertiesNV());
        return result;
    

    case PNext::VkPhysicalDeviceYcbcrImageArraysFeaturesEXT:
        result=(VkPhysicalDeviceYcbcrImageArraysFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceYcbcrImageArraysFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceYcbcrImageArraysFeaturesEXT());
        return result;
    

    case PNext::VkImageViewHandleInfoNVX:
        result=(VkImageViewHandleInfoNVX*)malloc(sizeof(VkImageViewHandleInfoNVX));
        result[0]=deserialize_struct(reader.getVkImageViewHandleInfoNVX());
        return result;
    

    case PNext::VkImageViewAddressPropertiesNVX:
        result=(VkImageViewAddressPropertiesNVX*)malloc(sizeof(VkImageViewAddressPropertiesNVX));
        result[0]=deserialize_struct(reader.getVkImageViewAddressPropertiesNVX());
        return result;
    

    case PNext::VkPipelineCreationFeedback:
        result=(VkPipelineCreationFeedback*)malloc(sizeof(VkPipelineCreationFeedback));
        result[0]=deserialize_struct(reader.getVkPipelineCreationFeedback());
        return result;
    

    case PNext::VkPipelineCreationFeedbackCreateInfo:
        result=(VkPipelineCreationFeedbackCreateInfo*)malloc(sizeof(VkPipelineCreationFeedbackCreateInfo));
        result[0]=deserialize_struct(reader.getVkPipelineCreationFeedbackCreateInfo());
        return result;
    

    case PNext::VkPhysicalDevicePresentBarrierFeaturesNV:
        result=(VkPhysicalDevicePresentBarrierFeaturesNV*)malloc(sizeof(VkPhysicalDevicePresentBarrierFeaturesNV));
        result[0]=deserialize_struct(reader.getVkPhysicalDevicePresentBarrierFeaturesNV());
        return result;
    

    case PNext::VkSurfaceCapabilitiesPresentBarrierNV:
        result=(VkSurfaceCapabilitiesPresentBarrierNV*)malloc(sizeof(VkSurfaceCapabilitiesPresentBarrierNV));
        result[0]=deserialize_struct(reader.getVkSurfaceCapabilitiesPresentBarrierNV());
        return result;
    

    case PNext::VkSwapchainPresentBarrierCreateInfoNV:
        result=(VkSwapchainPresentBarrierCreateInfoNV*)malloc(sizeof(VkSwapchainPresentBarrierCreateInfoNV));
        result[0]=deserialize_struct(reader.getVkSwapchainPresentBarrierCreateInfoNV());
        return result;
    

    case PNext::VkPhysicalDevicePerformanceQueryFeaturesKHR:
        result=(VkPhysicalDevicePerformanceQueryFeaturesKHR*)malloc(sizeof(VkPhysicalDevicePerformanceQueryFeaturesKHR));
        result[0]=deserialize_struct(reader.getVkPhysicalDevicePerformanceQueryFeaturesKHR());
        return result;
    

    case PNext::VkPhysicalDevicePerformanceQueryPropertiesKHR:
        result=(VkPhysicalDevicePerformanceQueryPropertiesKHR*)malloc(sizeof(VkPhysicalDevicePerformanceQueryPropertiesKHR));
        result[0]=deserialize_struct(reader.getVkPhysicalDevicePerformanceQueryPropertiesKHR());
        return result;
    

    case PNext::VkPerformanceCounterKHR:
        result=(VkPerformanceCounterKHR*)malloc(sizeof(VkPerformanceCounterKHR));
        result[0]=deserialize_struct(reader.getVkPerformanceCounterKHR());
        return result;
    

    case PNext::VkPerformanceCounterDescriptionKHR:
        result=(VkPerformanceCounterDescriptionKHR*)malloc(sizeof(VkPerformanceCounterDescriptionKHR));
        result[0]=deserialize_struct(reader.getVkPerformanceCounterDescriptionKHR());
        return result;
    

    case PNext::VkQueryPoolPerformanceCreateInfoKHR:
        result=(VkQueryPoolPerformanceCreateInfoKHR*)malloc(sizeof(VkQueryPoolPerformanceCreateInfoKHR));
        result[0]=deserialize_struct(reader.getVkQueryPoolPerformanceCreateInfoKHR());
        return result;
    

    case PNext::VkPerformanceCounterResultKHR:
        result=(VkPerformanceCounterResultKHR*)malloc(sizeof(VkPerformanceCounterResultKHR));
        result[0]=deserialize_struct(reader.getVkPerformanceCounterResultKHR());
        return result;
    

    case PNext::VkAcquireProfilingLockInfoKHR:
        result=(VkAcquireProfilingLockInfoKHR*)malloc(sizeof(VkAcquireProfilingLockInfoKHR));
        result[0]=deserialize_struct(reader.getVkAcquireProfilingLockInfoKHR());
        return result;
    

    case PNext::VkPerformanceQuerySubmitInfoKHR:
        result=(VkPerformanceQuerySubmitInfoKHR*)malloc(sizeof(VkPerformanceQuerySubmitInfoKHR));
        result[0]=deserialize_struct(reader.getVkPerformanceQuerySubmitInfoKHR());
        return result;
    

    case PNext::VkHeadlessSurfaceCreateInfoEXT:
        result=(VkHeadlessSurfaceCreateInfoEXT*)malloc(sizeof(VkHeadlessSurfaceCreateInfoEXT));
        result[0]=deserialize_struct(reader.getVkHeadlessSurfaceCreateInfoEXT());
        return result;
    

    case PNext::VkPhysicalDeviceCoverageReductionModeFeaturesNV:
        result=(VkPhysicalDeviceCoverageReductionModeFeaturesNV*)malloc(sizeof(VkPhysicalDeviceCoverageReductionModeFeaturesNV));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceCoverageReductionModeFeaturesNV());
        return result;
    

    case PNext::VkPipelineCoverageReductionStateCreateInfoNV:
        result=(VkPipelineCoverageReductionStateCreateInfoNV*)malloc(sizeof(VkPipelineCoverageReductionStateCreateInfoNV));
        result[0]=deserialize_struct(reader.getVkPipelineCoverageReductionStateCreateInfoNV());
        return result;
    

    case PNext::VkFramebufferMixedSamplesCombinationNV:
        result=(VkFramebufferMixedSamplesCombinationNV*)malloc(sizeof(VkFramebufferMixedSamplesCombinationNV));
        result[0]=deserialize_struct(reader.getVkFramebufferMixedSamplesCombinationNV());
        return result;
    

    case PNext::VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL:
        result=(VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL*)malloc(sizeof(VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL());
        return result;
    

    case PNext::VkPerformanceValueDataINTEL:
        result=(VkPerformanceValueDataINTEL*)malloc(sizeof(VkPerformanceValueDataINTEL));
        result[0]=deserialize_struct(reader.getVkPerformanceValueDataINTEL());
        return result;
    

    case PNext::VkPerformanceValueINTEL:
        result=(VkPerformanceValueINTEL*)malloc(sizeof(VkPerformanceValueINTEL));
        result[0]=deserialize_struct(reader.getVkPerformanceValueINTEL());
        return result;
    

    case PNext::VkInitializePerformanceApiInfoINTEL:
        result=(VkInitializePerformanceApiInfoINTEL*)malloc(sizeof(VkInitializePerformanceApiInfoINTEL));
        result[0]=deserialize_struct(reader.getVkInitializePerformanceApiInfoINTEL());
        return result;
    

    case PNext::VkQueryPoolPerformanceQueryCreateInfoINTEL:
        result=(VkQueryPoolPerformanceQueryCreateInfoINTEL*)malloc(sizeof(VkQueryPoolPerformanceQueryCreateInfoINTEL));
        result[0]=deserialize_struct(reader.getVkQueryPoolPerformanceQueryCreateInfoINTEL());
        return result;
    

    case PNext::VkPerformanceMarkerInfoINTEL:
        result=(VkPerformanceMarkerInfoINTEL*)malloc(sizeof(VkPerformanceMarkerInfoINTEL));
        result[0]=deserialize_struct(reader.getVkPerformanceMarkerInfoINTEL());
        return result;
    

    case PNext::VkPerformanceStreamMarkerInfoINTEL:
        result=(VkPerformanceStreamMarkerInfoINTEL*)malloc(sizeof(VkPerformanceStreamMarkerInfoINTEL));
        result[0]=deserialize_struct(reader.getVkPerformanceStreamMarkerInfoINTEL());
        return result;
    

    case PNext::VkPerformanceOverrideInfoINTEL:
        result=(VkPerformanceOverrideInfoINTEL*)malloc(sizeof(VkPerformanceOverrideInfoINTEL));
        result[0]=deserialize_struct(reader.getVkPerformanceOverrideInfoINTEL());
        return result;
    

    case PNext::VkPerformanceConfigurationAcquireInfoINTEL:
        result=(VkPerformanceConfigurationAcquireInfoINTEL*)malloc(sizeof(VkPerformanceConfigurationAcquireInfoINTEL));
        result[0]=deserialize_struct(reader.getVkPerformanceConfigurationAcquireInfoINTEL());
        return result;
    

    case PNext::VkPhysicalDeviceShaderClockFeaturesKHR:
        result=(VkPhysicalDeviceShaderClockFeaturesKHR*)malloc(sizeof(VkPhysicalDeviceShaderClockFeaturesKHR));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceShaderClockFeaturesKHR());
        return result;
    

    case PNext::VkPhysicalDeviceIndexTypeUint8FeaturesEXT:
        result=(VkPhysicalDeviceIndexTypeUint8FeaturesEXT*)malloc(sizeof(VkPhysicalDeviceIndexTypeUint8FeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceIndexTypeUint8FeaturesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceShaderSMBuiltinsPropertiesNV:
        result=(VkPhysicalDeviceShaderSMBuiltinsPropertiesNV*)malloc(sizeof(VkPhysicalDeviceShaderSMBuiltinsPropertiesNV));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceShaderSMBuiltinsPropertiesNV());
        return result;
    

    case PNext::VkPhysicalDeviceShaderSMBuiltinsFeaturesNV:
        result=(VkPhysicalDeviceShaderSMBuiltinsFeaturesNV*)malloc(sizeof(VkPhysicalDeviceShaderSMBuiltinsFeaturesNV));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceShaderSMBuiltinsFeaturesNV());
        return result;
    

    case PNext::VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT:
        result=(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceFragmentShaderInterlockFeaturesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures:
        result=(VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures*)malloc(sizeof(VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceSeparateDepthStencilLayoutsFeatures());
        return result;
    

    case PNext::VkAttachmentReferenceStencilLayout:
        result=(VkAttachmentReferenceStencilLayout*)malloc(sizeof(VkAttachmentReferenceStencilLayout));
        result[0]=deserialize_struct(reader.getVkAttachmentReferenceStencilLayout());
        return result;
    

    case PNext::VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT:
        result=(VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT*)malloc(sizeof(VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT());
        return result;
    

    case PNext::VkAttachmentDescriptionStencilLayout:
        result=(VkAttachmentDescriptionStencilLayout*)malloc(sizeof(VkAttachmentDescriptionStencilLayout));
        result[0]=deserialize_struct(reader.getVkAttachmentDescriptionStencilLayout());
        return result;
    

    case PNext::VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR:
        result=(VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR*)malloc(sizeof(VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR));
        result[0]=deserialize_struct(reader.getVkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR());
        return result;
    

    case PNext::VkPipelineInfoKHR:
        result=(VkPipelineInfoKHR*)malloc(sizeof(VkPipelineInfoKHR));
        result[0]=deserialize_struct(reader.getVkPipelineInfoKHR());
        return result;
    

    case PNext::VkPipelineExecutablePropertiesKHR:
        result=(VkPipelineExecutablePropertiesKHR*)malloc(sizeof(VkPipelineExecutablePropertiesKHR));
        result[0]=deserialize_struct(reader.getVkPipelineExecutablePropertiesKHR());
        return result;
    

    case PNext::VkPipelineExecutableInfoKHR:
        result=(VkPipelineExecutableInfoKHR*)malloc(sizeof(VkPipelineExecutableInfoKHR));
        result[0]=deserialize_struct(reader.getVkPipelineExecutableInfoKHR());
        return result;
    

    case PNext::VkPipelineExecutableStatisticValueKHR:
        result=(VkPipelineExecutableStatisticValueKHR*)malloc(sizeof(VkPipelineExecutableStatisticValueKHR));
        result[0]=deserialize_struct(reader.getVkPipelineExecutableStatisticValueKHR());
        return result;
    

    case PNext::VkPipelineExecutableStatisticKHR:
        result=(VkPipelineExecutableStatisticKHR*)malloc(sizeof(VkPipelineExecutableStatisticKHR));
        result[0]=deserialize_struct(reader.getVkPipelineExecutableStatisticKHR());
        return result;
    

    case PNext::VkPipelineExecutableInternalRepresentationKHR:
        result=(VkPipelineExecutableInternalRepresentationKHR*)malloc(sizeof(VkPipelineExecutableInternalRepresentationKHR));
        result[0]=deserialize_struct(reader.getVkPipelineExecutableInternalRepresentationKHR());
        return result;
    

    case PNext::VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures:
        result=(VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures*)malloc(sizeof(VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceShaderDemoteToHelperInvocationFeatures());
        return result;
    

    case PNext::VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT:
        result=(VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceTexelBufferAlignmentFeaturesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceTexelBufferAlignmentProperties:
        result=(VkPhysicalDeviceTexelBufferAlignmentProperties*)malloc(sizeof(VkPhysicalDeviceTexelBufferAlignmentProperties));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceTexelBufferAlignmentProperties());
        return result;
    

    case PNext::VkPhysicalDeviceSubgroupSizeControlFeatures:
        result=(VkPhysicalDeviceSubgroupSizeControlFeatures*)malloc(sizeof(VkPhysicalDeviceSubgroupSizeControlFeatures));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceSubgroupSizeControlFeatures());
        return result;
    

    case PNext::VkPhysicalDeviceSubgroupSizeControlProperties:
        result=(VkPhysicalDeviceSubgroupSizeControlProperties*)malloc(sizeof(VkPhysicalDeviceSubgroupSizeControlProperties));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceSubgroupSizeControlProperties());
        return result;
    

    case PNext::VkPipelineShaderStageRequiredSubgroupSizeCreateInfo:
        result=(VkPipelineShaderStageRequiredSubgroupSizeCreateInfo*)malloc(sizeof(VkPipelineShaderStageRequiredSubgroupSizeCreateInfo));
        result[0]=deserialize_struct(reader.getVkPipelineShaderStageRequiredSubgroupSizeCreateInfo());
        return result;
    

    case PNext::VkSubpassShadingPipelineCreateInfoHUAWEI:
        result=(VkSubpassShadingPipelineCreateInfoHUAWEI*)malloc(sizeof(VkSubpassShadingPipelineCreateInfoHUAWEI));
        result[0]=deserialize_struct(reader.getVkSubpassShadingPipelineCreateInfoHUAWEI());
        return result;
    

    case PNext::VkPhysicalDeviceSubpassShadingPropertiesHUAWEI:
        result=(VkPhysicalDeviceSubpassShadingPropertiesHUAWEI*)malloc(sizeof(VkPhysicalDeviceSubpassShadingPropertiesHUAWEI));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceSubpassShadingPropertiesHUAWEI());
        return result;
    

    case PNext::VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI:
        result=(VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI*)malloc(sizeof(VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI());
        return result;
    

    case PNext::VkMemoryOpaqueCaptureAddressAllocateInfo:
        result=(VkMemoryOpaqueCaptureAddressAllocateInfo*)malloc(sizeof(VkMemoryOpaqueCaptureAddressAllocateInfo));
        result[0]=deserialize_struct(reader.getVkMemoryOpaqueCaptureAddressAllocateInfo());
        return result;
    

    case PNext::VkDeviceMemoryOpaqueCaptureAddressInfo:
        result=(VkDeviceMemoryOpaqueCaptureAddressInfo*)malloc(sizeof(VkDeviceMemoryOpaqueCaptureAddressInfo));
        result[0]=deserialize_struct(reader.getVkDeviceMemoryOpaqueCaptureAddressInfo());
        return result;
    

    case PNext::VkPhysicalDeviceLineRasterizationFeaturesEXT:
        result=(VkPhysicalDeviceLineRasterizationFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceLineRasterizationFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceLineRasterizationFeaturesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceLineRasterizationPropertiesEXT:
        result=(VkPhysicalDeviceLineRasterizationPropertiesEXT*)malloc(sizeof(VkPhysicalDeviceLineRasterizationPropertiesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceLineRasterizationPropertiesEXT());
        return result;
    

    case PNext::VkPipelineRasterizationLineStateCreateInfoEXT:
        result=(VkPipelineRasterizationLineStateCreateInfoEXT*)malloc(sizeof(VkPipelineRasterizationLineStateCreateInfoEXT));
        result[0]=deserialize_struct(reader.getVkPipelineRasterizationLineStateCreateInfoEXT());
        return result;
    

    case PNext::VkPhysicalDevicePipelineCreationCacheControlFeatures:
        result=(VkPhysicalDevicePipelineCreationCacheControlFeatures*)malloc(sizeof(VkPhysicalDevicePipelineCreationCacheControlFeatures));
        result[0]=deserialize_struct(reader.getVkPhysicalDevicePipelineCreationCacheControlFeatures());
        return result;
    

    case PNext::VkPhysicalDeviceVulkan11Features:
        result=(VkPhysicalDeviceVulkan11Features*)malloc(sizeof(VkPhysicalDeviceVulkan11Features));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceVulkan11Features());
        return result;
    

    case PNext::VkPhysicalDeviceVulkan11Properties:
        result=(VkPhysicalDeviceVulkan11Properties*)malloc(sizeof(VkPhysicalDeviceVulkan11Properties));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceVulkan11Properties());
        return result;
    

    case PNext::VkPhysicalDeviceVulkan12Features:
        result=(VkPhysicalDeviceVulkan12Features*)malloc(sizeof(VkPhysicalDeviceVulkan12Features));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceVulkan12Features());
        return result;
    

    case PNext::VkPhysicalDeviceVulkan12Properties:
        result=(VkPhysicalDeviceVulkan12Properties*)malloc(sizeof(VkPhysicalDeviceVulkan12Properties));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceVulkan12Properties());
        return result;
    

    case PNext::VkPhysicalDeviceVulkan13Features:
        result=(VkPhysicalDeviceVulkan13Features*)malloc(sizeof(VkPhysicalDeviceVulkan13Features));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceVulkan13Features());
        return result;
    

    case PNext::VkPhysicalDeviceVulkan13Properties:
        result=(VkPhysicalDeviceVulkan13Properties*)malloc(sizeof(VkPhysicalDeviceVulkan13Properties));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceVulkan13Properties());
        return result;
    

    case PNext::VkPipelineCompilerControlCreateInfoAMD:
        result=(VkPipelineCompilerControlCreateInfoAMD*)malloc(sizeof(VkPipelineCompilerControlCreateInfoAMD));
        result[0]=deserialize_struct(reader.getVkPipelineCompilerControlCreateInfoAMD());
        return result;
    

    case PNext::VkPhysicalDeviceCoherentMemoryFeaturesAMD:
        result=(VkPhysicalDeviceCoherentMemoryFeaturesAMD*)malloc(sizeof(VkPhysicalDeviceCoherentMemoryFeaturesAMD));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceCoherentMemoryFeaturesAMD());
        return result;
    

    case PNext::VkPhysicalDeviceToolProperties:
        result=(VkPhysicalDeviceToolProperties*)malloc(sizeof(VkPhysicalDeviceToolProperties));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceToolProperties());
        return result;
    

    case PNext::VkSamplerCustomBorderColorCreateInfoEXT:
        result=(VkSamplerCustomBorderColorCreateInfoEXT*)malloc(sizeof(VkSamplerCustomBorderColorCreateInfoEXT));
        result[0]=deserialize_struct(reader.getVkSamplerCustomBorderColorCreateInfoEXT());
        return result;
    

    case PNext::VkPhysicalDeviceCustomBorderColorPropertiesEXT:
        result=(VkPhysicalDeviceCustomBorderColorPropertiesEXT*)malloc(sizeof(VkPhysicalDeviceCustomBorderColorPropertiesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceCustomBorderColorPropertiesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceCustomBorderColorFeaturesEXT:
        result=(VkPhysicalDeviceCustomBorderColorFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceCustomBorderColorFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceCustomBorderColorFeaturesEXT());
        return result;
    

    case PNext::VkSamplerBorderColorComponentMappingCreateInfoEXT:
        result=(VkSamplerBorderColorComponentMappingCreateInfoEXT*)malloc(sizeof(VkSamplerBorderColorComponentMappingCreateInfoEXT));
        result[0]=deserialize_struct(reader.getVkSamplerBorderColorComponentMappingCreateInfoEXT());
        return result;
    

    case PNext::VkPhysicalDeviceBorderColorSwizzleFeaturesEXT:
        result=(VkPhysicalDeviceBorderColorSwizzleFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceBorderColorSwizzleFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceBorderColorSwizzleFeaturesEXT());
        return result;
    

    case PNext::VkDeviceOrHostAddressKHR:
        result=(VkDeviceOrHostAddressKHR*)malloc(sizeof(VkDeviceOrHostAddressKHR));
        result[0]=deserialize_struct(reader.getVkDeviceOrHostAddressKHR());
        return result;
    

    case PNext::VkDeviceOrHostAddressConstKHR:
        result=(VkDeviceOrHostAddressConstKHR*)malloc(sizeof(VkDeviceOrHostAddressConstKHR));
        result[0]=deserialize_struct(reader.getVkDeviceOrHostAddressConstKHR());
        return result;
    

    case PNext::VkAccelerationStructureGeometryTrianglesDataKHR:
        result=(VkAccelerationStructureGeometryTrianglesDataKHR*)malloc(sizeof(VkAccelerationStructureGeometryTrianglesDataKHR));
        result[0]=deserialize_struct(reader.getVkAccelerationStructureGeometryTrianglesDataKHR());
        return result;
    

    case PNext::VkAccelerationStructureGeometryAabbsDataKHR:
        result=(VkAccelerationStructureGeometryAabbsDataKHR*)malloc(sizeof(VkAccelerationStructureGeometryAabbsDataKHR));
        result[0]=deserialize_struct(reader.getVkAccelerationStructureGeometryAabbsDataKHR());
        return result;
    

    case PNext::VkAccelerationStructureGeometryInstancesDataKHR:
        result=(VkAccelerationStructureGeometryInstancesDataKHR*)malloc(sizeof(VkAccelerationStructureGeometryInstancesDataKHR));
        result[0]=deserialize_struct(reader.getVkAccelerationStructureGeometryInstancesDataKHR());
        return result;
    

    case PNext::VkAccelerationStructureGeometryDataKHR:
        result=(VkAccelerationStructureGeometryDataKHR*)malloc(sizeof(VkAccelerationStructureGeometryDataKHR));
        result[0]=deserialize_struct(reader.getVkAccelerationStructureGeometryDataKHR());
        return result;
    

    case PNext::VkAccelerationStructureGeometryKHR:
        result=(VkAccelerationStructureGeometryKHR*)malloc(sizeof(VkAccelerationStructureGeometryKHR));
        result[0]=deserialize_struct(reader.getVkAccelerationStructureGeometryKHR());
        return result;
    

    case PNext::VkAccelerationStructureBuildGeometryInfoKHR:
        result=(VkAccelerationStructureBuildGeometryInfoKHR*)malloc(sizeof(VkAccelerationStructureBuildGeometryInfoKHR));
        result[0]=deserialize_struct(reader.getVkAccelerationStructureBuildGeometryInfoKHR());
        return result;
    

    case PNext::VkAccelerationStructureBuildRangeInfoKHR:
        result=(VkAccelerationStructureBuildRangeInfoKHR*)malloc(sizeof(VkAccelerationStructureBuildRangeInfoKHR));
        result[0]=deserialize_struct(reader.getVkAccelerationStructureBuildRangeInfoKHR());
        return result;
    

    case PNext::VkAccelerationStructureCreateInfoKHR:
        result=(VkAccelerationStructureCreateInfoKHR*)malloc(sizeof(VkAccelerationStructureCreateInfoKHR));
        result[0]=deserialize_struct(reader.getVkAccelerationStructureCreateInfoKHR());
        return result;
    

    case PNext::VkAabbPositionsKHR:
        result=(VkAabbPositionsKHR*)malloc(sizeof(VkAabbPositionsKHR));
        result[0]=deserialize_struct(reader.getVkAabbPositionsKHR());
        return result;
    

    case PNext::VkTransformMatrixKHR:
        result=(VkTransformMatrixKHR*)malloc(sizeof(VkTransformMatrixKHR));
        result[0]=deserialize_struct(reader.getVkTransformMatrixKHR());
        return result;
    

    case PNext::VkAccelerationStructureInstanceKHR:
        result=(VkAccelerationStructureInstanceKHR*)malloc(sizeof(VkAccelerationStructureInstanceKHR));
        result[0]=deserialize_struct(reader.getVkAccelerationStructureInstanceKHR());
        return result;
    

    case PNext::VkAccelerationStructureDeviceAddressInfoKHR:
        result=(VkAccelerationStructureDeviceAddressInfoKHR*)malloc(sizeof(VkAccelerationStructureDeviceAddressInfoKHR));
        result[0]=deserialize_struct(reader.getVkAccelerationStructureDeviceAddressInfoKHR());
        return result;
    

    case PNext::VkAccelerationStructureVersionInfoKHR:
        result=(VkAccelerationStructureVersionInfoKHR*)malloc(sizeof(VkAccelerationStructureVersionInfoKHR));
        result[0]=deserialize_struct(reader.getVkAccelerationStructureVersionInfoKHR());
        return result;
    

    case PNext::VkCopyAccelerationStructureInfoKHR:
        result=(VkCopyAccelerationStructureInfoKHR*)malloc(sizeof(VkCopyAccelerationStructureInfoKHR));
        result[0]=deserialize_struct(reader.getVkCopyAccelerationStructureInfoKHR());
        return result;
    

    case PNext::VkCopyAccelerationStructureToMemoryInfoKHR:
        result=(VkCopyAccelerationStructureToMemoryInfoKHR*)malloc(sizeof(VkCopyAccelerationStructureToMemoryInfoKHR));
        result[0]=deserialize_struct(reader.getVkCopyAccelerationStructureToMemoryInfoKHR());
        return result;
    

    case PNext::VkCopyMemoryToAccelerationStructureInfoKHR:
        result=(VkCopyMemoryToAccelerationStructureInfoKHR*)malloc(sizeof(VkCopyMemoryToAccelerationStructureInfoKHR));
        result[0]=deserialize_struct(reader.getVkCopyMemoryToAccelerationStructureInfoKHR());
        return result;
    

    case PNext::VkRayTracingPipelineInterfaceCreateInfoKHR:
        result=(VkRayTracingPipelineInterfaceCreateInfoKHR*)malloc(sizeof(VkRayTracingPipelineInterfaceCreateInfoKHR));
        result[0]=deserialize_struct(reader.getVkRayTracingPipelineInterfaceCreateInfoKHR());
        return result;
    

    case PNext::VkPipelineLibraryCreateInfoKHR:
        result=(VkPipelineLibraryCreateInfoKHR*)malloc(sizeof(VkPipelineLibraryCreateInfoKHR));
        result[0]=deserialize_struct(reader.getVkPipelineLibraryCreateInfoKHR());
        return result;
    

    case PNext::VkPhysicalDeviceExtendedDynamicStateFeaturesEXT:
        result=(VkPhysicalDeviceExtendedDynamicStateFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceExtendedDynamicStateFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceExtendedDynamicStateFeaturesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceExtendedDynamicState2FeaturesEXT:
        result=(VkPhysicalDeviceExtendedDynamicState2FeaturesEXT*)malloc(sizeof(VkPhysicalDeviceExtendedDynamicState2FeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceExtendedDynamicState2FeaturesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceExtendedDynamicState3FeaturesEXT:
        result=(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT*)malloc(sizeof(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceExtendedDynamicState3FeaturesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceExtendedDynamicState3PropertiesEXT:
        result=(VkPhysicalDeviceExtendedDynamicState3PropertiesEXT*)malloc(sizeof(VkPhysicalDeviceExtendedDynamicState3PropertiesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceExtendedDynamicState3PropertiesEXT());
        return result;
    

    case PNext::VkColorBlendEquationEXT:
        result=(VkColorBlendEquationEXT*)malloc(sizeof(VkColorBlendEquationEXT));
        result[0]=deserialize_struct(reader.getVkColorBlendEquationEXT());
        return result;
    

    case PNext::VkColorBlendAdvancedEXT:
        result=(VkColorBlendAdvancedEXT*)malloc(sizeof(VkColorBlendAdvancedEXT));
        result[0]=deserialize_struct(reader.getVkColorBlendAdvancedEXT());
        return result;
    

    case PNext::VkRenderPassTransformBeginInfoQCOM:
        result=(VkRenderPassTransformBeginInfoQCOM*)malloc(sizeof(VkRenderPassTransformBeginInfoQCOM));
        result[0]=deserialize_struct(reader.getVkRenderPassTransformBeginInfoQCOM());
        return result;
    

    case PNext::VkCopyCommandTransformInfoQCOM:
        result=(VkCopyCommandTransformInfoQCOM*)malloc(sizeof(VkCopyCommandTransformInfoQCOM));
        result[0]=deserialize_struct(reader.getVkCopyCommandTransformInfoQCOM());
        return result;
    

    case PNext::VkCommandBufferInheritanceRenderPassTransformInfoQCOM:
        result=(VkCommandBufferInheritanceRenderPassTransformInfoQCOM*)malloc(sizeof(VkCommandBufferInheritanceRenderPassTransformInfoQCOM));
        result[0]=deserialize_struct(reader.getVkCommandBufferInheritanceRenderPassTransformInfoQCOM());
        return result;
    

    case PNext::VkPhysicalDeviceDiagnosticsConfigFeaturesNV:
        result=(VkPhysicalDeviceDiagnosticsConfigFeaturesNV*)malloc(sizeof(VkPhysicalDeviceDiagnosticsConfigFeaturesNV));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceDiagnosticsConfigFeaturesNV());
        return result;
    

    case PNext::VkDeviceDiagnosticsConfigCreateInfoNV:
        result=(VkDeviceDiagnosticsConfigCreateInfoNV*)malloc(sizeof(VkDeviceDiagnosticsConfigCreateInfoNV));
        result[0]=deserialize_struct(reader.getVkDeviceDiagnosticsConfigCreateInfoNV());
        return result;
    

    case PNext::VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures:
        result=(VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures*)malloc(sizeof(VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures());
        return result;
    

    case PNext::VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR:
        result=(VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR*)malloc(sizeof(VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR());
        return result;
    

    case PNext::VkPhysicalDeviceRobustness2FeaturesEXT:
        result=(VkPhysicalDeviceRobustness2FeaturesEXT*)malloc(sizeof(VkPhysicalDeviceRobustness2FeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceRobustness2FeaturesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceRobustness2PropertiesEXT:
        result=(VkPhysicalDeviceRobustness2PropertiesEXT*)malloc(sizeof(VkPhysicalDeviceRobustness2PropertiesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceRobustness2PropertiesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceImageRobustnessFeatures:
        result=(VkPhysicalDeviceImageRobustnessFeatures*)malloc(sizeof(VkPhysicalDeviceImageRobustnessFeatures));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceImageRobustnessFeatures());
        return result;
    

    case PNext::VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR:
        result=(VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR*)malloc(sizeof(VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR());
        return result;
    

    case PNext::VkPhysicalDevice4444FormatsFeaturesEXT:
        result=(VkPhysicalDevice4444FormatsFeaturesEXT*)malloc(sizeof(VkPhysicalDevice4444FormatsFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDevice4444FormatsFeaturesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceSubpassShadingFeaturesHUAWEI:
        result=(VkPhysicalDeviceSubpassShadingFeaturesHUAWEI*)malloc(sizeof(VkPhysicalDeviceSubpassShadingFeaturesHUAWEI));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceSubpassShadingFeaturesHUAWEI());
        return result;
    

    case PNext::VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI:
        result=(VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI*)malloc(sizeof(VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI());
        return result;
    

    case PNext::VkBufferCopy2:
        result=(VkBufferCopy2*)malloc(sizeof(VkBufferCopy2));
        result[0]=deserialize_struct(reader.getVkBufferCopy2());
        return result;
    

    case PNext::VkImageCopy2:
        result=(VkImageCopy2*)malloc(sizeof(VkImageCopy2));
        result[0]=deserialize_struct(reader.getVkImageCopy2());
        return result;
    

    case PNext::VkImageBlit2:
        result=(VkImageBlit2*)malloc(sizeof(VkImageBlit2));
        result[0]=deserialize_struct(reader.getVkImageBlit2());
        return result;
    

    case PNext::VkBufferImageCopy2:
        result=(VkBufferImageCopy2*)malloc(sizeof(VkBufferImageCopy2));
        result[0]=deserialize_struct(reader.getVkBufferImageCopy2());
        return result;
    

    case PNext::VkImageResolve2:
        result=(VkImageResolve2*)malloc(sizeof(VkImageResolve2));
        result[0]=deserialize_struct(reader.getVkImageResolve2());
        return result;
    

    case PNext::VkCopyBufferInfo2:
        result=(VkCopyBufferInfo2*)malloc(sizeof(VkCopyBufferInfo2));
        result[0]=deserialize_struct(reader.getVkCopyBufferInfo2());
        return result;
    

    case PNext::VkCopyImageInfo2:
        result=(VkCopyImageInfo2*)malloc(sizeof(VkCopyImageInfo2));
        result[0]=deserialize_struct(reader.getVkCopyImageInfo2());
        return result;
    

    case PNext::VkBlitImageInfo2:
        result=(VkBlitImageInfo2*)malloc(sizeof(VkBlitImageInfo2));
        result[0]=deserialize_struct(reader.getVkBlitImageInfo2());
        return result;
    

    case PNext::VkCopyBufferToImageInfo2:
        result=(VkCopyBufferToImageInfo2*)malloc(sizeof(VkCopyBufferToImageInfo2));
        result[0]=deserialize_struct(reader.getVkCopyBufferToImageInfo2());
        return result;
    

    case PNext::VkCopyImageToBufferInfo2:
        result=(VkCopyImageToBufferInfo2*)malloc(sizeof(VkCopyImageToBufferInfo2));
        result[0]=deserialize_struct(reader.getVkCopyImageToBufferInfo2());
        return result;
    

    case PNext::VkResolveImageInfo2:
        result=(VkResolveImageInfo2*)malloc(sizeof(VkResolveImageInfo2));
        result[0]=deserialize_struct(reader.getVkResolveImageInfo2());
        return result;
    

    case PNext::VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT:
        result=(VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT*)malloc(sizeof(VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT());
        return result;
    

    case PNext::VkFragmentShadingRateAttachmentInfoKHR:
        result=(VkFragmentShadingRateAttachmentInfoKHR*)malloc(sizeof(VkFragmentShadingRateAttachmentInfoKHR));
        result[0]=deserialize_struct(reader.getVkFragmentShadingRateAttachmentInfoKHR());
        return result;
    

    case PNext::VkPipelineFragmentShadingRateStateCreateInfoKHR:
        result=(VkPipelineFragmentShadingRateStateCreateInfoKHR*)malloc(sizeof(VkPipelineFragmentShadingRateStateCreateInfoKHR));
        result[0]=deserialize_struct(reader.getVkPipelineFragmentShadingRateStateCreateInfoKHR());
        return result;
    

    case PNext::VkPhysicalDeviceFragmentShadingRateFeaturesKHR:
        result=(VkPhysicalDeviceFragmentShadingRateFeaturesKHR*)malloc(sizeof(VkPhysicalDeviceFragmentShadingRateFeaturesKHR));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceFragmentShadingRateFeaturesKHR());
        return result;
    

    case PNext::VkPhysicalDeviceFragmentShadingRatePropertiesKHR:
        result=(VkPhysicalDeviceFragmentShadingRatePropertiesKHR*)malloc(sizeof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceFragmentShadingRatePropertiesKHR());
        return result;
    

    case PNext::VkPhysicalDeviceFragmentShadingRateKHR:
        result=(VkPhysicalDeviceFragmentShadingRateKHR*)malloc(sizeof(VkPhysicalDeviceFragmentShadingRateKHR));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceFragmentShadingRateKHR());
        return result;
    

    case PNext::VkPhysicalDeviceShaderTerminateInvocationFeatures:
        result=(VkPhysicalDeviceShaderTerminateInvocationFeatures*)malloc(sizeof(VkPhysicalDeviceShaderTerminateInvocationFeatures));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceShaderTerminateInvocationFeatures());
        return result;
    

    case PNext::VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV:
        result=(VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV*)malloc(sizeof(VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV());
        return result;
    

    case PNext::VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV:
        result=(VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV*)malloc(sizeof(VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV());
        return result;
    

    case PNext::VkPipelineFragmentShadingRateEnumStateCreateInfoNV:
        result=(VkPipelineFragmentShadingRateEnumStateCreateInfoNV*)malloc(sizeof(VkPipelineFragmentShadingRateEnumStateCreateInfoNV));
        result[0]=deserialize_struct(reader.getVkPipelineFragmentShadingRateEnumStateCreateInfoNV());
        return result;
    

    case PNext::VkAccelerationStructureBuildSizesInfoKHR:
        result=(VkAccelerationStructureBuildSizesInfoKHR*)malloc(sizeof(VkAccelerationStructureBuildSizesInfoKHR));
        result[0]=deserialize_struct(reader.getVkAccelerationStructureBuildSizesInfoKHR());
        return result;
    

    case PNext::VkPhysicalDeviceImage2DViewOf3DFeaturesEXT:
        result=(VkPhysicalDeviceImage2DViewOf3DFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceImage2DViewOf3DFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceImage2DViewOf3DFeaturesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT:
        result=(VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT:
        result=(VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT:
        result=(VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceMutableDescriptorTypeFeaturesEXT());
        return result;
    

    case PNext::VkMutableDescriptorTypeListEXT:
        result=(VkMutableDescriptorTypeListEXT*)malloc(sizeof(VkMutableDescriptorTypeListEXT));
        result[0]=deserialize_struct(reader.getVkMutableDescriptorTypeListEXT());
        return result;
    

    case PNext::VkMutableDescriptorTypeCreateInfoEXT:
        result=(VkMutableDescriptorTypeCreateInfoEXT*)malloc(sizeof(VkMutableDescriptorTypeCreateInfoEXT));
        result[0]=deserialize_struct(reader.getVkMutableDescriptorTypeCreateInfoEXT());
        return result;
    

    case PNext::VkPhysicalDeviceDepthClipControlFeaturesEXT:
        result=(VkPhysicalDeviceDepthClipControlFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceDepthClipControlFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceDepthClipControlFeaturesEXT());
        return result;
    

    case PNext::VkPipelineViewportDepthClipControlCreateInfoEXT:
        result=(VkPipelineViewportDepthClipControlCreateInfoEXT*)malloc(sizeof(VkPipelineViewportDepthClipControlCreateInfoEXT));
        result[0]=deserialize_struct(reader.getVkPipelineViewportDepthClipControlCreateInfoEXT());
        return result;
    

    case PNext::VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT:
        result=(VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceVertexInputDynamicStateFeaturesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceExternalMemoryRDMAFeaturesNV:
        result=(VkPhysicalDeviceExternalMemoryRDMAFeaturesNV*)malloc(sizeof(VkPhysicalDeviceExternalMemoryRDMAFeaturesNV));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceExternalMemoryRDMAFeaturesNV());
        return result;
    

    case PNext::VkVertexInputBindingDescription2EXT:
        result=(VkVertexInputBindingDescription2EXT*)malloc(sizeof(VkVertexInputBindingDescription2EXT));
        result[0]=deserialize_struct(reader.getVkVertexInputBindingDescription2EXT());
        return result;
    

    case PNext::VkVertexInputAttributeDescription2EXT:
        result=(VkVertexInputAttributeDescription2EXT*)malloc(sizeof(VkVertexInputAttributeDescription2EXT));
        result[0]=deserialize_struct(reader.getVkVertexInputAttributeDescription2EXT());
        return result;
    

    case PNext::VkPhysicalDeviceColorWriteEnableFeaturesEXT:
        result=(VkPhysicalDeviceColorWriteEnableFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceColorWriteEnableFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceColorWriteEnableFeaturesEXT());
        return result;
    

    case PNext::VkPipelineColorWriteCreateInfoEXT:
        result=(VkPipelineColorWriteCreateInfoEXT*)malloc(sizeof(VkPipelineColorWriteCreateInfoEXT));
        result[0]=deserialize_struct(reader.getVkPipelineColorWriteCreateInfoEXT());
        return result;
    

    case PNext::VkMemoryBarrier2:
        result=(VkMemoryBarrier2*)malloc(sizeof(VkMemoryBarrier2));
        result[0]=deserialize_struct(reader.getVkMemoryBarrier2());
        return result;
    

    case PNext::VkImageMemoryBarrier2:
        result=(VkImageMemoryBarrier2*)malloc(sizeof(VkImageMemoryBarrier2));
        result[0]=deserialize_struct(reader.getVkImageMemoryBarrier2());
        return result;
    

    case PNext::VkBufferMemoryBarrier2:
        result=(VkBufferMemoryBarrier2*)malloc(sizeof(VkBufferMemoryBarrier2));
        result[0]=deserialize_struct(reader.getVkBufferMemoryBarrier2());
        return result;
    

    case PNext::VkDependencyInfo:
        result=(VkDependencyInfo*)malloc(sizeof(VkDependencyInfo));
        result[0]=deserialize_struct(reader.getVkDependencyInfo());
        return result;
    

    case PNext::VkSemaphoreSubmitInfo:
        result=(VkSemaphoreSubmitInfo*)malloc(sizeof(VkSemaphoreSubmitInfo));
        result[0]=deserialize_struct(reader.getVkSemaphoreSubmitInfo());
        return result;
    

    case PNext::VkCommandBufferSubmitInfo:
        result=(VkCommandBufferSubmitInfo*)malloc(sizeof(VkCommandBufferSubmitInfo));
        result[0]=deserialize_struct(reader.getVkCommandBufferSubmitInfo());
        return result;
    

    case PNext::VkSubmitInfo2:
        result=(VkSubmitInfo2*)malloc(sizeof(VkSubmitInfo2));
        result[0]=deserialize_struct(reader.getVkSubmitInfo2());
        return result;
    

    case PNext::VkQueueFamilyCheckpointProperties2NV:
        result=(VkQueueFamilyCheckpointProperties2NV*)malloc(sizeof(VkQueueFamilyCheckpointProperties2NV));
        result[0]=deserialize_struct(reader.getVkQueueFamilyCheckpointProperties2NV());
        return result;
    

    case PNext::VkCheckpointData2NV:
        result=(VkCheckpointData2NV*)malloc(sizeof(VkCheckpointData2NV));
        result[0]=deserialize_struct(reader.getVkCheckpointData2NV());
        return result;
    

    case PNext::VkPhysicalDeviceSynchronization2Features:
        result=(VkPhysicalDeviceSynchronization2Features*)malloc(sizeof(VkPhysicalDeviceSynchronization2Features));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceSynchronization2Features());
        return result;
    

    case PNext::VkPhysicalDeviceHostImageCopyFeaturesEXT:
        result=(VkPhysicalDeviceHostImageCopyFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceHostImageCopyFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceHostImageCopyFeaturesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceHostImageCopyPropertiesEXT:
        result=(VkPhysicalDeviceHostImageCopyPropertiesEXT*)malloc(sizeof(VkPhysicalDeviceHostImageCopyPropertiesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceHostImageCopyPropertiesEXT());
        return result;
    

    case PNext::VkMemoryToImageCopyEXT:
        result=(VkMemoryToImageCopyEXT*)malloc(sizeof(VkMemoryToImageCopyEXT));
        result[0]=deserialize_struct(reader.getVkMemoryToImageCopyEXT());
        return result;
    

    case PNext::VkImageToMemoryCopyEXT:
        result=(VkImageToMemoryCopyEXT*)malloc(sizeof(VkImageToMemoryCopyEXT));
        result[0]=deserialize_struct(reader.getVkImageToMemoryCopyEXT());
        return result;
    

    case PNext::VkCopyMemoryToImageInfoEXT:
        result=(VkCopyMemoryToImageInfoEXT*)malloc(sizeof(VkCopyMemoryToImageInfoEXT));
        result[0]=deserialize_struct(reader.getVkCopyMemoryToImageInfoEXT());
        return result;
    

    case PNext::VkCopyImageToMemoryInfoEXT:
        result=(VkCopyImageToMemoryInfoEXT*)malloc(sizeof(VkCopyImageToMemoryInfoEXT));
        result[0]=deserialize_struct(reader.getVkCopyImageToMemoryInfoEXT());
        return result;
    

    case PNext::VkCopyImageToImageInfoEXT:
        result=(VkCopyImageToImageInfoEXT*)malloc(sizeof(VkCopyImageToImageInfoEXT));
        result[0]=deserialize_struct(reader.getVkCopyImageToImageInfoEXT());
        return result;
    

    case PNext::VkHostImageLayoutTransitionInfoEXT:
        result=(VkHostImageLayoutTransitionInfoEXT*)malloc(sizeof(VkHostImageLayoutTransitionInfoEXT));
        result[0]=deserialize_struct(reader.getVkHostImageLayoutTransitionInfoEXT());
        return result;
    

    case PNext::VkSubresourceHostMemcpySizeEXT:
        result=(VkSubresourceHostMemcpySizeEXT*)malloc(sizeof(VkSubresourceHostMemcpySizeEXT));
        result[0]=deserialize_struct(reader.getVkSubresourceHostMemcpySizeEXT());
        return result;
    

    case PNext::VkHostImageCopyDevicePerformanceQueryEXT:
        result=(VkHostImageCopyDevicePerformanceQueryEXT*)malloc(sizeof(VkHostImageCopyDevicePerformanceQueryEXT));
        result[0]=deserialize_struct(reader.getVkHostImageCopyDevicePerformanceQueryEXT());
        return result;
    

    case PNext::VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT:
        result=(VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT*)malloc(sizeof(VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceLegacyDitheringFeaturesEXT:
        result=(VkPhysicalDeviceLegacyDitheringFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceLegacyDitheringFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceLegacyDitheringFeaturesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT:
        result=(VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT());
        return result;
    

    case PNext::VkSubpassResolvePerformanceQueryEXT:
        result=(VkSubpassResolvePerformanceQueryEXT*)malloc(sizeof(VkSubpassResolvePerformanceQueryEXT));
        result[0]=deserialize_struct(reader.getVkSubpassResolvePerformanceQueryEXT());
        return result;
    

    case PNext::VkMultisampledRenderToSingleSampledInfoEXT:
        result=(VkMultisampledRenderToSingleSampledInfoEXT*)malloc(sizeof(VkMultisampledRenderToSingleSampledInfoEXT));
        result[0]=deserialize_struct(reader.getVkMultisampledRenderToSingleSampledInfoEXT());
        return result;
    

    case PNext::VkPhysicalDevicePipelineProtectedAccessFeaturesEXT:
        result=(VkPhysicalDevicePipelineProtectedAccessFeaturesEXT*)malloc(sizeof(VkPhysicalDevicePipelineProtectedAccessFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDevicePipelineProtectedAccessFeaturesEXT());
        return result;
    

    case PNext::VkQueueFamilyVideoPropertiesKHR:
        result=(VkQueueFamilyVideoPropertiesKHR*)malloc(sizeof(VkQueueFamilyVideoPropertiesKHR));
        result[0]=deserialize_struct(reader.getVkQueueFamilyVideoPropertiesKHR());
        return result;
    

    case PNext::VkQueueFamilyQueryResultStatusPropertiesKHR:
        result=(VkQueueFamilyQueryResultStatusPropertiesKHR*)malloc(sizeof(VkQueueFamilyQueryResultStatusPropertiesKHR));
        result[0]=deserialize_struct(reader.getVkQueueFamilyQueryResultStatusPropertiesKHR());
        return result;
    

    case PNext::VkVideoProfileListInfoKHR:
        result=(VkVideoProfileListInfoKHR*)malloc(sizeof(VkVideoProfileListInfoKHR));
        result[0]=deserialize_struct(reader.getVkVideoProfileListInfoKHR());
        return result;
    

    case PNext::VkPhysicalDeviceVideoFormatInfoKHR:
        result=(VkPhysicalDeviceVideoFormatInfoKHR*)malloc(sizeof(VkPhysicalDeviceVideoFormatInfoKHR));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceVideoFormatInfoKHR());
        return result;
    

    case PNext::VkVideoFormatPropertiesKHR:
        result=(VkVideoFormatPropertiesKHR*)malloc(sizeof(VkVideoFormatPropertiesKHR));
        result[0]=deserialize_struct(reader.getVkVideoFormatPropertiesKHR());
        return result;
    

    case PNext::VkVideoProfileInfoKHR:
        result=(VkVideoProfileInfoKHR*)malloc(sizeof(VkVideoProfileInfoKHR));
        result[0]=deserialize_struct(reader.getVkVideoProfileInfoKHR());
        return result;
    

    case PNext::VkVideoCapabilitiesKHR:
        result=(VkVideoCapabilitiesKHR*)malloc(sizeof(VkVideoCapabilitiesKHR));
        result[0]=deserialize_struct(reader.getVkVideoCapabilitiesKHR());
        return result;
    

    case PNext::VkVideoSessionMemoryRequirementsKHR:
        result=(VkVideoSessionMemoryRequirementsKHR*)malloc(sizeof(VkVideoSessionMemoryRequirementsKHR));
        result[0]=deserialize_struct(reader.getVkVideoSessionMemoryRequirementsKHR());
        return result;
    

    case PNext::VkBindVideoSessionMemoryInfoKHR:
        result=(VkBindVideoSessionMemoryInfoKHR*)malloc(sizeof(VkBindVideoSessionMemoryInfoKHR));
        result[0]=deserialize_struct(reader.getVkBindVideoSessionMemoryInfoKHR());
        return result;
    

    case PNext::VkVideoPictureResourceInfoKHR:
        result=(VkVideoPictureResourceInfoKHR*)malloc(sizeof(VkVideoPictureResourceInfoKHR));
        result[0]=deserialize_struct(reader.getVkVideoPictureResourceInfoKHR());
        return result;
    

    case PNext::VkVideoReferenceSlotInfoKHR:
        result=(VkVideoReferenceSlotInfoKHR*)malloc(sizeof(VkVideoReferenceSlotInfoKHR));
        result[0]=deserialize_struct(reader.getVkVideoReferenceSlotInfoKHR());
        return result;
    

    case PNext::VkVideoDecodeCapabilitiesKHR:
        result=(VkVideoDecodeCapabilitiesKHR*)malloc(sizeof(VkVideoDecodeCapabilitiesKHR));
        result[0]=deserialize_struct(reader.getVkVideoDecodeCapabilitiesKHR());
        return result;
    

    case PNext::VkVideoDecodeUsageInfoKHR:
        result=(VkVideoDecodeUsageInfoKHR*)malloc(sizeof(VkVideoDecodeUsageInfoKHR));
        result[0]=deserialize_struct(reader.getVkVideoDecodeUsageInfoKHR());
        return result;
    

    case PNext::VkVideoDecodeInfoKHR:
        result=(VkVideoDecodeInfoKHR*)malloc(sizeof(VkVideoDecodeInfoKHR));
        result[0]=deserialize_struct(reader.getVkVideoDecodeInfoKHR());
        return result;
    

    case PNext::VkVideoDecodeH264ProfileInfoKHR:
        result=(VkVideoDecodeH264ProfileInfoKHR*)malloc(sizeof(VkVideoDecodeH264ProfileInfoKHR));
        result[0]=deserialize_struct(reader.getVkVideoDecodeH264ProfileInfoKHR());
        return result;
    

    case PNext::VkVideoDecodeH264CapabilitiesKHR:
        result=(VkVideoDecodeH264CapabilitiesKHR*)malloc(sizeof(VkVideoDecodeH264CapabilitiesKHR));
        result[0]=deserialize_struct(reader.getVkVideoDecodeH264CapabilitiesKHR());
        return result;
    

    case PNext::VkVideoDecodeH264SessionParametersAddInfoKHR:
        result=(VkVideoDecodeH264SessionParametersAddInfoKHR*)malloc(sizeof(VkVideoDecodeH264SessionParametersAddInfoKHR));
        result[0]=deserialize_struct(reader.getVkVideoDecodeH264SessionParametersAddInfoKHR());
        return result;
    

    case PNext::VkVideoDecodeH264SessionParametersCreateInfoKHR:
        result=(VkVideoDecodeH264SessionParametersCreateInfoKHR*)malloc(sizeof(VkVideoDecodeH264SessionParametersCreateInfoKHR));
        result[0]=deserialize_struct(reader.getVkVideoDecodeH264SessionParametersCreateInfoKHR());
        return result;
    

    case PNext::VkVideoDecodeH264PictureInfoKHR:
        result=(VkVideoDecodeH264PictureInfoKHR*)malloc(sizeof(VkVideoDecodeH264PictureInfoKHR));
        result[0]=deserialize_struct(reader.getVkVideoDecodeH264PictureInfoKHR());
        return result;
    

    case PNext::VkVideoDecodeH264DpbSlotInfoKHR:
        result=(VkVideoDecodeH264DpbSlotInfoKHR*)malloc(sizeof(VkVideoDecodeH264DpbSlotInfoKHR));
        result[0]=deserialize_struct(reader.getVkVideoDecodeH264DpbSlotInfoKHR());
        return result;
    

    case PNext::VkVideoDecodeH265ProfileInfoKHR:
        result=(VkVideoDecodeH265ProfileInfoKHR*)malloc(sizeof(VkVideoDecodeH265ProfileInfoKHR));
        result[0]=deserialize_struct(reader.getVkVideoDecodeH265ProfileInfoKHR());
        return result;
    

    case PNext::VkVideoDecodeH265CapabilitiesKHR:
        result=(VkVideoDecodeH265CapabilitiesKHR*)malloc(sizeof(VkVideoDecodeH265CapabilitiesKHR));
        result[0]=deserialize_struct(reader.getVkVideoDecodeH265CapabilitiesKHR());
        return result;
    

    case PNext::VkVideoDecodeH265SessionParametersAddInfoKHR:
        result=(VkVideoDecodeH265SessionParametersAddInfoKHR*)malloc(sizeof(VkVideoDecodeH265SessionParametersAddInfoKHR));
        result[0]=deserialize_struct(reader.getVkVideoDecodeH265SessionParametersAddInfoKHR());
        return result;
    

    case PNext::VkVideoDecodeH265SessionParametersCreateInfoKHR:
        result=(VkVideoDecodeH265SessionParametersCreateInfoKHR*)malloc(sizeof(VkVideoDecodeH265SessionParametersCreateInfoKHR));
        result[0]=deserialize_struct(reader.getVkVideoDecodeH265SessionParametersCreateInfoKHR());
        return result;
    

    case PNext::VkVideoDecodeH265PictureInfoKHR:
        result=(VkVideoDecodeH265PictureInfoKHR*)malloc(sizeof(VkVideoDecodeH265PictureInfoKHR));
        result[0]=deserialize_struct(reader.getVkVideoDecodeH265PictureInfoKHR());
        return result;
    

    case PNext::VkVideoDecodeH265DpbSlotInfoKHR:
        result=(VkVideoDecodeH265DpbSlotInfoKHR*)malloc(sizeof(VkVideoDecodeH265DpbSlotInfoKHR));
        result[0]=deserialize_struct(reader.getVkVideoDecodeH265DpbSlotInfoKHR());
        return result;
    

    case PNext::VkVideoSessionCreateInfoKHR:
        result=(VkVideoSessionCreateInfoKHR*)malloc(sizeof(VkVideoSessionCreateInfoKHR));
        result[0]=deserialize_struct(reader.getVkVideoSessionCreateInfoKHR());
        return result;
    

    case PNext::VkVideoSessionParametersCreateInfoKHR:
        result=(VkVideoSessionParametersCreateInfoKHR*)malloc(sizeof(VkVideoSessionParametersCreateInfoKHR));
        result[0]=deserialize_struct(reader.getVkVideoSessionParametersCreateInfoKHR());
        return result;
    

    case PNext::VkVideoSessionParametersUpdateInfoKHR:
        result=(VkVideoSessionParametersUpdateInfoKHR*)malloc(sizeof(VkVideoSessionParametersUpdateInfoKHR));
        result[0]=deserialize_struct(reader.getVkVideoSessionParametersUpdateInfoKHR());
        return result;
    

    case PNext::VkVideoBeginCodingInfoKHR:
        result=(VkVideoBeginCodingInfoKHR*)malloc(sizeof(VkVideoBeginCodingInfoKHR));
        result[0]=deserialize_struct(reader.getVkVideoBeginCodingInfoKHR());
        return result;
    

    case PNext::VkVideoEndCodingInfoKHR:
        result=(VkVideoEndCodingInfoKHR*)malloc(sizeof(VkVideoEndCodingInfoKHR));
        result[0]=deserialize_struct(reader.getVkVideoEndCodingInfoKHR());
        return result;
    

    case PNext::VkVideoCodingControlInfoKHR:
        result=(VkVideoCodingControlInfoKHR*)malloc(sizeof(VkVideoCodingControlInfoKHR));
        result[0]=deserialize_struct(reader.getVkVideoCodingControlInfoKHR());
        return result;
    

    case PNext::VkPhysicalDeviceInheritedViewportScissorFeaturesNV:
        result=(VkPhysicalDeviceInheritedViewportScissorFeaturesNV*)malloc(sizeof(VkPhysicalDeviceInheritedViewportScissorFeaturesNV));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceInheritedViewportScissorFeaturesNV());
        return result;
    

    case PNext::VkCommandBufferInheritanceViewportScissorInfoNV:
        result=(VkCommandBufferInheritanceViewportScissorInfoNV*)malloc(sizeof(VkCommandBufferInheritanceViewportScissorInfoNV));
        result[0]=deserialize_struct(reader.getVkCommandBufferInheritanceViewportScissorInfoNV());
        return result;
    

    case PNext::VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT:
        result=(VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceProvokingVertexFeaturesEXT:
        result=(VkPhysicalDeviceProvokingVertexFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceProvokingVertexFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceProvokingVertexFeaturesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceProvokingVertexPropertiesEXT:
        result=(VkPhysicalDeviceProvokingVertexPropertiesEXT*)malloc(sizeof(VkPhysicalDeviceProvokingVertexPropertiesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceProvokingVertexPropertiesEXT());
        return result;
    

    case PNext::VkPipelineRasterizationProvokingVertexStateCreateInfoEXT:
        result=(VkPipelineRasterizationProvokingVertexStateCreateInfoEXT*)malloc(sizeof(VkPipelineRasterizationProvokingVertexStateCreateInfoEXT));
        result[0]=deserialize_struct(reader.getVkPipelineRasterizationProvokingVertexStateCreateInfoEXT());
        return result;
    

    case PNext::VkCuModuleCreateInfoNVX:
        result=(VkCuModuleCreateInfoNVX*)malloc(sizeof(VkCuModuleCreateInfoNVX));
        result[0]=deserialize_struct(reader.getVkCuModuleCreateInfoNVX());
        return result;
    

    case PNext::VkCuFunctionCreateInfoNVX:
        result=(VkCuFunctionCreateInfoNVX*)malloc(sizeof(VkCuFunctionCreateInfoNVX));
        result[0]=deserialize_struct(reader.getVkCuFunctionCreateInfoNVX());
        return result;
    

    case PNext::VkCuLaunchInfoNVX:
        result=(VkCuLaunchInfoNVX*)malloc(sizeof(VkCuLaunchInfoNVX));
        result[0]=deserialize_struct(reader.getVkCuLaunchInfoNVX());
        return result;
    

    case PNext::VkPhysicalDeviceDescriptorBufferFeaturesEXT:
        result=(VkPhysicalDeviceDescriptorBufferFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceDescriptorBufferFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceDescriptorBufferFeaturesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceDescriptorBufferPropertiesEXT:
        result=(VkPhysicalDeviceDescriptorBufferPropertiesEXT*)malloc(sizeof(VkPhysicalDeviceDescriptorBufferPropertiesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceDescriptorBufferPropertiesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT:
        result=(VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT*)malloc(sizeof(VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT());
        return result;
    

    case PNext::VkDescriptorAddressInfoEXT:
        result=(VkDescriptorAddressInfoEXT*)malloc(sizeof(VkDescriptorAddressInfoEXT));
        result[0]=deserialize_struct(reader.getVkDescriptorAddressInfoEXT());
        return result;
    

    case PNext::VkDescriptorBufferBindingInfoEXT:
        result=(VkDescriptorBufferBindingInfoEXT*)malloc(sizeof(VkDescriptorBufferBindingInfoEXT));
        result[0]=deserialize_struct(reader.getVkDescriptorBufferBindingInfoEXT());
        return result;
    

    case PNext::VkDescriptorBufferBindingPushDescriptorBufferHandleEXT:
        result=(VkDescriptorBufferBindingPushDescriptorBufferHandleEXT*)malloc(sizeof(VkDescriptorBufferBindingPushDescriptorBufferHandleEXT));
        result[0]=deserialize_struct(reader.getVkDescriptorBufferBindingPushDescriptorBufferHandleEXT());
        return result;
    

    case PNext::VkDescriptorDataEXT:
        result=(VkDescriptorDataEXT*)malloc(sizeof(VkDescriptorDataEXT));
        result[0]=deserialize_struct(reader.getVkDescriptorDataEXT());
        return result;
    

    case PNext::VkDescriptorGetInfoEXT:
        result=(VkDescriptorGetInfoEXT*)malloc(sizeof(VkDescriptorGetInfoEXT));
        result[0]=deserialize_struct(reader.getVkDescriptorGetInfoEXT());
        return result;
    

    case PNext::VkBufferCaptureDescriptorDataInfoEXT:
        result=(VkBufferCaptureDescriptorDataInfoEXT*)malloc(sizeof(VkBufferCaptureDescriptorDataInfoEXT));
        result[0]=deserialize_struct(reader.getVkBufferCaptureDescriptorDataInfoEXT());
        return result;
    

    case PNext::VkImageCaptureDescriptorDataInfoEXT:
        result=(VkImageCaptureDescriptorDataInfoEXT*)malloc(sizeof(VkImageCaptureDescriptorDataInfoEXT));
        result[0]=deserialize_struct(reader.getVkImageCaptureDescriptorDataInfoEXT());
        return result;
    

    case PNext::VkImageViewCaptureDescriptorDataInfoEXT:
        result=(VkImageViewCaptureDescriptorDataInfoEXT*)malloc(sizeof(VkImageViewCaptureDescriptorDataInfoEXT));
        result[0]=deserialize_struct(reader.getVkImageViewCaptureDescriptorDataInfoEXT());
        return result;
    

    case PNext::VkSamplerCaptureDescriptorDataInfoEXT:
        result=(VkSamplerCaptureDescriptorDataInfoEXT*)malloc(sizeof(VkSamplerCaptureDescriptorDataInfoEXT));
        result[0]=deserialize_struct(reader.getVkSamplerCaptureDescriptorDataInfoEXT());
        return result;
    

    case PNext::VkAccelerationStructureCaptureDescriptorDataInfoEXT:
        result=(VkAccelerationStructureCaptureDescriptorDataInfoEXT*)malloc(sizeof(VkAccelerationStructureCaptureDescriptorDataInfoEXT));
        result[0]=deserialize_struct(reader.getVkAccelerationStructureCaptureDescriptorDataInfoEXT());
        return result;
    

    case PNext::VkOpaqueCaptureDescriptorDataCreateInfoEXT:
        result=(VkOpaqueCaptureDescriptorDataCreateInfoEXT*)malloc(sizeof(VkOpaqueCaptureDescriptorDataCreateInfoEXT));
        result[0]=deserialize_struct(reader.getVkOpaqueCaptureDescriptorDataCreateInfoEXT());
        return result;
    

    case PNext::VkPhysicalDeviceShaderIntegerDotProductFeatures:
        result=(VkPhysicalDeviceShaderIntegerDotProductFeatures*)malloc(sizeof(VkPhysicalDeviceShaderIntegerDotProductFeatures));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceShaderIntegerDotProductFeatures());
        return result;
    

    case PNext::VkPhysicalDeviceShaderIntegerDotProductProperties:
        result=(VkPhysicalDeviceShaderIntegerDotProductProperties*)malloc(sizeof(VkPhysicalDeviceShaderIntegerDotProductProperties));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceShaderIntegerDotProductProperties());
        return result;
    

    case PNext::VkPhysicalDeviceDrmPropertiesEXT:
        result=(VkPhysicalDeviceDrmPropertiesEXT*)malloc(sizeof(VkPhysicalDeviceDrmPropertiesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceDrmPropertiesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR:
        result=(VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR*)malloc(sizeof(VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR());
        return result;
    

    case PNext::VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR:
        result=(VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR*)malloc(sizeof(VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR());
        return result;
    

    case PNext::VkPhysicalDeviceRayTracingMotionBlurFeaturesNV:
        result=(VkPhysicalDeviceRayTracingMotionBlurFeaturesNV*)malloc(sizeof(VkPhysicalDeviceRayTracingMotionBlurFeaturesNV));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceRayTracingMotionBlurFeaturesNV());
        return result;
    

    case PNext::VkAccelerationStructureGeometryMotionTrianglesDataNV:
        result=(VkAccelerationStructureGeometryMotionTrianglesDataNV*)malloc(sizeof(VkAccelerationStructureGeometryMotionTrianglesDataNV));
        result[0]=deserialize_struct(reader.getVkAccelerationStructureGeometryMotionTrianglesDataNV());
        return result;
    

    case PNext::VkAccelerationStructureMotionInfoNV:
        result=(VkAccelerationStructureMotionInfoNV*)malloc(sizeof(VkAccelerationStructureMotionInfoNV));
        result[0]=deserialize_struct(reader.getVkAccelerationStructureMotionInfoNV());
        return result;
    

    case PNext::VkSRTDataNV:
        result=(VkSRTDataNV*)malloc(sizeof(VkSRTDataNV));
        result[0]=deserialize_struct(reader.getVkSRTDataNV());
        return result;
    

    case PNext::VkAccelerationStructureSRTMotionInstanceNV:
        result=(VkAccelerationStructureSRTMotionInstanceNV*)malloc(sizeof(VkAccelerationStructureSRTMotionInstanceNV));
        result[0]=deserialize_struct(reader.getVkAccelerationStructureSRTMotionInstanceNV());
        return result;
    

    case PNext::VkAccelerationStructureMatrixMotionInstanceNV:
        result=(VkAccelerationStructureMatrixMotionInstanceNV*)malloc(sizeof(VkAccelerationStructureMatrixMotionInstanceNV));
        result[0]=deserialize_struct(reader.getVkAccelerationStructureMatrixMotionInstanceNV());
        return result;
    

    case PNext::VkAccelerationStructureMotionInstanceDataNV:
        result=(VkAccelerationStructureMotionInstanceDataNV*)malloc(sizeof(VkAccelerationStructureMotionInstanceDataNV));
        result[0]=deserialize_struct(reader.getVkAccelerationStructureMotionInstanceDataNV());
        return result;
    

    case PNext::VkAccelerationStructureMotionInstanceNV:
        result=(VkAccelerationStructureMotionInstanceNV*)malloc(sizeof(VkAccelerationStructureMotionInstanceNV));
        result[0]=deserialize_struct(reader.getVkAccelerationStructureMotionInstanceNV());
        return result;
    

    case PNext::VkMemoryGetRemoteAddressInfoNV:
        result=(VkMemoryGetRemoteAddressInfoNV*)malloc(sizeof(VkMemoryGetRemoteAddressInfoNV));
        result[0]=deserialize_struct(reader.getVkMemoryGetRemoteAddressInfoNV());
        return result;
    

    case PNext::VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT:
        result=(VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceRGBA10X6FormatsFeaturesEXT());
        return result;
    

    case PNext::VkFormatProperties3:
        result=(VkFormatProperties3*)malloc(sizeof(VkFormatProperties3));
        result[0]=deserialize_struct(reader.getVkFormatProperties3());
        return result;
    

    case PNext::VkDrmFormatModifierPropertiesList2EXT:
        result=(VkDrmFormatModifierPropertiesList2EXT*)malloc(sizeof(VkDrmFormatModifierPropertiesList2EXT));
        result[0]=deserialize_struct(reader.getVkDrmFormatModifierPropertiesList2EXT());
        return result;
    

    case PNext::VkDrmFormatModifierProperties2EXT:
        result=(VkDrmFormatModifierProperties2EXT*)malloc(sizeof(VkDrmFormatModifierProperties2EXT));
        result[0]=deserialize_struct(reader.getVkDrmFormatModifierProperties2EXT());
        return result;
    

    case PNext::VkPipelineRenderingCreateInfo:
        result=(VkPipelineRenderingCreateInfo*)malloc(sizeof(VkPipelineRenderingCreateInfo));
        result[0]=deserialize_struct(reader.getVkPipelineRenderingCreateInfo());
        return result;
    

    case PNext::VkRenderingInfo:
        result=(VkRenderingInfo*)malloc(sizeof(VkRenderingInfo));
        result[0]=deserialize_struct(reader.getVkRenderingInfo());
        return result;
    

    case PNext::VkRenderingAttachmentInfo:
        result=(VkRenderingAttachmentInfo*)malloc(sizeof(VkRenderingAttachmentInfo));
        result[0]=deserialize_struct(reader.getVkRenderingAttachmentInfo());
        return result;
    

    case PNext::VkRenderingFragmentShadingRateAttachmentInfoKHR:
        result=(VkRenderingFragmentShadingRateAttachmentInfoKHR*)malloc(sizeof(VkRenderingFragmentShadingRateAttachmentInfoKHR));
        result[0]=deserialize_struct(reader.getVkRenderingFragmentShadingRateAttachmentInfoKHR());
        return result;
    

    case PNext::VkRenderingFragmentDensityMapAttachmentInfoEXT:
        result=(VkRenderingFragmentDensityMapAttachmentInfoEXT*)malloc(sizeof(VkRenderingFragmentDensityMapAttachmentInfoEXT));
        result[0]=deserialize_struct(reader.getVkRenderingFragmentDensityMapAttachmentInfoEXT());
        return result;
    

    case PNext::VkPhysicalDeviceDynamicRenderingFeatures:
        result=(VkPhysicalDeviceDynamicRenderingFeatures*)malloc(sizeof(VkPhysicalDeviceDynamicRenderingFeatures));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceDynamicRenderingFeatures());
        return result;
    

    case PNext::VkCommandBufferInheritanceRenderingInfo:
        result=(VkCommandBufferInheritanceRenderingInfo*)malloc(sizeof(VkCommandBufferInheritanceRenderingInfo));
        result[0]=deserialize_struct(reader.getVkCommandBufferInheritanceRenderingInfo());
        return result;
    

    case PNext::VkAttachmentSampleCountInfoAMD:
        result=(VkAttachmentSampleCountInfoAMD*)malloc(sizeof(VkAttachmentSampleCountInfoAMD));
        result[0]=deserialize_struct(reader.getVkAttachmentSampleCountInfoAMD());
        return result;
    

    case PNext::VkMultiviewPerViewAttributesInfoNVX:
        result=(VkMultiviewPerViewAttributesInfoNVX*)malloc(sizeof(VkMultiviewPerViewAttributesInfoNVX));
        result[0]=deserialize_struct(reader.getVkMultiviewPerViewAttributesInfoNVX());
        return result;
    

    case PNext::VkPhysicalDeviceImageViewMinLodFeaturesEXT:
        result=(VkPhysicalDeviceImageViewMinLodFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceImageViewMinLodFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceImageViewMinLodFeaturesEXT());
        return result;
    

    case PNext::VkImageViewMinLodCreateInfoEXT:
        result=(VkImageViewMinLodCreateInfoEXT*)malloc(sizeof(VkImageViewMinLodCreateInfoEXT));
        result[0]=deserialize_struct(reader.getVkImageViewMinLodCreateInfoEXT());
        return result;
    

    case PNext::VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT:
        result=(VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceLinearColorAttachmentFeaturesNV:
        result=(VkPhysicalDeviceLinearColorAttachmentFeaturesNV*)malloc(sizeof(VkPhysicalDeviceLinearColorAttachmentFeaturesNV));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceLinearColorAttachmentFeaturesNV());
        return result;
    

    case PNext::VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT:
        result=(VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT:
        result=(VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT*)malloc(sizeof(VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT());
        return result;
    

    case PNext::VkGraphicsPipelineLibraryCreateInfoEXT:
        result=(VkGraphicsPipelineLibraryCreateInfoEXT*)malloc(sizeof(VkGraphicsPipelineLibraryCreateInfoEXT));
        result[0]=deserialize_struct(reader.getVkGraphicsPipelineLibraryCreateInfoEXT());
        return result;
    

    case PNext::VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE:
        result=(VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE*)malloc(sizeof(VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE());
        return result;
    

    case PNext::VkDescriptorSetBindingReferenceVALVE:
        result=(VkDescriptorSetBindingReferenceVALVE*)malloc(sizeof(VkDescriptorSetBindingReferenceVALVE));
        result[0]=deserialize_struct(reader.getVkDescriptorSetBindingReferenceVALVE());
        return result;
    

    case PNext::VkDescriptorSetLayoutHostMappingInfoVALVE:
        result=(VkDescriptorSetLayoutHostMappingInfoVALVE*)malloc(sizeof(VkDescriptorSetLayoutHostMappingInfoVALVE));
        result[0]=deserialize_struct(reader.getVkDescriptorSetLayoutHostMappingInfoVALVE());
        return result;
    

    case PNext::VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT:
        result=(VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceShaderModuleIdentifierFeaturesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT:
        result=(VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT*)malloc(sizeof(VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceShaderModuleIdentifierPropertiesEXT());
        return result;
    

    case PNext::VkPipelineShaderStageModuleIdentifierCreateInfoEXT:
        result=(VkPipelineShaderStageModuleIdentifierCreateInfoEXT*)malloc(sizeof(VkPipelineShaderStageModuleIdentifierCreateInfoEXT));
        result[0]=deserialize_struct(reader.getVkPipelineShaderStageModuleIdentifierCreateInfoEXT());
        return result;
    

    case PNext::VkShaderModuleIdentifierEXT:
        result=(VkShaderModuleIdentifierEXT*)malloc(sizeof(VkShaderModuleIdentifierEXT));
        result[0]=deserialize_struct(reader.getVkShaderModuleIdentifierEXT());
        return result;
    

    case PNext::VkImageCompressionControlEXT:
        result=(VkImageCompressionControlEXT*)malloc(sizeof(VkImageCompressionControlEXT));
        result[0]=deserialize_struct(reader.getVkImageCompressionControlEXT());
        return result;
    

    case PNext::VkPhysicalDeviceImageCompressionControlFeaturesEXT:
        result=(VkPhysicalDeviceImageCompressionControlFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceImageCompressionControlFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceImageCompressionControlFeaturesEXT());
        return result;
    

    case PNext::VkImageCompressionPropertiesEXT:
        result=(VkImageCompressionPropertiesEXT*)malloc(sizeof(VkImageCompressionPropertiesEXT));
        result[0]=deserialize_struct(reader.getVkImageCompressionPropertiesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT:
        result=(VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT());
        return result;
    

    case PNext::VkImageSubresource2KHR:
        result=(VkImageSubresource2KHR*)malloc(sizeof(VkImageSubresource2KHR));
        result[0]=deserialize_struct(reader.getVkImageSubresource2KHR());
        return result;
    

    case PNext::VkSubresourceLayout2KHR:
        result=(VkSubresourceLayout2KHR*)malloc(sizeof(VkSubresourceLayout2KHR));
        result[0]=deserialize_struct(reader.getVkSubresourceLayout2KHR());
        return result;
    

    case PNext::VkRenderPassCreationControlEXT:
        result=(VkRenderPassCreationControlEXT*)malloc(sizeof(VkRenderPassCreationControlEXT));
        result[0]=deserialize_struct(reader.getVkRenderPassCreationControlEXT());
        return result;
    

    case PNext::VkRenderPassCreationFeedbackInfoEXT:
        result=(VkRenderPassCreationFeedbackInfoEXT*)malloc(sizeof(VkRenderPassCreationFeedbackInfoEXT));
        result[0]=deserialize_struct(reader.getVkRenderPassCreationFeedbackInfoEXT());
        return result;
    

    case PNext::VkRenderPassCreationFeedbackCreateInfoEXT:
        result=(VkRenderPassCreationFeedbackCreateInfoEXT*)malloc(sizeof(VkRenderPassCreationFeedbackCreateInfoEXT));
        result[0]=deserialize_struct(reader.getVkRenderPassCreationFeedbackCreateInfoEXT());
        return result;
    

    case PNext::VkRenderPassSubpassFeedbackInfoEXT:
        result=(VkRenderPassSubpassFeedbackInfoEXT*)malloc(sizeof(VkRenderPassSubpassFeedbackInfoEXT));
        result[0]=deserialize_struct(reader.getVkRenderPassSubpassFeedbackInfoEXT());
        return result;
    

    case PNext::VkRenderPassSubpassFeedbackCreateInfoEXT:
        result=(VkRenderPassSubpassFeedbackCreateInfoEXT*)malloc(sizeof(VkRenderPassSubpassFeedbackCreateInfoEXT));
        result[0]=deserialize_struct(reader.getVkRenderPassSubpassFeedbackCreateInfoEXT());
        return result;
    

    case PNext::VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT:
        result=(VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT());
        return result;
    

    case PNext::VkMicromapBuildInfoEXT:
        result=(VkMicromapBuildInfoEXT*)malloc(sizeof(VkMicromapBuildInfoEXT));
        result[0]=deserialize_struct(reader.getVkMicromapBuildInfoEXT());
        return result;
    

    case PNext::VkMicromapCreateInfoEXT:
        result=(VkMicromapCreateInfoEXT*)malloc(sizeof(VkMicromapCreateInfoEXT));
        result[0]=deserialize_struct(reader.getVkMicromapCreateInfoEXT());
        return result;
    

    case PNext::VkMicromapVersionInfoEXT:
        result=(VkMicromapVersionInfoEXT*)malloc(sizeof(VkMicromapVersionInfoEXT));
        result[0]=deserialize_struct(reader.getVkMicromapVersionInfoEXT());
        return result;
    

    case PNext::VkCopyMicromapInfoEXT:
        result=(VkCopyMicromapInfoEXT*)malloc(sizeof(VkCopyMicromapInfoEXT));
        result[0]=deserialize_struct(reader.getVkCopyMicromapInfoEXT());
        return result;
    

    case PNext::VkCopyMicromapToMemoryInfoEXT:
        result=(VkCopyMicromapToMemoryInfoEXT*)malloc(sizeof(VkCopyMicromapToMemoryInfoEXT));
        result[0]=deserialize_struct(reader.getVkCopyMicromapToMemoryInfoEXT());
        return result;
    

    case PNext::VkCopyMemoryToMicromapInfoEXT:
        result=(VkCopyMemoryToMicromapInfoEXT*)malloc(sizeof(VkCopyMemoryToMicromapInfoEXT));
        result[0]=deserialize_struct(reader.getVkCopyMemoryToMicromapInfoEXT());
        return result;
    

    case PNext::VkMicromapBuildSizesInfoEXT:
        result=(VkMicromapBuildSizesInfoEXT*)malloc(sizeof(VkMicromapBuildSizesInfoEXT));
        result[0]=deserialize_struct(reader.getVkMicromapBuildSizesInfoEXT());
        return result;
    

    case PNext::VkMicromapUsageEXT:
        result=(VkMicromapUsageEXT*)malloc(sizeof(VkMicromapUsageEXT));
        result[0]=deserialize_struct(reader.getVkMicromapUsageEXT());
        return result;
    

    case PNext::VkMicromapTriangleEXT:
        result=(VkMicromapTriangleEXT*)malloc(sizeof(VkMicromapTriangleEXT));
        result[0]=deserialize_struct(reader.getVkMicromapTriangleEXT());
        return result;
    

    case PNext::VkPhysicalDeviceOpacityMicromapFeaturesEXT:
        result=(VkPhysicalDeviceOpacityMicromapFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceOpacityMicromapFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceOpacityMicromapFeaturesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceOpacityMicromapPropertiesEXT:
        result=(VkPhysicalDeviceOpacityMicromapPropertiesEXT*)malloc(sizeof(VkPhysicalDeviceOpacityMicromapPropertiesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceOpacityMicromapPropertiesEXT());
        return result;
    

    case PNext::VkAccelerationStructureTrianglesOpacityMicromapEXT:
        result=(VkAccelerationStructureTrianglesOpacityMicromapEXT*)malloc(sizeof(VkAccelerationStructureTrianglesOpacityMicromapEXT));
        result[0]=deserialize_struct(reader.getVkAccelerationStructureTrianglesOpacityMicromapEXT());
        return result;
    

    case PNext::VkPipelinePropertiesIdentifierEXT:
        result=(VkPipelinePropertiesIdentifierEXT*)malloc(sizeof(VkPipelinePropertiesIdentifierEXT));
        result[0]=deserialize_struct(reader.getVkPipelinePropertiesIdentifierEXT());
        return result;
    

    case PNext::VkPhysicalDevicePipelinePropertiesFeaturesEXT:
        result=(VkPhysicalDevicePipelinePropertiesFeaturesEXT*)malloc(sizeof(VkPhysicalDevicePipelinePropertiesFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDevicePipelinePropertiesFeaturesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD:
        result=(VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD*)malloc(sizeof(VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD());
        return result;
    

    case PNext::VkExternalMemoryAcquireUnmodifiedEXT:
        result=(VkExternalMemoryAcquireUnmodifiedEXT*)malloc(sizeof(VkExternalMemoryAcquireUnmodifiedEXT));
        result[0]=deserialize_struct(reader.getVkExternalMemoryAcquireUnmodifiedEXT());
        return result;
    

    case PNext::VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT:
        result=(VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT());
        return result;
    

    case PNext::VkPhysicalDevicePipelineRobustnessFeaturesEXT:
        result=(VkPhysicalDevicePipelineRobustnessFeaturesEXT*)malloc(sizeof(VkPhysicalDevicePipelineRobustnessFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDevicePipelineRobustnessFeaturesEXT());
        return result;
    

    case PNext::VkPipelineRobustnessCreateInfoEXT:
        result=(VkPipelineRobustnessCreateInfoEXT*)malloc(sizeof(VkPipelineRobustnessCreateInfoEXT));
        result[0]=deserialize_struct(reader.getVkPipelineRobustnessCreateInfoEXT());
        return result;
    

    case PNext::VkPhysicalDevicePipelineRobustnessPropertiesEXT:
        result=(VkPhysicalDevicePipelineRobustnessPropertiesEXT*)malloc(sizeof(VkPhysicalDevicePipelineRobustnessPropertiesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDevicePipelineRobustnessPropertiesEXT());
        return result;
    

    case PNext::VkImageViewSampleWeightCreateInfoQCOM:
        result=(VkImageViewSampleWeightCreateInfoQCOM*)malloc(sizeof(VkImageViewSampleWeightCreateInfoQCOM));
        result[0]=deserialize_struct(reader.getVkImageViewSampleWeightCreateInfoQCOM());
        return result;
    

    case PNext::VkPhysicalDeviceImageProcessingFeaturesQCOM:
        result=(VkPhysicalDeviceImageProcessingFeaturesQCOM*)malloc(sizeof(VkPhysicalDeviceImageProcessingFeaturesQCOM));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceImageProcessingFeaturesQCOM());
        return result;
    

    case PNext::VkPhysicalDeviceImageProcessingPropertiesQCOM:
        result=(VkPhysicalDeviceImageProcessingPropertiesQCOM*)malloc(sizeof(VkPhysicalDeviceImageProcessingPropertiesQCOM));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceImageProcessingPropertiesQCOM());
        return result;
    

    case PNext::VkPhysicalDeviceTilePropertiesFeaturesQCOM:
        result=(VkPhysicalDeviceTilePropertiesFeaturesQCOM*)malloc(sizeof(VkPhysicalDeviceTilePropertiesFeaturesQCOM));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceTilePropertiesFeaturesQCOM());
        return result;
    

    case PNext::VkTilePropertiesQCOM:
        result=(VkTilePropertiesQCOM*)malloc(sizeof(VkTilePropertiesQCOM));
        result[0]=deserialize_struct(reader.getVkTilePropertiesQCOM());
        return result;
    

    case PNext::VkPhysicalDeviceAmigoProfilingFeaturesSEC:
        result=(VkPhysicalDeviceAmigoProfilingFeaturesSEC*)malloc(sizeof(VkPhysicalDeviceAmigoProfilingFeaturesSEC));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceAmigoProfilingFeaturesSEC());
        return result;
    

    case PNext::VkAmigoProfilingSubmitInfoSEC:
        result=(VkAmigoProfilingSubmitInfoSEC*)malloc(sizeof(VkAmigoProfilingSubmitInfoSEC));
        result[0]=deserialize_struct(reader.getVkAmigoProfilingSubmitInfoSEC());
        return result;
    

    case PNext::VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT:
        result=(VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceDepthClampZeroOneFeaturesEXT:
        result=(VkPhysicalDeviceDepthClampZeroOneFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceDepthClampZeroOneFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceDepthClampZeroOneFeaturesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceAddressBindingReportFeaturesEXT:
        result=(VkPhysicalDeviceAddressBindingReportFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceAddressBindingReportFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceAddressBindingReportFeaturesEXT());
        return result;
    

    case PNext::VkDeviceAddressBindingCallbackDataEXT:
        result=(VkDeviceAddressBindingCallbackDataEXT*)malloc(sizeof(VkDeviceAddressBindingCallbackDataEXT));
        result[0]=deserialize_struct(reader.getVkDeviceAddressBindingCallbackDataEXT());
        return result;
    

    case PNext::VkPhysicalDeviceOpticalFlowFeaturesNV:
        result=(VkPhysicalDeviceOpticalFlowFeaturesNV*)malloc(sizeof(VkPhysicalDeviceOpticalFlowFeaturesNV));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceOpticalFlowFeaturesNV());
        return result;
    

    case PNext::VkPhysicalDeviceOpticalFlowPropertiesNV:
        result=(VkPhysicalDeviceOpticalFlowPropertiesNV*)malloc(sizeof(VkPhysicalDeviceOpticalFlowPropertiesNV));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceOpticalFlowPropertiesNV());
        return result;
    

    case PNext::VkOpticalFlowImageFormatInfoNV:
        result=(VkOpticalFlowImageFormatInfoNV*)malloc(sizeof(VkOpticalFlowImageFormatInfoNV));
        result[0]=deserialize_struct(reader.getVkOpticalFlowImageFormatInfoNV());
        return result;
    

    case PNext::VkOpticalFlowImageFormatPropertiesNV:
        result=(VkOpticalFlowImageFormatPropertiesNV*)malloc(sizeof(VkOpticalFlowImageFormatPropertiesNV));
        result[0]=deserialize_struct(reader.getVkOpticalFlowImageFormatPropertiesNV());
        return result;
    

    case PNext::VkOpticalFlowSessionCreateInfoNV:
        result=(VkOpticalFlowSessionCreateInfoNV*)malloc(sizeof(VkOpticalFlowSessionCreateInfoNV));
        result[0]=deserialize_struct(reader.getVkOpticalFlowSessionCreateInfoNV());
        return result;
    

    case PNext::VkOpticalFlowSessionCreatePrivateDataInfoNV:
        result=(VkOpticalFlowSessionCreatePrivateDataInfoNV*)malloc(sizeof(VkOpticalFlowSessionCreatePrivateDataInfoNV));
        result[0]=deserialize_struct(reader.getVkOpticalFlowSessionCreatePrivateDataInfoNV());
        return result;
    

    case PNext::VkOpticalFlowExecuteInfoNV:
        result=(VkOpticalFlowExecuteInfoNV*)malloc(sizeof(VkOpticalFlowExecuteInfoNV));
        result[0]=deserialize_struct(reader.getVkOpticalFlowExecuteInfoNV());
        return result;
    

    case PNext::VkPhysicalDeviceFaultFeaturesEXT:
        result=(VkPhysicalDeviceFaultFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceFaultFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceFaultFeaturesEXT());
        return result;
    

    case PNext::VkDeviceFaultAddressInfoEXT:
        result=(VkDeviceFaultAddressInfoEXT*)malloc(sizeof(VkDeviceFaultAddressInfoEXT));
        result[0]=deserialize_struct(reader.getVkDeviceFaultAddressInfoEXT());
        return result;
    

    case PNext::VkDeviceFaultVendorInfoEXT:
        result=(VkDeviceFaultVendorInfoEXT*)malloc(sizeof(VkDeviceFaultVendorInfoEXT));
        result[0]=deserialize_struct(reader.getVkDeviceFaultVendorInfoEXT());
        return result;
    

    case PNext::VkDeviceFaultCountsEXT:
        result=(VkDeviceFaultCountsEXT*)malloc(sizeof(VkDeviceFaultCountsEXT));
        result[0]=deserialize_struct(reader.getVkDeviceFaultCountsEXT());
        return result;
    

    case PNext::VkDeviceFaultInfoEXT:
        result=(VkDeviceFaultInfoEXT*)malloc(sizeof(VkDeviceFaultInfoEXT));
        result[0]=deserialize_struct(reader.getVkDeviceFaultInfoEXT());
        return result;
    

    case PNext::VkDeviceFaultVendorBinaryHeaderVersionOneEXT:
        result=(VkDeviceFaultVendorBinaryHeaderVersionOneEXT*)malloc(sizeof(VkDeviceFaultVendorBinaryHeaderVersionOneEXT));
        result[0]=deserialize_struct(reader.getVkDeviceFaultVendorBinaryHeaderVersionOneEXT());
        return result;
    

    case PNext::VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT:
        result=(VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT*)malloc(sizeof(VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT());
        return result;
    

    case PNext::VkDepthBiasInfoEXT:
        result=(VkDepthBiasInfoEXT*)malloc(sizeof(VkDepthBiasInfoEXT));
        result[0]=deserialize_struct(reader.getVkDepthBiasInfoEXT());
        return result;
    

    case PNext::VkDepthBiasRepresentationInfoEXT:
        result=(VkDepthBiasRepresentationInfoEXT*)malloc(sizeof(VkDepthBiasRepresentationInfoEXT));
        result[0]=deserialize_struct(reader.getVkDepthBiasRepresentationInfoEXT());
        return result;
    

    case PNext::VkDecompressMemoryRegionNV:
        result=(VkDecompressMemoryRegionNV*)malloc(sizeof(VkDecompressMemoryRegionNV));
        result[0]=deserialize_struct(reader.getVkDecompressMemoryRegionNV());
        return result;
    

    case PNext::VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM:
        result=(VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM*)malloc(sizeof(VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceShaderCoreBuiltinsPropertiesARM());
        return result;
    

    case PNext::VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM:
        result=(VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM*)malloc(sizeof(VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceShaderCoreBuiltinsFeaturesARM());
        return result;
    

    case PNext::VkFrameBoundaryEXT:
        result=(VkFrameBoundaryEXT*)malloc(sizeof(VkFrameBoundaryEXT));
        result[0]=deserialize_struct(reader.getVkFrameBoundaryEXT());
        return result;
    

    case PNext::VkPhysicalDeviceFrameBoundaryFeaturesEXT:
        result=(VkPhysicalDeviceFrameBoundaryFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceFrameBoundaryFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceFrameBoundaryFeaturesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT:
        result=(VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT());
        return result;
    

    case PNext::VkSurfacePresentModeEXT:
        result=(VkSurfacePresentModeEXT*)malloc(sizeof(VkSurfacePresentModeEXT));
        result[0]=deserialize_struct(reader.getVkSurfacePresentModeEXT());
        return result;
    

    case PNext::VkSurfacePresentScalingCapabilitiesEXT:
        result=(VkSurfacePresentScalingCapabilitiesEXT*)malloc(sizeof(VkSurfacePresentScalingCapabilitiesEXT));
        result[0]=deserialize_struct(reader.getVkSurfacePresentScalingCapabilitiesEXT());
        return result;
    

    case PNext::VkSurfacePresentModeCompatibilityEXT:
        result=(VkSurfacePresentModeCompatibilityEXT*)malloc(sizeof(VkSurfacePresentModeCompatibilityEXT));
        result[0]=deserialize_struct(reader.getVkSurfacePresentModeCompatibilityEXT());
        return result;
    

    case PNext::VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT:
        result=(VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT*)malloc(sizeof(VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceSwapchainMaintenance1FeaturesEXT());
        return result;
    

    case PNext::VkSwapchainPresentFenceInfoEXT:
        result=(VkSwapchainPresentFenceInfoEXT*)malloc(sizeof(VkSwapchainPresentFenceInfoEXT));
        result[0]=deserialize_struct(reader.getVkSwapchainPresentFenceInfoEXT());
        return result;
    

    case PNext::VkSwapchainPresentModesCreateInfoEXT:
        result=(VkSwapchainPresentModesCreateInfoEXT*)malloc(sizeof(VkSwapchainPresentModesCreateInfoEXT));
        result[0]=deserialize_struct(reader.getVkSwapchainPresentModesCreateInfoEXT());
        return result;
    

    case PNext::VkSwapchainPresentModeInfoEXT:
        result=(VkSwapchainPresentModeInfoEXT*)malloc(sizeof(VkSwapchainPresentModeInfoEXT));
        result[0]=deserialize_struct(reader.getVkSwapchainPresentModeInfoEXT());
        return result;
    

    case PNext::VkSwapchainPresentScalingCreateInfoEXT:
        result=(VkSwapchainPresentScalingCreateInfoEXT*)malloc(sizeof(VkSwapchainPresentScalingCreateInfoEXT));
        result[0]=deserialize_struct(reader.getVkSwapchainPresentScalingCreateInfoEXT());
        return result;
    

    case PNext::VkReleaseSwapchainImagesInfoEXT:
        result=(VkReleaseSwapchainImagesInfoEXT*)malloc(sizeof(VkReleaseSwapchainImagesInfoEXT));
        result[0]=deserialize_struct(reader.getVkReleaseSwapchainImagesInfoEXT());
        return result;
    

    case PNext::VkPhysicalDeviceDepthBiasControlFeaturesEXT:
        result=(VkPhysicalDeviceDepthBiasControlFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceDepthBiasControlFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceDepthBiasControlFeaturesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV:
        result=(VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV*)malloc(sizeof(VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceRayTracingInvocationReorderFeaturesNV());
        return result;
    

    case PNext::VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV:
        result=(VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV*)malloc(sizeof(VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceRayTracingInvocationReorderPropertiesNV());
        return result;
    

    case PNext::VkDirectDriverLoadingInfoLUNARG:
        result=(VkDirectDriverLoadingInfoLUNARG*)malloc(sizeof(VkDirectDriverLoadingInfoLUNARG));
        result[0]=deserialize_struct(reader.getVkDirectDriverLoadingInfoLUNARG());
        return result;
    

    case PNext::VkDirectDriverLoadingListLUNARG:
        result=(VkDirectDriverLoadingListLUNARG*)malloc(sizeof(VkDirectDriverLoadingListLUNARG));
        result[0]=deserialize_struct(reader.getVkDirectDriverLoadingListLUNARG());
        return result;
    

    case PNext::VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM:
        result=(VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM*)malloc(sizeof(VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM());
        return result;
    

    case PNext::VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR:
        result=(VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR*)malloc(sizeof(VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceRayTracingPositionFetchFeaturesKHR());
        return result;
    

    case PNext::VkDeviceImageSubresourceInfoKHR:
        result=(VkDeviceImageSubresourceInfoKHR*)malloc(sizeof(VkDeviceImageSubresourceInfoKHR));
        result[0]=deserialize_struct(reader.getVkDeviceImageSubresourceInfoKHR());
        return result;
    

    case PNext::VkPhysicalDeviceShaderCorePropertiesARM:
        result=(VkPhysicalDeviceShaderCorePropertiesARM*)malloc(sizeof(VkPhysicalDeviceShaderCorePropertiesARM));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceShaderCorePropertiesARM());
        return result;
    

    case PNext::VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM:
        result=(VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM*)malloc(sizeof(VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM());
        return result;
    

    case PNext::VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM:
        result=(VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM*)malloc(sizeof(VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM));
        result[0]=deserialize_struct(reader.getVkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM());
        return result;
    

    case PNext::VkQueryLowLatencySupportNV:
        result=(VkQueryLowLatencySupportNV*)malloc(sizeof(VkQueryLowLatencySupportNV));
        result[0]=deserialize_struct(reader.getVkQueryLowLatencySupportNV());
        return result;
    

    case PNext::VkMemoryMapInfoKHR:
        result=(VkMemoryMapInfoKHR*)malloc(sizeof(VkMemoryMapInfoKHR));
        result[0]=deserialize_struct(reader.getVkMemoryMapInfoKHR());
        return result;
    

    case PNext::VkMemoryUnmapInfoKHR:
        result=(VkMemoryUnmapInfoKHR*)malloc(sizeof(VkMemoryUnmapInfoKHR));
        result[0]=deserialize_struct(reader.getVkMemoryUnmapInfoKHR());
        return result;
    

    case PNext::VkPhysicalDeviceShaderObjectFeaturesEXT:
        result=(VkPhysicalDeviceShaderObjectFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceShaderObjectFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceShaderObjectFeaturesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceShaderObjectPropertiesEXT:
        result=(VkPhysicalDeviceShaderObjectPropertiesEXT*)malloc(sizeof(VkPhysicalDeviceShaderObjectPropertiesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceShaderObjectPropertiesEXT());
        return result;
    

    case PNext::VkShaderCreateInfoEXT:
        result=(VkShaderCreateInfoEXT*)malloc(sizeof(VkShaderCreateInfoEXT));
        result[0]=deserialize_struct(reader.getVkShaderCreateInfoEXT());
        return result;
    

    case PNext::VkPhysicalDeviceShaderTileImageFeaturesEXT:
        result=(VkPhysicalDeviceShaderTileImageFeaturesEXT*)malloc(sizeof(VkPhysicalDeviceShaderTileImageFeaturesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceShaderTileImageFeaturesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceShaderTileImagePropertiesEXT:
        result=(VkPhysicalDeviceShaderTileImagePropertiesEXT*)malloc(sizeof(VkPhysicalDeviceShaderTileImagePropertiesEXT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceShaderTileImagePropertiesEXT());
        return result;
    

    case PNext::VkPhysicalDeviceCooperativeMatrixFeaturesKHR:
        result=(VkPhysicalDeviceCooperativeMatrixFeaturesKHR*)malloc(sizeof(VkPhysicalDeviceCooperativeMatrixFeaturesKHR));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceCooperativeMatrixFeaturesKHR());
        return result;
    

    case PNext::VkCooperativeMatrixPropertiesKHR:
        result=(VkCooperativeMatrixPropertiesKHR*)malloc(sizeof(VkCooperativeMatrixPropertiesKHR));
        result[0]=deserialize_struct(reader.getVkCooperativeMatrixPropertiesKHR());
        return result;
    

    case PNext::VkPhysicalDeviceCooperativeMatrixPropertiesKHR:
        result=(VkPhysicalDeviceCooperativeMatrixPropertiesKHR*)malloc(sizeof(VkPhysicalDeviceCooperativeMatrixPropertiesKHR));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceCooperativeMatrixPropertiesKHR());
        return result;
    

    case PNext::VkPhysicalDeviceCubicClampFeaturesQCOM:
        result=(VkPhysicalDeviceCubicClampFeaturesQCOM*)malloc(sizeof(VkPhysicalDeviceCubicClampFeaturesQCOM));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceCubicClampFeaturesQCOM());
        return result;
    

    case PNext::VkPhysicalDeviceYcbcrDegammaFeaturesQCOM:
        result=(VkPhysicalDeviceYcbcrDegammaFeaturesQCOM*)malloc(sizeof(VkPhysicalDeviceYcbcrDegammaFeaturesQCOM));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceYcbcrDegammaFeaturesQCOM());
        return result;
    

    case PNext::VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM:
        result=(VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM*)malloc(sizeof(VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM));
        result[0]=deserialize_struct(reader.getVkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM());
        return result;
    

    case PNext::VkPhysicalDeviceCubicWeightsFeaturesQCOM:
        result=(VkPhysicalDeviceCubicWeightsFeaturesQCOM*)malloc(sizeof(VkPhysicalDeviceCubicWeightsFeaturesQCOM));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceCubicWeightsFeaturesQCOM());
        return result;
    

    case PNext::VkSamplerCubicWeightsCreateInfoQCOM:
        result=(VkSamplerCubicWeightsCreateInfoQCOM*)malloc(sizeof(VkSamplerCubicWeightsCreateInfoQCOM));
        result[0]=deserialize_struct(reader.getVkSamplerCubicWeightsCreateInfoQCOM());
        return result;
    

    case PNext::VkBlitImageCubicWeightsInfoQCOM:
        result=(VkBlitImageCubicWeightsInfoQCOM*)malloc(sizeof(VkBlitImageCubicWeightsInfoQCOM));
        result[0]=deserialize_struct(reader.getVkBlitImageCubicWeightsInfoQCOM());
        return result;
    

    case PNext::VkPhysicalDeviceImageProcessing2FeaturesQCOM:
        result=(VkPhysicalDeviceImageProcessing2FeaturesQCOM*)malloc(sizeof(VkPhysicalDeviceImageProcessing2FeaturesQCOM));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceImageProcessing2FeaturesQCOM());
        return result;
    

    case PNext::VkPhysicalDeviceImageProcessing2PropertiesQCOM:
        result=(VkPhysicalDeviceImageProcessing2PropertiesQCOM*)malloc(sizeof(VkPhysicalDeviceImageProcessing2PropertiesQCOM));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceImageProcessing2PropertiesQCOM());
        return result;
    

    case PNext::VkSamplerBlockMatchWindowCreateInfoQCOM:
        result=(VkSamplerBlockMatchWindowCreateInfoQCOM*)malloc(sizeof(VkSamplerBlockMatchWindowCreateInfoQCOM));
        result[0]=deserialize_struct(reader.getVkSamplerBlockMatchWindowCreateInfoQCOM());
        return result;
    

    case PNext::VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV:
        result=(VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV*)malloc(sizeof(VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV());
        return result;
    

    case PNext::VkPhysicalDeviceLayeredDriverPropertiesMSFT:
        result=(VkPhysicalDeviceLayeredDriverPropertiesMSFT*)malloc(sizeof(VkPhysicalDeviceLayeredDriverPropertiesMSFT));
        result[0]=deserialize_struct(reader.getVkPhysicalDeviceLayeredDriverPropertiesMSFT());
        return result;
    
}}
std::map<VkStructureType, size_t> structure_type_to_size={
{VK_STRUCTURE_TYPE_APPLICATION_INFO, sizeof(VkApplicationInfo) },
{VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO, sizeof(VkDeviceQueueCreateInfo) },
{VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO, sizeof(VkDeviceCreateInfo) },
{VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO, sizeof(VkInstanceCreateInfo) },
{VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO, sizeof(VkMemoryAllocateInfo) },
{VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE, sizeof(VkMappedMemoryRange) },
{VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET, sizeof(VkWriteDescriptorSet) },
{VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET, sizeof(VkCopyDescriptorSet) },
{VK_STRUCTURE_TYPE_BUFFER_USAGE_FLAGS_2_CREATE_INFO_KHR, sizeof(VkBufferUsageFlags2CreateInfoKHR) },
{VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO, sizeof(VkBufferCreateInfo) },
{VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO, sizeof(VkBufferViewCreateInfo) },
{VK_STRUCTURE_TYPE_MEMORY_BARRIER, sizeof(VkMemoryBarrier) },
{VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER, sizeof(VkBufferMemoryBarrier) },
{VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER, sizeof(VkImageMemoryBarrier) },
{VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO, sizeof(VkImageCreateInfo) },
{VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO, sizeof(VkImageViewCreateInfo) },
{VK_STRUCTURE_TYPE_BIND_SPARSE_INFO, sizeof(VkBindSparseInfo) },
{VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO, sizeof(VkShaderModuleCreateInfo) },
{VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO, sizeof(VkDescriptorSetLayoutCreateInfo) },
{VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO, sizeof(VkDescriptorPoolCreateInfo) },
{VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO, sizeof(VkDescriptorSetAllocateInfo) },
{VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO, sizeof(VkPipelineShaderStageCreateInfo) },
{VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO, sizeof(VkComputePipelineCreateInfo) },
{VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_INDIRECT_BUFFER_INFO_NV, sizeof(VkComputePipelineIndirectBufferInfoNV) },
{VK_STRUCTURE_TYPE_PIPELINE_CREATE_FLAGS_2_CREATE_INFO_KHR, sizeof(VkPipelineCreateFlags2CreateInfoKHR) },
{VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO, sizeof(VkPipelineVertexInputStateCreateInfo) },
{VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO, sizeof(VkPipelineInputAssemblyStateCreateInfo) },
{VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO, sizeof(VkPipelineTessellationStateCreateInfo) },
{VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO, sizeof(VkPipelineViewportStateCreateInfo) },
{VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO, sizeof(VkPipelineRasterizationStateCreateInfo) },
{VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO, sizeof(VkPipelineMultisampleStateCreateInfo) },
{VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO, sizeof(VkPipelineColorBlendStateCreateInfo) },
{VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO, sizeof(VkPipelineDynamicStateCreateInfo) },
{VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO, sizeof(VkPipelineDepthStencilStateCreateInfo) },
{VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO, sizeof(VkGraphicsPipelineCreateInfo) },
{VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO, sizeof(VkPipelineCacheCreateInfo) },
{VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO, sizeof(VkPipelineLayoutCreateInfo) },
{VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO, sizeof(VkSamplerCreateInfo) },
{VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO, sizeof(VkCommandPoolCreateInfo) },
{VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO, sizeof(VkCommandBufferAllocateInfo) },
{VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO, sizeof(VkCommandBufferInheritanceInfo) },
{VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO, sizeof(VkCommandBufferBeginInfo) },
{VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO, sizeof(VkRenderPassBeginInfo) },
{VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO, sizeof(VkRenderPassCreateInfo) },
{VK_STRUCTURE_TYPE_EVENT_CREATE_INFO, sizeof(VkEventCreateInfo) },
{VK_STRUCTURE_TYPE_FENCE_CREATE_INFO, sizeof(VkFenceCreateInfo) },
{VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO, sizeof(VkSemaphoreCreateInfo) },
{VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO, sizeof(VkQueryPoolCreateInfo) },
{VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO, sizeof(VkFramebufferCreateInfo) },
{VK_STRUCTURE_TYPE_SUBMIT_INFO, sizeof(VkSubmitInfo) },
{VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR, sizeof(VkDisplayModeCreateInfoKHR) },
{VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR, sizeof(VkDisplaySurfaceCreateInfoKHR) },
{VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR, sizeof(VkDisplayPresentInfoKHR) },
{VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR, sizeof(VkXlibSurfaceCreateInfoKHR) },
{VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR, sizeof(VkXcbSurfaceCreateInfoKHR) },
{VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR, sizeof(VkSwapchainCreateInfoKHR) },
{VK_STRUCTURE_TYPE_PRESENT_INFO_KHR, sizeof(VkPresentInfoKHR) },
{VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT, sizeof(VkDebugReportCallbackCreateInfoEXT) },
{VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT, sizeof(VkValidationFlagsEXT) },
{VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT, sizeof(VkValidationFeaturesEXT) },
{VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD, sizeof(VkPipelineRasterizationStateRasterizationOrderAMD) },
{VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT, sizeof(VkDebugMarkerObjectNameInfoEXT) },
{VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT, sizeof(VkDebugMarkerObjectTagInfoEXT) },
{VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT, sizeof(VkDebugMarkerMarkerInfoEXT) },
{VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV, sizeof(VkDedicatedAllocationImageCreateInfoNV) },
{VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV, sizeof(VkDedicatedAllocationBufferCreateInfoNV) },
{VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV, sizeof(VkDedicatedAllocationMemoryAllocateInfoNV) },
{VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV, sizeof(VkExternalMemoryImageCreateInfoNV) },
{VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV, sizeof(VkExportMemoryAllocateInfoNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV, sizeof(VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_COMPUTE_FEATURES_NV, sizeof(VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV) },
{VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO, sizeof(VkDevicePrivateDataCreateInfo) },
{VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO, sizeof(VkPrivateDataSlotCreateInfo) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES, sizeof(VkPhysicalDevicePrivateDataFeatures) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV, sizeof(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT, sizeof(VkPhysicalDeviceMultiDrawPropertiesEXT) },
{VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV, sizeof(VkGraphicsShaderGroupCreateInfoNV) },
{VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV, sizeof(VkGraphicsPipelineShaderGroupsCreateInfoNV) },
{VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV, sizeof(VkIndirectCommandsLayoutTokenNV) },
{VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV, sizeof(VkIndirectCommandsLayoutCreateInfoNV) },
{VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV, sizeof(VkGeneratedCommandsInfoNV) },
{VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV, sizeof(VkGeneratedCommandsMemoryRequirementsInfoNV) },
{VK_STRUCTURE_TYPE_PIPELINE_INDIRECT_DEVICE_ADDRESS_INFO_NV, sizeof(VkPipelineIndirectDeviceAddressInfoNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2, sizeof(VkPhysicalDeviceFeatures2) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2, sizeof(VkPhysicalDeviceProperties2) },
{VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2, sizeof(VkFormatProperties2) },
{VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2, sizeof(VkImageFormatProperties2) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2, sizeof(VkPhysicalDeviceImageFormatInfo2) },
{VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2, sizeof(VkQueueFamilyProperties2) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2, sizeof(VkPhysicalDeviceMemoryProperties2) },
{VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2, sizeof(VkSparseImageFormatProperties2) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2, sizeof(VkPhysicalDeviceSparseImageFormatInfo2) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR, sizeof(VkPhysicalDevicePushDescriptorPropertiesKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES, sizeof(VkPhysicalDeviceDriverProperties) },
{VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR, sizeof(VkPresentRegionsKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES, sizeof(VkPhysicalDeviceVariablePointersFeatures) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO, sizeof(VkPhysicalDeviceExternalImageFormatInfo) },
{VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES, sizeof(VkExternalImageFormatProperties) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO, sizeof(VkPhysicalDeviceExternalBufferInfo) },
{VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES, sizeof(VkExternalBufferProperties) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES, sizeof(VkPhysicalDeviceIDProperties) },
{VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO, sizeof(VkExternalMemoryImageCreateInfo) },
{VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO, sizeof(VkExternalMemoryBufferCreateInfo) },
{VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO, sizeof(VkExportMemoryAllocateInfo) },
{VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR, sizeof(VkImportMemoryFdInfoKHR) },
{VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR, sizeof(VkMemoryFdPropertiesKHR) },
{VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR, sizeof(VkMemoryGetFdInfoKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO, sizeof(VkPhysicalDeviceExternalSemaphoreInfo) },
{VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES, sizeof(VkExternalSemaphoreProperties) },
{VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO, sizeof(VkExportSemaphoreCreateInfo) },
{VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR, sizeof(VkImportSemaphoreFdInfoKHR) },
{VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR, sizeof(VkSemaphoreGetFdInfoKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO, sizeof(VkPhysicalDeviceExternalFenceInfo) },
{VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES, sizeof(VkExternalFenceProperties) },
{VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO, sizeof(VkExportFenceCreateInfo) },
{VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR, sizeof(VkImportFenceFdInfoKHR) },
{VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR, sizeof(VkFenceGetFdInfoKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES, sizeof(VkPhysicalDeviceMultiviewFeatures) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES, sizeof(VkPhysicalDeviceMultiviewProperties) },
{VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO, sizeof(VkRenderPassMultiviewCreateInfo) },
{VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT, sizeof(VkSurfaceCapabilities2EXT) },
{VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT, sizeof(VkDisplayPowerInfoEXT) },
{VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT, sizeof(VkDeviceEventInfoEXT) },
{VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT, sizeof(VkDisplayEventInfoEXT) },
{VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT, sizeof(VkSwapchainCounterCreateInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES, sizeof(VkPhysicalDeviceGroupProperties) },
{VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO, sizeof(VkMemoryAllocateFlagsInfo) },
{VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO, sizeof(VkBindBufferMemoryInfo) },
{VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO, sizeof(VkBindBufferMemoryDeviceGroupInfo) },
{VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO, sizeof(VkBindImageMemoryInfo) },
{VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO, sizeof(VkBindImageMemoryDeviceGroupInfo) },
{VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO, sizeof(VkDeviceGroupRenderPassBeginInfo) },
{VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO, sizeof(VkDeviceGroupCommandBufferBeginInfo) },
{VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO, sizeof(VkDeviceGroupSubmitInfo) },
{VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO, sizeof(VkDeviceGroupBindSparseInfo) },
{VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR, sizeof(VkDeviceGroupPresentCapabilitiesKHR) },
{VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR, sizeof(VkImageSwapchainCreateInfoKHR) },
{VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR, sizeof(VkBindImageMemorySwapchainInfoKHR) },
{VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR, sizeof(VkAcquireNextImageInfoKHR) },
{VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR, sizeof(VkDeviceGroupPresentInfoKHR) },
{VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO, sizeof(VkDeviceGroupDeviceCreateInfo) },
{VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR, sizeof(VkDeviceGroupSwapchainCreateInfoKHR) },
{VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO, sizeof(VkDescriptorUpdateTemplateCreateInfo) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR, sizeof(VkPhysicalDevicePresentIdFeaturesKHR) },
{VK_STRUCTURE_TYPE_PRESENT_ID_KHR, sizeof(VkPresentIdKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR, sizeof(VkPhysicalDevicePresentWaitFeaturesKHR) },
{VK_STRUCTURE_TYPE_HDR_METADATA_EXT, sizeof(VkHdrMetadataEXT) },
{VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD, sizeof(VkDisplayNativeHdrSurfaceCapabilitiesAMD) },
{VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD, sizeof(VkSwapchainDisplayNativeHdrCreateInfoAMD) },
{VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE, sizeof(VkPresentTimesInfoGOOGLE) },
{VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV, sizeof(VkPipelineViewportWScalingStateCreateInfoNV) },
{VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV, sizeof(VkPipelineViewportSwizzleStateCreateInfoNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT, sizeof(VkPhysicalDeviceDiscardRectanglePropertiesEXT) },
{VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT, sizeof(VkPipelineDiscardRectangleStateCreateInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX, sizeof(VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX) },
{VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO, sizeof(VkRenderPassInputAttachmentAspectCreateInfo) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR, sizeof(VkPhysicalDeviceSurfaceInfo2KHR) },
{VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR, sizeof(VkSurfaceCapabilities2KHR) },
{VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR, sizeof(VkSurfaceFormat2KHR) },
{VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR, sizeof(VkDisplayProperties2KHR) },
{VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR, sizeof(VkDisplayPlaneProperties2KHR) },
{VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR, sizeof(VkDisplayModeProperties2KHR) },
{VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR, sizeof(VkDisplayPlaneInfo2KHR) },
{VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR, sizeof(VkDisplayPlaneCapabilities2KHR) },
{VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR, sizeof(VkSharedPresentSurfaceCapabilitiesKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES, sizeof(VkPhysicalDevice16BitStorageFeatures) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES, sizeof(VkPhysicalDeviceSubgroupProperties) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES, sizeof(VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures) },
{VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2, sizeof(VkBufferMemoryRequirementsInfo2) },
{VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS, sizeof(VkDeviceBufferMemoryRequirements) },
{VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2, sizeof(VkImageMemoryRequirementsInfo2) },
{VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2, sizeof(VkImageSparseMemoryRequirementsInfo2) },
{VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS, sizeof(VkDeviceImageMemoryRequirements) },
{VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2, sizeof(VkMemoryRequirements2) },
{VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2, sizeof(VkSparseImageMemoryRequirements2) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES, sizeof(VkPhysicalDevicePointClippingProperties) },
{VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS, sizeof(VkMemoryDedicatedRequirements) },
{VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO, sizeof(VkMemoryDedicatedAllocateInfo) },
{VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO, sizeof(VkImageViewUsageCreateInfo) },
{VK_STRUCTURE_TYPE_IMAGE_VIEW_SLICED_CREATE_INFO_EXT, sizeof(VkImageViewSlicedCreateInfoEXT) },
{VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO, sizeof(VkPipelineTessellationDomainOriginStateCreateInfo) },
{VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO, sizeof(VkSamplerYcbcrConversionInfo) },
{VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO, sizeof(VkSamplerYcbcrConversionCreateInfo) },
{VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO, sizeof(VkBindImagePlaneMemoryInfo) },
{VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO, sizeof(VkImagePlaneMemoryRequirementsInfo) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES, sizeof(VkPhysicalDeviceSamplerYcbcrConversionFeatures) },
{VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES, sizeof(VkSamplerYcbcrConversionImageFormatProperties) },
{VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD, sizeof(VkTextureLODGatherFormatPropertiesAMD) },
{VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT, sizeof(VkConditionalRenderingBeginInfoEXT) },
{VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO, sizeof(VkProtectedSubmitInfo) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES, sizeof(VkPhysicalDeviceProtectedMemoryFeatures) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES, sizeof(VkPhysicalDeviceProtectedMemoryProperties) },
{VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2, sizeof(VkDeviceQueueInfo2) },
{VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV, sizeof(VkPipelineCoverageToColorStateCreateInfoNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES, sizeof(VkPhysicalDeviceSamplerFilterMinmaxProperties) },
{VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT, sizeof(VkSampleLocationsInfoEXT) },
{VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT, sizeof(VkRenderPassSampleLocationsBeginInfoEXT) },
{VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT, sizeof(VkPipelineSampleLocationsStateCreateInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT, sizeof(VkPhysicalDeviceSampleLocationsPropertiesEXT) },
{VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT, sizeof(VkMultisamplePropertiesEXT) },
{VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO, sizeof(VkSamplerReductionModeCreateInfo) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT, sizeof(VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT, sizeof(VkPhysicalDeviceMultiDrawFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT, sizeof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT) },
{VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT, sizeof(VkPipelineColorBlendAdvancedStateCreateInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES, sizeof(VkPhysicalDeviceInlineUniformBlockFeatures) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES, sizeof(VkPhysicalDeviceInlineUniformBlockProperties) },
{VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK, sizeof(VkWriteDescriptorSetInlineUniformBlock) },
{VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO, sizeof(VkDescriptorPoolInlineUniformBlockCreateInfo) },
{VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV, sizeof(VkPipelineCoverageModulationStateCreateInfoNV) },
{VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO, sizeof(VkImageFormatListCreateInfo) },
{VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT, sizeof(VkValidationCacheCreateInfoEXT) },
{VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT, sizeof(VkShaderModuleValidationCacheCreateInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES, sizeof(VkPhysicalDeviceMaintenance3Properties) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES, sizeof(VkPhysicalDeviceMaintenance4Features) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES, sizeof(VkPhysicalDeviceMaintenance4Properties) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES_KHR, sizeof(VkPhysicalDeviceMaintenance5FeaturesKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES_KHR, sizeof(VkPhysicalDeviceMaintenance5PropertiesKHR) },
{VK_STRUCTURE_TYPE_RENDERING_AREA_INFO_KHR, sizeof(VkRenderingAreaInfoKHR) },
{VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT, sizeof(VkDescriptorSetLayoutSupport) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES, sizeof(VkPhysicalDeviceShaderDrawParametersFeatures) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES, sizeof(VkPhysicalDeviceShaderFloat16Int8Features) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES, sizeof(VkPhysicalDeviceFloatControlsProperties) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES, sizeof(VkPhysicalDeviceHostQueryResetFeatures) },
{VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR, sizeof(VkDeviceQueueGlobalPriorityCreateInfoKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR, sizeof(VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR) },
{VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR, sizeof(VkQueueFamilyGlobalPriorityPropertiesKHR) },
{VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT, sizeof(VkDebugUtilsObjectNameInfoEXT) },
{VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT, sizeof(VkDebugUtilsObjectTagInfoEXT) },
{VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT, sizeof(VkDebugUtilsLabelEXT) },
{VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT, sizeof(VkDebugUtilsMessengerCreateInfoEXT) },
{VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT, sizeof(VkDebugUtilsMessengerCallbackDataEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT, sizeof(VkPhysicalDeviceDeviceMemoryReportFeaturesEXT) },
{VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT, sizeof(VkDeviceDeviceMemoryReportCreateInfoEXT) },
{VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT, sizeof(VkDeviceMemoryReportCallbackDataEXT) },
{VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT, sizeof(VkImportMemoryHostPointerInfoEXT) },
{VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT, sizeof(VkMemoryHostPointerPropertiesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT, sizeof(VkPhysicalDeviceExternalMemoryHostPropertiesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT, sizeof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT) },
{VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT, sizeof(VkCalibratedTimestampInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD, sizeof(VkPhysicalDeviceShaderCorePropertiesAMD) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD, sizeof(VkPhysicalDeviceShaderCoreProperties2AMD) },
{VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT, sizeof(VkPipelineRasterizationConservativeStateCreateInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES, sizeof(VkPhysicalDeviceDescriptorIndexingFeatures) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES, sizeof(VkPhysicalDeviceDescriptorIndexingProperties) },
{VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO, sizeof(VkDescriptorSetLayoutBindingFlagsCreateInfo) },
{VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO, sizeof(VkDescriptorSetVariableDescriptorCountAllocateInfo) },
{VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT, sizeof(VkDescriptorSetVariableDescriptorCountLayoutSupport) },
{VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2, sizeof(VkAttachmentDescription2) },
{VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2, sizeof(VkAttachmentReference2) },
{VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2, sizeof(VkSubpassDescription2) },
{VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2, sizeof(VkSubpassDependency2) },
{VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2, sizeof(VkRenderPassCreateInfo2) },
{VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO, sizeof(VkSubpassBeginInfo) },
{VK_STRUCTURE_TYPE_SUBPASS_END_INFO, sizeof(VkSubpassEndInfo) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES, sizeof(VkPhysicalDeviceTimelineSemaphoreFeatures) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES, sizeof(VkPhysicalDeviceTimelineSemaphoreProperties) },
{VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO, sizeof(VkSemaphoreTypeCreateInfo) },
{VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO, sizeof(VkTimelineSemaphoreSubmitInfo) },
{VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO, sizeof(VkSemaphoreWaitInfo) },
{VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO, sizeof(VkSemaphoreSignalInfo) },
{VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT, sizeof(VkPipelineVertexInputDivisorStateCreateInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT, sizeof(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT, sizeof(VkPhysicalDevicePCIBusInfoPropertiesEXT) },
{VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT, sizeof(VkCommandBufferInheritanceConditionalRenderingInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES, sizeof(VkPhysicalDevice8BitStorageFeatures) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT, sizeof(VkPhysicalDeviceConditionalRenderingFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES, sizeof(VkPhysicalDeviceVulkanMemoryModelFeatures) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES, sizeof(VkPhysicalDeviceShaderAtomicInt64Features) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT, sizeof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT, sizeof(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT, sizeof(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT) },
{VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV, sizeof(VkQueueFamilyCheckpointPropertiesNV) },
{VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV, sizeof(VkCheckpointDataNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES, sizeof(VkPhysicalDeviceDepthStencilResolveProperties) },
{VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE, sizeof(VkSubpassDescriptionDepthStencilResolve) },
{VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT, sizeof(VkImageViewASTCDecodeModeEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT, sizeof(VkPhysicalDeviceASTCDecodeFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT, sizeof(VkPhysicalDeviceTransformFeedbackFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT, sizeof(VkPhysicalDeviceTransformFeedbackPropertiesEXT) },
{VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT, sizeof(VkPipelineRasterizationStateStreamCreateInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV, sizeof(VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV) },
{VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV, sizeof(VkPipelineRepresentativeFragmentTestStateCreateInfoNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV, sizeof(VkPhysicalDeviceExclusiveScissorFeaturesNV) },
{VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV, sizeof(VkPipelineViewportExclusiveScissorStateCreateInfoNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV, sizeof(VkPhysicalDeviceCornerSampledImageFeaturesNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV, sizeof(VkPhysicalDeviceComputeShaderDerivativesFeaturesNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV, sizeof(VkPhysicalDeviceShaderImageFootprintFeaturesNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV, sizeof(VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV, sizeof(VkPhysicalDeviceCopyMemoryIndirectFeaturesNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV, sizeof(VkPhysicalDeviceCopyMemoryIndirectPropertiesNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV, sizeof(VkPhysicalDeviceMemoryDecompressionFeaturesNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV, sizeof(VkPhysicalDeviceMemoryDecompressionPropertiesNV) },
{VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV, sizeof(VkPipelineViewportShadingRateImageStateCreateInfoNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV, sizeof(VkPhysicalDeviceShadingRateImageFeaturesNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV, sizeof(VkPhysicalDeviceShadingRateImagePropertiesNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI, sizeof(VkPhysicalDeviceInvocationMaskFeaturesHUAWEI) },
{VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV, sizeof(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV, sizeof(VkPhysicalDeviceMeshShaderFeaturesNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV, sizeof(VkPhysicalDeviceMeshShaderPropertiesNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT, sizeof(VkPhysicalDeviceMeshShaderFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT, sizeof(VkPhysicalDeviceMeshShaderPropertiesEXT) },
{VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV, sizeof(VkRayTracingShaderGroupCreateInfoNV) },
{VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR, sizeof(VkRayTracingShaderGroupCreateInfoKHR) },
{VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV, sizeof(VkRayTracingPipelineCreateInfoNV) },
{VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR, sizeof(VkRayTracingPipelineCreateInfoKHR) },
{VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV, sizeof(VkGeometryTrianglesNV) },
{VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV, sizeof(VkGeometryAABBNV) },
{VK_STRUCTURE_TYPE_GEOMETRY_NV, sizeof(VkGeometryNV) },
{VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV, sizeof(VkAccelerationStructureInfoNV) },
{VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV, sizeof(VkAccelerationStructureCreateInfoNV) },
{VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV, sizeof(VkBindAccelerationStructureMemoryInfoNV) },
{VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR, sizeof(VkWriteDescriptorSetAccelerationStructureKHR) },
{VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV, sizeof(VkWriteDescriptorSetAccelerationStructureNV) },
{VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV, sizeof(VkAccelerationStructureMemoryRequirementsInfoNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR, sizeof(VkPhysicalDeviceAccelerationStructureFeaturesKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR, sizeof(VkPhysicalDeviceRayTracingPipelineFeaturesKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR, sizeof(VkPhysicalDeviceRayQueryFeaturesKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR, sizeof(VkPhysicalDeviceAccelerationStructurePropertiesKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR, sizeof(VkPhysicalDeviceRayTracingPipelinePropertiesKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV, sizeof(VkPhysicalDeviceRayTracingPropertiesNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR, sizeof(VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR) },
{VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT, sizeof(VkDrmFormatModifierPropertiesListEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT, sizeof(VkPhysicalDeviceImageDrmFormatModifierInfoEXT) },
{VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT, sizeof(VkImageDrmFormatModifierListCreateInfoEXT) },
{VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT, sizeof(VkImageDrmFormatModifierExplicitCreateInfoEXT) },
{VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT, sizeof(VkImageDrmFormatModifierPropertiesEXT) },
{VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO, sizeof(VkImageStencilUsageCreateInfo) },
{VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD, sizeof(VkDeviceMemoryOverallocationCreateInfoAMD) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT, sizeof(VkPhysicalDeviceFragmentDensityMapFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT, sizeof(VkPhysicalDeviceFragmentDensityMap2FeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM, sizeof(VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT, sizeof(VkPhysicalDeviceFragmentDensityMapPropertiesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT, sizeof(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM, sizeof(VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM) },
{VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT, sizeof(VkRenderPassFragmentDensityMapCreateInfoEXT) },
{VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM, sizeof(VkSubpassFragmentDensityMapOffsetEndInfoQCOM) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES, sizeof(VkPhysicalDeviceScalarBlockLayoutFeatures) },
{VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR, sizeof(VkSurfaceProtectedCapabilitiesKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES, sizeof(VkPhysicalDeviceUniformBufferStandardLayoutFeatures) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT, sizeof(VkPhysicalDeviceDepthClipEnableFeaturesEXT) },
{VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT, sizeof(VkPipelineRasterizationDepthClipStateCreateInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT, sizeof(VkPhysicalDeviceMemoryBudgetPropertiesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT, sizeof(VkPhysicalDeviceMemoryPriorityFeaturesEXT) },
{VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT, sizeof(VkMemoryPriorityAllocateInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT, sizeof(VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES, sizeof(VkPhysicalDeviceBufferDeviceAddressFeatures) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT, sizeof(VkPhysicalDeviceBufferDeviceAddressFeaturesEXT) },
{VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO, sizeof(VkBufferDeviceAddressInfo) },
{VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO, sizeof(VkBufferOpaqueCaptureAddressCreateInfo) },
{VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT, sizeof(VkBufferDeviceAddressCreateInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT, sizeof(VkPhysicalDeviceImageViewImageFormatInfoEXT) },
{VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT, sizeof(VkFilterCubicImageViewImageFormatPropertiesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES, sizeof(VkPhysicalDeviceImagelessFramebufferFeatures) },
{VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO, sizeof(VkFramebufferAttachmentsCreateInfo) },
{VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO, sizeof(VkFramebufferAttachmentImageInfo) },
{VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO, sizeof(VkRenderPassAttachmentBeginInfo) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES, sizeof(VkPhysicalDeviceTextureCompressionASTCHDRFeatures) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV, sizeof(VkPhysicalDeviceCooperativeMatrixFeaturesNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV, sizeof(VkPhysicalDeviceCooperativeMatrixPropertiesNV) },
{VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV, sizeof(VkCooperativeMatrixPropertiesNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT, sizeof(VkPhysicalDeviceYcbcrImageArraysFeaturesEXT) },
{VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX, sizeof(VkImageViewHandleInfoNVX) },
{VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX, sizeof(VkImageViewAddressPropertiesNVX) },
{VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO, sizeof(VkPipelineCreationFeedbackCreateInfo) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV, sizeof(VkPhysicalDevicePresentBarrierFeaturesNV) },
{VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_PRESENT_BARRIER_NV, sizeof(VkSurfaceCapabilitiesPresentBarrierNV) },
{VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV, sizeof(VkSwapchainPresentBarrierCreateInfoNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR, sizeof(VkPhysicalDevicePerformanceQueryFeaturesKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR, sizeof(VkPhysicalDevicePerformanceQueryPropertiesKHR) },
{VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR, sizeof(VkPerformanceCounterKHR) },
{VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR, sizeof(VkPerformanceCounterDescriptionKHR) },
{VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR, sizeof(VkQueryPoolPerformanceCreateInfoKHR) },
{VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR, sizeof(VkAcquireProfilingLockInfoKHR) },
{VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR, sizeof(VkPerformanceQuerySubmitInfoKHR) },
{VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT, sizeof(VkHeadlessSurfaceCreateInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV, sizeof(VkPhysicalDeviceCoverageReductionModeFeaturesNV) },
{VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV, sizeof(VkPipelineCoverageReductionStateCreateInfoNV) },
{VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV, sizeof(VkFramebufferMixedSamplesCombinationNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL, sizeof(VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL) },
{VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL, sizeof(VkInitializePerformanceApiInfoINTEL) },
{VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL, sizeof(VkQueryPoolPerformanceQueryCreateInfoINTEL) },
{VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL, sizeof(VkPerformanceMarkerInfoINTEL) },
{VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL, sizeof(VkPerformanceStreamMarkerInfoINTEL) },
{VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL, sizeof(VkPerformanceOverrideInfoINTEL) },
{VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL, sizeof(VkPerformanceConfigurationAcquireInfoINTEL) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR, sizeof(VkPhysicalDeviceShaderClockFeaturesKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT, sizeof(VkPhysicalDeviceIndexTypeUint8FeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV, sizeof(VkPhysicalDeviceShaderSMBuiltinsPropertiesNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV, sizeof(VkPhysicalDeviceShaderSMBuiltinsFeaturesNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT, sizeof(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES, sizeof(VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures) },
{VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT, sizeof(VkAttachmentReferenceStencilLayout) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT, sizeof(VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT) },
{VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT, sizeof(VkAttachmentDescriptionStencilLayout) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR, sizeof(VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR) },
{VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR, sizeof(VkPipelineInfoKHR) },
{VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR, sizeof(VkPipelineExecutablePropertiesKHR) },
{VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR, sizeof(VkPipelineExecutableInfoKHR) },
{VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR, sizeof(VkPipelineExecutableStatisticKHR) },
{VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR, sizeof(VkPipelineExecutableInternalRepresentationKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES, sizeof(VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT, sizeof(VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES, sizeof(VkPhysicalDeviceTexelBufferAlignmentProperties) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES, sizeof(VkPhysicalDeviceSubgroupSizeControlFeatures) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES, sizeof(VkPhysicalDeviceSubgroupSizeControlProperties) },
{VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO, sizeof(VkPipelineShaderStageRequiredSubgroupSizeCreateInfo) },
{VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI, sizeof(VkSubpassShadingPipelineCreateInfoHUAWEI) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI, sizeof(VkPhysicalDeviceSubpassShadingPropertiesHUAWEI) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_PROPERTIES_HUAWEI, sizeof(VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI) },
{VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO, sizeof(VkMemoryOpaqueCaptureAddressAllocateInfo) },
{VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO, sizeof(VkDeviceMemoryOpaqueCaptureAddressInfo) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT, sizeof(VkPhysicalDeviceLineRasterizationFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT, sizeof(VkPhysicalDeviceLineRasterizationPropertiesEXT) },
{VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT, sizeof(VkPipelineRasterizationLineStateCreateInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES, sizeof(VkPhysicalDevicePipelineCreationCacheControlFeatures) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES, sizeof(VkPhysicalDeviceVulkan11Features) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES, sizeof(VkPhysicalDeviceVulkan11Properties) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES, sizeof(VkPhysicalDeviceVulkan12Features) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES, sizeof(VkPhysicalDeviceVulkan12Properties) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES, sizeof(VkPhysicalDeviceVulkan13Features) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES, sizeof(VkPhysicalDeviceVulkan13Properties) },
{VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD, sizeof(VkPipelineCompilerControlCreateInfoAMD) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD, sizeof(VkPhysicalDeviceCoherentMemoryFeaturesAMD) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES, sizeof(VkPhysicalDeviceToolProperties) },
{VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT, sizeof(VkSamplerCustomBorderColorCreateInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT, sizeof(VkPhysicalDeviceCustomBorderColorPropertiesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT, sizeof(VkPhysicalDeviceCustomBorderColorFeaturesEXT) },
{VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT, sizeof(VkSamplerBorderColorComponentMappingCreateInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT, sizeof(VkPhysicalDeviceBorderColorSwizzleFeaturesEXT) },
{VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR, sizeof(VkAccelerationStructureGeometryTrianglesDataKHR) },
{VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR, sizeof(VkAccelerationStructureGeometryAabbsDataKHR) },
{VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR, sizeof(VkAccelerationStructureGeometryInstancesDataKHR) },
{VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR, sizeof(VkAccelerationStructureGeometryKHR) },
{VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR, sizeof(VkAccelerationStructureBuildGeometryInfoKHR) },
{VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR, sizeof(VkAccelerationStructureCreateInfoKHR) },
{VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR, sizeof(VkAccelerationStructureDeviceAddressInfoKHR) },
{VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR, sizeof(VkAccelerationStructureVersionInfoKHR) },
{VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR, sizeof(VkCopyAccelerationStructureInfoKHR) },
{VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR, sizeof(VkCopyAccelerationStructureToMemoryInfoKHR) },
{VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR, sizeof(VkCopyMemoryToAccelerationStructureInfoKHR) },
{VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR, sizeof(VkRayTracingPipelineInterfaceCreateInfoKHR) },
{VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR, sizeof(VkPipelineLibraryCreateInfoKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT, sizeof(VkPhysicalDeviceExtendedDynamicStateFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT, sizeof(VkPhysicalDeviceExtendedDynamicState2FeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT, sizeof(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT, sizeof(VkPhysicalDeviceExtendedDynamicState3PropertiesEXT) },
{VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM, sizeof(VkRenderPassTransformBeginInfoQCOM) },
{VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM, sizeof(VkCopyCommandTransformInfoQCOM) },
{VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM, sizeof(VkCommandBufferInheritanceRenderPassTransformInfoQCOM) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV, sizeof(VkPhysicalDeviceDiagnosticsConfigFeaturesNV) },
{VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV, sizeof(VkDeviceDiagnosticsConfigCreateInfoNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES, sizeof(VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR, sizeof(VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT, sizeof(VkPhysicalDeviceRobustness2FeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT, sizeof(VkPhysicalDeviceRobustness2PropertiesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES, sizeof(VkPhysicalDeviceImageRobustnessFeatures) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR, sizeof(VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT, sizeof(VkPhysicalDevice4444FormatsFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI, sizeof(VkPhysicalDeviceSubpassShadingFeaturesHUAWEI) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_FEATURES_HUAWEI, sizeof(VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI) },
{VK_STRUCTURE_TYPE_BUFFER_COPY_2, sizeof(VkBufferCopy2) },
{VK_STRUCTURE_TYPE_IMAGE_COPY_2, sizeof(VkImageCopy2) },
{VK_STRUCTURE_TYPE_IMAGE_BLIT_2, sizeof(VkImageBlit2) },
{VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2, sizeof(VkBufferImageCopy2) },
{VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2, sizeof(VkImageResolve2) },
{VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2, sizeof(VkCopyBufferInfo2) },
{VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2, sizeof(VkCopyImageInfo2) },
{VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2, sizeof(VkBlitImageInfo2) },
{VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2, sizeof(VkCopyBufferToImageInfo2) },
{VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2, sizeof(VkCopyImageToBufferInfo2) },
{VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2, sizeof(VkResolveImageInfo2) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT, sizeof(VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT) },
{VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR, sizeof(VkFragmentShadingRateAttachmentInfoKHR) },
{VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR, sizeof(VkPipelineFragmentShadingRateStateCreateInfoKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR, sizeof(VkPhysicalDeviceFragmentShadingRateFeaturesKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR, sizeof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR, sizeof(VkPhysicalDeviceFragmentShadingRateKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES, sizeof(VkPhysicalDeviceShaderTerminateInvocationFeatures) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV, sizeof(VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV, sizeof(VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV) },
{VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV, sizeof(VkPipelineFragmentShadingRateEnumStateCreateInfoNV) },
{VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR, sizeof(VkAccelerationStructureBuildSizesInfoKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT, sizeof(VkPhysicalDeviceImage2DViewOf3DFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_SLICED_VIEW_OF_3D_FEATURES_EXT, sizeof(VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_FEATURES_EXT, sizeof(VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT, sizeof(VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT) },
{VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT, sizeof(VkMutableDescriptorTypeCreateInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT, sizeof(VkPhysicalDeviceDepthClipControlFeaturesEXT) },
{VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT, sizeof(VkPipelineViewportDepthClipControlCreateInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT, sizeof(VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV, sizeof(VkPhysicalDeviceExternalMemoryRDMAFeaturesNV) },
{VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT, sizeof(VkVertexInputBindingDescription2EXT) },
{VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT, sizeof(VkVertexInputAttributeDescription2EXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT, sizeof(VkPhysicalDeviceColorWriteEnableFeaturesEXT) },
{VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT, sizeof(VkPipelineColorWriteCreateInfoEXT) },
{VK_STRUCTURE_TYPE_MEMORY_BARRIER_2, sizeof(VkMemoryBarrier2) },
{VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2, sizeof(VkImageMemoryBarrier2) },
{VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2, sizeof(VkBufferMemoryBarrier2) },
{VK_STRUCTURE_TYPE_DEPENDENCY_INFO, sizeof(VkDependencyInfo) },
{VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO, sizeof(VkSemaphoreSubmitInfo) },
{VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO, sizeof(VkCommandBufferSubmitInfo) },
{VK_STRUCTURE_TYPE_SUBMIT_INFO_2, sizeof(VkSubmitInfo2) },
{VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV, sizeof(VkQueueFamilyCheckpointProperties2NV) },
{VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV, sizeof(VkCheckpointData2NV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES, sizeof(VkPhysicalDeviceSynchronization2Features) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES_EXT, sizeof(VkPhysicalDeviceHostImageCopyFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES_EXT, sizeof(VkPhysicalDeviceHostImageCopyPropertiesEXT) },
{VK_STRUCTURE_TYPE_MEMORY_TO_IMAGE_COPY_EXT, sizeof(VkMemoryToImageCopyEXT) },
{VK_STRUCTURE_TYPE_IMAGE_TO_MEMORY_COPY_EXT, sizeof(VkImageToMemoryCopyEXT) },
{VK_STRUCTURE_TYPE_COPY_MEMORY_TO_IMAGE_INFO_EXT, sizeof(VkCopyMemoryToImageInfoEXT) },
{VK_STRUCTURE_TYPE_COPY_IMAGE_TO_MEMORY_INFO_EXT, sizeof(VkCopyImageToMemoryInfoEXT) },
{VK_STRUCTURE_TYPE_COPY_IMAGE_TO_IMAGE_INFO_EXT, sizeof(VkCopyImageToImageInfoEXT) },
{VK_STRUCTURE_TYPE_HOST_IMAGE_LAYOUT_TRANSITION_INFO_EXT, sizeof(VkHostImageLayoutTransitionInfoEXT) },
{VK_STRUCTURE_TYPE_SUBRESOURCE_HOST_MEMCPY_SIZE_EXT, sizeof(VkSubresourceHostMemcpySizeEXT) },
{VK_STRUCTURE_TYPE_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY_EXT, sizeof(VkHostImageCopyDevicePerformanceQueryEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT, sizeof(VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT, sizeof(VkPhysicalDeviceLegacyDitheringFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT, sizeof(VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT) },
{VK_STRUCTURE_TYPE_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT, sizeof(VkSubpassResolvePerformanceQueryEXT) },
{VK_STRUCTURE_TYPE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT, sizeof(VkMultisampledRenderToSingleSampledInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT, sizeof(VkPhysicalDevicePipelineProtectedAccessFeaturesEXT) },
{VK_STRUCTURE_TYPE_QUEUE_FAMILY_VIDEO_PROPERTIES_KHR, sizeof(VkQueueFamilyVideoPropertiesKHR) },
{VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR, sizeof(VkQueueFamilyQueryResultStatusPropertiesKHR) },
{VK_STRUCTURE_TYPE_VIDEO_PROFILE_LIST_INFO_KHR, sizeof(VkVideoProfileListInfoKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR, sizeof(VkPhysicalDeviceVideoFormatInfoKHR) },
{VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR, sizeof(VkVideoFormatPropertiesKHR) },
{VK_STRUCTURE_TYPE_VIDEO_PROFILE_INFO_KHR, sizeof(VkVideoProfileInfoKHR) },
{VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR, sizeof(VkVideoCapabilitiesKHR) },
{VK_STRUCTURE_TYPE_VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR, sizeof(VkVideoSessionMemoryRequirementsKHR) },
{VK_STRUCTURE_TYPE_BIND_VIDEO_SESSION_MEMORY_INFO_KHR, sizeof(VkBindVideoSessionMemoryInfoKHR) },
{VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_INFO_KHR, sizeof(VkVideoPictureResourceInfoKHR) },
{VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_INFO_KHR, sizeof(VkVideoReferenceSlotInfoKHR) },
{VK_STRUCTURE_TYPE_VIDEO_DECODE_CAPABILITIES_KHR, sizeof(VkVideoDecodeCapabilitiesKHR) },
{VK_STRUCTURE_TYPE_VIDEO_DECODE_USAGE_INFO_KHR, sizeof(VkVideoDecodeUsageInfoKHR) },
{VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR, sizeof(VkVideoDecodeInfoKHR) },
{VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_INFO_KHR, sizeof(VkVideoDecodeH264ProfileInfoKHR) },
{VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_KHR, sizeof(VkVideoDecodeH264CapabilitiesKHR) },
{VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR, sizeof(VkVideoDecodeH264SessionParametersAddInfoKHR) },
{VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR, sizeof(VkVideoDecodeH264SessionParametersCreateInfoKHR) },
{VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_KHR, sizeof(VkVideoDecodeH264PictureInfoKHR) },
{VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_KHR, sizeof(VkVideoDecodeH264DpbSlotInfoKHR) },
{VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_INFO_KHR, sizeof(VkVideoDecodeH265ProfileInfoKHR) },
{VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_KHR, sizeof(VkVideoDecodeH265CapabilitiesKHR) },
{VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR, sizeof(VkVideoDecodeH265SessionParametersAddInfoKHR) },
{VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR, sizeof(VkVideoDecodeH265SessionParametersCreateInfoKHR) },
{VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_KHR, sizeof(VkVideoDecodeH265PictureInfoKHR) },
{VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_KHR, sizeof(VkVideoDecodeH265DpbSlotInfoKHR) },
{VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR, sizeof(VkVideoSessionCreateInfoKHR) },
{VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR, sizeof(VkVideoSessionParametersCreateInfoKHR) },
{VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR, sizeof(VkVideoSessionParametersUpdateInfoKHR) },
{VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR, sizeof(VkVideoBeginCodingInfoKHR) },
{VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR, sizeof(VkVideoEndCodingInfoKHR) },
{VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR, sizeof(VkVideoCodingControlInfoKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV, sizeof(VkPhysicalDeviceInheritedViewportScissorFeaturesNV) },
{VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV, sizeof(VkCommandBufferInheritanceViewportScissorInfoNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT, sizeof(VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT, sizeof(VkPhysicalDeviceProvokingVertexFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT, sizeof(VkPhysicalDeviceProvokingVertexPropertiesEXT) },
{VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT, sizeof(VkPipelineRasterizationProvokingVertexStateCreateInfoEXT) },
{VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX, sizeof(VkCuModuleCreateInfoNVX) },
{VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX, sizeof(VkCuFunctionCreateInfoNVX) },
{VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX, sizeof(VkCuLaunchInfoNVX) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT, sizeof(VkPhysicalDeviceDescriptorBufferFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT, sizeof(VkPhysicalDeviceDescriptorBufferPropertiesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT, sizeof(VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT) },
{VK_STRUCTURE_TYPE_DESCRIPTOR_ADDRESS_INFO_EXT, sizeof(VkDescriptorAddressInfoEXT) },
{VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_INFO_EXT, sizeof(VkDescriptorBufferBindingInfoEXT) },
{VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT, sizeof(VkDescriptorBufferBindingPushDescriptorBufferHandleEXT) },
{VK_STRUCTURE_TYPE_DESCRIPTOR_GET_INFO_EXT, sizeof(VkDescriptorGetInfoEXT) },
{VK_STRUCTURE_TYPE_BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT, sizeof(VkBufferCaptureDescriptorDataInfoEXT) },
{VK_STRUCTURE_TYPE_IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT, sizeof(VkImageCaptureDescriptorDataInfoEXT) },
{VK_STRUCTURE_TYPE_IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT, sizeof(VkImageViewCaptureDescriptorDataInfoEXT) },
{VK_STRUCTURE_TYPE_SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT, sizeof(VkSamplerCaptureDescriptorDataInfoEXT) },
{VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT, sizeof(VkAccelerationStructureCaptureDescriptorDataInfoEXT) },
{VK_STRUCTURE_TYPE_OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT, sizeof(VkOpaqueCaptureDescriptorDataCreateInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES, sizeof(VkPhysicalDeviceShaderIntegerDotProductFeatures) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES, sizeof(VkPhysicalDeviceShaderIntegerDotProductProperties) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT, sizeof(VkPhysicalDeviceDrmPropertiesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR, sizeof(VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR, sizeof(VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV, sizeof(VkPhysicalDeviceRayTracingMotionBlurFeaturesNV) },
{VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV, sizeof(VkAccelerationStructureGeometryMotionTrianglesDataNV) },
{VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV, sizeof(VkAccelerationStructureMotionInfoNV) },
{VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV, sizeof(VkMemoryGetRemoteAddressInfoNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT, sizeof(VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT) },
{VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3, sizeof(VkFormatProperties3) },
{VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT, sizeof(VkDrmFormatModifierPropertiesList2EXT) },
{VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO, sizeof(VkPipelineRenderingCreateInfo) },
{VK_STRUCTURE_TYPE_RENDERING_INFO, sizeof(VkRenderingInfo) },
{VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO, sizeof(VkRenderingAttachmentInfo) },
{VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR, sizeof(VkRenderingFragmentShadingRateAttachmentInfoKHR) },
{VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT, sizeof(VkRenderingFragmentDensityMapAttachmentInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES, sizeof(VkPhysicalDeviceDynamicRenderingFeatures) },
{VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO, sizeof(VkCommandBufferInheritanceRenderingInfo) },
{VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD, sizeof(VkAttachmentSampleCountInfoAMD) },
{VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX, sizeof(VkMultiviewPerViewAttributesInfoNVX) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT, sizeof(VkPhysicalDeviceImageViewMinLodFeaturesEXT) },
{VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT, sizeof(VkImageViewMinLodCreateInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT, sizeof(VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV, sizeof(VkPhysicalDeviceLinearColorAttachmentFeaturesNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT, sizeof(VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT, sizeof(VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT) },
{VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT, sizeof(VkGraphicsPipelineLibraryCreateInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE, sizeof(VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE) },
{VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE, sizeof(VkDescriptorSetBindingReferenceVALVE) },
{VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE, sizeof(VkDescriptorSetLayoutHostMappingInfoVALVE) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT, sizeof(VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT, sizeof(VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT) },
{VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT, sizeof(VkPipelineShaderStageModuleIdentifierCreateInfoEXT) },
{VK_STRUCTURE_TYPE_SHADER_MODULE_IDENTIFIER_EXT, sizeof(VkShaderModuleIdentifierEXT) },
{VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT, sizeof(VkImageCompressionControlEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT, sizeof(VkPhysicalDeviceImageCompressionControlFeaturesEXT) },
{VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT, sizeof(VkImageCompressionPropertiesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT, sizeof(VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT) },
{VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_KHR, sizeof(VkImageSubresource2KHR) },
{VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_KHR, sizeof(VkSubresourceLayout2KHR) },
{VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_CONTROL_EXT, sizeof(VkRenderPassCreationControlEXT) },
{VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT, sizeof(VkRenderPassCreationFeedbackCreateInfoEXT) },
{VK_STRUCTURE_TYPE_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT, sizeof(VkRenderPassSubpassFeedbackCreateInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT, sizeof(VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT) },
{VK_STRUCTURE_TYPE_MICROMAP_BUILD_INFO_EXT, sizeof(VkMicromapBuildInfoEXT) },
{VK_STRUCTURE_TYPE_MICROMAP_CREATE_INFO_EXT, sizeof(VkMicromapCreateInfoEXT) },
{VK_STRUCTURE_TYPE_MICROMAP_VERSION_INFO_EXT, sizeof(VkMicromapVersionInfoEXT) },
{VK_STRUCTURE_TYPE_COPY_MICROMAP_INFO_EXT, sizeof(VkCopyMicromapInfoEXT) },
{VK_STRUCTURE_TYPE_COPY_MICROMAP_TO_MEMORY_INFO_EXT, sizeof(VkCopyMicromapToMemoryInfoEXT) },
{VK_STRUCTURE_TYPE_COPY_MEMORY_TO_MICROMAP_INFO_EXT, sizeof(VkCopyMemoryToMicromapInfoEXT) },
{VK_STRUCTURE_TYPE_MICROMAP_BUILD_SIZES_INFO_EXT, sizeof(VkMicromapBuildSizesInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT, sizeof(VkPhysicalDeviceOpacityMicromapFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT, sizeof(VkPhysicalDeviceOpacityMicromapPropertiesEXT) },
{VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT, sizeof(VkAccelerationStructureTrianglesOpacityMicromapEXT) },
{VK_STRUCTURE_TYPE_PIPELINE_PROPERTIES_IDENTIFIER_EXT, sizeof(VkPipelinePropertiesIdentifierEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT, sizeof(VkPhysicalDevicePipelinePropertiesFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD, sizeof(VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD) },
{VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXT, sizeof(VkExternalMemoryAcquireUnmodifiedEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT, sizeof(VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT, sizeof(VkPhysicalDevicePipelineRobustnessFeaturesEXT) },
{VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO_EXT, sizeof(VkPipelineRobustnessCreateInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT, sizeof(VkPhysicalDevicePipelineRobustnessPropertiesEXT) },
{VK_STRUCTURE_TYPE_IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM, sizeof(VkImageViewSampleWeightCreateInfoQCOM) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM, sizeof(VkPhysicalDeviceImageProcessingFeaturesQCOM) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM, sizeof(VkPhysicalDeviceImageProcessingPropertiesQCOM) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM, sizeof(VkPhysicalDeviceTilePropertiesFeaturesQCOM) },
{VK_STRUCTURE_TYPE_TILE_PROPERTIES_QCOM, sizeof(VkTilePropertiesQCOM) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC, sizeof(VkPhysicalDeviceAmigoProfilingFeaturesSEC) },
{VK_STRUCTURE_TYPE_AMIGO_PROFILING_SUBMIT_INFO_SEC, sizeof(VkAmigoProfilingSubmitInfoSEC) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT, sizeof(VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT, sizeof(VkPhysicalDeviceDepthClampZeroOneFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT, sizeof(VkPhysicalDeviceAddressBindingReportFeaturesEXT) },
{VK_STRUCTURE_TYPE_DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT, sizeof(VkDeviceAddressBindingCallbackDataEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV, sizeof(VkPhysicalDeviceOpticalFlowFeaturesNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV, sizeof(VkPhysicalDeviceOpticalFlowPropertiesNV) },
{VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV, sizeof(VkOpticalFlowImageFormatInfoNV) },
{VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV, sizeof(VkOpticalFlowImageFormatPropertiesNV) },
{VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_INFO_NV, sizeof(VkOpticalFlowSessionCreateInfoNV) },
{VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV, sizeof(VkOpticalFlowSessionCreatePrivateDataInfoNV) },
{VK_STRUCTURE_TYPE_OPTICAL_FLOW_EXECUTE_INFO_NV, sizeof(VkOpticalFlowExecuteInfoNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FAULT_FEATURES_EXT, sizeof(VkPhysicalDeviceFaultFeaturesEXT) },
{VK_STRUCTURE_TYPE_DEVICE_FAULT_COUNTS_EXT, sizeof(VkDeviceFaultCountsEXT) },
{VK_STRUCTURE_TYPE_DEVICE_FAULT_INFO_EXT, sizeof(VkDeviceFaultInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_LIBRARY_GROUP_HANDLES_FEATURES_EXT, sizeof(VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT) },
{VK_STRUCTURE_TYPE_DEPTH_BIAS_INFO_EXT, sizeof(VkDepthBiasInfoEXT) },
{VK_STRUCTURE_TYPE_DEPTH_BIAS_REPRESENTATION_INFO_EXT, sizeof(VkDepthBiasRepresentationInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM, sizeof(VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM, sizeof(VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM) },
{VK_STRUCTURE_TYPE_FRAME_BOUNDARY_EXT, sizeof(VkFrameBoundaryEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAME_BOUNDARY_FEATURES_EXT, sizeof(VkPhysicalDeviceFrameBoundaryFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_FEATURES_EXT, sizeof(VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT) },
{VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_EXT, sizeof(VkSurfacePresentModeEXT) },
{VK_STRUCTURE_TYPE_SURFACE_PRESENT_SCALING_CAPABILITIES_EXT, sizeof(VkSurfacePresentScalingCapabilitiesEXT) },
{VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_COMPATIBILITY_EXT, sizeof(VkSurfacePresentModeCompatibilityEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_EXT, sizeof(VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT) },
{VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_FENCE_INFO_EXT, sizeof(VkSwapchainPresentFenceInfoEXT) },
{VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODES_CREATE_INFO_EXT, sizeof(VkSwapchainPresentModesCreateInfoEXT) },
{VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODE_INFO_EXT, sizeof(VkSwapchainPresentModeInfoEXT) },
{VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_SCALING_CREATE_INFO_EXT, sizeof(VkSwapchainPresentScalingCreateInfoEXT) },
{VK_STRUCTURE_TYPE_RELEASE_SWAPCHAIN_IMAGES_INFO_EXT, sizeof(VkReleaseSwapchainImagesInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_BIAS_CONTROL_FEATURES_EXT, sizeof(VkPhysicalDeviceDepthBiasControlFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV, sizeof(VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV, sizeof(VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV) },
{VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_INFO_LUNARG, sizeof(VkDirectDriverLoadingInfoLUNARG) },
{VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_LIST_LUNARG, sizeof(VkDirectDriverLoadingListLUNARG) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_VIEWPORTS_FEATURES_QCOM, sizeof(VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_POSITION_FETCH_FEATURES_KHR, sizeof(VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR) },
{VK_STRUCTURE_TYPE_DEVICE_IMAGE_SUBRESOURCE_INFO_KHR, sizeof(VkDeviceImageSubresourceInfoKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_ARM, sizeof(VkPhysicalDeviceShaderCorePropertiesARM) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_RENDER_AREAS_FEATURES_QCOM, sizeof(VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM) },
{VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_RENDER_AREAS_RENDER_PASS_BEGIN_INFO_QCOM, sizeof(VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM) },
{VK_STRUCTURE_TYPE_QUERY_LOW_LATENCY_SUPPORT_NV, sizeof(VkQueryLowLatencySupportNV) },
{VK_STRUCTURE_TYPE_MEMORY_MAP_INFO_KHR, sizeof(VkMemoryMapInfoKHR) },
{VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO_KHR, sizeof(VkMemoryUnmapInfoKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT, sizeof(VkPhysicalDeviceShaderObjectFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_PROPERTIES_EXT, sizeof(VkPhysicalDeviceShaderObjectPropertiesEXT) },
{VK_STRUCTURE_TYPE_SHADER_CREATE_INFO_EXT, sizeof(VkShaderCreateInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_FEATURES_EXT, sizeof(VkPhysicalDeviceShaderTileImageFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_PROPERTIES_EXT, sizeof(VkPhysicalDeviceShaderTileImagePropertiesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_KHR, sizeof(VkPhysicalDeviceCooperativeMatrixFeaturesKHR) },
{VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_KHR, sizeof(VkCooperativeMatrixPropertiesKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_KHR, sizeof(VkPhysicalDeviceCooperativeMatrixPropertiesKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_CLAMP_FEATURES_QCOM, sizeof(VkPhysicalDeviceCubicClampFeaturesQCOM) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_DEGAMMA_FEATURES_QCOM, sizeof(VkPhysicalDeviceYcbcrDegammaFeaturesQCOM) },
{VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_YCBCR_DEGAMMA_CREATE_INFO_QCOM, sizeof(VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_WEIGHTS_FEATURES_QCOM, sizeof(VkPhysicalDeviceCubicWeightsFeaturesQCOM) },
{VK_STRUCTURE_TYPE_SAMPLER_CUBIC_WEIGHTS_CREATE_INFO_QCOM, sizeof(VkSamplerCubicWeightsCreateInfoQCOM) },
{VK_STRUCTURE_TYPE_BLIT_IMAGE_CUBIC_WEIGHTS_INFO_QCOM, sizeof(VkBlitImageCubicWeightsInfoQCOM) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_FEATURES_QCOM, sizeof(VkPhysicalDeviceImageProcessing2FeaturesQCOM) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_PROPERTIES_QCOM, sizeof(VkPhysicalDeviceImageProcessing2PropertiesQCOM) },
{VK_STRUCTURE_TYPE_SAMPLER_BLOCK_MATCH_WINDOW_CREATE_INFO_QCOM, sizeof(VkSamplerBlockMatchWindowCreateInfoQCOM) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_POOL_OVERALLOCATION_FEATURES_NV, sizeof(VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_DRIVER_PROPERTIES_MSFT, sizeof(VkPhysicalDeviceLayeredDriverPropertiesMSFT) },
};

void* memdup(const void* mem, size_t size) { 
   void* out = malloc(size);

   if(out != NULL)
       memcpy(out, mem, size);

   return out;
}


void* copyVkStruct (const void* data){
    auto curr=data;
    while (true){
        if (curr==NULL){
        return NULL;
        }
        auto structure_type=((StreamStructure*)curr)->sType;
        if (!structure_type_to_size.contains(structure_type)){
            curr=((StreamStructure*)curr)->pNext;
            continue;
        }
        
        auto struct_size=structure_type_to_size[structure_type];
        auto result=memdup(curr, struct_size);
        
        return result;
    }
    
}


    void serialize_struct(VkBaseOutStructure::Builder& builder, VkBaseOutStructure member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            if ((member.pNext)==NULL){
                builder.disownpNext();
            return; }
        auto proto_arr=builder.initpNext();
        for(int kpmyioI=0; kpmyioI < 1; kpmyioI++){
            [&](){
            auto temp=proto_arr[kpmyioI];
            return serialize_struct(((member.pNext)[kpmyioI]), temp);
            }();
        }
        }();
}

    VkBaseOutStructure deserialize_struct(VkBaseOutStructure::Reader reader){
        auto result=VkBaseOutStructure();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            if (!reader.haspNext()){
                (result.pNext)=NULL;
            return; }{native_concat()}=(VkBaseOutStructure*)malloc(1*sizeof(VkBaseOutStructure));
        auto proto_arr=reader.getpNext(1);
        for(int kpmyioI=0; kpmyioI < 1; kpmyioI++){
            [&](){
            auto temp=proto_arr[kpmyioI];
            ((result.pNext)[kpmyioI])=deserialize_struct(temp);
            }();
        }
        }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkBaseOutStructure member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkBaseOutStructure member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkBaseInStructure::Builder& builder, VkBaseInStructure member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            if ((member.pNext)==NULL){
                builder.disownpNext();
            return; }
        auto proto_arr=builder.initpNext();
        for(int zewiUOi=0; zewiUOi < 1; zewiUOi++){
            [&](){
            auto temp=proto_arr[zewiUOi];
            return serialize_struct(((member.pNext)[zewiUOi]), temp);
            }();
        }
        }();
}

    VkBaseInStructure deserialize_struct(VkBaseInStructure::Reader reader){
        auto result=VkBaseInStructure();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ struct VkBaseInStructure* temp_dxnEHeC[&](){
            if (!reader.haspNext()){
                (result.pNext)=NULL;
            return; }{native_concat()}=(VkBaseInStructure*)malloc(1*sizeof(VkBaseInStructure));
        auto proto_arr=reader.getpNext(1);
        for(int JabJMHC=0; JabJMHC < 1; JabJMHC++){
            [&](){
            auto temp=proto_arr[JabJMHC];
            ((result.pNext)[JabJMHC])=deserialize_struct(temp);
            }();
        }
        }();(result.pNext)=temp_dxnEHeC;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkBaseInStructure member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkBaseInStructure member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkOffset2D::Builder& builder, VkOffset2D member){
        
    
[&](){return builder.setx((member.x));}();
[&](){return builder.sety((member.y));}();
}

    VkOffset2D deserialize_struct(VkOffset2D::Reader reader){
        auto result=VkOffset2D();
    
[&](){(result.x)=reader.getx();}();
[&](){(result.y)=reader.gety();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkOffset2D member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkOffset2D member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkOffset3D::Builder& builder, VkOffset3D member){
        
    
[&](){return builder.setx((member.x));}();
[&](){return builder.sety((member.y));}();
[&](){return builder.setz((member.z));}();
}

    VkOffset3D deserialize_struct(VkOffset3D::Reader reader){
        auto result=VkOffset3D();
    
[&](){(result.x)=reader.getx();}();
[&](){(result.y)=reader.gety();}();
[&](){(result.z)=reader.getz();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkOffset3D member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkOffset3D member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkExtent2D::Builder& builder, VkExtent2D member){
        
    
[&](){return builder.setwidth((member.width));}();
[&](){return builder.setheight((member.height));}();
}

    VkExtent2D deserialize_struct(VkExtent2D::Reader reader){
        auto result=VkExtent2D();
    
[&](){(result.width)=reader.getwidth();}();
[&](){(result.height)=reader.getheight();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkExtent2D member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkExtent2D member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkExtent3D::Builder& builder, VkExtent3D member){
        
    
[&](){return builder.setwidth((member.width));}();
[&](){return builder.setheight((member.height));}();
[&](){return builder.setdepth((member.depth));}();
}

    VkExtent3D deserialize_struct(VkExtent3D::Reader reader){
        auto result=VkExtent3D();
    
[&](){(result.width)=reader.getwidth();}();
[&](){(result.height)=reader.getheight();}();
[&](){(result.depth)=reader.getdepth();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkExtent3D member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkExtent3D member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkViewport::Builder& builder, VkViewport member){
        
    
[&](){return builder.setx((member.x));}();
[&](){return builder.sety((member.y));}();
[&](){return builder.setwidth((member.width));}();
[&](){return builder.setheight((member.height));}();
[&](){return builder.setminDepth((member.minDepth));}();
[&](){return builder.setmaxDepth((member.maxDepth));}();
}

    VkViewport deserialize_struct(VkViewport::Reader reader){
        auto result=VkViewport();
    
[&](){(result.x)=reader.getx();}();
[&](){(result.y)=reader.gety();}();
[&](){(result.width)=reader.getwidth();}();
[&](){(result.height)=reader.getheight();}();
[&](){(result.minDepth)=reader.getminDepth();}();
[&](){(result.maxDepth)=reader.getmaxDepth();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkViewport member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkViewport member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkRect2D::Builder& builder, VkRect2D member){
        
    
[&](){
            auto temp=builder.initoffset(offset);
            return serialize_struct((member.offset), temp);
            }();
[&](){
            auto temp=builder.initextent(extent);
            return serialize_struct((member.extent), temp);
            }();
}

    VkRect2D deserialize_struct(VkRect2D::Reader reader){
        auto result=VkRect2D();
    
[&](){
            auto temp=reader.getoffset();
            (result.offset)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getextent();
            (result.extent)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkRect2D member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkRect2D member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkClearRect::Builder& builder, VkClearRect member){
        
    
[&](){
            auto temp=builder.initrect(rect);
            return serialize_struct((member.rect), temp);
            }();
[&](){return builder.setbaseArrayLayer((member.baseArrayLayer));}();
[&](){return builder.setlayerCount((member.layerCount));}();
}

    VkClearRect deserialize_struct(VkClearRect::Reader reader){
        auto result=VkClearRect();
    
[&](){
            auto temp=reader.getrect();
            (result.rect)=deserialize_struct(temp);
            }();
[&](){(result.baseArrayLayer)=reader.getbaseArrayLayer();}();
[&](){(result.layerCount)=reader.getlayerCount();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkClearRect member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkClearRect member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkComponentMapping::Builder& builder, VkComponentMapping member){
        
    
[&](){[&](){[&](){return builder.setr((member.r));}();}();}();
[&](){[&](){[&](){return builder.setg((member.g));}();}();}();
[&](){[&](){[&](){return builder.setb((member.b));}();}();}();
[&](){[&](){[&](){return builder.seta((member.a));}();}();}();
}

    VkComponentMapping deserialize_struct(VkComponentMapping::Reader reader){
        auto result=VkComponentMapping();
    
[&](){[&](){[&](){(result.r)=reader.getr();}();}();}();
[&](){[&](){[&](){(result.g)=reader.getg();}();}();}();
[&](){[&](){[&](){(result.b)=reader.getb();}();}();}();
[&](){[&](){[&](){(result.a)=reader.geta();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkComponentMapping member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkComponentMapping member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceProperties::Builder& builder, VkPhysicalDeviceProperties member){
        
    
[&](){return builder.setapiVersion((member.apiVersion));}();
[&](){return builder.setdriverVersion((member.driverVersion));}();
[&](){return builder.setvendorID((member.vendorID));}();
[&](){return builder.setdeviceID((member.deviceID));}();
[&](){[&](){[&](){return builder.setdeviceType((member.deviceType));}();}();}();
[&](){
        auto proto_arr=builder.initdeviceName();
        for(int XalWwmc=0; XalWwmc < VK_MAX_PHYSICAL_DEVICE_NAME_SIZE; XalWwmc++){
            [&](){return proto_arr.set(XalWwmc,((member.deviceName)[XalWwmc]));}();
        }
        }();
[&](){
        auto proto_arr=builder.initpipelineCacheUUID();
        for(int pKnzMjr=0; pKnzMjr < VK_UUID_SIZE; pKnzMjr++){
            [&](){return proto_arr.set(pKnzMjr,((member.pipelineCacheUUID)[pKnzMjr]));}();
        }
        }();
[&](){
            auto temp=builder.initlimits(limits);
            return serialize_struct((member.limits), temp);
            }();
[&](){
            auto temp=builder.initsparseProperties(sparseProperties);
            return serialize_struct((member.sparseProperties), temp);
            }();
}

    VkPhysicalDeviceProperties deserialize_struct(VkPhysicalDeviceProperties::Reader reader){
        auto result=VkPhysicalDeviceProperties();
    
[&](){(result.apiVersion)=reader.getapiVersion();}();
[&](){(result.driverVersion)=reader.getdriverVersion();}();
[&](){(result.vendorID)=reader.getvendorID();}();
[&](){(result.deviceID)=reader.getdeviceID();}();
[&](){[&](){[&](){(result.deviceType)=reader.getdeviceType();}();}();}();
[&](){
        auto proto_arr=reader.getdeviceName(VK_MAX_PHYSICAL_DEVICE_NAME_SIZE);
        for(int XalWwmc=0; XalWwmc < VK_MAX_PHYSICAL_DEVICE_NAME_SIZE; XalWwmc++){
            [&](){((result.deviceName)[XalWwmc])=proto_arr[XalWwmc];}();
        }
        }();
[&](){
        auto proto_arr=reader.getpipelineCacheUUID(VK_UUID_SIZE);
        for(int pKnzMjr=0; pKnzMjr < VK_UUID_SIZE; pKnzMjr++){
            [&](){((result.pipelineCacheUUID)[pKnzMjr])=proto_arr[pKnzMjr];}();
        }
        }();
[&](){
            auto temp=reader.getlimits();
            (result.limits)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getsparseProperties();
            (result.sparseProperties)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceProperties member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceProperties member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkExtensionProperties::Builder& builder, VkExtensionProperties member){
        
    
[&](){
        auto proto_arr=builder.initextensionName();
        for(int XIWGMoc=0; XIWGMoc < VK_MAX_EXTENSION_NAME_SIZE; XIWGMoc++){
            [&](){return proto_arr.set(XIWGMoc,((member.extensionName)[XIWGMoc]));}();
        }
        }();
[&](){return builder.setspecVersion((member.specVersion));}();
}

    VkExtensionProperties deserialize_struct(VkExtensionProperties::Reader reader){
        auto result=VkExtensionProperties();
    
[&](){
        auto proto_arr=reader.getextensionName(VK_MAX_EXTENSION_NAME_SIZE);
        for(int XIWGMoc=0; XIWGMoc < VK_MAX_EXTENSION_NAME_SIZE; XIWGMoc++){
            [&](){((result.extensionName)[XIWGMoc])=proto_arr[XIWGMoc];}();
        }
        }();
[&](){(result.specVersion)=reader.getspecVersion();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkExtensionProperties member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkExtensionProperties member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkLayerProperties::Builder& builder, VkLayerProperties member){
        
    
[&](){
        auto proto_arr=builder.initlayerName();
        for(int IKkuigH=0; IKkuigH < VK_MAX_EXTENSION_NAME_SIZE; IKkuigH++){
            [&](){return proto_arr.set(IKkuigH,((member.layerName)[IKkuigH]));}();
        }
        }();
[&](){return builder.setspecVersion((member.specVersion));}();
[&](){return builder.setimplementationVersion((member.implementationVersion));}();
[&](){
        auto proto_arr=builder.initdescription();
        for(int oakWTIB=0; oakWTIB < VK_MAX_DESCRIPTION_SIZE; oakWTIB++){
            [&](){return proto_arr.set(oakWTIB,((member.description)[oakWTIB]));}();
        }
        }();
}

    VkLayerProperties deserialize_struct(VkLayerProperties::Reader reader){
        auto result=VkLayerProperties();
    
[&](){
        auto proto_arr=reader.getlayerName(VK_MAX_EXTENSION_NAME_SIZE);
        for(int IKkuigH=0; IKkuigH < VK_MAX_EXTENSION_NAME_SIZE; IKkuigH++){
            [&](){((result.layerName)[IKkuigH])=proto_arr[IKkuigH];}();
        }
        }();
[&](){(result.specVersion)=reader.getspecVersion();}();
[&](){(result.implementationVersion)=reader.getimplementationVersion();}();
[&](){
        auto proto_arr=reader.getdescription(VK_MAX_DESCRIPTION_SIZE);
        for(int oakWTIB=0; oakWTIB < VK_MAX_DESCRIPTION_SIZE; oakWTIB++){
            [&](){((result.description)[oakWTIB])=proto_arr[oakWTIB];}();
        }
        }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkLayerProperties member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkLayerProperties member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkApplicationInfo::Builder& builder, VkApplicationInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            if ((member.pApplicationName)==NULL){
                builder.disownpApplicationName();
            return; }
        auto proto_arr=builder.initpApplicationName();
        for(int ljeveAN=0; ljeveAN < strlen((member.pApplicationName))+1; ljeveAN++){
            [&](){return proto_arr.set(ljeveAN,((member.pApplicationName)[ljeveAN]));}();
        }
        }();
[&](){return builder.setapplicationVersion((member.applicationVersion));}();
[&](){
            if ((member.pEngineName)==NULL){
                builder.disownpEngineName();
            return; }
        auto proto_arr=builder.initpEngineName();
        for(int VZCarDF=0; VZCarDF < strlen((member.pEngineName))+1; VZCarDF++){
            [&](){return proto_arr.set(VZCarDF,((member.pEngineName)[VZCarDF]));}();
        }
        }();
[&](){return builder.setengineVersion((member.engineVersion));}();
[&](){return builder.setapiVersion((member.apiVersion));}();
}

    VkApplicationInfo deserialize_struct(VkApplicationInfo::Reader reader){
        auto result=VkApplicationInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){ char* temp_ITGZlxN[&](){
            if (!reader.haspApplicationName()){
                (result.pApplicationName)=NULL;
            return; }{native_concat()}=(char*)malloc(reader.getpApplicationName().size();*sizeof(char));
        auto proto_arr=reader.getpApplicationName(reader.getpApplicationName().size(););
        for(int zWUmIFj=0; zWUmIFj < reader.getpApplicationName().size();; zWUmIFj++){
            [&](){((result.pApplicationName)[zWUmIFj])=proto_arr[zWUmIFj];}();
        }
        }();(result.pApplicationName)=temp_ITGZlxN;}();
[&](){(result.applicationVersion)=reader.getapplicationVersion();}();
[&](){ char* temp_QLKspfD[&](){
            if (!reader.haspEngineName()){
                (result.pEngineName)=NULL;
            return; }{native_concat()}=(char*)malloc(reader.getpEngineName().size();*sizeof(char));
        auto proto_arr=reader.getpEngineName(reader.getpEngineName().size(););
        for(int nQADTdz=0; nQADTdz < reader.getpEngineName().size();; nQADTdz++){
            [&](){((result.pEngineName)[nQADTdz])=proto_arr[nQADTdz];}();
        }
        }();(result.pEngineName)=temp_QLKspfD;}();
[&](){(result.engineVersion)=reader.getengineVersion();}();
[&](){(result.apiVersion)=reader.getapiVersion();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkApplicationInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkApplicationInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkAllocationCallbacks::Builder& builder, VkAllocationCallbacks member){
        
    
[&](){
            auto temp=builder.initpUserData(pUserData);
            return serialize_struct((member.pUserData), temp);
            }();
[&](){
            auto temp=builder.initpfnAllocation(pfnAllocation);
            return serialize_funcpointer((member.pfnAllocation), temp);
            }();
[&](){
            auto temp=builder.initpfnReallocation(pfnReallocation);
            return serialize_funcpointer((member.pfnReallocation), temp);
            }();
[&](){
            auto temp=builder.initpfnFree(pfnFree);
            return serialize_funcpointer((member.pfnFree), temp);
            }();
[&](){
            auto temp=builder.initpfnInternalAllocation(pfnInternalAllocation);
            return serialize_funcpointer((member.pfnInternalAllocation), temp);
            }();
[&](){
            auto temp=builder.initpfnInternalFree(pfnInternalFree);
            return serialize_funcpointer((member.pfnInternalFree), temp);
            }();
}

    VkAllocationCallbacks deserialize_struct(VkAllocationCallbacks::Reader reader){
        auto result=VkAllocationCallbacks();
    
[&](){
            auto temp=reader.getpUserData();
            (result.pUserData)=deserialize_struct(temp);
            }();
[&](){
#ifndef CLIENT
            auto temp=reader.getpfnAllocation();
            (result.pfnAllocation)=deserialize_funcpointer(temp);
            #endif
}();
[&](){
#ifndef CLIENT
            auto temp=reader.getpfnReallocation();
            (result.pfnReallocation)=deserialize_funcpointer(temp);
            #endif
}();
[&](){
#ifndef CLIENT
            auto temp=reader.getpfnFree();
            (result.pfnFree)=deserialize_funcpointer(temp);
            #endif
}();
[&](){
#ifndef CLIENT
            auto temp=reader.getpfnInternalAllocation();
            (result.pfnInternalAllocation)=deserialize_funcpointer(temp);
            #endif
}();
[&](){
#ifndef CLIENT
            auto temp=reader.getpfnInternalFree();
            (result.pfnInternalFree)=deserialize_funcpointer(temp);
            #endif
}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkAllocationCallbacks member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
builder.setPFN_vkAllocationFunction((uintptr_t)(member.pfnAllocation));
builder.setPFN_vkReallocationFunction((uintptr_t)(member.pfnReallocation));
builder.setPFN_vkFreeFunction((uintptr_t)(member.pfnFree));
builder.setPFN_vkInternalAllocationNotification((uintptr_t)(member.pfnInternalAllocation));
builder.setPFN_vkInternalFreeNotification((uintptr_t)(member.pfnInternalFree));
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkAllocationCallbacks member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();
result.pfnAllocation=reader.getPFN_vkAllocationFunction();
result.pfnReallocation=reader.getPFN_vkReallocationFunction();
result.pfnFree=reader.getPFN_vkFreeFunction();
result.pfnInternalAllocation=reader.getPFN_vkInternalAllocationNotification();
result.pfnInternalFree=reader.getPFN_vkInternalFreeNotification();

    return result;
    #endif
    }
    

    void serialize_struct(VkDeviceQueueCreateInfo::Builder& builder, VkDeviceQueueCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){return builder.setqueueFamilyIndex((member.queueFamilyIndex));}();
[&](){return builder.setqueueCount((member.queueCount));}();
[&](){
            if ((member.pQueuePriorities)==NULL){
                builder.disownpQueuePriorities();
            return; }
        auto proto_arr=builder.initpQueuePriorities();
        for(int WPvLdwr=0; WPvLdwr < member.queueCount; WPvLdwr++){
            [&](){return proto_arr.set(WPvLdwr,((member.pQueuePriorities)[WPvLdwr]));}();
        }
        }();
}

    VkDeviceQueueCreateInfo deserialize_struct(VkDeviceQueueCreateInfo::Reader reader){
        auto result=VkDeviceQueueCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){(result.queueFamilyIndex)=reader.getqueueFamilyIndex();}();
[&](){(result.queueCount)=reader.getqueueCount();}();
[&](){ float* temp_mzKviIi[&](){
            if (!reader.haspQueuePriorities()){
                (result.pQueuePriorities)=NULL;
            return; }{native_concat()}=(float*)malloc(result.queueCount*sizeof(float));
        auto proto_arr=reader.getpQueuePriorities(result.queueCount);
        for(int kxeXVtw=0; kxeXVtw < result.queueCount; kxeXVtw++){
            [&](){((result.pQueuePriorities)[kxeXVtw])=proto_arr[kxeXVtw];}();
        }
        }();(result.pQueuePriorities)=temp_mzKviIi;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDeviceQueueCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDeviceQueueCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDeviceCreateInfo::Builder& builder, VkDeviceCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){return builder.setqueueCreateInfoCount((member.queueCreateInfoCount));}();
[&](){
            if ((member.pQueueCreateInfos)==NULL){
                builder.disownpQueueCreateInfos();
            return; }
        auto proto_arr=builder.initpQueueCreateInfos();
        for(int YssfcdP=0; YssfcdP < member.queueCreateInfoCount; YssfcdP++){
            [&](){
            auto temp=proto_arr[YssfcdP];
            return serialize_struct(((member.pQueueCreateInfos)[YssfcdP]), temp);
            }();
        }
        }();
[&](){return builder.setenabledLayerCount((member.enabledLayerCount));}();
[&](){
            if ((member.ppEnabledLayerNames)==NULL){
                builder.disownppEnabledLayerNames();
            return; }
        auto proto_arr=builder.initppEnabledLayerNames();
        for(int pbCJWPr=0; pbCJWPr < member.enabledLayerCount; pbCJWPr++){
            [&](){
            if (((member.ppEnabledLayerNames)[pbCJWPr])==NULL){
                proto_arr.init(pbCJWPr);
            return; }
        auto proto_arr=proto_arr[pbCJWPr];
        for(int aJorhVj=0; aJorhVj < strlen(((member.ppEnabledLayerNames)[pbCJWPr]))+1; aJorhVj++){
            [&](){return proto_arr.set(aJorhVj,(((member.ppEnabledLayerNames)[pbCJWPr])[aJorhVj]));}();
        }
        }();
        }
        }();
[&](){return builder.setenabledExtensionCount((member.enabledExtensionCount));}();
[&](){
            if ((member.ppEnabledExtensionNames)==NULL){
                builder.disownppEnabledExtensionNames();
            return; }
        auto proto_arr=builder.initppEnabledExtensionNames();
        for(int JSZSZLT=0; JSZSZLT < member.enabledExtensionCount; JSZSZLT++){
            [&](){
            if (((member.ppEnabledExtensionNames)[JSZSZLT])==NULL){
                proto_arr.init(JSZSZLT);
            return; }
        auto proto_arr=proto_arr[JSZSZLT];
        for(int IuPNAip=0; IuPNAip < strlen(((member.ppEnabledExtensionNames)[JSZSZLT]))+1; IuPNAip++){
            [&](){return proto_arr.set(IuPNAip,(((member.ppEnabledExtensionNames)[JSZSZLT])[IuPNAip]));}();
        }
        }();
        }
        }();
[&](){
            if ((member.pEnabledFeatures)==NULL){
                builder.disownpEnabledFeatures();
            return; }
        auto proto_arr=builder.initpEnabledFeatures();
        for(int cHCoRqz=0; cHCoRqz < 1; cHCoRqz++){
            [&](){
            auto temp=proto_arr[cHCoRqz];
            return serialize_struct(((member.pEnabledFeatures)[cHCoRqz]), temp);
            }();
        }
        }();
}

    VkDeviceCreateInfo deserialize_struct(VkDeviceCreateInfo::Reader reader){
        auto result=VkDeviceCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){(result.queueCreateInfoCount)=reader.getqueueCreateInfoCount();}();
[&](){ VkDeviceQueueCreateInfo* temp_JwCqEvb[&](){
            if (!reader.haspQueueCreateInfos()){
                (result.pQueueCreateInfos)=NULL;
            return; }{native_concat()}=(VkDeviceQueueCreateInfo*)malloc(result.queueCreateInfoCount*sizeof(VkDeviceQueueCreateInfo));
        auto proto_arr=reader.getpQueueCreateInfos(result.queueCreateInfoCount);
        for(int xSivxym=0; xSivxym < result.queueCreateInfoCount; xSivxym++){
            [&](){
            auto temp=proto_arr[xSivxym];
            ((result.pQueueCreateInfos)[xSivxym])=deserialize_struct(temp);
            }();
        }
        }();(result.pQueueCreateInfos)=temp_JwCqEvb;}();
[&](){(result.enabledLayerCount)=reader.getenabledLayerCount();}();
[&](){ char* * temp_GHyKyGS[&](){
            if (!reader.hasppEnabledLayerNames()){
                (result.ppEnabledLayerNames)=NULL;
            return; }{native_concat()}=(char**)malloc(result.enabledLayerCount*sizeof(char*));
        auto proto_arr=reader.getppEnabledLayerNames(result.enabledLayerCount);
        for(int SnzIzcs=0; SnzIzcs < result.enabledLayerCount; SnzIzcs++){
            [&](){
            if (!proto_arr[SnzIzcs].size){
                ((result.ppEnabledLayerNames)[SnzIzcs])=NULL;
            return; }{native_concat()}=(char*)malloc(proto_arr[SnzIzcs].size();*sizeof(char));
        auto proto_arr=proto_arr[SnzIzcs];
        for(int nGDPFvA=0; nGDPFvA < proto_arr[SnzIzcs].size();; nGDPFvA++){
            [&](){(((result.ppEnabledLayerNames)[SnzIzcs])[nGDPFvA])=proto_arr[nGDPFvA];}();
        }
        }();
        }
        }();(result.ppEnabledLayerNames)=temp_GHyKyGS;}();
[&](){(result.enabledExtensionCount)=reader.getenabledExtensionCount();}();
[&](){ char* * temp_RhCaHys[&](){
            if (!reader.hasppEnabledExtensionNames()){
                (result.ppEnabledExtensionNames)=NULL;
            return; }{native_concat()}=(char**)malloc(result.enabledExtensionCount*sizeof(char*));
        auto proto_arr=reader.getppEnabledExtensionNames(result.enabledExtensionCount);
        for(int aUXPvjC=0; aUXPvjC < result.enabledExtensionCount; aUXPvjC++){
            [&](){
            if (!proto_arr[aUXPvjC].size){
                ((result.ppEnabledExtensionNames)[aUXPvjC])=NULL;
            return; }{native_concat()}=(char*)malloc(proto_arr[aUXPvjC].size();*sizeof(char));
        auto proto_arr=proto_arr[aUXPvjC];
        for(int Lpzmtcv=0; Lpzmtcv < proto_arr[aUXPvjC].size();; Lpzmtcv++){
            [&](){(((result.ppEnabledExtensionNames)[aUXPvjC])[Lpzmtcv])=proto_arr[Lpzmtcv];}();
        }
        }();
        }
        }();(result.ppEnabledExtensionNames)=temp_RhCaHys;}();
[&](){ VkPhysicalDeviceFeatures* temp_vaqmebP[&](){
            if (!reader.haspEnabledFeatures()){
                (result.pEnabledFeatures)=NULL;
            return; }{native_concat()}=(VkPhysicalDeviceFeatures*)malloc(1*sizeof(VkPhysicalDeviceFeatures));
        auto proto_arr=reader.getpEnabledFeatures(1);
        for(int XDDQdol=0; XDDQdol < 1; XDDQdol++){
            [&](){
            auto temp=proto_arr[XDDQdol];
            ((result.pEnabledFeatures)[XDDQdol])=deserialize_struct(temp);
            }();
        }
        }();(result.pEnabledFeatures)=temp_vaqmebP;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDeviceCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDeviceCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkInstanceCreateInfo::Builder& builder, VkInstanceCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){
            if ((member.pApplicationInfo)==NULL){
                builder.disownpApplicationInfo();
            return; }
        auto proto_arr=builder.initpApplicationInfo();
        for(int KcjBZRF=0; KcjBZRF < 1; KcjBZRF++){
            [&](){
            auto temp=proto_arr[KcjBZRF];
            return serialize_struct(((member.pApplicationInfo)[KcjBZRF]), temp);
            }();
        }
        }();
[&](){return builder.setenabledLayerCount((member.enabledLayerCount));}();
[&](){
            if ((member.ppEnabledLayerNames)==NULL){
                builder.disownppEnabledLayerNames();
            return; }
        auto proto_arr=builder.initppEnabledLayerNames();
        for(int pbCJWPr=0; pbCJWPr < member.enabledLayerCount; pbCJWPr++){
            [&](){
            if (((member.ppEnabledLayerNames)[pbCJWPr])==NULL){
                proto_arr.init(pbCJWPr);
            return; }
        auto proto_arr=proto_arr[pbCJWPr];
        for(int aJorhVj=0; aJorhVj < strlen(((member.ppEnabledLayerNames)[pbCJWPr]))+1; aJorhVj++){
            [&](){return proto_arr.set(aJorhVj,(((member.ppEnabledLayerNames)[pbCJWPr])[aJorhVj]));}();
        }
        }();
        }
        }();
[&](){return builder.setenabledExtensionCount((member.enabledExtensionCount));}();
[&](){
            if ((member.ppEnabledExtensionNames)==NULL){
                builder.disownppEnabledExtensionNames();
            return; }
        auto proto_arr=builder.initppEnabledExtensionNames();
        for(int JSZSZLT=0; JSZSZLT < member.enabledExtensionCount; JSZSZLT++){
            [&](){
            if (((member.ppEnabledExtensionNames)[JSZSZLT])==NULL){
                proto_arr.init(JSZSZLT);
            return; }
        auto proto_arr=proto_arr[JSZSZLT];
        for(int IuPNAip=0; IuPNAip < strlen(((member.ppEnabledExtensionNames)[JSZSZLT]))+1; IuPNAip++){
            [&](){return proto_arr.set(IuPNAip,(((member.ppEnabledExtensionNames)[JSZSZLT])[IuPNAip]));}();
        }
        }();
        }
        }();
}

    VkInstanceCreateInfo deserialize_struct(VkInstanceCreateInfo::Reader reader){
        auto result=VkInstanceCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){ VkApplicationInfo* temp_szpthba[&](){
            if (!reader.haspApplicationInfo()){
                (result.pApplicationInfo)=NULL;
            return; }{native_concat()}=(VkApplicationInfo*)malloc(1*sizeof(VkApplicationInfo));
        auto proto_arr=reader.getpApplicationInfo(1);
        for(int ihjOJvT=0; ihjOJvT < 1; ihjOJvT++){
            [&](){
            auto temp=proto_arr[ihjOJvT];
            ((result.pApplicationInfo)[ihjOJvT])=deserialize_struct(temp);
            }();
        }
        }();(result.pApplicationInfo)=temp_szpthba;}();
[&](){(result.enabledLayerCount)=reader.getenabledLayerCount();}();
[&](){ char* * temp_GHyKyGS[&](){
            if (!reader.hasppEnabledLayerNames()){
                (result.ppEnabledLayerNames)=NULL;
            return; }{native_concat()}=(char**)malloc(result.enabledLayerCount*sizeof(char*));
        auto proto_arr=reader.getppEnabledLayerNames(result.enabledLayerCount);
        for(int SnzIzcs=0; SnzIzcs < result.enabledLayerCount; SnzIzcs++){
            [&](){
            if (!proto_arr[SnzIzcs].size){
                ((result.ppEnabledLayerNames)[SnzIzcs])=NULL;
            return; }{native_concat()}=(char*)malloc(proto_arr[SnzIzcs].size();*sizeof(char));
        auto proto_arr=proto_arr[SnzIzcs];
        for(int nGDPFvA=0; nGDPFvA < proto_arr[SnzIzcs].size();; nGDPFvA++){
            [&](){(((result.ppEnabledLayerNames)[SnzIzcs])[nGDPFvA])=proto_arr[nGDPFvA];}();
        }
        }();
        }
        }();(result.ppEnabledLayerNames)=temp_GHyKyGS;}();
[&](){(result.enabledExtensionCount)=reader.getenabledExtensionCount();}();
[&](){ char* * temp_RhCaHys[&](){
            if (!reader.hasppEnabledExtensionNames()){
                (result.ppEnabledExtensionNames)=NULL;
            return; }{native_concat()}=(char**)malloc(result.enabledExtensionCount*sizeof(char*));
        auto proto_arr=reader.getppEnabledExtensionNames(result.enabledExtensionCount);
        for(int aUXPvjC=0; aUXPvjC < result.enabledExtensionCount; aUXPvjC++){
            [&](){
            if (!proto_arr[aUXPvjC].size){
                ((result.ppEnabledExtensionNames)[aUXPvjC])=NULL;
            return; }{native_concat()}=(char*)malloc(proto_arr[aUXPvjC].size();*sizeof(char));
        auto proto_arr=proto_arr[aUXPvjC];
        for(int Lpzmtcv=0; Lpzmtcv < proto_arr[aUXPvjC].size();; Lpzmtcv++){
            [&](){(((result.ppEnabledExtensionNames)[aUXPvjC])[Lpzmtcv])=proto_arr[Lpzmtcv];}();
        }
        }();
        }
        }();(result.ppEnabledExtensionNames)=temp_RhCaHys;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkInstanceCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkInstanceCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkQueueFamilyProperties::Builder& builder, VkQueueFamilyProperties member){
        
    
[&](){[&](){[&](){return builder.setqueueFlags((member.queueFlags));}();}();}();
[&](){return builder.setqueueCount((member.queueCount));}();
[&](){return builder.settimestampValidBits((member.timestampValidBits));}();
[&](){
            auto temp=builder.initminImageTransferGranularity(minImageTransferGranularity);
            return serialize_struct((member.minImageTransferGranularity), temp);
            }();
}

    VkQueueFamilyProperties deserialize_struct(VkQueueFamilyProperties::Reader reader){
        auto result=VkQueueFamilyProperties();
    
[&](){[&](){[&](){(result.queueFlags)=reader.getqueueFlags();}();}();}();
[&](){(result.queueCount)=reader.getqueueCount();}();
[&](){(result.timestampValidBits)=reader.gettimestampValidBits();}();
[&](){
            auto temp=reader.getminImageTransferGranularity();
            (result.minImageTransferGranularity)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkQueueFamilyProperties member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkQueueFamilyProperties member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceMemoryProperties::Builder& builder, VkPhysicalDeviceMemoryProperties member){
        
    
[&](){return builder.setmemoryTypeCount((member.memoryTypeCount));}();
[&](){
        auto proto_arr=builder.initmemoryTypes();
        for(int PfmqQVb=0; PfmqQVb < VK_MAX_MEMORY_TYPES; PfmqQVb++){
            [&](){
            auto temp=proto_arr[PfmqQVb];
            return serialize_struct(((member.memoryTypes)[PfmqQVb]), temp);
            }();
        }
        }();
[&](){return builder.setmemoryHeapCount((member.memoryHeapCount));}();
[&](){
        auto proto_arr=builder.initmemoryHeaps();
        for(int HzUoGww=0; HzUoGww < VK_MAX_MEMORY_HEAPS; HzUoGww++){
            [&](){
            auto temp=proto_arr[HzUoGww];
            return serialize_struct(((member.memoryHeaps)[HzUoGww]), temp);
            }();
        }
        }();
}

    VkPhysicalDeviceMemoryProperties deserialize_struct(VkPhysicalDeviceMemoryProperties::Reader reader){
        auto result=VkPhysicalDeviceMemoryProperties();
    
[&](){(result.memoryTypeCount)=reader.getmemoryTypeCount();}();
[&](){
        auto proto_arr=reader.getmemoryTypes(VK_MAX_MEMORY_TYPES);
        for(int PfmqQVb=0; PfmqQVb < VK_MAX_MEMORY_TYPES; PfmqQVb++){
            [&](){
            auto temp=proto_arr[PfmqQVb];
            ((result.memoryTypes)[PfmqQVb])=deserialize_struct(temp);
            }();
        }
        }();
[&](){(result.memoryHeapCount)=reader.getmemoryHeapCount();}();
[&](){
        auto proto_arr=reader.getmemoryHeaps(VK_MAX_MEMORY_HEAPS);
        for(int HzUoGww=0; HzUoGww < VK_MAX_MEMORY_HEAPS; HzUoGww++){
            [&](){
            auto temp=proto_arr[HzUoGww];
            ((result.memoryHeaps)[HzUoGww])=deserialize_struct(temp);
            }();
        }
        }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceMemoryProperties member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceMemoryProperties member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkMemoryAllocateInfo::Builder& builder, VkMemoryAllocateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setallocationSize((member.allocationSize));}();}();
[&](){return builder.setmemoryTypeIndex((member.memoryTypeIndex));}();
}

    VkMemoryAllocateInfo deserialize_struct(VkMemoryAllocateInfo::Reader reader){
        auto result=VkMemoryAllocateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){(result.allocationSize)=reader.getallocationSize();}();}();
[&](){(result.memoryTypeIndex)=reader.getmemoryTypeIndex();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkMemoryAllocateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkMemoryAllocateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkMemoryRequirements::Builder& builder, VkMemoryRequirements member){
        
    
[&](){[&](){return builder.setsize((member.size));}();}();
[&](){[&](){return builder.setalignment((member.alignment));}();}();
[&](){return builder.setmemoryTypeBits((member.memoryTypeBits));}();
}

    VkMemoryRequirements deserialize_struct(VkMemoryRequirements::Reader reader){
        auto result=VkMemoryRequirements();
    
[&](){[&](){(result.size)=reader.getsize();}();}();
[&](){[&](){(result.alignment)=reader.getalignment();}();}();
[&](){(result.memoryTypeBits)=reader.getmemoryTypeBits();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkMemoryRequirements member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkMemoryRequirements member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSparseImageFormatProperties::Builder& builder, VkSparseImageFormatProperties member){
        
    
[&](){[&](){[&](){return builder.setaspectMask((member.aspectMask));}();}();}();
[&](){
            auto temp=builder.initimageGranularity(imageGranularity);
            return serialize_struct((member.imageGranularity), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
}

    VkSparseImageFormatProperties deserialize_struct(VkSparseImageFormatProperties::Reader reader){
        auto result=VkSparseImageFormatProperties();
    
[&](){[&](){[&](){(result.aspectMask)=reader.getaspectMask();}();}();}();
[&](){
            auto temp=reader.getimageGranularity();
            (result.imageGranularity)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSparseImageFormatProperties member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSparseImageFormatProperties member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSparseImageMemoryRequirements::Builder& builder, VkSparseImageMemoryRequirements member){
        
    
[&](){
            auto temp=builder.initformatProperties(formatProperties);
            return serialize_struct((member.formatProperties), temp);
            }();
[&](){return builder.setimageMipTailFirstLod((member.imageMipTailFirstLod));}();
[&](){[&](){return builder.setimageMipTailSize((member.imageMipTailSize));}();}();
[&](){[&](){return builder.setimageMipTailOffset((member.imageMipTailOffset));}();}();
[&](){[&](){return builder.setimageMipTailStride((member.imageMipTailStride));}();}();
}

    VkSparseImageMemoryRequirements deserialize_struct(VkSparseImageMemoryRequirements::Reader reader){
        auto result=VkSparseImageMemoryRequirements();
    
[&](){
            auto temp=reader.getformatProperties();
            (result.formatProperties)=deserialize_struct(temp);
            }();
[&](){(result.imageMipTailFirstLod)=reader.getimageMipTailFirstLod();}();
[&](){[&](){(result.imageMipTailSize)=reader.getimageMipTailSize();}();}();
[&](){[&](){(result.imageMipTailOffset)=reader.getimageMipTailOffset();}();}();
[&](){[&](){(result.imageMipTailStride)=reader.getimageMipTailStride();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSparseImageMemoryRequirements member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSparseImageMemoryRequirements member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkMemoryType::Builder& builder, VkMemoryType member){
        
    
[&](){[&](){[&](){return builder.setpropertyFlags((member.propertyFlags));}();}();}();
[&](){return builder.setheapIndex((member.heapIndex));}();
}

    VkMemoryType deserialize_struct(VkMemoryType::Reader reader){
        auto result=VkMemoryType();
    
[&](){[&](){[&](){(result.propertyFlags)=reader.getpropertyFlags();}();}();}();
[&](){(result.heapIndex)=reader.getheapIndex();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkMemoryType member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkMemoryType member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkMemoryHeap::Builder& builder, VkMemoryHeap member){
        
    
[&](){[&](){return builder.setsize((member.size));}();}();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
}

    VkMemoryHeap deserialize_struct(VkMemoryHeap::Reader reader){
        auto result=VkMemoryHeap();
    
[&](){[&](){(result.size)=reader.getsize();}();}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkMemoryHeap member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkMemoryHeap member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkMappedMemoryRange::Builder& builder, VkMappedMemoryRange member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setmemory(serialize_handle(member.memory));}();
[&](){[&](){return builder.setoffset((member.offset));}();}();
[&](){[&](){return builder.setsize((member.size));}();}();
}

    VkMappedMemoryRange deserialize_struct(VkMappedMemoryRange::Reader reader){
        auto result=VkMappedMemoryRange();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.memory)=deserialize_handle(reader.getmemory());}();
[&](){[&](){(result.offset)=reader.getoffset();}();}();
[&](){[&](){(result.size)=reader.getsize();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkMappedMemoryRange member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkMappedMemoryRange member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkFormatProperties::Builder& builder, VkFormatProperties member){
        
    
[&](){[&](){[&](){return builder.setlinearTilingFeatures((member.linearTilingFeatures));}();}();}();
[&](){[&](){[&](){return builder.setoptimalTilingFeatures((member.optimalTilingFeatures));}();}();}();
[&](){[&](){[&](){return builder.setbufferFeatures((member.bufferFeatures));}();}();}();
}

    VkFormatProperties deserialize_struct(VkFormatProperties::Reader reader){
        auto result=VkFormatProperties();
    
[&](){[&](){[&](){(result.linearTilingFeatures)=reader.getlinearTilingFeatures();}();}();}();
[&](){[&](){[&](){(result.optimalTilingFeatures)=reader.getoptimalTilingFeatures();}();}();}();
[&](){[&](){[&](){(result.bufferFeatures)=reader.getbufferFeatures();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkFormatProperties member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkFormatProperties member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkImageFormatProperties::Builder& builder, VkImageFormatProperties member){
        
    
[&](){
            auto temp=builder.initmaxExtent(maxExtent);
            return serialize_struct((member.maxExtent), temp);
            }();
[&](){return builder.setmaxMipLevels((member.maxMipLevels));}();
[&](){return builder.setmaxArrayLayers((member.maxArrayLayers));}();
[&](){[&](){[&](){return builder.setsampleCounts((member.sampleCounts));}();}();}();
[&](){[&](){return builder.setmaxResourceSize((member.maxResourceSize));}();}();
}

    VkImageFormatProperties deserialize_struct(VkImageFormatProperties::Reader reader){
        auto result=VkImageFormatProperties();
    
[&](){
            auto temp=reader.getmaxExtent();
            (result.maxExtent)=deserialize_struct(temp);
            }();
[&](){(result.maxMipLevels)=reader.getmaxMipLevels();}();
[&](){(result.maxArrayLayers)=reader.getmaxArrayLayers();}();
[&](){[&](){[&](){(result.sampleCounts)=reader.getsampleCounts();}();}();}();
[&](){[&](){(result.maxResourceSize)=reader.getmaxResourceSize();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkImageFormatProperties member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkImageFormatProperties member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDescriptorBufferInfo::Builder& builder, VkDescriptorBufferInfo member){
        
    
[&](){return builder.setbuffer(serialize_handle(member.buffer));}();
[&](){[&](){return builder.setoffset((member.offset));}();}();
[&](){[&](){return builder.setrange((member.range));}();}();
}

    VkDescriptorBufferInfo deserialize_struct(VkDescriptorBufferInfo::Reader reader){
        auto result=VkDescriptorBufferInfo();
    
[&](){(result.buffer)=deserialize_handle(reader.getbuffer());}();
[&](){[&](){(result.offset)=reader.getoffset();}();}();
[&](){[&](){(result.range)=reader.getrange();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDescriptorBufferInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDescriptorBufferInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDescriptorImageInfo::Builder& builder, VkDescriptorImageInfo member){
        
    
[&](){return builder.setsampler(serialize_handle(member.sampler));}();
[&](){return builder.setimageView(serialize_handle(member.imageView));}();
[&](){[&](){[&](){return builder.setimageLayout((member.imageLayout));}();}();}();
}

    VkDescriptorImageInfo deserialize_struct(VkDescriptorImageInfo::Reader reader){
        auto result=VkDescriptorImageInfo();
    
[&](){(result.sampler)=deserialize_handle(reader.getsampler());}();
[&](){(result.imageView)=deserialize_handle(reader.getimageView());}();
[&](){[&](){[&](){(result.imageLayout)=reader.getimageLayout();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDescriptorImageInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDescriptorImageInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkWriteDescriptorSet::Builder& builder, VkWriteDescriptorSet member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setdstSet(serialize_handle(member.dstSet));}();
[&](){return builder.setdstBinding((member.dstBinding));}();
[&](){return builder.setdstArrayElement((member.dstArrayElement));}();
[&](){return builder.setdescriptorCount((member.descriptorCount));}();
[&](){[&](){[&](){return builder.setdescriptorType((member.descriptorType));}();}();}();
[&](){
            if ((member.pImageInfo)==NULL){
                builder.disownpImageInfo();
            return; }
        auto proto_arr=builder.initpImageInfo();
        for(int RAArEkL=0; RAArEkL < member.descriptorCount; RAArEkL++){
            [&](){
            auto temp=proto_arr[RAArEkL];
            return serialize_struct(((member.pImageInfo)[RAArEkL]), temp);
            }();
        }
        }();
[&](){
            if ((member.pBufferInfo)==NULL){
                builder.disownpBufferInfo();
            return; }
        auto proto_arr=builder.initpBufferInfo();
        for(int wdqHwXo=0; wdqHwXo < member.descriptorCount; wdqHwXo++){
            [&](){
            auto temp=proto_arr[wdqHwXo];
            return serialize_struct(((member.pBufferInfo)[wdqHwXo]), temp);
            }();
        }
        }();
[&](){
            if ((member.pTexelBufferView)==NULL){
                builder.disownpTexelBufferView();
            return; }
        auto proto_arr=builder.initpTexelBufferView();
        for(int eTpfpkN=0; eTpfpkN < member.descriptorCount; eTpfpkN++){
            [&](){return proto_arr.set(eTpfpkN,serialize_handle((member.pTexelBufferView)[eTpfpkN]));}();
        }
        }();
}

    VkWriteDescriptorSet deserialize_struct(VkWriteDescriptorSet::Reader reader){
        auto result=VkWriteDescriptorSet();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.dstSet)=deserialize_handle(reader.getdstSet());}();
[&](){(result.dstBinding)=reader.getdstBinding();}();
[&](){(result.dstArrayElement)=reader.getdstArrayElement();}();
[&](){(result.descriptorCount)=reader.getdescriptorCount();}();
[&](){[&](){[&](){(result.descriptorType)=reader.getdescriptorType();}();}();}();
[&](){ VkDescriptorImageInfo* temp_XhzdiaG[&](){
            if (!reader.haspImageInfo()){
                (result.pImageInfo)=NULL;
            return; }{native_concat()}=(VkDescriptorImageInfo*)malloc(result.descriptorCount*sizeof(VkDescriptorImageInfo));
        auto proto_arr=reader.getpImageInfo(result.descriptorCount);
        for(int sQwJhaj=0; sQwJhaj < result.descriptorCount; sQwJhaj++){
            [&](){
            auto temp=proto_arr[sQwJhaj];
            ((result.pImageInfo)[sQwJhaj])=deserialize_struct(temp);
            }();
        }
        }();(result.pImageInfo)=temp_XhzdiaG;}();
[&](){ VkDescriptorBufferInfo* temp_znnrSKk[&](){
            if (!reader.haspBufferInfo()){
                (result.pBufferInfo)=NULL;
            return; }{native_concat()}=(VkDescriptorBufferInfo*)malloc(result.descriptorCount*sizeof(VkDescriptorBufferInfo));
        auto proto_arr=reader.getpBufferInfo(result.descriptorCount);
        for(int LhnoBjF=0; LhnoBjF < result.descriptorCount; LhnoBjF++){
            [&](){
            auto temp=proto_arr[LhnoBjF];
            ((result.pBufferInfo)[LhnoBjF])=deserialize_struct(temp);
            }();
        }
        }();(result.pBufferInfo)=temp_znnrSKk;}();
[&](){ VkBufferView* temp_HNSEONB[&](){
            if (!reader.haspTexelBufferView()){
                (result.pTexelBufferView)=NULL;
            return; }{native_concat()}=(VkBufferView*)malloc(result.descriptorCount*sizeof(VkBufferView));
        auto proto_arr=reader.getpTexelBufferView(result.descriptorCount);
        for(int WHRJRXx=0; WHRJRXx < result.descriptorCount; WHRJRXx++){
            [&](){((result.pTexelBufferView)[WHRJRXx])=deserialize_handle(proto_arr[WHRJRXx]);}();
        }
        }();(result.pTexelBufferView)=temp_HNSEONB;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkWriteDescriptorSet member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkWriteDescriptorSet member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkCopyDescriptorSet::Builder& builder, VkCopyDescriptorSet member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setsrcSet(serialize_handle(member.srcSet));}();
[&](){return builder.setsrcBinding((member.srcBinding));}();
[&](){return builder.setsrcArrayElement((member.srcArrayElement));}();
[&](){return builder.setdstSet(serialize_handle(member.dstSet));}();
[&](){return builder.setdstBinding((member.dstBinding));}();
[&](){return builder.setdstArrayElement((member.dstArrayElement));}();
[&](){return builder.setdescriptorCount((member.descriptorCount));}();
}

    VkCopyDescriptorSet deserialize_struct(VkCopyDescriptorSet::Reader reader){
        auto result=VkCopyDescriptorSet();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.srcSet)=deserialize_handle(reader.getsrcSet());}();
[&](){(result.srcBinding)=reader.getsrcBinding();}();
[&](){(result.srcArrayElement)=reader.getsrcArrayElement();}();
[&](){(result.dstSet)=deserialize_handle(reader.getdstSet());}();
[&](){(result.dstBinding)=reader.getdstBinding();}();
[&](){(result.dstArrayElement)=reader.getdstArrayElement();}();
[&](){(result.descriptorCount)=reader.getdescriptorCount();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkCopyDescriptorSet member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkCopyDescriptorSet member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkBufferUsageFlags2CreateInfoKHR::Builder& builder, VkBufferUsageFlags2CreateInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setusage((member.usage));}();}();}();
}

    VkBufferUsageFlags2CreateInfoKHR deserialize_struct(VkBufferUsageFlags2CreateInfoKHR::Reader reader){
        auto result=VkBufferUsageFlags2CreateInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.usage)=reader.getusage();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkBufferUsageFlags2CreateInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkBufferUsageFlags2CreateInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkBufferCreateInfo::Builder& builder, VkBufferCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){[&](){return builder.setsize((member.size));}();}();
[&](){[&](){[&](){return builder.setusage((member.usage));}();}();}();
[&](){[&](){[&](){return builder.setsharingMode((member.sharingMode));}();}();}();
[&](){return builder.setqueueFamilyIndexCount((member.queueFamilyIndexCount));}();
[&](){
            if ((member.pQueueFamilyIndices)==NULL){
                builder.disownpQueueFamilyIndices();
            return; }
        auto proto_arr=builder.initpQueueFamilyIndices();
        for(int rqZQqua=0; rqZQqua < member.queueFamilyIndexCount; rqZQqua++){
            [&](){return proto_arr.set(rqZQqua,((member.pQueueFamilyIndices)[rqZQqua]));}();
        }
        }();
}

    VkBufferCreateInfo deserialize_struct(VkBufferCreateInfo::Reader reader){
        auto result=VkBufferCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){[&](){(result.size)=reader.getsize();}();}();
[&](){[&](){[&](){(result.usage)=reader.getusage();}();}();}();
[&](){[&](){[&](){(result.sharingMode)=reader.getsharingMode();}();}();}();
[&](){(result.queueFamilyIndexCount)=reader.getqueueFamilyIndexCount();}();
[&](){ uint32_t* temp_NzZliok[&](){
            if (!reader.haspQueueFamilyIndices()){
                (result.pQueueFamilyIndices)=NULL;
            return; }{native_concat()}=(uint32_t*)malloc(result.queueFamilyIndexCount*sizeof(uint32_t));
        auto proto_arr=reader.getpQueueFamilyIndices(result.queueFamilyIndexCount);
        for(int JEqKTnG=0; JEqKTnG < result.queueFamilyIndexCount; JEqKTnG++){
            [&](){((result.pQueueFamilyIndices)[JEqKTnG])=proto_arr[JEqKTnG];}();
        }
        }();(result.pQueueFamilyIndices)=temp_NzZliok;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkBufferCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkBufferCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkBufferViewCreateInfo::Builder& builder, VkBufferViewCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){return builder.setbuffer(serialize_handle(member.buffer));}();
[&](){[&](){[&](){return builder.setformat((member.format));}();}();}();
[&](){[&](){return builder.setoffset((member.offset));}();}();
[&](){[&](){return builder.setrange((member.range));}();}();
}

    VkBufferViewCreateInfo deserialize_struct(VkBufferViewCreateInfo::Reader reader){
        auto result=VkBufferViewCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){(result.buffer)=deserialize_handle(reader.getbuffer());}();
[&](){[&](){[&](){(result.format)=reader.getformat();}();}();}();
[&](){[&](){(result.offset)=reader.getoffset();}();}();
[&](){[&](){(result.range)=reader.getrange();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkBufferViewCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkBufferViewCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkImageSubresource::Builder& builder, VkImageSubresource member){
        
    
[&](){[&](){[&](){return builder.setaspectMask((member.aspectMask));}();}();}();
[&](){return builder.setmipLevel((member.mipLevel));}();
[&](){return builder.setarrayLayer((member.arrayLayer));}();
}

    VkImageSubresource deserialize_struct(VkImageSubresource::Reader reader){
        auto result=VkImageSubresource();
    
[&](){[&](){[&](){(result.aspectMask)=reader.getaspectMask();}();}();}();
[&](){(result.mipLevel)=reader.getmipLevel();}();
[&](){(result.arrayLayer)=reader.getarrayLayer();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkImageSubresource member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkImageSubresource member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkImageSubresourceLayers::Builder& builder, VkImageSubresourceLayers member){
        
    
[&](){[&](){[&](){return builder.setaspectMask((member.aspectMask));}();}();}();
[&](){return builder.setmipLevel((member.mipLevel));}();
[&](){return builder.setbaseArrayLayer((member.baseArrayLayer));}();
[&](){return builder.setlayerCount((member.layerCount));}();
}

    VkImageSubresourceLayers deserialize_struct(VkImageSubresourceLayers::Reader reader){
        auto result=VkImageSubresourceLayers();
    
[&](){[&](){[&](){(result.aspectMask)=reader.getaspectMask();}();}();}();
[&](){(result.mipLevel)=reader.getmipLevel();}();
[&](){(result.baseArrayLayer)=reader.getbaseArrayLayer();}();
[&](){(result.layerCount)=reader.getlayerCount();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkImageSubresourceLayers member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkImageSubresourceLayers member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkImageSubresourceRange::Builder& builder, VkImageSubresourceRange member){
        
    
[&](){[&](){[&](){return builder.setaspectMask((member.aspectMask));}();}();}();
[&](){return builder.setbaseMipLevel((member.baseMipLevel));}();
[&](){return builder.setlevelCount((member.levelCount));}();
[&](){return builder.setbaseArrayLayer((member.baseArrayLayer));}();
[&](){return builder.setlayerCount((member.layerCount));}();
}

    VkImageSubresourceRange deserialize_struct(VkImageSubresourceRange::Reader reader){
        auto result=VkImageSubresourceRange();
    
[&](){[&](){[&](){(result.aspectMask)=reader.getaspectMask();}();}();}();
[&](){(result.baseMipLevel)=reader.getbaseMipLevel();}();
[&](){(result.levelCount)=reader.getlevelCount();}();
[&](){(result.baseArrayLayer)=reader.getbaseArrayLayer();}();
[&](){(result.layerCount)=reader.getlayerCount();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkImageSubresourceRange member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkImageSubresourceRange member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkMemoryBarrier::Builder& builder, VkMemoryBarrier member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setsrcAccessMask((member.srcAccessMask));}();}();}();
[&](){[&](){[&](){return builder.setdstAccessMask((member.dstAccessMask));}();}();}();
}

    VkMemoryBarrier deserialize_struct(VkMemoryBarrier::Reader reader){
        auto result=VkMemoryBarrier();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.srcAccessMask)=reader.getsrcAccessMask();}();}();}();
[&](){[&](){[&](){(result.dstAccessMask)=reader.getdstAccessMask();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkMemoryBarrier member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkMemoryBarrier member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkBufferMemoryBarrier::Builder& builder, VkBufferMemoryBarrier member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setsrcAccessMask((member.srcAccessMask));}();}();}();
[&](){[&](){[&](){return builder.setdstAccessMask((member.dstAccessMask));}();}();}();
[&](){return builder.setsrcQueueFamilyIndex((member.srcQueueFamilyIndex));}();
[&](){return builder.setdstQueueFamilyIndex((member.dstQueueFamilyIndex));}();
[&](){return builder.setbuffer(serialize_handle(member.buffer));}();
[&](){[&](){return builder.setoffset((member.offset));}();}();
[&](){[&](){return builder.setsize((member.size));}();}();
}

    VkBufferMemoryBarrier deserialize_struct(VkBufferMemoryBarrier::Reader reader){
        auto result=VkBufferMemoryBarrier();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.srcAccessMask)=reader.getsrcAccessMask();}();}();}();
[&](){[&](){[&](){(result.dstAccessMask)=reader.getdstAccessMask();}();}();}();
[&](){(result.srcQueueFamilyIndex)=reader.getsrcQueueFamilyIndex();}();
[&](){(result.dstQueueFamilyIndex)=reader.getdstQueueFamilyIndex();}();
[&](){(result.buffer)=deserialize_handle(reader.getbuffer());}();
[&](){[&](){(result.offset)=reader.getoffset();}();}();
[&](){[&](){(result.size)=reader.getsize();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkBufferMemoryBarrier member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkBufferMemoryBarrier member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkImageMemoryBarrier::Builder& builder, VkImageMemoryBarrier member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setsrcAccessMask((member.srcAccessMask));}();}();}();
[&](){[&](){[&](){return builder.setdstAccessMask((member.dstAccessMask));}();}();}();
[&](){[&](){[&](){return builder.setoldLayout((member.oldLayout));}();}();}();
[&](){[&](){[&](){return builder.setnewLayout((member.newLayout));}();}();}();
[&](){return builder.setsrcQueueFamilyIndex((member.srcQueueFamilyIndex));}();
[&](){return builder.setdstQueueFamilyIndex((member.dstQueueFamilyIndex));}();
[&](){return builder.setimage(serialize_handle(member.image));}();
[&](){
            auto temp=builder.initsubresourceRange(subresourceRange);
            return serialize_struct((member.subresourceRange), temp);
            }();
}

    VkImageMemoryBarrier deserialize_struct(VkImageMemoryBarrier::Reader reader){
        auto result=VkImageMemoryBarrier();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.srcAccessMask)=reader.getsrcAccessMask();}();}();}();
[&](){[&](){[&](){(result.dstAccessMask)=reader.getdstAccessMask();}();}();}();
[&](){[&](){[&](){(result.oldLayout)=reader.getoldLayout();}();}();}();
[&](){[&](){[&](){(result.newLayout)=reader.getnewLayout();}();}();}();
[&](){(result.srcQueueFamilyIndex)=reader.getsrcQueueFamilyIndex();}();
[&](){(result.dstQueueFamilyIndex)=reader.getdstQueueFamilyIndex();}();
[&](){(result.image)=deserialize_handle(reader.getimage());}();
[&](){
            auto temp=reader.getsubresourceRange();
            (result.subresourceRange)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkImageMemoryBarrier member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkImageMemoryBarrier member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkImageCreateInfo::Builder& builder, VkImageCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){[&](){[&](){return builder.setimageType((member.imageType));}();}();}();
[&](){[&](){[&](){return builder.setformat((member.format));}();}();}();
[&](){
            auto temp=builder.initextent(extent);
            return serialize_struct((member.extent), temp);
            }();
[&](){return builder.setmipLevels((member.mipLevels));}();
[&](){return builder.setarrayLayers((member.arrayLayers));}();
[&](){[&](){[&](){return builder.setsamples((member.samples));}();}();}();
[&](){[&](){[&](){return builder.settiling((member.tiling));}();}();}();
[&](){[&](){[&](){return builder.setusage((member.usage));}();}();}();
[&](){[&](){[&](){return builder.setsharingMode((member.sharingMode));}();}();}();
[&](){return builder.setqueueFamilyIndexCount((member.queueFamilyIndexCount));}();
[&](){
            if ((member.pQueueFamilyIndices)==NULL){
                builder.disownpQueueFamilyIndices();
            return; }
        auto proto_arr=builder.initpQueueFamilyIndices();
        for(int rqZQqua=0; rqZQqua < member.queueFamilyIndexCount; rqZQqua++){
            [&](){return proto_arr.set(rqZQqua,((member.pQueueFamilyIndices)[rqZQqua]));}();
        }
        }();
[&](){[&](){[&](){return builder.setinitialLayout((member.initialLayout));}();}();}();
}

    VkImageCreateInfo deserialize_struct(VkImageCreateInfo::Reader reader){
        auto result=VkImageCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){[&](){[&](){(result.imageType)=reader.getimageType();}();}();}();
[&](){[&](){[&](){(result.format)=reader.getformat();}();}();}();
[&](){
            auto temp=reader.getextent();
            (result.extent)=deserialize_struct(temp);
            }();
[&](){(result.mipLevels)=reader.getmipLevels();}();
[&](){(result.arrayLayers)=reader.getarrayLayers();}();
[&](){[&](){[&](){(result.samples)=reader.getsamples();}();}();}();
[&](){[&](){[&](){(result.tiling)=reader.gettiling();}();}();}();
[&](){[&](){[&](){(result.usage)=reader.getusage();}();}();}();
[&](){[&](){[&](){(result.sharingMode)=reader.getsharingMode();}();}();}();
[&](){(result.queueFamilyIndexCount)=reader.getqueueFamilyIndexCount();}();
[&](){ uint32_t* temp_NzZliok[&](){
            if (!reader.haspQueueFamilyIndices()){
                (result.pQueueFamilyIndices)=NULL;
            return; }{native_concat()}=(uint32_t*)malloc(result.queueFamilyIndexCount*sizeof(uint32_t));
        auto proto_arr=reader.getpQueueFamilyIndices(result.queueFamilyIndexCount);
        for(int JEqKTnG=0; JEqKTnG < result.queueFamilyIndexCount; JEqKTnG++){
            [&](){((result.pQueueFamilyIndices)[JEqKTnG])=proto_arr[JEqKTnG];}();
        }
        }();(result.pQueueFamilyIndices)=temp_NzZliok;}();
[&](){[&](){[&](){(result.initialLayout)=reader.getinitialLayout();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkImageCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkImageCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSubresourceLayout::Builder& builder, VkSubresourceLayout member){
        
    
[&](){[&](){return builder.setoffset((member.offset));}();}();
[&](){[&](){return builder.setsize((member.size));}();}();
[&](){[&](){return builder.setrowPitch((member.rowPitch));}();}();
[&](){[&](){return builder.setarrayPitch((member.arrayPitch));}();}();
[&](){[&](){return builder.setdepthPitch((member.depthPitch));}();}();
}

    VkSubresourceLayout deserialize_struct(VkSubresourceLayout::Reader reader){
        auto result=VkSubresourceLayout();
    
[&](){[&](){(result.offset)=reader.getoffset();}();}();
[&](){[&](){(result.size)=reader.getsize();}();}();
[&](){[&](){(result.rowPitch)=reader.getrowPitch();}();}();
[&](){[&](){(result.arrayPitch)=reader.getarrayPitch();}();}();
[&](){[&](){(result.depthPitch)=reader.getdepthPitch();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSubresourceLayout member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSubresourceLayout member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkImageViewCreateInfo::Builder& builder, VkImageViewCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){return builder.setimage(serialize_handle(member.image));}();
[&](){[&](){[&](){return builder.setviewType((member.viewType));}();}();}();
[&](){[&](){[&](){return builder.setformat((member.format));}();}();}();
[&](){
            auto temp=builder.initcomponents(components);
            return serialize_struct((member.components), temp);
            }();
[&](){
            auto temp=builder.initsubresourceRange(subresourceRange);
            return serialize_struct((member.subresourceRange), temp);
            }();
}

    VkImageViewCreateInfo deserialize_struct(VkImageViewCreateInfo::Reader reader){
        auto result=VkImageViewCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){(result.image)=deserialize_handle(reader.getimage());}();
[&](){[&](){[&](){(result.viewType)=reader.getviewType();}();}();}();
[&](){[&](){[&](){(result.format)=reader.getformat();}();}();}();
[&](){
            auto temp=reader.getcomponents();
            (result.components)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getsubresourceRange();
            (result.subresourceRange)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkImageViewCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkImageViewCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkBufferCopy::Builder& builder, VkBufferCopy member){
        
    
[&](){[&](){return builder.setsrcOffset((member.srcOffset));}();}();
[&](){[&](){return builder.setdstOffset((member.dstOffset));}();}();
[&](){[&](){return builder.setsize((member.size));}();}();
}

    VkBufferCopy deserialize_struct(VkBufferCopy::Reader reader){
        auto result=VkBufferCopy();
    
[&](){[&](){(result.srcOffset)=reader.getsrcOffset();}();}();
[&](){[&](){(result.dstOffset)=reader.getdstOffset();}();}();
[&](){[&](){(result.size)=reader.getsize();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkBufferCopy member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkBufferCopy member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSparseMemoryBind::Builder& builder, VkSparseMemoryBind member){
        
    
[&](){[&](){return builder.setresourceOffset((member.resourceOffset));}();}();
[&](){[&](){return builder.setsize((member.size));}();}();
[&](){return builder.setmemory(serialize_handle(member.memory));}();
[&](){[&](){return builder.setmemoryOffset((member.memoryOffset));}();}();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
}

    VkSparseMemoryBind deserialize_struct(VkSparseMemoryBind::Reader reader){
        auto result=VkSparseMemoryBind();
    
[&](){[&](){(result.resourceOffset)=reader.getresourceOffset();}();}();
[&](){[&](){(result.size)=reader.getsize();}();}();
[&](){(result.memory)=deserialize_handle(reader.getmemory());}();
[&](){[&](){(result.memoryOffset)=reader.getmemoryOffset();}();}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSparseMemoryBind member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSparseMemoryBind member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSparseImageMemoryBind::Builder& builder, VkSparseImageMemoryBind member){
        
    
[&](){
            auto temp=builder.initsubresource(subresource);
            return serialize_struct((member.subresource), temp);
            }();
[&](){
            auto temp=builder.initoffset(offset);
            return serialize_struct((member.offset), temp);
            }();
[&](){
            auto temp=builder.initextent(extent);
            return serialize_struct((member.extent), temp);
            }();
[&](){return builder.setmemory(serialize_handle(member.memory));}();
[&](){[&](){return builder.setmemoryOffset((member.memoryOffset));}();}();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
}

    VkSparseImageMemoryBind deserialize_struct(VkSparseImageMemoryBind::Reader reader){
        auto result=VkSparseImageMemoryBind();
    
[&](){
            auto temp=reader.getsubresource();
            (result.subresource)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getoffset();
            (result.offset)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getextent();
            (result.extent)=deserialize_struct(temp);
            }();
[&](){(result.memory)=deserialize_handle(reader.getmemory());}();
[&](){[&](){(result.memoryOffset)=reader.getmemoryOffset();}();}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSparseImageMemoryBind member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSparseImageMemoryBind member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSparseBufferMemoryBindInfo::Builder& builder, VkSparseBufferMemoryBindInfo member){
        
    
[&](){return builder.setbuffer(serialize_handle(member.buffer));}();
[&](){return builder.setbindCount((member.bindCount));}();
[&](){
            if ((member.pBinds)==NULL){
                builder.disownpBinds();
            return; }
        auto proto_arr=builder.initpBinds();
        for(int HwvIdVs=0; HwvIdVs < member.bindCount; HwvIdVs++){
            [&](){
            auto temp=proto_arr[HwvIdVs];
            return serialize_struct(((member.pBinds)[HwvIdVs]), temp);
            }();
        }
        }();
}

    VkSparseBufferMemoryBindInfo deserialize_struct(VkSparseBufferMemoryBindInfo::Reader reader){
        auto result=VkSparseBufferMemoryBindInfo();
    
[&](){(result.buffer)=deserialize_handle(reader.getbuffer());}();
[&](){(result.bindCount)=reader.getbindCount();}();
[&](){ VkSparseMemoryBind* temp_wcimaFG[&](){
            if (!reader.haspBinds()){
                (result.pBinds)=NULL;
            return; }{native_concat()}=(VkSparseMemoryBind*)malloc(result.bindCount*sizeof(VkSparseMemoryBind));
        auto proto_arr=reader.getpBinds(result.bindCount);
        for(int FqSYJtl=0; FqSYJtl < result.bindCount; FqSYJtl++){
            [&](){
            auto temp=proto_arr[FqSYJtl];
            ((result.pBinds)[FqSYJtl])=deserialize_struct(temp);
            }();
        }
        }();(result.pBinds)=temp_wcimaFG;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSparseBufferMemoryBindInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSparseBufferMemoryBindInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSparseImageOpaqueMemoryBindInfo::Builder& builder, VkSparseImageOpaqueMemoryBindInfo member){
        
    
[&](){return builder.setimage(serialize_handle(member.image));}();
[&](){return builder.setbindCount((member.bindCount));}();
[&](){
            if ((member.pBinds)==NULL){
                builder.disownpBinds();
            return; }
        auto proto_arr=builder.initpBinds();
        for(int HwvIdVs=0; HwvIdVs < member.bindCount; HwvIdVs++){
            [&](){
            auto temp=proto_arr[HwvIdVs];
            return serialize_struct(((member.pBinds)[HwvIdVs]), temp);
            }();
        }
        }();
}

    VkSparseImageOpaqueMemoryBindInfo deserialize_struct(VkSparseImageOpaqueMemoryBindInfo::Reader reader){
        auto result=VkSparseImageOpaqueMemoryBindInfo();
    
[&](){(result.image)=deserialize_handle(reader.getimage());}();
[&](){(result.bindCount)=reader.getbindCount();}();
[&](){ VkSparseMemoryBind* temp_wcimaFG[&](){
            if (!reader.haspBinds()){
                (result.pBinds)=NULL;
            return; }{native_concat()}=(VkSparseMemoryBind*)malloc(result.bindCount*sizeof(VkSparseMemoryBind));
        auto proto_arr=reader.getpBinds(result.bindCount);
        for(int FqSYJtl=0; FqSYJtl < result.bindCount; FqSYJtl++){
            [&](){
            auto temp=proto_arr[FqSYJtl];
            ((result.pBinds)[FqSYJtl])=deserialize_struct(temp);
            }();
        }
        }();(result.pBinds)=temp_wcimaFG;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSparseImageOpaqueMemoryBindInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSparseImageOpaqueMemoryBindInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSparseImageMemoryBindInfo::Builder& builder, VkSparseImageMemoryBindInfo member){
        
    
[&](){return builder.setimage(serialize_handle(member.image));}();
[&](){return builder.setbindCount((member.bindCount));}();
[&](){
            if ((member.pBinds)==NULL){
                builder.disownpBinds();
            return; }
        auto proto_arr=builder.initpBinds();
        for(int JvNztWs=0; JvNztWs < member.bindCount; JvNztWs++){
            [&](){
            auto temp=proto_arr[JvNztWs];
            return serialize_struct(((member.pBinds)[JvNztWs]), temp);
            }();
        }
        }();
}

    VkSparseImageMemoryBindInfo deserialize_struct(VkSparseImageMemoryBindInfo::Reader reader){
        auto result=VkSparseImageMemoryBindInfo();
    
[&](){(result.image)=deserialize_handle(reader.getimage());}();
[&](){(result.bindCount)=reader.getbindCount();}();
[&](){ VkSparseImageMemoryBind* temp_OclWdaB[&](){
            if (!reader.haspBinds()){
                (result.pBinds)=NULL;
            return; }{native_concat()}=(VkSparseImageMemoryBind*)malloc(result.bindCount*sizeof(VkSparseImageMemoryBind));
        auto proto_arr=reader.getpBinds(result.bindCount);
        for(int HjYbXsd=0; HjYbXsd < result.bindCount; HjYbXsd++){
            [&](){
            auto temp=proto_arr[HjYbXsd];
            ((result.pBinds)[HjYbXsd])=deserialize_struct(temp);
            }();
        }
        }();(result.pBinds)=temp_OclWdaB;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSparseImageMemoryBindInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSparseImageMemoryBindInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkBindSparseInfo::Builder& builder, VkBindSparseInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setwaitSemaphoreCount((member.waitSemaphoreCount));}();
[&](){
            if ((member.pWaitSemaphores)==NULL){
                builder.disownpWaitSemaphores();
            return; }
        auto proto_arr=builder.initpWaitSemaphores();
        for(int UPuCjkG=0; UPuCjkG < member.waitSemaphoreCount; UPuCjkG++){
            [&](){return proto_arr.set(UPuCjkG,serialize_handle((member.pWaitSemaphores)[UPuCjkG]));}();
        }
        }();
[&](){return builder.setbufferBindCount((member.bufferBindCount));}();
[&](){
            if ((member.pBufferBinds)==NULL){
                builder.disownpBufferBinds();
            return; }
        auto proto_arr=builder.initpBufferBinds();
        for(int RRvLWWb=0; RRvLWWb < member.bufferBindCount; RRvLWWb++){
            [&](){
            auto temp=proto_arr[RRvLWWb];
            return serialize_struct(((member.pBufferBinds)[RRvLWWb]), temp);
            }();
        }
        }();
[&](){return builder.setimageOpaqueBindCount((member.imageOpaqueBindCount));}();
[&](){
            if ((member.pImageOpaqueBinds)==NULL){
                builder.disownpImageOpaqueBinds();
            return; }
        auto proto_arr=builder.initpImageOpaqueBinds();
        for(int AUtqPDZ=0; AUtqPDZ < member.imageOpaqueBindCount; AUtqPDZ++){
            [&](){
            auto temp=proto_arr[AUtqPDZ];
            return serialize_struct(((member.pImageOpaqueBinds)[AUtqPDZ]), temp);
            }();
        }
        }();
[&](){return builder.setimageBindCount((member.imageBindCount));}();
[&](){
            if ((member.pImageBinds)==NULL){
                builder.disownpImageBinds();
            return; }
        auto proto_arr=builder.initpImageBinds();
        for(int iNNUNSt=0; iNNUNSt < member.imageBindCount; iNNUNSt++){
            [&](){
            auto temp=proto_arr[iNNUNSt];
            return serialize_struct(((member.pImageBinds)[iNNUNSt]), temp);
            }();
        }
        }();
[&](){return builder.setsignalSemaphoreCount((member.signalSemaphoreCount));}();
[&](){
            if ((member.pSignalSemaphores)==NULL){
                builder.disownpSignalSemaphores();
            return; }
        auto proto_arr=builder.initpSignalSemaphores();
        for(int NKFlfkK=0; NKFlfkK < member.signalSemaphoreCount; NKFlfkK++){
            [&](){return proto_arr.set(NKFlfkK,serialize_handle((member.pSignalSemaphores)[NKFlfkK]));}();
        }
        }();
}

    VkBindSparseInfo deserialize_struct(VkBindSparseInfo::Reader reader){
        auto result=VkBindSparseInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.waitSemaphoreCount)=reader.getwaitSemaphoreCount();}();
[&](){ VkSemaphore* temp_vxBhExF[&](){
            if (!reader.haspWaitSemaphores()){
                (result.pWaitSemaphores)=NULL;
            return; }{native_concat()}=(VkSemaphore*)malloc(result.waitSemaphoreCount*sizeof(VkSemaphore));
        auto proto_arr=reader.getpWaitSemaphores(result.waitSemaphoreCount);
        for(int eowObQx=0; eowObQx < result.waitSemaphoreCount; eowObQx++){
            [&](){((result.pWaitSemaphores)[eowObQx])=deserialize_handle(proto_arr[eowObQx]);}();
        }
        }();(result.pWaitSemaphores)=temp_vxBhExF;}();
[&](){(result.bufferBindCount)=reader.getbufferBindCount();}();
[&](){ VkSparseBufferMemoryBindInfo* temp_uzqeCmo[&](){
            if (!reader.haspBufferBinds()){
                (result.pBufferBinds)=NULL;
            return; }{native_concat()}=(VkSparseBufferMemoryBindInfo*)malloc(result.bufferBindCount*sizeof(VkSparseBufferMemoryBindInfo));
        auto proto_arr=reader.getpBufferBinds(result.bufferBindCount);
        for(int pTBYvkA=0; pTBYvkA < result.bufferBindCount; pTBYvkA++){
            [&](){
            auto temp=proto_arr[pTBYvkA];
            ((result.pBufferBinds)[pTBYvkA])=deserialize_struct(temp);
            }();
        }
        }();(result.pBufferBinds)=temp_uzqeCmo;}();
[&](){(result.imageOpaqueBindCount)=reader.getimageOpaqueBindCount();}();
[&](){ VkSparseImageOpaqueMemoryBindInfo* temp_bplMtAB[&](){
            if (!reader.haspImageOpaqueBinds()){
                (result.pImageOpaqueBinds)=NULL;
            return; }{native_concat()}=(VkSparseImageOpaqueMemoryBindInfo*)malloc(result.imageOpaqueBindCount*sizeof(VkSparseImageOpaqueMemoryBindInfo));
        auto proto_arr=reader.getpImageOpaqueBinds(result.imageOpaqueBindCount);
        for(int KjNYabZ=0; KjNYabZ < result.imageOpaqueBindCount; KjNYabZ++){
            [&](){
            auto temp=proto_arr[KjNYabZ];
            ((result.pImageOpaqueBinds)[KjNYabZ])=deserialize_struct(temp);
            }();
        }
        }();(result.pImageOpaqueBinds)=temp_bplMtAB;}();
[&](){(result.imageBindCount)=reader.getimageBindCount();}();
[&](){ VkSparseImageMemoryBindInfo* temp_jkVDUZF[&](){
            if (!reader.haspImageBinds()){
                (result.pImageBinds)=NULL;
            return; }{native_concat()}=(VkSparseImageMemoryBindInfo*)malloc(result.imageBindCount*sizeof(VkSparseImageMemoryBindInfo));
        auto proto_arr=reader.getpImageBinds(result.imageBindCount);
        for(int WzrwjrD=0; WzrwjrD < result.imageBindCount; WzrwjrD++){
            [&](){
            auto temp=proto_arr[WzrwjrD];
            ((result.pImageBinds)[WzrwjrD])=deserialize_struct(temp);
            }();
        }
        }();(result.pImageBinds)=temp_jkVDUZF;}();
[&](){(result.signalSemaphoreCount)=reader.getsignalSemaphoreCount();}();
[&](){ VkSemaphore* temp_rruuqWC[&](){
            if (!reader.haspSignalSemaphores()){
                (result.pSignalSemaphores)=NULL;
            return; }{native_concat()}=(VkSemaphore*)malloc(result.signalSemaphoreCount*sizeof(VkSemaphore));
        auto proto_arr=reader.getpSignalSemaphores(result.signalSemaphoreCount);
        for(int rsHNIbT=0; rsHNIbT < result.signalSemaphoreCount; rsHNIbT++){
            [&](){((result.pSignalSemaphores)[rsHNIbT])=deserialize_handle(proto_arr[rsHNIbT]);}();
        }
        }();(result.pSignalSemaphores)=temp_rruuqWC;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkBindSparseInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkBindSparseInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkImageCopy::Builder& builder, VkImageCopy member){
        
    
[&](){
            auto temp=builder.initsrcSubresource(srcSubresource);
            return serialize_struct((member.srcSubresource), temp);
            }();
[&](){
            auto temp=builder.initsrcOffset(srcOffset);
            return serialize_struct((member.srcOffset), temp);
            }();
[&](){
            auto temp=builder.initdstSubresource(dstSubresource);
            return serialize_struct((member.dstSubresource), temp);
            }();
[&](){
            auto temp=builder.initdstOffset(dstOffset);
            return serialize_struct((member.dstOffset), temp);
            }();
[&](){
            auto temp=builder.initextent(extent);
            return serialize_struct((member.extent), temp);
            }();
}

    VkImageCopy deserialize_struct(VkImageCopy::Reader reader){
        auto result=VkImageCopy();
    
[&](){
            auto temp=reader.getsrcSubresource();
            (result.srcSubresource)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getsrcOffset();
            (result.srcOffset)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getdstSubresource();
            (result.dstSubresource)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getdstOffset();
            (result.dstOffset)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getextent();
            (result.extent)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkImageCopy member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkImageCopy member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkImageBlit::Builder& builder, VkImageBlit member){
        
    
[&](){
            auto temp=builder.initsrcSubresource(srcSubresource);
            return serialize_struct((member.srcSubresource), temp);
            }();
[&](){
        auto proto_arr=builder.initsrcOffsets();
        for(int jRYlQCC=0; jRYlQCC < 2; jRYlQCC++){
            [&](){
            auto temp=proto_arr[jRYlQCC];
            return serialize_struct(((member.srcOffsets)[jRYlQCC]), temp);
            }();
        }
        }();
[&](){
            auto temp=builder.initdstSubresource(dstSubresource);
            return serialize_struct((member.dstSubresource), temp);
            }();
[&](){
        auto proto_arr=builder.initdstOffsets();
        for(int dYmXuSG=0; dYmXuSG < 2; dYmXuSG++){
            [&](){
            auto temp=proto_arr[dYmXuSG];
            return serialize_struct(((member.dstOffsets)[dYmXuSG]), temp);
            }();
        }
        }();
}

    VkImageBlit deserialize_struct(VkImageBlit::Reader reader){
        auto result=VkImageBlit();
    
[&](){
            auto temp=reader.getsrcSubresource();
            (result.srcSubresource)=deserialize_struct(temp);
            }();
[&](){
        auto proto_arr=reader.getsrcOffsets(2);
        for(int jRYlQCC=0; jRYlQCC < 2; jRYlQCC++){
            [&](){
            auto temp=proto_arr[jRYlQCC];
            ((result.srcOffsets)[jRYlQCC])=deserialize_struct(temp);
            }();
        }
        }();
[&](){
            auto temp=reader.getdstSubresource();
            (result.dstSubresource)=deserialize_struct(temp);
            }();
[&](){
        auto proto_arr=reader.getdstOffsets(2);
        for(int dYmXuSG=0; dYmXuSG < 2; dYmXuSG++){
            [&](){
            auto temp=proto_arr[dYmXuSG];
            ((result.dstOffsets)[dYmXuSG])=deserialize_struct(temp);
            }();
        }
        }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkImageBlit member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkImageBlit member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkBufferImageCopy::Builder& builder, VkBufferImageCopy member){
        
    
[&](){[&](){return builder.setbufferOffset((member.bufferOffset));}();}();
[&](){return builder.setbufferRowLength((member.bufferRowLength));}();
[&](){return builder.setbufferImageHeight((member.bufferImageHeight));}();
[&](){
            auto temp=builder.initimageSubresource(imageSubresource);
            return serialize_struct((member.imageSubresource), temp);
            }();
[&](){
            auto temp=builder.initimageOffset(imageOffset);
            return serialize_struct((member.imageOffset), temp);
            }();
[&](){
            auto temp=builder.initimageExtent(imageExtent);
            return serialize_struct((member.imageExtent), temp);
            }();
}

    VkBufferImageCopy deserialize_struct(VkBufferImageCopy::Reader reader){
        auto result=VkBufferImageCopy();
    
[&](){[&](){(result.bufferOffset)=reader.getbufferOffset();}();}();
[&](){(result.bufferRowLength)=reader.getbufferRowLength();}();
[&](){(result.bufferImageHeight)=reader.getbufferImageHeight();}();
[&](){
            auto temp=reader.getimageSubresource();
            (result.imageSubresource)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getimageOffset();
            (result.imageOffset)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getimageExtent();
            (result.imageExtent)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkBufferImageCopy member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkBufferImageCopy member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkCopyMemoryIndirectCommandNV::Builder& builder, VkCopyMemoryIndirectCommandNV member){
        
    
[&](){[&](){return builder.setsrcAddress((member.srcAddress));}();}();
[&](){[&](){return builder.setdstAddress((member.dstAddress));}();}();
[&](){[&](){return builder.setsize((member.size));}();}();
}

    VkCopyMemoryIndirectCommandNV deserialize_struct(VkCopyMemoryIndirectCommandNV::Reader reader){
        auto result=VkCopyMemoryIndirectCommandNV();
    
[&](){[&](){(result.srcAddress)=reader.getsrcAddress();}();}();
[&](){[&](){(result.dstAddress)=reader.getdstAddress();}();}();
[&](){[&](){(result.size)=reader.getsize();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkCopyMemoryIndirectCommandNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkCopyMemoryIndirectCommandNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkCopyMemoryToImageIndirectCommandNV::Builder& builder, VkCopyMemoryToImageIndirectCommandNV member){
        
    
[&](){[&](){return builder.setsrcAddress((member.srcAddress));}();}();
[&](){return builder.setbufferRowLength((member.bufferRowLength));}();
[&](){return builder.setbufferImageHeight((member.bufferImageHeight));}();
[&](){
            auto temp=builder.initimageSubresource(imageSubresource);
            return serialize_struct((member.imageSubresource), temp);
            }();
[&](){
            auto temp=builder.initimageOffset(imageOffset);
            return serialize_struct((member.imageOffset), temp);
            }();
[&](){
            auto temp=builder.initimageExtent(imageExtent);
            return serialize_struct((member.imageExtent), temp);
            }();
}

    VkCopyMemoryToImageIndirectCommandNV deserialize_struct(VkCopyMemoryToImageIndirectCommandNV::Reader reader){
        auto result=VkCopyMemoryToImageIndirectCommandNV();
    
[&](){[&](){(result.srcAddress)=reader.getsrcAddress();}();}();
[&](){(result.bufferRowLength)=reader.getbufferRowLength();}();
[&](){(result.bufferImageHeight)=reader.getbufferImageHeight();}();
[&](){
            auto temp=reader.getimageSubresource();
            (result.imageSubresource)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getimageOffset();
            (result.imageOffset)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getimageExtent();
            (result.imageExtent)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkCopyMemoryToImageIndirectCommandNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkCopyMemoryToImageIndirectCommandNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkImageResolve::Builder& builder, VkImageResolve member){
        
    
[&](){
            auto temp=builder.initsrcSubresource(srcSubresource);
            return serialize_struct((member.srcSubresource), temp);
            }();
[&](){
            auto temp=builder.initsrcOffset(srcOffset);
            return serialize_struct((member.srcOffset), temp);
            }();
[&](){
            auto temp=builder.initdstSubresource(dstSubresource);
            return serialize_struct((member.dstSubresource), temp);
            }();
[&](){
            auto temp=builder.initdstOffset(dstOffset);
            return serialize_struct((member.dstOffset), temp);
            }();
[&](){
            auto temp=builder.initextent(extent);
            return serialize_struct((member.extent), temp);
            }();
}

    VkImageResolve deserialize_struct(VkImageResolve::Reader reader){
        auto result=VkImageResolve();
    
[&](){
            auto temp=reader.getsrcSubresource();
            (result.srcSubresource)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getsrcOffset();
            (result.srcOffset)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getdstSubresource();
            (result.dstSubresource)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getdstOffset();
            (result.dstOffset)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getextent();
            (result.extent)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkImageResolve member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkImageResolve member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkShaderModuleCreateInfo::Builder& builder, VkShaderModuleCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){return builder.setcodeSize((member.codeSize));}();
[&](){
            if ((member.pCode)==NULL){
                builder.disownpCode();
            return; }
        auto proto_arr=builder.initpCode();
        for(int AXpbriB=0; AXpbriB < member.codeSize / 4; AXpbriB++){
            [&](){return proto_arr.set(AXpbriB,((member.pCode)[AXpbriB]));}();
        }
        }();
}

    VkShaderModuleCreateInfo deserialize_struct(VkShaderModuleCreateInfo::Reader reader){
        auto result=VkShaderModuleCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){(result.codeSize)=reader.getcodeSize();}();
[&](){ uint32_t* temp_eBlvmlE[&](){
            if (!reader.haspCode()){
                (result.pCode)=NULL;
            return; }{native_concat()}=(uint32_t*)malloc(result.codeSize / 4*sizeof(uint32_t));
        auto proto_arr=reader.getpCode(result.codeSize / 4);
        for(int QIlxWNh=0; QIlxWNh < result.codeSize / 4; QIlxWNh++){
            [&](){((result.pCode)[QIlxWNh])=proto_arr[QIlxWNh];}();
        }
        }();(result.pCode)=temp_eBlvmlE;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkShaderModuleCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkShaderModuleCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDescriptorSetLayoutBinding::Builder& builder, VkDescriptorSetLayoutBinding member){
        
    
[&](){return builder.setbinding((member.binding));}();
[&](){[&](){[&](){return builder.setdescriptorType((member.descriptorType));}();}();}();
[&](){return builder.setdescriptorCount((member.descriptorCount));}();
[&](){[&](){[&](){return builder.setstageFlags((member.stageFlags));}();}();}();
[&](){
            if ((member.pImmutableSamplers)==NULL){
                builder.disownpImmutableSamplers();
            return; }
        auto proto_arr=builder.initpImmutableSamplers();
        for(int wKzMDsL=0; wKzMDsL < member.descriptorCount; wKzMDsL++){
            [&](){return proto_arr.set(wKzMDsL,serialize_handle((member.pImmutableSamplers)[wKzMDsL]));}();
        }
        }();
}

    VkDescriptorSetLayoutBinding deserialize_struct(VkDescriptorSetLayoutBinding::Reader reader){
        auto result=VkDescriptorSetLayoutBinding();
    
[&](){(result.binding)=reader.getbinding();}();
[&](){[&](){[&](){(result.descriptorType)=reader.getdescriptorType();}();}();}();
[&](){(result.descriptorCount)=reader.getdescriptorCount();}();
[&](){[&](){[&](){(result.stageFlags)=reader.getstageFlags();}();}();}();
[&](){ VkSampler* temp_nQMkzBN[&](){
            if (!reader.haspImmutableSamplers()){
                (result.pImmutableSamplers)=NULL;
            return; }{native_concat()}=(VkSampler*)malloc(result.descriptorCount*sizeof(VkSampler));
        auto proto_arr=reader.getpImmutableSamplers(result.descriptorCount);
        for(int DwrtaGO=0; DwrtaGO < result.descriptorCount; DwrtaGO++){
            [&](){((result.pImmutableSamplers)[DwrtaGO])=deserialize_handle(proto_arr[DwrtaGO]);}();
        }
        }();(result.pImmutableSamplers)=temp_nQMkzBN;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDescriptorSetLayoutBinding member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDescriptorSetLayoutBinding member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDescriptorSetLayoutCreateInfo::Builder& builder, VkDescriptorSetLayoutCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){return builder.setbindingCount((member.bindingCount));}();
[&](){
            if ((member.pBindings)==NULL){
                builder.disownpBindings();
            return; }
        auto proto_arr=builder.initpBindings();
        for(int sYqothM=0; sYqothM < member.bindingCount; sYqothM++){
            [&](){
            auto temp=proto_arr[sYqothM];
            return serialize_struct(((member.pBindings)[sYqothM]), temp);
            }();
        }
        }();
}

    VkDescriptorSetLayoutCreateInfo deserialize_struct(VkDescriptorSetLayoutCreateInfo::Reader reader){
        auto result=VkDescriptorSetLayoutCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){(result.bindingCount)=reader.getbindingCount();}();
[&](){ VkDescriptorSetLayoutBinding* temp_MODlZmi[&](){
            if (!reader.haspBindings()){
                (result.pBindings)=NULL;
            return; }{native_concat()}=(VkDescriptorSetLayoutBinding*)malloc(result.bindingCount*sizeof(VkDescriptorSetLayoutBinding));
        auto proto_arr=reader.getpBindings(result.bindingCount);
        for(int KUIwNnx=0; KUIwNnx < result.bindingCount; KUIwNnx++){
            [&](){
            auto temp=proto_arr[KUIwNnx];
            ((result.pBindings)[KUIwNnx])=deserialize_struct(temp);
            }();
        }
        }();(result.pBindings)=temp_MODlZmi;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDescriptorSetLayoutCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDescriptorSetLayoutCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDescriptorPoolSize::Builder& builder, VkDescriptorPoolSize member){
        
    
[&](){[&](){[&](){return builder.settype((member.type));}();}();}();
[&](){return builder.setdescriptorCount((member.descriptorCount));}();
}

    VkDescriptorPoolSize deserialize_struct(VkDescriptorPoolSize::Reader reader){
        auto result=VkDescriptorPoolSize();
    
[&](){[&](){[&](){(result.type)=reader.gettype();}();}();}();
[&](){(result.descriptorCount)=reader.getdescriptorCount();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDescriptorPoolSize member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDescriptorPoolSize member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDescriptorPoolCreateInfo::Builder& builder, VkDescriptorPoolCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){return builder.setmaxSets((member.maxSets));}();
[&](){return builder.setpoolSizeCount((member.poolSizeCount));}();
[&](){
            if ((member.pPoolSizes)==NULL){
                builder.disownpPoolSizes();
            return; }
        auto proto_arr=builder.initpPoolSizes();
        for(int cpawFXU=0; cpawFXU < member.poolSizeCount; cpawFXU++){
            [&](){
            auto temp=proto_arr[cpawFXU];
            return serialize_struct(((member.pPoolSizes)[cpawFXU]), temp);
            }();
        }
        }();
}

    VkDescriptorPoolCreateInfo deserialize_struct(VkDescriptorPoolCreateInfo::Reader reader){
        auto result=VkDescriptorPoolCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){(result.maxSets)=reader.getmaxSets();}();
[&](){(result.poolSizeCount)=reader.getpoolSizeCount();}();
[&](){ VkDescriptorPoolSize* temp_CclESUy[&](){
            if (!reader.haspPoolSizes()){
                (result.pPoolSizes)=NULL;
            return; }{native_concat()}=(VkDescriptorPoolSize*)malloc(result.poolSizeCount*sizeof(VkDescriptorPoolSize));
        auto proto_arr=reader.getpPoolSizes(result.poolSizeCount);
        for(int IdhEcbd=0; IdhEcbd < result.poolSizeCount; IdhEcbd++){
            [&](){
            auto temp=proto_arr[IdhEcbd];
            ((result.pPoolSizes)[IdhEcbd])=deserialize_struct(temp);
            }();
        }
        }();(result.pPoolSizes)=temp_CclESUy;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDescriptorPoolCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDescriptorPoolCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDescriptorSetAllocateInfo::Builder& builder, VkDescriptorSetAllocateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setdescriptorPool(serialize_handle(member.descriptorPool));}();
[&](){return builder.setdescriptorSetCount((member.descriptorSetCount));}();
[&](){
            if ((member.pSetLayouts)==NULL){
                builder.disownpSetLayouts();
            return; }
        auto proto_arr=builder.initpSetLayouts();
        for(int gfILRjy=0; gfILRjy < member.descriptorSetCount; gfILRjy++){
            [&](){return proto_arr.set(gfILRjy,serialize_handle((member.pSetLayouts)[gfILRjy]));}();
        }
        }();
}

    VkDescriptorSetAllocateInfo deserialize_struct(VkDescriptorSetAllocateInfo::Reader reader){
        auto result=VkDescriptorSetAllocateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.descriptorPool)=deserialize_handle(reader.getdescriptorPool());}();
[&](){(result.descriptorSetCount)=reader.getdescriptorSetCount();}();
[&](){ VkDescriptorSetLayout* temp_pqhsZKt[&](){
            if (!reader.haspSetLayouts()){
                (result.pSetLayouts)=NULL;
            return; }{native_concat()}=(VkDescriptorSetLayout*)malloc(result.descriptorSetCount*sizeof(VkDescriptorSetLayout));
        auto proto_arr=reader.getpSetLayouts(result.descriptorSetCount);
        for(int kjCEeqP=0; kjCEeqP < result.descriptorSetCount; kjCEeqP++){
            [&](){((result.pSetLayouts)[kjCEeqP])=deserialize_handle(proto_arr[kjCEeqP]);}();
        }
        }();(result.pSetLayouts)=temp_pqhsZKt;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDescriptorSetAllocateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDescriptorSetAllocateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSpecializationMapEntry::Builder& builder, VkSpecializationMapEntry member){
        
    
[&](){return builder.setconstantID((member.constantID));}();
[&](){return builder.setoffset((member.offset));}();
[&](){return builder.setsize((member.size));}();
}

    VkSpecializationMapEntry deserialize_struct(VkSpecializationMapEntry::Reader reader){
        auto result=VkSpecializationMapEntry();
    
[&](){(result.constantID)=reader.getconstantID();}();
[&](){(result.offset)=reader.getoffset();}();
[&](){(result.size)=reader.getsize();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSpecializationMapEntry member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSpecializationMapEntry member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSpecializationInfo::Builder& builder, VkSpecializationInfo member){
        
    
[&](){return builder.setmapEntryCount((member.mapEntryCount));}();
[&](){
            if ((member.pMapEntries)==NULL){
                builder.disownpMapEntries();
            return; }
        auto proto_arr=builder.initpMapEntries();
        for(int heBswyj=0; heBswyj < member.mapEntryCount; heBswyj++){
            [&](){
            auto temp=proto_arr[heBswyj];
            return serialize_struct(((member.pMapEntries)[heBswyj]), temp);
            }();
        }
        }();
[&](){return builder.setdataSize((member.dataSize));}();
[&](){
            if ((member.pData)==NULL){
                builder.disownpData();
            return; }[&](){
            if (((char*)(member.pData).pData)==NULL){
                builder.disownpData();
            return; }
        auto proto_arr=builder.initpData();
        for(int KUeyATI=0; KUeyATI < member.dataSize; KUeyATI++){
            [&](){return proto_arr.set(KUeyATI,(((char*)(member.pData).pData)[KUeyATI]));}();
        }
        }();}();
}

    VkSpecializationInfo deserialize_struct(VkSpecializationInfo::Reader reader){
        auto result=VkSpecializationInfo();
    
[&](){(result.mapEntryCount)=reader.getmapEntryCount();}();
[&](){ VkSpecializationMapEntry* temp_LhdpHbT[&](){
            if (!reader.haspMapEntries()){
                (result.pMapEntries)=NULL;
            return; }{native_concat()}=(VkSpecializationMapEntry*)malloc(result.mapEntryCount*sizeof(VkSpecializationMapEntry));
        auto proto_arr=reader.getpMapEntries(result.mapEntryCount);
        for(int XLjYAsC=0; XLjYAsC < result.mapEntryCount; XLjYAsC++){
            [&](){
            auto temp=proto_arr[XLjYAsC];
            ((result.pMapEntries)[XLjYAsC])=deserialize_struct(temp);
            }();
        }
        }();(result.pMapEntries)=temp_LhdpHbT;}();
[&](){(result.dataSize)=reader.getdataSize();}();
[&](){ void* temp_RUIzmiy[&](){
            if (!reader.haspData()){
                (result.pData)=NULL;
            return; }char* temp_KoPqpjZ;[&](){
            if (!reader.haspData()){
                (temp_KoPqpjZ.pData)=NULL;
            return; }{native_concat()}=(char*)malloc(result.dataSize*sizeof(char));
        auto proto_arr=reader.getpData(result.dataSize);
        for(int OCmuZGI=0; OCmuZGI < result.dataSize; OCmuZGI++){
            [&](){((temp_KoPqpjZ.pData)[OCmuZGI])=proto_arr[OCmuZGI];}();
        }
        }();(result.pData)=temp_KoPqpjZ;}();(result.pData)=temp_RUIzmiy;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSpecializationInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSpecializationInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineShaderStageCreateInfo::Builder& builder, VkPipelineShaderStageCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){[&](){[&](){return builder.setstage((member.stage));}();}();}();
[&](){return builder.setmodule(serialize_handle(member.module));}();
[&](){
            if ((member.pName)==NULL){
                builder.disownpName();
            return; }
        auto proto_arr=builder.initpName();
        for(int opTkazg=0; opTkazg < strlen((member.pName))+1; opTkazg++){
            [&](){return proto_arr.set(opTkazg,((member.pName)[opTkazg]));}();
        }
        }();
[&](){
            if ((member.pSpecializationInfo)==NULL){
                builder.disownpSpecializationInfo();
            return; }
        auto proto_arr=builder.initpSpecializationInfo();
        for(int xbxpxgP=0; xbxpxgP < 1; xbxpxgP++){
            [&](){
            auto temp=proto_arr[xbxpxgP];
            return serialize_struct(((member.pSpecializationInfo)[xbxpxgP]), temp);
            }();
        }
        }();
}

    VkPipelineShaderStageCreateInfo deserialize_struct(VkPipelineShaderStageCreateInfo::Reader reader){
        auto result=VkPipelineShaderStageCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){[&](){[&](){(result.stage)=reader.getstage();}();}();}();
[&](){(result.module)=deserialize_handle(reader.getmodule());}();
[&](){ char* temp_xDKNBiw[&](){
            if (!reader.haspName()){
                (result.pName)=NULL;
            return; }{native_concat()}=(char*)malloc(reader.getpName().size();*sizeof(char));
        auto proto_arr=reader.getpName(reader.getpName().size(););
        for(int zzMOHXu=0; zzMOHXu < reader.getpName().size();; zzMOHXu++){
            [&](){((result.pName)[zzMOHXu])=proto_arr[zzMOHXu];}();
        }
        }();(result.pName)=temp_xDKNBiw;}();
[&](){ VkSpecializationInfo* temp_mZLjDhf[&](){
            if (!reader.haspSpecializationInfo()){
                (result.pSpecializationInfo)=NULL;
            return; }{native_concat()}=(VkSpecializationInfo*)malloc(1*sizeof(VkSpecializationInfo));
        auto proto_arr=reader.getpSpecializationInfo(1);
        for(int ZWKvpYr=0; ZWKvpYr < 1; ZWKvpYr++){
            [&](){
            auto temp=proto_arr[ZWKvpYr];
            ((result.pSpecializationInfo)[ZWKvpYr])=deserialize_struct(temp);
            }();
        }
        }();(result.pSpecializationInfo)=temp_mZLjDhf;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineShaderStageCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineShaderStageCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkComputePipelineCreateInfo::Builder& builder, VkComputePipelineCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){
            auto temp=builder.initstage(stage);
            return serialize_struct((member.stage), temp);
            }();
[&](){return builder.setlayout(serialize_handle(member.layout));}();
[&](){return builder.setbasePipelineHandle(serialize_handle(member.basePipelineHandle));}();
[&](){return builder.setbasePipelineIndex((member.basePipelineIndex));}();
}

    VkComputePipelineCreateInfo deserialize_struct(VkComputePipelineCreateInfo::Reader reader){
        auto result=VkComputePipelineCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){
            auto temp=reader.getstage();
            (result.stage)=deserialize_struct(temp);
            }();
[&](){(result.layout)=deserialize_handle(reader.getlayout());}();
[&](){(result.basePipelineHandle)=deserialize_handle(reader.getbasePipelineHandle());}();
[&](){(result.basePipelineIndex)=reader.getbasePipelineIndex();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkComputePipelineCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkComputePipelineCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkComputePipelineIndirectBufferInfoNV::Builder& builder, VkComputePipelineIndirectBufferInfoNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setdeviceAddress((member.deviceAddress));}();}();
[&](){[&](){return builder.setsize((member.size));}();}();
[&](){[&](){return builder.setpipelineDeviceAddressCaptureReplay((member.pipelineDeviceAddressCaptureReplay));}();}();
}

    VkComputePipelineIndirectBufferInfoNV deserialize_struct(VkComputePipelineIndirectBufferInfoNV::Reader reader){
        auto result=VkComputePipelineIndirectBufferInfoNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){(result.deviceAddress)=reader.getdeviceAddress();}();}();
[&](){[&](){(result.size)=reader.getsize();}();}();
[&](){[&](){(result.pipelineDeviceAddressCaptureReplay)=reader.getpipelineDeviceAddressCaptureReplay();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkComputePipelineIndirectBufferInfoNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkComputePipelineIndirectBufferInfoNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineCreateFlags2CreateInfoKHR::Builder& builder, VkPipelineCreateFlags2CreateInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
}

    VkPipelineCreateFlags2CreateInfoKHR deserialize_struct(VkPipelineCreateFlags2CreateInfoKHR::Reader reader){
        auto result=VkPipelineCreateFlags2CreateInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineCreateFlags2CreateInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineCreateFlags2CreateInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkVertexInputBindingDescription::Builder& builder, VkVertexInputBindingDescription member){
        
    
[&](){return builder.setbinding((member.binding));}();
[&](){return builder.setstride((member.stride));}();
[&](){[&](){[&](){return builder.setinputRate((member.inputRate));}();}();}();
}

    VkVertexInputBindingDescription deserialize_struct(VkVertexInputBindingDescription::Reader reader){
        auto result=VkVertexInputBindingDescription();
    
[&](){(result.binding)=reader.getbinding();}();
[&](){(result.stride)=reader.getstride();}();
[&](){[&](){[&](){(result.inputRate)=reader.getinputRate();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkVertexInputBindingDescription member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkVertexInputBindingDescription member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkVertexInputAttributeDescription::Builder& builder, VkVertexInputAttributeDescription member){
        
    
[&](){return builder.setlocation((member.location));}();
[&](){return builder.setbinding((member.binding));}();
[&](){[&](){[&](){return builder.setformat((member.format));}();}();}();
[&](){return builder.setoffset((member.offset));}();
}

    VkVertexInputAttributeDescription deserialize_struct(VkVertexInputAttributeDescription::Reader reader){
        auto result=VkVertexInputAttributeDescription();
    
[&](){(result.location)=reader.getlocation();}();
[&](){(result.binding)=reader.getbinding();}();
[&](){[&](){[&](){(result.format)=reader.getformat();}();}();}();
[&](){(result.offset)=reader.getoffset();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkVertexInputAttributeDescription member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkVertexInputAttributeDescription member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineVertexInputStateCreateInfo::Builder& builder, VkPipelineVertexInputStateCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){return builder.setvertexBindingDescriptionCount((member.vertexBindingDescriptionCount));}();
[&](){
            if ((member.pVertexBindingDescriptions)==NULL){
                builder.disownpVertexBindingDescriptions();
            return; }
        auto proto_arr=builder.initpVertexBindingDescriptions();
        for(int UYAeNka=0; UYAeNka < member.vertexBindingDescriptionCount; UYAeNka++){
            [&](){
            auto temp=proto_arr[UYAeNka];
            return serialize_struct(((member.pVertexBindingDescriptions)[UYAeNka]), temp);
            }();
        }
        }();
[&](){return builder.setvertexAttributeDescriptionCount((member.vertexAttributeDescriptionCount));}();
[&](){
            if ((member.pVertexAttributeDescriptions)==NULL){
                builder.disownpVertexAttributeDescriptions();
            return; }
        auto proto_arr=builder.initpVertexAttributeDescriptions();
        for(int RsYbObC=0; RsYbObC < member.vertexAttributeDescriptionCount; RsYbObC++){
            [&](){
            auto temp=proto_arr[RsYbObC];
            return serialize_struct(((member.pVertexAttributeDescriptions)[RsYbObC]), temp);
            }();
        }
        }();
}

    VkPipelineVertexInputStateCreateInfo deserialize_struct(VkPipelineVertexInputStateCreateInfo::Reader reader){
        auto result=VkPipelineVertexInputStateCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){(result.vertexBindingDescriptionCount)=reader.getvertexBindingDescriptionCount();}();
[&](){ VkVertexInputBindingDescription* temp_tIwgstl[&](){
            if (!reader.haspVertexBindingDescriptions()){
                (result.pVertexBindingDescriptions)=NULL;
            return; }{native_concat()}=(VkVertexInputBindingDescription*)malloc(result.vertexBindingDescriptionCount*sizeof(VkVertexInputBindingDescription));
        auto proto_arr=reader.getpVertexBindingDescriptions(result.vertexBindingDescriptionCount);
        for(int OSCEDEw=0; OSCEDEw < result.vertexBindingDescriptionCount; OSCEDEw++){
            [&](){
            auto temp=proto_arr[OSCEDEw];
            ((result.pVertexBindingDescriptions)[OSCEDEw])=deserialize_struct(temp);
            }();
        }
        }();(result.pVertexBindingDescriptions)=temp_tIwgstl;}();
[&](){(result.vertexAttributeDescriptionCount)=reader.getvertexAttributeDescriptionCount();}();
[&](){ VkVertexInputAttributeDescription* temp_TUrVxbd[&](){
            if (!reader.haspVertexAttributeDescriptions()){
                (result.pVertexAttributeDescriptions)=NULL;
            return; }{native_concat()}=(VkVertexInputAttributeDescription*)malloc(result.vertexAttributeDescriptionCount*sizeof(VkVertexInputAttributeDescription));
        auto proto_arr=reader.getpVertexAttributeDescriptions(result.vertexAttributeDescriptionCount);
        for(int CvxmTtW=0; CvxmTtW < result.vertexAttributeDescriptionCount; CvxmTtW++){
            [&](){
            auto temp=proto_arr[CvxmTtW];
            ((result.pVertexAttributeDescriptions)[CvxmTtW])=deserialize_struct(temp);
            }();
        }
        }();(result.pVertexAttributeDescriptions)=temp_TUrVxbd;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineVertexInputStateCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineVertexInputStateCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineInputAssemblyStateCreateInfo::Builder& builder, VkPipelineInputAssemblyStateCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){[&](){[&](){return builder.settopology((member.topology));}();}();}();
[&](){[&](){return builder.setprimitiveRestartEnable((member.primitiveRestartEnable));}();}();
}

    VkPipelineInputAssemblyStateCreateInfo deserialize_struct(VkPipelineInputAssemblyStateCreateInfo::Reader reader){
        auto result=VkPipelineInputAssemblyStateCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){[&](){[&](){(result.topology)=reader.gettopology();}();}();}();
[&](){[&](){(result.primitiveRestartEnable)=reader.getprimitiveRestartEnable();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineInputAssemblyStateCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineInputAssemblyStateCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineTessellationStateCreateInfo::Builder& builder, VkPipelineTessellationStateCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){return builder.setpatchControlPoints((member.patchControlPoints));}();
}

    VkPipelineTessellationStateCreateInfo deserialize_struct(VkPipelineTessellationStateCreateInfo::Reader reader){
        auto result=VkPipelineTessellationStateCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){(result.patchControlPoints)=reader.getpatchControlPoints();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineTessellationStateCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineTessellationStateCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineViewportStateCreateInfo::Builder& builder, VkPipelineViewportStateCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){return builder.setviewportCount((member.viewportCount));}();
[&](){
            if ((member.pViewports)==NULL){
                builder.disownpViewports();
            return; }
        auto proto_arr=builder.initpViewports();
        for(int nudoDfU=0; nudoDfU < member.viewportCount; nudoDfU++){
            [&](){
            auto temp=proto_arr[nudoDfU];
            return serialize_struct(((member.pViewports)[nudoDfU]), temp);
            }();
        }
        }();
[&](){return builder.setscissorCount((member.scissorCount));}();
[&](){
            if ((member.pScissors)==NULL){
                builder.disownpScissors();
            return; }
        auto proto_arr=builder.initpScissors();
        for(int fZdpvXx=0; fZdpvXx < member.scissorCount; fZdpvXx++){
            [&](){
            auto temp=proto_arr[fZdpvXx];
            return serialize_struct(((member.pScissors)[fZdpvXx]), temp);
            }();
        }
        }();
}

    VkPipelineViewportStateCreateInfo deserialize_struct(VkPipelineViewportStateCreateInfo::Reader reader){
        auto result=VkPipelineViewportStateCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){(result.viewportCount)=reader.getviewportCount();}();
[&](){ VkViewport* temp_krEdrLQ[&](){
            if (!reader.haspViewports()){
                (result.pViewports)=NULL;
            return; }{native_concat()}=(VkViewport*)malloc(result.viewportCount*sizeof(VkViewport));
        auto proto_arr=reader.getpViewports(result.viewportCount);
        for(int joicTxZ=0; joicTxZ < result.viewportCount; joicTxZ++){
            [&](){
            auto temp=proto_arr[joicTxZ];
            ((result.pViewports)[joicTxZ])=deserialize_struct(temp);
            }();
        }
        }();(result.pViewports)=temp_krEdrLQ;}();
[&](){(result.scissorCount)=reader.getscissorCount();}();
[&](){ VkRect2D* temp_luRjaix[&](){
            if (!reader.haspScissors()){
                (result.pScissors)=NULL;
            return; }{native_concat()}=(VkRect2D*)malloc(result.scissorCount*sizeof(VkRect2D));
        auto proto_arr=reader.getpScissors(result.scissorCount);
        for(int jztdrHP=0; jztdrHP < result.scissorCount; jztdrHP++){
            [&](){
            auto temp=proto_arr[jztdrHP];
            ((result.pScissors)[jztdrHP])=deserialize_struct(temp);
            }();
        }
        }();(result.pScissors)=temp_luRjaix;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineViewportStateCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineViewportStateCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineRasterizationStateCreateInfo::Builder& builder, VkPipelineRasterizationStateCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){[&](){return builder.setdepthClampEnable((member.depthClampEnable));}();}();
[&](){[&](){return builder.setrasterizerDiscardEnable((member.rasterizerDiscardEnable));}();}();
[&](){[&](){[&](){return builder.setpolygonMode((member.polygonMode));}();}();}();
[&](){[&](){[&](){return builder.setcullMode((member.cullMode));}();}();}();
[&](){[&](){[&](){return builder.setfrontFace((member.frontFace));}();}();}();
[&](){[&](){return builder.setdepthBiasEnable((member.depthBiasEnable));}();}();
[&](){return builder.setdepthBiasConstantFactor((member.depthBiasConstantFactor));}();
[&](){return builder.setdepthBiasClamp((member.depthBiasClamp));}();
[&](){return builder.setdepthBiasSlopeFactor((member.depthBiasSlopeFactor));}();
[&](){return builder.setlineWidth((member.lineWidth));}();
}

    VkPipelineRasterizationStateCreateInfo deserialize_struct(VkPipelineRasterizationStateCreateInfo::Reader reader){
        auto result=VkPipelineRasterizationStateCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){[&](){(result.depthClampEnable)=reader.getdepthClampEnable();}();}();
[&](){[&](){(result.rasterizerDiscardEnable)=reader.getrasterizerDiscardEnable();}();}();
[&](){[&](){[&](){(result.polygonMode)=reader.getpolygonMode();}();}();}();
[&](){[&](){[&](){(result.cullMode)=reader.getcullMode();}();}();}();
[&](){[&](){[&](){(result.frontFace)=reader.getfrontFace();}();}();}();
[&](){[&](){(result.depthBiasEnable)=reader.getdepthBiasEnable();}();}();
[&](){(result.depthBiasConstantFactor)=reader.getdepthBiasConstantFactor();}();
[&](){(result.depthBiasClamp)=reader.getdepthBiasClamp();}();
[&](){(result.depthBiasSlopeFactor)=reader.getdepthBiasSlopeFactor();}();
[&](){(result.lineWidth)=reader.getlineWidth();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineRasterizationStateCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineRasterizationStateCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineMultisampleStateCreateInfo::Builder& builder, VkPipelineMultisampleStateCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){[&](){[&](){return builder.setrasterizationSamples((member.rasterizationSamples));}();}();}();
[&](){[&](){return builder.setsampleShadingEnable((member.sampleShadingEnable));}();}();
[&](){return builder.setminSampleShading((member.minSampleShading));}();
[&](){
            if ((member.pSampleMask)==NULL){
                builder.disownpSampleMask();
            return; }
        auto proto_arr=builder.initpSampleMask();
        for(int KkmOuEW=0; KkmOuEW < (member.rasterizationSamples + 31) / 32; KkmOuEW++){
            [&](){[&](){return proto_arr.set(KkmOuEW,((member.pSampleMask)[KkmOuEW]));}();}();
        }
        }();
[&](){[&](){return builder.setalphaToCoverageEnable((member.alphaToCoverageEnable));}();}();
[&](){[&](){return builder.setalphaToOneEnable((member.alphaToOneEnable));}();}();
}

    VkPipelineMultisampleStateCreateInfo deserialize_struct(VkPipelineMultisampleStateCreateInfo::Reader reader){
        auto result=VkPipelineMultisampleStateCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){[&](){[&](){(result.rasterizationSamples)=reader.getrasterizationSamples();}();}();}();
[&](){[&](){(result.sampleShadingEnable)=reader.getsampleShadingEnable();}();}();
[&](){(result.minSampleShading)=reader.getminSampleShading();}();
[&](){ VkSampleMask* temp_iFbtOnI[&](){
            if (!reader.haspSampleMask()){
                (result.pSampleMask)=NULL;
            return; }{native_concat()}=(VkSampleMask*)malloc((result.rasterizationSamples + 31) / 32*sizeof(VkSampleMask));
        auto proto_arr=reader.getpSampleMask((result.rasterizationSamples + 31) / 32);
        for(int DkRZSWg=0; DkRZSWg < (result.rasterizationSamples + 31) / 32; DkRZSWg++){
            [&](){[&](){((result.pSampleMask)[DkRZSWg])=proto_arr[DkRZSWg];}();}();
        }
        }();(result.pSampleMask)=temp_iFbtOnI;}();
[&](){[&](){(result.alphaToCoverageEnable)=reader.getalphaToCoverageEnable();}();}();
[&](){[&](){(result.alphaToOneEnable)=reader.getalphaToOneEnable();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineMultisampleStateCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineMultisampleStateCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineColorBlendAttachmentState::Builder& builder, VkPipelineColorBlendAttachmentState member){
        
    
[&](){[&](){return builder.setblendEnable((member.blendEnable));}();}();
[&](){[&](){[&](){return builder.setsrcColorBlendFactor((member.srcColorBlendFactor));}();}();}();
[&](){[&](){[&](){return builder.setdstColorBlendFactor((member.dstColorBlendFactor));}();}();}();
[&](){[&](){[&](){return builder.setcolorBlendOp((member.colorBlendOp));}();}();}();
[&](){[&](){[&](){return builder.setsrcAlphaBlendFactor((member.srcAlphaBlendFactor));}();}();}();
[&](){[&](){[&](){return builder.setdstAlphaBlendFactor((member.dstAlphaBlendFactor));}();}();}();
[&](){[&](){[&](){return builder.setalphaBlendOp((member.alphaBlendOp));}();}();}();
[&](){[&](){[&](){return builder.setcolorWriteMask((member.colorWriteMask));}();}();}();
}

    VkPipelineColorBlendAttachmentState deserialize_struct(VkPipelineColorBlendAttachmentState::Reader reader){
        auto result=VkPipelineColorBlendAttachmentState();
    
[&](){[&](){(result.blendEnable)=reader.getblendEnable();}();}();
[&](){[&](){[&](){(result.srcColorBlendFactor)=reader.getsrcColorBlendFactor();}();}();}();
[&](){[&](){[&](){(result.dstColorBlendFactor)=reader.getdstColorBlendFactor();}();}();}();
[&](){[&](){[&](){(result.colorBlendOp)=reader.getcolorBlendOp();}();}();}();
[&](){[&](){[&](){(result.srcAlphaBlendFactor)=reader.getsrcAlphaBlendFactor();}();}();}();
[&](){[&](){[&](){(result.dstAlphaBlendFactor)=reader.getdstAlphaBlendFactor();}();}();}();
[&](){[&](){[&](){(result.alphaBlendOp)=reader.getalphaBlendOp();}();}();}();
[&](){[&](){[&](){(result.colorWriteMask)=reader.getcolorWriteMask();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineColorBlendAttachmentState member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineColorBlendAttachmentState member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineColorBlendStateCreateInfo::Builder& builder, VkPipelineColorBlendStateCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){[&](){return builder.setlogicOpEnable((member.logicOpEnable));}();}();
[&](){[&](){[&](){return builder.setlogicOp((member.logicOp));}();}();}();
[&](){return builder.setattachmentCount((member.attachmentCount));}();
[&](){
            if ((member.pAttachments)==NULL){
                builder.disownpAttachments();
            return; }
        auto proto_arr=builder.initpAttachments();
        for(int UeoCLDk=0; UeoCLDk < member.attachmentCount; UeoCLDk++){
            [&](){
            auto temp=proto_arr[UeoCLDk];
            return serialize_struct(((member.pAttachments)[UeoCLDk]), temp);
            }();
        }
        }();
[&](){
        auto proto_arr=builder.initblendConstants();
        for(int hihyfbp=0; hihyfbp < 4; hihyfbp++){
            [&](){return proto_arr.set(hihyfbp,((member.blendConstants)[hihyfbp]));}();
        }
        }();
}

    VkPipelineColorBlendStateCreateInfo deserialize_struct(VkPipelineColorBlendStateCreateInfo::Reader reader){
        auto result=VkPipelineColorBlendStateCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){[&](){(result.logicOpEnable)=reader.getlogicOpEnable();}();}();
[&](){[&](){[&](){(result.logicOp)=reader.getlogicOp();}();}();}();
[&](){(result.attachmentCount)=reader.getattachmentCount();}();
[&](){ VkPipelineColorBlendAttachmentState* temp_bpKOhtp[&](){
            if (!reader.haspAttachments()){
                (result.pAttachments)=NULL;
            return; }{native_concat()}=(VkPipelineColorBlendAttachmentState*)malloc(result.attachmentCount*sizeof(VkPipelineColorBlendAttachmentState));
        auto proto_arr=reader.getpAttachments(result.attachmentCount);
        for(int ncYTsSD=0; ncYTsSD < result.attachmentCount; ncYTsSD++){
            [&](){
            auto temp=proto_arr[ncYTsSD];
            ((result.pAttachments)[ncYTsSD])=deserialize_struct(temp);
            }();
        }
        }();(result.pAttachments)=temp_bpKOhtp;}();
[&](){
        auto proto_arr=reader.getblendConstants(4);
        for(int hihyfbp=0; hihyfbp < 4; hihyfbp++){
            [&](){((result.blendConstants)[hihyfbp])=proto_arr[hihyfbp];}();
        }
        }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineColorBlendStateCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineColorBlendStateCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineDynamicStateCreateInfo::Builder& builder, VkPipelineDynamicStateCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){return builder.setdynamicStateCount((member.dynamicStateCount));}();
[&](){
            if ((member.pDynamicStates)==NULL){
                builder.disownpDynamicStates();
            return; }
        auto proto_arr=builder.initpDynamicStates();
        for(int aeBshMh=0; aeBshMh < member.dynamicStateCount; aeBshMh++){
            [&](){[&](){[&](){return proto_arr.set(aeBshMh,((member.pDynamicStates)[aeBshMh]));}();}();}();
        }
        }();
}

    VkPipelineDynamicStateCreateInfo deserialize_struct(VkPipelineDynamicStateCreateInfo::Reader reader){
        auto result=VkPipelineDynamicStateCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){(result.dynamicStateCount)=reader.getdynamicStateCount();}();
[&](){ VkDynamicState* temp_WyEatFJ[&](){
            if (!reader.haspDynamicStates()){
                (result.pDynamicStates)=NULL;
            return; }{native_concat()}=(VkDynamicState*)malloc(result.dynamicStateCount*sizeof(VkDynamicState));
        auto proto_arr=reader.getpDynamicStates(result.dynamicStateCount);
        for(int gZGZxPA=0; gZGZxPA < result.dynamicStateCount; gZGZxPA++){
            [&](){[&](){[&](){((result.pDynamicStates)[gZGZxPA])=proto_arr[gZGZxPA];}();}();}();
        }
        }();(result.pDynamicStates)=temp_WyEatFJ;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineDynamicStateCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineDynamicStateCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkStencilOpState::Builder& builder, VkStencilOpState member){
        
    
[&](){[&](){[&](){return builder.setfailOp((member.failOp));}();}();}();
[&](){[&](){[&](){return builder.setpassOp((member.passOp));}();}();}();
[&](){[&](){[&](){return builder.setdepthFailOp((member.depthFailOp));}();}();}();
[&](){[&](){[&](){return builder.setcompareOp((member.compareOp));}();}();}();
[&](){return builder.setcompareMask((member.compareMask));}();
[&](){return builder.setwriteMask((member.writeMask));}();
[&](){return builder.setreference((member.reference));}();
}

    VkStencilOpState deserialize_struct(VkStencilOpState::Reader reader){
        auto result=VkStencilOpState();
    
[&](){[&](){[&](){(result.failOp)=reader.getfailOp();}();}();}();
[&](){[&](){[&](){(result.passOp)=reader.getpassOp();}();}();}();
[&](){[&](){[&](){(result.depthFailOp)=reader.getdepthFailOp();}();}();}();
[&](){[&](){[&](){(result.compareOp)=reader.getcompareOp();}();}();}();
[&](){(result.compareMask)=reader.getcompareMask();}();
[&](){(result.writeMask)=reader.getwriteMask();}();
[&](){(result.reference)=reader.getreference();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkStencilOpState member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkStencilOpState member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineDepthStencilStateCreateInfo::Builder& builder, VkPipelineDepthStencilStateCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){[&](){return builder.setdepthTestEnable((member.depthTestEnable));}();}();
[&](){[&](){return builder.setdepthWriteEnable((member.depthWriteEnable));}();}();
[&](){[&](){[&](){return builder.setdepthCompareOp((member.depthCompareOp));}();}();}();
[&](){[&](){return builder.setdepthBoundsTestEnable((member.depthBoundsTestEnable));}();}();
[&](){[&](){return builder.setstencilTestEnable((member.stencilTestEnable));}();}();
[&](){
            auto temp=builder.initfront(front);
            return serialize_struct((member.front), temp);
            }();
[&](){
            auto temp=builder.initback(back);
            return serialize_struct((member.back), temp);
            }();
[&](){return builder.setminDepthBounds((member.minDepthBounds));}();
[&](){return builder.setmaxDepthBounds((member.maxDepthBounds));}();
}

    VkPipelineDepthStencilStateCreateInfo deserialize_struct(VkPipelineDepthStencilStateCreateInfo::Reader reader){
        auto result=VkPipelineDepthStencilStateCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){[&](){(result.depthTestEnable)=reader.getdepthTestEnable();}();}();
[&](){[&](){(result.depthWriteEnable)=reader.getdepthWriteEnable();}();}();
[&](){[&](){[&](){(result.depthCompareOp)=reader.getdepthCompareOp();}();}();}();
[&](){[&](){(result.depthBoundsTestEnable)=reader.getdepthBoundsTestEnable();}();}();
[&](){[&](){(result.stencilTestEnable)=reader.getstencilTestEnable();}();}();
[&](){
            auto temp=reader.getfront();
            (result.front)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getback();
            (result.back)=deserialize_struct(temp);
            }();
[&](){(result.minDepthBounds)=reader.getminDepthBounds();}();
[&](){(result.maxDepthBounds)=reader.getmaxDepthBounds();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineDepthStencilStateCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineDepthStencilStateCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkGraphicsPipelineCreateInfo::Builder& builder, VkGraphicsPipelineCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){return builder.setstageCount((member.stageCount));}();
[&](){
            if ((member.pStages)==NULL){
                builder.disownpStages();
            return; }
        auto proto_arr=builder.initpStages();
        for(int jHuRulk=0; jHuRulk < member.stageCount; jHuRulk++){
            [&](){
            auto temp=proto_arr[jHuRulk];
            return serialize_struct(((member.pStages)[jHuRulk]), temp);
            }();
        }
        }();
[&](){
            if ((member.pVertexInputState)==NULL){
                builder.disownpVertexInputState();
            return; }
        auto proto_arr=builder.initpVertexInputState();
        for(int wkXjKqh=0; wkXjKqh < 1; wkXjKqh++){
            [&](){
            auto temp=proto_arr[wkXjKqh];
            return serialize_struct(((member.pVertexInputState)[wkXjKqh]), temp);
            }();
        }
        }();
[&](){
            if ((member.pInputAssemblyState)==NULL){
                builder.disownpInputAssemblyState();
            return; }
        auto proto_arr=builder.initpInputAssemblyState();
        for(int eNpRXIQ=0; eNpRXIQ < 1; eNpRXIQ++){
            [&](){
            auto temp=proto_arr[eNpRXIQ];
            return serialize_struct(((member.pInputAssemblyState)[eNpRXIQ]), temp);
            }();
        }
        }();
[&](){
            if ((member.pTessellationState)==NULL){
                builder.disownpTessellationState();
            return; }
        auto proto_arr=builder.initpTessellationState();
        for(int rSxHnEH=0; rSxHnEH < 1; rSxHnEH++){
            [&](){
            auto temp=proto_arr[rSxHnEH];
            return serialize_struct(((member.pTessellationState)[rSxHnEH]), temp);
            }();
        }
        }();
[&](){
            if ((member.pViewportState)==NULL){
                builder.disownpViewportState();
            return; }
        auto proto_arr=builder.initpViewportState();
        for(int HszcYXw=0; HszcYXw < 1; HszcYXw++){
            [&](){
            auto temp=proto_arr[HszcYXw];
            return serialize_struct(((member.pViewportState)[HszcYXw]), temp);
            }();
        }
        }();
[&](){
            if ((member.pRasterizationState)==NULL){
                builder.disownpRasterizationState();
            return; }
        auto proto_arr=builder.initpRasterizationState();
        for(int YHpJqRW=0; YHpJqRW < 1; YHpJqRW++){
            [&](){
            auto temp=proto_arr[YHpJqRW];
            return serialize_struct(((member.pRasterizationState)[YHpJqRW]), temp);
            }();
        }
        }();
[&](){
            if ((member.pMultisampleState)==NULL){
                builder.disownpMultisampleState();
            return; }
        auto proto_arr=builder.initpMultisampleState();
        for(int itMmQwR=0; itMmQwR < 1; itMmQwR++){
            [&](){
            auto temp=proto_arr[itMmQwR];
            return serialize_struct(((member.pMultisampleState)[itMmQwR]), temp);
            }();
        }
        }();
[&](){
            if ((member.pDepthStencilState)==NULL){
                builder.disownpDepthStencilState();
            return; }
        auto proto_arr=builder.initpDepthStencilState();
        for(int dZXqjNN=0; dZXqjNN < 1; dZXqjNN++){
            [&](){
            auto temp=proto_arr[dZXqjNN];
            return serialize_struct(((member.pDepthStencilState)[dZXqjNN]), temp);
            }();
        }
        }();
[&](){
            if ((member.pColorBlendState)==NULL){
                builder.disownpColorBlendState();
            return; }
        auto proto_arr=builder.initpColorBlendState();
        for(int PZsHAXm=0; PZsHAXm < 1; PZsHAXm++){
            [&](){
            auto temp=proto_arr[PZsHAXm];
            return serialize_struct(((member.pColorBlendState)[PZsHAXm]), temp);
            }();
        }
        }();
[&](){
            if ((member.pDynamicState)==NULL){
                builder.disownpDynamicState();
            return; }
        auto proto_arr=builder.initpDynamicState();
        for(int UhXMcnS=0; UhXMcnS < 1; UhXMcnS++){
            [&](){
            auto temp=proto_arr[UhXMcnS];
            return serialize_struct(((member.pDynamicState)[UhXMcnS]), temp);
            }();
        }
        }();
[&](){return builder.setlayout(serialize_handle(member.layout));}();
[&](){return builder.setrenderPass(serialize_handle(member.renderPass));}();
[&](){return builder.setsubpass((member.subpass));}();
[&](){return builder.setbasePipelineHandle(serialize_handle(member.basePipelineHandle));}();
[&](){return builder.setbasePipelineIndex((member.basePipelineIndex));}();
}

    VkGraphicsPipelineCreateInfo deserialize_struct(VkGraphicsPipelineCreateInfo::Reader reader){
        auto result=VkGraphicsPipelineCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){(result.stageCount)=reader.getstageCount();}();
[&](){ VkPipelineShaderStageCreateInfo* temp_FsQxpon[&](){
            if (!reader.haspStages()){
                (result.pStages)=NULL;
            return; }{native_concat()}=(VkPipelineShaderStageCreateInfo*)malloc(result.stageCount*sizeof(VkPipelineShaderStageCreateInfo));
        auto proto_arr=reader.getpStages(result.stageCount);
        for(int XttzcgZ=0; XttzcgZ < result.stageCount; XttzcgZ++){
            [&](){
            auto temp=proto_arr[XttzcgZ];
            ((result.pStages)[XttzcgZ])=deserialize_struct(temp);
            }();
        }
        }();(result.pStages)=temp_FsQxpon;}();
[&](){ VkPipelineVertexInputStateCreateInfo* temp_GRDNOgA[&](){
            if (!reader.haspVertexInputState()){
                (result.pVertexInputState)=NULL;
            return; }{native_concat()}=(VkPipelineVertexInputStateCreateInfo*)malloc(1*sizeof(VkPipelineVertexInputStateCreateInfo));
        auto proto_arr=reader.getpVertexInputState(1);
        for(int RFpaRUE=0; RFpaRUE < 1; RFpaRUE++){
            [&](){
            auto temp=proto_arr[RFpaRUE];
            ((result.pVertexInputState)[RFpaRUE])=deserialize_struct(temp);
            }();
        }
        }();(result.pVertexInputState)=temp_GRDNOgA;}();
[&](){ VkPipelineInputAssemblyStateCreateInfo* temp_oaVANCx[&](){
            if (!reader.haspInputAssemblyState()){
                (result.pInputAssemblyState)=NULL;
            return; }{native_concat()}=(VkPipelineInputAssemblyStateCreateInfo*)malloc(1*sizeof(VkPipelineInputAssemblyStateCreateInfo));
        auto proto_arr=reader.getpInputAssemblyState(1);
        for(int LCsVUxO=0; LCsVUxO < 1; LCsVUxO++){
            [&](){
            auto temp=proto_arr[LCsVUxO];
            ((result.pInputAssemblyState)[LCsVUxO])=deserialize_struct(temp);
            }();
        }
        }();(result.pInputAssemblyState)=temp_oaVANCx;}();
[&](){ VkPipelineTessellationStateCreateInfo* temp_LTmoKJi[&](){
            if (!reader.haspTessellationState()){
                (result.pTessellationState)=NULL;
            return; }{native_concat()}=(VkPipelineTessellationStateCreateInfo*)malloc(1*sizeof(VkPipelineTessellationStateCreateInfo));
        auto proto_arr=reader.getpTessellationState(1);
        for(int QktcRuM=0; QktcRuM < 1; QktcRuM++){
            [&](){
            auto temp=proto_arr[QktcRuM];
            ((result.pTessellationState)[QktcRuM])=deserialize_struct(temp);
            }();
        }
        }();(result.pTessellationState)=temp_LTmoKJi;}();
[&](){ VkPipelineViewportStateCreateInfo* temp_utrxeew[&](){
            if (!reader.haspViewportState()){
                (result.pViewportState)=NULL;
            return; }{native_concat()}=(VkPipelineViewportStateCreateInfo*)malloc(1*sizeof(VkPipelineViewportStateCreateInfo));
        auto proto_arr=reader.getpViewportState(1);
        for(int BstHynL=0; BstHynL < 1; BstHynL++){
            [&](){
            auto temp=proto_arr[BstHynL];
            ((result.pViewportState)[BstHynL])=deserialize_struct(temp);
            }();
        }
        }();(result.pViewportState)=temp_utrxeew;}();
[&](){ VkPipelineRasterizationStateCreateInfo* temp_UeVfMZa[&](){
            if (!reader.haspRasterizationState()){
                (result.pRasterizationState)=NULL;
            return; }{native_concat()}=(VkPipelineRasterizationStateCreateInfo*)malloc(1*sizeof(VkPipelineRasterizationStateCreateInfo));
        auto proto_arr=reader.getpRasterizationState(1);
        for(int UrKpYID=0; UrKpYID < 1; UrKpYID++){
            [&](){
            auto temp=proto_arr[UrKpYID];
            ((result.pRasterizationState)[UrKpYID])=deserialize_struct(temp);
            }();
        }
        }();(result.pRasterizationState)=temp_UeVfMZa;}();
[&](){ VkPipelineMultisampleStateCreateInfo* temp_pwIOJfB[&](){
            if (!reader.haspMultisampleState()){
                (result.pMultisampleState)=NULL;
            return; }{native_concat()}=(VkPipelineMultisampleStateCreateInfo*)malloc(1*sizeof(VkPipelineMultisampleStateCreateInfo));
        auto proto_arr=reader.getpMultisampleState(1);
        for(int mkZpyGN=0; mkZpyGN < 1; mkZpyGN++){
            [&](){
            auto temp=proto_arr[mkZpyGN];
            ((result.pMultisampleState)[mkZpyGN])=deserialize_struct(temp);
            }();
        }
        }();(result.pMultisampleState)=temp_pwIOJfB;}();
[&](){ VkPipelineDepthStencilStateCreateInfo* temp_SgjgObT[&](){
            if (!reader.haspDepthStencilState()){
                (result.pDepthStencilState)=NULL;
            return; }{native_concat()}=(VkPipelineDepthStencilStateCreateInfo*)malloc(1*sizeof(VkPipelineDepthStencilStateCreateInfo));
        auto proto_arr=reader.getpDepthStencilState(1);
        for(int fcBDTZt=0; fcBDTZt < 1; fcBDTZt++){
            [&](){
            auto temp=proto_arr[fcBDTZt];
            ((result.pDepthStencilState)[fcBDTZt])=deserialize_struct(temp);
            }();
        }
        }();(result.pDepthStencilState)=temp_SgjgObT;}();
[&](){ VkPipelineColorBlendStateCreateInfo* temp_dPxXxzH[&](){
            if (!reader.haspColorBlendState()){
                (result.pColorBlendState)=NULL;
            return; }{native_concat()}=(VkPipelineColorBlendStateCreateInfo*)malloc(1*sizeof(VkPipelineColorBlendStateCreateInfo));
        auto proto_arr=reader.getpColorBlendState(1);
        for(int imvOMcm=0; imvOMcm < 1; imvOMcm++){
            [&](){
            auto temp=proto_arr[imvOMcm];
            ((result.pColorBlendState)[imvOMcm])=deserialize_struct(temp);
            }();
        }
        }();(result.pColorBlendState)=temp_dPxXxzH;}();
[&](){ VkPipelineDynamicStateCreateInfo* temp_aXXcKaH[&](){
            if (!reader.haspDynamicState()){
                (result.pDynamicState)=NULL;
            return; }{native_concat()}=(VkPipelineDynamicStateCreateInfo*)malloc(1*sizeof(VkPipelineDynamicStateCreateInfo));
        auto proto_arr=reader.getpDynamicState(1);
        for(int tTovUVg=0; tTovUVg < 1; tTovUVg++){
            [&](){
            auto temp=proto_arr[tTovUVg];
            ((result.pDynamicState)[tTovUVg])=deserialize_struct(temp);
            }();
        }
        }();(result.pDynamicState)=temp_aXXcKaH;}();
[&](){(result.layout)=deserialize_handle(reader.getlayout());}();
[&](){(result.renderPass)=deserialize_handle(reader.getrenderPass());}();
[&](){(result.subpass)=reader.getsubpass();}();
[&](){(result.basePipelineHandle)=deserialize_handle(reader.getbasePipelineHandle());}();
[&](){(result.basePipelineIndex)=reader.getbasePipelineIndex();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkGraphicsPipelineCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkGraphicsPipelineCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineCacheCreateInfo::Builder& builder, VkPipelineCacheCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){return builder.setinitialDataSize((member.initialDataSize));}();
[&](){
            if ((member.pInitialData)==NULL){
                builder.disownpInitialData();
            return; }[&](){
            if (((char*)(member.pInitialData).pInitialData)==NULL){
                builder.disownpInitialData();
            return; }
        auto proto_arr=builder.initpInitialData();
        for(int VgUKinx=0; VgUKinx < member.initialDataSize; VgUKinx++){
            [&](){return proto_arr.set(VgUKinx,(((char*)(member.pInitialData).pInitialData)[VgUKinx]));}();
        }
        }();}();
}

    VkPipelineCacheCreateInfo deserialize_struct(VkPipelineCacheCreateInfo::Reader reader){
        auto result=VkPipelineCacheCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){(result.initialDataSize)=reader.getinitialDataSize();}();
[&](){ void* temp_hSGagCA[&](){
            if (!reader.haspInitialData()){
                (result.pInitialData)=NULL;
            return; }char* temp_MNyHoci;[&](){
            if (!reader.haspInitialData()){
                (temp_MNyHoci.pInitialData)=NULL;
            return; }{native_concat()}=(char*)malloc(result.initialDataSize*sizeof(char));
        auto proto_arr=reader.getpInitialData(result.initialDataSize);
        for(int FUremIn=0; FUremIn < result.initialDataSize; FUremIn++){
            [&](){((temp_MNyHoci.pInitialData)[FUremIn])=proto_arr[FUremIn];}();
        }
        }();(result.pInitialData)=temp_MNyHoci;}();(result.pInitialData)=temp_hSGagCA;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineCacheCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineCacheCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineCacheHeaderVersionOne::Builder& builder, VkPipelineCacheHeaderVersionOne member){
        
    
[&](){return builder.setheaderSize((member.headerSize));}();
[&](){[&](){[&](){return builder.setheaderVersion((member.headerVersion));}();}();}();
[&](){return builder.setvendorID((member.vendorID));}();
[&](){return builder.setdeviceID((member.deviceID));}();
[&](){
        auto proto_arr=builder.initpipelineCacheUUID();
        for(int pKnzMjr=0; pKnzMjr < VK_UUID_SIZE; pKnzMjr++){
            [&](){return proto_arr.set(pKnzMjr,((member.pipelineCacheUUID)[pKnzMjr]));}();
        }
        }();
}

    VkPipelineCacheHeaderVersionOne deserialize_struct(VkPipelineCacheHeaderVersionOne::Reader reader){
        auto result=VkPipelineCacheHeaderVersionOne();
    
[&](){(result.headerSize)=reader.getheaderSize();}();
[&](){[&](){[&](){(result.headerVersion)=reader.getheaderVersion();}();}();}();
[&](){(result.vendorID)=reader.getvendorID();}();
[&](){(result.deviceID)=reader.getdeviceID();}();
[&](){
        auto proto_arr=reader.getpipelineCacheUUID(VK_UUID_SIZE);
        for(int pKnzMjr=0; pKnzMjr < VK_UUID_SIZE; pKnzMjr++){
            [&](){((result.pipelineCacheUUID)[pKnzMjr])=proto_arr[pKnzMjr];}();
        }
        }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineCacheHeaderVersionOne member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineCacheHeaderVersionOne member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPushConstantRange::Builder& builder, VkPushConstantRange member){
        
    
[&](){[&](){[&](){return builder.setstageFlags((member.stageFlags));}();}();}();
[&](){return builder.setoffset((member.offset));}();
[&](){return builder.setsize((member.size));}();
}

    VkPushConstantRange deserialize_struct(VkPushConstantRange::Reader reader){
        auto result=VkPushConstantRange();
    
[&](){[&](){[&](){(result.stageFlags)=reader.getstageFlags();}();}();}();
[&](){(result.offset)=reader.getoffset();}();
[&](){(result.size)=reader.getsize();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPushConstantRange member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPushConstantRange member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineLayoutCreateInfo::Builder& builder, VkPipelineLayoutCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){return builder.setsetLayoutCount((member.setLayoutCount));}();
[&](){
            if ((member.pSetLayouts)==NULL){
                builder.disownpSetLayouts();
            return; }
        auto proto_arr=builder.initpSetLayouts();
        for(int gfILRjy=0; gfILRjy < member.setLayoutCount; gfILRjy++){
            [&](){return proto_arr.set(gfILRjy,serialize_handle((member.pSetLayouts)[gfILRjy]));}();
        }
        }();
[&](){return builder.setpushConstantRangeCount((member.pushConstantRangeCount));}();
[&](){
            if ((member.pPushConstantRanges)==NULL){
                builder.disownpPushConstantRanges();
            return; }
        auto proto_arr=builder.initpPushConstantRanges();
        for(int fStWwBo=0; fStWwBo < member.pushConstantRangeCount; fStWwBo++){
            [&](){
            auto temp=proto_arr[fStWwBo];
            return serialize_struct(((member.pPushConstantRanges)[fStWwBo]), temp);
            }();
        }
        }();
}

    VkPipelineLayoutCreateInfo deserialize_struct(VkPipelineLayoutCreateInfo::Reader reader){
        auto result=VkPipelineLayoutCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){(result.setLayoutCount)=reader.getsetLayoutCount();}();
[&](){ VkDescriptorSetLayout* temp_BHNAemT[&](){
            if (!reader.haspSetLayouts()){
                (result.pSetLayouts)=NULL;
            return; }{native_concat()}=(VkDescriptorSetLayout*)malloc(result.setLayoutCount*sizeof(VkDescriptorSetLayout));
        auto proto_arr=reader.getpSetLayouts(result.setLayoutCount);
        for(int kjCEeqP=0; kjCEeqP < result.setLayoutCount; kjCEeqP++){
            [&](){((result.pSetLayouts)[kjCEeqP])=deserialize_handle(proto_arr[kjCEeqP]);}();
        }
        }();(result.pSetLayouts)=temp_BHNAemT;}();
[&](){(result.pushConstantRangeCount)=reader.getpushConstantRangeCount();}();
[&](){ VkPushConstantRange* temp_HDcMeFk[&](){
            if (!reader.haspPushConstantRanges()){
                (result.pPushConstantRanges)=NULL;
            return; }{native_concat()}=(VkPushConstantRange*)malloc(result.pushConstantRangeCount*sizeof(VkPushConstantRange));
        auto proto_arr=reader.getpPushConstantRanges(result.pushConstantRangeCount);
        for(int xSoqBwb=0; xSoqBwb < result.pushConstantRangeCount; xSoqBwb++){
            [&](){
            auto temp=proto_arr[xSoqBwb];
            ((result.pPushConstantRanges)[xSoqBwb])=deserialize_struct(temp);
            }();
        }
        }();(result.pPushConstantRanges)=temp_HDcMeFk;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineLayoutCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineLayoutCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSamplerCreateInfo::Builder& builder, VkSamplerCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){[&](){[&](){return builder.setmagFilter((member.magFilter));}();}();}();
[&](){[&](){[&](){return builder.setminFilter((member.minFilter));}();}();}();
[&](){[&](){[&](){return builder.setmipmapMode((member.mipmapMode));}();}();}();
[&](){[&](){[&](){return builder.setaddressModeU((member.addressModeU));}();}();}();
[&](){[&](){[&](){return builder.setaddressModeV((member.addressModeV));}();}();}();
[&](){[&](){[&](){return builder.setaddressModeW((member.addressModeW));}();}();}();
[&](){return builder.setmipLodBias((member.mipLodBias));}();
[&](){[&](){return builder.setanisotropyEnable((member.anisotropyEnable));}();}();
[&](){return builder.setmaxAnisotropy((member.maxAnisotropy));}();
[&](){[&](){return builder.setcompareEnable((member.compareEnable));}();}();
[&](){[&](){[&](){return builder.setcompareOp((member.compareOp));}();}();}();
[&](){return builder.setminLod((member.minLod));}();
[&](){return builder.setmaxLod((member.maxLod));}();
[&](){[&](){[&](){return builder.setborderColor((member.borderColor));}();}();}();
[&](){[&](){return builder.setunnormalizedCoordinates((member.unnormalizedCoordinates));}();}();
}

    VkSamplerCreateInfo deserialize_struct(VkSamplerCreateInfo::Reader reader){
        auto result=VkSamplerCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){[&](){[&](){(result.magFilter)=reader.getmagFilter();}();}();}();
[&](){[&](){[&](){(result.minFilter)=reader.getminFilter();}();}();}();
[&](){[&](){[&](){(result.mipmapMode)=reader.getmipmapMode();}();}();}();
[&](){[&](){[&](){(result.addressModeU)=reader.getaddressModeU();}();}();}();
[&](){[&](){[&](){(result.addressModeV)=reader.getaddressModeV();}();}();}();
[&](){[&](){[&](){(result.addressModeW)=reader.getaddressModeW();}();}();}();
[&](){(result.mipLodBias)=reader.getmipLodBias();}();
[&](){[&](){(result.anisotropyEnable)=reader.getanisotropyEnable();}();}();
[&](){(result.maxAnisotropy)=reader.getmaxAnisotropy();}();
[&](){[&](){(result.compareEnable)=reader.getcompareEnable();}();}();
[&](){[&](){[&](){(result.compareOp)=reader.getcompareOp();}();}();}();
[&](){(result.minLod)=reader.getminLod();}();
[&](){(result.maxLod)=reader.getmaxLod();}();
[&](){[&](){[&](){(result.borderColor)=reader.getborderColor();}();}();}();
[&](){[&](){(result.unnormalizedCoordinates)=reader.getunnormalizedCoordinates();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSamplerCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSamplerCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkCommandPoolCreateInfo::Builder& builder, VkCommandPoolCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){return builder.setqueueFamilyIndex((member.queueFamilyIndex));}();
}

    VkCommandPoolCreateInfo deserialize_struct(VkCommandPoolCreateInfo::Reader reader){
        auto result=VkCommandPoolCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){(result.queueFamilyIndex)=reader.getqueueFamilyIndex();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkCommandPoolCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkCommandPoolCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkCommandBufferAllocateInfo::Builder& builder, VkCommandBufferAllocateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setcommandPool(serialize_handle(member.commandPool));}();
[&](){[&](){[&](){return builder.setlevel((member.level));}();}();}();
[&](){return builder.setcommandBufferCount((member.commandBufferCount));}();
}

    VkCommandBufferAllocateInfo deserialize_struct(VkCommandBufferAllocateInfo::Reader reader){
        auto result=VkCommandBufferAllocateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.commandPool)=deserialize_handle(reader.getcommandPool());}();
[&](){[&](){[&](){(result.level)=reader.getlevel();}();}();}();
[&](){(result.commandBufferCount)=reader.getcommandBufferCount();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkCommandBufferAllocateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkCommandBufferAllocateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkCommandBufferInheritanceInfo::Builder& builder, VkCommandBufferInheritanceInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setrenderPass(serialize_handle(member.renderPass));}();
[&](){return builder.setsubpass((member.subpass));}();
[&](){return builder.setframebuffer(serialize_handle(member.framebuffer));}();
[&](){[&](){return builder.setocclusionQueryEnable((member.occlusionQueryEnable));}();}();
[&](){[&](){[&](){return builder.setqueryFlags((member.queryFlags));}();}();}();
[&](){[&](){[&](){return builder.setpipelineStatistics((member.pipelineStatistics));}();}();}();
}

    VkCommandBufferInheritanceInfo deserialize_struct(VkCommandBufferInheritanceInfo::Reader reader){
        auto result=VkCommandBufferInheritanceInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.renderPass)=deserialize_handle(reader.getrenderPass());}();
[&](){(result.subpass)=reader.getsubpass();}();
[&](){(result.framebuffer)=deserialize_handle(reader.getframebuffer());}();
[&](){[&](){(result.occlusionQueryEnable)=reader.getocclusionQueryEnable();}();}();
[&](){[&](){[&](){(result.queryFlags)=reader.getqueryFlags();}();}();}();
[&](){[&](){[&](){(result.pipelineStatistics)=reader.getpipelineStatistics();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkCommandBufferInheritanceInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkCommandBufferInheritanceInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkCommandBufferBeginInfo::Builder& builder, VkCommandBufferBeginInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){
            if ((member.pInheritanceInfo)==NULL){
                builder.disownpInheritanceInfo();
            return; }
        auto proto_arr=builder.initpInheritanceInfo();
        for(int nFDfwwm=0; nFDfwwm < 1; nFDfwwm++){
            [&](){
            auto temp=proto_arr[nFDfwwm];
            return serialize_struct(((member.pInheritanceInfo)[nFDfwwm]), temp);
            }();
        }
        }();
}

    VkCommandBufferBeginInfo deserialize_struct(VkCommandBufferBeginInfo::Reader reader){
        auto result=VkCommandBufferBeginInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){ VkCommandBufferInheritanceInfo* temp_RaTTAdf[&](){
            if (!reader.haspInheritanceInfo()){
                (result.pInheritanceInfo)=NULL;
            return; }{native_concat()}=(VkCommandBufferInheritanceInfo*)malloc(1*sizeof(VkCommandBufferInheritanceInfo));
        auto proto_arr=reader.getpInheritanceInfo(1);
        for(int bbedYXd=0; bbedYXd < 1; bbedYXd++){
            [&](){
            auto temp=proto_arr[bbedYXd];
            ((result.pInheritanceInfo)[bbedYXd])=deserialize_struct(temp);
            }();
        }
        }();(result.pInheritanceInfo)=temp_RaTTAdf;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkCommandBufferBeginInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkCommandBufferBeginInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkRenderPassBeginInfo::Builder& builder, VkRenderPassBeginInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setrenderPass(serialize_handle(member.renderPass));}();
[&](){return builder.setframebuffer(serialize_handle(member.framebuffer));}();
[&](){
            auto temp=builder.initrenderArea(renderArea);
            return serialize_struct((member.renderArea), temp);
            }();
[&](){return builder.setclearValueCount((member.clearValueCount));}();
[&](){
            if ((member.pClearValues)==NULL){
                builder.disownpClearValues();
            return; }
        auto proto_arr=builder.initpClearValues();
        for(int qjoeTNt=0; qjoeTNt < member.clearValueCount; qjoeTNt++){
            [&](){
            auto temp=proto_arr[qjoeTNt];
            return serialize_struct(((member.pClearValues)[qjoeTNt]), temp);
            }();
        }
        }();
}

    VkRenderPassBeginInfo deserialize_struct(VkRenderPassBeginInfo::Reader reader){
        auto result=VkRenderPassBeginInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.renderPass)=deserialize_handle(reader.getrenderPass());}();
[&](){(result.framebuffer)=deserialize_handle(reader.getframebuffer());}();
[&](){
            auto temp=reader.getrenderArea();
            (result.renderArea)=deserialize_struct(temp);
            }();
[&](){(result.clearValueCount)=reader.getclearValueCount();}();
[&](){ VkClearValue* temp_pmVQpow[&](){
            if (!reader.haspClearValues()){
                (result.pClearValues)=NULL;
            return; }{native_concat()}=(VkClearValue*)malloc(result.clearValueCount*sizeof(VkClearValue));
        auto proto_arr=reader.getpClearValues(result.clearValueCount);
        for(int rHsxouv=0; rHsxouv < result.clearValueCount; rHsxouv++){
            [&](){
            auto temp=proto_arr[rHsxouv];
            ((result.pClearValues)[rHsxouv])=deserialize_struct(temp);
            }();
        }
        }();(result.pClearValues)=temp_pmVQpow;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkRenderPassBeginInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkRenderPassBeginInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkClearColorValue::Builder& builder, VkClearColorValue member){
        
    
[&](){
        auto proto_arr=builder.initfloat32();
        for(int kwfNrBt=0; kwfNrBt < 4; kwfNrBt++){
            [&](){return proto_arr.set(kwfNrBt,((member.float32)[kwfNrBt]));}();
        }
        }();
[&](){
        auto proto_arr=builder.initint32();
        for(int JWnmMeC=0; JWnmMeC < 4; JWnmMeC++){
            [&](){return proto_arr.set(JWnmMeC,((member.int32)[JWnmMeC]));}();
        }
        }();
[&](){
        auto proto_arr=builder.inituint32();
        for(int vckpinK=0; vckpinK < 4; vckpinK++){
            [&](){return proto_arr.set(vckpinK,((member.uint32)[vckpinK]));}();
        }
        }();
}

    VkClearColorValue deserialize_struct(VkClearColorValue::Reader reader){
        auto result=VkClearColorValue();
    
[&](){
        auto proto_arr=reader.getfloat32(4);
        for(int kwfNrBt=0; kwfNrBt < 4; kwfNrBt++){
            [&](){((result.float32)[kwfNrBt])=proto_arr[kwfNrBt];}();
        }
        }();
[&](){
        auto proto_arr=reader.getint32(4);
        for(int JWnmMeC=0; JWnmMeC < 4; JWnmMeC++){
            [&](){((result.int32)[JWnmMeC])=proto_arr[JWnmMeC];}();
        }
        }();
[&](){
        auto proto_arr=reader.getuint32(4);
        for(int vckpinK=0; vckpinK < 4; vckpinK++){
            [&](){((result.uint32)[vckpinK])=proto_arr[vckpinK];}();
        }
        }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkClearColorValue member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkClearColorValue member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkClearDepthStencilValue::Builder& builder, VkClearDepthStencilValue member){
        
    
[&](){return builder.setdepth((member.depth));}();
[&](){return builder.setstencil((member.stencil));}();
}

    VkClearDepthStencilValue deserialize_struct(VkClearDepthStencilValue::Reader reader){
        auto result=VkClearDepthStencilValue();
    
[&](){(result.depth)=reader.getdepth();}();
[&](){(result.stencil)=reader.getstencil();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkClearDepthStencilValue member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkClearDepthStencilValue member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkClearValue::Builder& builder, VkClearValue member){
        
    
[&](){
            auto temp=builder.initcolor(color);
            return serialize_struct((member.color), temp);
            }();
[&](){
            auto temp=builder.initdepthStencil(depthStencil);
            return serialize_struct((member.depthStencil), temp);
            }();
}

    VkClearValue deserialize_struct(VkClearValue::Reader reader){
        auto result=VkClearValue();
    
[&](){
            auto temp=reader.getcolor();
            (result.color)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getdepthStencil();
            (result.depthStencil)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkClearValue member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkClearValue member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkClearAttachment::Builder& builder, VkClearAttachment member){
        
    
[&](){[&](){[&](){return builder.setaspectMask((member.aspectMask));}();}();}();
[&](){return builder.setcolorAttachment((member.colorAttachment));}();
[&](){
            auto temp=builder.initclearValue(clearValue);
            return serialize_struct((member.clearValue), temp);
            }();
}

    VkClearAttachment deserialize_struct(VkClearAttachment::Reader reader){
        auto result=VkClearAttachment();
    
[&](){[&](){[&](){(result.aspectMask)=reader.getaspectMask();}();}();}();
[&](){(result.colorAttachment)=reader.getcolorAttachment();}();
[&](){
            auto temp=reader.getclearValue();
            (result.clearValue)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkClearAttachment member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkClearAttachment member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkAttachmentDescription::Builder& builder, VkAttachmentDescription member){
        
    
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){[&](){[&](){return builder.setformat((member.format));}();}();}();
[&](){[&](){[&](){return builder.setsamples((member.samples));}();}();}();
[&](){[&](){[&](){return builder.setloadOp((member.loadOp));}();}();}();
[&](){[&](){[&](){return builder.setstoreOp((member.storeOp));}();}();}();
[&](){[&](){[&](){return builder.setstencilLoadOp((member.stencilLoadOp));}();}();}();
[&](){[&](){[&](){return builder.setstencilStoreOp((member.stencilStoreOp));}();}();}();
[&](){[&](){[&](){return builder.setinitialLayout((member.initialLayout));}();}();}();
[&](){[&](){[&](){return builder.setfinalLayout((member.finalLayout));}();}();}();
}

    VkAttachmentDescription deserialize_struct(VkAttachmentDescription::Reader reader){
        auto result=VkAttachmentDescription();
    
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){[&](){[&](){(result.format)=reader.getformat();}();}();}();
[&](){[&](){[&](){(result.samples)=reader.getsamples();}();}();}();
[&](){[&](){[&](){(result.loadOp)=reader.getloadOp();}();}();}();
[&](){[&](){[&](){(result.storeOp)=reader.getstoreOp();}();}();}();
[&](){[&](){[&](){(result.stencilLoadOp)=reader.getstencilLoadOp();}();}();}();
[&](){[&](){[&](){(result.stencilStoreOp)=reader.getstencilStoreOp();}();}();}();
[&](){[&](){[&](){(result.initialLayout)=reader.getinitialLayout();}();}();}();
[&](){[&](){[&](){(result.finalLayout)=reader.getfinalLayout();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkAttachmentDescription member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkAttachmentDescription member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkAttachmentReference::Builder& builder, VkAttachmentReference member){
        
    
[&](){return builder.setattachment((member.attachment));}();
[&](){[&](){[&](){return builder.setlayout((member.layout));}();}();}();
}

    VkAttachmentReference deserialize_struct(VkAttachmentReference::Reader reader){
        auto result=VkAttachmentReference();
    
[&](){(result.attachment)=reader.getattachment();}();
[&](){[&](){[&](){(result.layout)=reader.getlayout();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkAttachmentReference member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkAttachmentReference member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSubpassDescription::Builder& builder, VkSubpassDescription member){
        
    
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){[&](){[&](){return builder.setpipelineBindPoint((member.pipelineBindPoint));}();}();}();
[&](){return builder.setinputAttachmentCount((member.inputAttachmentCount));}();
[&](){
            if ((member.pInputAttachments)==NULL){
                builder.disownpInputAttachments();
            return; }
        auto proto_arr=builder.initpInputAttachments();
        for(int lYXnngK=0; lYXnngK < member.inputAttachmentCount; lYXnngK++){
            [&](){
            auto temp=proto_arr[lYXnngK];
            return serialize_struct(((member.pInputAttachments)[lYXnngK]), temp);
            }();
        }
        }();
[&](){return builder.setcolorAttachmentCount((member.colorAttachmentCount));}();
[&](){
            if ((member.pColorAttachments)==NULL){
                builder.disownpColorAttachments();
            return; }
        auto proto_arr=builder.initpColorAttachments();
        for(int oXMIDJx=0; oXMIDJx < member.colorAttachmentCount; oXMIDJx++){
            [&](){
            auto temp=proto_arr[oXMIDJx];
            return serialize_struct(((member.pColorAttachments)[oXMIDJx]), temp);
            }();
        }
        }();
[&](){
            if ((member.pResolveAttachments)==NULL){
                builder.disownpResolveAttachments();
            return; }
        auto proto_arr=builder.initpResolveAttachments();
        for(int KAJKvdn=0; KAJKvdn < member.colorAttachmentCount; KAJKvdn++){
            [&](){
            auto temp=proto_arr[KAJKvdn];
            return serialize_struct(((member.pResolveAttachments)[KAJKvdn]), temp);
            }();
        }
        }();
[&](){
            if ((member.pDepthStencilAttachment)==NULL){
                builder.disownpDepthStencilAttachment();
            return; }
        auto proto_arr=builder.initpDepthStencilAttachment();
        for(int FMSqhkQ=0; FMSqhkQ < 1; FMSqhkQ++){
            [&](){
            auto temp=proto_arr[FMSqhkQ];
            return serialize_struct(((member.pDepthStencilAttachment)[FMSqhkQ]), temp);
            }();
        }
        }();
[&](){return builder.setpreserveAttachmentCount((member.preserveAttachmentCount));}();
[&](){
            if ((member.pPreserveAttachments)==NULL){
                builder.disownpPreserveAttachments();
            return; }
        auto proto_arr=builder.initpPreserveAttachments();
        for(int OunTLoO=0; OunTLoO < member.preserveAttachmentCount; OunTLoO++){
            [&](){return proto_arr.set(OunTLoO,((member.pPreserveAttachments)[OunTLoO]));}();
        }
        }();
}

    VkSubpassDescription deserialize_struct(VkSubpassDescription::Reader reader){
        auto result=VkSubpassDescription();
    
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){[&](){[&](){(result.pipelineBindPoint)=reader.getpipelineBindPoint();}();}();}();
[&](){(result.inputAttachmentCount)=reader.getinputAttachmentCount();}();
[&](){ VkAttachmentReference* temp_dLMhQtL[&](){
            if (!reader.haspInputAttachments()){
                (result.pInputAttachments)=NULL;
            return; }{native_concat()}=(VkAttachmentReference*)malloc(result.inputAttachmentCount*sizeof(VkAttachmentReference));
        auto proto_arr=reader.getpInputAttachments(result.inputAttachmentCount);
        for(int NTiwIDl=0; NTiwIDl < result.inputAttachmentCount; NTiwIDl++){
            [&](){
            auto temp=proto_arr[NTiwIDl];
            ((result.pInputAttachments)[NTiwIDl])=deserialize_struct(temp);
            }();
        }
        }();(result.pInputAttachments)=temp_dLMhQtL;}();
[&](){(result.colorAttachmentCount)=reader.getcolorAttachmentCount();}();
[&](){ VkAttachmentReference* temp_FKySUeI[&](){
            if (!reader.haspColorAttachments()){
                (result.pColorAttachments)=NULL;
            return; }{native_concat()}=(VkAttachmentReference*)malloc(result.colorAttachmentCount*sizeof(VkAttachmentReference));
        auto proto_arr=reader.getpColorAttachments(result.colorAttachmentCount);
        for(int PRkPOeb=0; PRkPOeb < result.colorAttachmentCount; PRkPOeb++){
            [&](){
            auto temp=proto_arr[PRkPOeb];
            ((result.pColorAttachments)[PRkPOeb])=deserialize_struct(temp);
            }();
        }
        }();(result.pColorAttachments)=temp_FKySUeI;}();
[&](){ VkAttachmentReference* temp_JvthOEG[&](){
            if (!reader.haspResolveAttachments()){
                (result.pResolveAttachments)=NULL;
            return; }{native_concat()}=(VkAttachmentReference*)malloc(result.colorAttachmentCount*sizeof(VkAttachmentReference));
        auto proto_arr=reader.getpResolveAttachments(result.colorAttachmentCount);
        for(int OMbGyuZ=0; OMbGyuZ < result.colorAttachmentCount; OMbGyuZ++){
            [&](){
            auto temp=proto_arr[OMbGyuZ];
            ((result.pResolveAttachments)[OMbGyuZ])=deserialize_struct(temp);
            }();
        }
        }();(result.pResolveAttachments)=temp_JvthOEG;}();
[&](){ VkAttachmentReference* temp_qvfNzlt[&](){
            if (!reader.haspDepthStencilAttachment()){
                (result.pDepthStencilAttachment)=NULL;
            return; }{native_concat()}=(VkAttachmentReference*)malloc(1*sizeof(VkAttachmentReference));
        auto proto_arr=reader.getpDepthStencilAttachment(1);
        for(int WEtsSUr=0; WEtsSUr < 1; WEtsSUr++){
            [&](){
            auto temp=proto_arr[WEtsSUr];
            ((result.pDepthStencilAttachment)[WEtsSUr])=deserialize_struct(temp);
            }();
        }
        }();(result.pDepthStencilAttachment)=temp_qvfNzlt;}();
[&](){(result.preserveAttachmentCount)=reader.getpreserveAttachmentCount();}();
[&](){ uint32_t* temp_OBPkkNN[&](){
            if (!reader.haspPreserveAttachments()){
                (result.pPreserveAttachments)=NULL;
            return; }{native_concat()}=(uint32_t*)malloc(result.preserveAttachmentCount*sizeof(uint32_t));
        auto proto_arr=reader.getpPreserveAttachments(result.preserveAttachmentCount);
        for(int Ucaahng=0; Ucaahng < result.preserveAttachmentCount; Ucaahng++){
            [&](){((result.pPreserveAttachments)[Ucaahng])=proto_arr[Ucaahng];}();
        }
        }();(result.pPreserveAttachments)=temp_OBPkkNN;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSubpassDescription member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSubpassDescription member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSubpassDependency::Builder& builder, VkSubpassDependency member){
        
    
[&](){return builder.setsrcSubpass((member.srcSubpass));}();
[&](){return builder.setdstSubpass((member.dstSubpass));}();
[&](){[&](){[&](){return builder.setsrcStageMask((member.srcStageMask));}();}();}();
[&](){[&](){[&](){return builder.setdstStageMask((member.dstStageMask));}();}();}();
[&](){[&](){[&](){return builder.setsrcAccessMask((member.srcAccessMask));}();}();}();
[&](){[&](){[&](){return builder.setdstAccessMask((member.dstAccessMask));}();}();}();
[&](){[&](){[&](){return builder.setdependencyFlags((member.dependencyFlags));}();}();}();
}

    VkSubpassDependency deserialize_struct(VkSubpassDependency::Reader reader){
        auto result=VkSubpassDependency();
    
[&](){(result.srcSubpass)=reader.getsrcSubpass();}();
[&](){(result.dstSubpass)=reader.getdstSubpass();}();
[&](){[&](){[&](){(result.srcStageMask)=reader.getsrcStageMask();}();}();}();
[&](){[&](){[&](){(result.dstStageMask)=reader.getdstStageMask();}();}();}();
[&](){[&](){[&](){(result.srcAccessMask)=reader.getsrcAccessMask();}();}();}();
[&](){[&](){[&](){(result.dstAccessMask)=reader.getdstAccessMask();}();}();}();
[&](){[&](){[&](){(result.dependencyFlags)=reader.getdependencyFlags();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSubpassDependency member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSubpassDependency member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkRenderPassCreateInfo::Builder& builder, VkRenderPassCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){return builder.setattachmentCount((member.attachmentCount));}();
[&](){
            if ((member.pAttachments)==NULL){
                builder.disownpAttachments();
            return; }
        auto proto_arr=builder.initpAttachments();
        for(int rqvexer=0; rqvexer < member.attachmentCount; rqvexer++){
            [&](){
            auto temp=proto_arr[rqvexer];
            return serialize_struct(((member.pAttachments)[rqvexer]), temp);
            }();
        }
        }();
[&](){return builder.setsubpassCount((member.subpassCount));}();
[&](){
            if ((member.pSubpasses)==NULL){
                builder.disownpSubpasses();
            return; }
        auto proto_arr=builder.initpSubpasses();
        for(int lBvQvxn=0; lBvQvxn < member.subpassCount; lBvQvxn++){
            [&](){
            auto temp=proto_arr[lBvQvxn];
            return serialize_struct(((member.pSubpasses)[lBvQvxn]), temp);
            }();
        }
        }();
[&](){return builder.setdependencyCount((member.dependencyCount));}();
[&](){
            if ((member.pDependencies)==NULL){
                builder.disownpDependencies();
            return; }
        auto proto_arr=builder.initpDependencies();
        for(int HytQjIJ=0; HytQjIJ < member.dependencyCount; HytQjIJ++){
            [&](){
            auto temp=proto_arr[HytQjIJ];
            return serialize_struct(((member.pDependencies)[HytQjIJ]), temp);
            }();
        }
        }();
}

    VkRenderPassCreateInfo deserialize_struct(VkRenderPassCreateInfo::Reader reader){
        auto result=VkRenderPassCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){(result.attachmentCount)=reader.getattachmentCount();}();
[&](){ VkAttachmentDescription* temp_gYBfaDU[&](){
            if (!reader.haspAttachments()){
                (result.pAttachments)=NULL;
            return; }{native_concat()}=(VkAttachmentDescription*)malloc(result.attachmentCount*sizeof(VkAttachmentDescription));
        auto proto_arr=reader.getpAttachments(result.attachmentCount);
        for(int LpvwhqR=0; LpvwhqR < result.attachmentCount; LpvwhqR++){
            [&](){
            auto temp=proto_arr[LpvwhqR];
            ((result.pAttachments)[LpvwhqR])=deserialize_struct(temp);
            }();
        }
        }();(result.pAttachments)=temp_gYBfaDU;}();
[&](){(result.subpassCount)=reader.getsubpassCount();}();
[&](){ VkSubpassDescription* temp_OdWUxSz[&](){
            if (!reader.haspSubpasses()){
                (result.pSubpasses)=NULL;
            return; }{native_concat()}=(VkSubpassDescription*)malloc(result.subpassCount*sizeof(VkSubpassDescription));
        auto proto_arr=reader.getpSubpasses(result.subpassCount);
        for(int QKYCKrd=0; QKYCKrd < result.subpassCount; QKYCKrd++){
            [&](){
            auto temp=proto_arr[QKYCKrd];
            ((result.pSubpasses)[QKYCKrd])=deserialize_struct(temp);
            }();
        }
        }();(result.pSubpasses)=temp_OdWUxSz;}();
[&](){(result.dependencyCount)=reader.getdependencyCount();}();
[&](){ VkSubpassDependency* temp_hXRdLOq[&](){
            if (!reader.haspDependencies()){
                (result.pDependencies)=NULL;
            return; }{native_concat()}=(VkSubpassDependency*)malloc(result.dependencyCount*sizeof(VkSubpassDependency));
        auto proto_arr=reader.getpDependencies(result.dependencyCount);
        for(int ABYVeAV=0; ABYVeAV < result.dependencyCount; ABYVeAV++){
            [&](){
            auto temp=proto_arr[ABYVeAV];
            ((result.pDependencies)[ABYVeAV])=deserialize_struct(temp);
            }();
        }
        }();(result.pDependencies)=temp_hXRdLOq;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkRenderPassCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkRenderPassCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkEventCreateInfo::Builder& builder, VkEventCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
}

    VkEventCreateInfo deserialize_struct(VkEventCreateInfo::Reader reader){
        auto result=VkEventCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkEventCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkEventCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkFenceCreateInfo::Builder& builder, VkFenceCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
}

    VkFenceCreateInfo deserialize_struct(VkFenceCreateInfo::Reader reader){
        auto result=VkFenceCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkFenceCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkFenceCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceFeatures::Builder& builder, VkPhysicalDeviceFeatures member){
        
    
[&](){[&](){return builder.setrobustBufferAccess((member.robustBufferAccess));}();}();
[&](){[&](){return builder.setfullDrawIndexUint32((member.fullDrawIndexUint32));}();}();
[&](){[&](){return builder.setimageCubeArray((member.imageCubeArray));}();}();
[&](){[&](){return builder.setindependentBlend((member.independentBlend));}();}();
[&](){[&](){return builder.setgeometryShader((member.geometryShader));}();}();
[&](){[&](){return builder.settessellationShader((member.tessellationShader));}();}();
[&](){[&](){return builder.setsampleRateShading((member.sampleRateShading));}();}();
[&](){[&](){return builder.setdualSrcBlend((member.dualSrcBlend));}();}();
[&](){[&](){return builder.setlogicOp((member.logicOp));}();}();
[&](){[&](){return builder.setmultiDrawIndirect((member.multiDrawIndirect));}();}();
[&](){[&](){return builder.setdrawIndirectFirstInstance((member.drawIndirectFirstInstance));}();}();
[&](){[&](){return builder.setdepthClamp((member.depthClamp));}();}();
[&](){[&](){return builder.setdepthBiasClamp((member.depthBiasClamp));}();}();
[&](){[&](){return builder.setfillModeNonSolid((member.fillModeNonSolid));}();}();
[&](){[&](){return builder.setdepthBounds((member.depthBounds));}();}();
[&](){[&](){return builder.setwideLines((member.wideLines));}();}();
[&](){[&](){return builder.setlargePoints((member.largePoints));}();}();
[&](){[&](){return builder.setalphaToOne((member.alphaToOne));}();}();
[&](){[&](){return builder.setmultiViewport((member.multiViewport));}();}();
[&](){[&](){return builder.setsamplerAnisotropy((member.samplerAnisotropy));}();}();
[&](){[&](){return builder.settextureCompressionETC2((member.textureCompressionETC2));}();}();
[&](){[&](){return builder.settextureCompressionASTC_LDR((member.textureCompressionASTC_LDR));}();}();
[&](){[&](){return builder.settextureCompressionBC((member.textureCompressionBC));}();}();
[&](){[&](){return builder.setocclusionQueryPrecise((member.occlusionQueryPrecise));}();}();
[&](){[&](){return builder.setpipelineStatisticsQuery((member.pipelineStatisticsQuery));}();}();
[&](){[&](){return builder.setvertexPipelineStoresAndAtomics((member.vertexPipelineStoresAndAtomics));}();}();
[&](){[&](){return builder.setfragmentStoresAndAtomics((member.fragmentStoresAndAtomics));}();}();
[&](){[&](){return builder.setshaderTessellationAndGeometryPointSize((member.shaderTessellationAndGeometryPointSize));}();}();
[&](){[&](){return builder.setshaderImageGatherExtended((member.shaderImageGatherExtended));}();}();
[&](){[&](){return builder.setshaderStorageImageExtendedFormats((member.shaderStorageImageExtendedFormats));}();}();
[&](){[&](){return builder.setshaderStorageImageMultisample((member.shaderStorageImageMultisample));}();}();
[&](){[&](){return builder.setshaderStorageImageReadWithoutFormat((member.shaderStorageImageReadWithoutFormat));}();}();
[&](){[&](){return builder.setshaderStorageImageWriteWithoutFormat((member.shaderStorageImageWriteWithoutFormat));}();}();
[&](){[&](){return builder.setshaderUniformBufferArrayDynamicIndexing((member.shaderUniformBufferArrayDynamicIndexing));}();}();
[&](){[&](){return builder.setshaderSampledImageArrayDynamicIndexing((member.shaderSampledImageArrayDynamicIndexing));}();}();
[&](){[&](){return builder.setshaderStorageBufferArrayDynamicIndexing((member.shaderStorageBufferArrayDynamicIndexing));}();}();
[&](){[&](){return builder.setshaderStorageImageArrayDynamicIndexing((member.shaderStorageImageArrayDynamicIndexing));}();}();
[&](){[&](){return builder.setshaderClipDistance((member.shaderClipDistance));}();}();
[&](){[&](){return builder.setshaderCullDistance((member.shaderCullDistance));}();}();
[&](){[&](){return builder.setshaderFloat64((member.shaderFloat64));}();}();
[&](){[&](){return builder.setshaderInt64((member.shaderInt64));}();}();
[&](){[&](){return builder.setshaderInt16((member.shaderInt16));}();}();
[&](){[&](){return builder.setshaderResourceResidency((member.shaderResourceResidency));}();}();
[&](){[&](){return builder.setshaderResourceMinLod((member.shaderResourceMinLod));}();}();
[&](){[&](){return builder.setsparseBinding((member.sparseBinding));}();}();
[&](){[&](){return builder.setsparseResidencyBuffer((member.sparseResidencyBuffer));}();}();
[&](){[&](){return builder.setsparseResidencyImage2D((member.sparseResidencyImage2D));}();}();
[&](){[&](){return builder.setsparseResidencyImage3D((member.sparseResidencyImage3D));}();}();
[&](){[&](){return builder.setsparseResidency2Samples((member.sparseResidency2Samples));}();}();
[&](){[&](){return builder.setsparseResidency4Samples((member.sparseResidency4Samples));}();}();
[&](){[&](){return builder.setsparseResidency8Samples((member.sparseResidency8Samples));}();}();
[&](){[&](){return builder.setsparseResidency16Samples((member.sparseResidency16Samples));}();}();
[&](){[&](){return builder.setsparseResidencyAliased((member.sparseResidencyAliased));}();}();
[&](){[&](){return builder.setvariableMultisampleRate((member.variableMultisampleRate));}();}();
[&](){[&](){return builder.setinheritedQueries((member.inheritedQueries));}();}();
}

    VkPhysicalDeviceFeatures deserialize_struct(VkPhysicalDeviceFeatures::Reader reader){
        auto result=VkPhysicalDeviceFeatures();
    
[&](){[&](){(result.robustBufferAccess)=reader.getrobustBufferAccess();}();}();
[&](){[&](){(result.fullDrawIndexUint32)=reader.getfullDrawIndexUint32();}();}();
[&](){[&](){(result.imageCubeArray)=reader.getimageCubeArray();}();}();
[&](){[&](){(result.independentBlend)=reader.getindependentBlend();}();}();
[&](){[&](){(result.geometryShader)=reader.getgeometryShader();}();}();
[&](){[&](){(result.tessellationShader)=reader.gettessellationShader();}();}();
[&](){[&](){(result.sampleRateShading)=reader.getsampleRateShading();}();}();
[&](){[&](){(result.dualSrcBlend)=reader.getdualSrcBlend();}();}();
[&](){[&](){(result.logicOp)=reader.getlogicOp();}();}();
[&](){[&](){(result.multiDrawIndirect)=reader.getmultiDrawIndirect();}();}();
[&](){[&](){(result.drawIndirectFirstInstance)=reader.getdrawIndirectFirstInstance();}();}();
[&](){[&](){(result.depthClamp)=reader.getdepthClamp();}();}();
[&](){[&](){(result.depthBiasClamp)=reader.getdepthBiasClamp();}();}();
[&](){[&](){(result.fillModeNonSolid)=reader.getfillModeNonSolid();}();}();
[&](){[&](){(result.depthBounds)=reader.getdepthBounds();}();}();
[&](){[&](){(result.wideLines)=reader.getwideLines();}();}();
[&](){[&](){(result.largePoints)=reader.getlargePoints();}();}();
[&](){[&](){(result.alphaToOne)=reader.getalphaToOne();}();}();
[&](){[&](){(result.multiViewport)=reader.getmultiViewport();}();}();
[&](){[&](){(result.samplerAnisotropy)=reader.getsamplerAnisotropy();}();}();
[&](){[&](){(result.textureCompressionETC2)=reader.gettextureCompressionETC2();}();}();
[&](){[&](){(result.textureCompressionASTC_LDR)=reader.gettextureCompressionASTC_LDR();}();}();
[&](){[&](){(result.textureCompressionBC)=reader.gettextureCompressionBC();}();}();
[&](){[&](){(result.occlusionQueryPrecise)=reader.getocclusionQueryPrecise();}();}();
[&](){[&](){(result.pipelineStatisticsQuery)=reader.getpipelineStatisticsQuery();}();}();
[&](){[&](){(result.vertexPipelineStoresAndAtomics)=reader.getvertexPipelineStoresAndAtomics();}();}();
[&](){[&](){(result.fragmentStoresAndAtomics)=reader.getfragmentStoresAndAtomics();}();}();
[&](){[&](){(result.shaderTessellationAndGeometryPointSize)=reader.getshaderTessellationAndGeometryPointSize();}();}();
[&](){[&](){(result.shaderImageGatherExtended)=reader.getshaderImageGatherExtended();}();}();
[&](){[&](){(result.shaderStorageImageExtendedFormats)=reader.getshaderStorageImageExtendedFormats();}();}();
[&](){[&](){(result.shaderStorageImageMultisample)=reader.getshaderStorageImageMultisample();}();}();
[&](){[&](){(result.shaderStorageImageReadWithoutFormat)=reader.getshaderStorageImageReadWithoutFormat();}();}();
[&](){[&](){(result.shaderStorageImageWriteWithoutFormat)=reader.getshaderStorageImageWriteWithoutFormat();}();}();
[&](){[&](){(result.shaderUniformBufferArrayDynamicIndexing)=reader.getshaderUniformBufferArrayDynamicIndexing();}();}();
[&](){[&](){(result.shaderSampledImageArrayDynamicIndexing)=reader.getshaderSampledImageArrayDynamicIndexing();}();}();
[&](){[&](){(result.shaderStorageBufferArrayDynamicIndexing)=reader.getshaderStorageBufferArrayDynamicIndexing();}();}();
[&](){[&](){(result.shaderStorageImageArrayDynamicIndexing)=reader.getshaderStorageImageArrayDynamicIndexing();}();}();
[&](){[&](){(result.shaderClipDistance)=reader.getshaderClipDistance();}();}();
[&](){[&](){(result.shaderCullDistance)=reader.getshaderCullDistance();}();}();
[&](){[&](){(result.shaderFloat64)=reader.getshaderFloat64();}();}();
[&](){[&](){(result.shaderInt64)=reader.getshaderInt64();}();}();
[&](){[&](){(result.shaderInt16)=reader.getshaderInt16();}();}();
[&](){[&](){(result.shaderResourceResidency)=reader.getshaderResourceResidency();}();}();
[&](){[&](){(result.shaderResourceMinLod)=reader.getshaderResourceMinLod();}();}();
[&](){[&](){(result.sparseBinding)=reader.getsparseBinding();}();}();
[&](){[&](){(result.sparseResidencyBuffer)=reader.getsparseResidencyBuffer();}();}();
[&](){[&](){(result.sparseResidencyImage2D)=reader.getsparseResidencyImage2D();}();}();
[&](){[&](){(result.sparseResidencyImage3D)=reader.getsparseResidencyImage3D();}();}();
[&](){[&](){(result.sparseResidency2Samples)=reader.getsparseResidency2Samples();}();}();
[&](){[&](){(result.sparseResidency4Samples)=reader.getsparseResidency4Samples();}();}();
[&](){[&](){(result.sparseResidency8Samples)=reader.getsparseResidency8Samples();}();}();
[&](){[&](){(result.sparseResidency16Samples)=reader.getsparseResidency16Samples();}();}();
[&](){[&](){(result.sparseResidencyAliased)=reader.getsparseResidencyAliased();}();}();
[&](){[&](){(result.variableMultisampleRate)=reader.getvariableMultisampleRate();}();}();
[&](){[&](){(result.inheritedQueries)=reader.getinheritedQueries();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceFeatures member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceFeatures member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceSparseProperties::Builder& builder, VkPhysicalDeviceSparseProperties member){
        
    
[&](){[&](){return builder.setresidencyStandard2DBlockShape((member.residencyStandard2DBlockShape));}();}();
[&](){[&](){return builder.setresidencyStandard2DMultisampleBlockShape((member.residencyStandard2DMultisampleBlockShape));}();}();
[&](){[&](){return builder.setresidencyStandard3DBlockShape((member.residencyStandard3DBlockShape));}();}();
[&](){[&](){return builder.setresidencyAlignedMipSize((member.residencyAlignedMipSize));}();}();
[&](){[&](){return builder.setresidencyNonResidentStrict((member.residencyNonResidentStrict));}();}();
}

    VkPhysicalDeviceSparseProperties deserialize_struct(VkPhysicalDeviceSparseProperties::Reader reader){
        auto result=VkPhysicalDeviceSparseProperties();
    
[&](){[&](){(result.residencyStandard2DBlockShape)=reader.getresidencyStandard2DBlockShape();}();}();
[&](){[&](){(result.residencyStandard2DMultisampleBlockShape)=reader.getresidencyStandard2DMultisampleBlockShape();}();}();
[&](){[&](){(result.residencyStandard3DBlockShape)=reader.getresidencyStandard3DBlockShape();}();}();
[&](){[&](){(result.residencyAlignedMipSize)=reader.getresidencyAlignedMipSize();}();}();
[&](){[&](){(result.residencyNonResidentStrict)=reader.getresidencyNonResidentStrict();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceSparseProperties member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceSparseProperties member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceLimits::Builder& builder, VkPhysicalDeviceLimits member){
        
    
[&](){return builder.setmaxImageDimension1D((member.maxImageDimension1D));}();
[&](){return builder.setmaxImageDimension2D((member.maxImageDimension2D));}();
[&](){return builder.setmaxImageDimension3D((member.maxImageDimension3D));}();
[&](){return builder.setmaxImageDimensionCube((member.maxImageDimensionCube));}();
[&](){return builder.setmaxImageArrayLayers((member.maxImageArrayLayers));}();
[&](){return builder.setmaxTexelBufferElements((member.maxTexelBufferElements));}();
[&](){return builder.setmaxUniformBufferRange((member.maxUniformBufferRange));}();
[&](){return builder.setmaxStorageBufferRange((member.maxStorageBufferRange));}();
[&](){return builder.setmaxPushConstantsSize((member.maxPushConstantsSize));}();
[&](){return builder.setmaxMemoryAllocationCount((member.maxMemoryAllocationCount));}();
[&](){return builder.setmaxSamplerAllocationCount((member.maxSamplerAllocationCount));}();
[&](){[&](){return builder.setbufferImageGranularity((member.bufferImageGranularity));}();}();
[&](){[&](){return builder.setsparseAddressSpaceSize((member.sparseAddressSpaceSize));}();}();
[&](){return builder.setmaxBoundDescriptorSets((member.maxBoundDescriptorSets));}();
[&](){return builder.setmaxPerStageDescriptorSamplers((member.maxPerStageDescriptorSamplers));}();
[&](){return builder.setmaxPerStageDescriptorUniformBuffers((member.maxPerStageDescriptorUniformBuffers));}();
[&](){return builder.setmaxPerStageDescriptorStorageBuffers((member.maxPerStageDescriptorStorageBuffers));}();
[&](){return builder.setmaxPerStageDescriptorSampledImages((member.maxPerStageDescriptorSampledImages));}();
[&](){return builder.setmaxPerStageDescriptorStorageImages((member.maxPerStageDescriptorStorageImages));}();
[&](){return builder.setmaxPerStageDescriptorInputAttachments((member.maxPerStageDescriptorInputAttachments));}();
[&](){return builder.setmaxPerStageResources((member.maxPerStageResources));}();
[&](){return builder.setmaxDescriptorSetSamplers((member.maxDescriptorSetSamplers));}();
[&](){return builder.setmaxDescriptorSetUniformBuffers((member.maxDescriptorSetUniformBuffers));}();
[&](){return builder.setmaxDescriptorSetUniformBuffersDynamic((member.maxDescriptorSetUniformBuffersDynamic));}();
[&](){return builder.setmaxDescriptorSetStorageBuffers((member.maxDescriptorSetStorageBuffers));}();
[&](){return builder.setmaxDescriptorSetStorageBuffersDynamic((member.maxDescriptorSetStorageBuffersDynamic));}();
[&](){return builder.setmaxDescriptorSetSampledImages((member.maxDescriptorSetSampledImages));}();
[&](){return builder.setmaxDescriptorSetStorageImages((member.maxDescriptorSetStorageImages));}();
[&](){return builder.setmaxDescriptorSetInputAttachments((member.maxDescriptorSetInputAttachments));}();
[&](){return builder.setmaxVertexInputAttributes((member.maxVertexInputAttributes));}();
[&](){return builder.setmaxVertexInputBindings((member.maxVertexInputBindings));}();
[&](){return builder.setmaxVertexInputAttributeOffset((member.maxVertexInputAttributeOffset));}();
[&](){return builder.setmaxVertexInputBindingStride((member.maxVertexInputBindingStride));}();
[&](){return builder.setmaxVertexOutputComponents((member.maxVertexOutputComponents));}();
[&](){return builder.setmaxTessellationGenerationLevel((member.maxTessellationGenerationLevel));}();
[&](){return builder.setmaxTessellationPatchSize((member.maxTessellationPatchSize));}();
[&](){return builder.setmaxTessellationControlPerVertexInputComponents((member.maxTessellationControlPerVertexInputComponents));}();
[&](){return builder.setmaxTessellationControlPerVertexOutputComponents((member.maxTessellationControlPerVertexOutputComponents));}();
[&](){return builder.setmaxTessellationControlPerPatchOutputComponents((member.maxTessellationControlPerPatchOutputComponents));}();
[&](){return builder.setmaxTessellationControlTotalOutputComponents((member.maxTessellationControlTotalOutputComponents));}();
[&](){return builder.setmaxTessellationEvaluationInputComponents((member.maxTessellationEvaluationInputComponents));}();
[&](){return builder.setmaxTessellationEvaluationOutputComponents((member.maxTessellationEvaluationOutputComponents));}();
[&](){return builder.setmaxGeometryShaderInvocations((member.maxGeometryShaderInvocations));}();
[&](){return builder.setmaxGeometryInputComponents((member.maxGeometryInputComponents));}();
[&](){return builder.setmaxGeometryOutputComponents((member.maxGeometryOutputComponents));}();
[&](){return builder.setmaxGeometryOutputVertices((member.maxGeometryOutputVertices));}();
[&](){return builder.setmaxGeometryTotalOutputComponents((member.maxGeometryTotalOutputComponents));}();
[&](){return builder.setmaxFragmentInputComponents((member.maxFragmentInputComponents));}();
[&](){return builder.setmaxFragmentOutputAttachments((member.maxFragmentOutputAttachments));}();
[&](){return builder.setmaxFragmentDualSrcAttachments((member.maxFragmentDualSrcAttachments));}();
[&](){return builder.setmaxFragmentCombinedOutputResources((member.maxFragmentCombinedOutputResources));}();
[&](){return builder.setmaxComputeSharedMemorySize((member.maxComputeSharedMemorySize));}();
[&](){
        auto proto_arr=builder.initmaxComputeWorkGroupCount();
        for(int lIQmbhl=0; lIQmbhl < 3; lIQmbhl++){
            [&](){return proto_arr.set(lIQmbhl,((member.maxComputeWorkGroupCount)[lIQmbhl]));}();
        }
        }();
[&](){return builder.setmaxComputeWorkGroupInvocations((member.maxComputeWorkGroupInvocations));}();
[&](){
        auto proto_arr=builder.initmaxComputeWorkGroupSize();
        for(int ZsqtqEL=0; ZsqtqEL < 3; ZsqtqEL++){
            [&](){return proto_arr.set(ZsqtqEL,((member.maxComputeWorkGroupSize)[ZsqtqEL]));}();
        }
        }();
[&](){return builder.setsubPixelPrecisionBits((member.subPixelPrecisionBits));}();
[&](){return builder.setsubTexelPrecisionBits((member.subTexelPrecisionBits));}();
[&](){return builder.setmipmapPrecisionBits((member.mipmapPrecisionBits));}();
[&](){return builder.setmaxDrawIndexedIndexValue((member.maxDrawIndexedIndexValue));}();
[&](){return builder.setmaxDrawIndirectCount((member.maxDrawIndirectCount));}();
[&](){return builder.setmaxSamplerLodBias((member.maxSamplerLodBias));}();
[&](){return builder.setmaxSamplerAnisotropy((member.maxSamplerAnisotropy));}();
[&](){return builder.setmaxViewports((member.maxViewports));}();
[&](){
        auto proto_arr=builder.initmaxViewportDimensions();
        for(int FiWiYWY=0; FiWiYWY < 2; FiWiYWY++){
            [&](){return proto_arr.set(FiWiYWY,((member.maxViewportDimensions)[FiWiYWY]));}();
        }
        }();
[&](){
        auto proto_arr=builder.initviewportBoundsRange();
        for(int HOnCwLW=0; HOnCwLW < 2; HOnCwLW++){
            [&](){return proto_arr.set(HOnCwLW,((member.viewportBoundsRange)[HOnCwLW]));}();
        }
        }();
[&](){return builder.setviewportSubPixelBits((member.viewportSubPixelBits));}();
[&](){return builder.setminMemoryMapAlignment((member.minMemoryMapAlignment));}();
[&](){[&](){return builder.setminTexelBufferOffsetAlignment((member.minTexelBufferOffsetAlignment));}();}();
[&](){[&](){return builder.setminUniformBufferOffsetAlignment((member.minUniformBufferOffsetAlignment));}();}();
[&](){[&](){return builder.setminStorageBufferOffsetAlignment((member.minStorageBufferOffsetAlignment));}();}();
[&](){return builder.setminTexelOffset((member.minTexelOffset));}();
[&](){return builder.setmaxTexelOffset((member.maxTexelOffset));}();
[&](){return builder.setminTexelGatherOffset((member.minTexelGatherOffset));}();
[&](){return builder.setmaxTexelGatherOffset((member.maxTexelGatherOffset));}();
[&](){return builder.setminInterpolationOffset((member.minInterpolationOffset));}();
[&](){return builder.setmaxInterpolationOffset((member.maxInterpolationOffset));}();
[&](){return builder.setsubPixelInterpolationOffsetBits((member.subPixelInterpolationOffsetBits));}();
[&](){return builder.setmaxFramebufferWidth((member.maxFramebufferWidth));}();
[&](){return builder.setmaxFramebufferHeight((member.maxFramebufferHeight));}();
[&](){return builder.setmaxFramebufferLayers((member.maxFramebufferLayers));}();
[&](){[&](){[&](){return builder.setframebufferColorSampleCounts((member.framebufferColorSampleCounts));}();}();}();
[&](){[&](){[&](){return builder.setframebufferDepthSampleCounts((member.framebufferDepthSampleCounts));}();}();}();
[&](){[&](){[&](){return builder.setframebufferStencilSampleCounts((member.framebufferStencilSampleCounts));}();}();}();
[&](){[&](){[&](){return builder.setframebufferNoAttachmentsSampleCounts((member.framebufferNoAttachmentsSampleCounts));}();}();}();
[&](){return builder.setmaxColorAttachments((member.maxColorAttachments));}();
[&](){[&](){[&](){return builder.setsampledImageColorSampleCounts((member.sampledImageColorSampleCounts));}();}();}();
[&](){[&](){[&](){return builder.setsampledImageIntegerSampleCounts((member.sampledImageIntegerSampleCounts));}();}();}();
[&](){[&](){[&](){return builder.setsampledImageDepthSampleCounts((member.sampledImageDepthSampleCounts));}();}();}();
[&](){[&](){[&](){return builder.setsampledImageStencilSampleCounts((member.sampledImageStencilSampleCounts));}();}();}();
[&](){[&](){[&](){return builder.setstorageImageSampleCounts((member.storageImageSampleCounts));}();}();}();
[&](){return builder.setmaxSampleMaskWords((member.maxSampleMaskWords));}();
[&](){[&](){return builder.settimestampComputeAndGraphics((member.timestampComputeAndGraphics));}();}();
[&](){return builder.settimestampPeriod((member.timestampPeriod));}();
[&](){return builder.setmaxClipDistances((member.maxClipDistances));}();
[&](){return builder.setmaxCullDistances((member.maxCullDistances));}();
[&](){return builder.setmaxCombinedClipAndCullDistances((member.maxCombinedClipAndCullDistances));}();
[&](){return builder.setdiscreteQueuePriorities((member.discreteQueuePriorities));}();
[&](){
        auto proto_arr=builder.initpointSizeRange();
        for(int wFGzZLQ=0; wFGzZLQ < 2; wFGzZLQ++){
            [&](){return proto_arr.set(wFGzZLQ,((member.pointSizeRange)[wFGzZLQ]));}();
        }
        }();
[&](){
        auto proto_arr=builder.initlineWidthRange();
        for(int mGntZIh=0; mGntZIh < 2; mGntZIh++){
            [&](){return proto_arr.set(mGntZIh,((member.lineWidthRange)[mGntZIh]));}();
        }
        }();
[&](){return builder.setpointSizeGranularity((member.pointSizeGranularity));}();
[&](){return builder.setlineWidthGranularity((member.lineWidthGranularity));}();
[&](){[&](){return builder.setstrictLines((member.strictLines));}();}();
[&](){[&](){return builder.setstandardSampleLocations((member.standardSampleLocations));}();}();
[&](){[&](){return builder.setoptimalBufferCopyOffsetAlignment((member.optimalBufferCopyOffsetAlignment));}();}();
[&](){[&](){return builder.setoptimalBufferCopyRowPitchAlignment((member.optimalBufferCopyRowPitchAlignment));}();}();
[&](){[&](){return builder.setnonCoherentAtomSize((member.nonCoherentAtomSize));}();}();
}

    VkPhysicalDeviceLimits deserialize_struct(VkPhysicalDeviceLimits::Reader reader){
        auto result=VkPhysicalDeviceLimits();
    
[&](){(result.maxImageDimension1D)=reader.getmaxImageDimension1D();}();
[&](){(result.maxImageDimension2D)=reader.getmaxImageDimension2D();}();
[&](){(result.maxImageDimension3D)=reader.getmaxImageDimension3D();}();
[&](){(result.maxImageDimensionCube)=reader.getmaxImageDimensionCube();}();
[&](){(result.maxImageArrayLayers)=reader.getmaxImageArrayLayers();}();
[&](){(result.maxTexelBufferElements)=reader.getmaxTexelBufferElements();}();
[&](){(result.maxUniformBufferRange)=reader.getmaxUniformBufferRange();}();
[&](){(result.maxStorageBufferRange)=reader.getmaxStorageBufferRange();}();
[&](){(result.maxPushConstantsSize)=reader.getmaxPushConstantsSize();}();
[&](){(result.maxMemoryAllocationCount)=reader.getmaxMemoryAllocationCount();}();
[&](){(result.maxSamplerAllocationCount)=reader.getmaxSamplerAllocationCount();}();
[&](){[&](){(result.bufferImageGranularity)=reader.getbufferImageGranularity();}();}();
[&](){[&](){(result.sparseAddressSpaceSize)=reader.getsparseAddressSpaceSize();}();}();
[&](){(result.maxBoundDescriptorSets)=reader.getmaxBoundDescriptorSets();}();
[&](){(result.maxPerStageDescriptorSamplers)=reader.getmaxPerStageDescriptorSamplers();}();
[&](){(result.maxPerStageDescriptorUniformBuffers)=reader.getmaxPerStageDescriptorUniformBuffers();}();
[&](){(result.maxPerStageDescriptorStorageBuffers)=reader.getmaxPerStageDescriptorStorageBuffers();}();
[&](){(result.maxPerStageDescriptorSampledImages)=reader.getmaxPerStageDescriptorSampledImages();}();
[&](){(result.maxPerStageDescriptorStorageImages)=reader.getmaxPerStageDescriptorStorageImages();}();
[&](){(result.maxPerStageDescriptorInputAttachments)=reader.getmaxPerStageDescriptorInputAttachments();}();
[&](){(result.maxPerStageResources)=reader.getmaxPerStageResources();}();
[&](){(result.maxDescriptorSetSamplers)=reader.getmaxDescriptorSetSamplers();}();
[&](){(result.maxDescriptorSetUniformBuffers)=reader.getmaxDescriptorSetUniformBuffers();}();
[&](){(result.maxDescriptorSetUniformBuffersDynamic)=reader.getmaxDescriptorSetUniformBuffersDynamic();}();
[&](){(result.maxDescriptorSetStorageBuffers)=reader.getmaxDescriptorSetStorageBuffers();}();
[&](){(result.maxDescriptorSetStorageBuffersDynamic)=reader.getmaxDescriptorSetStorageBuffersDynamic();}();
[&](){(result.maxDescriptorSetSampledImages)=reader.getmaxDescriptorSetSampledImages();}();
[&](){(result.maxDescriptorSetStorageImages)=reader.getmaxDescriptorSetStorageImages();}();
[&](){(result.maxDescriptorSetInputAttachments)=reader.getmaxDescriptorSetInputAttachments();}();
[&](){(result.maxVertexInputAttributes)=reader.getmaxVertexInputAttributes();}();
[&](){(result.maxVertexInputBindings)=reader.getmaxVertexInputBindings();}();
[&](){(result.maxVertexInputAttributeOffset)=reader.getmaxVertexInputAttributeOffset();}();
[&](){(result.maxVertexInputBindingStride)=reader.getmaxVertexInputBindingStride();}();
[&](){(result.maxVertexOutputComponents)=reader.getmaxVertexOutputComponents();}();
[&](){(result.maxTessellationGenerationLevel)=reader.getmaxTessellationGenerationLevel();}();
[&](){(result.maxTessellationPatchSize)=reader.getmaxTessellationPatchSize();}();
[&](){(result.maxTessellationControlPerVertexInputComponents)=reader.getmaxTessellationControlPerVertexInputComponents();}();
[&](){(result.maxTessellationControlPerVertexOutputComponents)=reader.getmaxTessellationControlPerVertexOutputComponents();}();
[&](){(result.maxTessellationControlPerPatchOutputComponents)=reader.getmaxTessellationControlPerPatchOutputComponents();}();
[&](){(result.maxTessellationControlTotalOutputComponents)=reader.getmaxTessellationControlTotalOutputComponents();}();
[&](){(result.maxTessellationEvaluationInputComponents)=reader.getmaxTessellationEvaluationInputComponents();}();
[&](){(result.maxTessellationEvaluationOutputComponents)=reader.getmaxTessellationEvaluationOutputComponents();}();
[&](){(result.maxGeometryShaderInvocations)=reader.getmaxGeometryShaderInvocations();}();
[&](){(result.maxGeometryInputComponents)=reader.getmaxGeometryInputComponents();}();
[&](){(result.maxGeometryOutputComponents)=reader.getmaxGeometryOutputComponents();}();
[&](){(result.maxGeometryOutputVertices)=reader.getmaxGeometryOutputVertices();}();
[&](){(result.maxGeometryTotalOutputComponents)=reader.getmaxGeometryTotalOutputComponents();}();
[&](){(result.maxFragmentInputComponents)=reader.getmaxFragmentInputComponents();}();
[&](){(result.maxFragmentOutputAttachments)=reader.getmaxFragmentOutputAttachments();}();
[&](){(result.maxFragmentDualSrcAttachments)=reader.getmaxFragmentDualSrcAttachments();}();
[&](){(result.maxFragmentCombinedOutputResources)=reader.getmaxFragmentCombinedOutputResources();}();
[&](){(result.maxComputeSharedMemorySize)=reader.getmaxComputeSharedMemorySize();}();
[&](){
        auto proto_arr=reader.getmaxComputeWorkGroupCount(3);
        for(int lIQmbhl=0; lIQmbhl < 3; lIQmbhl++){
            [&](){((result.maxComputeWorkGroupCount)[lIQmbhl])=proto_arr[lIQmbhl];}();
        }
        }();
[&](){(result.maxComputeWorkGroupInvocations)=reader.getmaxComputeWorkGroupInvocations();}();
[&](){
        auto proto_arr=reader.getmaxComputeWorkGroupSize(3);
        for(int ZsqtqEL=0; ZsqtqEL < 3; ZsqtqEL++){
            [&](){((result.maxComputeWorkGroupSize)[ZsqtqEL])=proto_arr[ZsqtqEL];}();
        }
        }();
[&](){(result.subPixelPrecisionBits)=reader.getsubPixelPrecisionBits();}();
[&](){(result.subTexelPrecisionBits)=reader.getsubTexelPrecisionBits();}();
[&](){(result.mipmapPrecisionBits)=reader.getmipmapPrecisionBits();}();
[&](){(result.maxDrawIndexedIndexValue)=reader.getmaxDrawIndexedIndexValue();}();
[&](){(result.maxDrawIndirectCount)=reader.getmaxDrawIndirectCount();}();
[&](){(result.maxSamplerLodBias)=reader.getmaxSamplerLodBias();}();
[&](){(result.maxSamplerAnisotropy)=reader.getmaxSamplerAnisotropy();}();
[&](){(result.maxViewports)=reader.getmaxViewports();}();
[&](){
        auto proto_arr=reader.getmaxViewportDimensions(2);
        for(int FiWiYWY=0; FiWiYWY < 2; FiWiYWY++){
            [&](){((result.maxViewportDimensions)[FiWiYWY])=proto_arr[FiWiYWY];}();
        }
        }();
[&](){
        auto proto_arr=reader.getviewportBoundsRange(2);
        for(int HOnCwLW=0; HOnCwLW < 2; HOnCwLW++){
            [&](){((result.viewportBoundsRange)[HOnCwLW])=proto_arr[HOnCwLW];}();
        }
        }();
[&](){(result.viewportSubPixelBits)=reader.getviewportSubPixelBits();}();
[&](){(result.minMemoryMapAlignment)=reader.getminMemoryMapAlignment();}();
[&](){[&](){(result.minTexelBufferOffsetAlignment)=reader.getminTexelBufferOffsetAlignment();}();}();
[&](){[&](){(result.minUniformBufferOffsetAlignment)=reader.getminUniformBufferOffsetAlignment();}();}();
[&](){[&](){(result.minStorageBufferOffsetAlignment)=reader.getminStorageBufferOffsetAlignment();}();}();
[&](){(result.minTexelOffset)=reader.getminTexelOffset();}();
[&](){(result.maxTexelOffset)=reader.getmaxTexelOffset();}();
[&](){(result.minTexelGatherOffset)=reader.getminTexelGatherOffset();}();
[&](){(result.maxTexelGatherOffset)=reader.getmaxTexelGatherOffset();}();
[&](){(result.minInterpolationOffset)=reader.getminInterpolationOffset();}();
[&](){(result.maxInterpolationOffset)=reader.getmaxInterpolationOffset();}();
[&](){(result.subPixelInterpolationOffsetBits)=reader.getsubPixelInterpolationOffsetBits();}();
[&](){(result.maxFramebufferWidth)=reader.getmaxFramebufferWidth();}();
[&](){(result.maxFramebufferHeight)=reader.getmaxFramebufferHeight();}();
[&](){(result.maxFramebufferLayers)=reader.getmaxFramebufferLayers();}();
[&](){[&](){[&](){(result.framebufferColorSampleCounts)=reader.getframebufferColorSampleCounts();}();}();}();
[&](){[&](){[&](){(result.framebufferDepthSampleCounts)=reader.getframebufferDepthSampleCounts();}();}();}();
[&](){[&](){[&](){(result.framebufferStencilSampleCounts)=reader.getframebufferStencilSampleCounts();}();}();}();
[&](){[&](){[&](){(result.framebufferNoAttachmentsSampleCounts)=reader.getframebufferNoAttachmentsSampleCounts();}();}();}();
[&](){(result.maxColorAttachments)=reader.getmaxColorAttachments();}();
[&](){[&](){[&](){(result.sampledImageColorSampleCounts)=reader.getsampledImageColorSampleCounts();}();}();}();
[&](){[&](){[&](){(result.sampledImageIntegerSampleCounts)=reader.getsampledImageIntegerSampleCounts();}();}();}();
[&](){[&](){[&](){(result.sampledImageDepthSampleCounts)=reader.getsampledImageDepthSampleCounts();}();}();}();
[&](){[&](){[&](){(result.sampledImageStencilSampleCounts)=reader.getsampledImageStencilSampleCounts();}();}();}();
[&](){[&](){[&](){(result.storageImageSampleCounts)=reader.getstorageImageSampleCounts();}();}();}();
[&](){(result.maxSampleMaskWords)=reader.getmaxSampleMaskWords();}();
[&](){[&](){(result.timestampComputeAndGraphics)=reader.gettimestampComputeAndGraphics();}();}();
[&](){(result.timestampPeriod)=reader.gettimestampPeriod();}();
[&](){(result.maxClipDistances)=reader.getmaxClipDistances();}();
[&](){(result.maxCullDistances)=reader.getmaxCullDistances();}();
[&](){(result.maxCombinedClipAndCullDistances)=reader.getmaxCombinedClipAndCullDistances();}();
[&](){(result.discreteQueuePriorities)=reader.getdiscreteQueuePriorities();}();
[&](){
        auto proto_arr=reader.getpointSizeRange(2);
        for(int wFGzZLQ=0; wFGzZLQ < 2; wFGzZLQ++){
            [&](){((result.pointSizeRange)[wFGzZLQ])=proto_arr[wFGzZLQ];}();
        }
        }();
[&](){
        auto proto_arr=reader.getlineWidthRange(2);
        for(int mGntZIh=0; mGntZIh < 2; mGntZIh++){
            [&](){((result.lineWidthRange)[mGntZIh])=proto_arr[mGntZIh];}();
        }
        }();
[&](){(result.pointSizeGranularity)=reader.getpointSizeGranularity();}();
[&](){(result.lineWidthGranularity)=reader.getlineWidthGranularity();}();
[&](){[&](){(result.strictLines)=reader.getstrictLines();}();}();
[&](){[&](){(result.standardSampleLocations)=reader.getstandardSampleLocations();}();}();
[&](){[&](){(result.optimalBufferCopyOffsetAlignment)=reader.getoptimalBufferCopyOffsetAlignment();}();}();
[&](){[&](){(result.optimalBufferCopyRowPitchAlignment)=reader.getoptimalBufferCopyRowPitchAlignment();}();}();
[&](){[&](){(result.nonCoherentAtomSize)=reader.getnonCoherentAtomSize();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceLimits member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceLimits member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSemaphoreCreateInfo::Builder& builder, VkSemaphoreCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
}

    VkSemaphoreCreateInfo deserialize_struct(VkSemaphoreCreateInfo::Reader reader){
        auto result=VkSemaphoreCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSemaphoreCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSemaphoreCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkQueryPoolCreateInfo::Builder& builder, VkQueryPoolCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){[&](){[&](){return builder.setqueryType((member.queryType));}();}();}();
[&](){return builder.setqueryCount((member.queryCount));}();
[&](){[&](){[&](){return builder.setpipelineStatistics((member.pipelineStatistics));}();}();}();
}

    VkQueryPoolCreateInfo deserialize_struct(VkQueryPoolCreateInfo::Reader reader){
        auto result=VkQueryPoolCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){[&](){[&](){(result.queryType)=reader.getqueryType();}();}();}();
[&](){(result.queryCount)=reader.getqueryCount();}();
[&](){[&](){[&](){(result.pipelineStatistics)=reader.getpipelineStatistics();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkQueryPoolCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkQueryPoolCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkFramebufferCreateInfo::Builder& builder, VkFramebufferCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){return builder.setrenderPass(serialize_handle(member.renderPass));}();
[&](){return builder.setattachmentCount((member.attachmentCount));}();
[&](){
            if ((member.pAttachments)==NULL){
                builder.disownpAttachments();
            return; }
        auto proto_arr=builder.initpAttachments();
        for(int vjwDzkt=0; vjwDzkt < member.attachmentCount; vjwDzkt++){
            [&](){return proto_arr.set(vjwDzkt,serialize_handle((member.pAttachments)[vjwDzkt]));}();
        }
        }();
[&](){return builder.setwidth((member.width));}();
[&](){return builder.setheight((member.height));}();
[&](){return builder.setlayers((member.layers));}();
}

    VkFramebufferCreateInfo deserialize_struct(VkFramebufferCreateInfo::Reader reader){
        auto result=VkFramebufferCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){(result.renderPass)=deserialize_handle(reader.getrenderPass());}();
[&](){(result.attachmentCount)=reader.getattachmentCount();}();
[&](){ VkImageView* temp_engXCXd[&](){
            if (!reader.haspAttachments()){
                (result.pAttachments)=NULL;
            return; }{native_concat()}=(VkImageView*)malloc(result.attachmentCount*sizeof(VkImageView));
        auto proto_arr=reader.getpAttachments(result.attachmentCount);
        for(int qNVUjmy=0; qNVUjmy < result.attachmentCount; qNVUjmy++){
            [&](){((result.pAttachments)[qNVUjmy])=deserialize_handle(proto_arr[qNVUjmy]);}();
        }
        }();(result.pAttachments)=temp_engXCXd;}();
[&](){(result.width)=reader.getwidth();}();
[&](){(result.height)=reader.getheight();}();
[&](){(result.layers)=reader.getlayers();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkFramebufferCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkFramebufferCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDrawIndirectCommand::Builder& builder, VkDrawIndirectCommand member){
        
    
[&](){return builder.setvertexCount((member.vertexCount));}();
[&](){return builder.setinstanceCount((member.instanceCount));}();
[&](){return builder.setfirstVertex((member.firstVertex));}();
[&](){return builder.setfirstInstance((member.firstInstance));}();
}

    VkDrawIndirectCommand deserialize_struct(VkDrawIndirectCommand::Reader reader){
        auto result=VkDrawIndirectCommand();
    
[&](){(result.vertexCount)=reader.getvertexCount();}();
[&](){(result.instanceCount)=reader.getinstanceCount();}();
[&](){(result.firstVertex)=reader.getfirstVertex();}();
[&](){(result.firstInstance)=reader.getfirstInstance();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDrawIndirectCommand member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDrawIndirectCommand member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDrawIndexedIndirectCommand::Builder& builder, VkDrawIndexedIndirectCommand member){
        
    
[&](){return builder.setindexCount((member.indexCount));}();
[&](){return builder.setinstanceCount((member.instanceCount));}();
[&](){return builder.setfirstIndex((member.firstIndex));}();
[&](){return builder.setvertexOffset((member.vertexOffset));}();
[&](){return builder.setfirstInstance((member.firstInstance));}();
}

    VkDrawIndexedIndirectCommand deserialize_struct(VkDrawIndexedIndirectCommand::Reader reader){
        auto result=VkDrawIndexedIndirectCommand();
    
[&](){(result.indexCount)=reader.getindexCount();}();
[&](){(result.instanceCount)=reader.getinstanceCount();}();
[&](){(result.firstIndex)=reader.getfirstIndex();}();
[&](){(result.vertexOffset)=reader.getvertexOffset();}();
[&](){(result.firstInstance)=reader.getfirstInstance();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDrawIndexedIndirectCommand member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDrawIndexedIndirectCommand member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDispatchIndirectCommand::Builder& builder, VkDispatchIndirectCommand member){
        
    
[&](){return builder.setx((member.x));}();
[&](){return builder.sety((member.y));}();
[&](){return builder.setz((member.z));}();
}

    VkDispatchIndirectCommand deserialize_struct(VkDispatchIndirectCommand::Reader reader){
        auto result=VkDispatchIndirectCommand();
    
[&](){(result.x)=reader.getx();}();
[&](){(result.y)=reader.gety();}();
[&](){(result.z)=reader.getz();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDispatchIndirectCommand member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDispatchIndirectCommand member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkMultiDrawInfoEXT::Builder& builder, VkMultiDrawInfoEXT member){
        
    
[&](){return builder.setfirstVertex((member.firstVertex));}();
[&](){return builder.setvertexCount((member.vertexCount));}();
}

    VkMultiDrawInfoEXT deserialize_struct(VkMultiDrawInfoEXT::Reader reader){
        auto result=VkMultiDrawInfoEXT();
    
[&](){(result.firstVertex)=reader.getfirstVertex();}();
[&](){(result.vertexCount)=reader.getvertexCount();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkMultiDrawInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkMultiDrawInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkMultiDrawIndexedInfoEXT::Builder& builder, VkMultiDrawIndexedInfoEXT member){
        
    
[&](){return builder.setfirstIndex((member.firstIndex));}();
[&](){return builder.setindexCount((member.indexCount));}();
[&](){return builder.setvertexOffset((member.vertexOffset));}();
}

    VkMultiDrawIndexedInfoEXT deserialize_struct(VkMultiDrawIndexedInfoEXT::Reader reader){
        auto result=VkMultiDrawIndexedInfoEXT();
    
[&](){(result.firstIndex)=reader.getfirstIndex();}();
[&](){(result.indexCount)=reader.getindexCount();}();
[&](){(result.vertexOffset)=reader.getvertexOffset();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkMultiDrawIndexedInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkMultiDrawIndexedInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSubmitInfo::Builder& builder, VkSubmitInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setwaitSemaphoreCount((member.waitSemaphoreCount));}();
[&](){
            if ((member.pWaitSemaphores)==NULL){
                builder.disownpWaitSemaphores();
            return; }
        auto proto_arr=builder.initpWaitSemaphores();
        for(int UPuCjkG=0; UPuCjkG < member.waitSemaphoreCount; UPuCjkG++){
            [&](){return proto_arr.set(UPuCjkG,serialize_handle((member.pWaitSemaphores)[UPuCjkG]));}();
        }
        }();
[&](){
            if ((member.pWaitDstStageMask)==NULL){
                builder.disownpWaitDstStageMask();
            return; }
        auto proto_arr=builder.initpWaitDstStageMask();
        for(int OEMoieK=0; OEMoieK < member.waitSemaphoreCount; OEMoieK++){
            [&](){[&](){[&](){return proto_arr.set(OEMoieK,((member.pWaitDstStageMask)[OEMoieK]));}();}();}();
        }
        }();
[&](){return builder.setcommandBufferCount((member.commandBufferCount));}();
[&](){
            if ((member.pCommandBuffers)==NULL){
                builder.disownpCommandBuffers();
            return; }
        auto proto_arr=builder.initpCommandBuffers();
        for(int VKjBFDE=0; VKjBFDE < member.commandBufferCount; VKjBFDE++){
            [&](){return proto_arr.set(VKjBFDE,serialize_handle((member.pCommandBuffers)[VKjBFDE]));}();
        }
        }();
[&](){return builder.setsignalSemaphoreCount((member.signalSemaphoreCount));}();
[&](){
            if ((member.pSignalSemaphores)==NULL){
                builder.disownpSignalSemaphores();
            return; }
        auto proto_arr=builder.initpSignalSemaphores();
        for(int NKFlfkK=0; NKFlfkK < member.signalSemaphoreCount; NKFlfkK++){
            [&](){return proto_arr.set(NKFlfkK,serialize_handle((member.pSignalSemaphores)[NKFlfkK]));}();
        }
        }();
}

    VkSubmitInfo deserialize_struct(VkSubmitInfo::Reader reader){
        auto result=VkSubmitInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.waitSemaphoreCount)=reader.getwaitSemaphoreCount();}();
[&](){ VkSemaphore* temp_vxBhExF[&](){
            if (!reader.haspWaitSemaphores()){
                (result.pWaitSemaphores)=NULL;
            return; }{native_concat()}=(VkSemaphore*)malloc(result.waitSemaphoreCount*sizeof(VkSemaphore));
        auto proto_arr=reader.getpWaitSemaphores(result.waitSemaphoreCount);
        for(int eowObQx=0; eowObQx < result.waitSemaphoreCount; eowObQx++){
            [&](){((result.pWaitSemaphores)[eowObQx])=deserialize_handle(proto_arr[eowObQx]);}();
        }
        }();(result.pWaitSemaphores)=temp_vxBhExF;}();
[&](){ VkPipelineStageFlags* temp_AHnwsmW[&](){
            if (!reader.haspWaitDstStageMask()){
                (result.pWaitDstStageMask)=NULL;
            return; }{native_concat()}=(VkPipelineStageFlags*)malloc(result.waitSemaphoreCount*sizeof(VkPipelineStageFlags));
        auto proto_arr=reader.getpWaitDstStageMask(result.waitSemaphoreCount);
        for(int mVEXVxn=0; mVEXVxn < result.waitSemaphoreCount; mVEXVxn++){
            [&](){[&](){[&](){((result.pWaitDstStageMask)[mVEXVxn])=proto_arr[mVEXVxn];}();}();}();
        }
        }();(result.pWaitDstStageMask)=temp_AHnwsmW;}();
[&](){(result.commandBufferCount)=reader.getcommandBufferCount();}();
[&](){ VkCommandBuffer* temp_mkqupUQ[&](){
            if (!reader.haspCommandBuffers()){
                (result.pCommandBuffers)=NULL;
            return; }{native_concat()}=(VkCommandBuffer*)malloc(result.commandBufferCount*sizeof(VkCommandBuffer));
        auto proto_arr=reader.getpCommandBuffers(result.commandBufferCount);
        for(int iNOFWDX=0; iNOFWDX < result.commandBufferCount; iNOFWDX++){
            [&](){((result.pCommandBuffers)[iNOFWDX])=deserialize_handle(proto_arr[iNOFWDX]);}();
        }
        }();(result.pCommandBuffers)=temp_mkqupUQ;}();
[&](){(result.signalSemaphoreCount)=reader.getsignalSemaphoreCount();}();
[&](){ VkSemaphore* temp_rruuqWC[&](){
            if (!reader.haspSignalSemaphores()){
                (result.pSignalSemaphores)=NULL;
            return; }{native_concat()}=(VkSemaphore*)malloc(result.signalSemaphoreCount*sizeof(VkSemaphore));
        auto proto_arr=reader.getpSignalSemaphores(result.signalSemaphoreCount);
        for(int rsHNIbT=0; rsHNIbT < result.signalSemaphoreCount; rsHNIbT++){
            [&](){((result.pSignalSemaphores)[rsHNIbT])=deserialize_handle(proto_arr[rsHNIbT]);}();
        }
        }();(result.pSignalSemaphores)=temp_rruuqWC;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSubmitInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSubmitInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDisplayPropertiesKHR::Builder& builder, VkDisplayPropertiesKHR member){
        
    
[&](){return builder.setdisplay(serialize_handle(member.display));}();
[&](){
            if ((member.displayName)==NULL){
                builder.disowndisplayName();
            return; }
        auto proto_arr=builder.initdisplayName();
        for(int lNoZZOd=0; lNoZZOd < strlen((member.displayName))+1; lNoZZOd++){
            [&](){return proto_arr.set(lNoZZOd,((member.displayName)[lNoZZOd]));}();
        }
        }();
[&](){
            auto temp=builder.initphysicalDimensions(physicalDimensions);
            return serialize_struct((member.physicalDimensions), temp);
            }();
[&](){
            auto temp=builder.initphysicalResolution(physicalResolution);
            return serialize_struct((member.physicalResolution), temp);
            }();
[&](){[&](){[&](){return builder.setsupportedTransforms((member.supportedTransforms));}();}();}();
[&](){[&](){return builder.setplaneReorderPossible((member.planeReorderPossible));}();}();
[&](){[&](){return builder.setpersistentContent((member.persistentContent));}();}();
}

    VkDisplayPropertiesKHR deserialize_struct(VkDisplayPropertiesKHR::Reader reader){
        auto result=VkDisplayPropertiesKHR();
    
[&](){(result.display)=deserialize_handle(reader.getdisplay());}();
[&](){ char* temp_UKVMySz[&](){
            if (!reader.hasdisplayName()){
                (result.displayName)=NULL;
            return; }{native_concat()}=(char*)malloc(reader.getdisplayName().size();*sizeof(char));
        auto proto_arr=reader.getdisplayName(reader.getdisplayName().size(););
        for(int oCKUvgQ=0; oCKUvgQ < reader.getdisplayName().size();; oCKUvgQ++){
            [&](){((result.displayName)[oCKUvgQ])=proto_arr[oCKUvgQ];}();
        }
        }();(result.displayName)=temp_UKVMySz;}();
[&](){
            auto temp=reader.getphysicalDimensions();
            (result.physicalDimensions)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getphysicalResolution();
            (result.physicalResolution)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.supportedTransforms)=reader.getsupportedTransforms();}();}();}();
[&](){[&](){(result.planeReorderPossible)=reader.getplaneReorderPossible();}();}();
[&](){[&](){(result.persistentContent)=reader.getpersistentContent();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDisplayPropertiesKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDisplayPropertiesKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDisplayPlanePropertiesKHR::Builder& builder, VkDisplayPlanePropertiesKHR member){
        
    
[&](){return builder.setcurrentDisplay(serialize_handle(member.currentDisplay));}();
[&](){return builder.setcurrentStackIndex((member.currentStackIndex));}();
}

    VkDisplayPlanePropertiesKHR deserialize_struct(VkDisplayPlanePropertiesKHR::Reader reader){
        auto result=VkDisplayPlanePropertiesKHR();
    
[&](){(result.currentDisplay)=deserialize_handle(reader.getcurrentDisplay());}();
[&](){(result.currentStackIndex)=reader.getcurrentStackIndex();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDisplayPlanePropertiesKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDisplayPlanePropertiesKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDisplayModeParametersKHR::Builder& builder, VkDisplayModeParametersKHR member){
        
    
[&](){
            auto temp=builder.initvisibleRegion(visibleRegion);
            return serialize_struct((member.visibleRegion), temp);
            }();
[&](){return builder.setrefreshRate((member.refreshRate));}();
}

    VkDisplayModeParametersKHR deserialize_struct(VkDisplayModeParametersKHR::Reader reader){
        auto result=VkDisplayModeParametersKHR();
    
[&](){
            auto temp=reader.getvisibleRegion();
            (result.visibleRegion)=deserialize_struct(temp);
            }();
[&](){(result.refreshRate)=reader.getrefreshRate();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDisplayModeParametersKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDisplayModeParametersKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDisplayModePropertiesKHR::Builder& builder, VkDisplayModePropertiesKHR member){
        
    
[&](){return builder.setdisplayMode(serialize_handle(member.displayMode));}();
[&](){
            auto temp=builder.initparameters(parameters);
            return serialize_struct((member.parameters), temp);
            }();
}

    VkDisplayModePropertiesKHR deserialize_struct(VkDisplayModePropertiesKHR::Reader reader){
        auto result=VkDisplayModePropertiesKHR();
    
[&](){(result.displayMode)=deserialize_handle(reader.getdisplayMode());}();
[&](){
            auto temp=reader.getparameters();
            (result.parameters)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDisplayModePropertiesKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDisplayModePropertiesKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDisplayModeCreateInfoKHR::Builder& builder, VkDisplayModeCreateInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){
            auto temp=builder.initparameters(parameters);
            return serialize_struct((member.parameters), temp);
            }();
}

    VkDisplayModeCreateInfoKHR deserialize_struct(VkDisplayModeCreateInfoKHR::Reader reader){
        auto result=VkDisplayModeCreateInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){
            auto temp=reader.getparameters();
            (result.parameters)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDisplayModeCreateInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDisplayModeCreateInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDisplayPlaneCapabilitiesKHR::Builder& builder, VkDisplayPlaneCapabilitiesKHR member){
        
    
[&](){[&](){[&](){return builder.setsupportedAlpha((member.supportedAlpha));}();}();}();
[&](){
            auto temp=builder.initminSrcPosition(minSrcPosition);
            return serialize_struct((member.minSrcPosition), temp);
            }();
[&](){
            auto temp=builder.initmaxSrcPosition(maxSrcPosition);
            return serialize_struct((member.maxSrcPosition), temp);
            }();
[&](){
            auto temp=builder.initminSrcExtent(minSrcExtent);
            return serialize_struct((member.minSrcExtent), temp);
            }();
[&](){
            auto temp=builder.initmaxSrcExtent(maxSrcExtent);
            return serialize_struct((member.maxSrcExtent), temp);
            }();
[&](){
            auto temp=builder.initminDstPosition(minDstPosition);
            return serialize_struct((member.minDstPosition), temp);
            }();
[&](){
            auto temp=builder.initmaxDstPosition(maxDstPosition);
            return serialize_struct((member.maxDstPosition), temp);
            }();
[&](){
            auto temp=builder.initminDstExtent(minDstExtent);
            return serialize_struct((member.minDstExtent), temp);
            }();
[&](){
            auto temp=builder.initmaxDstExtent(maxDstExtent);
            return serialize_struct((member.maxDstExtent), temp);
            }();
}

    VkDisplayPlaneCapabilitiesKHR deserialize_struct(VkDisplayPlaneCapabilitiesKHR::Reader reader){
        auto result=VkDisplayPlaneCapabilitiesKHR();
    
[&](){[&](){[&](){(result.supportedAlpha)=reader.getsupportedAlpha();}();}();}();
[&](){
            auto temp=reader.getminSrcPosition();
            (result.minSrcPosition)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getmaxSrcPosition();
            (result.maxSrcPosition)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getminSrcExtent();
            (result.minSrcExtent)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getmaxSrcExtent();
            (result.maxSrcExtent)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getminDstPosition();
            (result.minDstPosition)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getmaxDstPosition();
            (result.maxDstPosition)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getminDstExtent();
            (result.minDstExtent)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getmaxDstExtent();
            (result.maxDstExtent)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDisplayPlaneCapabilitiesKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDisplayPlaneCapabilitiesKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDisplaySurfaceCreateInfoKHR::Builder& builder, VkDisplaySurfaceCreateInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){return builder.setdisplayMode(serialize_handle(member.displayMode));}();
[&](){return builder.setplaneIndex((member.planeIndex));}();
[&](){return builder.setplaneStackIndex((member.planeStackIndex));}();
[&](){[&](){[&](){return builder.settransform((member.transform));}();}();}();
[&](){return builder.setglobalAlpha((member.globalAlpha));}();
[&](){[&](){[&](){return builder.setalphaMode((member.alphaMode));}();}();}();
[&](){
            auto temp=builder.initimageExtent(imageExtent);
            return serialize_struct((member.imageExtent), temp);
            }();
}

    VkDisplaySurfaceCreateInfoKHR deserialize_struct(VkDisplaySurfaceCreateInfoKHR::Reader reader){
        auto result=VkDisplaySurfaceCreateInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){(result.displayMode)=deserialize_handle(reader.getdisplayMode());}();
[&](){(result.planeIndex)=reader.getplaneIndex();}();
[&](){(result.planeStackIndex)=reader.getplaneStackIndex();}();
[&](){[&](){[&](){(result.transform)=reader.gettransform();}();}();}();
[&](){(result.globalAlpha)=reader.getglobalAlpha();}();
[&](){[&](){[&](){(result.alphaMode)=reader.getalphaMode();}();}();}();
[&](){
            auto temp=reader.getimageExtent();
            (result.imageExtent)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDisplaySurfaceCreateInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDisplaySurfaceCreateInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDisplayPresentInfoKHR::Builder& builder, VkDisplayPresentInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            auto temp=builder.initsrcRect(srcRect);
            return serialize_struct((member.srcRect), temp);
            }();
[&](){
            auto temp=builder.initdstRect(dstRect);
            return serialize_struct((member.dstRect), temp);
            }();
[&](){[&](){return builder.setpersistent((member.persistent));}();}();
}

    VkDisplayPresentInfoKHR deserialize_struct(VkDisplayPresentInfoKHR::Reader reader){
        auto result=VkDisplayPresentInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){
            auto temp=reader.getsrcRect();
            (result.srcRect)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getdstRect();
            (result.dstRect)=deserialize_struct(temp);
            }();
[&](){[&](){(result.persistent)=reader.getpersistent();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDisplayPresentInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDisplayPresentInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSurfaceCapabilitiesKHR::Builder& builder, VkSurfaceCapabilitiesKHR member){
        
    
[&](){return builder.setminImageCount((member.minImageCount));}();
[&](){return builder.setmaxImageCount((member.maxImageCount));}();
[&](){
            auto temp=builder.initcurrentExtent(currentExtent);
            return serialize_struct((member.currentExtent), temp);
            }();
[&](){
            auto temp=builder.initminImageExtent(minImageExtent);
            return serialize_struct((member.minImageExtent), temp);
            }();
[&](){
            auto temp=builder.initmaxImageExtent(maxImageExtent);
            return serialize_struct((member.maxImageExtent), temp);
            }();
[&](){return builder.setmaxImageArrayLayers((member.maxImageArrayLayers));}();
[&](){[&](){[&](){return builder.setsupportedTransforms((member.supportedTransforms));}();}();}();
[&](){[&](){[&](){return builder.setcurrentTransform((member.currentTransform));}();}();}();
[&](){[&](){[&](){return builder.setsupportedCompositeAlpha((member.supportedCompositeAlpha));}();}();}();
[&](){[&](){[&](){return builder.setsupportedUsageFlags((member.supportedUsageFlags));}();}();}();
}

    VkSurfaceCapabilitiesKHR deserialize_struct(VkSurfaceCapabilitiesKHR::Reader reader){
        auto result=VkSurfaceCapabilitiesKHR();
    
[&](){(result.minImageCount)=reader.getminImageCount();}();
[&](){(result.maxImageCount)=reader.getmaxImageCount();}();
[&](){
            auto temp=reader.getcurrentExtent();
            (result.currentExtent)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getminImageExtent();
            (result.minImageExtent)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getmaxImageExtent();
            (result.maxImageExtent)=deserialize_struct(temp);
            }();
[&](){(result.maxImageArrayLayers)=reader.getmaxImageArrayLayers();}();
[&](){[&](){[&](){(result.supportedTransforms)=reader.getsupportedTransforms();}();}();}();
[&](){[&](){[&](){(result.currentTransform)=reader.getcurrentTransform();}();}();}();
[&](){[&](){[&](){(result.supportedCompositeAlpha)=reader.getsupportedCompositeAlpha();}();}();}();
[&](){[&](){[&](){(result.supportedUsageFlags)=reader.getsupportedUsageFlags();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSurfaceCapabilitiesKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSurfaceCapabilitiesKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkXlibSurfaceCreateInfoKHR::Builder& builder, VkXlibSurfaceCreateInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){
            if ((member.dpy)==NULL){
                builder.disowndpy();
            return; }builder.setdpy((uintptr_t)(member.dpy));}();
[&](){builder.setwindow((uintptr_t)(member.window));}();
}

    VkXlibSurfaceCreateInfoKHR deserialize_struct(VkXlibSurfaceCreateInfoKHR::Reader reader){
        auto result=VkXlibSurfaceCreateInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){
            if (!reader.hasdpy()){
                (result.dpy)=NULL;
            return; }(result.dpy)=(uintptr_t)reader.getdpy();}();
[&](){(result.window)=(uintptr_t)reader.getwindow();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkXlibSurfaceCreateInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkXlibSurfaceCreateInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkXcbSurfaceCreateInfoKHR::Builder& builder, VkXcbSurfaceCreateInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){
            if ((member.connection)==NULL){
                builder.disownconnection();
            return; }builder.setconnection((uintptr_t)(member.connection));}();
[&](){builder.setwindow((uintptr_t)(member.window));}();
}

    VkXcbSurfaceCreateInfoKHR deserialize_struct(VkXcbSurfaceCreateInfoKHR::Reader reader){
        auto result=VkXcbSurfaceCreateInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){
            if (!reader.hasconnection()){
                (result.connection)=NULL;
            return; }(result.connection)=(uintptr_t)reader.getconnection();}();
[&](){(result.window)=(uintptr_t)reader.getwindow();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkXcbSurfaceCreateInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkXcbSurfaceCreateInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSurfaceFormatKHR::Builder& builder, VkSurfaceFormatKHR member){
        
    
[&](){[&](){[&](){return builder.setformat((member.format));}();}();}();
[&](){[&](){[&](){return builder.setcolorSpace((member.colorSpace));}();}();}();
}

    VkSurfaceFormatKHR deserialize_struct(VkSurfaceFormatKHR::Reader reader){
        auto result=VkSurfaceFormatKHR();
    
[&](){[&](){[&](){(result.format)=reader.getformat();}();}();}();
[&](){[&](){[&](){(result.colorSpace)=reader.getcolorSpace();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSurfaceFormatKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSurfaceFormatKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSwapchainCreateInfoKHR::Builder& builder, VkSwapchainCreateInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){return builder.setsurface(serialize_handle(member.surface));}();
[&](){return builder.setminImageCount((member.minImageCount));}();
[&](){[&](){[&](){return builder.setimageFormat((member.imageFormat));}();}();}();
[&](){[&](){[&](){return builder.setimageColorSpace((member.imageColorSpace));}();}();}();
[&](){
            auto temp=builder.initimageExtent(imageExtent);
            return serialize_struct((member.imageExtent), temp);
            }();
[&](){return builder.setimageArrayLayers((member.imageArrayLayers));}();
[&](){[&](){[&](){return builder.setimageUsage((member.imageUsage));}();}();}();
[&](){[&](){[&](){return builder.setimageSharingMode((member.imageSharingMode));}();}();}();
[&](){return builder.setqueueFamilyIndexCount((member.queueFamilyIndexCount));}();
[&](){
            if ((member.pQueueFamilyIndices)==NULL){
                builder.disownpQueueFamilyIndices();
            return; }
        auto proto_arr=builder.initpQueueFamilyIndices();
        for(int rqZQqua=0; rqZQqua < member.queueFamilyIndexCount; rqZQqua++){
            [&](){return proto_arr.set(rqZQqua,((member.pQueueFamilyIndices)[rqZQqua]));}();
        }
        }();
[&](){[&](){[&](){return builder.setpreTransform((member.preTransform));}();}();}();
[&](){[&](){[&](){return builder.setcompositeAlpha((member.compositeAlpha));}();}();}();
[&](){[&](){[&](){return builder.setpresentMode((member.presentMode));}();}();}();
[&](){[&](){return builder.setclipped((member.clipped));}();}();
[&](){return builder.setoldSwapchain(serialize_handle(member.oldSwapchain));}();
}

    VkSwapchainCreateInfoKHR deserialize_struct(VkSwapchainCreateInfoKHR::Reader reader){
        auto result=VkSwapchainCreateInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){(result.surface)=deserialize_handle(reader.getsurface());}();
[&](){(result.minImageCount)=reader.getminImageCount();}();
[&](){[&](){[&](){(result.imageFormat)=reader.getimageFormat();}();}();}();
[&](){[&](){[&](){(result.imageColorSpace)=reader.getimageColorSpace();}();}();}();
[&](){
            auto temp=reader.getimageExtent();
            (result.imageExtent)=deserialize_struct(temp);
            }();
[&](){(result.imageArrayLayers)=reader.getimageArrayLayers();}();
[&](){[&](){[&](){(result.imageUsage)=reader.getimageUsage();}();}();}();
[&](){[&](){[&](){(result.imageSharingMode)=reader.getimageSharingMode();}();}();}();
[&](){(result.queueFamilyIndexCount)=reader.getqueueFamilyIndexCount();}();
[&](){ uint32_t* temp_NzZliok[&](){
            if (!reader.haspQueueFamilyIndices()){
                (result.pQueueFamilyIndices)=NULL;
            return; }{native_concat()}=(uint32_t*)malloc(result.queueFamilyIndexCount*sizeof(uint32_t));
        auto proto_arr=reader.getpQueueFamilyIndices(result.queueFamilyIndexCount);
        for(int JEqKTnG=0; JEqKTnG < result.queueFamilyIndexCount; JEqKTnG++){
            [&](){((result.pQueueFamilyIndices)[JEqKTnG])=proto_arr[JEqKTnG];}();
        }
        }();(result.pQueueFamilyIndices)=temp_NzZliok;}();
[&](){[&](){[&](){(result.preTransform)=reader.getpreTransform();}();}();}();
[&](){[&](){[&](){(result.compositeAlpha)=reader.getcompositeAlpha();}();}();}();
[&](){[&](){[&](){(result.presentMode)=reader.getpresentMode();}();}();}();
[&](){[&](){(result.clipped)=reader.getclipped();}();}();
[&](){(result.oldSwapchain)=deserialize_handle(reader.getoldSwapchain());}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSwapchainCreateInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSwapchainCreateInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPresentInfoKHR::Builder& builder, VkPresentInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setwaitSemaphoreCount((member.waitSemaphoreCount));}();
[&](){
            if ((member.pWaitSemaphores)==NULL){
                builder.disownpWaitSemaphores();
            return; }
        auto proto_arr=builder.initpWaitSemaphores();
        for(int UPuCjkG=0; UPuCjkG < member.waitSemaphoreCount; UPuCjkG++){
            [&](){return proto_arr.set(UPuCjkG,serialize_handle((member.pWaitSemaphores)[UPuCjkG]));}();
        }
        }();
[&](){return builder.setswapchainCount((member.swapchainCount));}();
[&](){
            if ((member.pSwapchains)==NULL){
                builder.disownpSwapchains();
            return; }
        auto proto_arr=builder.initpSwapchains();
        for(int zFXKoee=0; zFXKoee < member.swapchainCount; zFXKoee++){
            [&](){return proto_arr.set(zFXKoee,serialize_handle((member.pSwapchains)[zFXKoee]));}();
        }
        }();
[&](){
            if ((member.pImageIndices)==NULL){
                builder.disownpImageIndices();
            return; }
        auto proto_arr=builder.initpImageIndices();
        for(int uFkTWYN=0; uFkTWYN < member.swapchainCount; uFkTWYN++){
            [&](){return proto_arr.set(uFkTWYN,((member.pImageIndices)[uFkTWYN]));}();
        }
        }();
[&](){
            if ((member.pResults)==NULL){
                builder.disownpResults();
            return; }
        auto proto_arr=builder.initpResults();
        for(int bYifpDK=0; bYifpDK < member.swapchainCount; bYifpDK++){
            [&](){[&](){[&](){return proto_arr.set(bYifpDK,((member.pResults)[bYifpDK]));}();}();}();
        }
        }();
}

    VkPresentInfoKHR deserialize_struct(VkPresentInfoKHR::Reader reader){
        auto result=VkPresentInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.waitSemaphoreCount)=reader.getwaitSemaphoreCount();}();
[&](){ VkSemaphore* temp_vxBhExF[&](){
            if (!reader.haspWaitSemaphores()){
                (result.pWaitSemaphores)=NULL;
            return; }{native_concat()}=(VkSemaphore*)malloc(result.waitSemaphoreCount*sizeof(VkSemaphore));
        auto proto_arr=reader.getpWaitSemaphores(result.waitSemaphoreCount);
        for(int eowObQx=0; eowObQx < result.waitSemaphoreCount; eowObQx++){
            [&](){((result.pWaitSemaphores)[eowObQx])=deserialize_handle(proto_arr[eowObQx]);}();
        }
        }();(result.pWaitSemaphores)=temp_vxBhExF;}();
[&](){(result.swapchainCount)=reader.getswapchainCount();}();
[&](){ VkSwapchainKHR* temp_hEHQKBw[&](){
            if (!reader.haspSwapchains()){
                (result.pSwapchains)=NULL;
            return; }{native_concat()}=(VkSwapchainKHR*)malloc(result.swapchainCount*sizeof(VkSwapchainKHR));
        auto proto_arr=reader.getpSwapchains(result.swapchainCount);
        for(int KhSRwHa=0; KhSRwHa < result.swapchainCount; KhSRwHa++){
            [&](){((result.pSwapchains)[KhSRwHa])=deserialize_handle(proto_arr[KhSRwHa]);}();
        }
        }();(result.pSwapchains)=temp_hEHQKBw;}();
[&](){ uint32_t* temp_qoVkzeK[&](){
            if (!reader.haspImageIndices()){
                (result.pImageIndices)=NULL;
            return; }{native_concat()}=(uint32_t*)malloc(result.swapchainCount*sizeof(uint32_t));
        auto proto_arr=reader.getpImageIndices(result.swapchainCount);
        for(int daliJoD=0; daliJoD < result.swapchainCount; daliJoD++){
            [&](){((result.pImageIndices)[daliJoD])=proto_arr[daliJoD];}();
        }
        }();(result.pImageIndices)=temp_qoVkzeK;}();
[&](){
            if (!reader.haspResults()){
                (result.pResults)=NULL;
            return; }{native_concat()}=(VkResult*)malloc(result.swapchainCount*sizeof(VkResult));
        auto proto_arr=reader.getpResults(result.swapchainCount);
        for(int bYifpDK=0; bYifpDK < result.swapchainCount; bYifpDK++){
            [&](){[&](){[&](){((result.pResults)[bYifpDK])=proto_arr[bYifpDK];}();}();}();
        }
        }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPresentInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPresentInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDebugReportCallbackCreateInfoEXT::Builder& builder, VkDebugReportCallbackCreateInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){
            auto temp=builder.initpfnCallback(pfnCallback);
            return serialize_funcpointer((member.pfnCallback), temp);
            }();
[&](){
            auto temp=builder.initpUserData(pUserData);
            return serialize_struct((member.pUserData), temp);
            }();
}

    VkDebugReportCallbackCreateInfoEXT deserialize_struct(VkDebugReportCallbackCreateInfoEXT::Reader reader){
        auto result=VkDebugReportCallbackCreateInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){
#ifndef CLIENT
            auto temp=reader.getpfnCallback();
            (result.pfnCallback)=deserialize_funcpointer(temp);
            #endif
}();
[&](){
            auto temp=reader.getpUserData();
            (result.pUserData)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDebugReportCallbackCreateInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
builder.setPFN_vkDebugReportCallbackEXT((uintptr_t)(member.pfnCallback));
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDebugReportCallbackCreateInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();
result.pfnCallback=reader.getPFN_vkDebugReportCallbackEXT();

    return result;
    #endif
    }
    

    void serialize_struct(VkValidationFlagsEXT::Builder& builder, VkValidationFlagsEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setdisabledValidationCheckCount((member.disabledValidationCheckCount));}();
[&](){
            if ((member.pDisabledValidationChecks)==NULL){
                builder.disownpDisabledValidationChecks();
            return; }
        auto proto_arr=builder.initpDisabledValidationChecks();
        for(int jaivMZO=0; jaivMZO < member.disabledValidationCheckCount; jaivMZO++){
            [&](){[&](){[&](){return proto_arr.set(jaivMZO,((member.pDisabledValidationChecks)[jaivMZO]));}();}();}();
        }
        }();
}

    VkValidationFlagsEXT deserialize_struct(VkValidationFlagsEXT::Reader reader){
        auto result=VkValidationFlagsEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.disabledValidationCheckCount)=reader.getdisabledValidationCheckCount();}();
[&](){ VkValidationCheckEXT* temp_FfDDuBd[&](){
            if (!reader.haspDisabledValidationChecks()){
                (result.pDisabledValidationChecks)=NULL;
            return; }{native_concat()}=(VkValidationCheckEXT*)malloc(result.disabledValidationCheckCount*sizeof(VkValidationCheckEXT));
        auto proto_arr=reader.getpDisabledValidationChecks(result.disabledValidationCheckCount);
        for(int VTQHILD=0; VTQHILD < result.disabledValidationCheckCount; VTQHILD++){
            [&](){[&](){[&](){((result.pDisabledValidationChecks)[VTQHILD])=proto_arr[VTQHILD];}();}();}();
        }
        }();(result.pDisabledValidationChecks)=temp_FfDDuBd;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkValidationFlagsEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkValidationFlagsEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkValidationFeaturesEXT::Builder& builder, VkValidationFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setenabledValidationFeatureCount((member.enabledValidationFeatureCount));}();
[&](){
            if ((member.pEnabledValidationFeatures)==NULL){
                builder.disownpEnabledValidationFeatures();
            return; }
        auto proto_arr=builder.initpEnabledValidationFeatures();
        for(int ctgavwB=0; ctgavwB < member.enabledValidationFeatureCount; ctgavwB++){
            [&](){[&](){[&](){return proto_arr.set(ctgavwB,((member.pEnabledValidationFeatures)[ctgavwB]));}();}();}();
        }
        }();
[&](){return builder.setdisabledValidationFeatureCount((member.disabledValidationFeatureCount));}();
[&](){
            if ((member.pDisabledValidationFeatures)==NULL){
                builder.disownpDisabledValidationFeatures();
            return; }
        auto proto_arr=builder.initpDisabledValidationFeatures();
        for(int XEOKvrX=0; XEOKvrX < member.disabledValidationFeatureCount; XEOKvrX++){
            [&](){[&](){[&](){return proto_arr.set(XEOKvrX,((member.pDisabledValidationFeatures)[XEOKvrX]));}();}();}();
        }
        }();
}

    VkValidationFeaturesEXT deserialize_struct(VkValidationFeaturesEXT::Reader reader){
        auto result=VkValidationFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.enabledValidationFeatureCount)=reader.getenabledValidationFeatureCount();}();
[&](){ VkValidationFeatureEnableEXT* temp_OCkzFoO[&](){
            if (!reader.haspEnabledValidationFeatures()){
                (result.pEnabledValidationFeatures)=NULL;
            return; }{native_concat()}=(VkValidationFeatureEnableEXT*)malloc(result.enabledValidationFeatureCount*sizeof(VkValidationFeatureEnableEXT));
        auto proto_arr=reader.getpEnabledValidationFeatures(result.enabledValidationFeatureCount);
        for(int bCZcZYb=0; bCZcZYb < result.enabledValidationFeatureCount; bCZcZYb++){
            [&](){[&](){[&](){((result.pEnabledValidationFeatures)[bCZcZYb])=proto_arr[bCZcZYb];}();}();}();
        }
        }();(result.pEnabledValidationFeatures)=temp_OCkzFoO;}();
[&](){(result.disabledValidationFeatureCount)=reader.getdisabledValidationFeatureCount();}();
[&](){ VkValidationFeatureDisableEXT* temp_DUwYEtP[&](){
            if (!reader.haspDisabledValidationFeatures()){
                (result.pDisabledValidationFeatures)=NULL;
            return; }{native_concat()}=(VkValidationFeatureDisableEXT*)malloc(result.disabledValidationFeatureCount*sizeof(VkValidationFeatureDisableEXT));
        auto proto_arr=reader.getpDisabledValidationFeatures(result.disabledValidationFeatureCount);
        for(int wUHyvNv=0; wUHyvNv < result.disabledValidationFeatureCount; wUHyvNv++){
            [&](){[&](){[&](){((result.pDisabledValidationFeatures)[wUHyvNv])=proto_arr[wUHyvNv];}();}();}();
        }
        }();(result.pDisabledValidationFeatures)=temp_DUwYEtP;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkValidationFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkValidationFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineRasterizationStateRasterizationOrderAMD::Builder& builder, VkPipelineRasterizationStateRasterizationOrderAMD member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setrasterizationOrder((member.rasterizationOrder));}();}();}();
}

    VkPipelineRasterizationStateRasterizationOrderAMD deserialize_struct(VkPipelineRasterizationStateRasterizationOrderAMD::Reader reader){
        auto result=VkPipelineRasterizationStateRasterizationOrderAMD();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.rasterizationOrder)=reader.getrasterizationOrder();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineRasterizationStateRasterizationOrderAMD member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineRasterizationStateRasterizationOrderAMD member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDebugMarkerObjectNameInfoEXT::Builder& builder, VkDebugMarkerObjectNameInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setobjectType((member.objectType));}();}();}();
[&](){return builder.setobject((member.object));}();
[&](){
            if ((member.pObjectName)==NULL){
                builder.disownpObjectName();
            return; }
        auto proto_arr=builder.initpObjectName();
        for(int IrvYMgK=0; IrvYMgK < strlen((member.pObjectName))+1; IrvYMgK++){
            [&](){return proto_arr.set(IrvYMgK,((member.pObjectName)[IrvYMgK]));}();
        }
        }();
}

    VkDebugMarkerObjectNameInfoEXT deserialize_struct(VkDebugMarkerObjectNameInfoEXT::Reader reader){
        auto result=VkDebugMarkerObjectNameInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.objectType)=reader.getobjectType();}();}();}();
[&](){(result.object)=reader.getobject();}();
[&](){ char* temp_AUIQNis[&](){
            if (!reader.haspObjectName()){
                (result.pObjectName)=NULL;
            return; }{native_concat()}=(char*)malloc(reader.getpObjectName().size();*sizeof(char));
        auto proto_arr=reader.getpObjectName(reader.getpObjectName().size(););
        for(int vNFhQsi=0; vNFhQsi < reader.getpObjectName().size();; vNFhQsi++){
            [&](){((result.pObjectName)[vNFhQsi])=proto_arr[vNFhQsi];}();
        }
        }();(result.pObjectName)=temp_AUIQNis;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDebugMarkerObjectNameInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDebugMarkerObjectNameInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDebugMarkerObjectTagInfoEXT::Builder& builder, VkDebugMarkerObjectTagInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setobjectType((member.objectType));}();}();}();
[&](){return builder.setobject((member.object));}();
[&](){return builder.settagName((member.tagName));}();
[&](){return builder.settagSize((member.tagSize));}();
[&](){
            if ((member.pTag)==NULL){
                builder.disownpTag();
            return; }[&](){
            if (((char*)(member.pTag).pTag)==NULL){
                builder.disownpTag();
            return; }
        auto proto_arr=builder.initpTag();
        for(int RyqFIjd=0; RyqFIjd < member.tagSize; RyqFIjd++){
            [&](){return proto_arr.set(RyqFIjd,(((char*)(member.pTag).pTag)[RyqFIjd]));}();
        }
        }();}();
}

    VkDebugMarkerObjectTagInfoEXT deserialize_struct(VkDebugMarkerObjectTagInfoEXT::Reader reader){
        auto result=VkDebugMarkerObjectTagInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.objectType)=reader.getobjectType();}();}();}();
[&](){(result.object)=reader.getobject();}();
[&](){(result.tagName)=reader.gettagName();}();
[&](){(result.tagSize)=reader.gettagSize();}();
[&](){ void* temp_hwJmLWe[&](){
            if (!reader.haspTag()){
                (result.pTag)=NULL;
            return; }char* temp_BYVrBDU;[&](){
            if (!reader.haspTag()){
                (temp_BYVrBDU.pTag)=NULL;
            return; }{native_concat()}=(char*)malloc(result.tagSize*sizeof(char));
        auto proto_arr=reader.getpTag(result.tagSize);
        for(int lxDYfsn=0; lxDYfsn < result.tagSize; lxDYfsn++){
            [&](){((temp_BYVrBDU.pTag)[lxDYfsn])=proto_arr[lxDYfsn];}();
        }
        }();(result.pTag)=temp_BYVrBDU;}();(result.pTag)=temp_hwJmLWe;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDebugMarkerObjectTagInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDebugMarkerObjectTagInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDebugMarkerMarkerInfoEXT::Builder& builder, VkDebugMarkerMarkerInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            if ((member.pMarkerName)==NULL){
                builder.disownpMarkerName();
            return; }
        auto proto_arr=builder.initpMarkerName();
        for(int wSyyLJw=0; wSyyLJw < strlen((member.pMarkerName))+1; wSyyLJw++){
            [&](){return proto_arr.set(wSyyLJw,((member.pMarkerName)[wSyyLJw]));}();
        }
        }();
[&](){
        auto proto_arr=builder.initcolor();
        for(int oKnkjtQ=0; oKnkjtQ < 4; oKnkjtQ++){
            [&](){return proto_arr.set(oKnkjtQ,((member.color)[oKnkjtQ]));}();
        }
        }();
}

    VkDebugMarkerMarkerInfoEXT deserialize_struct(VkDebugMarkerMarkerInfoEXT::Reader reader){
        auto result=VkDebugMarkerMarkerInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){ char* temp_XJIlhPW[&](){
            if (!reader.haspMarkerName()){
                (result.pMarkerName)=NULL;
            return; }{native_concat()}=(char*)malloc(reader.getpMarkerName().size();*sizeof(char));
        auto proto_arr=reader.getpMarkerName(reader.getpMarkerName().size(););
        for(int GKICecd=0; GKICecd < reader.getpMarkerName().size();; GKICecd++){
            [&](){((result.pMarkerName)[GKICecd])=proto_arr[GKICecd];}();
        }
        }();(result.pMarkerName)=temp_XJIlhPW;}();
[&](){
        auto proto_arr=reader.getcolor(4);
        for(int oKnkjtQ=0; oKnkjtQ < 4; oKnkjtQ++){
            [&](){((result.color)[oKnkjtQ])=proto_arr[oKnkjtQ];}();
        }
        }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDebugMarkerMarkerInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDebugMarkerMarkerInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDedicatedAllocationImageCreateInfoNV::Builder& builder, VkDedicatedAllocationImageCreateInfoNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setdedicatedAllocation((member.dedicatedAllocation));}();}();
}

    VkDedicatedAllocationImageCreateInfoNV deserialize_struct(VkDedicatedAllocationImageCreateInfoNV::Reader reader){
        auto result=VkDedicatedAllocationImageCreateInfoNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){(result.dedicatedAllocation)=reader.getdedicatedAllocation();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDedicatedAllocationImageCreateInfoNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDedicatedAllocationImageCreateInfoNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDedicatedAllocationBufferCreateInfoNV::Builder& builder, VkDedicatedAllocationBufferCreateInfoNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setdedicatedAllocation((member.dedicatedAllocation));}();}();
}

    VkDedicatedAllocationBufferCreateInfoNV deserialize_struct(VkDedicatedAllocationBufferCreateInfoNV::Reader reader){
        auto result=VkDedicatedAllocationBufferCreateInfoNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){(result.dedicatedAllocation)=reader.getdedicatedAllocation();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDedicatedAllocationBufferCreateInfoNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDedicatedAllocationBufferCreateInfoNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDedicatedAllocationMemoryAllocateInfoNV::Builder& builder, VkDedicatedAllocationMemoryAllocateInfoNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setimage(serialize_handle(member.image));}();
[&](){return builder.setbuffer(serialize_handle(member.buffer));}();
}

    VkDedicatedAllocationMemoryAllocateInfoNV deserialize_struct(VkDedicatedAllocationMemoryAllocateInfoNV::Reader reader){
        auto result=VkDedicatedAllocationMemoryAllocateInfoNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.image)=deserialize_handle(reader.getimage());}();
[&](){(result.buffer)=deserialize_handle(reader.getbuffer());}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDedicatedAllocationMemoryAllocateInfoNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDedicatedAllocationMemoryAllocateInfoNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkExternalImageFormatPropertiesNV::Builder& builder, VkExternalImageFormatPropertiesNV member){
        
    
[&](){
            auto temp=builder.initimageFormatProperties(imageFormatProperties);
            return serialize_struct((member.imageFormatProperties), temp);
            }();
[&](){[&](){[&](){return builder.setexternalMemoryFeatures((member.externalMemoryFeatures));}();}();}();
[&](){[&](){[&](){return builder.setexportFromImportedHandleTypes((member.exportFromImportedHandleTypes));}();}();}();
[&](){[&](){[&](){return builder.setcompatibleHandleTypes((member.compatibleHandleTypes));}();}();}();
}

    VkExternalImageFormatPropertiesNV deserialize_struct(VkExternalImageFormatPropertiesNV::Reader reader){
        auto result=VkExternalImageFormatPropertiesNV();
    
[&](){
            auto temp=reader.getimageFormatProperties();
            (result.imageFormatProperties)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.externalMemoryFeatures)=reader.getexternalMemoryFeatures();}();}();}();
[&](){[&](){[&](){(result.exportFromImportedHandleTypes)=reader.getexportFromImportedHandleTypes();}();}();}();
[&](){[&](){[&](){(result.compatibleHandleTypes)=reader.getcompatibleHandleTypes();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkExternalImageFormatPropertiesNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkExternalImageFormatPropertiesNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkExternalMemoryImageCreateInfoNV::Builder& builder, VkExternalMemoryImageCreateInfoNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.sethandleTypes((member.handleTypes));}();}();}();
}

    VkExternalMemoryImageCreateInfoNV deserialize_struct(VkExternalMemoryImageCreateInfoNV::Reader reader){
        auto result=VkExternalMemoryImageCreateInfoNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.handleTypes)=reader.gethandleTypes();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkExternalMemoryImageCreateInfoNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkExternalMemoryImageCreateInfoNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkExportMemoryAllocateInfoNV::Builder& builder, VkExportMemoryAllocateInfoNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.sethandleTypes((member.handleTypes));}();}();}();
}

    VkExportMemoryAllocateInfoNV deserialize_struct(VkExportMemoryAllocateInfoNV::Reader reader){
        auto result=VkExportMemoryAllocateInfoNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.handleTypes)=reader.gethandleTypes();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkExportMemoryAllocateInfoNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkExportMemoryAllocateInfoNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV::Builder& builder, VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setdeviceGeneratedCommands((member.deviceGeneratedCommands));}();}();
}

    VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV deserialize_struct(VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV::Reader reader){
        auto result=VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.deviceGeneratedCommands)=reader.getdeviceGeneratedCommands();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV::Builder& builder, VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setdeviceGeneratedCompute((member.deviceGeneratedCompute));}();}();
[&](){[&](){return builder.setdeviceGeneratedComputePipelines((member.deviceGeneratedComputePipelines));}();}();
[&](){[&](){return builder.setdeviceGeneratedComputeCaptureReplay((member.deviceGeneratedComputeCaptureReplay));}();}();
}

    VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV deserialize_struct(VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV::Reader reader){
        auto result=VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.deviceGeneratedCompute)=reader.getdeviceGeneratedCompute();}();}();
[&](){[&](){(result.deviceGeneratedComputePipelines)=reader.getdeviceGeneratedComputePipelines();}();}();
[&](){[&](){(result.deviceGeneratedComputeCaptureReplay)=reader.getdeviceGeneratedComputeCaptureReplay();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDevicePrivateDataCreateInfo::Builder& builder, VkDevicePrivateDataCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setprivateDataSlotRequestCount((member.privateDataSlotRequestCount));}();
}

    VkDevicePrivateDataCreateInfo deserialize_struct(VkDevicePrivateDataCreateInfo::Reader reader){
        auto result=VkDevicePrivateDataCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.privateDataSlotRequestCount)=reader.getprivateDataSlotRequestCount();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDevicePrivateDataCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDevicePrivateDataCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPrivateDataSlotCreateInfo::Builder& builder, VkPrivateDataSlotCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
}

    VkPrivateDataSlotCreateInfo deserialize_struct(VkPrivateDataSlotCreateInfo::Reader reader){
        auto result=VkPrivateDataSlotCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPrivateDataSlotCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPrivateDataSlotCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDevicePrivateDataFeatures::Builder& builder, VkPhysicalDevicePrivateDataFeatures member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setprivateData((member.privateData));}();}();
}

    VkPhysicalDevicePrivateDataFeatures deserialize_struct(VkPhysicalDevicePrivateDataFeatures::Reader reader){
        auto result=VkPhysicalDevicePrivateDataFeatures();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.privateData)=reader.getprivateData();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDevicePrivateDataFeatures member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDevicePrivateDataFeatures member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV::Builder& builder, VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setmaxGraphicsShaderGroupCount((member.maxGraphicsShaderGroupCount));}();
[&](){return builder.setmaxIndirectSequenceCount((member.maxIndirectSequenceCount));}();
[&](){return builder.setmaxIndirectCommandsTokenCount((member.maxIndirectCommandsTokenCount));}();
[&](){return builder.setmaxIndirectCommandsStreamCount((member.maxIndirectCommandsStreamCount));}();
[&](){return builder.setmaxIndirectCommandsTokenOffset((member.maxIndirectCommandsTokenOffset));}();
[&](){return builder.setmaxIndirectCommandsStreamStride((member.maxIndirectCommandsStreamStride));}();
[&](){return builder.setminSequencesCountBufferOffsetAlignment((member.minSequencesCountBufferOffsetAlignment));}();
[&](){return builder.setminSequencesIndexBufferOffsetAlignment((member.minSequencesIndexBufferOffsetAlignment));}();
[&](){return builder.setminIndirectCommandsBufferOffsetAlignment((member.minIndirectCommandsBufferOffsetAlignment));}();
}

    VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV deserialize_struct(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV::Reader reader){
        auto result=VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.maxGraphicsShaderGroupCount)=reader.getmaxGraphicsShaderGroupCount();}();
[&](){(result.maxIndirectSequenceCount)=reader.getmaxIndirectSequenceCount();}();
[&](){(result.maxIndirectCommandsTokenCount)=reader.getmaxIndirectCommandsTokenCount();}();
[&](){(result.maxIndirectCommandsStreamCount)=reader.getmaxIndirectCommandsStreamCount();}();
[&](){(result.maxIndirectCommandsTokenOffset)=reader.getmaxIndirectCommandsTokenOffset();}();
[&](){(result.maxIndirectCommandsStreamStride)=reader.getmaxIndirectCommandsStreamStride();}();
[&](){(result.minSequencesCountBufferOffsetAlignment)=reader.getminSequencesCountBufferOffsetAlignment();}();
[&](){(result.minSequencesIndexBufferOffsetAlignment)=reader.getminSequencesIndexBufferOffsetAlignment();}();
[&](){(result.minIndirectCommandsBufferOffsetAlignment)=reader.getminIndirectCommandsBufferOffsetAlignment();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceMultiDrawPropertiesEXT::Builder& builder, VkPhysicalDeviceMultiDrawPropertiesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setmaxMultiDrawCount((member.maxMultiDrawCount));}();
}

    VkPhysicalDeviceMultiDrawPropertiesEXT deserialize_struct(VkPhysicalDeviceMultiDrawPropertiesEXT::Reader reader){
        auto result=VkPhysicalDeviceMultiDrawPropertiesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.maxMultiDrawCount)=reader.getmaxMultiDrawCount();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceMultiDrawPropertiesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceMultiDrawPropertiesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkGraphicsShaderGroupCreateInfoNV::Builder& builder, VkGraphicsShaderGroupCreateInfoNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setstageCount((member.stageCount));}();
[&](){
            if ((member.pStages)==NULL){
                builder.disownpStages();
            return; }
        auto proto_arr=builder.initpStages();
        for(int jHuRulk=0; jHuRulk < member.stageCount; jHuRulk++){
            [&](){
            auto temp=proto_arr[jHuRulk];
            return serialize_struct(((member.pStages)[jHuRulk]), temp);
            }();
        }
        }();
[&](){
            if ((member.pVertexInputState)==NULL){
                builder.disownpVertexInputState();
            return; }
        auto proto_arr=builder.initpVertexInputState();
        for(int wkXjKqh=0; wkXjKqh < 1; wkXjKqh++){
            [&](){
            auto temp=proto_arr[wkXjKqh];
            return serialize_struct(((member.pVertexInputState)[wkXjKqh]), temp);
            }();
        }
        }();
[&](){
            if ((member.pTessellationState)==NULL){
                builder.disownpTessellationState();
            return; }
        auto proto_arr=builder.initpTessellationState();
        for(int rSxHnEH=0; rSxHnEH < 1; rSxHnEH++){
            [&](){
            auto temp=proto_arr[rSxHnEH];
            return serialize_struct(((member.pTessellationState)[rSxHnEH]), temp);
            }();
        }
        }();
}

    VkGraphicsShaderGroupCreateInfoNV deserialize_struct(VkGraphicsShaderGroupCreateInfoNV::Reader reader){
        auto result=VkGraphicsShaderGroupCreateInfoNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.stageCount)=reader.getstageCount();}();
[&](){ VkPipelineShaderStageCreateInfo* temp_FsQxpon[&](){
            if (!reader.haspStages()){
                (result.pStages)=NULL;
            return; }{native_concat()}=(VkPipelineShaderStageCreateInfo*)malloc(result.stageCount*sizeof(VkPipelineShaderStageCreateInfo));
        auto proto_arr=reader.getpStages(result.stageCount);
        for(int XttzcgZ=0; XttzcgZ < result.stageCount; XttzcgZ++){
            [&](){
            auto temp=proto_arr[XttzcgZ];
            ((result.pStages)[XttzcgZ])=deserialize_struct(temp);
            }();
        }
        }();(result.pStages)=temp_FsQxpon;}();
[&](){ VkPipelineVertexInputStateCreateInfo* temp_GRDNOgA[&](){
            if (!reader.haspVertexInputState()){
                (result.pVertexInputState)=NULL;
            return; }{native_concat()}=(VkPipelineVertexInputStateCreateInfo*)malloc(1*sizeof(VkPipelineVertexInputStateCreateInfo));
        auto proto_arr=reader.getpVertexInputState(1);
        for(int RFpaRUE=0; RFpaRUE < 1; RFpaRUE++){
            [&](){
            auto temp=proto_arr[RFpaRUE];
            ((result.pVertexInputState)[RFpaRUE])=deserialize_struct(temp);
            }();
        }
        }();(result.pVertexInputState)=temp_GRDNOgA;}();
[&](){ VkPipelineTessellationStateCreateInfo* temp_LTmoKJi[&](){
            if (!reader.haspTessellationState()){
                (result.pTessellationState)=NULL;
            return; }{native_concat()}=(VkPipelineTessellationStateCreateInfo*)malloc(1*sizeof(VkPipelineTessellationStateCreateInfo));
        auto proto_arr=reader.getpTessellationState(1);
        for(int QktcRuM=0; QktcRuM < 1; QktcRuM++){
            [&](){
            auto temp=proto_arr[QktcRuM];
            ((result.pTessellationState)[QktcRuM])=deserialize_struct(temp);
            }();
        }
        }();(result.pTessellationState)=temp_LTmoKJi;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkGraphicsShaderGroupCreateInfoNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkGraphicsShaderGroupCreateInfoNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkGraphicsPipelineShaderGroupsCreateInfoNV::Builder& builder, VkGraphicsPipelineShaderGroupsCreateInfoNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setgroupCount((member.groupCount));}();
[&](){
            if ((member.pGroups)==NULL){
                builder.disownpGroups();
            return; }
        auto proto_arr=builder.initpGroups();
        for(int SHuCqju=0; SHuCqju < member.groupCount; SHuCqju++){
            [&](){
            auto temp=proto_arr[SHuCqju];
            return serialize_struct(((member.pGroups)[SHuCqju]), temp);
            }();
        }
        }();
[&](){return builder.setpipelineCount((member.pipelineCount));}();
[&](){
            if ((member.pPipelines)==NULL){
                builder.disownpPipelines();
            return; }
        auto proto_arr=builder.initpPipelines();
        for(int lyGUQUU=0; lyGUQUU < member.pipelineCount; lyGUQUU++){
            [&](){return proto_arr.set(lyGUQUU,serialize_handle((member.pPipelines)[lyGUQUU]));}();
        }
        }();
}

    VkGraphicsPipelineShaderGroupsCreateInfoNV deserialize_struct(VkGraphicsPipelineShaderGroupsCreateInfoNV::Reader reader){
        auto result=VkGraphicsPipelineShaderGroupsCreateInfoNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.groupCount)=reader.getgroupCount();}();
[&](){ VkGraphicsShaderGroupCreateInfoNV* temp_EyScfUH[&](){
            if (!reader.haspGroups()){
                (result.pGroups)=NULL;
            return; }{native_concat()}=(VkGraphicsShaderGroupCreateInfoNV*)malloc(result.groupCount*sizeof(VkGraphicsShaderGroupCreateInfoNV));
        auto proto_arr=reader.getpGroups(result.groupCount);
        for(int KggKLeT=0; KggKLeT < result.groupCount; KggKLeT++){
            [&](){
            auto temp=proto_arr[KggKLeT];
            ((result.pGroups)[KggKLeT])=deserialize_struct(temp);
            }();
        }
        }();(result.pGroups)=temp_EyScfUH;}();
[&](){(result.pipelineCount)=reader.getpipelineCount();}();
[&](){ VkPipeline* temp_tsZNydY[&](){
            if (!reader.haspPipelines()){
                (result.pPipelines)=NULL;
            return; }{native_concat()}=(VkPipeline*)malloc(result.pipelineCount*sizeof(VkPipeline));
        auto proto_arr=reader.getpPipelines(result.pipelineCount);
        for(int zikgMik=0; zikgMik < result.pipelineCount; zikgMik++){
            [&](){((result.pPipelines)[zikgMik])=deserialize_handle(proto_arr[zikgMik]);}();
        }
        }();(result.pPipelines)=temp_tsZNydY;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkGraphicsPipelineShaderGroupsCreateInfoNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkGraphicsPipelineShaderGroupsCreateInfoNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkBindShaderGroupIndirectCommandNV::Builder& builder, VkBindShaderGroupIndirectCommandNV member){
        
    
[&](){return builder.setgroupIndex((member.groupIndex));}();
}

    VkBindShaderGroupIndirectCommandNV deserialize_struct(VkBindShaderGroupIndirectCommandNV::Reader reader){
        auto result=VkBindShaderGroupIndirectCommandNV();
    
[&](){(result.groupIndex)=reader.getgroupIndex();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkBindShaderGroupIndirectCommandNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkBindShaderGroupIndirectCommandNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkBindIndexBufferIndirectCommandNV::Builder& builder, VkBindIndexBufferIndirectCommandNV member){
        
    
[&](){[&](){return builder.setbufferAddress((member.bufferAddress));}();}();
[&](){return builder.setsize((member.size));}();
[&](){[&](){[&](){return builder.setindexType((member.indexType));}();}();}();
}

    VkBindIndexBufferIndirectCommandNV deserialize_struct(VkBindIndexBufferIndirectCommandNV::Reader reader){
        auto result=VkBindIndexBufferIndirectCommandNV();
    
[&](){[&](){(result.bufferAddress)=reader.getbufferAddress();}();}();
[&](){(result.size)=reader.getsize();}();
[&](){[&](){[&](){(result.indexType)=reader.getindexType();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkBindIndexBufferIndirectCommandNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkBindIndexBufferIndirectCommandNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkBindVertexBufferIndirectCommandNV::Builder& builder, VkBindVertexBufferIndirectCommandNV member){
        
    
[&](){[&](){return builder.setbufferAddress((member.bufferAddress));}();}();
[&](){return builder.setsize((member.size));}();
[&](){return builder.setstride((member.stride));}();
}

    VkBindVertexBufferIndirectCommandNV deserialize_struct(VkBindVertexBufferIndirectCommandNV::Reader reader){
        auto result=VkBindVertexBufferIndirectCommandNV();
    
[&](){[&](){(result.bufferAddress)=reader.getbufferAddress();}();}();
[&](){(result.size)=reader.getsize();}();
[&](){(result.stride)=reader.getstride();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkBindVertexBufferIndirectCommandNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkBindVertexBufferIndirectCommandNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSetStateFlagsIndirectCommandNV::Builder& builder, VkSetStateFlagsIndirectCommandNV member){
        
    
[&](){return builder.setdata((member.data));}();
}

    VkSetStateFlagsIndirectCommandNV deserialize_struct(VkSetStateFlagsIndirectCommandNV::Reader reader){
        auto result=VkSetStateFlagsIndirectCommandNV();
    
[&](){(result.data)=reader.getdata();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSetStateFlagsIndirectCommandNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSetStateFlagsIndirectCommandNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkIndirectCommandsStreamNV::Builder& builder, VkIndirectCommandsStreamNV member){
        
    
[&](){return builder.setbuffer(serialize_handle(member.buffer));}();
[&](){[&](){return builder.setoffset((member.offset));}();}();
}

    VkIndirectCommandsStreamNV deserialize_struct(VkIndirectCommandsStreamNV::Reader reader){
        auto result=VkIndirectCommandsStreamNV();
    
[&](){(result.buffer)=deserialize_handle(reader.getbuffer());}();
[&](){[&](){(result.offset)=reader.getoffset();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkIndirectCommandsStreamNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkIndirectCommandsStreamNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkIndirectCommandsLayoutTokenNV::Builder& builder, VkIndirectCommandsLayoutTokenNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.settokenType((member.tokenType));}();}();}();
[&](){return builder.setstream((member.stream));}();
[&](){return builder.setoffset((member.offset));}();
[&](){return builder.setvertexBindingUnit((member.vertexBindingUnit));}();
[&](){[&](){return builder.setvertexDynamicStride((member.vertexDynamicStride));}();}();
[&](){return builder.setpushconstantPipelineLayout(serialize_handle(member.pushconstantPipelineLayout));}();
[&](){[&](){[&](){return builder.setpushconstantShaderStageFlags((member.pushconstantShaderStageFlags));}();}();}();
[&](){return builder.setpushconstantOffset((member.pushconstantOffset));}();
[&](){return builder.setpushconstantSize((member.pushconstantSize));}();
[&](){[&](){[&](){return builder.setindirectStateFlags((member.indirectStateFlags));}();}();}();
[&](){return builder.setindexTypeCount((member.indexTypeCount));}();
[&](){
            if ((member.pIndexTypes)==NULL){
                builder.disownpIndexTypes();
            return; }
        auto proto_arr=builder.initpIndexTypes();
        for(int MJIZeIG=0; MJIZeIG < member.indexTypeCount; MJIZeIG++){
            [&](){[&](){[&](){return proto_arr.set(MJIZeIG,((member.pIndexTypes)[MJIZeIG]));}();}();}();
        }
        }();
[&](){
            if ((member.pIndexTypeValues)==NULL){
                builder.disownpIndexTypeValues();
            return; }
        auto proto_arr=builder.initpIndexTypeValues();
        for(int FhKsxka=0; FhKsxka < member.indexTypeCount; FhKsxka++){
            [&](){return proto_arr.set(FhKsxka,((member.pIndexTypeValues)[FhKsxka]));}();
        }
        }();
}

    VkIndirectCommandsLayoutTokenNV deserialize_struct(VkIndirectCommandsLayoutTokenNV::Reader reader){
        auto result=VkIndirectCommandsLayoutTokenNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.tokenType)=reader.gettokenType();}();}();}();
[&](){(result.stream)=reader.getstream();}();
[&](){(result.offset)=reader.getoffset();}();
[&](){(result.vertexBindingUnit)=reader.getvertexBindingUnit();}();
[&](){[&](){(result.vertexDynamicStride)=reader.getvertexDynamicStride();}();}();
[&](){(result.pushconstantPipelineLayout)=deserialize_handle(reader.getpushconstantPipelineLayout());}();
[&](){[&](){[&](){(result.pushconstantShaderStageFlags)=reader.getpushconstantShaderStageFlags();}();}();}();
[&](){(result.pushconstantOffset)=reader.getpushconstantOffset();}();
[&](){(result.pushconstantSize)=reader.getpushconstantSize();}();
[&](){[&](){[&](){(result.indirectStateFlags)=reader.getindirectStateFlags();}();}();}();
[&](){(result.indexTypeCount)=reader.getindexTypeCount();}();
[&](){ VkIndexType* temp_bqbRaET[&](){
            if (!reader.haspIndexTypes()){
                (result.pIndexTypes)=NULL;
            return; }{native_concat()}=(VkIndexType*)malloc(result.indexTypeCount*sizeof(VkIndexType));
        auto proto_arr=reader.getpIndexTypes(result.indexTypeCount);
        for(int FoZJVOk=0; FoZJVOk < result.indexTypeCount; FoZJVOk++){
            [&](){[&](){[&](){((result.pIndexTypes)[FoZJVOk])=proto_arr[FoZJVOk];}();}();}();
        }
        }();(result.pIndexTypes)=temp_bqbRaET;}();
[&](){ uint32_t* temp_QScLeat[&](){
            if (!reader.haspIndexTypeValues()){
                (result.pIndexTypeValues)=NULL;
            return; }{native_concat()}=(uint32_t*)malloc(result.indexTypeCount*sizeof(uint32_t));
        auto proto_arr=reader.getpIndexTypeValues(result.indexTypeCount);
        for(int kfKnjmM=0; kfKnjmM < result.indexTypeCount; kfKnjmM++){
            [&](){((result.pIndexTypeValues)[kfKnjmM])=proto_arr[kfKnjmM];}();
        }
        }();(result.pIndexTypeValues)=temp_QScLeat;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkIndirectCommandsLayoutTokenNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkIndirectCommandsLayoutTokenNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkIndirectCommandsLayoutCreateInfoNV::Builder& builder, VkIndirectCommandsLayoutCreateInfoNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){[&](){[&](){return builder.setpipelineBindPoint((member.pipelineBindPoint));}();}();}();
[&](){return builder.settokenCount((member.tokenCount));}();
[&](){
            if ((member.pTokens)==NULL){
                builder.disownpTokens();
            return; }
        auto proto_arr=builder.initpTokens();
        for(int yPSEeiQ=0; yPSEeiQ < member.tokenCount; yPSEeiQ++){
            [&](){
            auto temp=proto_arr[yPSEeiQ];
            return serialize_struct(((member.pTokens)[yPSEeiQ]), temp);
            }();
        }
        }();
[&](){return builder.setstreamCount((member.streamCount));}();
[&](){
            if ((member.pStreamStrides)==NULL){
                builder.disownpStreamStrides();
            return; }
        auto proto_arr=builder.initpStreamStrides();
        for(int MyKJLOU=0; MyKJLOU < member.streamCount; MyKJLOU++){
            [&](){return proto_arr.set(MyKJLOU,((member.pStreamStrides)[MyKJLOU]));}();
        }
        }();
}

    VkIndirectCommandsLayoutCreateInfoNV deserialize_struct(VkIndirectCommandsLayoutCreateInfoNV::Reader reader){
        auto result=VkIndirectCommandsLayoutCreateInfoNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){[&](){[&](){(result.pipelineBindPoint)=reader.getpipelineBindPoint();}();}();}();
[&](){(result.tokenCount)=reader.gettokenCount();}();
[&](){ VkIndirectCommandsLayoutTokenNV* temp_opjsDQE[&](){
            if (!reader.haspTokens()){
                (result.pTokens)=NULL;
            return; }{native_concat()}=(VkIndirectCommandsLayoutTokenNV*)malloc(result.tokenCount*sizeof(VkIndirectCommandsLayoutTokenNV));
        auto proto_arr=reader.getpTokens(result.tokenCount);
        for(int QziMwaF=0; QziMwaF < result.tokenCount; QziMwaF++){
            [&](){
            auto temp=proto_arr[QziMwaF];
            ((result.pTokens)[QziMwaF])=deserialize_struct(temp);
            }();
        }
        }();(result.pTokens)=temp_opjsDQE;}();
[&](){(result.streamCount)=reader.getstreamCount();}();
[&](){ uint32_t* temp_wbpzYbd[&](){
            if (!reader.haspStreamStrides()){
                (result.pStreamStrides)=NULL;
            return; }{native_concat()}=(uint32_t*)malloc(result.streamCount*sizeof(uint32_t));
        auto proto_arr=reader.getpStreamStrides(result.streamCount);
        for(int fUQEhtt=0; fUQEhtt < result.streamCount; fUQEhtt++){
            [&](){((result.pStreamStrides)[fUQEhtt])=proto_arr[fUQEhtt];}();
        }
        }();(result.pStreamStrides)=temp_wbpzYbd;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkIndirectCommandsLayoutCreateInfoNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkIndirectCommandsLayoutCreateInfoNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkGeneratedCommandsInfoNV::Builder& builder, VkGeneratedCommandsInfoNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setpipelineBindPoint((member.pipelineBindPoint));}();}();}();
[&](){return builder.setpipeline(serialize_handle(member.pipeline));}();
[&](){return builder.setindirectCommandsLayout(serialize_handle(member.indirectCommandsLayout));}();
[&](){return builder.setstreamCount((member.streamCount));}();
[&](){
            if ((member.pStreams)==NULL){
                builder.disownpStreams();
            return; }
        auto proto_arr=builder.initpStreams();
        for(int TYeqEkQ=0; TYeqEkQ < member.streamCount; TYeqEkQ++){
            [&](){
            auto temp=proto_arr[TYeqEkQ];
            return serialize_struct(((member.pStreams)[TYeqEkQ]), temp);
            }();
        }
        }();
[&](){return builder.setsequencesCount((member.sequencesCount));}();
[&](){return builder.setpreprocessBuffer(serialize_handle(member.preprocessBuffer));}();
[&](){[&](){return builder.setpreprocessOffset((member.preprocessOffset));}();}();
[&](){[&](){return builder.setpreprocessSize((member.preprocessSize));}();}();
[&](){return builder.setsequencesCountBuffer(serialize_handle(member.sequencesCountBuffer));}();
[&](){[&](){return builder.setsequencesCountOffset((member.sequencesCountOffset));}();}();
[&](){return builder.setsequencesIndexBuffer(serialize_handle(member.sequencesIndexBuffer));}();
[&](){[&](){return builder.setsequencesIndexOffset((member.sequencesIndexOffset));}();}();
}

    VkGeneratedCommandsInfoNV deserialize_struct(VkGeneratedCommandsInfoNV::Reader reader){
        auto result=VkGeneratedCommandsInfoNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.pipelineBindPoint)=reader.getpipelineBindPoint();}();}();}();
[&](){(result.pipeline)=deserialize_handle(reader.getpipeline());}();
[&](){(result.indirectCommandsLayout)=deserialize_handle(reader.getindirectCommandsLayout());}();
[&](){(result.streamCount)=reader.getstreamCount();}();
[&](){ VkIndirectCommandsStreamNV* temp_uuukyeL[&](){
            if (!reader.haspStreams()){
                (result.pStreams)=NULL;
            return; }{native_concat()}=(VkIndirectCommandsStreamNV*)malloc(result.streamCount*sizeof(VkIndirectCommandsStreamNV));
        auto proto_arr=reader.getpStreams(result.streamCount);
        for(int rDgynwm=0; rDgynwm < result.streamCount; rDgynwm++){
            [&](){
            auto temp=proto_arr[rDgynwm];
            ((result.pStreams)[rDgynwm])=deserialize_struct(temp);
            }();
        }
        }();(result.pStreams)=temp_uuukyeL;}();
[&](){(result.sequencesCount)=reader.getsequencesCount();}();
[&](){(result.preprocessBuffer)=deserialize_handle(reader.getpreprocessBuffer());}();
[&](){[&](){(result.preprocessOffset)=reader.getpreprocessOffset();}();}();
[&](){[&](){(result.preprocessSize)=reader.getpreprocessSize();}();}();
[&](){(result.sequencesCountBuffer)=deserialize_handle(reader.getsequencesCountBuffer());}();
[&](){[&](){(result.sequencesCountOffset)=reader.getsequencesCountOffset();}();}();
[&](){(result.sequencesIndexBuffer)=deserialize_handle(reader.getsequencesIndexBuffer());}();
[&](){[&](){(result.sequencesIndexOffset)=reader.getsequencesIndexOffset();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkGeneratedCommandsInfoNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkGeneratedCommandsInfoNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkGeneratedCommandsMemoryRequirementsInfoNV::Builder& builder, VkGeneratedCommandsMemoryRequirementsInfoNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setpipelineBindPoint((member.pipelineBindPoint));}();}();}();
[&](){return builder.setpipeline(serialize_handle(member.pipeline));}();
[&](){return builder.setindirectCommandsLayout(serialize_handle(member.indirectCommandsLayout));}();
[&](){return builder.setmaxSequencesCount((member.maxSequencesCount));}();
}

    VkGeneratedCommandsMemoryRequirementsInfoNV deserialize_struct(VkGeneratedCommandsMemoryRequirementsInfoNV::Reader reader){
        auto result=VkGeneratedCommandsMemoryRequirementsInfoNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.pipelineBindPoint)=reader.getpipelineBindPoint();}();}();}();
[&](){(result.pipeline)=deserialize_handle(reader.getpipeline());}();
[&](){(result.indirectCommandsLayout)=deserialize_handle(reader.getindirectCommandsLayout());}();
[&](){(result.maxSequencesCount)=reader.getmaxSequencesCount();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkGeneratedCommandsMemoryRequirementsInfoNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkGeneratedCommandsMemoryRequirementsInfoNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineIndirectDeviceAddressInfoNV::Builder& builder, VkPipelineIndirectDeviceAddressInfoNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setpipelineBindPoint((member.pipelineBindPoint));}();}();}();
[&](){return builder.setpipeline(serialize_handle(member.pipeline));}();
}

    VkPipelineIndirectDeviceAddressInfoNV deserialize_struct(VkPipelineIndirectDeviceAddressInfoNV::Reader reader){
        auto result=VkPipelineIndirectDeviceAddressInfoNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.pipelineBindPoint)=reader.getpipelineBindPoint();}();}();}();
[&](){(result.pipeline)=deserialize_handle(reader.getpipeline());}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineIndirectDeviceAddressInfoNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineIndirectDeviceAddressInfoNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkBindPipelineIndirectCommandNV::Builder& builder, VkBindPipelineIndirectCommandNV member){
        
    
[&](){[&](){return builder.setpipelineAddress((member.pipelineAddress));}();}();
}

    VkBindPipelineIndirectCommandNV deserialize_struct(VkBindPipelineIndirectCommandNV::Reader reader){
        auto result=VkBindPipelineIndirectCommandNV();
    
[&](){[&](){(result.pipelineAddress)=reader.getpipelineAddress();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkBindPipelineIndirectCommandNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkBindPipelineIndirectCommandNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceFeatures2::Builder& builder, VkPhysicalDeviceFeatures2 member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            auto temp=builder.initfeatures(features);
            return serialize_struct((member.features), temp);
            }();
}

    VkPhysicalDeviceFeatures2 deserialize_struct(VkPhysicalDeviceFeatures2::Reader reader){
        auto result=VkPhysicalDeviceFeatures2();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getfeatures();
            (result.features)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceFeatures2 member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceFeatures2 member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceProperties2::Builder& builder, VkPhysicalDeviceProperties2 member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            auto temp=builder.initproperties(properties);
            return serialize_struct((member.properties), temp);
            }();
}

    VkPhysicalDeviceProperties2 deserialize_struct(VkPhysicalDeviceProperties2::Reader reader){
        auto result=VkPhysicalDeviceProperties2();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getproperties();
            (result.properties)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceProperties2 member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceProperties2 member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkFormatProperties2::Builder& builder, VkFormatProperties2 member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            auto temp=builder.initformatProperties(formatProperties);
            return serialize_struct((member.formatProperties), temp);
            }();
}

    VkFormatProperties2 deserialize_struct(VkFormatProperties2::Reader reader){
        auto result=VkFormatProperties2();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getformatProperties();
            (result.formatProperties)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkFormatProperties2 member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkFormatProperties2 member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkImageFormatProperties2::Builder& builder, VkImageFormatProperties2 member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            auto temp=builder.initimageFormatProperties(imageFormatProperties);
            return serialize_struct((member.imageFormatProperties), temp);
            }();
}

    VkImageFormatProperties2 deserialize_struct(VkImageFormatProperties2::Reader reader){
        auto result=VkImageFormatProperties2();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getimageFormatProperties();
            (result.imageFormatProperties)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkImageFormatProperties2 member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkImageFormatProperties2 member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceImageFormatInfo2::Builder& builder, VkPhysicalDeviceImageFormatInfo2 member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setformat((member.format));}();}();}();
[&](){[&](){[&](){return builder.settype((member.type));}();}();}();
[&](){[&](){[&](){return builder.settiling((member.tiling));}();}();}();
[&](){[&](){[&](){return builder.setusage((member.usage));}();}();}();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
}

    VkPhysicalDeviceImageFormatInfo2 deserialize_struct(VkPhysicalDeviceImageFormatInfo2::Reader reader){
        auto result=VkPhysicalDeviceImageFormatInfo2();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.format)=reader.getformat();}();}();}();
[&](){[&](){[&](){(result.type)=reader.gettype();}();}();}();
[&](){[&](){[&](){(result.tiling)=reader.gettiling();}();}();}();
[&](){[&](){[&](){(result.usage)=reader.getusage();}();}();}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceImageFormatInfo2 member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceImageFormatInfo2 member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkQueueFamilyProperties2::Builder& builder, VkQueueFamilyProperties2 member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            auto temp=builder.initqueueFamilyProperties(queueFamilyProperties);
            return serialize_struct((member.queueFamilyProperties), temp);
            }();
}

    VkQueueFamilyProperties2 deserialize_struct(VkQueueFamilyProperties2::Reader reader){
        auto result=VkQueueFamilyProperties2();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getqueueFamilyProperties();
            (result.queueFamilyProperties)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkQueueFamilyProperties2 member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkQueueFamilyProperties2 member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceMemoryProperties2::Builder& builder, VkPhysicalDeviceMemoryProperties2 member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            auto temp=builder.initmemoryProperties(memoryProperties);
            return serialize_struct((member.memoryProperties), temp);
            }();
}

    VkPhysicalDeviceMemoryProperties2 deserialize_struct(VkPhysicalDeviceMemoryProperties2::Reader reader){
        auto result=VkPhysicalDeviceMemoryProperties2();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getmemoryProperties();
            (result.memoryProperties)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceMemoryProperties2 member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceMemoryProperties2 member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSparseImageFormatProperties2::Builder& builder, VkSparseImageFormatProperties2 member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            auto temp=builder.initproperties(properties);
            return serialize_struct((member.properties), temp);
            }();
}

    VkSparseImageFormatProperties2 deserialize_struct(VkSparseImageFormatProperties2::Reader reader){
        auto result=VkSparseImageFormatProperties2();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getproperties();
            (result.properties)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSparseImageFormatProperties2 member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSparseImageFormatProperties2 member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceSparseImageFormatInfo2::Builder& builder, VkPhysicalDeviceSparseImageFormatInfo2 member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setformat((member.format));}();}();}();
[&](){[&](){[&](){return builder.settype((member.type));}();}();}();
[&](){[&](){[&](){return builder.setsamples((member.samples));}();}();}();
[&](){[&](){[&](){return builder.setusage((member.usage));}();}();}();
[&](){[&](){[&](){return builder.settiling((member.tiling));}();}();}();
}

    VkPhysicalDeviceSparseImageFormatInfo2 deserialize_struct(VkPhysicalDeviceSparseImageFormatInfo2::Reader reader){
        auto result=VkPhysicalDeviceSparseImageFormatInfo2();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.format)=reader.getformat();}();}();}();
[&](){[&](){[&](){(result.type)=reader.gettype();}();}();}();
[&](){[&](){[&](){(result.samples)=reader.getsamples();}();}();}();
[&](){[&](){[&](){(result.usage)=reader.getusage();}();}();}();
[&](){[&](){[&](){(result.tiling)=reader.gettiling();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceSparseImageFormatInfo2 member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceSparseImageFormatInfo2 member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDevicePushDescriptorPropertiesKHR::Builder& builder, VkPhysicalDevicePushDescriptorPropertiesKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setmaxPushDescriptors((member.maxPushDescriptors));}();
}

    VkPhysicalDevicePushDescriptorPropertiesKHR deserialize_struct(VkPhysicalDevicePushDescriptorPropertiesKHR::Reader reader){
        auto result=VkPhysicalDevicePushDescriptorPropertiesKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.maxPushDescriptors)=reader.getmaxPushDescriptors();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDevicePushDescriptorPropertiesKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDevicePushDescriptorPropertiesKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkConformanceVersion::Builder& builder, VkConformanceVersion member){
        
    
[&](){return builder.setmajor((member.major));}();
[&](){return builder.setminor((member.minor));}();
[&](){return builder.setsubminor((member.subminor));}();
[&](){return builder.setpatch((member.patch));}();
}

    VkConformanceVersion deserialize_struct(VkConformanceVersion::Reader reader){
        auto result=VkConformanceVersion();
    
[&](){(result.major)=reader.getmajor();}();
[&](){(result.minor)=reader.getminor();}();
[&](){(result.subminor)=reader.getsubminor();}();
[&](){(result.patch)=reader.getpatch();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkConformanceVersion member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkConformanceVersion member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceDriverProperties::Builder& builder, VkPhysicalDeviceDriverProperties member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setdriverID((member.driverID));}();}();}();
[&](){
        auto proto_arr=builder.initdriverName();
        for(int eglnjYG=0; eglnjYG < VK_MAX_DRIVER_NAME_SIZE; eglnjYG++){
            [&](){return proto_arr.set(eglnjYG,((member.driverName)[eglnjYG]));}();
        }
        }();
[&](){
        auto proto_arr=builder.initdriverInfo();
        for(int ygBYlpo=0; ygBYlpo < VK_MAX_DRIVER_INFO_SIZE; ygBYlpo++){
            [&](){return proto_arr.set(ygBYlpo,((member.driverInfo)[ygBYlpo]));}();
        }
        }();
[&](){
            auto temp=builder.initconformanceVersion(conformanceVersion);
            return serialize_struct((member.conformanceVersion), temp);
            }();
}

    VkPhysicalDeviceDriverProperties deserialize_struct(VkPhysicalDeviceDriverProperties::Reader reader){
        auto result=VkPhysicalDeviceDriverProperties();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.driverID)=reader.getdriverID();}();}();}();
[&](){
        auto proto_arr=reader.getdriverName(VK_MAX_DRIVER_NAME_SIZE);
        for(int eglnjYG=0; eglnjYG < VK_MAX_DRIVER_NAME_SIZE; eglnjYG++){
            [&](){((result.driverName)[eglnjYG])=proto_arr[eglnjYG];}();
        }
        }();
[&](){
        auto proto_arr=reader.getdriverInfo(VK_MAX_DRIVER_INFO_SIZE);
        for(int ygBYlpo=0; ygBYlpo < VK_MAX_DRIVER_INFO_SIZE; ygBYlpo++){
            [&](){((result.driverInfo)[ygBYlpo])=proto_arr[ygBYlpo];}();
        }
        }();
[&](){
            auto temp=reader.getconformanceVersion();
            (result.conformanceVersion)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceDriverProperties member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceDriverProperties member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPresentRegionsKHR::Builder& builder, VkPresentRegionsKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setswapchainCount((member.swapchainCount));}();
[&](){
            if ((member.pRegions)==NULL){
                builder.disownpRegions();
            return; }
        auto proto_arr=builder.initpRegions();
        for(int SKDbKhP=0; SKDbKhP < member.swapchainCount; SKDbKhP++){
            [&](){
            auto temp=proto_arr[SKDbKhP];
            return serialize_struct(((member.pRegions)[SKDbKhP]), temp);
            }();
        }
        }();
}

    VkPresentRegionsKHR deserialize_struct(VkPresentRegionsKHR::Reader reader){
        auto result=VkPresentRegionsKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.swapchainCount)=reader.getswapchainCount();}();
[&](){ VkPresentRegionKHR* temp_QpWCcdU[&](){
            if (!reader.haspRegions()){
                (result.pRegions)=NULL;
            return; }{native_concat()}=(VkPresentRegionKHR*)malloc(result.swapchainCount*sizeof(VkPresentRegionKHR));
        auto proto_arr=reader.getpRegions(result.swapchainCount);
        for(int eyUXdIG=0; eyUXdIG < result.swapchainCount; eyUXdIG++){
            [&](){
            auto temp=proto_arr[eyUXdIG];
            ((result.pRegions)[eyUXdIG])=deserialize_struct(temp);
            }();
        }
        }();(result.pRegions)=temp_QpWCcdU;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPresentRegionsKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPresentRegionsKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPresentRegionKHR::Builder& builder, VkPresentRegionKHR member){
        
    
[&](){return builder.setrectangleCount((member.rectangleCount));}();
[&](){
            if ((member.pRectangles)==NULL){
                builder.disownpRectangles();
            return; }
        auto proto_arr=builder.initpRectangles();
        for(int hAYHxnM=0; hAYHxnM < member.rectangleCount; hAYHxnM++){
            [&](){
            auto temp=proto_arr[hAYHxnM];
            return serialize_struct(((member.pRectangles)[hAYHxnM]), temp);
            }();
        }
        }();
}

    VkPresentRegionKHR deserialize_struct(VkPresentRegionKHR::Reader reader){
        auto result=VkPresentRegionKHR();
    
[&](){(result.rectangleCount)=reader.getrectangleCount();}();
[&](){ VkRectLayerKHR* temp_KMgHLYt[&](){
            if (!reader.haspRectangles()){
                (result.pRectangles)=NULL;
            return; }{native_concat()}=(VkRectLayerKHR*)malloc(result.rectangleCount*sizeof(VkRectLayerKHR));
        auto proto_arr=reader.getpRectangles(result.rectangleCount);
        for(int jYyfhtN=0; jYyfhtN < result.rectangleCount; jYyfhtN++){
            [&](){
            auto temp=proto_arr[jYyfhtN];
            ((result.pRectangles)[jYyfhtN])=deserialize_struct(temp);
            }();
        }
        }();(result.pRectangles)=temp_KMgHLYt;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPresentRegionKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPresentRegionKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkRectLayerKHR::Builder& builder, VkRectLayerKHR member){
        
    
[&](){
            auto temp=builder.initoffset(offset);
            return serialize_struct((member.offset), temp);
            }();
[&](){
            auto temp=builder.initextent(extent);
            return serialize_struct((member.extent), temp);
            }();
[&](){return builder.setlayer((member.layer));}();
}

    VkRectLayerKHR deserialize_struct(VkRectLayerKHR::Reader reader){
        auto result=VkRectLayerKHR();
    
[&](){
            auto temp=reader.getoffset();
            (result.offset)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getextent();
            (result.extent)=deserialize_struct(temp);
            }();
[&](){(result.layer)=reader.getlayer();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkRectLayerKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkRectLayerKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceVariablePointersFeatures::Builder& builder, VkPhysicalDeviceVariablePointersFeatures member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setvariablePointersStorageBuffer((member.variablePointersStorageBuffer));}();}();
[&](){[&](){return builder.setvariablePointers((member.variablePointers));}();}();
}

    VkPhysicalDeviceVariablePointersFeatures deserialize_struct(VkPhysicalDeviceVariablePointersFeatures::Reader reader){
        auto result=VkPhysicalDeviceVariablePointersFeatures();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.variablePointersStorageBuffer)=reader.getvariablePointersStorageBuffer();}();}();
[&](){[&](){(result.variablePointers)=reader.getvariablePointers();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceVariablePointersFeatures member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceVariablePointersFeatures member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkExternalMemoryProperties::Builder& builder, VkExternalMemoryProperties member){
        
    
[&](){[&](){[&](){return builder.setexternalMemoryFeatures((member.externalMemoryFeatures));}();}();}();
[&](){[&](){[&](){return builder.setexportFromImportedHandleTypes((member.exportFromImportedHandleTypes));}();}();}();
[&](){[&](){[&](){return builder.setcompatibleHandleTypes((member.compatibleHandleTypes));}();}();}();
}

    VkExternalMemoryProperties deserialize_struct(VkExternalMemoryProperties::Reader reader){
        auto result=VkExternalMemoryProperties();
    
[&](){[&](){[&](){(result.externalMemoryFeatures)=reader.getexternalMemoryFeatures();}();}();}();
[&](){[&](){[&](){(result.exportFromImportedHandleTypes)=reader.getexportFromImportedHandleTypes();}();}();}();
[&](){[&](){[&](){(result.compatibleHandleTypes)=reader.getcompatibleHandleTypes();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkExternalMemoryProperties member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkExternalMemoryProperties member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceExternalImageFormatInfo::Builder& builder, VkPhysicalDeviceExternalImageFormatInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.sethandleType((member.handleType));}();}();}();
}

    VkPhysicalDeviceExternalImageFormatInfo deserialize_struct(VkPhysicalDeviceExternalImageFormatInfo::Reader reader){
        auto result=VkPhysicalDeviceExternalImageFormatInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.handleType)=reader.gethandleType();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceExternalImageFormatInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceExternalImageFormatInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkExternalImageFormatProperties::Builder& builder, VkExternalImageFormatProperties member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            auto temp=builder.initexternalMemoryProperties(externalMemoryProperties);
            return serialize_struct((member.externalMemoryProperties), temp);
            }();
}

    VkExternalImageFormatProperties deserialize_struct(VkExternalImageFormatProperties::Reader reader){
        auto result=VkExternalImageFormatProperties();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getexternalMemoryProperties();
            (result.externalMemoryProperties)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkExternalImageFormatProperties member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkExternalImageFormatProperties member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceExternalBufferInfo::Builder& builder, VkPhysicalDeviceExternalBufferInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){[&](){[&](){return builder.setusage((member.usage));}();}();}();
[&](){[&](){[&](){return builder.sethandleType((member.handleType));}();}();}();
}

    VkPhysicalDeviceExternalBufferInfo deserialize_struct(VkPhysicalDeviceExternalBufferInfo::Reader reader){
        auto result=VkPhysicalDeviceExternalBufferInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){[&](){[&](){(result.usage)=reader.getusage();}();}();}();
[&](){[&](){[&](){(result.handleType)=reader.gethandleType();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceExternalBufferInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceExternalBufferInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkExternalBufferProperties::Builder& builder, VkExternalBufferProperties member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            auto temp=builder.initexternalMemoryProperties(externalMemoryProperties);
            return serialize_struct((member.externalMemoryProperties), temp);
            }();
}

    VkExternalBufferProperties deserialize_struct(VkExternalBufferProperties::Reader reader){
        auto result=VkExternalBufferProperties();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getexternalMemoryProperties();
            (result.externalMemoryProperties)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkExternalBufferProperties member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkExternalBufferProperties member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceIDProperties::Builder& builder, VkPhysicalDeviceIDProperties member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
        auto proto_arr=builder.initdeviceUUID();
        for(int LghVtrk=0; LghVtrk < VK_UUID_SIZE; LghVtrk++){
            [&](){return proto_arr.set(LghVtrk,((member.deviceUUID)[LghVtrk]));}();
        }
        }();
[&](){
        auto proto_arr=builder.initdriverUUID();
        for(int WbhUlZS=0; WbhUlZS < VK_UUID_SIZE; WbhUlZS++){
            [&](){return proto_arr.set(WbhUlZS,((member.driverUUID)[WbhUlZS]));}();
        }
        }();
[&](){
        auto proto_arr=builder.initdeviceLUID();
        for(int kitdKfY=0; kitdKfY < VK_LUID_SIZE; kitdKfY++){
            [&](){return proto_arr.set(kitdKfY,((member.deviceLUID)[kitdKfY]));}();
        }
        }();
[&](){return builder.setdeviceNodeMask((member.deviceNodeMask));}();
[&](){[&](){return builder.setdeviceLUIDValid((member.deviceLUIDValid));}();}();
}

    VkPhysicalDeviceIDProperties deserialize_struct(VkPhysicalDeviceIDProperties::Reader reader){
        auto result=VkPhysicalDeviceIDProperties();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){
        auto proto_arr=reader.getdeviceUUID(VK_UUID_SIZE);
        for(int LghVtrk=0; LghVtrk < VK_UUID_SIZE; LghVtrk++){
            [&](){((result.deviceUUID)[LghVtrk])=proto_arr[LghVtrk];}();
        }
        }();
[&](){
        auto proto_arr=reader.getdriverUUID(VK_UUID_SIZE);
        for(int WbhUlZS=0; WbhUlZS < VK_UUID_SIZE; WbhUlZS++){
            [&](){((result.driverUUID)[WbhUlZS])=proto_arr[WbhUlZS];}();
        }
        }();
[&](){
        auto proto_arr=reader.getdeviceLUID(VK_LUID_SIZE);
        for(int kitdKfY=0; kitdKfY < VK_LUID_SIZE; kitdKfY++){
            [&](){((result.deviceLUID)[kitdKfY])=proto_arr[kitdKfY];}();
        }
        }();
[&](){(result.deviceNodeMask)=reader.getdeviceNodeMask();}();
[&](){[&](){(result.deviceLUIDValid)=reader.getdeviceLUIDValid();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceIDProperties member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceIDProperties member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkExternalMemoryImageCreateInfo::Builder& builder, VkExternalMemoryImageCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.sethandleTypes((member.handleTypes));}();}();}();
}

    VkExternalMemoryImageCreateInfo deserialize_struct(VkExternalMemoryImageCreateInfo::Reader reader){
        auto result=VkExternalMemoryImageCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.handleTypes)=reader.gethandleTypes();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkExternalMemoryImageCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkExternalMemoryImageCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkExternalMemoryBufferCreateInfo::Builder& builder, VkExternalMemoryBufferCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.sethandleTypes((member.handleTypes));}();}();}();
}

    VkExternalMemoryBufferCreateInfo deserialize_struct(VkExternalMemoryBufferCreateInfo::Reader reader){
        auto result=VkExternalMemoryBufferCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.handleTypes)=reader.gethandleTypes();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkExternalMemoryBufferCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkExternalMemoryBufferCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkExportMemoryAllocateInfo::Builder& builder, VkExportMemoryAllocateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.sethandleTypes((member.handleTypes));}();}();}();
}

    VkExportMemoryAllocateInfo deserialize_struct(VkExportMemoryAllocateInfo::Reader reader){
        auto result=VkExportMemoryAllocateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.handleTypes)=reader.gethandleTypes();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkExportMemoryAllocateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkExportMemoryAllocateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkImportMemoryFdInfoKHR::Builder& builder, VkImportMemoryFdInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.sethandleType((member.handleType));}();}();}();
[&](){return builder.setfd((member.fd));}();
}

    VkImportMemoryFdInfoKHR deserialize_struct(VkImportMemoryFdInfoKHR::Reader reader){
        auto result=VkImportMemoryFdInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.handleType)=reader.gethandleType();}();}();}();
[&](){(result.fd)=reader.getfd();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkImportMemoryFdInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkImportMemoryFdInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkMemoryFdPropertiesKHR::Builder& builder, VkMemoryFdPropertiesKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setmemoryTypeBits((member.memoryTypeBits));}();
}

    VkMemoryFdPropertiesKHR deserialize_struct(VkMemoryFdPropertiesKHR::Reader reader){
        auto result=VkMemoryFdPropertiesKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.memoryTypeBits)=reader.getmemoryTypeBits();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkMemoryFdPropertiesKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkMemoryFdPropertiesKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkMemoryGetFdInfoKHR::Builder& builder, VkMemoryGetFdInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setmemory(serialize_handle(member.memory));}();
[&](){[&](){[&](){return builder.sethandleType((member.handleType));}();}();}();
}

    VkMemoryGetFdInfoKHR deserialize_struct(VkMemoryGetFdInfoKHR::Reader reader){
        auto result=VkMemoryGetFdInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.memory)=deserialize_handle(reader.getmemory());}();
[&](){[&](){[&](){(result.handleType)=reader.gethandleType();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkMemoryGetFdInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkMemoryGetFdInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceExternalSemaphoreInfo::Builder& builder, VkPhysicalDeviceExternalSemaphoreInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.sethandleType((member.handleType));}();}();}();
}

    VkPhysicalDeviceExternalSemaphoreInfo deserialize_struct(VkPhysicalDeviceExternalSemaphoreInfo::Reader reader){
        auto result=VkPhysicalDeviceExternalSemaphoreInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.handleType)=reader.gethandleType();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceExternalSemaphoreInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceExternalSemaphoreInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkExternalSemaphoreProperties::Builder& builder, VkExternalSemaphoreProperties member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setexportFromImportedHandleTypes((member.exportFromImportedHandleTypes));}();}();}();
[&](){[&](){[&](){return builder.setcompatibleHandleTypes((member.compatibleHandleTypes));}();}();}();
[&](){[&](){[&](){return builder.setexternalSemaphoreFeatures((member.externalSemaphoreFeatures));}();}();}();
}

    VkExternalSemaphoreProperties deserialize_struct(VkExternalSemaphoreProperties::Reader reader){
        auto result=VkExternalSemaphoreProperties();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.exportFromImportedHandleTypes)=reader.getexportFromImportedHandleTypes();}();}();}();
[&](){[&](){[&](){(result.compatibleHandleTypes)=reader.getcompatibleHandleTypes();}();}();}();
[&](){[&](){[&](){(result.externalSemaphoreFeatures)=reader.getexternalSemaphoreFeatures();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkExternalSemaphoreProperties member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkExternalSemaphoreProperties member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkExportSemaphoreCreateInfo::Builder& builder, VkExportSemaphoreCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.sethandleTypes((member.handleTypes));}();}();}();
}

    VkExportSemaphoreCreateInfo deserialize_struct(VkExportSemaphoreCreateInfo::Reader reader){
        auto result=VkExportSemaphoreCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.handleTypes)=reader.gethandleTypes();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkExportSemaphoreCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkExportSemaphoreCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkImportSemaphoreFdInfoKHR::Builder& builder, VkImportSemaphoreFdInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setsemaphore(serialize_handle(member.semaphore));}();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){[&](){[&](){return builder.sethandleType((member.handleType));}();}();}();
[&](){return builder.setfd((member.fd));}();
}

    VkImportSemaphoreFdInfoKHR deserialize_struct(VkImportSemaphoreFdInfoKHR::Reader reader){
        auto result=VkImportSemaphoreFdInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.semaphore)=deserialize_handle(reader.getsemaphore());}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){[&](){[&](){(result.handleType)=reader.gethandleType();}();}();}();
[&](){(result.fd)=reader.getfd();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkImportSemaphoreFdInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkImportSemaphoreFdInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSemaphoreGetFdInfoKHR::Builder& builder, VkSemaphoreGetFdInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setsemaphore(serialize_handle(member.semaphore));}();
[&](){[&](){[&](){return builder.sethandleType((member.handleType));}();}();}();
}

    VkSemaphoreGetFdInfoKHR deserialize_struct(VkSemaphoreGetFdInfoKHR::Reader reader){
        auto result=VkSemaphoreGetFdInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.semaphore)=deserialize_handle(reader.getsemaphore());}();
[&](){[&](){[&](){(result.handleType)=reader.gethandleType();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSemaphoreGetFdInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSemaphoreGetFdInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceExternalFenceInfo::Builder& builder, VkPhysicalDeviceExternalFenceInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.sethandleType((member.handleType));}();}();}();
}

    VkPhysicalDeviceExternalFenceInfo deserialize_struct(VkPhysicalDeviceExternalFenceInfo::Reader reader){
        auto result=VkPhysicalDeviceExternalFenceInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.handleType)=reader.gethandleType();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceExternalFenceInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceExternalFenceInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkExternalFenceProperties::Builder& builder, VkExternalFenceProperties member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setexportFromImportedHandleTypes((member.exportFromImportedHandleTypes));}();}();}();
[&](){[&](){[&](){return builder.setcompatibleHandleTypes((member.compatibleHandleTypes));}();}();}();
[&](){[&](){[&](){return builder.setexternalFenceFeatures((member.externalFenceFeatures));}();}();}();
}

    VkExternalFenceProperties deserialize_struct(VkExternalFenceProperties::Reader reader){
        auto result=VkExternalFenceProperties();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.exportFromImportedHandleTypes)=reader.getexportFromImportedHandleTypes();}();}();}();
[&](){[&](){[&](){(result.compatibleHandleTypes)=reader.getcompatibleHandleTypes();}();}();}();
[&](){[&](){[&](){(result.externalFenceFeatures)=reader.getexternalFenceFeatures();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkExternalFenceProperties member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkExternalFenceProperties member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkExportFenceCreateInfo::Builder& builder, VkExportFenceCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.sethandleTypes((member.handleTypes));}();}();}();
}

    VkExportFenceCreateInfo deserialize_struct(VkExportFenceCreateInfo::Reader reader){
        auto result=VkExportFenceCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.handleTypes)=reader.gethandleTypes();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkExportFenceCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkExportFenceCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkImportFenceFdInfoKHR::Builder& builder, VkImportFenceFdInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setfence(serialize_handle(member.fence));}();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){[&](){[&](){return builder.sethandleType((member.handleType));}();}();}();
[&](){return builder.setfd((member.fd));}();
}

    VkImportFenceFdInfoKHR deserialize_struct(VkImportFenceFdInfoKHR::Reader reader){
        auto result=VkImportFenceFdInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.fence)=deserialize_handle(reader.getfence());}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){[&](){[&](){(result.handleType)=reader.gethandleType();}();}();}();
[&](){(result.fd)=reader.getfd();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkImportFenceFdInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkImportFenceFdInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkFenceGetFdInfoKHR::Builder& builder, VkFenceGetFdInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setfence(serialize_handle(member.fence));}();
[&](){[&](){[&](){return builder.sethandleType((member.handleType));}();}();}();
}

    VkFenceGetFdInfoKHR deserialize_struct(VkFenceGetFdInfoKHR::Reader reader){
        auto result=VkFenceGetFdInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.fence)=deserialize_handle(reader.getfence());}();
[&](){[&](){[&](){(result.handleType)=reader.gethandleType();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkFenceGetFdInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkFenceGetFdInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceMultiviewFeatures::Builder& builder, VkPhysicalDeviceMultiviewFeatures member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setmultiview((member.multiview));}();}();
[&](){[&](){return builder.setmultiviewGeometryShader((member.multiviewGeometryShader));}();}();
[&](){[&](){return builder.setmultiviewTessellationShader((member.multiviewTessellationShader));}();}();
}

    VkPhysicalDeviceMultiviewFeatures deserialize_struct(VkPhysicalDeviceMultiviewFeatures::Reader reader){
        auto result=VkPhysicalDeviceMultiviewFeatures();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.multiview)=reader.getmultiview();}();}();
[&](){[&](){(result.multiviewGeometryShader)=reader.getmultiviewGeometryShader();}();}();
[&](){[&](){(result.multiviewTessellationShader)=reader.getmultiviewTessellationShader();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceMultiviewFeatures member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceMultiviewFeatures member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceMultiviewProperties::Builder& builder, VkPhysicalDeviceMultiviewProperties member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setmaxMultiviewViewCount((member.maxMultiviewViewCount));}();
[&](){return builder.setmaxMultiviewInstanceIndex((member.maxMultiviewInstanceIndex));}();
}

    VkPhysicalDeviceMultiviewProperties deserialize_struct(VkPhysicalDeviceMultiviewProperties::Reader reader){
        auto result=VkPhysicalDeviceMultiviewProperties();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.maxMultiviewViewCount)=reader.getmaxMultiviewViewCount();}();
[&](){(result.maxMultiviewInstanceIndex)=reader.getmaxMultiviewInstanceIndex();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceMultiviewProperties member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceMultiviewProperties member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkRenderPassMultiviewCreateInfo::Builder& builder, VkRenderPassMultiviewCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setsubpassCount((member.subpassCount));}();
[&](){
            if ((member.pViewMasks)==NULL){
                builder.disownpViewMasks();
            return; }
        auto proto_arr=builder.initpViewMasks();
        for(int CcPBXcz=0; CcPBXcz < member.subpassCount; CcPBXcz++){
            [&](){return proto_arr.set(CcPBXcz,((member.pViewMasks)[CcPBXcz]));}();
        }
        }();
[&](){return builder.setdependencyCount((member.dependencyCount));}();
[&](){
            if ((member.pViewOffsets)==NULL){
                builder.disownpViewOffsets();
            return; }
        auto proto_arr=builder.initpViewOffsets();
        for(int NmJKoPY=0; NmJKoPY < member.dependencyCount; NmJKoPY++){
            [&](){return proto_arr.set(NmJKoPY,((member.pViewOffsets)[NmJKoPY]));}();
        }
        }();
[&](){return builder.setcorrelationMaskCount((member.correlationMaskCount));}();
[&](){
            if ((member.pCorrelationMasks)==NULL){
                builder.disownpCorrelationMasks();
            return; }
        auto proto_arr=builder.initpCorrelationMasks();
        for(int uavhVgO=0; uavhVgO < member.correlationMaskCount; uavhVgO++){
            [&](){return proto_arr.set(uavhVgO,((member.pCorrelationMasks)[uavhVgO]));}();
        }
        }();
}

    VkRenderPassMultiviewCreateInfo deserialize_struct(VkRenderPassMultiviewCreateInfo::Reader reader){
        auto result=VkRenderPassMultiviewCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.subpassCount)=reader.getsubpassCount();}();
[&](){ uint32_t* temp_MKXBWtz[&](){
            if (!reader.haspViewMasks()){
                (result.pViewMasks)=NULL;
            return; }{native_concat()}=(uint32_t*)malloc(result.subpassCount*sizeof(uint32_t));
        auto proto_arr=reader.getpViewMasks(result.subpassCount);
        for(int NeCZYBs=0; NeCZYBs < result.subpassCount; NeCZYBs++){
            [&](){((result.pViewMasks)[NeCZYBs])=proto_arr[NeCZYBs];}();
        }
        }();(result.pViewMasks)=temp_MKXBWtz;}();
[&](){(result.dependencyCount)=reader.getdependencyCount();}();
[&](){ int32_t* temp_WyifyVo[&](){
            if (!reader.haspViewOffsets()){
                (result.pViewOffsets)=NULL;
            return; }{native_concat()}=(int32_t*)malloc(result.dependencyCount*sizeof(int32_t));
        auto proto_arr=reader.getpViewOffsets(result.dependencyCount);
        for(int rcsDcPf=0; rcsDcPf < result.dependencyCount; rcsDcPf++){
            [&](){((result.pViewOffsets)[rcsDcPf])=proto_arr[rcsDcPf];}();
        }
        }();(result.pViewOffsets)=temp_WyifyVo;}();
[&](){(result.correlationMaskCount)=reader.getcorrelationMaskCount();}();
[&](){ uint32_t* temp_RaPnsig[&](){
            if (!reader.haspCorrelationMasks()){
                (result.pCorrelationMasks)=NULL;
            return; }{native_concat()}=(uint32_t*)malloc(result.correlationMaskCount*sizeof(uint32_t));
        auto proto_arr=reader.getpCorrelationMasks(result.correlationMaskCount);
        for(int ZTiZeBt=0; ZTiZeBt < result.correlationMaskCount; ZTiZeBt++){
            [&](){((result.pCorrelationMasks)[ZTiZeBt])=proto_arr[ZTiZeBt];}();
        }
        }();(result.pCorrelationMasks)=temp_RaPnsig;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkRenderPassMultiviewCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkRenderPassMultiviewCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSurfaceCapabilities2EXT::Builder& builder, VkSurfaceCapabilities2EXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setminImageCount((member.minImageCount));}();
[&](){return builder.setmaxImageCount((member.maxImageCount));}();
[&](){
            auto temp=builder.initcurrentExtent(currentExtent);
            return serialize_struct((member.currentExtent), temp);
            }();
[&](){
            auto temp=builder.initminImageExtent(minImageExtent);
            return serialize_struct((member.minImageExtent), temp);
            }();
[&](){
            auto temp=builder.initmaxImageExtent(maxImageExtent);
            return serialize_struct((member.maxImageExtent), temp);
            }();
[&](){return builder.setmaxImageArrayLayers((member.maxImageArrayLayers));}();
[&](){[&](){[&](){return builder.setsupportedTransforms((member.supportedTransforms));}();}();}();
[&](){[&](){[&](){return builder.setcurrentTransform((member.currentTransform));}();}();}();
[&](){[&](){[&](){return builder.setsupportedCompositeAlpha((member.supportedCompositeAlpha));}();}();}();
[&](){[&](){[&](){return builder.setsupportedUsageFlags((member.supportedUsageFlags));}();}();}();
[&](){[&](){[&](){return builder.setsupportedSurfaceCounters((member.supportedSurfaceCounters));}();}();}();
}

    VkSurfaceCapabilities2EXT deserialize_struct(VkSurfaceCapabilities2EXT::Reader reader){
        auto result=VkSurfaceCapabilities2EXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.minImageCount)=reader.getminImageCount();}();
[&](){(result.maxImageCount)=reader.getmaxImageCount();}();
[&](){
            auto temp=reader.getcurrentExtent();
            (result.currentExtent)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getminImageExtent();
            (result.minImageExtent)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getmaxImageExtent();
            (result.maxImageExtent)=deserialize_struct(temp);
            }();
[&](){(result.maxImageArrayLayers)=reader.getmaxImageArrayLayers();}();
[&](){[&](){[&](){(result.supportedTransforms)=reader.getsupportedTransforms();}();}();}();
[&](){[&](){[&](){(result.currentTransform)=reader.getcurrentTransform();}();}();}();
[&](){[&](){[&](){(result.supportedCompositeAlpha)=reader.getsupportedCompositeAlpha();}();}();}();
[&](){[&](){[&](){(result.supportedUsageFlags)=reader.getsupportedUsageFlags();}();}();}();
[&](){[&](){[&](){(result.supportedSurfaceCounters)=reader.getsupportedSurfaceCounters();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSurfaceCapabilities2EXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSurfaceCapabilities2EXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDisplayPowerInfoEXT::Builder& builder, VkDisplayPowerInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setpowerState((member.powerState));}();}();}();
}

    VkDisplayPowerInfoEXT deserialize_struct(VkDisplayPowerInfoEXT::Reader reader){
        auto result=VkDisplayPowerInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.powerState)=reader.getpowerState();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDisplayPowerInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDisplayPowerInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDeviceEventInfoEXT::Builder& builder, VkDeviceEventInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setdeviceEvent((member.deviceEvent));}();}();}();
}

    VkDeviceEventInfoEXT deserialize_struct(VkDeviceEventInfoEXT::Reader reader){
        auto result=VkDeviceEventInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.deviceEvent)=reader.getdeviceEvent();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDeviceEventInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDeviceEventInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDisplayEventInfoEXT::Builder& builder, VkDisplayEventInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setdisplayEvent((member.displayEvent));}();}();}();
}

    VkDisplayEventInfoEXT deserialize_struct(VkDisplayEventInfoEXT::Reader reader){
        auto result=VkDisplayEventInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.displayEvent)=reader.getdisplayEvent();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDisplayEventInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDisplayEventInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSwapchainCounterCreateInfoEXT::Builder& builder, VkSwapchainCounterCreateInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setsurfaceCounters((member.surfaceCounters));}();}();}();
}

    VkSwapchainCounterCreateInfoEXT deserialize_struct(VkSwapchainCounterCreateInfoEXT::Reader reader){
        auto result=VkSwapchainCounterCreateInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.surfaceCounters)=reader.getsurfaceCounters();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSwapchainCounterCreateInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSwapchainCounterCreateInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceGroupProperties::Builder& builder, VkPhysicalDeviceGroupProperties member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setphysicalDeviceCount((member.physicalDeviceCount));}();
[&](){
        auto proto_arr=builder.initphysicalDevices();
        for(int SySGTYu=0; SySGTYu < VK_MAX_DEVICE_GROUP_SIZE; SySGTYu++){
            [&](){return proto_arr.set(SySGTYu,serialize_handle((member.physicalDevices)[SySGTYu]));}();
        }
        }();
[&](){[&](){return builder.setsubsetAllocation((member.subsetAllocation));}();}();
}

    VkPhysicalDeviceGroupProperties deserialize_struct(VkPhysicalDeviceGroupProperties::Reader reader){
        auto result=VkPhysicalDeviceGroupProperties();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.physicalDeviceCount)=reader.getphysicalDeviceCount();}();
[&](){
        auto proto_arr=reader.getphysicalDevices(VK_MAX_DEVICE_GROUP_SIZE);
        for(int SySGTYu=0; SySGTYu < VK_MAX_DEVICE_GROUP_SIZE; SySGTYu++){
            [&](){((result.physicalDevices)[SySGTYu])=deserialize_handle(proto_arr[SySGTYu]);}();
        }
        }();
[&](){[&](){(result.subsetAllocation)=reader.getsubsetAllocation();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceGroupProperties member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceGroupProperties member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkMemoryAllocateFlagsInfo::Builder& builder, VkMemoryAllocateFlagsInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){return builder.setdeviceMask((member.deviceMask));}();
}

    VkMemoryAllocateFlagsInfo deserialize_struct(VkMemoryAllocateFlagsInfo::Reader reader){
        auto result=VkMemoryAllocateFlagsInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){(result.deviceMask)=reader.getdeviceMask();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkMemoryAllocateFlagsInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkMemoryAllocateFlagsInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkBindBufferMemoryInfo::Builder& builder, VkBindBufferMemoryInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setbuffer(serialize_handle(member.buffer));}();
[&](){return builder.setmemory(serialize_handle(member.memory));}();
[&](){[&](){return builder.setmemoryOffset((member.memoryOffset));}();}();
}

    VkBindBufferMemoryInfo deserialize_struct(VkBindBufferMemoryInfo::Reader reader){
        auto result=VkBindBufferMemoryInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.buffer)=deserialize_handle(reader.getbuffer());}();
[&](){(result.memory)=deserialize_handle(reader.getmemory());}();
[&](){[&](){(result.memoryOffset)=reader.getmemoryOffset();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkBindBufferMemoryInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkBindBufferMemoryInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkBindBufferMemoryDeviceGroupInfo::Builder& builder, VkBindBufferMemoryDeviceGroupInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setdeviceIndexCount((member.deviceIndexCount));}();
[&](){
            if ((member.pDeviceIndices)==NULL){
                builder.disownpDeviceIndices();
            return; }
        auto proto_arr=builder.initpDeviceIndices();
        for(int lNKjpBY=0; lNKjpBY < member.deviceIndexCount; lNKjpBY++){
            [&](){return proto_arr.set(lNKjpBY,((member.pDeviceIndices)[lNKjpBY]));}();
        }
        }();
}

    VkBindBufferMemoryDeviceGroupInfo deserialize_struct(VkBindBufferMemoryDeviceGroupInfo::Reader reader){
        auto result=VkBindBufferMemoryDeviceGroupInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.deviceIndexCount)=reader.getdeviceIndexCount();}();
[&](){ uint32_t* temp_chbZwCP[&](){
            if (!reader.haspDeviceIndices()){
                (result.pDeviceIndices)=NULL;
            return; }{native_concat()}=(uint32_t*)malloc(result.deviceIndexCount*sizeof(uint32_t));
        auto proto_arr=reader.getpDeviceIndices(result.deviceIndexCount);
        for(int CQTEfmn=0; CQTEfmn < result.deviceIndexCount; CQTEfmn++){
            [&](){((result.pDeviceIndices)[CQTEfmn])=proto_arr[CQTEfmn];}();
        }
        }();(result.pDeviceIndices)=temp_chbZwCP;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkBindBufferMemoryDeviceGroupInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkBindBufferMemoryDeviceGroupInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkBindImageMemoryInfo::Builder& builder, VkBindImageMemoryInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setimage(serialize_handle(member.image));}();
[&](){return builder.setmemory(serialize_handle(member.memory));}();
[&](){[&](){return builder.setmemoryOffset((member.memoryOffset));}();}();
}

    VkBindImageMemoryInfo deserialize_struct(VkBindImageMemoryInfo::Reader reader){
        auto result=VkBindImageMemoryInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.image)=deserialize_handle(reader.getimage());}();
[&](){(result.memory)=deserialize_handle(reader.getmemory());}();
[&](){[&](){(result.memoryOffset)=reader.getmemoryOffset();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkBindImageMemoryInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkBindImageMemoryInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkBindImageMemoryDeviceGroupInfo::Builder& builder, VkBindImageMemoryDeviceGroupInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setdeviceIndexCount((member.deviceIndexCount));}();
[&](){
            if ((member.pDeviceIndices)==NULL){
                builder.disownpDeviceIndices();
            return; }
        auto proto_arr=builder.initpDeviceIndices();
        for(int lNKjpBY=0; lNKjpBY < member.deviceIndexCount; lNKjpBY++){
            [&](){return proto_arr.set(lNKjpBY,((member.pDeviceIndices)[lNKjpBY]));}();
        }
        }();
[&](){return builder.setsplitInstanceBindRegionCount((member.splitInstanceBindRegionCount));}();
[&](){
            if ((member.pSplitInstanceBindRegions)==NULL){
                builder.disownpSplitInstanceBindRegions();
            return; }
        auto proto_arr=builder.initpSplitInstanceBindRegions();
        for(int jPXRrxI=0; jPXRrxI < member.splitInstanceBindRegionCount; jPXRrxI++){
            [&](){
            auto temp=proto_arr[jPXRrxI];
            return serialize_struct(((member.pSplitInstanceBindRegions)[jPXRrxI]), temp);
            }();
        }
        }();
}

    VkBindImageMemoryDeviceGroupInfo deserialize_struct(VkBindImageMemoryDeviceGroupInfo::Reader reader){
        auto result=VkBindImageMemoryDeviceGroupInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.deviceIndexCount)=reader.getdeviceIndexCount();}();
[&](){ uint32_t* temp_chbZwCP[&](){
            if (!reader.haspDeviceIndices()){
                (result.pDeviceIndices)=NULL;
            return; }{native_concat()}=(uint32_t*)malloc(result.deviceIndexCount*sizeof(uint32_t));
        auto proto_arr=reader.getpDeviceIndices(result.deviceIndexCount);
        for(int CQTEfmn=0; CQTEfmn < result.deviceIndexCount; CQTEfmn++){
            [&](){((result.pDeviceIndices)[CQTEfmn])=proto_arr[CQTEfmn];}();
        }
        }();(result.pDeviceIndices)=temp_chbZwCP;}();
[&](){(result.splitInstanceBindRegionCount)=reader.getsplitInstanceBindRegionCount();}();
[&](){ VkRect2D* temp_hQtrUyT[&](){
            if (!reader.haspSplitInstanceBindRegions()){
                (result.pSplitInstanceBindRegions)=NULL;
            return; }{native_concat()}=(VkRect2D*)malloc(result.splitInstanceBindRegionCount*sizeof(VkRect2D));
        auto proto_arr=reader.getpSplitInstanceBindRegions(result.splitInstanceBindRegionCount);
        for(int btPWlWs=0; btPWlWs < result.splitInstanceBindRegionCount; btPWlWs++){
            [&](){
            auto temp=proto_arr[btPWlWs];
            ((result.pSplitInstanceBindRegions)[btPWlWs])=deserialize_struct(temp);
            }();
        }
        }();(result.pSplitInstanceBindRegions)=temp_hQtrUyT;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkBindImageMemoryDeviceGroupInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkBindImageMemoryDeviceGroupInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDeviceGroupRenderPassBeginInfo::Builder& builder, VkDeviceGroupRenderPassBeginInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setdeviceMask((member.deviceMask));}();
[&](){return builder.setdeviceRenderAreaCount((member.deviceRenderAreaCount));}();
[&](){
            if ((member.pDeviceRenderAreas)==NULL){
                builder.disownpDeviceRenderAreas();
            return; }
        auto proto_arr=builder.initpDeviceRenderAreas();
        for(int mYcOwlX=0; mYcOwlX < member.deviceRenderAreaCount; mYcOwlX++){
            [&](){
            auto temp=proto_arr[mYcOwlX];
            return serialize_struct(((member.pDeviceRenderAreas)[mYcOwlX]), temp);
            }();
        }
        }();
}

    VkDeviceGroupRenderPassBeginInfo deserialize_struct(VkDeviceGroupRenderPassBeginInfo::Reader reader){
        auto result=VkDeviceGroupRenderPassBeginInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.deviceMask)=reader.getdeviceMask();}();
[&](){(result.deviceRenderAreaCount)=reader.getdeviceRenderAreaCount();}();
[&](){ VkRect2D* temp_mDeMhZj[&](){
            if (!reader.haspDeviceRenderAreas()){
                (result.pDeviceRenderAreas)=NULL;
            return; }{native_concat()}=(VkRect2D*)malloc(result.deviceRenderAreaCount*sizeof(VkRect2D));
        auto proto_arr=reader.getpDeviceRenderAreas(result.deviceRenderAreaCount);
        for(int jdrjfsb=0; jdrjfsb < result.deviceRenderAreaCount; jdrjfsb++){
            [&](){
            auto temp=proto_arr[jdrjfsb];
            ((result.pDeviceRenderAreas)[jdrjfsb])=deserialize_struct(temp);
            }();
        }
        }();(result.pDeviceRenderAreas)=temp_mDeMhZj;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDeviceGroupRenderPassBeginInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDeviceGroupRenderPassBeginInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDeviceGroupCommandBufferBeginInfo::Builder& builder, VkDeviceGroupCommandBufferBeginInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setdeviceMask((member.deviceMask));}();
}

    VkDeviceGroupCommandBufferBeginInfo deserialize_struct(VkDeviceGroupCommandBufferBeginInfo::Reader reader){
        auto result=VkDeviceGroupCommandBufferBeginInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.deviceMask)=reader.getdeviceMask();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDeviceGroupCommandBufferBeginInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDeviceGroupCommandBufferBeginInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDeviceGroupSubmitInfo::Builder& builder, VkDeviceGroupSubmitInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setwaitSemaphoreCount((member.waitSemaphoreCount));}();
[&](){
            if ((member.pWaitSemaphoreDeviceIndices)==NULL){
                builder.disownpWaitSemaphoreDeviceIndices();
            return; }
        auto proto_arr=builder.initpWaitSemaphoreDeviceIndices();
        for(int UfAbcmF=0; UfAbcmF < member.waitSemaphoreCount; UfAbcmF++){
            [&](){return proto_arr.set(UfAbcmF,((member.pWaitSemaphoreDeviceIndices)[UfAbcmF]));}();
        }
        }();
[&](){return builder.setcommandBufferCount((member.commandBufferCount));}();
[&](){
            if ((member.pCommandBufferDeviceMasks)==NULL){
                builder.disownpCommandBufferDeviceMasks();
            return; }
        auto proto_arr=builder.initpCommandBufferDeviceMasks();
        for(int XIzJtyo=0; XIzJtyo < member.commandBufferCount; XIzJtyo++){
            [&](){return proto_arr.set(XIzJtyo,((member.pCommandBufferDeviceMasks)[XIzJtyo]));}();
        }
        }();
[&](){return builder.setsignalSemaphoreCount((member.signalSemaphoreCount));}();
[&](){
            if ((member.pSignalSemaphoreDeviceIndices)==NULL){
                builder.disownpSignalSemaphoreDeviceIndices();
            return; }
        auto proto_arr=builder.initpSignalSemaphoreDeviceIndices();
        for(int npBGdHi=0; npBGdHi < member.signalSemaphoreCount; npBGdHi++){
            [&](){return proto_arr.set(npBGdHi,((member.pSignalSemaphoreDeviceIndices)[npBGdHi]));}();
        }
        }();
}

    VkDeviceGroupSubmitInfo deserialize_struct(VkDeviceGroupSubmitInfo::Reader reader){
        auto result=VkDeviceGroupSubmitInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.waitSemaphoreCount)=reader.getwaitSemaphoreCount();}();
[&](){ uint32_t* temp_IirIDXb[&](){
            if (!reader.haspWaitSemaphoreDeviceIndices()){
                (result.pWaitSemaphoreDeviceIndices)=NULL;
            return; }{native_concat()}=(uint32_t*)malloc(result.waitSemaphoreCount*sizeof(uint32_t));
        auto proto_arr=reader.getpWaitSemaphoreDeviceIndices(result.waitSemaphoreCount);
        for(int BuBXuVG=0; BuBXuVG < result.waitSemaphoreCount; BuBXuVG++){
            [&](){((result.pWaitSemaphoreDeviceIndices)[BuBXuVG])=proto_arr[BuBXuVG];}();
        }
        }();(result.pWaitSemaphoreDeviceIndices)=temp_IirIDXb;}();
[&](){(result.commandBufferCount)=reader.getcommandBufferCount();}();
[&](){ uint32_t* temp_BwZKjQz[&](){
            if (!reader.haspCommandBufferDeviceMasks()){
                (result.pCommandBufferDeviceMasks)=NULL;
            return; }{native_concat()}=(uint32_t*)malloc(result.commandBufferCount*sizeof(uint32_t));
        auto proto_arr=reader.getpCommandBufferDeviceMasks(result.commandBufferCount);
        for(int lYHqVuX=0; lYHqVuX < result.commandBufferCount; lYHqVuX++){
            [&](){((result.pCommandBufferDeviceMasks)[lYHqVuX])=proto_arr[lYHqVuX];}();
        }
        }();(result.pCommandBufferDeviceMasks)=temp_BwZKjQz;}();
[&](){(result.signalSemaphoreCount)=reader.getsignalSemaphoreCount();}();
[&](){ uint32_t* temp_TPxcfCM[&](){
            if (!reader.haspSignalSemaphoreDeviceIndices()){
                (result.pSignalSemaphoreDeviceIndices)=NULL;
            return; }{native_concat()}=(uint32_t*)malloc(result.signalSemaphoreCount*sizeof(uint32_t));
        auto proto_arr=reader.getpSignalSemaphoreDeviceIndices(result.signalSemaphoreCount);
        for(int YFAlfKs=0; YFAlfKs < result.signalSemaphoreCount; YFAlfKs++){
            [&](){((result.pSignalSemaphoreDeviceIndices)[YFAlfKs])=proto_arr[YFAlfKs];}();
        }
        }();(result.pSignalSemaphoreDeviceIndices)=temp_TPxcfCM;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDeviceGroupSubmitInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDeviceGroupSubmitInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDeviceGroupBindSparseInfo::Builder& builder, VkDeviceGroupBindSparseInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setresourceDeviceIndex((member.resourceDeviceIndex));}();
[&](){return builder.setmemoryDeviceIndex((member.memoryDeviceIndex));}();
}

    VkDeviceGroupBindSparseInfo deserialize_struct(VkDeviceGroupBindSparseInfo::Reader reader){
        auto result=VkDeviceGroupBindSparseInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.resourceDeviceIndex)=reader.getresourceDeviceIndex();}();
[&](){(result.memoryDeviceIndex)=reader.getmemoryDeviceIndex();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDeviceGroupBindSparseInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDeviceGroupBindSparseInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDeviceGroupPresentCapabilitiesKHR::Builder& builder, VkDeviceGroupPresentCapabilitiesKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
        auto proto_arr=builder.initpresentMask();
        for(int mvXAdTF=0; mvXAdTF < VK_MAX_DEVICE_GROUP_SIZE; mvXAdTF++){
            [&](){return proto_arr.set(mvXAdTF,((member.presentMask)[mvXAdTF]));}();
        }
        }();
[&](){[&](){[&](){return builder.setmodes((member.modes));}();}();}();
}

    VkDeviceGroupPresentCapabilitiesKHR deserialize_struct(VkDeviceGroupPresentCapabilitiesKHR::Reader reader){
        auto result=VkDeviceGroupPresentCapabilitiesKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){
        auto proto_arr=reader.getpresentMask(VK_MAX_DEVICE_GROUP_SIZE);
        for(int mvXAdTF=0; mvXAdTF < VK_MAX_DEVICE_GROUP_SIZE; mvXAdTF++){
            [&](){((result.presentMask)[mvXAdTF])=proto_arr[mvXAdTF];}();
        }
        }();
[&](){[&](){[&](){(result.modes)=reader.getmodes();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDeviceGroupPresentCapabilitiesKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDeviceGroupPresentCapabilitiesKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkImageSwapchainCreateInfoKHR::Builder& builder, VkImageSwapchainCreateInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setswapchain(serialize_handle(member.swapchain));}();
}

    VkImageSwapchainCreateInfoKHR deserialize_struct(VkImageSwapchainCreateInfoKHR::Reader reader){
        auto result=VkImageSwapchainCreateInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.swapchain)=deserialize_handle(reader.getswapchain());}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkImageSwapchainCreateInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkImageSwapchainCreateInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkBindImageMemorySwapchainInfoKHR::Builder& builder, VkBindImageMemorySwapchainInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setswapchain(serialize_handle(member.swapchain));}();
[&](){return builder.setimageIndex((member.imageIndex));}();
}

    VkBindImageMemorySwapchainInfoKHR deserialize_struct(VkBindImageMemorySwapchainInfoKHR::Reader reader){
        auto result=VkBindImageMemorySwapchainInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.swapchain)=deserialize_handle(reader.getswapchain());}();
[&](){(result.imageIndex)=reader.getimageIndex();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkBindImageMemorySwapchainInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkBindImageMemorySwapchainInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkAcquireNextImageInfoKHR::Builder& builder, VkAcquireNextImageInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setswapchain(serialize_handle(member.swapchain));}();
[&](){return builder.settimeout((member.timeout));}();
[&](){return builder.setsemaphore(serialize_handle(member.semaphore));}();
[&](){return builder.setfence(serialize_handle(member.fence));}();
[&](){return builder.setdeviceMask((member.deviceMask));}();
}

    VkAcquireNextImageInfoKHR deserialize_struct(VkAcquireNextImageInfoKHR::Reader reader){
        auto result=VkAcquireNextImageInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.swapchain)=deserialize_handle(reader.getswapchain());}();
[&](){(result.timeout)=reader.gettimeout();}();
[&](){(result.semaphore)=deserialize_handle(reader.getsemaphore());}();
[&](){(result.fence)=deserialize_handle(reader.getfence());}();
[&](){(result.deviceMask)=reader.getdeviceMask();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkAcquireNextImageInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkAcquireNextImageInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDeviceGroupPresentInfoKHR::Builder& builder, VkDeviceGroupPresentInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setswapchainCount((member.swapchainCount));}();
[&](){
            if ((member.pDeviceMasks)==NULL){
                builder.disownpDeviceMasks();
            return; }
        auto proto_arr=builder.initpDeviceMasks();
        for(int xoZBOZT=0; xoZBOZT < member.swapchainCount; xoZBOZT++){
            [&](){return proto_arr.set(xoZBOZT,((member.pDeviceMasks)[xoZBOZT]));}();
        }
        }();
[&](){[&](){[&](){return builder.setmode((member.mode));}();}();}();
}

    VkDeviceGroupPresentInfoKHR deserialize_struct(VkDeviceGroupPresentInfoKHR::Reader reader){
        auto result=VkDeviceGroupPresentInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.swapchainCount)=reader.getswapchainCount();}();
[&](){ uint32_t* temp_KxCPmLC[&](){
            if (!reader.haspDeviceMasks()){
                (result.pDeviceMasks)=NULL;
            return; }{native_concat()}=(uint32_t*)malloc(result.swapchainCount*sizeof(uint32_t));
        auto proto_arr=reader.getpDeviceMasks(result.swapchainCount);
        for(int rRsChIX=0; rRsChIX < result.swapchainCount; rRsChIX++){
            [&](){((result.pDeviceMasks)[rRsChIX])=proto_arr[rRsChIX];}();
        }
        }();(result.pDeviceMasks)=temp_KxCPmLC;}();
[&](){[&](){[&](){(result.mode)=reader.getmode();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDeviceGroupPresentInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDeviceGroupPresentInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDeviceGroupDeviceCreateInfo::Builder& builder, VkDeviceGroupDeviceCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setphysicalDeviceCount((member.physicalDeviceCount));}();
[&](){
            if ((member.pPhysicalDevices)==NULL){
                builder.disownpPhysicalDevices();
            return; }
        auto proto_arr=builder.initpPhysicalDevices();
        for(int GzWtyIK=0; GzWtyIK < member.physicalDeviceCount; GzWtyIK++){
            [&](){return proto_arr.set(GzWtyIK,serialize_handle((member.pPhysicalDevices)[GzWtyIK]));}();
        }
        }();
}

    VkDeviceGroupDeviceCreateInfo deserialize_struct(VkDeviceGroupDeviceCreateInfo::Reader reader){
        auto result=VkDeviceGroupDeviceCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.physicalDeviceCount)=reader.getphysicalDeviceCount();}();
[&](){ VkPhysicalDevice* temp_HiuUJud[&](){
            if (!reader.haspPhysicalDevices()){
                (result.pPhysicalDevices)=NULL;
            return; }{native_concat()}=(VkPhysicalDevice*)malloc(result.physicalDeviceCount*sizeof(VkPhysicalDevice));
        auto proto_arr=reader.getpPhysicalDevices(result.physicalDeviceCount);
        for(int YyctNwz=0; YyctNwz < result.physicalDeviceCount; YyctNwz++){
            [&](){((result.pPhysicalDevices)[YyctNwz])=deserialize_handle(proto_arr[YyctNwz]);}();
        }
        }();(result.pPhysicalDevices)=temp_HiuUJud;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDeviceGroupDeviceCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDeviceGroupDeviceCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDeviceGroupSwapchainCreateInfoKHR::Builder& builder, VkDeviceGroupSwapchainCreateInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setmodes((member.modes));}();}();}();
}

    VkDeviceGroupSwapchainCreateInfoKHR deserialize_struct(VkDeviceGroupSwapchainCreateInfoKHR::Reader reader){
        auto result=VkDeviceGroupSwapchainCreateInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.modes)=reader.getmodes();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDeviceGroupSwapchainCreateInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDeviceGroupSwapchainCreateInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDescriptorUpdateTemplateEntry::Builder& builder, VkDescriptorUpdateTemplateEntry member){
        
    
[&](){return builder.setdstBinding((member.dstBinding));}();
[&](){return builder.setdstArrayElement((member.dstArrayElement));}();
[&](){return builder.setdescriptorCount((member.descriptorCount));}();
[&](){[&](){[&](){return builder.setdescriptorType((member.descriptorType));}();}();}();
[&](){return builder.setoffset((member.offset));}();
[&](){return builder.setstride((member.stride));}();
}

    VkDescriptorUpdateTemplateEntry deserialize_struct(VkDescriptorUpdateTemplateEntry::Reader reader){
        auto result=VkDescriptorUpdateTemplateEntry();
    
[&](){(result.dstBinding)=reader.getdstBinding();}();
[&](){(result.dstArrayElement)=reader.getdstArrayElement();}();
[&](){(result.descriptorCount)=reader.getdescriptorCount();}();
[&](){[&](){[&](){(result.descriptorType)=reader.getdescriptorType();}();}();}();
[&](){(result.offset)=reader.getoffset();}();
[&](){(result.stride)=reader.getstride();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDescriptorUpdateTemplateEntry member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDescriptorUpdateTemplateEntry member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDescriptorUpdateTemplateCreateInfo::Builder& builder, VkDescriptorUpdateTemplateCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){return builder.setdescriptorUpdateEntryCount((member.descriptorUpdateEntryCount));}();
[&](){
            if ((member.pDescriptorUpdateEntries)==NULL){
                builder.disownpDescriptorUpdateEntries();
            return; }
        auto proto_arr=builder.initpDescriptorUpdateEntries();
        for(int ueVWUaH=0; ueVWUaH < member.descriptorUpdateEntryCount; ueVWUaH++){
            [&](){
            auto temp=proto_arr[ueVWUaH];
            return serialize_struct(((member.pDescriptorUpdateEntries)[ueVWUaH]), temp);
            }();
        }
        }();
[&](){[&](){[&](){return builder.settemplateType((member.templateType));}();}();}();
[&](){return builder.setdescriptorSetLayout(serialize_handle(member.descriptorSetLayout));}();
[&](){[&](){[&](){return builder.setpipelineBindPoint((member.pipelineBindPoint));}();}();}();
[&](){return builder.setpipelineLayout(serialize_handle(member.pipelineLayout));}();
[&](){return builder.setset((member.set));}();
}

    VkDescriptorUpdateTemplateCreateInfo deserialize_struct(VkDescriptorUpdateTemplateCreateInfo::Reader reader){
        auto result=VkDescriptorUpdateTemplateCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){(result.descriptorUpdateEntryCount)=reader.getdescriptorUpdateEntryCount();}();
[&](){ VkDescriptorUpdateTemplateEntry* temp_DgvFOQy[&](){
            if (!reader.haspDescriptorUpdateEntries()){
                (result.pDescriptorUpdateEntries)=NULL;
            return; }{native_concat()}=(VkDescriptorUpdateTemplateEntry*)malloc(result.descriptorUpdateEntryCount*sizeof(VkDescriptorUpdateTemplateEntry));
        auto proto_arr=reader.getpDescriptorUpdateEntries(result.descriptorUpdateEntryCount);
        for(int HbRTThr=0; HbRTThr < result.descriptorUpdateEntryCount; HbRTThr++){
            [&](){
            auto temp=proto_arr[HbRTThr];
            ((result.pDescriptorUpdateEntries)[HbRTThr])=deserialize_struct(temp);
            }();
        }
        }();(result.pDescriptorUpdateEntries)=temp_DgvFOQy;}();
[&](){[&](){[&](){(result.templateType)=reader.gettemplateType();}();}();}();
[&](){(result.descriptorSetLayout)=deserialize_handle(reader.getdescriptorSetLayout());}();
[&](){[&](){[&](){(result.pipelineBindPoint)=reader.getpipelineBindPoint();}();}();}();
[&](){(result.pipelineLayout)=deserialize_handle(reader.getpipelineLayout());}();
[&](){(result.set)=reader.getset();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDescriptorUpdateTemplateCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDescriptorUpdateTemplateCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkXYColorEXT::Builder& builder, VkXYColorEXT member){
        
    
[&](){return builder.setx((member.x));}();
[&](){return builder.sety((member.y));}();
}

    VkXYColorEXT deserialize_struct(VkXYColorEXT::Reader reader){
        auto result=VkXYColorEXT();
    
[&](){(result.x)=reader.getx();}();
[&](){(result.y)=reader.gety();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkXYColorEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkXYColorEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDevicePresentIdFeaturesKHR::Builder& builder, VkPhysicalDevicePresentIdFeaturesKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setpresentId((member.presentId));}();}();
}

    VkPhysicalDevicePresentIdFeaturesKHR deserialize_struct(VkPhysicalDevicePresentIdFeaturesKHR::Reader reader){
        auto result=VkPhysicalDevicePresentIdFeaturesKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.presentId)=reader.getpresentId();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDevicePresentIdFeaturesKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDevicePresentIdFeaturesKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPresentIdKHR::Builder& builder, VkPresentIdKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setswapchainCount((member.swapchainCount));}();
[&](){
            if ((member.pPresentIds)==NULL){
                builder.disownpPresentIds();
            return; }
        auto proto_arr=builder.initpPresentIds();
        for(int BdqaAIv=0; BdqaAIv < member.swapchainCount; BdqaAIv++){
            [&](){return proto_arr.set(BdqaAIv,((member.pPresentIds)[BdqaAIv]));}();
        }
        }();
}

    VkPresentIdKHR deserialize_struct(VkPresentIdKHR::Reader reader){
        auto result=VkPresentIdKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.swapchainCount)=reader.getswapchainCount();}();
[&](){ uint64_t* temp_sxJhiST[&](){
            if (!reader.haspPresentIds()){
                (result.pPresentIds)=NULL;
            return; }{native_concat()}=(uint64_t*)malloc(result.swapchainCount*sizeof(uint64_t));
        auto proto_arr=reader.getpPresentIds(result.swapchainCount);
        for(int gRltcKr=0; gRltcKr < result.swapchainCount; gRltcKr++){
            [&](){((result.pPresentIds)[gRltcKr])=proto_arr[gRltcKr];}();
        }
        }();(result.pPresentIds)=temp_sxJhiST;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPresentIdKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPresentIdKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDevicePresentWaitFeaturesKHR::Builder& builder, VkPhysicalDevicePresentWaitFeaturesKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setpresentWait((member.presentWait));}();}();
}

    VkPhysicalDevicePresentWaitFeaturesKHR deserialize_struct(VkPhysicalDevicePresentWaitFeaturesKHR::Reader reader){
        auto result=VkPhysicalDevicePresentWaitFeaturesKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.presentWait)=reader.getpresentWait();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDevicePresentWaitFeaturesKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDevicePresentWaitFeaturesKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkHdrMetadataEXT::Builder& builder, VkHdrMetadataEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            auto temp=builder.initdisplayPrimaryRed(displayPrimaryRed);
            return serialize_struct((member.displayPrimaryRed), temp);
            }();
[&](){
            auto temp=builder.initdisplayPrimaryGreen(displayPrimaryGreen);
            return serialize_struct((member.displayPrimaryGreen), temp);
            }();
[&](){
            auto temp=builder.initdisplayPrimaryBlue(displayPrimaryBlue);
            return serialize_struct((member.displayPrimaryBlue), temp);
            }();
[&](){
            auto temp=builder.initwhitePoint(whitePoint);
            return serialize_struct((member.whitePoint), temp);
            }();
[&](){return builder.setmaxLuminance((member.maxLuminance));}();
[&](){return builder.setminLuminance((member.minLuminance));}();
[&](){return builder.setmaxContentLightLevel((member.maxContentLightLevel));}();
[&](){return builder.setmaxFrameAverageLightLevel((member.maxFrameAverageLightLevel));}();
}

    VkHdrMetadataEXT deserialize_struct(VkHdrMetadataEXT::Reader reader){
        auto result=VkHdrMetadataEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){
            auto temp=reader.getdisplayPrimaryRed();
            (result.displayPrimaryRed)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getdisplayPrimaryGreen();
            (result.displayPrimaryGreen)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getdisplayPrimaryBlue();
            (result.displayPrimaryBlue)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getwhitePoint();
            (result.whitePoint)=deserialize_struct(temp);
            }();
[&](){(result.maxLuminance)=reader.getmaxLuminance();}();
[&](){(result.minLuminance)=reader.getminLuminance();}();
[&](){(result.maxContentLightLevel)=reader.getmaxContentLightLevel();}();
[&](){(result.maxFrameAverageLightLevel)=reader.getmaxFrameAverageLightLevel();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkHdrMetadataEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkHdrMetadataEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDisplayNativeHdrSurfaceCapabilitiesAMD::Builder& builder, VkDisplayNativeHdrSurfaceCapabilitiesAMD member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setlocalDimmingSupport((member.localDimmingSupport));}();}();
}

    VkDisplayNativeHdrSurfaceCapabilitiesAMD deserialize_struct(VkDisplayNativeHdrSurfaceCapabilitiesAMD::Reader reader){
        auto result=VkDisplayNativeHdrSurfaceCapabilitiesAMD();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.localDimmingSupport)=reader.getlocalDimmingSupport();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDisplayNativeHdrSurfaceCapabilitiesAMD member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDisplayNativeHdrSurfaceCapabilitiesAMD member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSwapchainDisplayNativeHdrCreateInfoAMD::Builder& builder, VkSwapchainDisplayNativeHdrCreateInfoAMD member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setlocalDimmingEnable((member.localDimmingEnable));}();}();
}

    VkSwapchainDisplayNativeHdrCreateInfoAMD deserialize_struct(VkSwapchainDisplayNativeHdrCreateInfoAMD::Reader reader){
        auto result=VkSwapchainDisplayNativeHdrCreateInfoAMD();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){(result.localDimmingEnable)=reader.getlocalDimmingEnable();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSwapchainDisplayNativeHdrCreateInfoAMD member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSwapchainDisplayNativeHdrCreateInfoAMD member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkRefreshCycleDurationGOOGLE::Builder& builder, VkRefreshCycleDurationGOOGLE member){
        
    
[&](){return builder.setrefreshDuration((member.refreshDuration));}();
}

    VkRefreshCycleDurationGOOGLE deserialize_struct(VkRefreshCycleDurationGOOGLE::Reader reader){
        auto result=VkRefreshCycleDurationGOOGLE();
    
[&](){(result.refreshDuration)=reader.getrefreshDuration();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkRefreshCycleDurationGOOGLE member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkRefreshCycleDurationGOOGLE member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPastPresentationTimingGOOGLE::Builder& builder, VkPastPresentationTimingGOOGLE member){
        
    
[&](){return builder.setpresentID((member.presentID));}();
[&](){return builder.setdesiredPresentTime((member.desiredPresentTime));}();
[&](){return builder.setactualPresentTime((member.actualPresentTime));}();
[&](){return builder.setearliestPresentTime((member.earliestPresentTime));}();
[&](){return builder.setpresentMargin((member.presentMargin));}();
}

    VkPastPresentationTimingGOOGLE deserialize_struct(VkPastPresentationTimingGOOGLE::Reader reader){
        auto result=VkPastPresentationTimingGOOGLE();
    
[&](){(result.presentID)=reader.getpresentID();}();
[&](){(result.desiredPresentTime)=reader.getdesiredPresentTime();}();
[&](){(result.actualPresentTime)=reader.getactualPresentTime();}();
[&](){(result.earliestPresentTime)=reader.getearliestPresentTime();}();
[&](){(result.presentMargin)=reader.getpresentMargin();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPastPresentationTimingGOOGLE member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPastPresentationTimingGOOGLE member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPresentTimesInfoGOOGLE::Builder& builder, VkPresentTimesInfoGOOGLE member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setswapchainCount((member.swapchainCount));}();
[&](){
            if ((member.pTimes)==NULL){
                builder.disownpTimes();
            return; }
        auto proto_arr=builder.initpTimes();
        for(int cvRjTcE=0; cvRjTcE < member.swapchainCount; cvRjTcE++){
            [&](){
            auto temp=proto_arr[cvRjTcE];
            return serialize_struct(((member.pTimes)[cvRjTcE]), temp);
            }();
        }
        }();
}

    VkPresentTimesInfoGOOGLE deserialize_struct(VkPresentTimesInfoGOOGLE::Reader reader){
        auto result=VkPresentTimesInfoGOOGLE();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.swapchainCount)=reader.getswapchainCount();}();
[&](){ VkPresentTimeGOOGLE* temp_IJhMpVo[&](){
            if (!reader.haspTimes()){
                (result.pTimes)=NULL;
            return; }{native_concat()}=(VkPresentTimeGOOGLE*)malloc(result.swapchainCount*sizeof(VkPresentTimeGOOGLE));
        auto proto_arr=reader.getpTimes(result.swapchainCount);
        for(int TsPUkSX=0; TsPUkSX < result.swapchainCount; TsPUkSX++){
            [&](){
            auto temp=proto_arr[TsPUkSX];
            ((result.pTimes)[TsPUkSX])=deserialize_struct(temp);
            }();
        }
        }();(result.pTimes)=temp_IJhMpVo;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPresentTimesInfoGOOGLE member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPresentTimesInfoGOOGLE member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPresentTimeGOOGLE::Builder& builder, VkPresentTimeGOOGLE member){
        
    
[&](){return builder.setpresentID((member.presentID));}();
[&](){return builder.setdesiredPresentTime((member.desiredPresentTime));}();
}

    VkPresentTimeGOOGLE deserialize_struct(VkPresentTimeGOOGLE::Reader reader){
        auto result=VkPresentTimeGOOGLE();
    
[&](){(result.presentID)=reader.getpresentID();}();
[&](){(result.desiredPresentTime)=reader.getdesiredPresentTime();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPresentTimeGOOGLE member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPresentTimeGOOGLE member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkViewportWScalingNV::Builder& builder, VkViewportWScalingNV member){
        
    
[&](){return builder.setxcoeff((member.xcoeff));}();
[&](){return builder.setycoeff((member.ycoeff));}();
}

    VkViewportWScalingNV deserialize_struct(VkViewportWScalingNV::Reader reader){
        auto result=VkViewportWScalingNV();
    
[&](){(result.xcoeff)=reader.getxcoeff();}();
[&](){(result.ycoeff)=reader.getycoeff();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkViewportWScalingNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkViewportWScalingNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineViewportWScalingStateCreateInfoNV::Builder& builder, VkPipelineViewportWScalingStateCreateInfoNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setviewportWScalingEnable((member.viewportWScalingEnable));}();}();
[&](){return builder.setviewportCount((member.viewportCount));}();
[&](){
            if ((member.pViewportWScalings)==NULL){
                builder.disownpViewportWScalings();
            return; }
        auto proto_arr=builder.initpViewportWScalings();
        for(int EfZNYhr=0; EfZNYhr < member.viewportCount; EfZNYhr++){
            [&](){
            auto temp=proto_arr[EfZNYhr];
            return serialize_struct(((member.pViewportWScalings)[EfZNYhr]), temp);
            }();
        }
        }();
}

    VkPipelineViewportWScalingStateCreateInfoNV deserialize_struct(VkPipelineViewportWScalingStateCreateInfoNV::Reader reader){
        auto result=VkPipelineViewportWScalingStateCreateInfoNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){(result.viewportWScalingEnable)=reader.getviewportWScalingEnable();}();}();
[&](){(result.viewportCount)=reader.getviewportCount();}();
[&](){ VkViewportWScalingNV* temp_wUhaSqC[&](){
            if (!reader.haspViewportWScalings()){
                (result.pViewportWScalings)=NULL;
            return; }{native_concat()}=(VkViewportWScalingNV*)malloc(result.viewportCount*sizeof(VkViewportWScalingNV));
        auto proto_arr=reader.getpViewportWScalings(result.viewportCount);
        for(int FpWmrJX=0; FpWmrJX < result.viewportCount; FpWmrJX++){
            [&](){
            auto temp=proto_arr[FpWmrJX];
            ((result.pViewportWScalings)[FpWmrJX])=deserialize_struct(temp);
            }();
        }
        }();(result.pViewportWScalings)=temp_wUhaSqC;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineViewportWScalingStateCreateInfoNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineViewportWScalingStateCreateInfoNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkViewportSwizzleNV::Builder& builder, VkViewportSwizzleNV member){
        
    
[&](){[&](){[&](){return builder.setx((member.x));}();}();}();
[&](){[&](){[&](){return builder.sety((member.y));}();}();}();
[&](){[&](){[&](){return builder.setz((member.z));}();}();}();
[&](){[&](){[&](){return builder.setw((member.w));}();}();}();
}

    VkViewportSwizzleNV deserialize_struct(VkViewportSwizzleNV::Reader reader){
        auto result=VkViewportSwizzleNV();
    
[&](){[&](){[&](){(result.x)=reader.getx();}();}();}();
[&](){[&](){[&](){(result.y)=reader.gety();}();}();}();
[&](){[&](){[&](){(result.z)=reader.getz();}();}();}();
[&](){[&](){[&](){(result.w)=reader.getw();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkViewportSwizzleNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkViewportSwizzleNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineViewportSwizzleStateCreateInfoNV::Builder& builder, VkPipelineViewportSwizzleStateCreateInfoNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){return builder.setviewportCount((member.viewportCount));}();
[&](){
            if ((member.pViewportSwizzles)==NULL){
                builder.disownpViewportSwizzles();
            return; }
        auto proto_arr=builder.initpViewportSwizzles();
        for(int JmIiIjF=0; JmIiIjF < member.viewportCount; JmIiIjF++){
            [&](){
            auto temp=proto_arr[JmIiIjF];
            return serialize_struct(((member.pViewportSwizzles)[JmIiIjF]), temp);
            }();
        }
        }();
}

    VkPipelineViewportSwizzleStateCreateInfoNV deserialize_struct(VkPipelineViewportSwizzleStateCreateInfoNV::Reader reader){
        auto result=VkPipelineViewportSwizzleStateCreateInfoNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){(result.viewportCount)=reader.getviewportCount();}();
[&](){ VkViewportSwizzleNV* temp_MGDyAkt[&](){
            if (!reader.haspViewportSwizzles()){
                (result.pViewportSwizzles)=NULL;
            return; }{native_concat()}=(VkViewportSwizzleNV*)malloc(result.viewportCount*sizeof(VkViewportSwizzleNV));
        auto proto_arr=reader.getpViewportSwizzles(result.viewportCount);
        for(int cnyoCkA=0; cnyoCkA < result.viewportCount; cnyoCkA++){
            [&](){
            auto temp=proto_arr[cnyoCkA];
            ((result.pViewportSwizzles)[cnyoCkA])=deserialize_struct(temp);
            }();
        }
        }();(result.pViewportSwizzles)=temp_MGDyAkt;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineViewportSwizzleStateCreateInfoNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineViewportSwizzleStateCreateInfoNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceDiscardRectanglePropertiesEXT::Builder& builder, VkPhysicalDeviceDiscardRectanglePropertiesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setmaxDiscardRectangles((member.maxDiscardRectangles));}();
}

    VkPhysicalDeviceDiscardRectanglePropertiesEXT deserialize_struct(VkPhysicalDeviceDiscardRectanglePropertiesEXT::Reader reader){
        auto result=VkPhysicalDeviceDiscardRectanglePropertiesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.maxDiscardRectangles)=reader.getmaxDiscardRectangles();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceDiscardRectanglePropertiesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceDiscardRectanglePropertiesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineDiscardRectangleStateCreateInfoEXT::Builder& builder, VkPipelineDiscardRectangleStateCreateInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){[&](){[&](){return builder.setdiscardRectangleMode((member.discardRectangleMode));}();}();}();
[&](){return builder.setdiscardRectangleCount((member.discardRectangleCount));}();
[&](){
            if ((member.pDiscardRectangles)==NULL){
                builder.disownpDiscardRectangles();
            return; }
        auto proto_arr=builder.initpDiscardRectangles();
        for(int utzawpH=0; utzawpH < member.discardRectangleCount; utzawpH++){
            [&](){
            auto temp=proto_arr[utzawpH];
            return serialize_struct(((member.pDiscardRectangles)[utzawpH]), temp);
            }();
        }
        }();
}

    VkPipelineDiscardRectangleStateCreateInfoEXT deserialize_struct(VkPipelineDiscardRectangleStateCreateInfoEXT::Reader reader){
        auto result=VkPipelineDiscardRectangleStateCreateInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){[&](){[&](){(result.discardRectangleMode)=reader.getdiscardRectangleMode();}();}();}();
[&](){(result.discardRectangleCount)=reader.getdiscardRectangleCount();}();
[&](){ VkRect2D* temp_qvjcnOw[&](){
            if (!reader.haspDiscardRectangles()){
                (result.pDiscardRectangles)=NULL;
            return; }{native_concat()}=(VkRect2D*)malloc(result.discardRectangleCount*sizeof(VkRect2D));
        auto proto_arr=reader.getpDiscardRectangles(result.discardRectangleCount);
        for(int xzQKeqP=0; xzQKeqP < result.discardRectangleCount; xzQKeqP++){
            [&](){
            auto temp=proto_arr[xzQKeqP];
            ((result.pDiscardRectangles)[xzQKeqP])=deserialize_struct(temp);
            }();
        }
        }();(result.pDiscardRectangles)=temp_qvjcnOw;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineDiscardRectangleStateCreateInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineDiscardRectangleStateCreateInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX::Builder& builder, VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setperViewPositionAllComponents((member.perViewPositionAllComponents));}();}();
}

    VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX deserialize_struct(VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX::Reader reader){
        auto result=VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.perViewPositionAllComponents)=reader.getperViewPositionAllComponents();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkInputAttachmentAspectReference::Builder& builder, VkInputAttachmentAspectReference member){
        
    
[&](){return builder.setsubpass((member.subpass));}();
[&](){return builder.setinputAttachmentIndex((member.inputAttachmentIndex));}();
[&](){[&](){[&](){return builder.setaspectMask((member.aspectMask));}();}();}();
}

    VkInputAttachmentAspectReference deserialize_struct(VkInputAttachmentAspectReference::Reader reader){
        auto result=VkInputAttachmentAspectReference();
    
[&](){(result.subpass)=reader.getsubpass();}();
[&](){(result.inputAttachmentIndex)=reader.getinputAttachmentIndex();}();
[&](){[&](){[&](){(result.aspectMask)=reader.getaspectMask();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkInputAttachmentAspectReference member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkInputAttachmentAspectReference member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkRenderPassInputAttachmentAspectCreateInfo::Builder& builder, VkRenderPassInputAttachmentAspectCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setaspectReferenceCount((member.aspectReferenceCount));}();
[&](){
            if ((member.pAspectReferences)==NULL){
                builder.disownpAspectReferences();
            return; }
        auto proto_arr=builder.initpAspectReferences();
        for(int rIgAnwx=0; rIgAnwx < member.aspectReferenceCount; rIgAnwx++){
            [&](){
            auto temp=proto_arr[rIgAnwx];
            return serialize_struct(((member.pAspectReferences)[rIgAnwx]), temp);
            }();
        }
        }();
}

    VkRenderPassInputAttachmentAspectCreateInfo deserialize_struct(VkRenderPassInputAttachmentAspectCreateInfo::Reader reader){
        auto result=VkRenderPassInputAttachmentAspectCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.aspectReferenceCount)=reader.getaspectReferenceCount();}();
[&](){ VkInputAttachmentAspectReference* temp_QSYjiIr[&](){
            if (!reader.haspAspectReferences()){
                (result.pAspectReferences)=NULL;
            return; }{native_concat()}=(VkInputAttachmentAspectReference*)malloc(result.aspectReferenceCount*sizeof(VkInputAttachmentAspectReference));
        auto proto_arr=reader.getpAspectReferences(result.aspectReferenceCount);
        for(int FZlDMBF=0; FZlDMBF < result.aspectReferenceCount; FZlDMBF++){
            [&](){
            auto temp=proto_arr[FZlDMBF];
            ((result.pAspectReferences)[FZlDMBF])=deserialize_struct(temp);
            }();
        }
        }();(result.pAspectReferences)=temp_QSYjiIr;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkRenderPassInputAttachmentAspectCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkRenderPassInputAttachmentAspectCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceSurfaceInfo2KHR::Builder& builder, VkPhysicalDeviceSurfaceInfo2KHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setsurface(serialize_handle(member.surface));}();
}

    VkPhysicalDeviceSurfaceInfo2KHR deserialize_struct(VkPhysicalDeviceSurfaceInfo2KHR::Reader reader){
        auto result=VkPhysicalDeviceSurfaceInfo2KHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.surface)=deserialize_handle(reader.getsurface());}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceSurfaceInfo2KHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceSurfaceInfo2KHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSurfaceCapabilities2KHR::Builder& builder, VkSurfaceCapabilities2KHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            auto temp=builder.initsurfaceCapabilities(surfaceCapabilities);
            return serialize_struct((member.surfaceCapabilities), temp);
            }();
}

    VkSurfaceCapabilities2KHR deserialize_struct(VkSurfaceCapabilities2KHR::Reader reader){
        auto result=VkSurfaceCapabilities2KHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getsurfaceCapabilities();
            (result.surfaceCapabilities)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSurfaceCapabilities2KHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSurfaceCapabilities2KHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSurfaceFormat2KHR::Builder& builder, VkSurfaceFormat2KHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            auto temp=builder.initsurfaceFormat(surfaceFormat);
            return serialize_struct((member.surfaceFormat), temp);
            }();
}

    VkSurfaceFormat2KHR deserialize_struct(VkSurfaceFormat2KHR::Reader reader){
        auto result=VkSurfaceFormat2KHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getsurfaceFormat();
            (result.surfaceFormat)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSurfaceFormat2KHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSurfaceFormat2KHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDisplayProperties2KHR::Builder& builder, VkDisplayProperties2KHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            auto temp=builder.initdisplayProperties(displayProperties);
            return serialize_struct((member.displayProperties), temp);
            }();
}

    VkDisplayProperties2KHR deserialize_struct(VkDisplayProperties2KHR::Reader reader){
        auto result=VkDisplayProperties2KHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getdisplayProperties();
            (result.displayProperties)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDisplayProperties2KHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDisplayProperties2KHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDisplayPlaneProperties2KHR::Builder& builder, VkDisplayPlaneProperties2KHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            auto temp=builder.initdisplayPlaneProperties(displayPlaneProperties);
            return serialize_struct((member.displayPlaneProperties), temp);
            }();
}

    VkDisplayPlaneProperties2KHR deserialize_struct(VkDisplayPlaneProperties2KHR::Reader reader){
        auto result=VkDisplayPlaneProperties2KHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getdisplayPlaneProperties();
            (result.displayPlaneProperties)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDisplayPlaneProperties2KHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDisplayPlaneProperties2KHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDisplayModeProperties2KHR::Builder& builder, VkDisplayModeProperties2KHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            auto temp=builder.initdisplayModeProperties(displayModeProperties);
            return serialize_struct((member.displayModeProperties), temp);
            }();
}

    VkDisplayModeProperties2KHR deserialize_struct(VkDisplayModeProperties2KHR::Reader reader){
        auto result=VkDisplayModeProperties2KHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getdisplayModeProperties();
            (result.displayModeProperties)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDisplayModeProperties2KHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDisplayModeProperties2KHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDisplayPlaneInfo2KHR::Builder& builder, VkDisplayPlaneInfo2KHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setmode(serialize_handle(member.mode));}();
[&](){return builder.setplaneIndex((member.planeIndex));}();
}

    VkDisplayPlaneInfo2KHR deserialize_struct(VkDisplayPlaneInfo2KHR::Reader reader){
        auto result=VkDisplayPlaneInfo2KHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.mode)=deserialize_handle(reader.getmode());}();
[&](){(result.planeIndex)=reader.getplaneIndex();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDisplayPlaneInfo2KHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDisplayPlaneInfo2KHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDisplayPlaneCapabilities2KHR::Builder& builder, VkDisplayPlaneCapabilities2KHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            auto temp=builder.initcapabilities(capabilities);
            return serialize_struct((member.capabilities), temp);
            }();
}

    VkDisplayPlaneCapabilities2KHR deserialize_struct(VkDisplayPlaneCapabilities2KHR::Reader reader){
        auto result=VkDisplayPlaneCapabilities2KHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getcapabilities();
            (result.capabilities)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDisplayPlaneCapabilities2KHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDisplayPlaneCapabilities2KHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSharedPresentSurfaceCapabilitiesKHR::Builder& builder, VkSharedPresentSurfaceCapabilitiesKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setsharedPresentSupportedUsageFlags((member.sharedPresentSupportedUsageFlags));}();}();}();
}

    VkSharedPresentSurfaceCapabilitiesKHR deserialize_struct(VkSharedPresentSurfaceCapabilitiesKHR::Reader reader){
        auto result=VkSharedPresentSurfaceCapabilitiesKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.sharedPresentSupportedUsageFlags)=reader.getsharedPresentSupportedUsageFlags();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSharedPresentSurfaceCapabilitiesKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSharedPresentSurfaceCapabilitiesKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDevice16BitStorageFeatures::Builder& builder, VkPhysicalDevice16BitStorageFeatures member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setstorageBuffer16BitAccess((member.storageBuffer16BitAccess));}();}();
[&](){[&](){return builder.setuniformAndStorageBuffer16BitAccess((member.uniformAndStorageBuffer16BitAccess));}();}();
[&](){[&](){return builder.setstoragePushConstant16((member.storagePushConstant16));}();}();
[&](){[&](){return builder.setstorageInputOutput16((member.storageInputOutput16));}();}();
}

    VkPhysicalDevice16BitStorageFeatures deserialize_struct(VkPhysicalDevice16BitStorageFeatures::Reader reader){
        auto result=VkPhysicalDevice16BitStorageFeatures();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.storageBuffer16BitAccess)=reader.getstorageBuffer16BitAccess();}();}();
[&](){[&](){(result.uniformAndStorageBuffer16BitAccess)=reader.getuniformAndStorageBuffer16BitAccess();}();}();
[&](){[&](){(result.storagePushConstant16)=reader.getstoragePushConstant16();}();}();
[&](){[&](){(result.storageInputOutput16)=reader.getstorageInputOutput16();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDevice16BitStorageFeatures member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDevice16BitStorageFeatures member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceSubgroupProperties::Builder& builder, VkPhysicalDeviceSubgroupProperties member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setsubgroupSize((member.subgroupSize));}();
[&](){[&](){[&](){return builder.setsupportedStages((member.supportedStages));}();}();}();
[&](){[&](){[&](){return builder.setsupportedOperations((member.supportedOperations));}();}();}();
[&](){[&](){return builder.setquadOperationsInAllStages((member.quadOperationsInAllStages));}();}();
}

    VkPhysicalDeviceSubgroupProperties deserialize_struct(VkPhysicalDeviceSubgroupProperties::Reader reader){
        auto result=VkPhysicalDeviceSubgroupProperties();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.subgroupSize)=reader.getsubgroupSize();}();
[&](){[&](){[&](){(result.supportedStages)=reader.getsupportedStages();}();}();}();
[&](){[&](){[&](){(result.supportedOperations)=reader.getsupportedOperations();}();}();}();
[&](){[&](){(result.quadOperationsInAllStages)=reader.getquadOperationsInAllStages();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceSubgroupProperties member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceSubgroupProperties member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures::Builder& builder, VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setshaderSubgroupExtendedTypes((member.shaderSubgroupExtendedTypes));}();}();
}

    VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures deserialize_struct(VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures::Reader reader){
        auto result=VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.shaderSubgroupExtendedTypes)=reader.getshaderSubgroupExtendedTypes();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkBufferMemoryRequirementsInfo2::Builder& builder, VkBufferMemoryRequirementsInfo2 member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setbuffer(serialize_handle(member.buffer));}();
}

    VkBufferMemoryRequirementsInfo2 deserialize_struct(VkBufferMemoryRequirementsInfo2::Reader reader){
        auto result=VkBufferMemoryRequirementsInfo2();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.buffer)=deserialize_handle(reader.getbuffer());}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkBufferMemoryRequirementsInfo2 member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkBufferMemoryRequirementsInfo2 member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDeviceBufferMemoryRequirements::Builder& builder, VkDeviceBufferMemoryRequirements member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            if ((member.pCreateInfo)==NULL){
                builder.disownpCreateInfo();
            return; }
        auto proto_arr=builder.initpCreateInfo();
        for(int xlJNDRB=0; xlJNDRB < 1; xlJNDRB++){
            [&](){
            auto temp=proto_arr[xlJNDRB];
            return serialize_struct(((member.pCreateInfo)[xlJNDRB]), temp);
            }();
        }
        }();
}

    VkDeviceBufferMemoryRequirements deserialize_struct(VkDeviceBufferMemoryRequirements::Reader reader){
        auto result=VkDeviceBufferMemoryRequirements();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){ VkBufferCreateInfo* temp_jZUqWFE[&](){
            if (!reader.haspCreateInfo()){
                (result.pCreateInfo)=NULL;
            return; }{native_concat()}=(VkBufferCreateInfo*)malloc(1*sizeof(VkBufferCreateInfo));
        auto proto_arr=reader.getpCreateInfo(1);
        for(int uLhNaqZ=0; uLhNaqZ < 1; uLhNaqZ++){
            [&](){
            auto temp=proto_arr[uLhNaqZ];
            ((result.pCreateInfo)[uLhNaqZ])=deserialize_struct(temp);
            }();
        }
        }();(result.pCreateInfo)=temp_jZUqWFE;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDeviceBufferMemoryRequirements member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDeviceBufferMemoryRequirements member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkImageMemoryRequirementsInfo2::Builder& builder, VkImageMemoryRequirementsInfo2 member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setimage(serialize_handle(member.image));}();
}

    VkImageMemoryRequirementsInfo2 deserialize_struct(VkImageMemoryRequirementsInfo2::Reader reader){
        auto result=VkImageMemoryRequirementsInfo2();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.image)=deserialize_handle(reader.getimage());}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkImageMemoryRequirementsInfo2 member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkImageMemoryRequirementsInfo2 member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkImageSparseMemoryRequirementsInfo2::Builder& builder, VkImageSparseMemoryRequirementsInfo2 member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setimage(serialize_handle(member.image));}();
}

    VkImageSparseMemoryRequirementsInfo2 deserialize_struct(VkImageSparseMemoryRequirementsInfo2::Reader reader){
        auto result=VkImageSparseMemoryRequirementsInfo2();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.image)=deserialize_handle(reader.getimage());}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkImageSparseMemoryRequirementsInfo2 member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkImageSparseMemoryRequirementsInfo2 member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDeviceImageMemoryRequirements::Builder& builder, VkDeviceImageMemoryRequirements member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            if ((member.pCreateInfo)==NULL){
                builder.disownpCreateInfo();
            return; }
        auto proto_arr=builder.initpCreateInfo();
        for(int pUPULkH=0; pUPULkH < 1; pUPULkH++){
            [&](){
            auto temp=proto_arr[pUPULkH];
            return serialize_struct(((member.pCreateInfo)[pUPULkH]), temp);
            }();
        }
        }();
[&](){[&](){[&](){return builder.setplaneAspect((member.planeAspect));}();}();}();
}

    VkDeviceImageMemoryRequirements deserialize_struct(VkDeviceImageMemoryRequirements::Reader reader){
        auto result=VkDeviceImageMemoryRequirements();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){ VkImageCreateInfo* temp_GaGgIvU[&](){
            if (!reader.haspCreateInfo()){
                (result.pCreateInfo)=NULL;
            return; }{native_concat()}=(VkImageCreateInfo*)malloc(1*sizeof(VkImageCreateInfo));
        auto proto_arr=reader.getpCreateInfo(1);
        for(int OCzXYbh=0; OCzXYbh < 1; OCzXYbh++){
            [&](){
            auto temp=proto_arr[OCzXYbh];
            ((result.pCreateInfo)[OCzXYbh])=deserialize_struct(temp);
            }();
        }
        }();(result.pCreateInfo)=temp_GaGgIvU;}();
[&](){[&](){[&](){(result.planeAspect)=reader.getplaneAspect();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDeviceImageMemoryRequirements member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDeviceImageMemoryRequirements member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkMemoryRequirements2::Builder& builder, VkMemoryRequirements2 member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            auto temp=builder.initmemoryRequirements(memoryRequirements);
            return serialize_struct((member.memoryRequirements), temp);
            }();
}

    VkMemoryRequirements2 deserialize_struct(VkMemoryRequirements2::Reader reader){
        auto result=VkMemoryRequirements2();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getmemoryRequirements();
            (result.memoryRequirements)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkMemoryRequirements2 member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkMemoryRequirements2 member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSparseImageMemoryRequirements2::Builder& builder, VkSparseImageMemoryRequirements2 member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            auto temp=builder.initmemoryRequirements(memoryRequirements);
            return serialize_struct((member.memoryRequirements), temp);
            }();
}

    VkSparseImageMemoryRequirements2 deserialize_struct(VkSparseImageMemoryRequirements2::Reader reader){
        auto result=VkSparseImageMemoryRequirements2();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getmemoryRequirements();
            (result.memoryRequirements)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSparseImageMemoryRequirements2 member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSparseImageMemoryRequirements2 member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDevicePointClippingProperties::Builder& builder, VkPhysicalDevicePointClippingProperties member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setpointClippingBehavior((member.pointClippingBehavior));}();}();}();
}

    VkPhysicalDevicePointClippingProperties deserialize_struct(VkPhysicalDevicePointClippingProperties::Reader reader){
        auto result=VkPhysicalDevicePointClippingProperties();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.pointClippingBehavior)=reader.getpointClippingBehavior();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDevicePointClippingProperties member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDevicePointClippingProperties member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkMemoryDedicatedRequirements::Builder& builder, VkMemoryDedicatedRequirements member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setprefersDedicatedAllocation((member.prefersDedicatedAllocation));}();}();
[&](){[&](){return builder.setrequiresDedicatedAllocation((member.requiresDedicatedAllocation));}();}();
}

    VkMemoryDedicatedRequirements deserialize_struct(VkMemoryDedicatedRequirements::Reader reader){
        auto result=VkMemoryDedicatedRequirements();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.prefersDedicatedAllocation)=reader.getprefersDedicatedAllocation();}();}();
[&](){[&](){(result.requiresDedicatedAllocation)=reader.getrequiresDedicatedAllocation();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkMemoryDedicatedRequirements member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkMemoryDedicatedRequirements member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkMemoryDedicatedAllocateInfo::Builder& builder, VkMemoryDedicatedAllocateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setimage(serialize_handle(member.image));}();
[&](){return builder.setbuffer(serialize_handle(member.buffer));}();
}

    VkMemoryDedicatedAllocateInfo deserialize_struct(VkMemoryDedicatedAllocateInfo::Reader reader){
        auto result=VkMemoryDedicatedAllocateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.image)=deserialize_handle(reader.getimage());}();
[&](){(result.buffer)=deserialize_handle(reader.getbuffer());}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkMemoryDedicatedAllocateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkMemoryDedicatedAllocateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkImageViewUsageCreateInfo::Builder& builder, VkImageViewUsageCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setusage((member.usage));}();}();}();
}

    VkImageViewUsageCreateInfo deserialize_struct(VkImageViewUsageCreateInfo::Reader reader){
        auto result=VkImageViewUsageCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.usage)=reader.getusage();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkImageViewUsageCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkImageViewUsageCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkImageViewSlicedCreateInfoEXT::Builder& builder, VkImageViewSlicedCreateInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setsliceOffset((member.sliceOffset));}();
[&](){return builder.setsliceCount((member.sliceCount));}();
}

    VkImageViewSlicedCreateInfoEXT deserialize_struct(VkImageViewSlicedCreateInfoEXT::Reader reader){
        auto result=VkImageViewSlicedCreateInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.sliceOffset)=reader.getsliceOffset();}();
[&](){(result.sliceCount)=reader.getsliceCount();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkImageViewSlicedCreateInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkImageViewSlicedCreateInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineTessellationDomainOriginStateCreateInfo::Builder& builder, VkPipelineTessellationDomainOriginStateCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setdomainOrigin((member.domainOrigin));}();}();}();
}

    VkPipelineTessellationDomainOriginStateCreateInfo deserialize_struct(VkPipelineTessellationDomainOriginStateCreateInfo::Reader reader){
        auto result=VkPipelineTessellationDomainOriginStateCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.domainOrigin)=reader.getdomainOrigin();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineTessellationDomainOriginStateCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineTessellationDomainOriginStateCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSamplerYcbcrConversionInfo::Builder& builder, VkSamplerYcbcrConversionInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setconversion(serialize_handle(member.conversion));}();
}

    VkSamplerYcbcrConversionInfo deserialize_struct(VkSamplerYcbcrConversionInfo::Reader reader){
        auto result=VkSamplerYcbcrConversionInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.conversion)=deserialize_handle(reader.getconversion());}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSamplerYcbcrConversionInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSamplerYcbcrConversionInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSamplerYcbcrConversionCreateInfo::Builder& builder, VkSamplerYcbcrConversionCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setformat((member.format));}();}();}();
[&](){[&](){[&](){return builder.setycbcrModel((member.ycbcrModel));}();}();}();
[&](){[&](){[&](){return builder.setycbcrRange((member.ycbcrRange));}();}();}();
[&](){
            auto temp=builder.initcomponents(components);
            return serialize_struct((member.components), temp);
            }();
[&](){[&](){[&](){return builder.setxChromaOffset((member.xChromaOffset));}();}();}();
[&](){[&](){[&](){return builder.setyChromaOffset((member.yChromaOffset));}();}();}();
[&](){[&](){[&](){return builder.setchromaFilter((member.chromaFilter));}();}();}();
[&](){[&](){return builder.setforceExplicitReconstruction((member.forceExplicitReconstruction));}();}();
}

    VkSamplerYcbcrConversionCreateInfo deserialize_struct(VkSamplerYcbcrConversionCreateInfo::Reader reader){
        auto result=VkSamplerYcbcrConversionCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.format)=reader.getformat();}();}();}();
[&](){[&](){[&](){(result.ycbcrModel)=reader.getycbcrModel();}();}();}();
[&](){[&](){[&](){(result.ycbcrRange)=reader.getycbcrRange();}();}();}();
[&](){
            auto temp=reader.getcomponents();
            (result.components)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.xChromaOffset)=reader.getxChromaOffset();}();}();}();
[&](){[&](){[&](){(result.yChromaOffset)=reader.getyChromaOffset();}();}();}();
[&](){[&](){[&](){(result.chromaFilter)=reader.getchromaFilter();}();}();}();
[&](){[&](){(result.forceExplicitReconstruction)=reader.getforceExplicitReconstruction();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSamplerYcbcrConversionCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSamplerYcbcrConversionCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkBindImagePlaneMemoryInfo::Builder& builder, VkBindImagePlaneMemoryInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setplaneAspect((member.planeAspect));}();}();}();
}

    VkBindImagePlaneMemoryInfo deserialize_struct(VkBindImagePlaneMemoryInfo::Reader reader){
        auto result=VkBindImagePlaneMemoryInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.planeAspect)=reader.getplaneAspect();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkBindImagePlaneMemoryInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkBindImagePlaneMemoryInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkImagePlaneMemoryRequirementsInfo::Builder& builder, VkImagePlaneMemoryRequirementsInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setplaneAspect((member.planeAspect));}();}();}();
}

    VkImagePlaneMemoryRequirementsInfo deserialize_struct(VkImagePlaneMemoryRequirementsInfo::Reader reader){
        auto result=VkImagePlaneMemoryRequirementsInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.planeAspect)=reader.getplaneAspect();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkImagePlaneMemoryRequirementsInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkImagePlaneMemoryRequirementsInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceSamplerYcbcrConversionFeatures::Builder& builder, VkPhysicalDeviceSamplerYcbcrConversionFeatures member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setsamplerYcbcrConversion((member.samplerYcbcrConversion));}();}();
}

    VkPhysicalDeviceSamplerYcbcrConversionFeatures deserialize_struct(VkPhysicalDeviceSamplerYcbcrConversionFeatures::Reader reader){
        auto result=VkPhysicalDeviceSamplerYcbcrConversionFeatures();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.samplerYcbcrConversion)=reader.getsamplerYcbcrConversion();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceSamplerYcbcrConversionFeatures member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceSamplerYcbcrConversionFeatures member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSamplerYcbcrConversionImageFormatProperties::Builder& builder, VkSamplerYcbcrConversionImageFormatProperties member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setcombinedImageSamplerDescriptorCount((member.combinedImageSamplerDescriptorCount));}();
}

    VkSamplerYcbcrConversionImageFormatProperties deserialize_struct(VkSamplerYcbcrConversionImageFormatProperties::Reader reader){
        auto result=VkSamplerYcbcrConversionImageFormatProperties();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.combinedImageSamplerDescriptorCount)=reader.getcombinedImageSamplerDescriptorCount();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSamplerYcbcrConversionImageFormatProperties member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSamplerYcbcrConversionImageFormatProperties member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkTextureLODGatherFormatPropertiesAMD::Builder& builder, VkTextureLODGatherFormatPropertiesAMD member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setsupportsTextureGatherLODBiasAMD((member.supportsTextureGatherLODBiasAMD));}();}();
}

    VkTextureLODGatherFormatPropertiesAMD deserialize_struct(VkTextureLODGatherFormatPropertiesAMD::Reader reader){
        auto result=VkTextureLODGatherFormatPropertiesAMD();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.supportsTextureGatherLODBiasAMD)=reader.getsupportsTextureGatherLODBiasAMD();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkTextureLODGatherFormatPropertiesAMD member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkTextureLODGatherFormatPropertiesAMD member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkConditionalRenderingBeginInfoEXT::Builder& builder, VkConditionalRenderingBeginInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setbuffer(serialize_handle(member.buffer));}();
[&](){[&](){return builder.setoffset((member.offset));}();}();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
}

    VkConditionalRenderingBeginInfoEXT deserialize_struct(VkConditionalRenderingBeginInfoEXT::Reader reader){
        auto result=VkConditionalRenderingBeginInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.buffer)=deserialize_handle(reader.getbuffer());}();
[&](){[&](){(result.offset)=reader.getoffset();}();}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkConditionalRenderingBeginInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkConditionalRenderingBeginInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkProtectedSubmitInfo::Builder& builder, VkProtectedSubmitInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setprotectedSubmit((member.protectedSubmit));}();}();
}

    VkProtectedSubmitInfo deserialize_struct(VkProtectedSubmitInfo::Reader reader){
        auto result=VkProtectedSubmitInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){(result.protectedSubmit)=reader.getprotectedSubmit();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkProtectedSubmitInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkProtectedSubmitInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceProtectedMemoryFeatures::Builder& builder, VkPhysicalDeviceProtectedMemoryFeatures member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setprotectedMemory((member.protectedMemory));}();}();
}

    VkPhysicalDeviceProtectedMemoryFeatures deserialize_struct(VkPhysicalDeviceProtectedMemoryFeatures::Reader reader){
        auto result=VkPhysicalDeviceProtectedMemoryFeatures();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.protectedMemory)=reader.getprotectedMemory();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceProtectedMemoryFeatures member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceProtectedMemoryFeatures member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceProtectedMemoryProperties::Builder& builder, VkPhysicalDeviceProtectedMemoryProperties member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setprotectedNoFault((member.protectedNoFault));}();}();
}

    VkPhysicalDeviceProtectedMemoryProperties deserialize_struct(VkPhysicalDeviceProtectedMemoryProperties::Reader reader){
        auto result=VkPhysicalDeviceProtectedMemoryProperties();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.protectedNoFault)=reader.getprotectedNoFault();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceProtectedMemoryProperties member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceProtectedMemoryProperties member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDeviceQueueInfo2::Builder& builder, VkDeviceQueueInfo2 member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){return builder.setqueueFamilyIndex((member.queueFamilyIndex));}();
[&](){return builder.setqueueIndex((member.queueIndex));}();
}

    VkDeviceQueueInfo2 deserialize_struct(VkDeviceQueueInfo2::Reader reader){
        auto result=VkDeviceQueueInfo2();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){(result.queueFamilyIndex)=reader.getqueueFamilyIndex();}();
[&](){(result.queueIndex)=reader.getqueueIndex();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDeviceQueueInfo2 member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDeviceQueueInfo2 member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineCoverageToColorStateCreateInfoNV::Builder& builder, VkPipelineCoverageToColorStateCreateInfoNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){[&](){return builder.setcoverageToColorEnable((member.coverageToColorEnable));}();}();
[&](){return builder.setcoverageToColorLocation((member.coverageToColorLocation));}();
}

    VkPipelineCoverageToColorStateCreateInfoNV deserialize_struct(VkPipelineCoverageToColorStateCreateInfoNV::Reader reader){
        auto result=VkPipelineCoverageToColorStateCreateInfoNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){[&](){(result.coverageToColorEnable)=reader.getcoverageToColorEnable();}();}();
[&](){(result.coverageToColorLocation)=reader.getcoverageToColorLocation();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineCoverageToColorStateCreateInfoNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineCoverageToColorStateCreateInfoNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceSamplerFilterMinmaxProperties::Builder& builder, VkPhysicalDeviceSamplerFilterMinmaxProperties member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setfilterMinmaxSingleComponentFormats((member.filterMinmaxSingleComponentFormats));}();}();
[&](){[&](){return builder.setfilterMinmaxImageComponentMapping((member.filterMinmaxImageComponentMapping));}();}();
}

    VkPhysicalDeviceSamplerFilterMinmaxProperties deserialize_struct(VkPhysicalDeviceSamplerFilterMinmaxProperties::Reader reader){
        auto result=VkPhysicalDeviceSamplerFilterMinmaxProperties();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.filterMinmaxSingleComponentFormats)=reader.getfilterMinmaxSingleComponentFormats();}();}();
[&](){[&](){(result.filterMinmaxImageComponentMapping)=reader.getfilterMinmaxImageComponentMapping();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceSamplerFilterMinmaxProperties member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceSamplerFilterMinmaxProperties member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSampleLocationEXT::Builder& builder, VkSampleLocationEXT member){
        
    
[&](){return builder.setx((member.x));}();
[&](){return builder.sety((member.y));}();
}

    VkSampleLocationEXT deserialize_struct(VkSampleLocationEXT::Reader reader){
        auto result=VkSampleLocationEXT();
    
[&](){(result.x)=reader.getx();}();
[&](){(result.y)=reader.gety();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSampleLocationEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSampleLocationEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSampleLocationsInfoEXT::Builder& builder, VkSampleLocationsInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setsampleLocationsPerPixel((member.sampleLocationsPerPixel));}();}();}();
[&](){
            auto temp=builder.initsampleLocationGridSize(sampleLocationGridSize);
            return serialize_struct((member.sampleLocationGridSize), temp);
            }();
[&](){return builder.setsampleLocationsCount((member.sampleLocationsCount));}();
[&](){
            if ((member.pSampleLocations)==NULL){
                builder.disownpSampleLocations();
            return; }
        auto proto_arr=builder.initpSampleLocations();
        for(int AEcYmme=0; AEcYmme < member.sampleLocationsCount; AEcYmme++){
            [&](){
            auto temp=proto_arr[AEcYmme];
            return serialize_struct(((member.pSampleLocations)[AEcYmme]), temp);
            }();
        }
        }();
}

    VkSampleLocationsInfoEXT deserialize_struct(VkSampleLocationsInfoEXT::Reader reader){
        auto result=VkSampleLocationsInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.sampleLocationsPerPixel)=reader.getsampleLocationsPerPixel();}();}();}();
[&](){
            auto temp=reader.getsampleLocationGridSize();
            (result.sampleLocationGridSize)=deserialize_struct(temp);
            }();
[&](){(result.sampleLocationsCount)=reader.getsampleLocationsCount();}();
[&](){ VkSampleLocationEXT* temp_VQWplTH[&](){
            if (!reader.haspSampleLocations()){
                (result.pSampleLocations)=NULL;
            return; }{native_concat()}=(VkSampleLocationEXT*)malloc(result.sampleLocationsCount*sizeof(VkSampleLocationEXT));
        auto proto_arr=reader.getpSampleLocations(result.sampleLocationsCount);
        for(int VuEajPo=0; VuEajPo < result.sampleLocationsCount; VuEajPo++){
            [&](){
            auto temp=proto_arr[VuEajPo];
            ((result.pSampleLocations)[VuEajPo])=deserialize_struct(temp);
            }();
        }
        }();(result.pSampleLocations)=temp_VQWplTH;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSampleLocationsInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSampleLocationsInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkAttachmentSampleLocationsEXT::Builder& builder, VkAttachmentSampleLocationsEXT member){
        
    
[&](){return builder.setattachmentIndex((member.attachmentIndex));}();
[&](){
            auto temp=builder.initsampleLocationsInfo(sampleLocationsInfo);
            return serialize_struct((member.sampleLocationsInfo), temp);
            }();
}

    VkAttachmentSampleLocationsEXT deserialize_struct(VkAttachmentSampleLocationsEXT::Reader reader){
        auto result=VkAttachmentSampleLocationsEXT();
    
[&](){(result.attachmentIndex)=reader.getattachmentIndex();}();
[&](){
            auto temp=reader.getsampleLocationsInfo();
            (result.sampleLocationsInfo)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkAttachmentSampleLocationsEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkAttachmentSampleLocationsEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSubpassSampleLocationsEXT::Builder& builder, VkSubpassSampleLocationsEXT member){
        
    
[&](){return builder.setsubpassIndex((member.subpassIndex));}();
[&](){
            auto temp=builder.initsampleLocationsInfo(sampleLocationsInfo);
            return serialize_struct((member.sampleLocationsInfo), temp);
            }();
}

    VkSubpassSampleLocationsEXT deserialize_struct(VkSubpassSampleLocationsEXT::Reader reader){
        auto result=VkSubpassSampleLocationsEXT();
    
[&](){(result.subpassIndex)=reader.getsubpassIndex();}();
[&](){
            auto temp=reader.getsampleLocationsInfo();
            (result.sampleLocationsInfo)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSubpassSampleLocationsEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSubpassSampleLocationsEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkRenderPassSampleLocationsBeginInfoEXT::Builder& builder, VkRenderPassSampleLocationsBeginInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setattachmentInitialSampleLocationsCount((member.attachmentInitialSampleLocationsCount));}();
[&](){
            if ((member.pAttachmentInitialSampleLocations)==NULL){
                builder.disownpAttachmentInitialSampleLocations();
            return; }
        auto proto_arr=builder.initpAttachmentInitialSampleLocations();
        for(int VhCXYaI=0; VhCXYaI < member.attachmentInitialSampleLocationsCount; VhCXYaI++){
            [&](){
            auto temp=proto_arr[VhCXYaI];
            return serialize_struct(((member.pAttachmentInitialSampleLocations)[VhCXYaI]), temp);
            }();
        }
        }();
[&](){return builder.setpostSubpassSampleLocationsCount((member.postSubpassSampleLocationsCount));}();
[&](){
            if ((member.pPostSubpassSampleLocations)==NULL){
                builder.disownpPostSubpassSampleLocations();
            return; }
        auto proto_arr=builder.initpPostSubpassSampleLocations();
        for(int KWZzgwg=0; KWZzgwg < member.postSubpassSampleLocationsCount; KWZzgwg++){
            [&](){
            auto temp=proto_arr[KWZzgwg];
            return serialize_struct(((member.pPostSubpassSampleLocations)[KWZzgwg]), temp);
            }();
        }
        }();
}

    VkRenderPassSampleLocationsBeginInfoEXT deserialize_struct(VkRenderPassSampleLocationsBeginInfoEXT::Reader reader){
        auto result=VkRenderPassSampleLocationsBeginInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.attachmentInitialSampleLocationsCount)=reader.getattachmentInitialSampleLocationsCount();}();
[&](){ VkAttachmentSampleLocationsEXT* temp_fmtsDMG[&](){
            if (!reader.haspAttachmentInitialSampleLocations()){
                (result.pAttachmentInitialSampleLocations)=NULL;
            return; }{native_concat()}=(VkAttachmentSampleLocationsEXT*)malloc(result.attachmentInitialSampleLocationsCount*sizeof(VkAttachmentSampleLocationsEXT));
        auto proto_arr=reader.getpAttachmentInitialSampleLocations(result.attachmentInitialSampleLocationsCount);
        for(int KcToJrv=0; KcToJrv < result.attachmentInitialSampleLocationsCount; KcToJrv++){
            [&](){
            auto temp=proto_arr[KcToJrv];
            ((result.pAttachmentInitialSampleLocations)[KcToJrv])=deserialize_struct(temp);
            }();
        }
        }();(result.pAttachmentInitialSampleLocations)=temp_fmtsDMG;}();
[&](){(result.postSubpassSampleLocationsCount)=reader.getpostSubpassSampleLocationsCount();}();
[&](){ VkSubpassSampleLocationsEXT* temp_CPGKVcw[&](){
            if (!reader.haspPostSubpassSampleLocations()){
                (result.pPostSubpassSampleLocations)=NULL;
            return; }{native_concat()}=(VkSubpassSampleLocationsEXT*)malloc(result.postSubpassSampleLocationsCount*sizeof(VkSubpassSampleLocationsEXT));
        auto proto_arr=reader.getpPostSubpassSampleLocations(result.postSubpassSampleLocationsCount);
        for(int JwwfDjw=0; JwwfDjw < result.postSubpassSampleLocationsCount; JwwfDjw++){
            [&](){
            auto temp=proto_arr[JwwfDjw];
            ((result.pPostSubpassSampleLocations)[JwwfDjw])=deserialize_struct(temp);
            }();
        }
        }();(result.pPostSubpassSampleLocations)=temp_CPGKVcw;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkRenderPassSampleLocationsBeginInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkRenderPassSampleLocationsBeginInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineSampleLocationsStateCreateInfoEXT::Builder& builder, VkPipelineSampleLocationsStateCreateInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setsampleLocationsEnable((member.sampleLocationsEnable));}();}();
[&](){
            auto temp=builder.initsampleLocationsInfo(sampleLocationsInfo);
            return serialize_struct((member.sampleLocationsInfo), temp);
            }();
}

    VkPipelineSampleLocationsStateCreateInfoEXT deserialize_struct(VkPipelineSampleLocationsStateCreateInfoEXT::Reader reader){
        auto result=VkPipelineSampleLocationsStateCreateInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){(result.sampleLocationsEnable)=reader.getsampleLocationsEnable();}();}();
[&](){
            auto temp=reader.getsampleLocationsInfo();
            (result.sampleLocationsInfo)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineSampleLocationsStateCreateInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineSampleLocationsStateCreateInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceSampleLocationsPropertiesEXT::Builder& builder, VkPhysicalDeviceSampleLocationsPropertiesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setsampleLocationSampleCounts((member.sampleLocationSampleCounts));}();}();}();
[&](){
            auto temp=builder.initmaxSampleLocationGridSize(maxSampleLocationGridSize);
            return serialize_struct((member.maxSampleLocationGridSize), temp);
            }();
[&](){
        auto proto_arr=builder.initsampleLocationCoordinateRange();
        for(int PRguJoc=0; PRguJoc < 2; PRguJoc++){
            [&](){return proto_arr.set(PRguJoc,((member.sampleLocationCoordinateRange)[PRguJoc]));}();
        }
        }();
[&](){return builder.setsampleLocationSubPixelBits((member.sampleLocationSubPixelBits));}();
[&](){[&](){return builder.setvariableSampleLocations((member.variableSampleLocations));}();}();
}

    VkPhysicalDeviceSampleLocationsPropertiesEXT deserialize_struct(VkPhysicalDeviceSampleLocationsPropertiesEXT::Reader reader){
        auto result=VkPhysicalDeviceSampleLocationsPropertiesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.sampleLocationSampleCounts)=reader.getsampleLocationSampleCounts();}();}();}();
[&](){
            auto temp=reader.getmaxSampleLocationGridSize();
            (result.maxSampleLocationGridSize)=deserialize_struct(temp);
            }();
[&](){
        auto proto_arr=reader.getsampleLocationCoordinateRange(2);
        for(int PRguJoc=0; PRguJoc < 2; PRguJoc++){
            [&](){((result.sampleLocationCoordinateRange)[PRguJoc])=proto_arr[PRguJoc];}();
        }
        }();
[&](){(result.sampleLocationSubPixelBits)=reader.getsampleLocationSubPixelBits();}();
[&](){[&](){(result.variableSampleLocations)=reader.getvariableSampleLocations();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceSampleLocationsPropertiesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceSampleLocationsPropertiesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkMultisamplePropertiesEXT::Builder& builder, VkMultisamplePropertiesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            auto temp=builder.initmaxSampleLocationGridSize(maxSampleLocationGridSize);
            return serialize_struct((member.maxSampleLocationGridSize), temp);
            }();
}

    VkMultisamplePropertiesEXT deserialize_struct(VkMultisamplePropertiesEXT::Reader reader){
        auto result=VkMultisamplePropertiesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getmaxSampleLocationGridSize();
            (result.maxSampleLocationGridSize)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkMultisamplePropertiesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkMultisamplePropertiesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSamplerReductionModeCreateInfo::Builder& builder, VkSamplerReductionModeCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setreductionMode((member.reductionMode));}();}();}();
}

    VkSamplerReductionModeCreateInfo deserialize_struct(VkSamplerReductionModeCreateInfo::Reader reader){
        auto result=VkSamplerReductionModeCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.reductionMode)=reader.getreductionMode();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSamplerReductionModeCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSamplerReductionModeCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT::Builder& builder, VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setadvancedBlendCoherentOperations((member.advancedBlendCoherentOperations));}();}();
}

    VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT deserialize_struct(VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.advancedBlendCoherentOperations)=reader.getadvancedBlendCoherentOperations();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceMultiDrawFeaturesEXT::Builder& builder, VkPhysicalDeviceMultiDrawFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setmultiDraw((member.multiDraw));}();}();
}

    VkPhysicalDeviceMultiDrawFeaturesEXT deserialize_struct(VkPhysicalDeviceMultiDrawFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceMultiDrawFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.multiDraw)=reader.getmultiDraw();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceMultiDrawFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceMultiDrawFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::Builder& builder, VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setadvancedBlendMaxColorAttachments((member.advancedBlendMaxColorAttachments));}();
[&](){[&](){return builder.setadvancedBlendIndependentBlend((member.advancedBlendIndependentBlend));}();}();
[&](){[&](){return builder.setadvancedBlendNonPremultipliedSrcColor((member.advancedBlendNonPremultipliedSrcColor));}();}();
[&](){[&](){return builder.setadvancedBlendNonPremultipliedDstColor((member.advancedBlendNonPremultipliedDstColor));}();}();
[&](){[&](){return builder.setadvancedBlendCorrelatedOverlap((member.advancedBlendCorrelatedOverlap));}();}();
[&](){[&](){return builder.setadvancedBlendAllOperations((member.advancedBlendAllOperations));}();}();
}

    VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT deserialize_struct(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::Reader reader){
        auto result=VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.advancedBlendMaxColorAttachments)=reader.getadvancedBlendMaxColorAttachments();}();
[&](){[&](){(result.advancedBlendIndependentBlend)=reader.getadvancedBlendIndependentBlend();}();}();
[&](){[&](){(result.advancedBlendNonPremultipliedSrcColor)=reader.getadvancedBlendNonPremultipliedSrcColor();}();}();
[&](){[&](){(result.advancedBlendNonPremultipliedDstColor)=reader.getadvancedBlendNonPremultipliedDstColor();}();}();
[&](){[&](){(result.advancedBlendCorrelatedOverlap)=reader.getadvancedBlendCorrelatedOverlap();}();}();
[&](){[&](){(result.advancedBlendAllOperations)=reader.getadvancedBlendAllOperations();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineColorBlendAdvancedStateCreateInfoEXT::Builder& builder, VkPipelineColorBlendAdvancedStateCreateInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setsrcPremultiplied((member.srcPremultiplied));}();}();
[&](){[&](){return builder.setdstPremultiplied((member.dstPremultiplied));}();}();
[&](){[&](){[&](){return builder.setblendOverlap((member.blendOverlap));}();}();}();
}

    VkPipelineColorBlendAdvancedStateCreateInfoEXT deserialize_struct(VkPipelineColorBlendAdvancedStateCreateInfoEXT::Reader reader){
        auto result=VkPipelineColorBlendAdvancedStateCreateInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){(result.srcPremultiplied)=reader.getsrcPremultiplied();}();}();
[&](){[&](){(result.dstPremultiplied)=reader.getdstPremultiplied();}();}();
[&](){[&](){[&](){(result.blendOverlap)=reader.getblendOverlap();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineColorBlendAdvancedStateCreateInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineColorBlendAdvancedStateCreateInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceInlineUniformBlockFeatures::Builder& builder, VkPhysicalDeviceInlineUniformBlockFeatures member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setinlineUniformBlock((member.inlineUniformBlock));}();}();
[&](){[&](){return builder.setdescriptorBindingInlineUniformBlockUpdateAfterBind((member.descriptorBindingInlineUniformBlockUpdateAfterBind));}();}();
}

    VkPhysicalDeviceInlineUniformBlockFeatures deserialize_struct(VkPhysicalDeviceInlineUniformBlockFeatures::Reader reader){
        auto result=VkPhysicalDeviceInlineUniformBlockFeatures();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.inlineUniformBlock)=reader.getinlineUniformBlock();}();}();
[&](){[&](){(result.descriptorBindingInlineUniformBlockUpdateAfterBind)=reader.getdescriptorBindingInlineUniformBlockUpdateAfterBind();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceInlineUniformBlockFeatures member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceInlineUniformBlockFeatures member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceInlineUniformBlockProperties::Builder& builder, VkPhysicalDeviceInlineUniformBlockProperties member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setmaxInlineUniformBlockSize((member.maxInlineUniformBlockSize));}();
[&](){return builder.setmaxPerStageDescriptorInlineUniformBlocks((member.maxPerStageDescriptorInlineUniformBlocks));}();
[&](){return builder.setmaxPerStageDescriptorUpdateAfterBindInlineUniformBlocks((member.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks));}();
[&](){return builder.setmaxDescriptorSetInlineUniformBlocks((member.maxDescriptorSetInlineUniformBlocks));}();
[&](){return builder.setmaxDescriptorSetUpdateAfterBindInlineUniformBlocks((member.maxDescriptorSetUpdateAfterBindInlineUniformBlocks));}();
}

    VkPhysicalDeviceInlineUniformBlockProperties deserialize_struct(VkPhysicalDeviceInlineUniformBlockProperties::Reader reader){
        auto result=VkPhysicalDeviceInlineUniformBlockProperties();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.maxInlineUniformBlockSize)=reader.getmaxInlineUniformBlockSize();}();
[&](){(result.maxPerStageDescriptorInlineUniformBlocks)=reader.getmaxPerStageDescriptorInlineUniformBlocks();}();
[&](){(result.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks)=reader.getmaxPerStageDescriptorUpdateAfterBindInlineUniformBlocks();}();
[&](){(result.maxDescriptorSetInlineUniformBlocks)=reader.getmaxDescriptorSetInlineUniformBlocks();}();
[&](){(result.maxDescriptorSetUpdateAfterBindInlineUniformBlocks)=reader.getmaxDescriptorSetUpdateAfterBindInlineUniformBlocks();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceInlineUniformBlockProperties member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceInlineUniformBlockProperties member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkWriteDescriptorSetInlineUniformBlock::Builder& builder, VkWriteDescriptorSetInlineUniformBlock member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setdataSize((member.dataSize));}();
[&](){
            if ((member.pData)==NULL){
                builder.disownpData();
            return; }[&](){
            if (((char*)(member.pData).pData)==NULL){
                builder.disownpData();
            return; }
        auto proto_arr=builder.initpData();
        for(int KUeyATI=0; KUeyATI < member.dataSize; KUeyATI++){
            [&](){return proto_arr.set(KUeyATI,(((char*)(member.pData).pData)[KUeyATI]));}();
        }
        }();}();
}

    VkWriteDescriptorSetInlineUniformBlock deserialize_struct(VkWriteDescriptorSetInlineUniformBlock::Reader reader){
        auto result=VkWriteDescriptorSetInlineUniformBlock();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.dataSize)=reader.getdataSize();}();
[&](){ void* temp_RUIzmiy[&](){
            if (!reader.haspData()){
                (result.pData)=NULL;
            return; }char* temp_KoPqpjZ;[&](){
            if (!reader.haspData()){
                (temp_KoPqpjZ.pData)=NULL;
            return; }{native_concat()}=(char*)malloc(result.dataSize*sizeof(char));
        auto proto_arr=reader.getpData(result.dataSize);
        for(int OCmuZGI=0; OCmuZGI < result.dataSize; OCmuZGI++){
            [&](){((temp_KoPqpjZ.pData)[OCmuZGI])=proto_arr[OCmuZGI];}();
        }
        }();(result.pData)=temp_KoPqpjZ;}();(result.pData)=temp_RUIzmiy;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkWriteDescriptorSetInlineUniformBlock member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkWriteDescriptorSetInlineUniformBlock member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDescriptorPoolInlineUniformBlockCreateInfo::Builder& builder, VkDescriptorPoolInlineUniformBlockCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setmaxInlineUniformBlockBindings((member.maxInlineUniformBlockBindings));}();
}

    VkDescriptorPoolInlineUniformBlockCreateInfo deserialize_struct(VkDescriptorPoolInlineUniformBlockCreateInfo::Reader reader){
        auto result=VkDescriptorPoolInlineUniformBlockCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.maxInlineUniformBlockBindings)=reader.getmaxInlineUniformBlockBindings();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDescriptorPoolInlineUniformBlockCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDescriptorPoolInlineUniformBlockCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineCoverageModulationStateCreateInfoNV::Builder& builder, VkPipelineCoverageModulationStateCreateInfoNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){[&](){[&](){return builder.setcoverageModulationMode((member.coverageModulationMode));}();}();}();
[&](){[&](){return builder.setcoverageModulationTableEnable((member.coverageModulationTableEnable));}();}();
[&](){return builder.setcoverageModulationTableCount((member.coverageModulationTableCount));}();
[&](){
            if ((member.pCoverageModulationTable)==NULL){
                builder.disownpCoverageModulationTable();
            return; }
        auto proto_arr=builder.initpCoverageModulationTable();
        for(int PsVHolD=0; PsVHolD < member.coverageModulationTableCount; PsVHolD++){
            [&](){return proto_arr.set(PsVHolD,((member.pCoverageModulationTable)[PsVHolD]));}();
        }
        }();
}

    VkPipelineCoverageModulationStateCreateInfoNV deserialize_struct(VkPipelineCoverageModulationStateCreateInfoNV::Reader reader){
        auto result=VkPipelineCoverageModulationStateCreateInfoNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){[&](){[&](){(result.coverageModulationMode)=reader.getcoverageModulationMode();}();}();}();
[&](){[&](){(result.coverageModulationTableEnable)=reader.getcoverageModulationTableEnable();}();}();
[&](){(result.coverageModulationTableCount)=reader.getcoverageModulationTableCount();}();
[&](){ float* temp_mxuICcT[&](){
            if (!reader.haspCoverageModulationTable()){
                (result.pCoverageModulationTable)=NULL;
            return; }{native_concat()}=(float*)malloc(result.coverageModulationTableCount*sizeof(float));
        auto proto_arr=reader.getpCoverageModulationTable(result.coverageModulationTableCount);
        for(int hQRBHsT=0; hQRBHsT < result.coverageModulationTableCount; hQRBHsT++){
            [&](){((result.pCoverageModulationTable)[hQRBHsT])=proto_arr[hQRBHsT];}();
        }
        }();(result.pCoverageModulationTable)=temp_mxuICcT;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineCoverageModulationStateCreateInfoNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineCoverageModulationStateCreateInfoNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkImageFormatListCreateInfo::Builder& builder, VkImageFormatListCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setviewFormatCount((member.viewFormatCount));}();
[&](){
            if ((member.pViewFormats)==NULL){
                builder.disownpViewFormats();
            return; }
        auto proto_arr=builder.initpViewFormats();
        for(int JvKPhOq=0; JvKPhOq < member.viewFormatCount; JvKPhOq++){
            [&](){[&](){[&](){return proto_arr.set(JvKPhOq,((member.pViewFormats)[JvKPhOq]));}();}();}();
        }
        }();
}

    VkImageFormatListCreateInfo deserialize_struct(VkImageFormatListCreateInfo::Reader reader){
        auto result=VkImageFormatListCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.viewFormatCount)=reader.getviewFormatCount();}();
[&](){ VkFormat* temp_IZMfCii[&](){
            if (!reader.haspViewFormats()){
                (result.pViewFormats)=NULL;
            return; }{native_concat()}=(VkFormat*)malloc(result.viewFormatCount*sizeof(VkFormat));
        auto proto_arr=reader.getpViewFormats(result.viewFormatCount);
        for(int tWwlFTf=0; tWwlFTf < result.viewFormatCount; tWwlFTf++){
            [&](){[&](){[&](){((result.pViewFormats)[tWwlFTf])=proto_arr[tWwlFTf];}();}();}();
        }
        }();(result.pViewFormats)=temp_IZMfCii;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkImageFormatListCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkImageFormatListCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkValidationCacheCreateInfoEXT::Builder& builder, VkValidationCacheCreateInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){return builder.setinitialDataSize((member.initialDataSize));}();
[&](){
            if ((member.pInitialData)==NULL){
                builder.disownpInitialData();
            return; }[&](){
            if (((char*)(member.pInitialData).pInitialData)==NULL){
                builder.disownpInitialData();
            return; }
        auto proto_arr=builder.initpInitialData();
        for(int VgUKinx=0; VgUKinx < member.initialDataSize; VgUKinx++){
            [&](){return proto_arr.set(VgUKinx,(((char*)(member.pInitialData).pInitialData)[VgUKinx]));}();
        }
        }();}();
}

    VkValidationCacheCreateInfoEXT deserialize_struct(VkValidationCacheCreateInfoEXT::Reader reader){
        auto result=VkValidationCacheCreateInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){(result.initialDataSize)=reader.getinitialDataSize();}();
[&](){ void* temp_hSGagCA[&](){
            if (!reader.haspInitialData()){
                (result.pInitialData)=NULL;
            return; }char* temp_MNyHoci;[&](){
            if (!reader.haspInitialData()){
                (temp_MNyHoci.pInitialData)=NULL;
            return; }{native_concat()}=(char*)malloc(result.initialDataSize*sizeof(char));
        auto proto_arr=reader.getpInitialData(result.initialDataSize);
        for(int FUremIn=0; FUremIn < result.initialDataSize; FUremIn++){
            [&](){((temp_MNyHoci.pInitialData)[FUremIn])=proto_arr[FUremIn];}();
        }
        }();(result.pInitialData)=temp_MNyHoci;}();(result.pInitialData)=temp_hSGagCA;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkValidationCacheCreateInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkValidationCacheCreateInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkShaderModuleValidationCacheCreateInfoEXT::Builder& builder, VkShaderModuleValidationCacheCreateInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setvalidationCache(serialize_handle(member.validationCache));}();
}

    VkShaderModuleValidationCacheCreateInfoEXT deserialize_struct(VkShaderModuleValidationCacheCreateInfoEXT::Reader reader){
        auto result=VkShaderModuleValidationCacheCreateInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.validationCache)=deserialize_handle(reader.getvalidationCache());}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkShaderModuleValidationCacheCreateInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkShaderModuleValidationCacheCreateInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceMaintenance3Properties::Builder& builder, VkPhysicalDeviceMaintenance3Properties member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setmaxPerSetDescriptors((member.maxPerSetDescriptors));}();
[&](){[&](){return builder.setmaxMemoryAllocationSize((member.maxMemoryAllocationSize));}();}();
}

    VkPhysicalDeviceMaintenance3Properties deserialize_struct(VkPhysicalDeviceMaintenance3Properties::Reader reader){
        auto result=VkPhysicalDeviceMaintenance3Properties();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.maxPerSetDescriptors)=reader.getmaxPerSetDescriptors();}();
[&](){[&](){(result.maxMemoryAllocationSize)=reader.getmaxMemoryAllocationSize();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceMaintenance3Properties member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceMaintenance3Properties member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceMaintenance4Features::Builder& builder, VkPhysicalDeviceMaintenance4Features member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setmaintenance4((member.maintenance4));}();}();
}

    VkPhysicalDeviceMaintenance4Features deserialize_struct(VkPhysicalDeviceMaintenance4Features::Reader reader){
        auto result=VkPhysicalDeviceMaintenance4Features();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.maintenance4)=reader.getmaintenance4();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceMaintenance4Features member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceMaintenance4Features member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceMaintenance4Properties::Builder& builder, VkPhysicalDeviceMaintenance4Properties member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setmaxBufferSize((member.maxBufferSize));}();}();
}

    VkPhysicalDeviceMaintenance4Properties deserialize_struct(VkPhysicalDeviceMaintenance4Properties::Reader reader){
        auto result=VkPhysicalDeviceMaintenance4Properties();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.maxBufferSize)=reader.getmaxBufferSize();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceMaintenance4Properties member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceMaintenance4Properties member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceMaintenance5FeaturesKHR::Builder& builder, VkPhysicalDeviceMaintenance5FeaturesKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setmaintenance5((member.maintenance5));}();}();
}

    VkPhysicalDeviceMaintenance5FeaturesKHR deserialize_struct(VkPhysicalDeviceMaintenance5FeaturesKHR::Reader reader){
        auto result=VkPhysicalDeviceMaintenance5FeaturesKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.maintenance5)=reader.getmaintenance5();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceMaintenance5FeaturesKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceMaintenance5FeaturesKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceMaintenance5PropertiesKHR::Builder& builder, VkPhysicalDeviceMaintenance5PropertiesKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setearlyFragmentMultisampleCoverageAfterSampleCounting((member.earlyFragmentMultisampleCoverageAfterSampleCounting));}();}();
[&](){[&](){return builder.setearlyFragmentSampleMaskTestBeforeSampleCounting((member.earlyFragmentSampleMaskTestBeforeSampleCounting));}();}();
[&](){[&](){return builder.setdepthStencilSwizzleOneSupport((member.depthStencilSwizzleOneSupport));}();}();
[&](){[&](){return builder.setpolygonModePointSize((member.polygonModePointSize));}();}();
[&](){[&](){return builder.setnonStrictSinglePixelWideLinesUseParallelogram((member.nonStrictSinglePixelWideLinesUseParallelogram));}();}();
[&](){[&](){return builder.setnonStrictWideLinesUseParallelogram((member.nonStrictWideLinesUseParallelogram));}();}();
}

    VkPhysicalDeviceMaintenance5PropertiesKHR deserialize_struct(VkPhysicalDeviceMaintenance5PropertiesKHR::Reader reader){
        auto result=VkPhysicalDeviceMaintenance5PropertiesKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.earlyFragmentMultisampleCoverageAfterSampleCounting)=reader.getearlyFragmentMultisampleCoverageAfterSampleCounting();}();}();
[&](){[&](){(result.earlyFragmentSampleMaskTestBeforeSampleCounting)=reader.getearlyFragmentSampleMaskTestBeforeSampleCounting();}();}();
[&](){[&](){(result.depthStencilSwizzleOneSupport)=reader.getdepthStencilSwizzleOneSupport();}();}();
[&](){[&](){(result.polygonModePointSize)=reader.getpolygonModePointSize();}();}();
[&](){[&](){(result.nonStrictSinglePixelWideLinesUseParallelogram)=reader.getnonStrictSinglePixelWideLinesUseParallelogram();}();}();
[&](){[&](){(result.nonStrictWideLinesUseParallelogram)=reader.getnonStrictWideLinesUseParallelogram();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceMaintenance5PropertiesKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceMaintenance5PropertiesKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkRenderingAreaInfoKHR::Builder& builder, VkRenderingAreaInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setviewMask((member.viewMask));}();
[&](){return builder.setcolorAttachmentCount((member.colorAttachmentCount));}();
[&](){
            if ((member.pColorAttachmentFormats)==NULL){
                builder.disownpColorAttachmentFormats();
            return; }
        auto proto_arr=builder.initpColorAttachmentFormats();
        for(int wEZNsRI=0; wEZNsRI < member.colorAttachmentCount; wEZNsRI++){
            [&](){[&](){[&](){return proto_arr.set(wEZNsRI,((member.pColorAttachmentFormats)[wEZNsRI]));}();}();}();
        }
        }();
[&](){[&](){[&](){return builder.setdepthAttachmentFormat((member.depthAttachmentFormat));}();}();}();
[&](){[&](){[&](){return builder.setstencilAttachmentFormat((member.stencilAttachmentFormat));}();}();}();
}

    VkRenderingAreaInfoKHR deserialize_struct(VkRenderingAreaInfoKHR::Reader reader){
        auto result=VkRenderingAreaInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.viewMask)=reader.getviewMask();}();
[&](){(result.colorAttachmentCount)=reader.getcolorAttachmentCount();}();
[&](){ VkFormat* temp_PrgeUSF[&](){
            if (!reader.haspColorAttachmentFormats()){
                (result.pColorAttachmentFormats)=NULL;
            return; }{native_concat()}=(VkFormat*)malloc(result.colorAttachmentCount*sizeof(VkFormat));
        auto proto_arr=reader.getpColorAttachmentFormats(result.colorAttachmentCount);
        for(int XcfMUtc=0; XcfMUtc < result.colorAttachmentCount; XcfMUtc++){
            [&](){[&](){[&](){((result.pColorAttachmentFormats)[XcfMUtc])=proto_arr[XcfMUtc];}();}();}();
        }
        }();(result.pColorAttachmentFormats)=temp_PrgeUSF;}();
[&](){[&](){[&](){(result.depthAttachmentFormat)=reader.getdepthAttachmentFormat();}();}();}();
[&](){[&](){[&](){(result.stencilAttachmentFormat)=reader.getstencilAttachmentFormat();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkRenderingAreaInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkRenderingAreaInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDescriptorSetLayoutSupport::Builder& builder, VkDescriptorSetLayoutSupport member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setsupported((member.supported));}();}();
}

    VkDescriptorSetLayoutSupport deserialize_struct(VkDescriptorSetLayoutSupport::Reader reader){
        auto result=VkDescriptorSetLayoutSupport();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.supported)=reader.getsupported();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDescriptorSetLayoutSupport member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDescriptorSetLayoutSupport member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceShaderDrawParametersFeatures::Builder& builder, VkPhysicalDeviceShaderDrawParametersFeatures member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setshaderDrawParameters((member.shaderDrawParameters));}();}();
}

    VkPhysicalDeviceShaderDrawParametersFeatures deserialize_struct(VkPhysicalDeviceShaderDrawParametersFeatures::Reader reader){
        auto result=VkPhysicalDeviceShaderDrawParametersFeatures();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.shaderDrawParameters)=reader.getshaderDrawParameters();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceShaderDrawParametersFeatures member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceShaderDrawParametersFeatures member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceShaderFloat16Int8Features::Builder& builder, VkPhysicalDeviceShaderFloat16Int8Features member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setshaderFloat16((member.shaderFloat16));}();}();
[&](){[&](){return builder.setshaderInt8((member.shaderInt8));}();}();
}

    VkPhysicalDeviceShaderFloat16Int8Features deserialize_struct(VkPhysicalDeviceShaderFloat16Int8Features::Reader reader){
        auto result=VkPhysicalDeviceShaderFloat16Int8Features();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.shaderFloat16)=reader.getshaderFloat16();}();}();
[&](){[&](){(result.shaderInt8)=reader.getshaderInt8();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceShaderFloat16Int8Features member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceShaderFloat16Int8Features member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceFloatControlsProperties::Builder& builder, VkPhysicalDeviceFloatControlsProperties member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setdenormBehaviorIndependence((member.denormBehaviorIndependence));}();}();}();
[&](){[&](){[&](){return builder.setroundingModeIndependence((member.roundingModeIndependence));}();}();}();
[&](){[&](){return builder.setshaderSignedZeroInfNanPreserveFloat16((member.shaderSignedZeroInfNanPreserveFloat16));}();}();
[&](){[&](){return builder.setshaderSignedZeroInfNanPreserveFloat32((member.shaderSignedZeroInfNanPreserveFloat32));}();}();
[&](){[&](){return builder.setshaderSignedZeroInfNanPreserveFloat64((member.shaderSignedZeroInfNanPreserveFloat64));}();}();
[&](){[&](){return builder.setshaderDenormPreserveFloat16((member.shaderDenormPreserveFloat16));}();}();
[&](){[&](){return builder.setshaderDenormPreserveFloat32((member.shaderDenormPreserveFloat32));}();}();
[&](){[&](){return builder.setshaderDenormPreserveFloat64((member.shaderDenormPreserveFloat64));}();}();
[&](){[&](){return builder.setshaderDenormFlushToZeroFloat16((member.shaderDenormFlushToZeroFloat16));}();}();
[&](){[&](){return builder.setshaderDenormFlushToZeroFloat32((member.shaderDenormFlushToZeroFloat32));}();}();
[&](){[&](){return builder.setshaderDenormFlushToZeroFloat64((member.shaderDenormFlushToZeroFloat64));}();}();
[&](){[&](){return builder.setshaderRoundingModeRTEFloat16((member.shaderRoundingModeRTEFloat16));}();}();
[&](){[&](){return builder.setshaderRoundingModeRTEFloat32((member.shaderRoundingModeRTEFloat32));}();}();
[&](){[&](){return builder.setshaderRoundingModeRTEFloat64((member.shaderRoundingModeRTEFloat64));}();}();
[&](){[&](){return builder.setshaderRoundingModeRTZFloat16((member.shaderRoundingModeRTZFloat16));}();}();
[&](){[&](){return builder.setshaderRoundingModeRTZFloat32((member.shaderRoundingModeRTZFloat32));}();}();
[&](){[&](){return builder.setshaderRoundingModeRTZFloat64((member.shaderRoundingModeRTZFloat64));}();}();
}

    VkPhysicalDeviceFloatControlsProperties deserialize_struct(VkPhysicalDeviceFloatControlsProperties::Reader reader){
        auto result=VkPhysicalDeviceFloatControlsProperties();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.denormBehaviorIndependence)=reader.getdenormBehaviorIndependence();}();}();}();
[&](){[&](){[&](){(result.roundingModeIndependence)=reader.getroundingModeIndependence();}();}();}();
[&](){[&](){(result.shaderSignedZeroInfNanPreserveFloat16)=reader.getshaderSignedZeroInfNanPreserveFloat16();}();}();
[&](){[&](){(result.shaderSignedZeroInfNanPreserveFloat32)=reader.getshaderSignedZeroInfNanPreserveFloat32();}();}();
[&](){[&](){(result.shaderSignedZeroInfNanPreserveFloat64)=reader.getshaderSignedZeroInfNanPreserveFloat64();}();}();
[&](){[&](){(result.shaderDenormPreserveFloat16)=reader.getshaderDenormPreserveFloat16();}();}();
[&](){[&](){(result.shaderDenormPreserveFloat32)=reader.getshaderDenormPreserveFloat32();}();}();
[&](){[&](){(result.shaderDenormPreserveFloat64)=reader.getshaderDenormPreserveFloat64();}();}();
[&](){[&](){(result.shaderDenormFlushToZeroFloat16)=reader.getshaderDenormFlushToZeroFloat16();}();}();
[&](){[&](){(result.shaderDenormFlushToZeroFloat32)=reader.getshaderDenormFlushToZeroFloat32();}();}();
[&](){[&](){(result.shaderDenormFlushToZeroFloat64)=reader.getshaderDenormFlushToZeroFloat64();}();}();
[&](){[&](){(result.shaderRoundingModeRTEFloat16)=reader.getshaderRoundingModeRTEFloat16();}();}();
[&](){[&](){(result.shaderRoundingModeRTEFloat32)=reader.getshaderRoundingModeRTEFloat32();}();}();
[&](){[&](){(result.shaderRoundingModeRTEFloat64)=reader.getshaderRoundingModeRTEFloat64();}();}();
[&](){[&](){(result.shaderRoundingModeRTZFloat16)=reader.getshaderRoundingModeRTZFloat16();}();}();
[&](){[&](){(result.shaderRoundingModeRTZFloat32)=reader.getshaderRoundingModeRTZFloat32();}();}();
[&](){[&](){(result.shaderRoundingModeRTZFloat64)=reader.getshaderRoundingModeRTZFloat64();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceFloatControlsProperties member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceFloatControlsProperties member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceHostQueryResetFeatures::Builder& builder, VkPhysicalDeviceHostQueryResetFeatures member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.sethostQueryReset((member.hostQueryReset));}();}();
}

    VkPhysicalDeviceHostQueryResetFeatures deserialize_struct(VkPhysicalDeviceHostQueryResetFeatures::Reader reader){
        auto result=VkPhysicalDeviceHostQueryResetFeatures();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.hostQueryReset)=reader.gethostQueryReset();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceHostQueryResetFeatures member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceHostQueryResetFeatures member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkShaderResourceUsageAMD::Builder& builder, VkShaderResourceUsageAMD member){
        
    
[&](){return builder.setnumUsedVgprs((member.numUsedVgprs));}();
[&](){return builder.setnumUsedSgprs((member.numUsedSgprs));}();
[&](){return builder.setldsSizePerLocalWorkGroup((member.ldsSizePerLocalWorkGroup));}();
[&](){return builder.setldsUsageSizeInBytes((member.ldsUsageSizeInBytes));}();
[&](){return builder.setscratchMemUsageInBytes((member.scratchMemUsageInBytes));}();
}

    VkShaderResourceUsageAMD deserialize_struct(VkShaderResourceUsageAMD::Reader reader){
        auto result=VkShaderResourceUsageAMD();
    
[&](){(result.numUsedVgprs)=reader.getnumUsedVgprs();}();
[&](){(result.numUsedSgprs)=reader.getnumUsedSgprs();}();
[&](){(result.ldsSizePerLocalWorkGroup)=reader.getldsSizePerLocalWorkGroup();}();
[&](){(result.ldsUsageSizeInBytes)=reader.getldsUsageSizeInBytes();}();
[&](){(result.scratchMemUsageInBytes)=reader.getscratchMemUsageInBytes();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkShaderResourceUsageAMD member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkShaderResourceUsageAMD member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkShaderStatisticsInfoAMD::Builder& builder, VkShaderStatisticsInfoAMD member){
        
    
[&](){[&](){[&](){return builder.setshaderStageMask((member.shaderStageMask));}();}();}();
[&](){
            auto temp=builder.initresourceUsage(resourceUsage);
            return serialize_struct((member.resourceUsage), temp);
            }();
[&](){return builder.setnumPhysicalVgprs((member.numPhysicalVgprs));}();
[&](){return builder.setnumPhysicalSgprs((member.numPhysicalSgprs));}();
[&](){return builder.setnumAvailableVgprs((member.numAvailableVgprs));}();
[&](){return builder.setnumAvailableSgprs((member.numAvailableSgprs));}();
[&](){
        auto proto_arr=builder.initcomputeWorkGroupSize();
        for(int gYtCXER=0; gYtCXER < 3; gYtCXER++){
            [&](){return proto_arr.set(gYtCXER,((member.computeWorkGroupSize)[gYtCXER]));}();
        }
        }();
}

    VkShaderStatisticsInfoAMD deserialize_struct(VkShaderStatisticsInfoAMD::Reader reader){
        auto result=VkShaderStatisticsInfoAMD();
    
[&](){[&](){[&](){(result.shaderStageMask)=reader.getshaderStageMask();}();}();}();
[&](){
            auto temp=reader.getresourceUsage();
            (result.resourceUsage)=deserialize_struct(temp);
            }();
[&](){(result.numPhysicalVgprs)=reader.getnumPhysicalVgprs();}();
[&](){(result.numPhysicalSgprs)=reader.getnumPhysicalSgprs();}();
[&](){(result.numAvailableVgprs)=reader.getnumAvailableVgprs();}();
[&](){(result.numAvailableSgprs)=reader.getnumAvailableSgprs();}();
[&](){
        auto proto_arr=reader.getcomputeWorkGroupSize(3);
        for(int gYtCXER=0; gYtCXER < 3; gYtCXER++){
            [&](){((result.computeWorkGroupSize)[gYtCXER])=proto_arr[gYtCXER];}();
        }
        }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkShaderStatisticsInfoAMD member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkShaderStatisticsInfoAMD member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDeviceQueueGlobalPriorityCreateInfoKHR::Builder& builder, VkDeviceQueueGlobalPriorityCreateInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setglobalPriority((member.globalPriority));}();}();}();
}

    VkDeviceQueueGlobalPriorityCreateInfoKHR deserialize_struct(VkDeviceQueueGlobalPriorityCreateInfoKHR::Reader reader){
        auto result=VkDeviceQueueGlobalPriorityCreateInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.globalPriority)=reader.getglobalPriority();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDeviceQueueGlobalPriorityCreateInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDeviceQueueGlobalPriorityCreateInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR::Builder& builder, VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setglobalPriorityQuery((member.globalPriorityQuery));}();}();
}

    VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR deserialize_struct(VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR::Reader reader){
        auto result=VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.globalPriorityQuery)=reader.getglobalPriorityQuery();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkQueueFamilyGlobalPriorityPropertiesKHR::Builder& builder, VkQueueFamilyGlobalPriorityPropertiesKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setpriorityCount((member.priorityCount));}();
[&](){
        auto proto_arr=builder.initpriorities();
        for(int fMHmDjA=0; fMHmDjA < VK_MAX_GLOBAL_PRIORITY_SIZE_KHR; fMHmDjA++){
            [&](){[&](){[&](){return proto_arr.set(fMHmDjA,((member.priorities)[fMHmDjA]));}();}();}();
        }
        }();
}

    VkQueueFamilyGlobalPriorityPropertiesKHR deserialize_struct(VkQueueFamilyGlobalPriorityPropertiesKHR::Reader reader){
        auto result=VkQueueFamilyGlobalPriorityPropertiesKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.priorityCount)=reader.getpriorityCount();}();
[&](){
        auto proto_arr=reader.getpriorities(VK_MAX_GLOBAL_PRIORITY_SIZE_KHR);
        for(int fMHmDjA=0; fMHmDjA < VK_MAX_GLOBAL_PRIORITY_SIZE_KHR; fMHmDjA++){
            [&](){[&](){[&](){((result.priorities)[fMHmDjA])=proto_arr[fMHmDjA];}();}();}();
        }
        }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkQueueFamilyGlobalPriorityPropertiesKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkQueueFamilyGlobalPriorityPropertiesKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDebugUtilsObjectNameInfoEXT::Builder& builder, VkDebugUtilsObjectNameInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setobjectType((member.objectType));}();}();}();
[&](){return builder.setobjectHandle((member.objectHandle));}();
[&](){
            if ((member.pObjectName)==NULL){
                builder.disownpObjectName();
            return; }
        auto proto_arr=builder.initpObjectName();
        for(int IrvYMgK=0; IrvYMgK < strlen((member.pObjectName))+1; IrvYMgK++){
            [&](){return proto_arr.set(IrvYMgK,((member.pObjectName)[IrvYMgK]));}();
        }
        }();
}

    VkDebugUtilsObjectNameInfoEXT deserialize_struct(VkDebugUtilsObjectNameInfoEXT::Reader reader){
        auto result=VkDebugUtilsObjectNameInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.objectType)=reader.getobjectType();}();}();}();
[&](){(result.objectHandle)=reader.getobjectHandle();}();
[&](){ char* temp_AUIQNis[&](){
            if (!reader.haspObjectName()){
                (result.pObjectName)=NULL;
            return; }{native_concat()}=(char*)malloc(reader.getpObjectName().size();*sizeof(char));
        auto proto_arr=reader.getpObjectName(reader.getpObjectName().size(););
        for(int vNFhQsi=0; vNFhQsi < reader.getpObjectName().size();; vNFhQsi++){
            [&](){((result.pObjectName)[vNFhQsi])=proto_arr[vNFhQsi];}();
        }
        }();(result.pObjectName)=temp_AUIQNis;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDebugUtilsObjectNameInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDebugUtilsObjectNameInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDebugUtilsObjectTagInfoEXT::Builder& builder, VkDebugUtilsObjectTagInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setobjectType((member.objectType));}();}();}();
[&](){return builder.setobjectHandle((member.objectHandle));}();
[&](){return builder.settagName((member.tagName));}();
[&](){return builder.settagSize((member.tagSize));}();
[&](){
            if ((member.pTag)==NULL){
                builder.disownpTag();
            return; }[&](){
            if (((char*)(member.pTag).pTag)==NULL){
                builder.disownpTag();
            return; }
        auto proto_arr=builder.initpTag();
        for(int RyqFIjd=0; RyqFIjd < member.tagSize; RyqFIjd++){
            [&](){return proto_arr.set(RyqFIjd,(((char*)(member.pTag).pTag)[RyqFIjd]));}();
        }
        }();}();
}

    VkDebugUtilsObjectTagInfoEXT deserialize_struct(VkDebugUtilsObjectTagInfoEXT::Reader reader){
        auto result=VkDebugUtilsObjectTagInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.objectType)=reader.getobjectType();}();}();}();
[&](){(result.objectHandle)=reader.getobjectHandle();}();
[&](){(result.tagName)=reader.gettagName();}();
[&](){(result.tagSize)=reader.gettagSize();}();
[&](){ void* temp_hwJmLWe[&](){
            if (!reader.haspTag()){
                (result.pTag)=NULL;
            return; }char* temp_BYVrBDU;[&](){
            if (!reader.haspTag()){
                (temp_BYVrBDU.pTag)=NULL;
            return; }{native_concat()}=(char*)malloc(result.tagSize*sizeof(char));
        auto proto_arr=reader.getpTag(result.tagSize);
        for(int lxDYfsn=0; lxDYfsn < result.tagSize; lxDYfsn++){
            [&](){((temp_BYVrBDU.pTag)[lxDYfsn])=proto_arr[lxDYfsn];}();
        }
        }();(result.pTag)=temp_BYVrBDU;}();(result.pTag)=temp_hwJmLWe;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDebugUtilsObjectTagInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDebugUtilsObjectTagInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDebugUtilsLabelEXT::Builder& builder, VkDebugUtilsLabelEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            if ((member.pLabelName)==NULL){
                builder.disownpLabelName();
            return; }
        auto proto_arr=builder.initpLabelName();
        for(int MIohVNO=0; MIohVNO < strlen((member.pLabelName))+1; MIohVNO++){
            [&](){return proto_arr.set(MIohVNO,((member.pLabelName)[MIohVNO]));}();
        }
        }();
[&](){
        auto proto_arr=builder.initcolor();
        for(int oKnkjtQ=0; oKnkjtQ < 4; oKnkjtQ++){
            [&](){return proto_arr.set(oKnkjtQ,((member.color)[oKnkjtQ]));}();
        }
        }();
}

    VkDebugUtilsLabelEXT deserialize_struct(VkDebugUtilsLabelEXT::Reader reader){
        auto result=VkDebugUtilsLabelEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){ char* temp_rAzUFXL[&](){
            if (!reader.haspLabelName()){
                (result.pLabelName)=NULL;
            return; }{native_concat()}=(char*)malloc(reader.getpLabelName().size();*sizeof(char));
        auto proto_arr=reader.getpLabelName(reader.getpLabelName().size(););
        for(int HnGeXhl=0; HnGeXhl < reader.getpLabelName().size();; HnGeXhl++){
            [&](){((result.pLabelName)[HnGeXhl])=proto_arr[HnGeXhl];}();
        }
        }();(result.pLabelName)=temp_rAzUFXL;}();
[&](){
        auto proto_arr=reader.getcolor(4);
        for(int oKnkjtQ=0; oKnkjtQ < 4; oKnkjtQ++){
            [&](){((result.color)[oKnkjtQ])=proto_arr[oKnkjtQ];}();
        }
        }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDebugUtilsLabelEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDebugUtilsLabelEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDebugUtilsMessengerCreateInfoEXT::Builder& builder, VkDebugUtilsMessengerCreateInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){[&](){[&](){return builder.setmessageSeverity((member.messageSeverity));}();}();}();
[&](){[&](){[&](){return builder.setmessageType((member.messageType));}();}();}();
[&](){
            auto temp=builder.initpfnUserCallback(pfnUserCallback);
            return serialize_funcpointer((member.pfnUserCallback), temp);
            }();
[&](){
            auto temp=builder.initpUserData(pUserData);
            return serialize_struct((member.pUserData), temp);
            }();
}

    VkDebugUtilsMessengerCreateInfoEXT deserialize_struct(VkDebugUtilsMessengerCreateInfoEXT::Reader reader){
        auto result=VkDebugUtilsMessengerCreateInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){[&](){[&](){(result.messageSeverity)=reader.getmessageSeverity();}();}();}();
[&](){[&](){[&](){(result.messageType)=reader.getmessageType();}();}();}();
[&](){
#ifndef CLIENT
            auto temp=reader.getpfnUserCallback();
            (result.pfnUserCallback)=deserialize_funcpointer(temp);
            #endif
}();
[&](){
            auto temp=reader.getpUserData();
            (result.pUserData)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDebugUtilsMessengerCreateInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
builder.setPFN_vkDebugUtilsMessengerCallbackEXT((uintptr_t)(member.pfnUserCallback));
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDebugUtilsMessengerCreateInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();
result.pfnUserCallback=reader.getPFN_vkDebugUtilsMessengerCallbackEXT();

    return result;
    #endif
    }
    

    void serialize_struct(VkDebugUtilsMessengerCallbackDataEXT::Builder& builder, VkDebugUtilsMessengerCallbackDataEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){
            if ((member.pMessageIdName)==NULL){
                builder.disownpMessageIdName();
            return; }
        auto proto_arr=builder.initpMessageIdName();
        for(int BmwQwRz=0; BmwQwRz < strlen((member.pMessageIdName))+1; BmwQwRz++){
            [&](){return proto_arr.set(BmwQwRz,((member.pMessageIdName)[BmwQwRz]));}();
        }
        }();
[&](){return builder.setmessageIdNumber((member.messageIdNumber));}();
[&](){
            if ((member.pMessage)==NULL){
                builder.disownpMessage();
            return; }
        auto proto_arr=builder.initpMessage();
        for(int SjkcUWO=0; SjkcUWO < strlen((member.pMessage))+1; SjkcUWO++){
            [&](){return proto_arr.set(SjkcUWO,((member.pMessage)[SjkcUWO]));}();
        }
        }();
[&](){return builder.setqueueLabelCount((member.queueLabelCount));}();
[&](){
            if ((member.pQueueLabels)==NULL){
                builder.disownpQueueLabels();
            return; }
        auto proto_arr=builder.initpQueueLabels();
        for(int Cickicm=0; Cickicm < member.queueLabelCount; Cickicm++){
            [&](){
            auto temp=proto_arr[Cickicm];
            return serialize_struct(((member.pQueueLabels)[Cickicm]), temp);
            }();
        }
        }();
[&](){return builder.setcmdBufLabelCount((member.cmdBufLabelCount));}();
[&](){
            if ((member.pCmdBufLabels)==NULL){
                builder.disownpCmdBufLabels();
            return; }
        auto proto_arr=builder.initpCmdBufLabels();
        for(int oRsJZdR=0; oRsJZdR < member.cmdBufLabelCount; oRsJZdR++){
            [&](){
            auto temp=proto_arr[oRsJZdR];
            return serialize_struct(((member.pCmdBufLabels)[oRsJZdR]), temp);
            }();
        }
        }();
[&](){return builder.setobjectCount((member.objectCount));}();
[&](){
            if ((member.pObjects)==NULL){
                builder.disownpObjects();
            return; }
        auto proto_arr=builder.initpObjects();
        for(int uqPjyhr=0; uqPjyhr < member.objectCount; uqPjyhr++){
            [&](){
            auto temp=proto_arr[uqPjyhr];
            return serialize_struct(((member.pObjects)[uqPjyhr]), temp);
            }();
        }
        }();
}

    VkDebugUtilsMessengerCallbackDataEXT deserialize_struct(VkDebugUtilsMessengerCallbackDataEXT::Reader reader){
        auto result=VkDebugUtilsMessengerCallbackDataEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){ char* temp_kwCXxpj[&](){
            if (!reader.haspMessageIdName()){
                (result.pMessageIdName)=NULL;
            return; }{native_concat()}=(char*)malloc(reader.getpMessageIdName().size();*sizeof(char));
        auto proto_arr=reader.getpMessageIdName(reader.getpMessageIdName().size(););
        for(int ModiWWF=0; ModiWWF < reader.getpMessageIdName().size();; ModiWWF++){
            [&](){((result.pMessageIdName)[ModiWWF])=proto_arr[ModiWWF];}();
        }
        }();(result.pMessageIdName)=temp_kwCXxpj;}();
[&](){(result.messageIdNumber)=reader.getmessageIdNumber();}();
[&](){ char* temp_vAWXWir[&](){
            if (!reader.haspMessage()){
                (result.pMessage)=NULL;
            return; }{native_concat()}=(char*)malloc(reader.getpMessage().size();*sizeof(char));
        auto proto_arr=reader.getpMessage(reader.getpMessage().size(););
        for(int GRiWTDL=0; GRiWTDL < reader.getpMessage().size();; GRiWTDL++){
            [&](){((result.pMessage)[GRiWTDL])=proto_arr[GRiWTDL];}();
        }
        }();(result.pMessage)=temp_vAWXWir;}();
[&](){(result.queueLabelCount)=reader.getqueueLabelCount();}();
[&](){ VkDebugUtilsLabelEXT* temp_ULVZxDs[&](){
            if (!reader.haspQueueLabels()){
                (result.pQueueLabels)=NULL;
            return; }{native_concat()}=(VkDebugUtilsLabelEXT*)malloc(result.queueLabelCount*sizeof(VkDebugUtilsLabelEXT));
        auto proto_arr=reader.getpQueueLabels(result.queueLabelCount);
        for(int LkHCjKg=0; LkHCjKg < result.queueLabelCount; LkHCjKg++){
            [&](){
            auto temp=proto_arr[LkHCjKg];
            ((result.pQueueLabels)[LkHCjKg])=deserialize_struct(temp);
            }();
        }
        }();(result.pQueueLabels)=temp_ULVZxDs;}();
[&](){(result.cmdBufLabelCount)=reader.getcmdBufLabelCount();}();
[&](){ VkDebugUtilsLabelEXT* temp_oIvrzce[&](){
            if (!reader.haspCmdBufLabels()){
                (result.pCmdBufLabels)=NULL;
            return; }{native_concat()}=(VkDebugUtilsLabelEXT*)malloc(result.cmdBufLabelCount*sizeof(VkDebugUtilsLabelEXT));
        auto proto_arr=reader.getpCmdBufLabels(result.cmdBufLabelCount);
        for(int aRHhrDc=0; aRHhrDc < result.cmdBufLabelCount; aRHhrDc++){
            [&](){
            auto temp=proto_arr[aRHhrDc];
            ((result.pCmdBufLabels)[aRHhrDc])=deserialize_struct(temp);
            }();
        }
        }();(result.pCmdBufLabels)=temp_oIvrzce;}();
[&](){(result.objectCount)=reader.getobjectCount();}();
[&](){ VkDebugUtilsObjectNameInfoEXT* temp_TvcwRHi[&](){
            if (!reader.haspObjects()){
                (result.pObjects)=NULL;
            return; }{native_concat()}=(VkDebugUtilsObjectNameInfoEXT*)malloc(result.objectCount*sizeof(VkDebugUtilsObjectNameInfoEXT));
        auto proto_arr=reader.getpObjects(result.objectCount);
        for(int SOnpTum=0; SOnpTum < result.objectCount; SOnpTum++){
            [&](){
            auto temp=proto_arr[SOnpTum];
            ((result.pObjects)[SOnpTum])=deserialize_struct(temp);
            }();
        }
        }();(result.pObjects)=temp_TvcwRHi;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDebugUtilsMessengerCallbackDataEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDebugUtilsMessengerCallbackDataEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceDeviceMemoryReportFeaturesEXT::Builder& builder, VkPhysicalDeviceDeviceMemoryReportFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setdeviceMemoryReport((member.deviceMemoryReport));}();}();
}

    VkPhysicalDeviceDeviceMemoryReportFeaturesEXT deserialize_struct(VkPhysicalDeviceDeviceMemoryReportFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceDeviceMemoryReportFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.deviceMemoryReport)=reader.getdeviceMemoryReport();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceDeviceMemoryReportFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceDeviceMemoryReportFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDeviceDeviceMemoryReportCreateInfoEXT::Builder& builder, VkDeviceDeviceMemoryReportCreateInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){
            auto temp=builder.initpfnUserCallback(pfnUserCallback);
            return serialize_funcpointer((member.pfnUserCallback), temp);
            }();
[&](){
            auto temp=builder.initpUserData(pUserData);
            return serialize_struct((member.pUserData), temp);
            }();
}

    VkDeviceDeviceMemoryReportCreateInfoEXT deserialize_struct(VkDeviceDeviceMemoryReportCreateInfoEXT::Reader reader){
        auto result=VkDeviceDeviceMemoryReportCreateInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){
#ifndef CLIENT
            auto temp=reader.getpfnUserCallback();
            (result.pfnUserCallback)=deserialize_funcpointer(temp);
            #endif
}();
[&](){
            auto temp=reader.getpUserData();
            (result.pUserData)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDeviceDeviceMemoryReportCreateInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
builder.setPFN_vkDeviceMemoryReportCallbackEXT((uintptr_t)(member.pfnUserCallback));
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDeviceDeviceMemoryReportCreateInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();
result.pfnUserCallback=reader.getPFN_vkDeviceMemoryReportCallbackEXT();

    return result;
    #endif
    }
    

    void serialize_struct(VkDeviceMemoryReportCallbackDataEXT::Builder& builder, VkDeviceMemoryReportCallbackDataEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){[&](){[&](){return builder.settype((member.type));}();}();}();
[&](){return builder.setmemoryObjectId((member.memoryObjectId));}();
[&](){[&](){return builder.setsize((member.size));}();}();
[&](){[&](){[&](){return builder.setobjectType((member.objectType));}();}();}();
[&](){return builder.setobjectHandle((member.objectHandle));}();
[&](){return builder.setheapIndex((member.heapIndex));}();
}

    VkDeviceMemoryReportCallbackDataEXT deserialize_struct(VkDeviceMemoryReportCallbackDataEXT::Reader reader){
        auto result=VkDeviceMemoryReportCallbackDataEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){[&](){[&](){(result.type)=reader.gettype();}();}();}();
[&](){(result.memoryObjectId)=reader.getmemoryObjectId();}();
[&](){[&](){(result.size)=reader.getsize();}();}();
[&](){[&](){[&](){(result.objectType)=reader.getobjectType();}();}();}();
[&](){(result.objectHandle)=reader.getobjectHandle();}();
[&](){(result.heapIndex)=reader.getheapIndex();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDeviceMemoryReportCallbackDataEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDeviceMemoryReportCallbackDataEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkImportMemoryHostPointerInfoEXT::Builder& builder, VkImportMemoryHostPointerInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.sethandleType((member.handleType));}();}();}();
[&](){
            if ((member.pHostPointer)==NULL){
                builder.disownpHostPointer();
            return; }[&](){
            if (((char*)(member.pHostPointer).pHostPointer)==NULL){
                builder.disownpHostPointer();
            return; }
        auto proto_arr=builder.initpHostPointer();
        for(int XfuwLTM=0; XfuwLTM < strlen(((char*)(member.pHostPointer).pHostPointer))+1; XfuwLTM++){
            [&](){return proto_arr.set(XfuwLTM,(((char*)(member.pHostPointer).pHostPointer)[XfuwLTM]));}();
        }
        }();}();
}

    VkImportMemoryHostPointerInfoEXT deserialize_struct(VkImportMemoryHostPointerInfoEXT::Reader reader){
        auto result=VkImportMemoryHostPointerInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.handleType)=reader.gethandleType();}();}();}();
[&](){
            if (!reader.haspHostPointer()){
                (result.pHostPointer)=NULL;
            return; }char* temp_sulXjuh;[&](){
            if (!reader.haspHostPointer()){
                (temp_sulXjuh.pHostPointer)=NULL;
            return; }{native_concat()}=(char*)malloc(reader.getpHostPointer().size();*sizeof(char));
        auto proto_arr=reader.getpHostPointer(reader.getpHostPointer().size(););
        for(int XfuwLTM=0; XfuwLTM < reader.getpHostPointer().size();; XfuwLTM++){
            [&](){((temp_sulXjuh.pHostPointer)[XfuwLTM])=proto_arr[XfuwLTM];}();
        }
        }();(result.pHostPointer)=temp_sulXjuh;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkImportMemoryHostPointerInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkImportMemoryHostPointerInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkMemoryHostPointerPropertiesEXT::Builder& builder, VkMemoryHostPointerPropertiesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setmemoryTypeBits((member.memoryTypeBits));}();
}

    VkMemoryHostPointerPropertiesEXT deserialize_struct(VkMemoryHostPointerPropertiesEXT::Reader reader){
        auto result=VkMemoryHostPointerPropertiesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.memoryTypeBits)=reader.getmemoryTypeBits();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkMemoryHostPointerPropertiesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkMemoryHostPointerPropertiesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceExternalMemoryHostPropertiesEXT::Builder& builder, VkPhysicalDeviceExternalMemoryHostPropertiesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setminImportedHostPointerAlignment((member.minImportedHostPointerAlignment));}();}();
}

    VkPhysicalDeviceExternalMemoryHostPropertiesEXT deserialize_struct(VkPhysicalDeviceExternalMemoryHostPropertiesEXT::Reader reader){
        auto result=VkPhysicalDeviceExternalMemoryHostPropertiesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.minImportedHostPointerAlignment)=reader.getminImportedHostPointerAlignment();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceExternalMemoryHostPropertiesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceExternalMemoryHostPropertiesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceConservativeRasterizationPropertiesEXT::Builder& builder, VkPhysicalDeviceConservativeRasterizationPropertiesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setprimitiveOverestimationSize((member.primitiveOverestimationSize));}();
[&](){return builder.setmaxExtraPrimitiveOverestimationSize((member.maxExtraPrimitiveOverestimationSize));}();
[&](){return builder.setextraPrimitiveOverestimationSizeGranularity((member.extraPrimitiveOverestimationSizeGranularity));}();
[&](){[&](){return builder.setprimitiveUnderestimation((member.primitiveUnderestimation));}();}();
[&](){[&](){return builder.setconservativePointAndLineRasterization((member.conservativePointAndLineRasterization));}();}();
[&](){[&](){return builder.setdegenerateTrianglesRasterized((member.degenerateTrianglesRasterized));}();}();
[&](){[&](){return builder.setdegenerateLinesRasterized((member.degenerateLinesRasterized));}();}();
[&](){[&](){return builder.setfullyCoveredFragmentShaderInputVariable((member.fullyCoveredFragmentShaderInputVariable));}();}();
[&](){[&](){return builder.setconservativeRasterizationPostDepthCoverage((member.conservativeRasterizationPostDepthCoverage));}();}();
}

    VkPhysicalDeviceConservativeRasterizationPropertiesEXT deserialize_struct(VkPhysicalDeviceConservativeRasterizationPropertiesEXT::Reader reader){
        auto result=VkPhysicalDeviceConservativeRasterizationPropertiesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.primitiveOverestimationSize)=reader.getprimitiveOverestimationSize();}();
[&](){(result.maxExtraPrimitiveOverestimationSize)=reader.getmaxExtraPrimitiveOverestimationSize();}();
[&](){(result.extraPrimitiveOverestimationSizeGranularity)=reader.getextraPrimitiveOverestimationSizeGranularity();}();
[&](){[&](){(result.primitiveUnderestimation)=reader.getprimitiveUnderestimation();}();}();
[&](){[&](){(result.conservativePointAndLineRasterization)=reader.getconservativePointAndLineRasterization();}();}();
[&](){[&](){(result.degenerateTrianglesRasterized)=reader.getdegenerateTrianglesRasterized();}();}();
[&](){[&](){(result.degenerateLinesRasterized)=reader.getdegenerateLinesRasterized();}();}();
[&](){[&](){(result.fullyCoveredFragmentShaderInputVariable)=reader.getfullyCoveredFragmentShaderInputVariable();}();}();
[&](){[&](){(result.conservativeRasterizationPostDepthCoverage)=reader.getconservativeRasterizationPostDepthCoverage();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceConservativeRasterizationPropertiesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceConservativeRasterizationPropertiesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkCalibratedTimestampInfoEXT::Builder& builder, VkCalibratedTimestampInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.settimeDomain((member.timeDomain));}();}();}();
}

    VkCalibratedTimestampInfoEXT deserialize_struct(VkCalibratedTimestampInfoEXT::Reader reader){
        auto result=VkCalibratedTimestampInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.timeDomain)=reader.gettimeDomain();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkCalibratedTimestampInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkCalibratedTimestampInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceShaderCorePropertiesAMD::Builder& builder, VkPhysicalDeviceShaderCorePropertiesAMD member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setshaderEngineCount((member.shaderEngineCount));}();
[&](){return builder.setshaderArraysPerEngineCount((member.shaderArraysPerEngineCount));}();
[&](){return builder.setcomputeUnitsPerShaderArray((member.computeUnitsPerShaderArray));}();
[&](){return builder.setsimdPerComputeUnit((member.simdPerComputeUnit));}();
[&](){return builder.setwavefrontsPerSimd((member.wavefrontsPerSimd));}();
[&](){return builder.setwavefrontSize((member.wavefrontSize));}();
[&](){return builder.setsgprsPerSimd((member.sgprsPerSimd));}();
[&](){return builder.setminSgprAllocation((member.minSgprAllocation));}();
[&](){return builder.setmaxSgprAllocation((member.maxSgprAllocation));}();
[&](){return builder.setsgprAllocationGranularity((member.sgprAllocationGranularity));}();
[&](){return builder.setvgprsPerSimd((member.vgprsPerSimd));}();
[&](){return builder.setminVgprAllocation((member.minVgprAllocation));}();
[&](){return builder.setmaxVgprAllocation((member.maxVgprAllocation));}();
[&](){return builder.setvgprAllocationGranularity((member.vgprAllocationGranularity));}();
}

    VkPhysicalDeviceShaderCorePropertiesAMD deserialize_struct(VkPhysicalDeviceShaderCorePropertiesAMD::Reader reader){
        auto result=VkPhysicalDeviceShaderCorePropertiesAMD();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.shaderEngineCount)=reader.getshaderEngineCount();}();
[&](){(result.shaderArraysPerEngineCount)=reader.getshaderArraysPerEngineCount();}();
[&](){(result.computeUnitsPerShaderArray)=reader.getcomputeUnitsPerShaderArray();}();
[&](){(result.simdPerComputeUnit)=reader.getsimdPerComputeUnit();}();
[&](){(result.wavefrontsPerSimd)=reader.getwavefrontsPerSimd();}();
[&](){(result.wavefrontSize)=reader.getwavefrontSize();}();
[&](){(result.sgprsPerSimd)=reader.getsgprsPerSimd();}();
[&](){(result.minSgprAllocation)=reader.getminSgprAllocation();}();
[&](){(result.maxSgprAllocation)=reader.getmaxSgprAllocation();}();
[&](){(result.sgprAllocationGranularity)=reader.getsgprAllocationGranularity();}();
[&](){(result.vgprsPerSimd)=reader.getvgprsPerSimd();}();
[&](){(result.minVgprAllocation)=reader.getminVgprAllocation();}();
[&](){(result.maxVgprAllocation)=reader.getmaxVgprAllocation();}();
[&](){(result.vgprAllocationGranularity)=reader.getvgprAllocationGranularity();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceShaderCorePropertiesAMD member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceShaderCorePropertiesAMD member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceShaderCoreProperties2AMD::Builder& builder, VkPhysicalDeviceShaderCoreProperties2AMD member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setshaderCoreFeatures((member.shaderCoreFeatures));}();}();}();
[&](){return builder.setactiveComputeUnitCount((member.activeComputeUnitCount));}();
}

    VkPhysicalDeviceShaderCoreProperties2AMD deserialize_struct(VkPhysicalDeviceShaderCoreProperties2AMD::Reader reader){
        auto result=VkPhysicalDeviceShaderCoreProperties2AMD();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.shaderCoreFeatures)=reader.getshaderCoreFeatures();}();}();}();
[&](){(result.activeComputeUnitCount)=reader.getactiveComputeUnitCount();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceShaderCoreProperties2AMD member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceShaderCoreProperties2AMD member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineRasterizationConservativeStateCreateInfoEXT::Builder& builder, VkPipelineRasterizationConservativeStateCreateInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){[&](){[&](){return builder.setconservativeRasterizationMode((member.conservativeRasterizationMode));}();}();}();
[&](){return builder.setextraPrimitiveOverestimationSize((member.extraPrimitiveOverestimationSize));}();
}

    VkPipelineRasterizationConservativeStateCreateInfoEXT deserialize_struct(VkPipelineRasterizationConservativeStateCreateInfoEXT::Reader reader){
        auto result=VkPipelineRasterizationConservativeStateCreateInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){[&](){[&](){(result.conservativeRasterizationMode)=reader.getconservativeRasterizationMode();}();}();}();
[&](){(result.extraPrimitiveOverestimationSize)=reader.getextraPrimitiveOverestimationSize();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineRasterizationConservativeStateCreateInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineRasterizationConservativeStateCreateInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceDescriptorIndexingFeatures::Builder& builder, VkPhysicalDeviceDescriptorIndexingFeatures member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setshaderInputAttachmentArrayDynamicIndexing((member.shaderInputAttachmentArrayDynamicIndexing));}();}();
[&](){[&](){return builder.setshaderUniformTexelBufferArrayDynamicIndexing((member.shaderUniformTexelBufferArrayDynamicIndexing));}();}();
[&](){[&](){return builder.setshaderStorageTexelBufferArrayDynamicIndexing((member.shaderStorageTexelBufferArrayDynamicIndexing));}();}();
[&](){[&](){return builder.setshaderUniformBufferArrayNonUniformIndexing((member.shaderUniformBufferArrayNonUniformIndexing));}();}();
[&](){[&](){return builder.setshaderSampledImageArrayNonUniformIndexing((member.shaderSampledImageArrayNonUniformIndexing));}();}();
[&](){[&](){return builder.setshaderStorageBufferArrayNonUniformIndexing((member.shaderStorageBufferArrayNonUniformIndexing));}();}();
[&](){[&](){return builder.setshaderStorageImageArrayNonUniformIndexing((member.shaderStorageImageArrayNonUniformIndexing));}();}();
[&](){[&](){return builder.setshaderInputAttachmentArrayNonUniformIndexing((member.shaderInputAttachmentArrayNonUniformIndexing));}();}();
[&](){[&](){return builder.setshaderUniformTexelBufferArrayNonUniformIndexing((member.shaderUniformTexelBufferArrayNonUniformIndexing));}();}();
[&](){[&](){return builder.setshaderStorageTexelBufferArrayNonUniformIndexing((member.shaderStorageTexelBufferArrayNonUniformIndexing));}();}();
[&](){[&](){return builder.setdescriptorBindingUniformBufferUpdateAfterBind((member.descriptorBindingUniformBufferUpdateAfterBind));}();}();
[&](){[&](){return builder.setdescriptorBindingSampledImageUpdateAfterBind((member.descriptorBindingSampledImageUpdateAfterBind));}();}();
[&](){[&](){return builder.setdescriptorBindingStorageImageUpdateAfterBind((member.descriptorBindingStorageImageUpdateAfterBind));}();}();
[&](){[&](){return builder.setdescriptorBindingStorageBufferUpdateAfterBind((member.descriptorBindingStorageBufferUpdateAfterBind));}();}();
[&](){[&](){return builder.setdescriptorBindingUniformTexelBufferUpdateAfterBind((member.descriptorBindingUniformTexelBufferUpdateAfterBind));}();}();
[&](){[&](){return builder.setdescriptorBindingStorageTexelBufferUpdateAfterBind((member.descriptorBindingStorageTexelBufferUpdateAfterBind));}();}();
[&](){[&](){return builder.setdescriptorBindingUpdateUnusedWhilePending((member.descriptorBindingUpdateUnusedWhilePending));}();}();
[&](){[&](){return builder.setdescriptorBindingPartiallyBound((member.descriptorBindingPartiallyBound));}();}();
[&](){[&](){return builder.setdescriptorBindingVariableDescriptorCount((member.descriptorBindingVariableDescriptorCount));}();}();
[&](){[&](){return builder.setruntimeDescriptorArray((member.runtimeDescriptorArray));}();}();
}

    VkPhysicalDeviceDescriptorIndexingFeatures deserialize_struct(VkPhysicalDeviceDescriptorIndexingFeatures::Reader reader){
        auto result=VkPhysicalDeviceDescriptorIndexingFeatures();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.shaderInputAttachmentArrayDynamicIndexing)=reader.getshaderInputAttachmentArrayDynamicIndexing();}();}();
[&](){[&](){(result.shaderUniformTexelBufferArrayDynamicIndexing)=reader.getshaderUniformTexelBufferArrayDynamicIndexing();}();}();
[&](){[&](){(result.shaderStorageTexelBufferArrayDynamicIndexing)=reader.getshaderStorageTexelBufferArrayDynamicIndexing();}();}();
[&](){[&](){(result.shaderUniformBufferArrayNonUniformIndexing)=reader.getshaderUniformBufferArrayNonUniformIndexing();}();}();
[&](){[&](){(result.shaderSampledImageArrayNonUniformIndexing)=reader.getshaderSampledImageArrayNonUniformIndexing();}();}();
[&](){[&](){(result.shaderStorageBufferArrayNonUniformIndexing)=reader.getshaderStorageBufferArrayNonUniformIndexing();}();}();
[&](){[&](){(result.shaderStorageImageArrayNonUniformIndexing)=reader.getshaderStorageImageArrayNonUniformIndexing();}();}();
[&](){[&](){(result.shaderInputAttachmentArrayNonUniformIndexing)=reader.getshaderInputAttachmentArrayNonUniformIndexing();}();}();
[&](){[&](){(result.shaderUniformTexelBufferArrayNonUniformIndexing)=reader.getshaderUniformTexelBufferArrayNonUniformIndexing();}();}();
[&](){[&](){(result.shaderStorageTexelBufferArrayNonUniformIndexing)=reader.getshaderStorageTexelBufferArrayNonUniformIndexing();}();}();
[&](){[&](){(result.descriptorBindingUniformBufferUpdateAfterBind)=reader.getdescriptorBindingUniformBufferUpdateAfterBind();}();}();
[&](){[&](){(result.descriptorBindingSampledImageUpdateAfterBind)=reader.getdescriptorBindingSampledImageUpdateAfterBind();}();}();
[&](){[&](){(result.descriptorBindingStorageImageUpdateAfterBind)=reader.getdescriptorBindingStorageImageUpdateAfterBind();}();}();
[&](){[&](){(result.descriptorBindingStorageBufferUpdateAfterBind)=reader.getdescriptorBindingStorageBufferUpdateAfterBind();}();}();
[&](){[&](){(result.descriptorBindingUniformTexelBufferUpdateAfterBind)=reader.getdescriptorBindingUniformTexelBufferUpdateAfterBind();}();}();
[&](){[&](){(result.descriptorBindingStorageTexelBufferUpdateAfterBind)=reader.getdescriptorBindingStorageTexelBufferUpdateAfterBind();}();}();
[&](){[&](){(result.descriptorBindingUpdateUnusedWhilePending)=reader.getdescriptorBindingUpdateUnusedWhilePending();}();}();
[&](){[&](){(result.descriptorBindingPartiallyBound)=reader.getdescriptorBindingPartiallyBound();}();}();
[&](){[&](){(result.descriptorBindingVariableDescriptorCount)=reader.getdescriptorBindingVariableDescriptorCount();}();}();
[&](){[&](){(result.runtimeDescriptorArray)=reader.getruntimeDescriptorArray();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceDescriptorIndexingFeatures member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceDescriptorIndexingFeatures member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceDescriptorIndexingProperties::Builder& builder, VkPhysicalDeviceDescriptorIndexingProperties member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setmaxUpdateAfterBindDescriptorsInAllPools((member.maxUpdateAfterBindDescriptorsInAllPools));}();
[&](){[&](){return builder.setshaderUniformBufferArrayNonUniformIndexingNative((member.shaderUniformBufferArrayNonUniformIndexingNative));}();}();
[&](){[&](){return builder.setshaderSampledImageArrayNonUniformIndexingNative((member.shaderSampledImageArrayNonUniformIndexingNative));}();}();
[&](){[&](){return builder.setshaderStorageBufferArrayNonUniformIndexingNative((member.shaderStorageBufferArrayNonUniformIndexingNative));}();}();
[&](){[&](){return builder.setshaderStorageImageArrayNonUniformIndexingNative((member.shaderStorageImageArrayNonUniformIndexingNative));}();}();
[&](){[&](){return builder.setshaderInputAttachmentArrayNonUniformIndexingNative((member.shaderInputAttachmentArrayNonUniformIndexingNative));}();}();
[&](){[&](){return builder.setrobustBufferAccessUpdateAfterBind((member.robustBufferAccessUpdateAfterBind));}();}();
[&](){[&](){return builder.setquadDivergentImplicitLod((member.quadDivergentImplicitLod));}();}();
[&](){return builder.setmaxPerStageDescriptorUpdateAfterBindSamplers((member.maxPerStageDescriptorUpdateAfterBindSamplers));}();
[&](){return builder.setmaxPerStageDescriptorUpdateAfterBindUniformBuffers((member.maxPerStageDescriptorUpdateAfterBindUniformBuffers));}();
[&](){return builder.setmaxPerStageDescriptorUpdateAfterBindStorageBuffers((member.maxPerStageDescriptorUpdateAfterBindStorageBuffers));}();
[&](){return builder.setmaxPerStageDescriptorUpdateAfterBindSampledImages((member.maxPerStageDescriptorUpdateAfterBindSampledImages));}();
[&](){return builder.setmaxPerStageDescriptorUpdateAfterBindStorageImages((member.maxPerStageDescriptorUpdateAfterBindStorageImages));}();
[&](){return builder.setmaxPerStageDescriptorUpdateAfterBindInputAttachments((member.maxPerStageDescriptorUpdateAfterBindInputAttachments));}();
[&](){return builder.setmaxPerStageUpdateAfterBindResources((member.maxPerStageUpdateAfterBindResources));}();
[&](){return builder.setmaxDescriptorSetUpdateAfterBindSamplers((member.maxDescriptorSetUpdateAfterBindSamplers));}();
[&](){return builder.setmaxDescriptorSetUpdateAfterBindUniformBuffers((member.maxDescriptorSetUpdateAfterBindUniformBuffers));}();
[&](){return builder.setmaxDescriptorSetUpdateAfterBindUniformBuffersDynamic((member.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic));}();
[&](){return builder.setmaxDescriptorSetUpdateAfterBindStorageBuffers((member.maxDescriptorSetUpdateAfterBindStorageBuffers));}();
[&](){return builder.setmaxDescriptorSetUpdateAfterBindStorageBuffersDynamic((member.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic));}();
[&](){return builder.setmaxDescriptorSetUpdateAfterBindSampledImages((member.maxDescriptorSetUpdateAfterBindSampledImages));}();
[&](){return builder.setmaxDescriptorSetUpdateAfterBindStorageImages((member.maxDescriptorSetUpdateAfterBindStorageImages));}();
[&](){return builder.setmaxDescriptorSetUpdateAfterBindInputAttachments((member.maxDescriptorSetUpdateAfterBindInputAttachments));}();
}

    VkPhysicalDeviceDescriptorIndexingProperties deserialize_struct(VkPhysicalDeviceDescriptorIndexingProperties::Reader reader){
        auto result=VkPhysicalDeviceDescriptorIndexingProperties();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.maxUpdateAfterBindDescriptorsInAllPools)=reader.getmaxUpdateAfterBindDescriptorsInAllPools();}();
[&](){[&](){(result.shaderUniformBufferArrayNonUniformIndexingNative)=reader.getshaderUniformBufferArrayNonUniformIndexingNative();}();}();
[&](){[&](){(result.shaderSampledImageArrayNonUniformIndexingNative)=reader.getshaderSampledImageArrayNonUniformIndexingNative();}();}();
[&](){[&](){(result.shaderStorageBufferArrayNonUniformIndexingNative)=reader.getshaderStorageBufferArrayNonUniformIndexingNative();}();}();
[&](){[&](){(result.shaderStorageImageArrayNonUniformIndexingNative)=reader.getshaderStorageImageArrayNonUniformIndexingNative();}();}();
[&](){[&](){(result.shaderInputAttachmentArrayNonUniformIndexingNative)=reader.getshaderInputAttachmentArrayNonUniformIndexingNative();}();}();
[&](){[&](){(result.robustBufferAccessUpdateAfterBind)=reader.getrobustBufferAccessUpdateAfterBind();}();}();
[&](){[&](){(result.quadDivergentImplicitLod)=reader.getquadDivergentImplicitLod();}();}();
[&](){(result.maxPerStageDescriptorUpdateAfterBindSamplers)=reader.getmaxPerStageDescriptorUpdateAfterBindSamplers();}();
[&](){(result.maxPerStageDescriptorUpdateAfterBindUniformBuffers)=reader.getmaxPerStageDescriptorUpdateAfterBindUniformBuffers();}();
[&](){(result.maxPerStageDescriptorUpdateAfterBindStorageBuffers)=reader.getmaxPerStageDescriptorUpdateAfterBindStorageBuffers();}();
[&](){(result.maxPerStageDescriptorUpdateAfterBindSampledImages)=reader.getmaxPerStageDescriptorUpdateAfterBindSampledImages();}();
[&](){(result.maxPerStageDescriptorUpdateAfterBindStorageImages)=reader.getmaxPerStageDescriptorUpdateAfterBindStorageImages();}();
[&](){(result.maxPerStageDescriptorUpdateAfterBindInputAttachments)=reader.getmaxPerStageDescriptorUpdateAfterBindInputAttachments();}();
[&](){(result.maxPerStageUpdateAfterBindResources)=reader.getmaxPerStageUpdateAfterBindResources();}();
[&](){(result.maxDescriptorSetUpdateAfterBindSamplers)=reader.getmaxDescriptorSetUpdateAfterBindSamplers();}();
[&](){(result.maxDescriptorSetUpdateAfterBindUniformBuffers)=reader.getmaxDescriptorSetUpdateAfterBindUniformBuffers();}();
[&](){(result.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic)=reader.getmaxDescriptorSetUpdateAfterBindUniformBuffersDynamic();}();
[&](){(result.maxDescriptorSetUpdateAfterBindStorageBuffers)=reader.getmaxDescriptorSetUpdateAfterBindStorageBuffers();}();
[&](){(result.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic)=reader.getmaxDescriptorSetUpdateAfterBindStorageBuffersDynamic();}();
[&](){(result.maxDescriptorSetUpdateAfterBindSampledImages)=reader.getmaxDescriptorSetUpdateAfterBindSampledImages();}();
[&](){(result.maxDescriptorSetUpdateAfterBindStorageImages)=reader.getmaxDescriptorSetUpdateAfterBindStorageImages();}();
[&](){(result.maxDescriptorSetUpdateAfterBindInputAttachments)=reader.getmaxDescriptorSetUpdateAfterBindInputAttachments();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceDescriptorIndexingProperties member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceDescriptorIndexingProperties member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDescriptorSetLayoutBindingFlagsCreateInfo::Builder& builder, VkDescriptorSetLayoutBindingFlagsCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setbindingCount((member.bindingCount));}();
[&](){
            if ((member.pBindingFlags)==NULL){
                builder.disownpBindingFlags();
            return; }
        auto proto_arr=builder.initpBindingFlags();
        for(int vPSYsQW=0; vPSYsQW < member.bindingCount; vPSYsQW++){
            [&](){[&](){[&](){return proto_arr.set(vPSYsQW,((member.pBindingFlags)[vPSYsQW]));}();}();}();
        }
        }();
}

    VkDescriptorSetLayoutBindingFlagsCreateInfo deserialize_struct(VkDescriptorSetLayoutBindingFlagsCreateInfo::Reader reader){
        auto result=VkDescriptorSetLayoutBindingFlagsCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.bindingCount)=reader.getbindingCount();}();
[&](){ VkDescriptorBindingFlags* temp_seCkFox[&](){
            if (!reader.haspBindingFlags()){
                (result.pBindingFlags)=NULL;
            return; }{native_concat()}=(VkDescriptorBindingFlags*)malloc(result.bindingCount*sizeof(VkDescriptorBindingFlags));
        auto proto_arr=reader.getpBindingFlags(result.bindingCount);
        for(int ROiQLcN=0; ROiQLcN < result.bindingCount; ROiQLcN++){
            [&](){[&](){[&](){((result.pBindingFlags)[ROiQLcN])=proto_arr[ROiQLcN];}();}();}();
        }
        }();(result.pBindingFlags)=temp_seCkFox;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDescriptorSetLayoutBindingFlagsCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDescriptorSetLayoutBindingFlagsCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDescriptorSetVariableDescriptorCountAllocateInfo::Builder& builder, VkDescriptorSetVariableDescriptorCountAllocateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setdescriptorSetCount((member.descriptorSetCount));}();
[&](){
            if ((member.pDescriptorCounts)==NULL){
                builder.disownpDescriptorCounts();
            return; }
        auto proto_arr=builder.initpDescriptorCounts();
        for(int ryLDzzp=0; ryLDzzp < member.descriptorSetCount; ryLDzzp++){
            [&](){return proto_arr.set(ryLDzzp,((member.pDescriptorCounts)[ryLDzzp]));}();
        }
        }();
}

    VkDescriptorSetVariableDescriptorCountAllocateInfo deserialize_struct(VkDescriptorSetVariableDescriptorCountAllocateInfo::Reader reader){
        auto result=VkDescriptorSetVariableDescriptorCountAllocateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.descriptorSetCount)=reader.getdescriptorSetCount();}();
[&](){ uint32_t* temp_nucnUaf[&](){
            if (!reader.haspDescriptorCounts()){
                (result.pDescriptorCounts)=NULL;
            return; }{native_concat()}=(uint32_t*)malloc(result.descriptorSetCount*sizeof(uint32_t));
        auto proto_arr=reader.getpDescriptorCounts(result.descriptorSetCount);
        for(int VbFXKxf=0; VbFXKxf < result.descriptorSetCount; VbFXKxf++){
            [&](){((result.pDescriptorCounts)[VbFXKxf])=proto_arr[VbFXKxf];}();
        }
        }();(result.pDescriptorCounts)=temp_nucnUaf;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDescriptorSetVariableDescriptorCountAllocateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDescriptorSetVariableDescriptorCountAllocateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDescriptorSetVariableDescriptorCountLayoutSupport::Builder& builder, VkDescriptorSetVariableDescriptorCountLayoutSupport member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setmaxVariableDescriptorCount((member.maxVariableDescriptorCount));}();
}

    VkDescriptorSetVariableDescriptorCountLayoutSupport deserialize_struct(VkDescriptorSetVariableDescriptorCountLayoutSupport::Reader reader){
        auto result=VkDescriptorSetVariableDescriptorCountLayoutSupport();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.maxVariableDescriptorCount)=reader.getmaxVariableDescriptorCount();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDescriptorSetVariableDescriptorCountLayoutSupport member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDescriptorSetVariableDescriptorCountLayoutSupport member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkAttachmentDescription2::Builder& builder, VkAttachmentDescription2 member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){[&](){[&](){return builder.setformat((member.format));}();}();}();
[&](){[&](){[&](){return builder.setsamples((member.samples));}();}();}();
[&](){[&](){[&](){return builder.setloadOp((member.loadOp));}();}();}();
[&](){[&](){[&](){return builder.setstoreOp((member.storeOp));}();}();}();
[&](){[&](){[&](){return builder.setstencilLoadOp((member.stencilLoadOp));}();}();}();
[&](){[&](){[&](){return builder.setstencilStoreOp((member.stencilStoreOp));}();}();}();
[&](){[&](){[&](){return builder.setinitialLayout((member.initialLayout));}();}();}();
[&](){[&](){[&](){return builder.setfinalLayout((member.finalLayout));}();}();}();
}

    VkAttachmentDescription2 deserialize_struct(VkAttachmentDescription2::Reader reader){
        auto result=VkAttachmentDescription2();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){[&](){[&](){(result.format)=reader.getformat();}();}();}();
[&](){[&](){[&](){(result.samples)=reader.getsamples();}();}();}();
[&](){[&](){[&](){(result.loadOp)=reader.getloadOp();}();}();}();
[&](){[&](){[&](){(result.storeOp)=reader.getstoreOp();}();}();}();
[&](){[&](){[&](){(result.stencilLoadOp)=reader.getstencilLoadOp();}();}();}();
[&](){[&](){[&](){(result.stencilStoreOp)=reader.getstencilStoreOp();}();}();}();
[&](){[&](){[&](){(result.initialLayout)=reader.getinitialLayout();}();}();}();
[&](){[&](){[&](){(result.finalLayout)=reader.getfinalLayout();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkAttachmentDescription2 member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkAttachmentDescription2 member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkAttachmentReference2::Builder& builder, VkAttachmentReference2 member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setattachment((member.attachment));}();
[&](){[&](){[&](){return builder.setlayout((member.layout));}();}();}();
[&](){[&](){[&](){return builder.setaspectMask((member.aspectMask));}();}();}();
}

    VkAttachmentReference2 deserialize_struct(VkAttachmentReference2::Reader reader){
        auto result=VkAttachmentReference2();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.attachment)=reader.getattachment();}();
[&](){[&](){[&](){(result.layout)=reader.getlayout();}();}();}();
[&](){[&](){[&](){(result.aspectMask)=reader.getaspectMask();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkAttachmentReference2 member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkAttachmentReference2 member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSubpassDescription2::Builder& builder, VkSubpassDescription2 member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){[&](){[&](){return builder.setpipelineBindPoint((member.pipelineBindPoint));}();}();}();
[&](){return builder.setviewMask((member.viewMask));}();
[&](){return builder.setinputAttachmentCount((member.inputAttachmentCount));}();
[&](){
            if ((member.pInputAttachments)==NULL){
                builder.disownpInputAttachments();
            return; }
        auto proto_arr=builder.initpInputAttachments();
        for(int NsTMCqB=0; NsTMCqB < member.inputAttachmentCount; NsTMCqB++){
            [&](){
            auto temp=proto_arr[NsTMCqB];
            return serialize_struct(((member.pInputAttachments)[NsTMCqB]), temp);
            }();
        }
        }();
[&](){return builder.setcolorAttachmentCount((member.colorAttachmentCount));}();
[&](){
            if ((member.pColorAttachments)==NULL){
                builder.disownpColorAttachments();
            return; }
        auto proto_arr=builder.initpColorAttachments();
        for(int nAcellO=0; nAcellO < member.colorAttachmentCount; nAcellO++){
            [&](){
            auto temp=proto_arr[nAcellO];
            return serialize_struct(((member.pColorAttachments)[nAcellO]), temp);
            }();
        }
        }();
[&](){
            if ((member.pResolveAttachments)==NULL){
                builder.disownpResolveAttachments();
            return; }
        auto proto_arr=builder.initpResolveAttachments();
        for(int asCGjsj=0; asCGjsj < member.colorAttachmentCount; asCGjsj++){
            [&](){
            auto temp=proto_arr[asCGjsj];
            return serialize_struct(((member.pResolveAttachments)[asCGjsj]), temp);
            }();
        }
        }();
[&](){
            if ((member.pDepthStencilAttachment)==NULL){
                builder.disownpDepthStencilAttachment();
            return; }
        auto proto_arr=builder.initpDepthStencilAttachment();
        for(int KprxYqO=0; KprxYqO < 1; KprxYqO++){
            [&](){
            auto temp=proto_arr[KprxYqO];
            return serialize_struct(((member.pDepthStencilAttachment)[KprxYqO]), temp);
            }();
        }
        }();
[&](){return builder.setpreserveAttachmentCount((member.preserveAttachmentCount));}();
[&](){
            if ((member.pPreserveAttachments)==NULL){
                builder.disownpPreserveAttachments();
            return; }
        auto proto_arr=builder.initpPreserveAttachments();
        for(int OunTLoO=0; OunTLoO < member.preserveAttachmentCount; OunTLoO++){
            [&](){return proto_arr.set(OunTLoO,((member.pPreserveAttachments)[OunTLoO]));}();
        }
        }();
}

    VkSubpassDescription2 deserialize_struct(VkSubpassDescription2::Reader reader){
        auto result=VkSubpassDescription2();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){[&](){[&](){(result.pipelineBindPoint)=reader.getpipelineBindPoint();}();}();}();
[&](){(result.viewMask)=reader.getviewMask();}();
[&](){(result.inputAttachmentCount)=reader.getinputAttachmentCount();}();
[&](){ VkAttachmentReference2* temp_hfGqGNu[&](){
            if (!reader.haspInputAttachments()){
                (result.pInputAttachments)=NULL;
            return; }{native_concat()}=(VkAttachmentReference2*)malloc(result.inputAttachmentCount*sizeof(VkAttachmentReference2));
        auto proto_arr=reader.getpInputAttachments(result.inputAttachmentCount);
        for(int iiiKhHa=0; iiiKhHa < result.inputAttachmentCount; iiiKhHa++){
            [&](){
            auto temp=proto_arr[iiiKhHa];
            ((result.pInputAttachments)[iiiKhHa])=deserialize_struct(temp);
            }();
        }
        }();(result.pInputAttachments)=temp_hfGqGNu;}();
[&](){(result.colorAttachmentCount)=reader.getcolorAttachmentCount();}();
[&](){ VkAttachmentReference2* temp_WIfdigD[&](){
            if (!reader.haspColorAttachments()){
                (result.pColorAttachments)=NULL;
            return; }{native_concat()}=(VkAttachmentReference2*)malloc(result.colorAttachmentCount*sizeof(VkAttachmentReference2));
        auto proto_arr=reader.getpColorAttachments(result.colorAttachmentCount);
        for(int loPpvff=0; loPpvff < result.colorAttachmentCount; loPpvff++){
            [&](){
            auto temp=proto_arr[loPpvff];
            ((result.pColorAttachments)[loPpvff])=deserialize_struct(temp);
            }();
        }
        }();(result.pColorAttachments)=temp_WIfdigD;}();
[&](){ VkAttachmentReference2* temp_glgncXQ[&](){
            if (!reader.haspResolveAttachments()){
                (result.pResolveAttachments)=NULL;
            return; }{native_concat()}=(VkAttachmentReference2*)malloc(result.colorAttachmentCount*sizeof(VkAttachmentReference2));
        auto proto_arr=reader.getpResolveAttachments(result.colorAttachmentCount);
        for(int Ydlzhcl=0; Ydlzhcl < result.colorAttachmentCount; Ydlzhcl++){
            [&](){
            auto temp=proto_arr[Ydlzhcl];
            ((result.pResolveAttachments)[Ydlzhcl])=deserialize_struct(temp);
            }();
        }
        }();(result.pResolveAttachments)=temp_glgncXQ;}();
[&](){ VkAttachmentReference2* temp_NFxxVEH[&](){
            if (!reader.haspDepthStencilAttachment()){
                (result.pDepthStencilAttachment)=NULL;
            return; }{native_concat()}=(VkAttachmentReference2*)malloc(1*sizeof(VkAttachmentReference2));
        auto proto_arr=reader.getpDepthStencilAttachment(1);
        for(int DhYpQMM=0; DhYpQMM < 1; DhYpQMM++){
            [&](){
            auto temp=proto_arr[DhYpQMM];
            ((result.pDepthStencilAttachment)[DhYpQMM])=deserialize_struct(temp);
            }();
        }
        }();(result.pDepthStencilAttachment)=temp_NFxxVEH;}();
[&](){(result.preserveAttachmentCount)=reader.getpreserveAttachmentCount();}();
[&](){ uint32_t* temp_OBPkkNN[&](){
            if (!reader.haspPreserveAttachments()){
                (result.pPreserveAttachments)=NULL;
            return; }{native_concat()}=(uint32_t*)malloc(result.preserveAttachmentCount*sizeof(uint32_t));
        auto proto_arr=reader.getpPreserveAttachments(result.preserveAttachmentCount);
        for(int Ucaahng=0; Ucaahng < result.preserveAttachmentCount; Ucaahng++){
            [&](){((result.pPreserveAttachments)[Ucaahng])=proto_arr[Ucaahng];}();
        }
        }();(result.pPreserveAttachments)=temp_OBPkkNN;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSubpassDescription2 member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSubpassDescription2 member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSubpassDependency2::Builder& builder, VkSubpassDependency2 member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setsrcSubpass((member.srcSubpass));}();
[&](){return builder.setdstSubpass((member.dstSubpass));}();
[&](){[&](){[&](){return builder.setsrcStageMask((member.srcStageMask));}();}();}();
[&](){[&](){[&](){return builder.setdstStageMask((member.dstStageMask));}();}();}();
[&](){[&](){[&](){return builder.setsrcAccessMask((member.srcAccessMask));}();}();}();
[&](){[&](){[&](){return builder.setdstAccessMask((member.dstAccessMask));}();}();}();
[&](){[&](){[&](){return builder.setdependencyFlags((member.dependencyFlags));}();}();}();
[&](){return builder.setviewOffset((member.viewOffset));}();
}

    VkSubpassDependency2 deserialize_struct(VkSubpassDependency2::Reader reader){
        auto result=VkSubpassDependency2();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.srcSubpass)=reader.getsrcSubpass();}();
[&](){(result.dstSubpass)=reader.getdstSubpass();}();
[&](){[&](){[&](){(result.srcStageMask)=reader.getsrcStageMask();}();}();}();
[&](){[&](){[&](){(result.dstStageMask)=reader.getdstStageMask();}();}();}();
[&](){[&](){[&](){(result.srcAccessMask)=reader.getsrcAccessMask();}();}();}();
[&](){[&](){[&](){(result.dstAccessMask)=reader.getdstAccessMask();}();}();}();
[&](){[&](){[&](){(result.dependencyFlags)=reader.getdependencyFlags();}();}();}();
[&](){(result.viewOffset)=reader.getviewOffset();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSubpassDependency2 member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSubpassDependency2 member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkRenderPassCreateInfo2::Builder& builder, VkRenderPassCreateInfo2 member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){return builder.setattachmentCount((member.attachmentCount));}();
[&](){
            if ((member.pAttachments)==NULL){
                builder.disownpAttachments();
            return; }
        auto proto_arr=builder.initpAttachments();
        for(int ZWLUmNY=0; ZWLUmNY < member.attachmentCount; ZWLUmNY++){
            [&](){
            auto temp=proto_arr[ZWLUmNY];
            return serialize_struct(((member.pAttachments)[ZWLUmNY]), temp);
            }();
        }
        }();
[&](){return builder.setsubpassCount((member.subpassCount));}();
[&](){
            if ((member.pSubpasses)==NULL){
                builder.disownpSubpasses();
            return; }
        auto proto_arr=builder.initpSubpasses();
        for(int eUPzEKF=0; eUPzEKF < member.subpassCount; eUPzEKF++){
            [&](){
            auto temp=proto_arr[eUPzEKF];
            return serialize_struct(((member.pSubpasses)[eUPzEKF]), temp);
            }();
        }
        }();
[&](){return builder.setdependencyCount((member.dependencyCount));}();
[&](){
            if ((member.pDependencies)==NULL){
                builder.disownpDependencies();
            return; }
        auto proto_arr=builder.initpDependencies();
        for(int NRheNuA=0; NRheNuA < member.dependencyCount; NRheNuA++){
            [&](){
            auto temp=proto_arr[NRheNuA];
            return serialize_struct(((member.pDependencies)[NRheNuA]), temp);
            }();
        }
        }();
[&](){return builder.setcorrelatedViewMaskCount((member.correlatedViewMaskCount));}();
[&](){
            if ((member.pCorrelatedViewMasks)==NULL){
                builder.disownpCorrelatedViewMasks();
            return; }
        auto proto_arr=builder.initpCorrelatedViewMasks();
        for(int yFHkrOi=0; yFHkrOi < member.correlatedViewMaskCount; yFHkrOi++){
            [&](){return proto_arr.set(yFHkrOi,((member.pCorrelatedViewMasks)[yFHkrOi]));}();
        }
        }();
}

    VkRenderPassCreateInfo2 deserialize_struct(VkRenderPassCreateInfo2::Reader reader){
        auto result=VkRenderPassCreateInfo2();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){(result.attachmentCount)=reader.getattachmentCount();}();
[&](){ VkAttachmentDescription2* temp_XqgkFTU[&](){
            if (!reader.haspAttachments()){
                (result.pAttachments)=NULL;
            return; }{native_concat()}=(VkAttachmentDescription2*)malloc(result.attachmentCount*sizeof(VkAttachmentDescription2));
        auto proto_arr=reader.getpAttachments(result.attachmentCount);
        for(int aUCdCNG=0; aUCdCNG < result.attachmentCount; aUCdCNG++){
            [&](){
            auto temp=proto_arr[aUCdCNG];
            ((result.pAttachments)[aUCdCNG])=deserialize_struct(temp);
            }();
        }
        }();(result.pAttachments)=temp_XqgkFTU;}();
[&](){(result.subpassCount)=reader.getsubpassCount();}();
[&](){ VkSubpassDescription2* temp_XJwjEmi[&](){
            if (!reader.haspSubpasses()){
                (result.pSubpasses)=NULL;
            return; }{native_concat()}=(VkSubpassDescription2*)malloc(result.subpassCount*sizeof(VkSubpassDescription2));
        auto proto_arr=reader.getpSubpasses(result.subpassCount);
        for(int MGKKGXF=0; MGKKGXF < result.subpassCount; MGKKGXF++){
            [&](){
            auto temp=proto_arr[MGKKGXF];
            ((result.pSubpasses)[MGKKGXF])=deserialize_struct(temp);
            }();
        }
        }();(result.pSubpasses)=temp_XJwjEmi;}();
[&](){(result.dependencyCount)=reader.getdependencyCount();}();
[&](){ VkSubpassDependency2* temp_HqZlMVC[&](){
            if (!reader.haspDependencies()){
                (result.pDependencies)=NULL;
            return; }{native_concat()}=(VkSubpassDependency2*)malloc(result.dependencyCount*sizeof(VkSubpassDependency2));
        auto proto_arr=reader.getpDependencies(result.dependencyCount);
        for(int CPOdCsX=0; CPOdCsX < result.dependencyCount; CPOdCsX++){
            [&](){
            auto temp=proto_arr[CPOdCsX];
            ((result.pDependencies)[CPOdCsX])=deserialize_struct(temp);
            }();
        }
        }();(result.pDependencies)=temp_HqZlMVC;}();
[&](){(result.correlatedViewMaskCount)=reader.getcorrelatedViewMaskCount();}();
[&](){ uint32_t* temp_eZYsHuM[&](){
            if (!reader.haspCorrelatedViewMasks()){
                (result.pCorrelatedViewMasks)=NULL;
            return; }{native_concat()}=(uint32_t*)malloc(result.correlatedViewMaskCount*sizeof(uint32_t));
        auto proto_arr=reader.getpCorrelatedViewMasks(result.correlatedViewMaskCount);
        for(int RuvRSDs=0; RuvRSDs < result.correlatedViewMaskCount; RuvRSDs++){
            [&](){((result.pCorrelatedViewMasks)[RuvRSDs])=proto_arr[RuvRSDs];}();
        }
        }();(result.pCorrelatedViewMasks)=temp_eZYsHuM;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkRenderPassCreateInfo2 member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkRenderPassCreateInfo2 member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSubpassBeginInfo::Builder& builder, VkSubpassBeginInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setcontents((member.contents));}();}();}();
}

    VkSubpassBeginInfo deserialize_struct(VkSubpassBeginInfo::Reader reader){
        auto result=VkSubpassBeginInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.contents)=reader.getcontents();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSubpassBeginInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSubpassBeginInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSubpassEndInfo::Builder& builder, VkSubpassEndInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
}

    VkSubpassEndInfo deserialize_struct(VkSubpassEndInfo::Reader reader){
        auto result=VkSubpassEndInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSubpassEndInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSubpassEndInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceTimelineSemaphoreFeatures::Builder& builder, VkPhysicalDeviceTimelineSemaphoreFeatures member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.settimelineSemaphore((member.timelineSemaphore));}();}();
}

    VkPhysicalDeviceTimelineSemaphoreFeatures deserialize_struct(VkPhysicalDeviceTimelineSemaphoreFeatures::Reader reader){
        auto result=VkPhysicalDeviceTimelineSemaphoreFeatures();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.timelineSemaphore)=reader.gettimelineSemaphore();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceTimelineSemaphoreFeatures member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceTimelineSemaphoreFeatures member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceTimelineSemaphoreProperties::Builder& builder, VkPhysicalDeviceTimelineSemaphoreProperties member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setmaxTimelineSemaphoreValueDifference((member.maxTimelineSemaphoreValueDifference));}();
}

    VkPhysicalDeviceTimelineSemaphoreProperties deserialize_struct(VkPhysicalDeviceTimelineSemaphoreProperties::Reader reader){
        auto result=VkPhysicalDeviceTimelineSemaphoreProperties();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.maxTimelineSemaphoreValueDifference)=reader.getmaxTimelineSemaphoreValueDifference();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceTimelineSemaphoreProperties member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceTimelineSemaphoreProperties member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSemaphoreTypeCreateInfo::Builder& builder, VkSemaphoreTypeCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setsemaphoreType((member.semaphoreType));}();}();}();
[&](){return builder.setinitialValue((member.initialValue));}();
}

    VkSemaphoreTypeCreateInfo deserialize_struct(VkSemaphoreTypeCreateInfo::Reader reader){
        auto result=VkSemaphoreTypeCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.semaphoreType)=reader.getsemaphoreType();}();}();}();
[&](){(result.initialValue)=reader.getinitialValue();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSemaphoreTypeCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSemaphoreTypeCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkTimelineSemaphoreSubmitInfo::Builder& builder, VkTimelineSemaphoreSubmitInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setwaitSemaphoreValueCount((member.waitSemaphoreValueCount));}();
[&](){
            if ((member.pWaitSemaphoreValues)==NULL){
                builder.disownpWaitSemaphoreValues();
            return; }
        auto proto_arr=builder.initpWaitSemaphoreValues();
        for(int QJriFxq=0; QJriFxq < member.waitSemaphoreValueCount; QJriFxq++){
            [&](){return proto_arr.set(QJriFxq,((member.pWaitSemaphoreValues)[QJriFxq]));}();
        }
        }();
[&](){return builder.setsignalSemaphoreValueCount((member.signalSemaphoreValueCount));}();
[&](){
            if ((member.pSignalSemaphoreValues)==NULL){
                builder.disownpSignalSemaphoreValues();
            return; }
        auto proto_arr=builder.initpSignalSemaphoreValues();
        for(int Rnxwrqr=0; Rnxwrqr < member.signalSemaphoreValueCount; Rnxwrqr++){
            [&](){return proto_arr.set(Rnxwrqr,((member.pSignalSemaphoreValues)[Rnxwrqr]));}();
        }
        }();
}

    VkTimelineSemaphoreSubmitInfo deserialize_struct(VkTimelineSemaphoreSubmitInfo::Reader reader){
        auto result=VkTimelineSemaphoreSubmitInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.waitSemaphoreValueCount)=reader.getwaitSemaphoreValueCount();}();
[&](){ uint64_t* temp_AAxtSvM[&](){
            if (!reader.haspWaitSemaphoreValues()){
                (result.pWaitSemaphoreValues)=NULL;
            return; }{native_concat()}=(uint64_t*)malloc(result.waitSemaphoreValueCount*sizeof(uint64_t));
        auto proto_arr=reader.getpWaitSemaphoreValues(result.waitSemaphoreValueCount);
        for(int gYZiaOt=0; gYZiaOt < result.waitSemaphoreValueCount; gYZiaOt++){
            [&](){((result.pWaitSemaphoreValues)[gYZiaOt])=proto_arr[gYZiaOt];}();
        }
        }();(result.pWaitSemaphoreValues)=temp_AAxtSvM;}();
[&](){(result.signalSemaphoreValueCount)=reader.getsignalSemaphoreValueCount();}();
[&](){ uint64_t* temp_uPzXKwE[&](){
            if (!reader.haspSignalSemaphoreValues()){
                (result.pSignalSemaphoreValues)=NULL;
            return; }{native_concat()}=(uint64_t*)malloc(result.signalSemaphoreValueCount*sizeof(uint64_t));
        auto proto_arr=reader.getpSignalSemaphoreValues(result.signalSemaphoreValueCount);
        for(int JRYJxZh=0; JRYJxZh < result.signalSemaphoreValueCount; JRYJxZh++){
            [&](){((result.pSignalSemaphoreValues)[JRYJxZh])=proto_arr[JRYJxZh];}();
        }
        }();(result.pSignalSemaphoreValues)=temp_uPzXKwE;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkTimelineSemaphoreSubmitInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkTimelineSemaphoreSubmitInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSemaphoreWaitInfo::Builder& builder, VkSemaphoreWaitInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){return builder.setsemaphoreCount((member.semaphoreCount));}();
[&](){
            if ((member.pSemaphores)==NULL){
                builder.disownpSemaphores();
            return; }
        auto proto_arr=builder.initpSemaphores();
        for(int ZaebsDj=0; ZaebsDj < member.semaphoreCount; ZaebsDj++){
            [&](){return proto_arr.set(ZaebsDj,serialize_handle((member.pSemaphores)[ZaebsDj]));}();
        }
        }();
[&](){
            if ((member.pValues)==NULL){
                builder.disownpValues();
            return; }
        auto proto_arr=builder.initpValues();
        for(int ioKhjPI=0; ioKhjPI < member.semaphoreCount; ioKhjPI++){
            [&](){return proto_arr.set(ioKhjPI,((member.pValues)[ioKhjPI]));}();
        }
        }();
}

    VkSemaphoreWaitInfo deserialize_struct(VkSemaphoreWaitInfo::Reader reader){
        auto result=VkSemaphoreWaitInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){(result.semaphoreCount)=reader.getsemaphoreCount();}();
[&](){ VkSemaphore* temp_rygkoDc[&](){
            if (!reader.haspSemaphores()){
                (result.pSemaphores)=NULL;
            return; }{native_concat()}=(VkSemaphore*)malloc(result.semaphoreCount*sizeof(VkSemaphore));
        auto proto_arr=reader.getpSemaphores(result.semaphoreCount);
        for(int WAEDOAs=0; WAEDOAs < result.semaphoreCount; WAEDOAs++){
            [&](){((result.pSemaphores)[WAEDOAs])=deserialize_handle(proto_arr[WAEDOAs]);}();
        }
        }();(result.pSemaphores)=temp_rygkoDc;}();
[&](){ uint64_t* temp_kSgMuTe[&](){
            if (!reader.haspValues()){
                (result.pValues)=NULL;
            return; }{native_concat()}=(uint64_t*)malloc(result.semaphoreCount*sizeof(uint64_t));
        auto proto_arr=reader.getpValues(result.semaphoreCount);
        for(int QDbgVwt=0; QDbgVwt < result.semaphoreCount; QDbgVwt++){
            [&](){((result.pValues)[QDbgVwt])=proto_arr[QDbgVwt];}();
        }
        }();(result.pValues)=temp_kSgMuTe;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSemaphoreWaitInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSemaphoreWaitInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSemaphoreSignalInfo::Builder& builder, VkSemaphoreSignalInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setsemaphore(serialize_handle(member.semaphore));}();
[&](){return builder.setvalue((member.value));}();
}

    VkSemaphoreSignalInfo deserialize_struct(VkSemaphoreSignalInfo::Reader reader){
        auto result=VkSemaphoreSignalInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.semaphore)=deserialize_handle(reader.getsemaphore());}();
[&](){(result.value)=reader.getvalue();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSemaphoreSignalInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSemaphoreSignalInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkVertexInputBindingDivisorDescriptionEXT::Builder& builder, VkVertexInputBindingDivisorDescriptionEXT member){
        
    
[&](){return builder.setbinding((member.binding));}();
[&](){return builder.setdivisor((member.divisor));}();
}

    VkVertexInputBindingDivisorDescriptionEXT deserialize_struct(VkVertexInputBindingDivisorDescriptionEXT::Reader reader){
        auto result=VkVertexInputBindingDivisorDescriptionEXT();
    
[&](){(result.binding)=reader.getbinding();}();
[&](){(result.divisor)=reader.getdivisor();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkVertexInputBindingDivisorDescriptionEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkVertexInputBindingDivisorDescriptionEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineVertexInputDivisorStateCreateInfoEXT::Builder& builder, VkPipelineVertexInputDivisorStateCreateInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setvertexBindingDivisorCount((member.vertexBindingDivisorCount));}();
[&](){
            if ((member.pVertexBindingDivisors)==NULL){
                builder.disownpVertexBindingDivisors();
            return; }
        auto proto_arr=builder.initpVertexBindingDivisors();
        for(int NyIqyrV=0; NyIqyrV < member.vertexBindingDivisorCount; NyIqyrV++){
            [&](){
            auto temp=proto_arr[NyIqyrV];
            return serialize_struct(((member.pVertexBindingDivisors)[NyIqyrV]), temp);
            }();
        }
        }();
}

    VkPipelineVertexInputDivisorStateCreateInfoEXT deserialize_struct(VkPipelineVertexInputDivisorStateCreateInfoEXT::Reader reader){
        auto result=VkPipelineVertexInputDivisorStateCreateInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.vertexBindingDivisorCount)=reader.getvertexBindingDivisorCount();}();
[&](){ VkVertexInputBindingDivisorDescriptionEXT* temp_ZOHcldD[&](){
            if (!reader.haspVertexBindingDivisors()){
                (result.pVertexBindingDivisors)=NULL;
            return; }{native_concat()}=(VkVertexInputBindingDivisorDescriptionEXT*)malloc(result.vertexBindingDivisorCount*sizeof(VkVertexInputBindingDivisorDescriptionEXT));
        auto proto_arr=reader.getpVertexBindingDivisors(result.vertexBindingDivisorCount);
        for(int WjkvGwK=0; WjkvGwK < result.vertexBindingDivisorCount; WjkvGwK++){
            [&](){
            auto temp=proto_arr[WjkvGwK];
            ((result.pVertexBindingDivisors)[WjkvGwK])=deserialize_struct(temp);
            }();
        }
        }();(result.pVertexBindingDivisors)=temp_ZOHcldD;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineVertexInputDivisorStateCreateInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineVertexInputDivisorStateCreateInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT::Builder& builder, VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setmaxVertexAttribDivisor((member.maxVertexAttribDivisor));}();
}

    VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT deserialize_struct(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT::Reader reader){
        auto result=VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.maxVertexAttribDivisor)=reader.getmaxVertexAttribDivisor();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDevicePCIBusInfoPropertiesEXT::Builder& builder, VkPhysicalDevicePCIBusInfoPropertiesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setpciDomain((member.pciDomain));}();
[&](){return builder.setpciBus((member.pciBus));}();
[&](){return builder.setpciDevice((member.pciDevice));}();
[&](){return builder.setpciFunction((member.pciFunction));}();
}

    VkPhysicalDevicePCIBusInfoPropertiesEXT deserialize_struct(VkPhysicalDevicePCIBusInfoPropertiesEXT::Reader reader){
        auto result=VkPhysicalDevicePCIBusInfoPropertiesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.pciDomain)=reader.getpciDomain();}();
[&](){(result.pciBus)=reader.getpciBus();}();
[&](){(result.pciDevice)=reader.getpciDevice();}();
[&](){(result.pciFunction)=reader.getpciFunction();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDevicePCIBusInfoPropertiesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDevicePCIBusInfoPropertiesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkCommandBufferInheritanceConditionalRenderingInfoEXT::Builder& builder, VkCommandBufferInheritanceConditionalRenderingInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setconditionalRenderingEnable((member.conditionalRenderingEnable));}();}();
}

    VkCommandBufferInheritanceConditionalRenderingInfoEXT deserialize_struct(VkCommandBufferInheritanceConditionalRenderingInfoEXT::Reader reader){
        auto result=VkCommandBufferInheritanceConditionalRenderingInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){(result.conditionalRenderingEnable)=reader.getconditionalRenderingEnable();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkCommandBufferInheritanceConditionalRenderingInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkCommandBufferInheritanceConditionalRenderingInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDevice8BitStorageFeatures::Builder& builder, VkPhysicalDevice8BitStorageFeatures member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setstorageBuffer8BitAccess((member.storageBuffer8BitAccess));}();}();
[&](){[&](){return builder.setuniformAndStorageBuffer8BitAccess((member.uniformAndStorageBuffer8BitAccess));}();}();
[&](){[&](){return builder.setstoragePushConstant8((member.storagePushConstant8));}();}();
}

    VkPhysicalDevice8BitStorageFeatures deserialize_struct(VkPhysicalDevice8BitStorageFeatures::Reader reader){
        auto result=VkPhysicalDevice8BitStorageFeatures();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.storageBuffer8BitAccess)=reader.getstorageBuffer8BitAccess();}();}();
[&](){[&](){(result.uniformAndStorageBuffer8BitAccess)=reader.getuniformAndStorageBuffer8BitAccess();}();}();
[&](){[&](){(result.storagePushConstant8)=reader.getstoragePushConstant8();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDevice8BitStorageFeatures member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDevice8BitStorageFeatures member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceConditionalRenderingFeaturesEXT::Builder& builder, VkPhysicalDeviceConditionalRenderingFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setconditionalRendering((member.conditionalRendering));}();}();
[&](){[&](){return builder.setinheritedConditionalRendering((member.inheritedConditionalRendering));}();}();
}

    VkPhysicalDeviceConditionalRenderingFeaturesEXT deserialize_struct(VkPhysicalDeviceConditionalRenderingFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceConditionalRenderingFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.conditionalRendering)=reader.getconditionalRendering();}();}();
[&](){[&](){(result.inheritedConditionalRendering)=reader.getinheritedConditionalRendering();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceConditionalRenderingFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceConditionalRenderingFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceVulkanMemoryModelFeatures::Builder& builder, VkPhysicalDeviceVulkanMemoryModelFeatures member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setvulkanMemoryModel((member.vulkanMemoryModel));}();}();
[&](){[&](){return builder.setvulkanMemoryModelDeviceScope((member.vulkanMemoryModelDeviceScope));}();}();
[&](){[&](){return builder.setvulkanMemoryModelAvailabilityVisibilityChains((member.vulkanMemoryModelAvailabilityVisibilityChains));}();}();
}

    VkPhysicalDeviceVulkanMemoryModelFeatures deserialize_struct(VkPhysicalDeviceVulkanMemoryModelFeatures::Reader reader){
        auto result=VkPhysicalDeviceVulkanMemoryModelFeatures();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.vulkanMemoryModel)=reader.getvulkanMemoryModel();}();}();
[&](){[&](){(result.vulkanMemoryModelDeviceScope)=reader.getvulkanMemoryModelDeviceScope();}();}();
[&](){[&](){(result.vulkanMemoryModelAvailabilityVisibilityChains)=reader.getvulkanMemoryModelAvailabilityVisibilityChains();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceVulkanMemoryModelFeatures member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceVulkanMemoryModelFeatures member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceShaderAtomicInt64Features::Builder& builder, VkPhysicalDeviceShaderAtomicInt64Features member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setshaderBufferInt64Atomics((member.shaderBufferInt64Atomics));}();}();
[&](){[&](){return builder.setshaderSharedInt64Atomics((member.shaderSharedInt64Atomics));}();}();
}

    VkPhysicalDeviceShaderAtomicInt64Features deserialize_struct(VkPhysicalDeviceShaderAtomicInt64Features::Reader reader){
        auto result=VkPhysicalDeviceShaderAtomicInt64Features();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.shaderBufferInt64Atomics)=reader.getshaderBufferInt64Atomics();}();}();
[&](){[&](){(result.shaderSharedInt64Atomics)=reader.getshaderSharedInt64Atomics();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceShaderAtomicInt64Features member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceShaderAtomicInt64Features member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT::Builder& builder, VkPhysicalDeviceShaderAtomicFloatFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setshaderBufferFloat32Atomics((member.shaderBufferFloat32Atomics));}();}();
[&](){[&](){return builder.setshaderBufferFloat32AtomicAdd((member.shaderBufferFloat32AtomicAdd));}();}();
[&](){[&](){return builder.setshaderBufferFloat64Atomics((member.shaderBufferFloat64Atomics));}();}();
[&](){[&](){return builder.setshaderBufferFloat64AtomicAdd((member.shaderBufferFloat64AtomicAdd));}();}();
[&](){[&](){return builder.setshaderSharedFloat32Atomics((member.shaderSharedFloat32Atomics));}();}();
[&](){[&](){return builder.setshaderSharedFloat32AtomicAdd((member.shaderSharedFloat32AtomicAdd));}();}();
[&](){[&](){return builder.setshaderSharedFloat64Atomics((member.shaderSharedFloat64Atomics));}();}();
[&](){[&](){return builder.setshaderSharedFloat64AtomicAdd((member.shaderSharedFloat64AtomicAdd));}();}();
[&](){[&](){return builder.setshaderImageFloat32Atomics((member.shaderImageFloat32Atomics));}();}();
[&](){[&](){return builder.setshaderImageFloat32AtomicAdd((member.shaderImageFloat32AtomicAdd));}();}();
[&](){[&](){return builder.setsparseImageFloat32Atomics((member.sparseImageFloat32Atomics));}();}();
[&](){[&](){return builder.setsparseImageFloat32AtomicAdd((member.sparseImageFloat32AtomicAdd));}();}();
}

    VkPhysicalDeviceShaderAtomicFloatFeaturesEXT deserialize_struct(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceShaderAtomicFloatFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.shaderBufferFloat32Atomics)=reader.getshaderBufferFloat32Atomics();}();}();
[&](){[&](){(result.shaderBufferFloat32AtomicAdd)=reader.getshaderBufferFloat32AtomicAdd();}();}();
[&](){[&](){(result.shaderBufferFloat64Atomics)=reader.getshaderBufferFloat64Atomics();}();}();
[&](){[&](){(result.shaderBufferFloat64AtomicAdd)=reader.getshaderBufferFloat64AtomicAdd();}();}();
[&](){[&](){(result.shaderSharedFloat32Atomics)=reader.getshaderSharedFloat32Atomics();}();}();
[&](){[&](){(result.shaderSharedFloat32AtomicAdd)=reader.getshaderSharedFloat32AtomicAdd();}();}();
[&](){[&](){(result.shaderSharedFloat64Atomics)=reader.getshaderSharedFloat64Atomics();}();}();
[&](){[&](){(result.shaderSharedFloat64AtomicAdd)=reader.getshaderSharedFloat64AtomicAdd();}();}();
[&](){[&](){(result.shaderImageFloat32Atomics)=reader.getshaderImageFloat32Atomics();}();}();
[&](){[&](){(result.shaderImageFloat32AtomicAdd)=reader.getshaderImageFloat32AtomicAdd();}();}();
[&](){[&](){(result.sparseImageFloat32Atomics)=reader.getsparseImageFloat32Atomics();}();}();
[&](){[&](){(result.sparseImageFloat32AtomicAdd)=reader.getsparseImageFloat32AtomicAdd();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceShaderAtomicFloatFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceShaderAtomicFloatFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT::Builder& builder, VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setshaderBufferFloat16Atomics((member.shaderBufferFloat16Atomics));}();}();
[&](){[&](){return builder.setshaderBufferFloat16AtomicAdd((member.shaderBufferFloat16AtomicAdd));}();}();
[&](){[&](){return builder.setshaderBufferFloat16AtomicMinMax((member.shaderBufferFloat16AtomicMinMax));}();}();
[&](){[&](){return builder.setshaderBufferFloat32AtomicMinMax((member.shaderBufferFloat32AtomicMinMax));}();}();
[&](){[&](){return builder.setshaderBufferFloat64AtomicMinMax((member.shaderBufferFloat64AtomicMinMax));}();}();
[&](){[&](){return builder.setshaderSharedFloat16Atomics((member.shaderSharedFloat16Atomics));}();}();
[&](){[&](){return builder.setshaderSharedFloat16AtomicAdd((member.shaderSharedFloat16AtomicAdd));}();}();
[&](){[&](){return builder.setshaderSharedFloat16AtomicMinMax((member.shaderSharedFloat16AtomicMinMax));}();}();
[&](){[&](){return builder.setshaderSharedFloat32AtomicMinMax((member.shaderSharedFloat32AtomicMinMax));}();}();
[&](){[&](){return builder.setshaderSharedFloat64AtomicMinMax((member.shaderSharedFloat64AtomicMinMax));}();}();
[&](){[&](){return builder.setshaderImageFloat32AtomicMinMax((member.shaderImageFloat32AtomicMinMax));}();}();
[&](){[&](){return builder.setsparseImageFloat32AtomicMinMax((member.sparseImageFloat32AtomicMinMax));}();}();
}

    VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT deserialize_struct(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.shaderBufferFloat16Atomics)=reader.getshaderBufferFloat16Atomics();}();}();
[&](){[&](){(result.shaderBufferFloat16AtomicAdd)=reader.getshaderBufferFloat16AtomicAdd();}();}();
[&](){[&](){(result.shaderBufferFloat16AtomicMinMax)=reader.getshaderBufferFloat16AtomicMinMax();}();}();
[&](){[&](){(result.shaderBufferFloat32AtomicMinMax)=reader.getshaderBufferFloat32AtomicMinMax();}();}();
[&](){[&](){(result.shaderBufferFloat64AtomicMinMax)=reader.getshaderBufferFloat64AtomicMinMax();}();}();
[&](){[&](){(result.shaderSharedFloat16Atomics)=reader.getshaderSharedFloat16Atomics();}();}();
[&](){[&](){(result.shaderSharedFloat16AtomicAdd)=reader.getshaderSharedFloat16AtomicAdd();}();}();
[&](){[&](){(result.shaderSharedFloat16AtomicMinMax)=reader.getshaderSharedFloat16AtomicMinMax();}();}();
[&](){[&](){(result.shaderSharedFloat32AtomicMinMax)=reader.getshaderSharedFloat32AtomicMinMax();}();}();
[&](){[&](){(result.shaderSharedFloat64AtomicMinMax)=reader.getshaderSharedFloat64AtomicMinMax();}();}();
[&](){[&](){(result.shaderImageFloat32AtomicMinMax)=reader.getshaderImageFloat32AtomicMinMax();}();}();
[&](){[&](){(result.sparseImageFloat32AtomicMinMax)=reader.getsparseImageFloat32AtomicMinMax();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT::Builder& builder, VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setvertexAttributeInstanceRateDivisor((member.vertexAttributeInstanceRateDivisor));}();}();
[&](){[&](){return builder.setvertexAttributeInstanceRateZeroDivisor((member.vertexAttributeInstanceRateZeroDivisor));}();}();
}

    VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT deserialize_struct(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.vertexAttributeInstanceRateDivisor)=reader.getvertexAttributeInstanceRateDivisor();}();}();
[&](){[&](){(result.vertexAttributeInstanceRateZeroDivisor)=reader.getvertexAttributeInstanceRateZeroDivisor();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkQueueFamilyCheckpointPropertiesNV::Builder& builder, VkQueueFamilyCheckpointPropertiesNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setcheckpointExecutionStageMask((member.checkpointExecutionStageMask));}();}();}();
}

    VkQueueFamilyCheckpointPropertiesNV deserialize_struct(VkQueueFamilyCheckpointPropertiesNV::Reader reader){
        auto result=VkQueueFamilyCheckpointPropertiesNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.checkpointExecutionStageMask)=reader.getcheckpointExecutionStageMask();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkQueueFamilyCheckpointPropertiesNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkQueueFamilyCheckpointPropertiesNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkCheckpointDataNV::Builder& builder, VkCheckpointDataNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setstage((member.stage));}();}();}();
[&](){
            if ((member.pCheckpointMarker)==NULL){
                builder.disownpCheckpointMarker();
            return; }[&](){
            if (((char*)(member.pCheckpointMarker).pCheckpointMarker)==NULL){
                builder.disownpCheckpointMarker();
            return; }
        auto proto_arr=builder.initpCheckpointMarker();
        for(int ROoHiBu=0; ROoHiBu < strlen(((char*)(member.pCheckpointMarker).pCheckpointMarker))+1; ROoHiBu++){
            [&](){return proto_arr.set(ROoHiBu,(((char*)(member.pCheckpointMarker).pCheckpointMarker)[ROoHiBu]));}();
        }
        }();}();
}

    VkCheckpointDataNV deserialize_struct(VkCheckpointDataNV::Reader reader){
        auto result=VkCheckpointDataNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.stage)=reader.getstage();}();}();}();
[&](){
            if (!reader.haspCheckpointMarker()){
                (result.pCheckpointMarker)=NULL;
            return; }char* temp_PEjVDYf;[&](){
            if (!reader.haspCheckpointMarker()){
                (temp_PEjVDYf.pCheckpointMarker)=NULL;
            return; }{native_concat()}=(char*)malloc(reader.getpCheckpointMarker().size();*sizeof(char));
        auto proto_arr=reader.getpCheckpointMarker(reader.getpCheckpointMarker().size(););
        for(int ROoHiBu=0; ROoHiBu < reader.getpCheckpointMarker().size();; ROoHiBu++){
            [&](){((temp_PEjVDYf.pCheckpointMarker)[ROoHiBu])=proto_arr[ROoHiBu];}();
        }
        }();(result.pCheckpointMarker)=temp_PEjVDYf;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkCheckpointDataNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkCheckpointDataNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceDepthStencilResolveProperties::Builder& builder, VkPhysicalDeviceDepthStencilResolveProperties member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setsupportedDepthResolveModes((member.supportedDepthResolveModes));}();}();}();
[&](){[&](){[&](){return builder.setsupportedStencilResolveModes((member.supportedStencilResolveModes));}();}();}();
[&](){[&](){return builder.setindependentResolveNone((member.independentResolveNone));}();}();
[&](){[&](){return builder.setindependentResolve((member.independentResolve));}();}();
}

    VkPhysicalDeviceDepthStencilResolveProperties deserialize_struct(VkPhysicalDeviceDepthStencilResolveProperties::Reader reader){
        auto result=VkPhysicalDeviceDepthStencilResolveProperties();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.supportedDepthResolveModes)=reader.getsupportedDepthResolveModes();}();}();}();
[&](){[&](){[&](){(result.supportedStencilResolveModes)=reader.getsupportedStencilResolveModes();}();}();}();
[&](){[&](){(result.independentResolveNone)=reader.getindependentResolveNone();}();}();
[&](){[&](){(result.independentResolve)=reader.getindependentResolve();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceDepthStencilResolveProperties member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceDepthStencilResolveProperties member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSubpassDescriptionDepthStencilResolve::Builder& builder, VkSubpassDescriptionDepthStencilResolve member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setdepthResolveMode((member.depthResolveMode));}();}();}();
[&](){[&](){[&](){return builder.setstencilResolveMode((member.stencilResolveMode));}();}();}();
[&](){
            if ((member.pDepthStencilResolveAttachment)==NULL){
                builder.disownpDepthStencilResolveAttachment();
            return; }
        auto proto_arr=builder.initpDepthStencilResolveAttachment();
        for(int OUyBLoX=0; OUyBLoX < 1; OUyBLoX++){
            [&](){
            auto temp=proto_arr[OUyBLoX];
            return serialize_struct(((member.pDepthStencilResolveAttachment)[OUyBLoX]), temp);
            }();
        }
        }();
}

    VkSubpassDescriptionDepthStencilResolve deserialize_struct(VkSubpassDescriptionDepthStencilResolve::Reader reader){
        auto result=VkSubpassDescriptionDepthStencilResolve();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.depthResolveMode)=reader.getdepthResolveMode();}();}();}();
[&](){[&](){[&](){(result.stencilResolveMode)=reader.getstencilResolveMode();}();}();}();
[&](){ VkAttachmentReference2* temp_qZRzgVG[&](){
            if (!reader.haspDepthStencilResolveAttachment()){
                (result.pDepthStencilResolveAttachment)=NULL;
            return; }{native_concat()}=(VkAttachmentReference2*)malloc(1*sizeof(VkAttachmentReference2));
        auto proto_arr=reader.getpDepthStencilResolveAttachment(1);
        for(int mhYoNRQ=0; mhYoNRQ < 1; mhYoNRQ++){
            [&](){
            auto temp=proto_arr[mhYoNRQ];
            ((result.pDepthStencilResolveAttachment)[mhYoNRQ])=deserialize_struct(temp);
            }();
        }
        }();(result.pDepthStencilResolveAttachment)=temp_qZRzgVG;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSubpassDescriptionDepthStencilResolve member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSubpassDescriptionDepthStencilResolve member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkImageViewASTCDecodeModeEXT::Builder& builder, VkImageViewASTCDecodeModeEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setdecodeMode((member.decodeMode));}();}();}();
}

    VkImageViewASTCDecodeModeEXT deserialize_struct(VkImageViewASTCDecodeModeEXT::Reader reader){
        auto result=VkImageViewASTCDecodeModeEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.decodeMode)=reader.getdecodeMode();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkImageViewASTCDecodeModeEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkImageViewASTCDecodeModeEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceASTCDecodeFeaturesEXT::Builder& builder, VkPhysicalDeviceASTCDecodeFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setdecodeModeSharedExponent((member.decodeModeSharedExponent));}();}();
}

    VkPhysicalDeviceASTCDecodeFeaturesEXT deserialize_struct(VkPhysicalDeviceASTCDecodeFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceASTCDecodeFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.decodeModeSharedExponent)=reader.getdecodeModeSharedExponent();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceASTCDecodeFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceASTCDecodeFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceTransformFeedbackFeaturesEXT::Builder& builder, VkPhysicalDeviceTransformFeedbackFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.settransformFeedback((member.transformFeedback));}();}();
[&](){[&](){return builder.setgeometryStreams((member.geometryStreams));}();}();
}

    VkPhysicalDeviceTransformFeedbackFeaturesEXT deserialize_struct(VkPhysicalDeviceTransformFeedbackFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceTransformFeedbackFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.transformFeedback)=reader.gettransformFeedback();}();}();
[&](){[&](){(result.geometryStreams)=reader.getgeometryStreams();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceTransformFeedbackFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceTransformFeedbackFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceTransformFeedbackPropertiesEXT::Builder& builder, VkPhysicalDeviceTransformFeedbackPropertiesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setmaxTransformFeedbackStreams((member.maxTransformFeedbackStreams));}();
[&](){return builder.setmaxTransformFeedbackBuffers((member.maxTransformFeedbackBuffers));}();
[&](){[&](){return builder.setmaxTransformFeedbackBufferSize((member.maxTransformFeedbackBufferSize));}();}();
[&](){return builder.setmaxTransformFeedbackStreamDataSize((member.maxTransformFeedbackStreamDataSize));}();
[&](){return builder.setmaxTransformFeedbackBufferDataSize((member.maxTransformFeedbackBufferDataSize));}();
[&](){return builder.setmaxTransformFeedbackBufferDataStride((member.maxTransformFeedbackBufferDataStride));}();
[&](){[&](){return builder.settransformFeedbackQueries((member.transformFeedbackQueries));}();}();
[&](){[&](){return builder.settransformFeedbackStreamsLinesTriangles((member.transformFeedbackStreamsLinesTriangles));}();}();
[&](){[&](){return builder.settransformFeedbackRasterizationStreamSelect((member.transformFeedbackRasterizationStreamSelect));}();}();
[&](){[&](){return builder.settransformFeedbackDraw((member.transformFeedbackDraw));}();}();
}

    VkPhysicalDeviceTransformFeedbackPropertiesEXT deserialize_struct(VkPhysicalDeviceTransformFeedbackPropertiesEXT::Reader reader){
        auto result=VkPhysicalDeviceTransformFeedbackPropertiesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.maxTransformFeedbackStreams)=reader.getmaxTransformFeedbackStreams();}();
[&](){(result.maxTransformFeedbackBuffers)=reader.getmaxTransformFeedbackBuffers();}();
[&](){[&](){(result.maxTransformFeedbackBufferSize)=reader.getmaxTransformFeedbackBufferSize();}();}();
[&](){(result.maxTransformFeedbackStreamDataSize)=reader.getmaxTransformFeedbackStreamDataSize();}();
[&](){(result.maxTransformFeedbackBufferDataSize)=reader.getmaxTransformFeedbackBufferDataSize();}();
[&](){(result.maxTransformFeedbackBufferDataStride)=reader.getmaxTransformFeedbackBufferDataStride();}();
[&](){[&](){(result.transformFeedbackQueries)=reader.gettransformFeedbackQueries();}();}();
[&](){[&](){(result.transformFeedbackStreamsLinesTriangles)=reader.gettransformFeedbackStreamsLinesTriangles();}();}();
[&](){[&](){(result.transformFeedbackRasterizationStreamSelect)=reader.gettransformFeedbackRasterizationStreamSelect();}();}();
[&](){[&](){(result.transformFeedbackDraw)=reader.gettransformFeedbackDraw();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceTransformFeedbackPropertiesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceTransformFeedbackPropertiesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineRasterizationStateStreamCreateInfoEXT::Builder& builder, VkPipelineRasterizationStateStreamCreateInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){return builder.setrasterizationStream((member.rasterizationStream));}();
}

    VkPipelineRasterizationStateStreamCreateInfoEXT deserialize_struct(VkPipelineRasterizationStateStreamCreateInfoEXT::Reader reader){
        auto result=VkPipelineRasterizationStateStreamCreateInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){(result.rasterizationStream)=reader.getrasterizationStream();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineRasterizationStateStreamCreateInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineRasterizationStateStreamCreateInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV::Builder& builder, VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setrepresentativeFragmentTest((member.representativeFragmentTest));}();}();
}

    VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV deserialize_struct(VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV::Reader reader){
        auto result=VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.representativeFragmentTest)=reader.getrepresentativeFragmentTest();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineRepresentativeFragmentTestStateCreateInfoNV::Builder& builder, VkPipelineRepresentativeFragmentTestStateCreateInfoNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setrepresentativeFragmentTestEnable((member.representativeFragmentTestEnable));}();}();
}

    VkPipelineRepresentativeFragmentTestStateCreateInfoNV deserialize_struct(VkPipelineRepresentativeFragmentTestStateCreateInfoNV::Reader reader){
        auto result=VkPipelineRepresentativeFragmentTestStateCreateInfoNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){(result.representativeFragmentTestEnable)=reader.getrepresentativeFragmentTestEnable();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineRepresentativeFragmentTestStateCreateInfoNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineRepresentativeFragmentTestStateCreateInfoNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceExclusiveScissorFeaturesNV::Builder& builder, VkPhysicalDeviceExclusiveScissorFeaturesNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setexclusiveScissor((member.exclusiveScissor));}();}();
}

    VkPhysicalDeviceExclusiveScissorFeaturesNV deserialize_struct(VkPhysicalDeviceExclusiveScissorFeaturesNV::Reader reader){
        auto result=VkPhysicalDeviceExclusiveScissorFeaturesNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.exclusiveScissor)=reader.getexclusiveScissor();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceExclusiveScissorFeaturesNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceExclusiveScissorFeaturesNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineViewportExclusiveScissorStateCreateInfoNV::Builder& builder, VkPipelineViewportExclusiveScissorStateCreateInfoNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setexclusiveScissorCount((member.exclusiveScissorCount));}();
[&](){
            if ((member.pExclusiveScissors)==NULL){
                builder.disownpExclusiveScissors();
            return; }
        auto proto_arr=builder.initpExclusiveScissors();
        for(int hDCzNLp=0; hDCzNLp < member.exclusiveScissorCount; hDCzNLp++){
            [&](){
            auto temp=proto_arr[hDCzNLp];
            return serialize_struct(((member.pExclusiveScissors)[hDCzNLp]), temp);
            }();
        }
        }();
}

    VkPipelineViewportExclusiveScissorStateCreateInfoNV deserialize_struct(VkPipelineViewportExclusiveScissorStateCreateInfoNV::Reader reader){
        auto result=VkPipelineViewportExclusiveScissorStateCreateInfoNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.exclusiveScissorCount)=reader.getexclusiveScissorCount();}();
[&](){ VkRect2D* temp_HNTfgYD[&](){
            if (!reader.haspExclusiveScissors()){
                (result.pExclusiveScissors)=NULL;
            return; }{native_concat()}=(VkRect2D*)malloc(result.exclusiveScissorCount*sizeof(VkRect2D));
        auto proto_arr=reader.getpExclusiveScissors(result.exclusiveScissorCount);
        for(int gpvLKLX=0; gpvLKLX < result.exclusiveScissorCount; gpvLKLX++){
            [&](){
            auto temp=proto_arr[gpvLKLX];
            ((result.pExclusiveScissors)[gpvLKLX])=deserialize_struct(temp);
            }();
        }
        }();(result.pExclusiveScissors)=temp_HNTfgYD;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineViewportExclusiveScissorStateCreateInfoNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineViewportExclusiveScissorStateCreateInfoNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceCornerSampledImageFeaturesNV::Builder& builder, VkPhysicalDeviceCornerSampledImageFeaturesNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setcornerSampledImage((member.cornerSampledImage));}();}();
}

    VkPhysicalDeviceCornerSampledImageFeaturesNV deserialize_struct(VkPhysicalDeviceCornerSampledImageFeaturesNV::Reader reader){
        auto result=VkPhysicalDeviceCornerSampledImageFeaturesNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.cornerSampledImage)=reader.getcornerSampledImage();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceCornerSampledImageFeaturesNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceCornerSampledImageFeaturesNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceComputeShaderDerivativesFeaturesNV::Builder& builder, VkPhysicalDeviceComputeShaderDerivativesFeaturesNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setcomputeDerivativeGroupQuads((member.computeDerivativeGroupQuads));}();}();
[&](){[&](){return builder.setcomputeDerivativeGroupLinear((member.computeDerivativeGroupLinear));}();}();
}

    VkPhysicalDeviceComputeShaderDerivativesFeaturesNV deserialize_struct(VkPhysicalDeviceComputeShaderDerivativesFeaturesNV::Reader reader){
        auto result=VkPhysicalDeviceComputeShaderDerivativesFeaturesNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.computeDerivativeGroupQuads)=reader.getcomputeDerivativeGroupQuads();}();}();
[&](){[&](){(result.computeDerivativeGroupLinear)=reader.getcomputeDerivativeGroupLinear();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceComputeShaderDerivativesFeaturesNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceComputeShaderDerivativesFeaturesNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceShaderImageFootprintFeaturesNV::Builder& builder, VkPhysicalDeviceShaderImageFootprintFeaturesNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setimageFootprint((member.imageFootprint));}();}();
}

    VkPhysicalDeviceShaderImageFootprintFeaturesNV deserialize_struct(VkPhysicalDeviceShaderImageFootprintFeaturesNV::Reader reader){
        auto result=VkPhysicalDeviceShaderImageFootprintFeaturesNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.imageFootprint)=reader.getimageFootprint();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceShaderImageFootprintFeaturesNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceShaderImageFootprintFeaturesNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV::Builder& builder, VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setdedicatedAllocationImageAliasing((member.dedicatedAllocationImageAliasing));}();}();
}

    VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV deserialize_struct(VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV::Reader reader){
        auto result=VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.dedicatedAllocationImageAliasing)=reader.getdedicatedAllocationImageAliasing();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceCopyMemoryIndirectFeaturesNV::Builder& builder, VkPhysicalDeviceCopyMemoryIndirectFeaturesNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setindirectCopy((member.indirectCopy));}();}();
}

    VkPhysicalDeviceCopyMemoryIndirectFeaturesNV deserialize_struct(VkPhysicalDeviceCopyMemoryIndirectFeaturesNV::Reader reader){
        auto result=VkPhysicalDeviceCopyMemoryIndirectFeaturesNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.indirectCopy)=reader.getindirectCopy();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceCopyMemoryIndirectFeaturesNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceCopyMemoryIndirectFeaturesNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceCopyMemoryIndirectPropertiesNV::Builder& builder, VkPhysicalDeviceCopyMemoryIndirectPropertiesNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setsupportedQueues((member.supportedQueues));}();}();}();
}

    VkPhysicalDeviceCopyMemoryIndirectPropertiesNV deserialize_struct(VkPhysicalDeviceCopyMemoryIndirectPropertiesNV::Reader reader){
        auto result=VkPhysicalDeviceCopyMemoryIndirectPropertiesNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.supportedQueues)=reader.getsupportedQueues();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceCopyMemoryIndirectPropertiesNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceCopyMemoryIndirectPropertiesNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceMemoryDecompressionFeaturesNV::Builder& builder, VkPhysicalDeviceMemoryDecompressionFeaturesNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setmemoryDecompression((member.memoryDecompression));}();}();
}

    VkPhysicalDeviceMemoryDecompressionFeaturesNV deserialize_struct(VkPhysicalDeviceMemoryDecompressionFeaturesNV::Reader reader){
        auto result=VkPhysicalDeviceMemoryDecompressionFeaturesNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.memoryDecompression)=reader.getmemoryDecompression();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceMemoryDecompressionFeaturesNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceMemoryDecompressionFeaturesNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceMemoryDecompressionPropertiesNV::Builder& builder, VkPhysicalDeviceMemoryDecompressionPropertiesNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setdecompressionMethods((member.decompressionMethods));}();}();}();
[&](){return builder.setmaxDecompressionIndirectCount((member.maxDecompressionIndirectCount));}();
}

    VkPhysicalDeviceMemoryDecompressionPropertiesNV deserialize_struct(VkPhysicalDeviceMemoryDecompressionPropertiesNV::Reader reader){
        auto result=VkPhysicalDeviceMemoryDecompressionPropertiesNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.decompressionMethods)=reader.getdecompressionMethods();}();}();}();
[&](){(result.maxDecompressionIndirectCount)=reader.getmaxDecompressionIndirectCount();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceMemoryDecompressionPropertiesNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceMemoryDecompressionPropertiesNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkShadingRatePaletteNV::Builder& builder, VkShadingRatePaletteNV member){
        
    
[&](){return builder.setshadingRatePaletteEntryCount((member.shadingRatePaletteEntryCount));}();
[&](){
            if ((member.pShadingRatePaletteEntries)==NULL){
                builder.disownpShadingRatePaletteEntries();
            return; }
        auto proto_arr=builder.initpShadingRatePaletteEntries();
        for(int yMnmzQx=0; yMnmzQx < member.shadingRatePaletteEntryCount; yMnmzQx++){
            [&](){[&](){[&](){return proto_arr.set(yMnmzQx,((member.pShadingRatePaletteEntries)[yMnmzQx]));}();}();}();
        }
        }();
}

    VkShadingRatePaletteNV deserialize_struct(VkShadingRatePaletteNV::Reader reader){
        auto result=VkShadingRatePaletteNV();
    
[&](){(result.shadingRatePaletteEntryCount)=reader.getshadingRatePaletteEntryCount();}();
[&](){ VkShadingRatePaletteEntryNV* temp_jixKdSV[&](){
            if (!reader.haspShadingRatePaletteEntries()){
                (result.pShadingRatePaletteEntries)=NULL;
            return; }{native_concat()}=(VkShadingRatePaletteEntryNV*)malloc(result.shadingRatePaletteEntryCount*sizeof(VkShadingRatePaletteEntryNV));
        auto proto_arr=reader.getpShadingRatePaletteEntries(result.shadingRatePaletteEntryCount);
        for(int qHFlNbq=0; qHFlNbq < result.shadingRatePaletteEntryCount; qHFlNbq++){
            [&](){[&](){[&](){((result.pShadingRatePaletteEntries)[qHFlNbq])=proto_arr[qHFlNbq];}();}();}();
        }
        }();(result.pShadingRatePaletteEntries)=temp_jixKdSV;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkShadingRatePaletteNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkShadingRatePaletteNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineViewportShadingRateImageStateCreateInfoNV::Builder& builder, VkPipelineViewportShadingRateImageStateCreateInfoNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setshadingRateImageEnable((member.shadingRateImageEnable));}();}();
[&](){return builder.setviewportCount((member.viewportCount));}();
[&](){
            if ((member.pShadingRatePalettes)==NULL){
                builder.disownpShadingRatePalettes();
            return; }
        auto proto_arr=builder.initpShadingRatePalettes();
        for(int CEwDDNk=0; CEwDDNk < member.viewportCount; CEwDDNk++){
            [&](){
            auto temp=proto_arr[CEwDDNk];
            return serialize_struct(((member.pShadingRatePalettes)[CEwDDNk]), temp);
            }();
        }
        }();
}

    VkPipelineViewportShadingRateImageStateCreateInfoNV deserialize_struct(VkPipelineViewportShadingRateImageStateCreateInfoNV::Reader reader){
        auto result=VkPipelineViewportShadingRateImageStateCreateInfoNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){(result.shadingRateImageEnable)=reader.getshadingRateImageEnable();}();}();
[&](){(result.viewportCount)=reader.getviewportCount();}();
[&](){ VkShadingRatePaletteNV* temp_NLCwpLF[&](){
            if (!reader.haspShadingRatePalettes()){
                (result.pShadingRatePalettes)=NULL;
            return; }{native_concat()}=(VkShadingRatePaletteNV*)malloc(result.viewportCount*sizeof(VkShadingRatePaletteNV));
        auto proto_arr=reader.getpShadingRatePalettes(result.viewportCount);
        for(int YEHriqV=0; YEHriqV < result.viewportCount; YEHriqV++){
            [&](){
            auto temp=proto_arr[YEHriqV];
            ((result.pShadingRatePalettes)[YEHriqV])=deserialize_struct(temp);
            }();
        }
        }();(result.pShadingRatePalettes)=temp_NLCwpLF;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineViewportShadingRateImageStateCreateInfoNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineViewportShadingRateImageStateCreateInfoNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceShadingRateImageFeaturesNV::Builder& builder, VkPhysicalDeviceShadingRateImageFeaturesNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setshadingRateImage((member.shadingRateImage));}();}();
[&](){[&](){return builder.setshadingRateCoarseSampleOrder((member.shadingRateCoarseSampleOrder));}();}();
}

    VkPhysicalDeviceShadingRateImageFeaturesNV deserialize_struct(VkPhysicalDeviceShadingRateImageFeaturesNV::Reader reader){
        auto result=VkPhysicalDeviceShadingRateImageFeaturesNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.shadingRateImage)=reader.getshadingRateImage();}();}();
[&](){[&](){(result.shadingRateCoarseSampleOrder)=reader.getshadingRateCoarseSampleOrder();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceShadingRateImageFeaturesNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceShadingRateImageFeaturesNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceShadingRateImagePropertiesNV::Builder& builder, VkPhysicalDeviceShadingRateImagePropertiesNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            auto temp=builder.initshadingRateTexelSize(shadingRateTexelSize);
            return serialize_struct((member.shadingRateTexelSize), temp);
            }();
[&](){return builder.setshadingRatePaletteSize((member.shadingRatePaletteSize));}();
[&](){return builder.setshadingRateMaxCoarseSamples((member.shadingRateMaxCoarseSamples));}();
}

    VkPhysicalDeviceShadingRateImagePropertiesNV deserialize_struct(VkPhysicalDeviceShadingRateImagePropertiesNV::Reader reader){
        auto result=VkPhysicalDeviceShadingRateImagePropertiesNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getshadingRateTexelSize();
            (result.shadingRateTexelSize)=deserialize_struct(temp);
            }();
[&](){(result.shadingRatePaletteSize)=reader.getshadingRatePaletteSize();}();
[&](){(result.shadingRateMaxCoarseSamples)=reader.getshadingRateMaxCoarseSamples();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceShadingRateImagePropertiesNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceShadingRateImagePropertiesNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceInvocationMaskFeaturesHUAWEI::Builder& builder, VkPhysicalDeviceInvocationMaskFeaturesHUAWEI member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setinvocationMask((member.invocationMask));}();}();
}

    VkPhysicalDeviceInvocationMaskFeaturesHUAWEI deserialize_struct(VkPhysicalDeviceInvocationMaskFeaturesHUAWEI::Reader reader){
        auto result=VkPhysicalDeviceInvocationMaskFeaturesHUAWEI();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.invocationMask)=reader.getinvocationMask();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceInvocationMaskFeaturesHUAWEI member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceInvocationMaskFeaturesHUAWEI member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkCoarseSampleLocationNV::Builder& builder, VkCoarseSampleLocationNV member){
        
    
[&](){return builder.setpixelX((member.pixelX));}();
[&](){return builder.setpixelY((member.pixelY));}();
[&](){return builder.setsample((member.sample));}();
}

    VkCoarseSampleLocationNV deserialize_struct(VkCoarseSampleLocationNV::Reader reader){
        auto result=VkCoarseSampleLocationNV();
    
[&](){(result.pixelX)=reader.getpixelX();}();
[&](){(result.pixelY)=reader.getpixelY();}();
[&](){(result.sample)=reader.getsample();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkCoarseSampleLocationNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkCoarseSampleLocationNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkCoarseSampleOrderCustomNV::Builder& builder, VkCoarseSampleOrderCustomNV member){
        
    
[&](){[&](){[&](){return builder.setshadingRate((member.shadingRate));}();}();}();
[&](){return builder.setsampleCount((member.sampleCount));}();
[&](){return builder.setsampleLocationCount((member.sampleLocationCount));}();
[&](){
            if ((member.pSampleLocations)==NULL){
                builder.disownpSampleLocations();
            return; }
        auto proto_arr=builder.initpSampleLocations();
        for(int zloWrCx=0; zloWrCx < member.sampleLocationCount; zloWrCx++){
            [&](){
            auto temp=proto_arr[zloWrCx];
            return serialize_struct(((member.pSampleLocations)[zloWrCx]), temp);
            }();
        }
        }();
}

    VkCoarseSampleOrderCustomNV deserialize_struct(VkCoarseSampleOrderCustomNV::Reader reader){
        auto result=VkCoarseSampleOrderCustomNV();
    
[&](){[&](){[&](){(result.shadingRate)=reader.getshadingRate();}();}();}();
[&](){(result.sampleCount)=reader.getsampleCount();}();
[&](){(result.sampleLocationCount)=reader.getsampleLocationCount();}();
[&](){ VkCoarseSampleLocationNV* temp_GFCinfA[&](){
            if (!reader.haspSampleLocations()){
                (result.pSampleLocations)=NULL;
            return; }{native_concat()}=(VkCoarseSampleLocationNV*)malloc(result.sampleLocationCount*sizeof(VkCoarseSampleLocationNV));
        auto proto_arr=reader.getpSampleLocations(result.sampleLocationCount);
        for(int nGkqqOa=0; nGkqqOa < result.sampleLocationCount; nGkqqOa++){
            [&](){
            auto temp=proto_arr[nGkqqOa];
            ((result.pSampleLocations)[nGkqqOa])=deserialize_struct(temp);
            }();
        }
        }();(result.pSampleLocations)=temp_GFCinfA;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkCoarseSampleOrderCustomNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkCoarseSampleOrderCustomNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV::Builder& builder, VkPipelineViewportCoarseSampleOrderStateCreateInfoNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setsampleOrderType((member.sampleOrderType));}();}();}();
[&](){return builder.setcustomSampleOrderCount((member.customSampleOrderCount));}();
[&](){
            if ((member.pCustomSampleOrders)==NULL){
                builder.disownpCustomSampleOrders();
            return; }
        auto proto_arr=builder.initpCustomSampleOrders();
        for(int rRLekif=0; rRLekif < member.customSampleOrderCount; rRLekif++){
            [&](){
            auto temp=proto_arr[rRLekif];
            return serialize_struct(((member.pCustomSampleOrders)[rRLekif]), temp);
            }();
        }
        }();
}

    VkPipelineViewportCoarseSampleOrderStateCreateInfoNV deserialize_struct(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV::Reader reader){
        auto result=VkPipelineViewportCoarseSampleOrderStateCreateInfoNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.sampleOrderType)=reader.getsampleOrderType();}();}();}();
[&](){(result.customSampleOrderCount)=reader.getcustomSampleOrderCount();}();
[&](){ VkCoarseSampleOrderCustomNV* temp_SaWbkHv[&](){
            if (!reader.haspCustomSampleOrders()){
                (result.pCustomSampleOrders)=NULL;
            return; }{native_concat()}=(VkCoarseSampleOrderCustomNV*)malloc(result.customSampleOrderCount*sizeof(VkCoarseSampleOrderCustomNV));
        auto proto_arr=reader.getpCustomSampleOrders(result.customSampleOrderCount);
        for(int LhLuItc=0; LhLuItc < result.customSampleOrderCount; LhLuItc++){
            [&](){
            auto temp=proto_arr[LhLuItc];
            ((result.pCustomSampleOrders)[LhLuItc])=deserialize_struct(temp);
            }();
        }
        }();(result.pCustomSampleOrders)=temp_SaWbkHv;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineViewportCoarseSampleOrderStateCreateInfoNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineViewportCoarseSampleOrderStateCreateInfoNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceMeshShaderFeaturesNV::Builder& builder, VkPhysicalDeviceMeshShaderFeaturesNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.settaskShader((member.taskShader));}();}();
[&](){[&](){return builder.setmeshShader((member.meshShader));}();}();
}

    VkPhysicalDeviceMeshShaderFeaturesNV deserialize_struct(VkPhysicalDeviceMeshShaderFeaturesNV::Reader reader){
        auto result=VkPhysicalDeviceMeshShaderFeaturesNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.taskShader)=reader.gettaskShader();}();}();
[&](){[&](){(result.meshShader)=reader.getmeshShader();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceMeshShaderFeaturesNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceMeshShaderFeaturesNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceMeshShaderPropertiesNV::Builder& builder, VkPhysicalDeviceMeshShaderPropertiesNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setmaxDrawMeshTasksCount((member.maxDrawMeshTasksCount));}();
[&](){return builder.setmaxTaskWorkGroupInvocations((member.maxTaskWorkGroupInvocations));}();
[&](){
        auto proto_arr=builder.initmaxTaskWorkGroupSize();
        for(int FICAZzf=0; FICAZzf < 3; FICAZzf++){
            [&](){return proto_arr.set(FICAZzf,((member.maxTaskWorkGroupSize)[FICAZzf]));}();
        }
        }();
[&](){return builder.setmaxTaskTotalMemorySize((member.maxTaskTotalMemorySize));}();
[&](){return builder.setmaxTaskOutputCount((member.maxTaskOutputCount));}();
[&](){return builder.setmaxMeshWorkGroupInvocations((member.maxMeshWorkGroupInvocations));}();
[&](){
        auto proto_arr=builder.initmaxMeshWorkGroupSize();
        for(int FHeKNFR=0; FHeKNFR < 3; FHeKNFR++){
            [&](){return proto_arr.set(FHeKNFR,((member.maxMeshWorkGroupSize)[FHeKNFR]));}();
        }
        }();
[&](){return builder.setmaxMeshTotalMemorySize((member.maxMeshTotalMemorySize));}();
[&](){return builder.setmaxMeshOutputVertices((member.maxMeshOutputVertices));}();
[&](){return builder.setmaxMeshOutputPrimitives((member.maxMeshOutputPrimitives));}();
[&](){return builder.setmaxMeshMultiviewViewCount((member.maxMeshMultiviewViewCount));}();
[&](){return builder.setmeshOutputPerVertexGranularity((member.meshOutputPerVertexGranularity));}();
[&](){return builder.setmeshOutputPerPrimitiveGranularity((member.meshOutputPerPrimitiveGranularity));}();
}

    VkPhysicalDeviceMeshShaderPropertiesNV deserialize_struct(VkPhysicalDeviceMeshShaderPropertiesNV::Reader reader){
        auto result=VkPhysicalDeviceMeshShaderPropertiesNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.maxDrawMeshTasksCount)=reader.getmaxDrawMeshTasksCount();}();
[&](){(result.maxTaskWorkGroupInvocations)=reader.getmaxTaskWorkGroupInvocations();}();
[&](){
        auto proto_arr=reader.getmaxTaskWorkGroupSize(3);
        for(int FICAZzf=0; FICAZzf < 3; FICAZzf++){
            [&](){((result.maxTaskWorkGroupSize)[FICAZzf])=proto_arr[FICAZzf];}();
        }
        }();
[&](){(result.maxTaskTotalMemorySize)=reader.getmaxTaskTotalMemorySize();}();
[&](){(result.maxTaskOutputCount)=reader.getmaxTaskOutputCount();}();
[&](){(result.maxMeshWorkGroupInvocations)=reader.getmaxMeshWorkGroupInvocations();}();
[&](){
        auto proto_arr=reader.getmaxMeshWorkGroupSize(3);
        for(int FHeKNFR=0; FHeKNFR < 3; FHeKNFR++){
            [&](){((result.maxMeshWorkGroupSize)[FHeKNFR])=proto_arr[FHeKNFR];}();
        }
        }();
[&](){(result.maxMeshTotalMemorySize)=reader.getmaxMeshTotalMemorySize();}();
[&](){(result.maxMeshOutputVertices)=reader.getmaxMeshOutputVertices();}();
[&](){(result.maxMeshOutputPrimitives)=reader.getmaxMeshOutputPrimitives();}();
[&](){(result.maxMeshMultiviewViewCount)=reader.getmaxMeshMultiviewViewCount();}();
[&](){(result.meshOutputPerVertexGranularity)=reader.getmeshOutputPerVertexGranularity();}();
[&](){(result.meshOutputPerPrimitiveGranularity)=reader.getmeshOutputPerPrimitiveGranularity();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceMeshShaderPropertiesNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceMeshShaderPropertiesNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDrawMeshTasksIndirectCommandNV::Builder& builder, VkDrawMeshTasksIndirectCommandNV member){
        
    
[&](){return builder.settaskCount((member.taskCount));}();
[&](){return builder.setfirstTask((member.firstTask));}();
}

    VkDrawMeshTasksIndirectCommandNV deserialize_struct(VkDrawMeshTasksIndirectCommandNV::Reader reader){
        auto result=VkDrawMeshTasksIndirectCommandNV();
    
[&](){(result.taskCount)=reader.gettaskCount();}();
[&](){(result.firstTask)=reader.getfirstTask();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDrawMeshTasksIndirectCommandNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDrawMeshTasksIndirectCommandNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceMeshShaderFeaturesEXT::Builder& builder, VkPhysicalDeviceMeshShaderFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.settaskShader((member.taskShader));}();}();
[&](){[&](){return builder.setmeshShader((member.meshShader));}();}();
[&](){[&](){return builder.setmultiviewMeshShader((member.multiviewMeshShader));}();}();
[&](){[&](){return builder.setprimitiveFragmentShadingRateMeshShader((member.primitiveFragmentShadingRateMeshShader));}();}();
[&](){[&](){return builder.setmeshShaderQueries((member.meshShaderQueries));}();}();
}

    VkPhysicalDeviceMeshShaderFeaturesEXT deserialize_struct(VkPhysicalDeviceMeshShaderFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceMeshShaderFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.taskShader)=reader.gettaskShader();}();}();
[&](){[&](){(result.meshShader)=reader.getmeshShader();}();}();
[&](){[&](){(result.multiviewMeshShader)=reader.getmultiviewMeshShader();}();}();
[&](){[&](){(result.primitiveFragmentShadingRateMeshShader)=reader.getprimitiveFragmentShadingRateMeshShader();}();}();
[&](){[&](){(result.meshShaderQueries)=reader.getmeshShaderQueries();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceMeshShaderFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceMeshShaderFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceMeshShaderPropertiesEXT::Builder& builder, VkPhysicalDeviceMeshShaderPropertiesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setmaxTaskWorkGroupTotalCount((member.maxTaskWorkGroupTotalCount));}();
[&](){
        auto proto_arr=builder.initmaxTaskWorkGroupCount();
        for(int MDHjwFq=0; MDHjwFq < 3; MDHjwFq++){
            [&](){return proto_arr.set(MDHjwFq,((member.maxTaskWorkGroupCount)[MDHjwFq]));}();
        }
        }();
[&](){return builder.setmaxTaskWorkGroupInvocations((member.maxTaskWorkGroupInvocations));}();
[&](){
        auto proto_arr=builder.initmaxTaskWorkGroupSize();
        for(int FICAZzf=0; FICAZzf < 3; FICAZzf++){
            [&](){return proto_arr.set(FICAZzf,((member.maxTaskWorkGroupSize)[FICAZzf]));}();
        }
        }();
[&](){return builder.setmaxTaskPayloadSize((member.maxTaskPayloadSize));}();
[&](){return builder.setmaxTaskSharedMemorySize((member.maxTaskSharedMemorySize));}();
[&](){return builder.setmaxTaskPayloadAndSharedMemorySize((member.maxTaskPayloadAndSharedMemorySize));}();
[&](){return builder.setmaxMeshWorkGroupTotalCount((member.maxMeshWorkGroupTotalCount));}();
[&](){
        auto proto_arr=builder.initmaxMeshWorkGroupCount();
        for(int ZnMehla=0; ZnMehla < 3; ZnMehla++){
            [&](){return proto_arr.set(ZnMehla,((member.maxMeshWorkGroupCount)[ZnMehla]));}();
        }
        }();
[&](){return builder.setmaxMeshWorkGroupInvocations((member.maxMeshWorkGroupInvocations));}();
[&](){
        auto proto_arr=builder.initmaxMeshWorkGroupSize();
        for(int FHeKNFR=0; FHeKNFR < 3; FHeKNFR++){
            [&](){return proto_arr.set(FHeKNFR,((member.maxMeshWorkGroupSize)[FHeKNFR]));}();
        }
        }();
[&](){return builder.setmaxMeshSharedMemorySize((member.maxMeshSharedMemorySize));}();
[&](){return builder.setmaxMeshPayloadAndSharedMemorySize((member.maxMeshPayloadAndSharedMemorySize));}();
[&](){return builder.setmaxMeshOutputMemorySize((member.maxMeshOutputMemorySize));}();
[&](){return builder.setmaxMeshPayloadAndOutputMemorySize((member.maxMeshPayloadAndOutputMemorySize));}();
[&](){return builder.setmaxMeshOutputComponents((member.maxMeshOutputComponents));}();
[&](){return builder.setmaxMeshOutputVertices((member.maxMeshOutputVertices));}();
[&](){return builder.setmaxMeshOutputPrimitives((member.maxMeshOutputPrimitives));}();
[&](){return builder.setmaxMeshOutputLayers((member.maxMeshOutputLayers));}();
[&](){return builder.setmaxMeshMultiviewViewCount((member.maxMeshMultiviewViewCount));}();
[&](){return builder.setmeshOutputPerVertexGranularity((member.meshOutputPerVertexGranularity));}();
[&](){return builder.setmeshOutputPerPrimitiveGranularity((member.meshOutputPerPrimitiveGranularity));}();
[&](){return builder.setmaxPreferredTaskWorkGroupInvocations((member.maxPreferredTaskWorkGroupInvocations));}();
[&](){return builder.setmaxPreferredMeshWorkGroupInvocations((member.maxPreferredMeshWorkGroupInvocations));}();
[&](){[&](){return builder.setprefersLocalInvocationVertexOutput((member.prefersLocalInvocationVertexOutput));}();}();
[&](){[&](){return builder.setprefersLocalInvocationPrimitiveOutput((member.prefersLocalInvocationPrimitiveOutput));}();}();
[&](){[&](){return builder.setprefersCompactVertexOutput((member.prefersCompactVertexOutput));}();}();
[&](){[&](){return builder.setprefersCompactPrimitiveOutput((member.prefersCompactPrimitiveOutput));}();}();
}

    VkPhysicalDeviceMeshShaderPropertiesEXT deserialize_struct(VkPhysicalDeviceMeshShaderPropertiesEXT::Reader reader){
        auto result=VkPhysicalDeviceMeshShaderPropertiesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.maxTaskWorkGroupTotalCount)=reader.getmaxTaskWorkGroupTotalCount();}();
[&](){
        auto proto_arr=reader.getmaxTaskWorkGroupCount(3);
        for(int MDHjwFq=0; MDHjwFq < 3; MDHjwFq++){
            [&](){((result.maxTaskWorkGroupCount)[MDHjwFq])=proto_arr[MDHjwFq];}();
        }
        }();
[&](){(result.maxTaskWorkGroupInvocations)=reader.getmaxTaskWorkGroupInvocations();}();
[&](){
        auto proto_arr=reader.getmaxTaskWorkGroupSize(3);
        for(int FICAZzf=0; FICAZzf < 3; FICAZzf++){
            [&](){((result.maxTaskWorkGroupSize)[FICAZzf])=proto_arr[FICAZzf];}();
        }
        }();
[&](){(result.maxTaskPayloadSize)=reader.getmaxTaskPayloadSize();}();
[&](){(result.maxTaskSharedMemorySize)=reader.getmaxTaskSharedMemorySize();}();
[&](){(result.maxTaskPayloadAndSharedMemorySize)=reader.getmaxTaskPayloadAndSharedMemorySize();}();
[&](){(result.maxMeshWorkGroupTotalCount)=reader.getmaxMeshWorkGroupTotalCount();}();
[&](){
        auto proto_arr=reader.getmaxMeshWorkGroupCount(3);
        for(int ZnMehla=0; ZnMehla < 3; ZnMehla++){
            [&](){((result.maxMeshWorkGroupCount)[ZnMehla])=proto_arr[ZnMehla];}();
        }
        }();
[&](){(result.maxMeshWorkGroupInvocations)=reader.getmaxMeshWorkGroupInvocations();}();
[&](){
        auto proto_arr=reader.getmaxMeshWorkGroupSize(3);
        for(int FHeKNFR=0; FHeKNFR < 3; FHeKNFR++){
            [&](){((result.maxMeshWorkGroupSize)[FHeKNFR])=proto_arr[FHeKNFR];}();
        }
        }();
[&](){(result.maxMeshSharedMemorySize)=reader.getmaxMeshSharedMemorySize();}();
[&](){(result.maxMeshPayloadAndSharedMemorySize)=reader.getmaxMeshPayloadAndSharedMemorySize();}();
[&](){(result.maxMeshOutputMemorySize)=reader.getmaxMeshOutputMemorySize();}();
[&](){(result.maxMeshPayloadAndOutputMemorySize)=reader.getmaxMeshPayloadAndOutputMemorySize();}();
[&](){(result.maxMeshOutputComponents)=reader.getmaxMeshOutputComponents();}();
[&](){(result.maxMeshOutputVertices)=reader.getmaxMeshOutputVertices();}();
[&](){(result.maxMeshOutputPrimitives)=reader.getmaxMeshOutputPrimitives();}();
[&](){(result.maxMeshOutputLayers)=reader.getmaxMeshOutputLayers();}();
[&](){(result.maxMeshMultiviewViewCount)=reader.getmaxMeshMultiviewViewCount();}();
[&](){(result.meshOutputPerVertexGranularity)=reader.getmeshOutputPerVertexGranularity();}();
[&](){(result.meshOutputPerPrimitiveGranularity)=reader.getmeshOutputPerPrimitiveGranularity();}();
[&](){(result.maxPreferredTaskWorkGroupInvocations)=reader.getmaxPreferredTaskWorkGroupInvocations();}();
[&](){(result.maxPreferredMeshWorkGroupInvocations)=reader.getmaxPreferredMeshWorkGroupInvocations();}();
[&](){[&](){(result.prefersLocalInvocationVertexOutput)=reader.getprefersLocalInvocationVertexOutput();}();}();
[&](){[&](){(result.prefersLocalInvocationPrimitiveOutput)=reader.getprefersLocalInvocationPrimitiveOutput();}();}();
[&](){[&](){(result.prefersCompactVertexOutput)=reader.getprefersCompactVertexOutput();}();}();
[&](){[&](){(result.prefersCompactPrimitiveOutput)=reader.getprefersCompactPrimitiveOutput();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceMeshShaderPropertiesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceMeshShaderPropertiesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDrawMeshTasksIndirectCommandEXT::Builder& builder, VkDrawMeshTasksIndirectCommandEXT member){
        
    
[&](){return builder.setgroupCountX((member.groupCountX));}();
[&](){return builder.setgroupCountY((member.groupCountY));}();
[&](){return builder.setgroupCountZ((member.groupCountZ));}();
}

    VkDrawMeshTasksIndirectCommandEXT deserialize_struct(VkDrawMeshTasksIndirectCommandEXT::Reader reader){
        auto result=VkDrawMeshTasksIndirectCommandEXT();
    
[&](){(result.groupCountX)=reader.getgroupCountX();}();
[&](){(result.groupCountY)=reader.getgroupCountY();}();
[&](){(result.groupCountZ)=reader.getgroupCountZ();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDrawMeshTasksIndirectCommandEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDrawMeshTasksIndirectCommandEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkRayTracingShaderGroupCreateInfoNV::Builder& builder, VkRayTracingShaderGroupCreateInfoNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.settype((member.type));}();}();}();
[&](){return builder.setgeneralShader((member.generalShader));}();
[&](){return builder.setclosestHitShader((member.closestHitShader));}();
[&](){return builder.setanyHitShader((member.anyHitShader));}();
[&](){return builder.setintersectionShader((member.intersectionShader));}();
}

    VkRayTracingShaderGroupCreateInfoNV deserialize_struct(VkRayTracingShaderGroupCreateInfoNV::Reader reader){
        auto result=VkRayTracingShaderGroupCreateInfoNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.type)=reader.gettype();}();}();}();
[&](){(result.generalShader)=reader.getgeneralShader();}();
[&](){(result.closestHitShader)=reader.getclosestHitShader();}();
[&](){(result.anyHitShader)=reader.getanyHitShader();}();
[&](){(result.intersectionShader)=reader.getintersectionShader();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkRayTracingShaderGroupCreateInfoNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkRayTracingShaderGroupCreateInfoNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkRayTracingShaderGroupCreateInfoKHR::Builder& builder, VkRayTracingShaderGroupCreateInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.settype((member.type));}();}();}();
[&](){return builder.setgeneralShader((member.generalShader));}();
[&](){return builder.setclosestHitShader((member.closestHitShader));}();
[&](){return builder.setanyHitShader((member.anyHitShader));}();
[&](){return builder.setintersectionShader((member.intersectionShader));}();
[&](){
            if ((member.pShaderGroupCaptureReplayHandle)==NULL){
                builder.disownpShaderGroupCaptureReplayHandle();
            return; }[&](){
            if (((char*)(member.pShaderGroupCaptureReplayHandle).pShaderGroupCaptureReplayHandle)==NULL){
                builder.disownpShaderGroupCaptureReplayHandle();
            return; }
        auto proto_arr=builder.initpShaderGroupCaptureReplayHandle();
        for(int vaFpFFZ=0; vaFpFFZ < strlen(((char*)(member.pShaderGroupCaptureReplayHandle).pShaderGroupCaptureReplayHandle))+1; vaFpFFZ++){
            [&](){return proto_arr.set(vaFpFFZ,(((char*)(member.pShaderGroupCaptureReplayHandle).pShaderGroupCaptureReplayHandle)[vaFpFFZ]));}();
        }
        }();}();
}

    VkRayTracingShaderGroupCreateInfoKHR deserialize_struct(VkRayTracingShaderGroupCreateInfoKHR::Reader reader){
        auto result=VkRayTracingShaderGroupCreateInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.type)=reader.gettype();}();}();}();
[&](){(result.generalShader)=reader.getgeneralShader();}();
[&](){(result.closestHitShader)=reader.getclosestHitShader();}();
[&](){(result.anyHitShader)=reader.getanyHitShader();}();
[&](){(result.intersectionShader)=reader.getintersectionShader();}();
[&](){ void* temp_lEgunrI[&](){
            if (!reader.haspShaderGroupCaptureReplayHandle()){
                (result.pShaderGroupCaptureReplayHandle)=NULL;
            return; }char* temp_qcvhJvn;[&](){
            if (!reader.haspShaderGroupCaptureReplayHandle()){
                (temp_qcvhJvn.pShaderGroupCaptureReplayHandle)=NULL;
            return; }{native_concat()}=(char*)malloc(reader.getpShaderGroupCaptureReplayHandle().size();*sizeof(char));
        auto proto_arr=reader.getpShaderGroupCaptureReplayHandle(reader.getpShaderGroupCaptureReplayHandle().size(););
        for(int aGsUsXt=0; aGsUsXt < reader.getpShaderGroupCaptureReplayHandle().size();; aGsUsXt++){
            [&](){((temp_qcvhJvn.pShaderGroupCaptureReplayHandle)[aGsUsXt])=proto_arr[aGsUsXt];}();
        }
        }();(result.pShaderGroupCaptureReplayHandle)=temp_qcvhJvn;}();(result.pShaderGroupCaptureReplayHandle)=temp_lEgunrI;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkRayTracingShaderGroupCreateInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkRayTracingShaderGroupCreateInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkRayTracingPipelineCreateInfoNV::Builder& builder, VkRayTracingPipelineCreateInfoNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){return builder.setstageCount((member.stageCount));}();
[&](){
            if ((member.pStages)==NULL){
                builder.disownpStages();
            return; }
        auto proto_arr=builder.initpStages();
        for(int jHuRulk=0; jHuRulk < member.stageCount; jHuRulk++){
            [&](){
            auto temp=proto_arr[jHuRulk];
            return serialize_struct(((member.pStages)[jHuRulk]), temp);
            }();
        }
        }();
[&](){return builder.setgroupCount((member.groupCount));}();
[&](){
            if ((member.pGroups)==NULL){
                builder.disownpGroups();
            return; }
        auto proto_arr=builder.initpGroups();
        for(int PfCnxjX=0; PfCnxjX < member.groupCount; PfCnxjX++){
            [&](){
            auto temp=proto_arr[PfCnxjX];
            return serialize_struct(((member.pGroups)[PfCnxjX]), temp);
            }();
        }
        }();
[&](){return builder.setmaxRecursionDepth((member.maxRecursionDepth));}();
[&](){return builder.setlayout(serialize_handle(member.layout));}();
[&](){return builder.setbasePipelineHandle(serialize_handle(member.basePipelineHandle));}();
[&](){return builder.setbasePipelineIndex((member.basePipelineIndex));}();
}

    VkRayTracingPipelineCreateInfoNV deserialize_struct(VkRayTracingPipelineCreateInfoNV::Reader reader){
        auto result=VkRayTracingPipelineCreateInfoNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){(result.stageCount)=reader.getstageCount();}();
[&](){ VkPipelineShaderStageCreateInfo* temp_FsQxpon[&](){
            if (!reader.haspStages()){
                (result.pStages)=NULL;
            return; }{native_concat()}=(VkPipelineShaderStageCreateInfo*)malloc(result.stageCount*sizeof(VkPipelineShaderStageCreateInfo));
        auto proto_arr=reader.getpStages(result.stageCount);
        for(int XttzcgZ=0; XttzcgZ < result.stageCount; XttzcgZ++){
            [&](){
            auto temp=proto_arr[XttzcgZ];
            ((result.pStages)[XttzcgZ])=deserialize_struct(temp);
            }();
        }
        }();(result.pStages)=temp_FsQxpon;}();
[&](){(result.groupCount)=reader.getgroupCount();}();
[&](){ VkRayTracingShaderGroupCreateInfoNV* temp_jFtlmol[&](){
            if (!reader.haspGroups()){
                (result.pGroups)=NULL;
            return; }{native_concat()}=(VkRayTracingShaderGroupCreateInfoNV*)malloc(result.groupCount*sizeof(VkRayTracingShaderGroupCreateInfoNV));
        auto proto_arr=reader.getpGroups(result.groupCount);
        for(int gtOdutD=0; gtOdutD < result.groupCount; gtOdutD++){
            [&](){
            auto temp=proto_arr[gtOdutD];
            ((result.pGroups)[gtOdutD])=deserialize_struct(temp);
            }();
        }
        }();(result.pGroups)=temp_jFtlmol;}();
[&](){(result.maxRecursionDepth)=reader.getmaxRecursionDepth();}();
[&](){(result.layout)=deserialize_handle(reader.getlayout());}();
[&](){(result.basePipelineHandle)=deserialize_handle(reader.getbasePipelineHandle());}();
[&](){(result.basePipelineIndex)=reader.getbasePipelineIndex();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkRayTracingPipelineCreateInfoNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkRayTracingPipelineCreateInfoNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkRayTracingPipelineCreateInfoKHR::Builder& builder, VkRayTracingPipelineCreateInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){return builder.setstageCount((member.stageCount));}();
[&](){
            if ((member.pStages)==NULL){
                builder.disownpStages();
            return; }
        auto proto_arr=builder.initpStages();
        for(int jHuRulk=0; jHuRulk < member.stageCount; jHuRulk++){
            [&](){
            auto temp=proto_arr[jHuRulk];
            return serialize_struct(((member.pStages)[jHuRulk]), temp);
            }();
        }
        }();
[&](){return builder.setgroupCount((member.groupCount));}();
[&](){
            if ((member.pGroups)==NULL){
                builder.disownpGroups();
            return; }
        auto proto_arr=builder.initpGroups();
        for(int zJRUzRJ=0; zJRUzRJ < member.groupCount; zJRUzRJ++){
            [&](){
            auto temp=proto_arr[zJRUzRJ];
            return serialize_struct(((member.pGroups)[zJRUzRJ]), temp);
            }();
        }
        }();
[&](){return builder.setmaxPipelineRayRecursionDepth((member.maxPipelineRayRecursionDepth));}();
[&](){
            if ((member.pLibraryInfo)==NULL){
                builder.disownpLibraryInfo();
            return; }
        auto proto_arr=builder.initpLibraryInfo();
        for(int DdrfJLf=0; DdrfJLf < 1; DdrfJLf++){
            [&](){
            auto temp=proto_arr[DdrfJLf];
            return serialize_struct(((member.pLibraryInfo)[DdrfJLf]), temp);
            }();
        }
        }();
[&](){
            if ((member.pLibraryInterface)==NULL){
                builder.disownpLibraryInterface();
            return; }
        auto proto_arr=builder.initpLibraryInterface();
        for(int mKbYlgK=0; mKbYlgK < 1; mKbYlgK++){
            [&](){
            auto temp=proto_arr[mKbYlgK];
            return serialize_struct(((member.pLibraryInterface)[mKbYlgK]), temp);
            }();
        }
        }();
[&](){
            if ((member.pDynamicState)==NULL){
                builder.disownpDynamicState();
            return; }
        auto proto_arr=builder.initpDynamicState();
        for(int UhXMcnS=0; UhXMcnS < 1; UhXMcnS++){
            [&](){
            auto temp=proto_arr[UhXMcnS];
            return serialize_struct(((member.pDynamicState)[UhXMcnS]), temp);
            }();
        }
        }();
[&](){return builder.setlayout(serialize_handle(member.layout));}();
[&](){return builder.setbasePipelineHandle(serialize_handle(member.basePipelineHandle));}();
[&](){return builder.setbasePipelineIndex((member.basePipelineIndex));}();
}

    VkRayTracingPipelineCreateInfoKHR deserialize_struct(VkRayTracingPipelineCreateInfoKHR::Reader reader){
        auto result=VkRayTracingPipelineCreateInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){(result.stageCount)=reader.getstageCount();}();
[&](){ VkPipelineShaderStageCreateInfo* temp_FsQxpon[&](){
            if (!reader.haspStages()){
                (result.pStages)=NULL;
            return; }{native_concat()}=(VkPipelineShaderStageCreateInfo*)malloc(result.stageCount*sizeof(VkPipelineShaderStageCreateInfo));
        auto proto_arr=reader.getpStages(result.stageCount);
        for(int XttzcgZ=0; XttzcgZ < result.stageCount; XttzcgZ++){
            [&](){
            auto temp=proto_arr[XttzcgZ];
            ((result.pStages)[XttzcgZ])=deserialize_struct(temp);
            }();
        }
        }();(result.pStages)=temp_FsQxpon;}();
[&](){(result.groupCount)=reader.getgroupCount();}();
[&](){ VkRayTracingShaderGroupCreateInfoKHR* temp_SQVJuSU[&](){
            if (!reader.haspGroups()){
                (result.pGroups)=NULL;
            return; }{native_concat()}=(VkRayTracingShaderGroupCreateInfoKHR*)malloc(result.groupCount*sizeof(VkRayTracingShaderGroupCreateInfoKHR));
        auto proto_arr=reader.getpGroups(result.groupCount);
        for(int MsMuUIr=0; MsMuUIr < result.groupCount; MsMuUIr++){
            [&](){
            auto temp=proto_arr[MsMuUIr];
            ((result.pGroups)[MsMuUIr])=deserialize_struct(temp);
            }();
        }
        }();(result.pGroups)=temp_SQVJuSU;}();
[&](){(result.maxPipelineRayRecursionDepth)=reader.getmaxPipelineRayRecursionDepth();}();
[&](){ VkPipelineLibraryCreateInfoKHR* temp_eGVDWeB[&](){
            if (!reader.haspLibraryInfo()){
                (result.pLibraryInfo)=NULL;
            return; }{native_concat()}=(VkPipelineLibraryCreateInfoKHR*)malloc(1*sizeof(VkPipelineLibraryCreateInfoKHR));
        auto proto_arr=reader.getpLibraryInfo(1);
        for(int QEKAhqX=0; QEKAhqX < 1; QEKAhqX++){
            [&](){
            auto temp=proto_arr[QEKAhqX];
            ((result.pLibraryInfo)[QEKAhqX])=deserialize_struct(temp);
            }();
        }
        }();(result.pLibraryInfo)=temp_eGVDWeB;}();
[&](){ VkRayTracingPipelineInterfaceCreateInfoKHR* temp_PFNRuCj[&](){
            if (!reader.haspLibraryInterface()){
                (result.pLibraryInterface)=NULL;
            return; }{native_concat()}=(VkRayTracingPipelineInterfaceCreateInfoKHR*)malloc(1*sizeof(VkRayTracingPipelineInterfaceCreateInfoKHR));
        auto proto_arr=reader.getpLibraryInterface(1);
        for(int NuMUcpj=0; NuMUcpj < 1; NuMUcpj++){
            [&](){
            auto temp=proto_arr[NuMUcpj];
            ((result.pLibraryInterface)[NuMUcpj])=deserialize_struct(temp);
            }();
        }
        }();(result.pLibraryInterface)=temp_PFNRuCj;}();
[&](){ VkPipelineDynamicStateCreateInfo* temp_aXXcKaH[&](){
            if (!reader.haspDynamicState()){
                (result.pDynamicState)=NULL;
            return; }{native_concat()}=(VkPipelineDynamicStateCreateInfo*)malloc(1*sizeof(VkPipelineDynamicStateCreateInfo));
        auto proto_arr=reader.getpDynamicState(1);
        for(int tTovUVg=0; tTovUVg < 1; tTovUVg++){
            [&](){
            auto temp=proto_arr[tTovUVg];
            ((result.pDynamicState)[tTovUVg])=deserialize_struct(temp);
            }();
        }
        }();(result.pDynamicState)=temp_aXXcKaH;}();
[&](){(result.layout)=deserialize_handle(reader.getlayout());}();
[&](){(result.basePipelineHandle)=deserialize_handle(reader.getbasePipelineHandle());}();
[&](){(result.basePipelineIndex)=reader.getbasePipelineIndex();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkRayTracingPipelineCreateInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkRayTracingPipelineCreateInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkGeometryTrianglesNV::Builder& builder, VkGeometryTrianglesNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setvertexData(serialize_handle(member.vertexData));}();
[&](){[&](){return builder.setvertexOffset((member.vertexOffset));}();}();
[&](){return builder.setvertexCount((member.vertexCount));}();
[&](){[&](){return builder.setvertexStride((member.vertexStride));}();}();
[&](){[&](){[&](){return builder.setvertexFormat((member.vertexFormat));}();}();}();
[&](){return builder.setindexData(serialize_handle(member.indexData));}();
[&](){[&](){return builder.setindexOffset((member.indexOffset));}();}();
[&](){return builder.setindexCount((member.indexCount));}();
[&](){[&](){[&](){return builder.setindexType((member.indexType));}();}();}();
[&](){return builder.settransformData(serialize_handle(member.transformData));}();
[&](){[&](){return builder.settransformOffset((member.transformOffset));}();}();
}

    VkGeometryTrianglesNV deserialize_struct(VkGeometryTrianglesNV::Reader reader){
        auto result=VkGeometryTrianglesNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.vertexData)=deserialize_handle(reader.getvertexData());}();
[&](){[&](){(result.vertexOffset)=reader.getvertexOffset();}();}();
[&](){(result.vertexCount)=reader.getvertexCount();}();
[&](){[&](){(result.vertexStride)=reader.getvertexStride();}();}();
[&](){[&](){[&](){(result.vertexFormat)=reader.getvertexFormat();}();}();}();
[&](){(result.indexData)=deserialize_handle(reader.getindexData());}();
[&](){[&](){(result.indexOffset)=reader.getindexOffset();}();}();
[&](){(result.indexCount)=reader.getindexCount();}();
[&](){[&](){[&](){(result.indexType)=reader.getindexType();}();}();}();
[&](){(result.transformData)=deserialize_handle(reader.gettransformData());}();
[&](){[&](){(result.transformOffset)=reader.gettransformOffset();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkGeometryTrianglesNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkGeometryTrianglesNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkGeometryAABBNV::Builder& builder, VkGeometryAABBNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setaabbData(serialize_handle(member.aabbData));}();
[&](){return builder.setnumAABBs((member.numAABBs));}();
[&](){return builder.setstride((member.stride));}();
[&](){[&](){return builder.setoffset((member.offset));}();}();
}

    VkGeometryAABBNV deserialize_struct(VkGeometryAABBNV::Reader reader){
        auto result=VkGeometryAABBNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.aabbData)=deserialize_handle(reader.getaabbData());}();
[&](){(result.numAABBs)=reader.getnumAABBs();}();
[&](){(result.stride)=reader.getstride();}();
[&](){[&](){(result.offset)=reader.getoffset();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkGeometryAABBNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkGeometryAABBNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkGeometryDataNV::Builder& builder, VkGeometryDataNV member){
        
    
[&](){
            auto temp=builder.inittriangles(triangles);
            return serialize_struct((member.triangles), temp);
            }();
[&](){
            auto temp=builder.initaabbs(aabbs);
            return serialize_struct((member.aabbs), temp);
            }();
}

    VkGeometryDataNV deserialize_struct(VkGeometryDataNV::Reader reader){
        auto result=VkGeometryDataNV();
    
[&](){
            auto temp=reader.gettriangles();
            (result.triangles)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getaabbs();
            (result.aabbs)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkGeometryDataNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkGeometryDataNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkGeometryNV::Builder& builder, VkGeometryNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setgeometryType((member.geometryType));}();}();}();
[&](){
            auto temp=builder.initgeometry(geometry);
            return serialize_struct((member.geometry), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
}

    VkGeometryNV deserialize_struct(VkGeometryNV::Reader reader){
        auto result=VkGeometryNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.geometryType)=reader.getgeometryType();}();}();}();
[&](){
            auto temp=reader.getgeometry();
            (result.geometry)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkGeometryNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkGeometryNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkAccelerationStructureInfoNV::Builder& builder, VkAccelerationStructureInfoNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.settype((member.type));}();}();}();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){return builder.setinstanceCount((member.instanceCount));}();
[&](){return builder.setgeometryCount((member.geometryCount));}();
[&](){
            if ((member.pGeometries)==NULL){
                builder.disownpGeometries();
            return; }
        auto proto_arr=builder.initpGeometries();
        for(int qVtknfQ=0; qVtknfQ < member.geometryCount; qVtknfQ++){
            [&](){
            auto temp=proto_arr[qVtknfQ];
            return serialize_struct(((member.pGeometries)[qVtknfQ]), temp);
            }();
        }
        }();
}

    VkAccelerationStructureInfoNV deserialize_struct(VkAccelerationStructureInfoNV::Reader reader){
        auto result=VkAccelerationStructureInfoNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.type)=reader.gettype();}();}();}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){(result.instanceCount)=reader.getinstanceCount();}();
[&](){(result.geometryCount)=reader.getgeometryCount();}();
[&](){ VkGeometryNV* temp_MuazCQD[&](){
            if (!reader.haspGeometries()){
                (result.pGeometries)=NULL;
            return; }{native_concat()}=(VkGeometryNV*)malloc(result.geometryCount*sizeof(VkGeometryNV));
        auto proto_arr=reader.getpGeometries(result.geometryCount);
        for(int TTzXkkB=0; TTzXkkB < result.geometryCount; TTzXkkB++){
            [&](){
            auto temp=proto_arr[TTzXkkB];
            ((result.pGeometries)[TTzXkkB])=deserialize_struct(temp);
            }();
        }
        }();(result.pGeometries)=temp_MuazCQD;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkAccelerationStructureInfoNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkAccelerationStructureInfoNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkAccelerationStructureCreateInfoNV::Builder& builder, VkAccelerationStructureCreateInfoNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setcompactedSize((member.compactedSize));}();}();
[&](){
            auto temp=builder.initinfo(info);
            return serialize_struct((member.info), temp);
            }();
}

    VkAccelerationStructureCreateInfoNV deserialize_struct(VkAccelerationStructureCreateInfoNV::Reader reader){
        auto result=VkAccelerationStructureCreateInfoNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){(result.compactedSize)=reader.getcompactedSize();}();}();
[&](){
            auto temp=reader.getinfo();
            (result.info)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkAccelerationStructureCreateInfoNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkAccelerationStructureCreateInfoNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkBindAccelerationStructureMemoryInfoNV::Builder& builder, VkBindAccelerationStructureMemoryInfoNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setaccelerationStructure(serialize_handle(member.accelerationStructure));}();
[&](){return builder.setmemory(serialize_handle(member.memory));}();
[&](){[&](){return builder.setmemoryOffset((member.memoryOffset));}();}();
[&](){return builder.setdeviceIndexCount((member.deviceIndexCount));}();
[&](){
            if ((member.pDeviceIndices)==NULL){
                builder.disownpDeviceIndices();
            return; }
        auto proto_arr=builder.initpDeviceIndices();
        for(int lNKjpBY=0; lNKjpBY < member.deviceIndexCount; lNKjpBY++){
            [&](){return proto_arr.set(lNKjpBY,((member.pDeviceIndices)[lNKjpBY]));}();
        }
        }();
}

    VkBindAccelerationStructureMemoryInfoNV deserialize_struct(VkBindAccelerationStructureMemoryInfoNV::Reader reader){
        auto result=VkBindAccelerationStructureMemoryInfoNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.accelerationStructure)=deserialize_handle(reader.getaccelerationStructure());}();
[&](){(result.memory)=deserialize_handle(reader.getmemory());}();
[&](){[&](){(result.memoryOffset)=reader.getmemoryOffset();}();}();
[&](){(result.deviceIndexCount)=reader.getdeviceIndexCount();}();
[&](){ uint32_t* temp_chbZwCP[&](){
            if (!reader.haspDeviceIndices()){
                (result.pDeviceIndices)=NULL;
            return; }{native_concat()}=(uint32_t*)malloc(result.deviceIndexCount*sizeof(uint32_t));
        auto proto_arr=reader.getpDeviceIndices(result.deviceIndexCount);
        for(int CQTEfmn=0; CQTEfmn < result.deviceIndexCount; CQTEfmn++){
            [&](){((result.pDeviceIndices)[CQTEfmn])=proto_arr[CQTEfmn];}();
        }
        }();(result.pDeviceIndices)=temp_chbZwCP;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkBindAccelerationStructureMemoryInfoNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkBindAccelerationStructureMemoryInfoNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkWriteDescriptorSetAccelerationStructureKHR::Builder& builder, VkWriteDescriptorSetAccelerationStructureKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setaccelerationStructureCount((member.accelerationStructureCount));}();
[&](){
            if ((member.pAccelerationStructures)==NULL){
                builder.disownpAccelerationStructures();
            return; }
        auto proto_arr=builder.initpAccelerationStructures();
        for(int lMRNMMP=0; lMRNMMP < member.accelerationStructureCount; lMRNMMP++){
            [&](){return proto_arr.set(lMRNMMP,serialize_handle((member.pAccelerationStructures)[lMRNMMP]));}();
        }
        }();
}

    VkWriteDescriptorSetAccelerationStructureKHR deserialize_struct(VkWriteDescriptorSetAccelerationStructureKHR::Reader reader){
        auto result=VkWriteDescriptorSetAccelerationStructureKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.accelerationStructureCount)=reader.getaccelerationStructureCount();}();
[&](){ VkAccelerationStructureKHR* temp_BpvvoAe[&](){
            if (!reader.haspAccelerationStructures()){
                (result.pAccelerationStructures)=NULL;
            return; }{native_concat()}=(VkAccelerationStructureKHR*)malloc(result.accelerationStructureCount*sizeof(VkAccelerationStructureKHR));
        auto proto_arr=reader.getpAccelerationStructures(result.accelerationStructureCount);
        for(int YTGbDyo=0; YTGbDyo < result.accelerationStructureCount; YTGbDyo++){
            [&](){((result.pAccelerationStructures)[YTGbDyo])=deserialize_handle(proto_arr[YTGbDyo]);}();
        }
        }();(result.pAccelerationStructures)=temp_BpvvoAe;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkWriteDescriptorSetAccelerationStructureKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkWriteDescriptorSetAccelerationStructureKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkWriteDescriptorSetAccelerationStructureNV::Builder& builder, VkWriteDescriptorSetAccelerationStructureNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setaccelerationStructureCount((member.accelerationStructureCount));}();
[&](){
            if ((member.pAccelerationStructures)==NULL){
                builder.disownpAccelerationStructures();
            return; }
        auto proto_arr=builder.initpAccelerationStructures();
        for(int BJXIzdF=0; BJXIzdF < member.accelerationStructureCount; BJXIzdF++){
            [&](){return proto_arr.set(BJXIzdF,serialize_handle((member.pAccelerationStructures)[BJXIzdF]));}();
        }
        }();
}

    VkWriteDescriptorSetAccelerationStructureNV deserialize_struct(VkWriteDescriptorSetAccelerationStructureNV::Reader reader){
        auto result=VkWriteDescriptorSetAccelerationStructureNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.accelerationStructureCount)=reader.getaccelerationStructureCount();}();
[&](){ VkAccelerationStructureNV* temp_iPYWuqu[&](){
            if (!reader.haspAccelerationStructures()){
                (result.pAccelerationStructures)=NULL;
            return; }{native_concat()}=(VkAccelerationStructureNV*)malloc(result.accelerationStructureCount*sizeof(VkAccelerationStructureNV));
        auto proto_arr=reader.getpAccelerationStructures(result.accelerationStructureCount);
        for(int AvXgXgJ=0; AvXgXgJ < result.accelerationStructureCount; AvXgXgJ++){
            [&](){((result.pAccelerationStructures)[AvXgXgJ])=deserialize_handle(proto_arr[AvXgXgJ]);}();
        }
        }();(result.pAccelerationStructures)=temp_iPYWuqu;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkWriteDescriptorSetAccelerationStructureNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkWriteDescriptorSetAccelerationStructureNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkAccelerationStructureMemoryRequirementsInfoNV::Builder& builder, VkAccelerationStructureMemoryRequirementsInfoNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.settype((member.type));}();}();}();
[&](){return builder.setaccelerationStructure(serialize_handle(member.accelerationStructure));}();
}

    VkAccelerationStructureMemoryRequirementsInfoNV deserialize_struct(VkAccelerationStructureMemoryRequirementsInfoNV::Reader reader){
        auto result=VkAccelerationStructureMemoryRequirementsInfoNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.type)=reader.gettype();}();}();}();
[&](){(result.accelerationStructure)=deserialize_handle(reader.getaccelerationStructure());}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkAccelerationStructureMemoryRequirementsInfoNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkAccelerationStructureMemoryRequirementsInfoNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceAccelerationStructureFeaturesKHR::Builder& builder, VkPhysicalDeviceAccelerationStructureFeaturesKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setaccelerationStructure((member.accelerationStructure));}();}();
[&](){[&](){return builder.setaccelerationStructureCaptureReplay((member.accelerationStructureCaptureReplay));}();}();
[&](){[&](){return builder.setaccelerationStructureIndirectBuild((member.accelerationStructureIndirectBuild));}();}();
[&](){[&](){return builder.setaccelerationStructureHostCommands((member.accelerationStructureHostCommands));}();}();
[&](){[&](){return builder.setdescriptorBindingAccelerationStructureUpdateAfterBind((member.descriptorBindingAccelerationStructureUpdateAfterBind));}();}();
}

    VkPhysicalDeviceAccelerationStructureFeaturesKHR deserialize_struct(VkPhysicalDeviceAccelerationStructureFeaturesKHR::Reader reader){
        auto result=VkPhysicalDeviceAccelerationStructureFeaturesKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.accelerationStructure)=reader.getaccelerationStructure();}();}();
[&](){[&](){(result.accelerationStructureCaptureReplay)=reader.getaccelerationStructureCaptureReplay();}();}();
[&](){[&](){(result.accelerationStructureIndirectBuild)=reader.getaccelerationStructureIndirectBuild();}();}();
[&](){[&](){(result.accelerationStructureHostCommands)=reader.getaccelerationStructureHostCommands();}();}();
[&](){[&](){(result.descriptorBindingAccelerationStructureUpdateAfterBind)=reader.getdescriptorBindingAccelerationStructureUpdateAfterBind();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceAccelerationStructureFeaturesKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceAccelerationStructureFeaturesKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceRayTracingPipelineFeaturesKHR::Builder& builder, VkPhysicalDeviceRayTracingPipelineFeaturesKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setrayTracingPipeline((member.rayTracingPipeline));}();}();
[&](){[&](){return builder.setrayTracingPipelineShaderGroupHandleCaptureReplay((member.rayTracingPipelineShaderGroupHandleCaptureReplay));}();}();
[&](){[&](){return builder.setrayTracingPipelineShaderGroupHandleCaptureReplayMixed((member.rayTracingPipelineShaderGroupHandleCaptureReplayMixed));}();}();
[&](){[&](){return builder.setrayTracingPipelineTraceRaysIndirect((member.rayTracingPipelineTraceRaysIndirect));}();}();
[&](){[&](){return builder.setrayTraversalPrimitiveCulling((member.rayTraversalPrimitiveCulling));}();}();
}

    VkPhysicalDeviceRayTracingPipelineFeaturesKHR deserialize_struct(VkPhysicalDeviceRayTracingPipelineFeaturesKHR::Reader reader){
        auto result=VkPhysicalDeviceRayTracingPipelineFeaturesKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.rayTracingPipeline)=reader.getrayTracingPipeline();}();}();
[&](){[&](){(result.rayTracingPipelineShaderGroupHandleCaptureReplay)=reader.getrayTracingPipelineShaderGroupHandleCaptureReplay();}();}();
[&](){[&](){(result.rayTracingPipelineShaderGroupHandleCaptureReplayMixed)=reader.getrayTracingPipelineShaderGroupHandleCaptureReplayMixed();}();}();
[&](){[&](){(result.rayTracingPipelineTraceRaysIndirect)=reader.getrayTracingPipelineTraceRaysIndirect();}();}();
[&](){[&](){(result.rayTraversalPrimitiveCulling)=reader.getrayTraversalPrimitiveCulling();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceRayTracingPipelineFeaturesKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceRayTracingPipelineFeaturesKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceRayQueryFeaturesKHR::Builder& builder, VkPhysicalDeviceRayQueryFeaturesKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setrayQuery((member.rayQuery));}();}();
}

    VkPhysicalDeviceRayQueryFeaturesKHR deserialize_struct(VkPhysicalDeviceRayQueryFeaturesKHR::Reader reader){
        auto result=VkPhysicalDeviceRayQueryFeaturesKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.rayQuery)=reader.getrayQuery();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceRayQueryFeaturesKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceRayQueryFeaturesKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceAccelerationStructurePropertiesKHR::Builder& builder, VkPhysicalDeviceAccelerationStructurePropertiesKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setmaxGeometryCount((member.maxGeometryCount));}();
[&](){return builder.setmaxInstanceCount((member.maxInstanceCount));}();
[&](){return builder.setmaxPrimitiveCount((member.maxPrimitiveCount));}();
[&](){return builder.setmaxPerStageDescriptorAccelerationStructures((member.maxPerStageDescriptorAccelerationStructures));}();
[&](){return builder.setmaxPerStageDescriptorUpdateAfterBindAccelerationStructures((member.maxPerStageDescriptorUpdateAfterBindAccelerationStructures));}();
[&](){return builder.setmaxDescriptorSetAccelerationStructures((member.maxDescriptorSetAccelerationStructures));}();
[&](){return builder.setmaxDescriptorSetUpdateAfterBindAccelerationStructures((member.maxDescriptorSetUpdateAfterBindAccelerationStructures));}();
[&](){return builder.setminAccelerationStructureScratchOffsetAlignment((member.minAccelerationStructureScratchOffsetAlignment));}();
}

    VkPhysicalDeviceAccelerationStructurePropertiesKHR deserialize_struct(VkPhysicalDeviceAccelerationStructurePropertiesKHR::Reader reader){
        auto result=VkPhysicalDeviceAccelerationStructurePropertiesKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.maxGeometryCount)=reader.getmaxGeometryCount();}();
[&](){(result.maxInstanceCount)=reader.getmaxInstanceCount();}();
[&](){(result.maxPrimitiveCount)=reader.getmaxPrimitiveCount();}();
[&](){(result.maxPerStageDescriptorAccelerationStructures)=reader.getmaxPerStageDescriptorAccelerationStructures();}();
[&](){(result.maxPerStageDescriptorUpdateAfterBindAccelerationStructures)=reader.getmaxPerStageDescriptorUpdateAfterBindAccelerationStructures();}();
[&](){(result.maxDescriptorSetAccelerationStructures)=reader.getmaxDescriptorSetAccelerationStructures();}();
[&](){(result.maxDescriptorSetUpdateAfterBindAccelerationStructures)=reader.getmaxDescriptorSetUpdateAfterBindAccelerationStructures();}();
[&](){(result.minAccelerationStructureScratchOffsetAlignment)=reader.getminAccelerationStructureScratchOffsetAlignment();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceAccelerationStructurePropertiesKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceAccelerationStructurePropertiesKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceRayTracingPipelinePropertiesKHR::Builder& builder, VkPhysicalDeviceRayTracingPipelinePropertiesKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setshaderGroupHandleSize((member.shaderGroupHandleSize));}();
[&](){return builder.setmaxRayRecursionDepth((member.maxRayRecursionDepth));}();
[&](){return builder.setmaxShaderGroupStride((member.maxShaderGroupStride));}();
[&](){return builder.setshaderGroupBaseAlignment((member.shaderGroupBaseAlignment));}();
[&](){return builder.setshaderGroupHandleCaptureReplaySize((member.shaderGroupHandleCaptureReplaySize));}();
[&](){return builder.setmaxRayDispatchInvocationCount((member.maxRayDispatchInvocationCount));}();
[&](){return builder.setshaderGroupHandleAlignment((member.shaderGroupHandleAlignment));}();
[&](){return builder.setmaxRayHitAttributeSize((member.maxRayHitAttributeSize));}();
}

    VkPhysicalDeviceRayTracingPipelinePropertiesKHR deserialize_struct(VkPhysicalDeviceRayTracingPipelinePropertiesKHR::Reader reader){
        auto result=VkPhysicalDeviceRayTracingPipelinePropertiesKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.shaderGroupHandleSize)=reader.getshaderGroupHandleSize();}();
[&](){(result.maxRayRecursionDepth)=reader.getmaxRayRecursionDepth();}();
[&](){(result.maxShaderGroupStride)=reader.getmaxShaderGroupStride();}();
[&](){(result.shaderGroupBaseAlignment)=reader.getshaderGroupBaseAlignment();}();
[&](){(result.shaderGroupHandleCaptureReplaySize)=reader.getshaderGroupHandleCaptureReplaySize();}();
[&](){(result.maxRayDispatchInvocationCount)=reader.getmaxRayDispatchInvocationCount();}();
[&](){(result.shaderGroupHandleAlignment)=reader.getshaderGroupHandleAlignment();}();
[&](){(result.maxRayHitAttributeSize)=reader.getmaxRayHitAttributeSize();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceRayTracingPipelinePropertiesKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceRayTracingPipelinePropertiesKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceRayTracingPropertiesNV::Builder& builder, VkPhysicalDeviceRayTracingPropertiesNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setshaderGroupHandleSize((member.shaderGroupHandleSize));}();
[&](){return builder.setmaxRecursionDepth((member.maxRecursionDepth));}();
[&](){return builder.setmaxShaderGroupStride((member.maxShaderGroupStride));}();
[&](){return builder.setshaderGroupBaseAlignment((member.shaderGroupBaseAlignment));}();
[&](){return builder.setmaxGeometryCount((member.maxGeometryCount));}();
[&](){return builder.setmaxInstanceCount((member.maxInstanceCount));}();
[&](){return builder.setmaxTriangleCount((member.maxTriangleCount));}();
[&](){return builder.setmaxDescriptorSetAccelerationStructures((member.maxDescriptorSetAccelerationStructures));}();
}

    VkPhysicalDeviceRayTracingPropertiesNV deserialize_struct(VkPhysicalDeviceRayTracingPropertiesNV::Reader reader){
        auto result=VkPhysicalDeviceRayTracingPropertiesNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.shaderGroupHandleSize)=reader.getshaderGroupHandleSize();}();
[&](){(result.maxRecursionDepth)=reader.getmaxRecursionDepth();}();
[&](){(result.maxShaderGroupStride)=reader.getmaxShaderGroupStride();}();
[&](){(result.shaderGroupBaseAlignment)=reader.getshaderGroupBaseAlignment();}();
[&](){(result.maxGeometryCount)=reader.getmaxGeometryCount();}();
[&](){(result.maxInstanceCount)=reader.getmaxInstanceCount();}();
[&](){(result.maxTriangleCount)=reader.getmaxTriangleCount();}();
[&](){(result.maxDescriptorSetAccelerationStructures)=reader.getmaxDescriptorSetAccelerationStructures();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceRayTracingPropertiesNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceRayTracingPropertiesNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkStridedDeviceAddressRegionKHR::Builder& builder, VkStridedDeviceAddressRegionKHR member){
        
    
[&](){[&](){return builder.setdeviceAddress((member.deviceAddress));}();}();
[&](){[&](){return builder.setstride((member.stride));}();}();
[&](){[&](){return builder.setsize((member.size));}();}();
}

    VkStridedDeviceAddressRegionKHR deserialize_struct(VkStridedDeviceAddressRegionKHR::Reader reader){
        auto result=VkStridedDeviceAddressRegionKHR();
    
[&](){[&](){(result.deviceAddress)=reader.getdeviceAddress();}();}();
[&](){[&](){(result.stride)=reader.getstride();}();}();
[&](){[&](){(result.size)=reader.getsize();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkStridedDeviceAddressRegionKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkStridedDeviceAddressRegionKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkTraceRaysIndirectCommandKHR::Builder& builder, VkTraceRaysIndirectCommandKHR member){
        
    
[&](){return builder.setwidth((member.width));}();
[&](){return builder.setheight((member.height));}();
[&](){return builder.setdepth((member.depth));}();
}

    VkTraceRaysIndirectCommandKHR deserialize_struct(VkTraceRaysIndirectCommandKHR::Reader reader){
        auto result=VkTraceRaysIndirectCommandKHR();
    
[&](){(result.width)=reader.getwidth();}();
[&](){(result.height)=reader.getheight();}();
[&](){(result.depth)=reader.getdepth();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkTraceRaysIndirectCommandKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkTraceRaysIndirectCommandKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkTraceRaysIndirectCommand2KHR::Builder& builder, VkTraceRaysIndirectCommand2KHR member){
        
    
[&](){[&](){return builder.setraygenShaderRecordAddress((member.raygenShaderRecordAddress));}();}();
[&](){[&](){return builder.setraygenShaderRecordSize((member.raygenShaderRecordSize));}();}();
[&](){[&](){return builder.setmissShaderBindingTableAddress((member.missShaderBindingTableAddress));}();}();
[&](){[&](){return builder.setmissShaderBindingTableSize((member.missShaderBindingTableSize));}();}();
[&](){[&](){return builder.setmissShaderBindingTableStride((member.missShaderBindingTableStride));}();}();
[&](){[&](){return builder.sethitShaderBindingTableAddress((member.hitShaderBindingTableAddress));}();}();
[&](){[&](){return builder.sethitShaderBindingTableSize((member.hitShaderBindingTableSize));}();}();
[&](){[&](){return builder.sethitShaderBindingTableStride((member.hitShaderBindingTableStride));}();}();
[&](){[&](){return builder.setcallableShaderBindingTableAddress((member.callableShaderBindingTableAddress));}();}();
[&](){[&](){return builder.setcallableShaderBindingTableSize((member.callableShaderBindingTableSize));}();}();
[&](){[&](){return builder.setcallableShaderBindingTableStride((member.callableShaderBindingTableStride));}();}();
[&](){return builder.setwidth((member.width));}();
[&](){return builder.setheight((member.height));}();
[&](){return builder.setdepth((member.depth));}();
}

    VkTraceRaysIndirectCommand2KHR deserialize_struct(VkTraceRaysIndirectCommand2KHR::Reader reader){
        auto result=VkTraceRaysIndirectCommand2KHR();
    
[&](){[&](){(result.raygenShaderRecordAddress)=reader.getraygenShaderRecordAddress();}();}();
[&](){[&](){(result.raygenShaderRecordSize)=reader.getraygenShaderRecordSize();}();}();
[&](){[&](){(result.missShaderBindingTableAddress)=reader.getmissShaderBindingTableAddress();}();}();
[&](){[&](){(result.missShaderBindingTableSize)=reader.getmissShaderBindingTableSize();}();}();
[&](){[&](){(result.missShaderBindingTableStride)=reader.getmissShaderBindingTableStride();}();}();
[&](){[&](){(result.hitShaderBindingTableAddress)=reader.gethitShaderBindingTableAddress();}();}();
[&](){[&](){(result.hitShaderBindingTableSize)=reader.gethitShaderBindingTableSize();}();}();
[&](){[&](){(result.hitShaderBindingTableStride)=reader.gethitShaderBindingTableStride();}();}();
[&](){[&](){(result.callableShaderBindingTableAddress)=reader.getcallableShaderBindingTableAddress();}();}();
[&](){[&](){(result.callableShaderBindingTableSize)=reader.getcallableShaderBindingTableSize();}();}();
[&](){[&](){(result.callableShaderBindingTableStride)=reader.getcallableShaderBindingTableStride();}();}();
[&](){(result.width)=reader.getwidth();}();
[&](){(result.height)=reader.getheight();}();
[&](){(result.depth)=reader.getdepth();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkTraceRaysIndirectCommand2KHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkTraceRaysIndirectCommand2KHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR::Builder& builder, VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setrayTracingMaintenance1((member.rayTracingMaintenance1));}();}();
[&](){[&](){return builder.setrayTracingPipelineTraceRaysIndirect2((member.rayTracingPipelineTraceRaysIndirect2));}();}();
}

    VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR deserialize_struct(VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR::Reader reader){
        auto result=VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.rayTracingMaintenance1)=reader.getrayTracingMaintenance1();}();}();
[&](){[&](){(result.rayTracingPipelineTraceRaysIndirect2)=reader.getrayTracingPipelineTraceRaysIndirect2();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDrmFormatModifierPropertiesListEXT::Builder& builder, VkDrmFormatModifierPropertiesListEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setdrmFormatModifierCount((member.drmFormatModifierCount));}();
[&](){
            if ((member.pDrmFormatModifierProperties)==NULL){
                builder.disownpDrmFormatModifierProperties();
            return; }
        auto proto_arr=builder.initpDrmFormatModifierProperties();
        for(int ZzracqV=0; ZzracqV < member.drmFormatModifierCount; ZzracqV++){
            [&](){
            auto temp=proto_arr[ZzracqV];
            return serialize_struct(((member.pDrmFormatModifierProperties)[ZzracqV]), temp);
            }();
        }
        }();
}

    VkDrmFormatModifierPropertiesListEXT deserialize_struct(VkDrmFormatModifierPropertiesListEXT::Reader reader){
        auto result=VkDrmFormatModifierPropertiesListEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.drmFormatModifierCount)=reader.getdrmFormatModifierCount();}();
[&](){
            if (!reader.haspDrmFormatModifierProperties()){
                (result.pDrmFormatModifierProperties)=NULL;
            return; }{native_concat()}=(VkDrmFormatModifierPropertiesEXT*)malloc(result.drmFormatModifierCount*sizeof(VkDrmFormatModifierPropertiesEXT));
        auto proto_arr=reader.getpDrmFormatModifierProperties(result.drmFormatModifierCount);
        for(int ZzracqV=0; ZzracqV < result.drmFormatModifierCount; ZzracqV++){
            [&](){
            auto temp=proto_arr[ZzracqV];
            ((result.pDrmFormatModifierProperties)[ZzracqV])=deserialize_struct(temp);
            }();
        }
        }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDrmFormatModifierPropertiesListEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDrmFormatModifierPropertiesListEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDrmFormatModifierPropertiesEXT::Builder& builder, VkDrmFormatModifierPropertiesEXT member){
        
    
[&](){return builder.setdrmFormatModifier((member.drmFormatModifier));}();
[&](){return builder.setdrmFormatModifierPlaneCount((member.drmFormatModifierPlaneCount));}();
[&](){[&](){[&](){return builder.setdrmFormatModifierTilingFeatures((member.drmFormatModifierTilingFeatures));}();}();}();
}

    VkDrmFormatModifierPropertiesEXT deserialize_struct(VkDrmFormatModifierPropertiesEXT::Reader reader){
        auto result=VkDrmFormatModifierPropertiesEXT();
    
[&](){(result.drmFormatModifier)=reader.getdrmFormatModifier();}();
[&](){(result.drmFormatModifierPlaneCount)=reader.getdrmFormatModifierPlaneCount();}();
[&](){[&](){[&](){(result.drmFormatModifierTilingFeatures)=reader.getdrmFormatModifierTilingFeatures();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDrmFormatModifierPropertiesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDrmFormatModifierPropertiesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceImageDrmFormatModifierInfoEXT::Builder& builder, VkPhysicalDeviceImageDrmFormatModifierInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setdrmFormatModifier((member.drmFormatModifier));}();
[&](){[&](){[&](){return builder.setsharingMode((member.sharingMode));}();}();}();
[&](){return builder.setqueueFamilyIndexCount((member.queueFamilyIndexCount));}();
[&](){
            if ((member.pQueueFamilyIndices)==NULL){
                builder.disownpQueueFamilyIndices();
            return; }
        auto proto_arr=builder.initpQueueFamilyIndices();
        for(int rqZQqua=0; rqZQqua < member.queueFamilyIndexCount; rqZQqua++){
            [&](){return proto_arr.set(rqZQqua,((member.pQueueFamilyIndices)[rqZQqua]));}();
        }
        }();
}

    VkPhysicalDeviceImageDrmFormatModifierInfoEXT deserialize_struct(VkPhysicalDeviceImageDrmFormatModifierInfoEXT::Reader reader){
        auto result=VkPhysicalDeviceImageDrmFormatModifierInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.drmFormatModifier)=reader.getdrmFormatModifier();}();
[&](){[&](){[&](){(result.sharingMode)=reader.getsharingMode();}();}();}();
[&](){(result.queueFamilyIndexCount)=reader.getqueueFamilyIndexCount();}();
[&](){ uint32_t* temp_NzZliok[&](){
            if (!reader.haspQueueFamilyIndices()){
                (result.pQueueFamilyIndices)=NULL;
            return; }{native_concat()}=(uint32_t*)malloc(result.queueFamilyIndexCount*sizeof(uint32_t));
        auto proto_arr=reader.getpQueueFamilyIndices(result.queueFamilyIndexCount);
        for(int JEqKTnG=0; JEqKTnG < result.queueFamilyIndexCount; JEqKTnG++){
            [&](){((result.pQueueFamilyIndices)[JEqKTnG])=proto_arr[JEqKTnG];}();
        }
        }();(result.pQueueFamilyIndices)=temp_NzZliok;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceImageDrmFormatModifierInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceImageDrmFormatModifierInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkImageDrmFormatModifierListCreateInfoEXT::Builder& builder, VkImageDrmFormatModifierListCreateInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setdrmFormatModifierCount((member.drmFormatModifierCount));}();
[&](){
            if ((member.pDrmFormatModifiers)==NULL){
                builder.disownpDrmFormatModifiers();
            return; }
        auto proto_arr=builder.initpDrmFormatModifiers();
        for(int XtcCAFc=0; XtcCAFc < member.drmFormatModifierCount; XtcCAFc++){
            [&](){return proto_arr.set(XtcCAFc,((member.pDrmFormatModifiers)[XtcCAFc]));}();
        }
        }();
}

    VkImageDrmFormatModifierListCreateInfoEXT deserialize_struct(VkImageDrmFormatModifierListCreateInfoEXT::Reader reader){
        auto result=VkImageDrmFormatModifierListCreateInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.drmFormatModifierCount)=reader.getdrmFormatModifierCount();}();
[&](){ uint64_t* temp_nqZHJUz[&](){
            if (!reader.haspDrmFormatModifiers()){
                (result.pDrmFormatModifiers)=NULL;
            return; }{native_concat()}=(uint64_t*)malloc(result.drmFormatModifierCount*sizeof(uint64_t));
        auto proto_arr=reader.getpDrmFormatModifiers(result.drmFormatModifierCount);
        for(int taWquMu=0; taWquMu < result.drmFormatModifierCount; taWquMu++){
            [&](){((result.pDrmFormatModifiers)[taWquMu])=proto_arr[taWquMu];}();
        }
        }();(result.pDrmFormatModifiers)=temp_nqZHJUz;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkImageDrmFormatModifierListCreateInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkImageDrmFormatModifierListCreateInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkImageDrmFormatModifierExplicitCreateInfoEXT::Builder& builder, VkImageDrmFormatModifierExplicitCreateInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setdrmFormatModifier((member.drmFormatModifier));}();
[&](){return builder.setdrmFormatModifierPlaneCount((member.drmFormatModifierPlaneCount));}();
[&](){
            if ((member.pPlaneLayouts)==NULL){
                builder.disownpPlaneLayouts();
            return; }
        auto proto_arr=builder.initpPlaneLayouts();
        for(int rPoQfMt=0; rPoQfMt < member.drmFormatModifierPlaneCount; rPoQfMt++){
            [&](){
            auto temp=proto_arr[rPoQfMt];
            return serialize_struct(((member.pPlaneLayouts)[rPoQfMt]), temp);
            }();
        }
        }();
}

    VkImageDrmFormatModifierExplicitCreateInfoEXT deserialize_struct(VkImageDrmFormatModifierExplicitCreateInfoEXT::Reader reader){
        auto result=VkImageDrmFormatModifierExplicitCreateInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.drmFormatModifier)=reader.getdrmFormatModifier();}();
[&](){(result.drmFormatModifierPlaneCount)=reader.getdrmFormatModifierPlaneCount();}();
[&](){ VkSubresourceLayout* temp_VgEjCxw[&](){
            if (!reader.haspPlaneLayouts()){
                (result.pPlaneLayouts)=NULL;
            return; }{native_concat()}=(VkSubresourceLayout*)malloc(result.drmFormatModifierPlaneCount*sizeof(VkSubresourceLayout));
        auto proto_arr=reader.getpPlaneLayouts(result.drmFormatModifierPlaneCount);
        for(int sDRKXGQ=0; sDRKXGQ < result.drmFormatModifierPlaneCount; sDRKXGQ++){
            [&](){
            auto temp=proto_arr[sDRKXGQ];
            ((result.pPlaneLayouts)[sDRKXGQ])=deserialize_struct(temp);
            }();
        }
        }();(result.pPlaneLayouts)=temp_VgEjCxw;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkImageDrmFormatModifierExplicitCreateInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkImageDrmFormatModifierExplicitCreateInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkImageDrmFormatModifierPropertiesEXT::Builder& builder, VkImageDrmFormatModifierPropertiesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setdrmFormatModifier((member.drmFormatModifier));}();
}

    VkImageDrmFormatModifierPropertiesEXT deserialize_struct(VkImageDrmFormatModifierPropertiesEXT::Reader reader){
        auto result=VkImageDrmFormatModifierPropertiesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.drmFormatModifier)=reader.getdrmFormatModifier();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkImageDrmFormatModifierPropertiesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkImageDrmFormatModifierPropertiesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkImageStencilUsageCreateInfo::Builder& builder, VkImageStencilUsageCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setstencilUsage((member.stencilUsage));}();}();}();
}

    VkImageStencilUsageCreateInfo deserialize_struct(VkImageStencilUsageCreateInfo::Reader reader){
        auto result=VkImageStencilUsageCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.stencilUsage)=reader.getstencilUsage();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkImageStencilUsageCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkImageStencilUsageCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDeviceMemoryOverallocationCreateInfoAMD::Builder& builder, VkDeviceMemoryOverallocationCreateInfoAMD member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setoverallocationBehavior((member.overallocationBehavior));}();}();}();
}

    VkDeviceMemoryOverallocationCreateInfoAMD deserialize_struct(VkDeviceMemoryOverallocationCreateInfoAMD::Reader reader){
        auto result=VkDeviceMemoryOverallocationCreateInfoAMD();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.overallocationBehavior)=reader.getoverallocationBehavior();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDeviceMemoryOverallocationCreateInfoAMD member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDeviceMemoryOverallocationCreateInfoAMD member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceFragmentDensityMapFeaturesEXT::Builder& builder, VkPhysicalDeviceFragmentDensityMapFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setfragmentDensityMap((member.fragmentDensityMap));}();}();
[&](){[&](){return builder.setfragmentDensityMapDynamic((member.fragmentDensityMapDynamic));}();}();
[&](){[&](){return builder.setfragmentDensityMapNonSubsampledImages((member.fragmentDensityMapNonSubsampledImages));}();}();
}

    VkPhysicalDeviceFragmentDensityMapFeaturesEXT deserialize_struct(VkPhysicalDeviceFragmentDensityMapFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceFragmentDensityMapFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.fragmentDensityMap)=reader.getfragmentDensityMap();}();}();
[&](){[&](){(result.fragmentDensityMapDynamic)=reader.getfragmentDensityMapDynamic();}();}();
[&](){[&](){(result.fragmentDensityMapNonSubsampledImages)=reader.getfragmentDensityMapNonSubsampledImages();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceFragmentDensityMapFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceFragmentDensityMapFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceFragmentDensityMap2FeaturesEXT::Builder& builder, VkPhysicalDeviceFragmentDensityMap2FeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setfragmentDensityMapDeferred((member.fragmentDensityMapDeferred));}();}();
}

    VkPhysicalDeviceFragmentDensityMap2FeaturesEXT deserialize_struct(VkPhysicalDeviceFragmentDensityMap2FeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceFragmentDensityMap2FeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.fragmentDensityMapDeferred)=reader.getfragmentDensityMapDeferred();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceFragmentDensityMap2FeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceFragmentDensityMap2FeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM::Builder& builder, VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setfragmentDensityMapOffset((member.fragmentDensityMapOffset));}();}();
}

    VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM deserialize_struct(VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM::Reader reader){
        auto result=VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.fragmentDensityMapOffset)=reader.getfragmentDensityMapOffset();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceFragmentDensityMapPropertiesEXT::Builder& builder, VkPhysicalDeviceFragmentDensityMapPropertiesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            auto temp=builder.initminFragmentDensityTexelSize(minFragmentDensityTexelSize);
            return serialize_struct((member.minFragmentDensityTexelSize), temp);
            }();
[&](){
            auto temp=builder.initmaxFragmentDensityTexelSize(maxFragmentDensityTexelSize);
            return serialize_struct((member.maxFragmentDensityTexelSize), temp);
            }();
[&](){[&](){return builder.setfragmentDensityInvocations((member.fragmentDensityInvocations));}();}();
}

    VkPhysicalDeviceFragmentDensityMapPropertiesEXT deserialize_struct(VkPhysicalDeviceFragmentDensityMapPropertiesEXT::Reader reader){
        auto result=VkPhysicalDeviceFragmentDensityMapPropertiesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getminFragmentDensityTexelSize();
            (result.minFragmentDensityTexelSize)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getmaxFragmentDensityTexelSize();
            (result.maxFragmentDensityTexelSize)=deserialize_struct(temp);
            }();
[&](){[&](){(result.fragmentDensityInvocations)=reader.getfragmentDensityInvocations();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceFragmentDensityMapPropertiesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceFragmentDensityMapPropertiesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT::Builder& builder, VkPhysicalDeviceFragmentDensityMap2PropertiesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setsubsampledLoads((member.subsampledLoads));}();}();
[&](){[&](){return builder.setsubsampledCoarseReconstructionEarlyAccess((member.subsampledCoarseReconstructionEarlyAccess));}();}();
[&](){return builder.setmaxSubsampledArrayLayers((member.maxSubsampledArrayLayers));}();
[&](){return builder.setmaxDescriptorSetSubsampledSamplers((member.maxDescriptorSetSubsampledSamplers));}();
}

    VkPhysicalDeviceFragmentDensityMap2PropertiesEXT deserialize_struct(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT::Reader reader){
        auto result=VkPhysicalDeviceFragmentDensityMap2PropertiesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.subsampledLoads)=reader.getsubsampledLoads();}();}();
[&](){[&](){(result.subsampledCoarseReconstructionEarlyAccess)=reader.getsubsampledCoarseReconstructionEarlyAccess();}();}();
[&](){(result.maxSubsampledArrayLayers)=reader.getmaxSubsampledArrayLayers();}();
[&](){(result.maxDescriptorSetSubsampledSamplers)=reader.getmaxDescriptorSetSubsampledSamplers();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceFragmentDensityMap2PropertiesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceFragmentDensityMap2PropertiesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM::Builder& builder, VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            auto temp=builder.initfragmentDensityOffsetGranularity(fragmentDensityOffsetGranularity);
            return serialize_struct((member.fragmentDensityOffsetGranularity), temp);
            }();
}

    VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM deserialize_struct(VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM::Reader reader){
        auto result=VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getfragmentDensityOffsetGranularity();
            (result.fragmentDensityOffsetGranularity)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkRenderPassFragmentDensityMapCreateInfoEXT::Builder& builder, VkRenderPassFragmentDensityMapCreateInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            auto temp=builder.initfragmentDensityMapAttachment(fragmentDensityMapAttachment);
            return serialize_struct((member.fragmentDensityMapAttachment), temp);
            }();
}

    VkRenderPassFragmentDensityMapCreateInfoEXT deserialize_struct(VkRenderPassFragmentDensityMapCreateInfoEXT::Reader reader){
        auto result=VkRenderPassFragmentDensityMapCreateInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){
            auto temp=reader.getfragmentDensityMapAttachment();
            (result.fragmentDensityMapAttachment)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkRenderPassFragmentDensityMapCreateInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkRenderPassFragmentDensityMapCreateInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSubpassFragmentDensityMapOffsetEndInfoQCOM::Builder& builder, VkSubpassFragmentDensityMapOffsetEndInfoQCOM member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setfragmentDensityOffsetCount((member.fragmentDensityOffsetCount));}();
[&](){
            if ((member.pFragmentDensityOffsets)==NULL){
                builder.disownpFragmentDensityOffsets();
            return; }
        auto proto_arr=builder.initpFragmentDensityOffsets();
        for(int lmMXhaF=0; lmMXhaF < member.fragmentDensityOffsetCount; lmMXhaF++){
            [&](){
            auto temp=proto_arr[lmMXhaF];
            return serialize_struct(((member.pFragmentDensityOffsets)[lmMXhaF]), temp);
            }();
        }
        }();
}

    VkSubpassFragmentDensityMapOffsetEndInfoQCOM deserialize_struct(VkSubpassFragmentDensityMapOffsetEndInfoQCOM::Reader reader){
        auto result=VkSubpassFragmentDensityMapOffsetEndInfoQCOM();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.fragmentDensityOffsetCount)=reader.getfragmentDensityOffsetCount();}();
[&](){ VkOffset2D* temp_wuEjIZI[&](){
            if (!reader.haspFragmentDensityOffsets()){
                (result.pFragmentDensityOffsets)=NULL;
            return; }{native_concat()}=(VkOffset2D*)malloc(result.fragmentDensityOffsetCount*sizeof(VkOffset2D));
        auto proto_arr=reader.getpFragmentDensityOffsets(result.fragmentDensityOffsetCount);
        for(int rVUrFFp=0; rVUrFFp < result.fragmentDensityOffsetCount; rVUrFFp++){
            [&](){
            auto temp=proto_arr[rVUrFFp];
            ((result.pFragmentDensityOffsets)[rVUrFFp])=deserialize_struct(temp);
            }();
        }
        }();(result.pFragmentDensityOffsets)=temp_wuEjIZI;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSubpassFragmentDensityMapOffsetEndInfoQCOM member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSubpassFragmentDensityMapOffsetEndInfoQCOM member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceScalarBlockLayoutFeatures::Builder& builder, VkPhysicalDeviceScalarBlockLayoutFeatures member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setscalarBlockLayout((member.scalarBlockLayout));}();}();
}

    VkPhysicalDeviceScalarBlockLayoutFeatures deserialize_struct(VkPhysicalDeviceScalarBlockLayoutFeatures::Reader reader){
        auto result=VkPhysicalDeviceScalarBlockLayoutFeatures();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.scalarBlockLayout)=reader.getscalarBlockLayout();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceScalarBlockLayoutFeatures member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceScalarBlockLayoutFeatures member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSurfaceProtectedCapabilitiesKHR::Builder& builder, VkSurfaceProtectedCapabilitiesKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setsupportsProtected((member.supportsProtected));}();}();
}

    VkSurfaceProtectedCapabilitiesKHR deserialize_struct(VkSurfaceProtectedCapabilitiesKHR::Reader reader){
        auto result=VkSurfaceProtectedCapabilitiesKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){(result.supportsProtected)=reader.getsupportsProtected();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSurfaceProtectedCapabilitiesKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSurfaceProtectedCapabilitiesKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceUniformBufferStandardLayoutFeatures::Builder& builder, VkPhysicalDeviceUniformBufferStandardLayoutFeatures member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setuniformBufferStandardLayout((member.uniformBufferStandardLayout));}();}();
}

    VkPhysicalDeviceUniformBufferStandardLayoutFeatures deserialize_struct(VkPhysicalDeviceUniformBufferStandardLayoutFeatures::Reader reader){
        auto result=VkPhysicalDeviceUniformBufferStandardLayoutFeatures();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.uniformBufferStandardLayout)=reader.getuniformBufferStandardLayout();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceUniformBufferStandardLayoutFeatures member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceUniformBufferStandardLayoutFeatures member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceDepthClipEnableFeaturesEXT::Builder& builder, VkPhysicalDeviceDepthClipEnableFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setdepthClipEnable((member.depthClipEnable));}();}();
}

    VkPhysicalDeviceDepthClipEnableFeaturesEXT deserialize_struct(VkPhysicalDeviceDepthClipEnableFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceDepthClipEnableFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.depthClipEnable)=reader.getdepthClipEnable();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceDepthClipEnableFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceDepthClipEnableFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineRasterizationDepthClipStateCreateInfoEXT::Builder& builder, VkPipelineRasterizationDepthClipStateCreateInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){[&](){return builder.setdepthClipEnable((member.depthClipEnable));}();}();
}

    VkPipelineRasterizationDepthClipStateCreateInfoEXT deserialize_struct(VkPipelineRasterizationDepthClipStateCreateInfoEXT::Reader reader){
        auto result=VkPipelineRasterizationDepthClipStateCreateInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){[&](){(result.depthClipEnable)=reader.getdepthClipEnable();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineRasterizationDepthClipStateCreateInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineRasterizationDepthClipStateCreateInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceMemoryBudgetPropertiesEXT::Builder& builder, VkPhysicalDeviceMemoryBudgetPropertiesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
        auto proto_arr=builder.initheapBudget();
        for(int WasafRQ=0; WasafRQ < VK_MAX_MEMORY_HEAPS; WasafRQ++){
            [&](){[&](){return proto_arr.set(WasafRQ,((member.heapBudget)[WasafRQ]));}();}();
        }
        }();
[&](){
        auto proto_arr=builder.initheapUsage();
        for(int KcTGRVa=0; KcTGRVa < VK_MAX_MEMORY_HEAPS; KcTGRVa++){
            [&](){[&](){return proto_arr.set(KcTGRVa,((member.heapUsage)[KcTGRVa]));}();}();
        }
        }();
}

    VkPhysicalDeviceMemoryBudgetPropertiesEXT deserialize_struct(VkPhysicalDeviceMemoryBudgetPropertiesEXT::Reader reader){
        auto result=VkPhysicalDeviceMemoryBudgetPropertiesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){
        auto proto_arr=reader.getheapBudget(VK_MAX_MEMORY_HEAPS);
        for(int WasafRQ=0; WasafRQ < VK_MAX_MEMORY_HEAPS; WasafRQ++){
            [&](){[&](){((result.heapBudget)[WasafRQ])=proto_arr[WasafRQ];}();}();
        }
        }();
[&](){
        auto proto_arr=reader.getheapUsage(VK_MAX_MEMORY_HEAPS);
        for(int KcTGRVa=0; KcTGRVa < VK_MAX_MEMORY_HEAPS; KcTGRVa++){
            [&](){[&](){((result.heapUsage)[KcTGRVa])=proto_arr[KcTGRVa];}();}();
        }
        }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceMemoryBudgetPropertiesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceMemoryBudgetPropertiesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceMemoryPriorityFeaturesEXT::Builder& builder, VkPhysicalDeviceMemoryPriorityFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setmemoryPriority((member.memoryPriority));}();}();
}

    VkPhysicalDeviceMemoryPriorityFeaturesEXT deserialize_struct(VkPhysicalDeviceMemoryPriorityFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceMemoryPriorityFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.memoryPriority)=reader.getmemoryPriority();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceMemoryPriorityFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceMemoryPriorityFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkMemoryPriorityAllocateInfoEXT::Builder& builder, VkMemoryPriorityAllocateInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setpriority((member.priority));}();
}

    VkMemoryPriorityAllocateInfoEXT deserialize_struct(VkMemoryPriorityAllocateInfoEXT::Reader reader){
        auto result=VkMemoryPriorityAllocateInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.priority)=reader.getpriority();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkMemoryPriorityAllocateInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkMemoryPriorityAllocateInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT::Builder& builder, VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setpageableDeviceLocalMemory((member.pageableDeviceLocalMemory));}();}();
}

    VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT deserialize_struct(VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT::Reader reader){
        auto result=VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.pageableDeviceLocalMemory)=reader.getpageableDeviceLocalMemory();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceBufferDeviceAddressFeatures::Builder& builder, VkPhysicalDeviceBufferDeviceAddressFeatures member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setbufferDeviceAddress((member.bufferDeviceAddress));}();}();
[&](){[&](){return builder.setbufferDeviceAddressCaptureReplay((member.bufferDeviceAddressCaptureReplay));}();}();
[&](){[&](){return builder.setbufferDeviceAddressMultiDevice((member.bufferDeviceAddressMultiDevice));}();}();
}

    VkPhysicalDeviceBufferDeviceAddressFeatures deserialize_struct(VkPhysicalDeviceBufferDeviceAddressFeatures::Reader reader){
        auto result=VkPhysicalDeviceBufferDeviceAddressFeatures();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.bufferDeviceAddress)=reader.getbufferDeviceAddress();}();}();
[&](){[&](){(result.bufferDeviceAddressCaptureReplay)=reader.getbufferDeviceAddressCaptureReplay();}();}();
[&](){[&](){(result.bufferDeviceAddressMultiDevice)=reader.getbufferDeviceAddressMultiDevice();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceBufferDeviceAddressFeatures member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceBufferDeviceAddressFeatures member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceBufferDeviceAddressFeaturesEXT::Builder& builder, VkPhysicalDeviceBufferDeviceAddressFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setbufferDeviceAddress((member.bufferDeviceAddress));}();}();
[&](){[&](){return builder.setbufferDeviceAddressCaptureReplay((member.bufferDeviceAddressCaptureReplay));}();}();
[&](){[&](){return builder.setbufferDeviceAddressMultiDevice((member.bufferDeviceAddressMultiDevice));}();}();
}

    VkPhysicalDeviceBufferDeviceAddressFeaturesEXT deserialize_struct(VkPhysicalDeviceBufferDeviceAddressFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceBufferDeviceAddressFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.bufferDeviceAddress)=reader.getbufferDeviceAddress();}();}();
[&](){[&](){(result.bufferDeviceAddressCaptureReplay)=reader.getbufferDeviceAddressCaptureReplay();}();}();
[&](){[&](){(result.bufferDeviceAddressMultiDevice)=reader.getbufferDeviceAddressMultiDevice();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceBufferDeviceAddressFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceBufferDeviceAddressFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkBufferDeviceAddressInfo::Builder& builder, VkBufferDeviceAddressInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setbuffer(serialize_handle(member.buffer));}();
}

    VkBufferDeviceAddressInfo deserialize_struct(VkBufferDeviceAddressInfo::Reader reader){
        auto result=VkBufferDeviceAddressInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.buffer)=deserialize_handle(reader.getbuffer());}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkBufferDeviceAddressInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkBufferDeviceAddressInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkBufferOpaqueCaptureAddressCreateInfo::Builder& builder, VkBufferOpaqueCaptureAddressCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setopaqueCaptureAddress((member.opaqueCaptureAddress));}();
}

    VkBufferOpaqueCaptureAddressCreateInfo deserialize_struct(VkBufferOpaqueCaptureAddressCreateInfo::Reader reader){
        auto result=VkBufferOpaqueCaptureAddressCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.opaqueCaptureAddress)=reader.getopaqueCaptureAddress();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkBufferOpaqueCaptureAddressCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkBufferOpaqueCaptureAddressCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkBufferDeviceAddressCreateInfoEXT::Builder& builder, VkBufferDeviceAddressCreateInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setdeviceAddress((member.deviceAddress));}();}();
}

    VkBufferDeviceAddressCreateInfoEXT deserialize_struct(VkBufferDeviceAddressCreateInfoEXT::Reader reader){
        auto result=VkBufferDeviceAddressCreateInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){(result.deviceAddress)=reader.getdeviceAddress();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkBufferDeviceAddressCreateInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkBufferDeviceAddressCreateInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceImageViewImageFormatInfoEXT::Builder& builder, VkPhysicalDeviceImageViewImageFormatInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setimageViewType((member.imageViewType));}();}();}();
}

    VkPhysicalDeviceImageViewImageFormatInfoEXT deserialize_struct(VkPhysicalDeviceImageViewImageFormatInfoEXT::Reader reader){
        auto result=VkPhysicalDeviceImageViewImageFormatInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.imageViewType)=reader.getimageViewType();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceImageViewImageFormatInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceImageViewImageFormatInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkFilterCubicImageViewImageFormatPropertiesEXT::Builder& builder, VkFilterCubicImageViewImageFormatPropertiesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setfilterCubic((member.filterCubic));}();}();
[&](){[&](){return builder.setfilterCubicMinmax((member.filterCubicMinmax));}();}();
}

    VkFilterCubicImageViewImageFormatPropertiesEXT deserialize_struct(VkFilterCubicImageViewImageFormatPropertiesEXT::Reader reader){
        auto result=VkFilterCubicImageViewImageFormatPropertiesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.filterCubic)=reader.getfilterCubic();}();}();
[&](){[&](){(result.filterCubicMinmax)=reader.getfilterCubicMinmax();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkFilterCubicImageViewImageFormatPropertiesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkFilterCubicImageViewImageFormatPropertiesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceImagelessFramebufferFeatures::Builder& builder, VkPhysicalDeviceImagelessFramebufferFeatures member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setimagelessFramebuffer((member.imagelessFramebuffer));}();}();
}

    VkPhysicalDeviceImagelessFramebufferFeatures deserialize_struct(VkPhysicalDeviceImagelessFramebufferFeatures::Reader reader){
        auto result=VkPhysicalDeviceImagelessFramebufferFeatures();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.imagelessFramebuffer)=reader.getimagelessFramebuffer();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceImagelessFramebufferFeatures member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceImagelessFramebufferFeatures member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkFramebufferAttachmentsCreateInfo::Builder& builder, VkFramebufferAttachmentsCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setattachmentImageInfoCount((member.attachmentImageInfoCount));}();
[&](){
            if ((member.pAttachmentImageInfos)==NULL){
                builder.disownpAttachmentImageInfos();
            return; }
        auto proto_arr=builder.initpAttachmentImageInfos();
        for(int rrcawDd=0; rrcawDd < member.attachmentImageInfoCount; rrcawDd++){
            [&](){
            auto temp=proto_arr[rrcawDd];
            return serialize_struct(((member.pAttachmentImageInfos)[rrcawDd]), temp);
            }();
        }
        }();
}

    VkFramebufferAttachmentsCreateInfo deserialize_struct(VkFramebufferAttachmentsCreateInfo::Reader reader){
        auto result=VkFramebufferAttachmentsCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.attachmentImageInfoCount)=reader.getattachmentImageInfoCount();}();
[&](){ VkFramebufferAttachmentImageInfo* temp_owzzfjP[&](){
            if (!reader.haspAttachmentImageInfos()){
                (result.pAttachmentImageInfos)=NULL;
            return; }{native_concat()}=(VkFramebufferAttachmentImageInfo*)malloc(result.attachmentImageInfoCount*sizeof(VkFramebufferAttachmentImageInfo));
        auto proto_arr=reader.getpAttachmentImageInfos(result.attachmentImageInfoCount);
        for(int yZGrSaw=0; yZGrSaw < result.attachmentImageInfoCount; yZGrSaw++){
            [&](){
            auto temp=proto_arr[yZGrSaw];
            ((result.pAttachmentImageInfos)[yZGrSaw])=deserialize_struct(temp);
            }();
        }
        }();(result.pAttachmentImageInfos)=temp_owzzfjP;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkFramebufferAttachmentsCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkFramebufferAttachmentsCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkFramebufferAttachmentImageInfo::Builder& builder, VkFramebufferAttachmentImageInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){[&](){[&](){return builder.setusage((member.usage));}();}();}();
[&](){return builder.setwidth((member.width));}();
[&](){return builder.setheight((member.height));}();
[&](){return builder.setlayerCount((member.layerCount));}();
[&](){return builder.setviewFormatCount((member.viewFormatCount));}();
[&](){
            if ((member.pViewFormats)==NULL){
                builder.disownpViewFormats();
            return; }
        auto proto_arr=builder.initpViewFormats();
        for(int JvKPhOq=0; JvKPhOq < member.viewFormatCount; JvKPhOq++){
            [&](){[&](){[&](){return proto_arr.set(JvKPhOq,((member.pViewFormats)[JvKPhOq]));}();}();}();
        }
        }();
}

    VkFramebufferAttachmentImageInfo deserialize_struct(VkFramebufferAttachmentImageInfo::Reader reader){
        auto result=VkFramebufferAttachmentImageInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){[&](){[&](){(result.usage)=reader.getusage();}();}();}();
[&](){(result.width)=reader.getwidth();}();
[&](){(result.height)=reader.getheight();}();
[&](){(result.layerCount)=reader.getlayerCount();}();
[&](){(result.viewFormatCount)=reader.getviewFormatCount();}();
[&](){ VkFormat* temp_IZMfCii[&](){
            if (!reader.haspViewFormats()){
                (result.pViewFormats)=NULL;
            return; }{native_concat()}=(VkFormat*)malloc(result.viewFormatCount*sizeof(VkFormat));
        auto proto_arr=reader.getpViewFormats(result.viewFormatCount);
        for(int tWwlFTf=0; tWwlFTf < result.viewFormatCount; tWwlFTf++){
            [&](){[&](){[&](){((result.pViewFormats)[tWwlFTf])=proto_arr[tWwlFTf];}();}();}();
        }
        }();(result.pViewFormats)=temp_IZMfCii;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkFramebufferAttachmentImageInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkFramebufferAttachmentImageInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkRenderPassAttachmentBeginInfo::Builder& builder, VkRenderPassAttachmentBeginInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setattachmentCount((member.attachmentCount));}();
[&](){
            if ((member.pAttachments)==NULL){
                builder.disownpAttachments();
            return; }
        auto proto_arr=builder.initpAttachments();
        for(int vjwDzkt=0; vjwDzkt < member.attachmentCount; vjwDzkt++){
            [&](){return proto_arr.set(vjwDzkt,serialize_handle((member.pAttachments)[vjwDzkt]));}();
        }
        }();
}

    VkRenderPassAttachmentBeginInfo deserialize_struct(VkRenderPassAttachmentBeginInfo::Reader reader){
        auto result=VkRenderPassAttachmentBeginInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.attachmentCount)=reader.getattachmentCount();}();
[&](){ VkImageView* temp_engXCXd[&](){
            if (!reader.haspAttachments()){
                (result.pAttachments)=NULL;
            return; }{native_concat()}=(VkImageView*)malloc(result.attachmentCount*sizeof(VkImageView));
        auto proto_arr=reader.getpAttachments(result.attachmentCount);
        for(int qNVUjmy=0; qNVUjmy < result.attachmentCount; qNVUjmy++){
            [&](){((result.pAttachments)[qNVUjmy])=deserialize_handle(proto_arr[qNVUjmy]);}();
        }
        }();(result.pAttachments)=temp_engXCXd;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkRenderPassAttachmentBeginInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkRenderPassAttachmentBeginInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceTextureCompressionASTCHDRFeatures::Builder& builder, VkPhysicalDeviceTextureCompressionASTCHDRFeatures member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.settextureCompressionASTC_HDR((member.textureCompressionASTC_HDR));}();}();
}

    VkPhysicalDeviceTextureCompressionASTCHDRFeatures deserialize_struct(VkPhysicalDeviceTextureCompressionASTCHDRFeatures::Reader reader){
        auto result=VkPhysicalDeviceTextureCompressionASTCHDRFeatures();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.textureCompressionASTC_HDR)=reader.gettextureCompressionASTC_HDR();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceTextureCompressionASTCHDRFeatures member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceTextureCompressionASTCHDRFeatures member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceCooperativeMatrixFeaturesNV::Builder& builder, VkPhysicalDeviceCooperativeMatrixFeaturesNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setcooperativeMatrix((member.cooperativeMatrix));}();}();
[&](){[&](){return builder.setcooperativeMatrixRobustBufferAccess((member.cooperativeMatrixRobustBufferAccess));}();}();
}

    VkPhysicalDeviceCooperativeMatrixFeaturesNV deserialize_struct(VkPhysicalDeviceCooperativeMatrixFeaturesNV::Reader reader){
        auto result=VkPhysicalDeviceCooperativeMatrixFeaturesNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.cooperativeMatrix)=reader.getcooperativeMatrix();}();}();
[&](){[&](){(result.cooperativeMatrixRobustBufferAccess)=reader.getcooperativeMatrixRobustBufferAccess();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceCooperativeMatrixFeaturesNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceCooperativeMatrixFeaturesNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceCooperativeMatrixPropertiesNV::Builder& builder, VkPhysicalDeviceCooperativeMatrixPropertiesNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setcooperativeMatrixSupportedStages((member.cooperativeMatrixSupportedStages));}();}();}();
}

    VkPhysicalDeviceCooperativeMatrixPropertiesNV deserialize_struct(VkPhysicalDeviceCooperativeMatrixPropertiesNV::Reader reader){
        auto result=VkPhysicalDeviceCooperativeMatrixPropertiesNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.cooperativeMatrixSupportedStages)=reader.getcooperativeMatrixSupportedStages();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceCooperativeMatrixPropertiesNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceCooperativeMatrixPropertiesNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkCooperativeMatrixPropertiesNV::Builder& builder, VkCooperativeMatrixPropertiesNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setMSize((member.MSize));}();
[&](){return builder.setNSize((member.NSize));}();
[&](){return builder.setKSize((member.KSize));}();
[&](){[&](){[&](){return builder.setAType((member.AType));}();}();}();
[&](){[&](){[&](){return builder.setBType((member.BType));}();}();}();
[&](){[&](){[&](){return builder.setCType((member.CType));}();}();}();
[&](){[&](){[&](){return builder.setDType((member.DType));}();}();}();
[&](){[&](){[&](){return builder.setscope((member.scope));}();}();}();
}

    VkCooperativeMatrixPropertiesNV deserialize_struct(VkCooperativeMatrixPropertiesNV::Reader reader){
        auto result=VkCooperativeMatrixPropertiesNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.MSize)=reader.getMSize();}();
[&](){(result.NSize)=reader.getNSize();}();
[&](){(result.KSize)=reader.getKSize();}();
[&](){[&](){[&](){(result.AType)=reader.getAType();}();}();}();
[&](){[&](){[&](){(result.BType)=reader.getBType();}();}();}();
[&](){[&](){[&](){(result.CType)=reader.getCType();}();}();}();
[&](){[&](){[&](){(result.DType)=reader.getDType();}();}();}();
[&](){[&](){[&](){(result.scope)=reader.getscope();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkCooperativeMatrixPropertiesNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkCooperativeMatrixPropertiesNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceYcbcrImageArraysFeaturesEXT::Builder& builder, VkPhysicalDeviceYcbcrImageArraysFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setycbcrImageArrays((member.ycbcrImageArrays));}();}();
}

    VkPhysicalDeviceYcbcrImageArraysFeaturesEXT deserialize_struct(VkPhysicalDeviceYcbcrImageArraysFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceYcbcrImageArraysFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.ycbcrImageArrays)=reader.getycbcrImageArrays();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceYcbcrImageArraysFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceYcbcrImageArraysFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkImageViewHandleInfoNVX::Builder& builder, VkImageViewHandleInfoNVX member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setimageView(serialize_handle(member.imageView));}();
[&](){[&](){[&](){return builder.setdescriptorType((member.descriptorType));}();}();}();
[&](){return builder.setsampler(serialize_handle(member.sampler));}();
}

    VkImageViewHandleInfoNVX deserialize_struct(VkImageViewHandleInfoNVX::Reader reader){
        auto result=VkImageViewHandleInfoNVX();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.imageView)=deserialize_handle(reader.getimageView());}();
[&](){[&](){[&](){(result.descriptorType)=reader.getdescriptorType();}();}();}();
[&](){(result.sampler)=deserialize_handle(reader.getsampler());}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkImageViewHandleInfoNVX member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkImageViewHandleInfoNVX member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkImageViewAddressPropertiesNVX::Builder& builder, VkImageViewAddressPropertiesNVX member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setdeviceAddress((member.deviceAddress));}();}();
[&](){[&](){return builder.setsize((member.size));}();}();
}

    VkImageViewAddressPropertiesNVX deserialize_struct(VkImageViewAddressPropertiesNVX::Reader reader){
        auto result=VkImageViewAddressPropertiesNVX();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.deviceAddress)=reader.getdeviceAddress();}();}();
[&](){[&](){(result.size)=reader.getsize();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkImageViewAddressPropertiesNVX member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkImageViewAddressPropertiesNVX member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineCreationFeedback::Builder& builder, VkPipelineCreationFeedback member){
        
    
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){return builder.setduration((member.duration));}();
}

    VkPipelineCreationFeedback deserialize_struct(VkPipelineCreationFeedback::Reader reader){
        auto result=VkPipelineCreationFeedback();
    
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){(result.duration)=reader.getduration();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineCreationFeedback member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineCreationFeedback member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineCreationFeedbackCreateInfo::Builder& builder, VkPipelineCreationFeedbackCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            if ((member.pPipelineCreationFeedback)==NULL){
                builder.disownpPipelineCreationFeedback();
            return; }
        auto proto_arr=builder.initpPipelineCreationFeedback();
        for(int tXpPWXb=0; tXpPWXb < 1; tXpPWXb++){
            [&](){
            auto temp=proto_arr[tXpPWXb];
            return serialize_struct(((member.pPipelineCreationFeedback)[tXpPWXb]), temp);
            }();
        }
        }();
[&](){return builder.setpipelineStageCreationFeedbackCount((member.pipelineStageCreationFeedbackCount));}();
[&](){
            if ((member.pPipelineStageCreationFeedbacks)==NULL){
                builder.disownpPipelineStageCreationFeedbacks();
            return; }
        auto proto_arr=builder.initpPipelineStageCreationFeedbacks();
        for(int MaEvDCo=0; MaEvDCo < member.pipelineStageCreationFeedbackCount; MaEvDCo++){
            [&](){
            auto temp=proto_arr[MaEvDCo];
            return serialize_struct(((member.pPipelineStageCreationFeedbacks)[MaEvDCo]), temp);
            }();
        }
        }();
}

    VkPipelineCreationFeedbackCreateInfo deserialize_struct(VkPipelineCreationFeedbackCreateInfo::Reader reader){
        auto result=VkPipelineCreationFeedbackCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){
            if (!reader.haspPipelineCreationFeedback()){
                (result.pPipelineCreationFeedback)=NULL;
            return; }{native_concat()}=(VkPipelineCreationFeedback*)malloc(1*sizeof(VkPipelineCreationFeedback));
        auto proto_arr=reader.getpPipelineCreationFeedback(1);
        for(int tXpPWXb=0; tXpPWXb < 1; tXpPWXb++){
            [&](){
            auto temp=proto_arr[tXpPWXb];
            ((result.pPipelineCreationFeedback)[tXpPWXb])=deserialize_struct(temp);
            }();
        }
        }();
[&](){(result.pipelineStageCreationFeedbackCount)=reader.getpipelineStageCreationFeedbackCount();}();
[&](){
            if (!reader.haspPipelineStageCreationFeedbacks()){
                (result.pPipelineStageCreationFeedbacks)=NULL;
            return; }{native_concat()}=(VkPipelineCreationFeedback*)malloc(result.pipelineStageCreationFeedbackCount*sizeof(VkPipelineCreationFeedback));
        auto proto_arr=reader.getpPipelineStageCreationFeedbacks(result.pipelineStageCreationFeedbackCount);
        for(int MaEvDCo=0; MaEvDCo < result.pipelineStageCreationFeedbackCount; MaEvDCo++){
            [&](){
            auto temp=proto_arr[MaEvDCo];
            ((result.pPipelineStageCreationFeedbacks)[MaEvDCo])=deserialize_struct(temp);
            }();
        }
        }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineCreationFeedbackCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineCreationFeedbackCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDevicePresentBarrierFeaturesNV::Builder& builder, VkPhysicalDevicePresentBarrierFeaturesNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setpresentBarrier((member.presentBarrier));}();}();
}

    VkPhysicalDevicePresentBarrierFeaturesNV deserialize_struct(VkPhysicalDevicePresentBarrierFeaturesNV::Reader reader){
        auto result=VkPhysicalDevicePresentBarrierFeaturesNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.presentBarrier)=reader.getpresentBarrier();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDevicePresentBarrierFeaturesNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDevicePresentBarrierFeaturesNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSurfaceCapabilitiesPresentBarrierNV::Builder& builder, VkSurfaceCapabilitiesPresentBarrierNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setpresentBarrierSupported((member.presentBarrierSupported));}();}();
}

    VkSurfaceCapabilitiesPresentBarrierNV deserialize_struct(VkSurfaceCapabilitiesPresentBarrierNV::Reader reader){
        auto result=VkSurfaceCapabilitiesPresentBarrierNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.presentBarrierSupported)=reader.getpresentBarrierSupported();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSurfaceCapabilitiesPresentBarrierNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSurfaceCapabilitiesPresentBarrierNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSwapchainPresentBarrierCreateInfoNV::Builder& builder, VkSwapchainPresentBarrierCreateInfoNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setpresentBarrierEnable((member.presentBarrierEnable));}();}();
}

    VkSwapchainPresentBarrierCreateInfoNV deserialize_struct(VkSwapchainPresentBarrierCreateInfoNV::Reader reader){
        auto result=VkSwapchainPresentBarrierCreateInfoNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.presentBarrierEnable)=reader.getpresentBarrierEnable();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSwapchainPresentBarrierCreateInfoNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSwapchainPresentBarrierCreateInfoNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDevicePerformanceQueryFeaturesKHR::Builder& builder, VkPhysicalDevicePerformanceQueryFeaturesKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setperformanceCounterQueryPools((member.performanceCounterQueryPools));}();}();
[&](){[&](){return builder.setperformanceCounterMultipleQueryPools((member.performanceCounterMultipleQueryPools));}();}();
}

    VkPhysicalDevicePerformanceQueryFeaturesKHR deserialize_struct(VkPhysicalDevicePerformanceQueryFeaturesKHR::Reader reader){
        auto result=VkPhysicalDevicePerformanceQueryFeaturesKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.performanceCounterQueryPools)=reader.getperformanceCounterQueryPools();}();}();
[&](){[&](){(result.performanceCounterMultipleQueryPools)=reader.getperformanceCounterMultipleQueryPools();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDevicePerformanceQueryFeaturesKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDevicePerformanceQueryFeaturesKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDevicePerformanceQueryPropertiesKHR::Builder& builder, VkPhysicalDevicePerformanceQueryPropertiesKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setallowCommandBufferQueryCopies((member.allowCommandBufferQueryCopies));}();}();
}

    VkPhysicalDevicePerformanceQueryPropertiesKHR deserialize_struct(VkPhysicalDevicePerformanceQueryPropertiesKHR::Reader reader){
        auto result=VkPhysicalDevicePerformanceQueryPropertiesKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.allowCommandBufferQueryCopies)=reader.getallowCommandBufferQueryCopies();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDevicePerformanceQueryPropertiesKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDevicePerformanceQueryPropertiesKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPerformanceCounterKHR::Builder& builder, VkPerformanceCounterKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setunit((member.unit));}();}();}();
[&](){[&](){[&](){return builder.setscope((member.scope));}();}();}();
[&](){[&](){[&](){return builder.setstorage((member.storage));}();}();}();
[&](){
        auto proto_arr=builder.inituuid();
        for(int vzBFmFc=0; vzBFmFc < VK_UUID_SIZE; vzBFmFc++){
            [&](){return proto_arr.set(vzBFmFc,((member.uuid)[vzBFmFc]));}();
        }
        }();
}

    VkPerformanceCounterKHR deserialize_struct(VkPerformanceCounterKHR::Reader reader){
        auto result=VkPerformanceCounterKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.unit)=reader.getunit();}();}();}();
[&](){[&](){[&](){(result.scope)=reader.getscope();}();}();}();
[&](){[&](){[&](){(result.storage)=reader.getstorage();}();}();}();
[&](){
        auto proto_arr=reader.getuuid(VK_UUID_SIZE);
        for(int vzBFmFc=0; vzBFmFc < VK_UUID_SIZE; vzBFmFc++){
            [&](){((result.uuid)[vzBFmFc])=proto_arr[vzBFmFc];}();
        }
        }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPerformanceCounterKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPerformanceCounterKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPerformanceCounterDescriptionKHR::Builder& builder, VkPerformanceCounterDescriptionKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){
        auto proto_arr=builder.initname();
        for(int hWobsSN=0; hWobsSN < VK_MAX_DESCRIPTION_SIZE; hWobsSN++){
            [&](){return proto_arr.set(hWobsSN,((member.name)[hWobsSN]));}();
        }
        }();
[&](){
        auto proto_arr=builder.initcategory();
        for(int nMrMOOK=0; nMrMOOK < VK_MAX_DESCRIPTION_SIZE; nMrMOOK++){
            [&](){return proto_arr.set(nMrMOOK,((member.category)[nMrMOOK]));}();
        }
        }();
[&](){
        auto proto_arr=builder.initdescription();
        for(int oakWTIB=0; oakWTIB < VK_MAX_DESCRIPTION_SIZE; oakWTIB++){
            [&](){return proto_arr.set(oakWTIB,((member.description)[oakWTIB]));}();
        }
        }();
}

    VkPerformanceCounterDescriptionKHR deserialize_struct(VkPerformanceCounterDescriptionKHR::Reader reader){
        auto result=VkPerformanceCounterDescriptionKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){
        auto proto_arr=reader.getname(VK_MAX_DESCRIPTION_SIZE);
        for(int hWobsSN=0; hWobsSN < VK_MAX_DESCRIPTION_SIZE; hWobsSN++){
            [&](){((result.name)[hWobsSN])=proto_arr[hWobsSN];}();
        }
        }();
[&](){
        auto proto_arr=reader.getcategory(VK_MAX_DESCRIPTION_SIZE);
        for(int nMrMOOK=0; nMrMOOK < VK_MAX_DESCRIPTION_SIZE; nMrMOOK++){
            [&](){((result.category)[nMrMOOK])=proto_arr[nMrMOOK];}();
        }
        }();
[&](){
        auto proto_arr=reader.getdescription(VK_MAX_DESCRIPTION_SIZE);
        for(int oakWTIB=0; oakWTIB < VK_MAX_DESCRIPTION_SIZE; oakWTIB++){
            [&](){((result.description)[oakWTIB])=proto_arr[oakWTIB];}();
        }
        }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPerformanceCounterDescriptionKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPerformanceCounterDescriptionKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkQueryPoolPerformanceCreateInfoKHR::Builder& builder, VkQueryPoolPerformanceCreateInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setqueueFamilyIndex((member.queueFamilyIndex));}();
[&](){return builder.setcounterIndexCount((member.counterIndexCount));}();
[&](){
            if ((member.pCounterIndices)==NULL){
                builder.disownpCounterIndices();
            return; }
        auto proto_arr=builder.initpCounterIndices();
        for(int JseWCIa=0; JseWCIa < member.counterIndexCount; JseWCIa++){
            [&](){return proto_arr.set(JseWCIa,((member.pCounterIndices)[JseWCIa]));}();
        }
        }();
}

    VkQueryPoolPerformanceCreateInfoKHR deserialize_struct(VkQueryPoolPerformanceCreateInfoKHR::Reader reader){
        auto result=VkQueryPoolPerformanceCreateInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.queueFamilyIndex)=reader.getqueueFamilyIndex();}();
[&](){(result.counterIndexCount)=reader.getcounterIndexCount();}();
[&](){ uint32_t* temp_GtnxQvB[&](){
            if (!reader.haspCounterIndices()){
                (result.pCounterIndices)=NULL;
            return; }{native_concat()}=(uint32_t*)malloc(result.counterIndexCount*sizeof(uint32_t));
        auto proto_arr=reader.getpCounterIndices(result.counterIndexCount);
        for(int giXouEF=0; giXouEF < result.counterIndexCount; giXouEF++){
            [&](){((result.pCounterIndices)[giXouEF])=proto_arr[giXouEF];}();
        }
        }();(result.pCounterIndices)=temp_GtnxQvB;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkQueryPoolPerformanceCreateInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkQueryPoolPerformanceCreateInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPerformanceCounterResultKHR::Builder& builder, VkPerformanceCounterResultKHR member){
        
    
[&](){return builder.setint32((member.int32));}();
[&](){return builder.setint64((member.int64));}();
[&](){return builder.setuint32((member.uint32));}();
[&](){return builder.setuint64((member.uint64));}();
[&](){return builder.setfloat32((member.float32));}();
[&](){return builder.setfloat64((member.float64));}();
}

    VkPerformanceCounterResultKHR deserialize_struct(VkPerformanceCounterResultKHR::Reader reader){
        auto result=VkPerformanceCounterResultKHR();
    
[&](){(result.int32)=reader.getint32();}();
[&](){(result.int64)=reader.getint64();}();
[&](){(result.uint32)=reader.getuint32();}();
[&](){(result.uint64)=reader.getuint64();}();
[&](){(result.float32)=reader.getfloat32();}();
[&](){(result.float64)=reader.getfloat64();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPerformanceCounterResultKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPerformanceCounterResultKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkAcquireProfilingLockInfoKHR::Builder& builder, VkAcquireProfilingLockInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){return builder.settimeout((member.timeout));}();
}

    VkAcquireProfilingLockInfoKHR deserialize_struct(VkAcquireProfilingLockInfoKHR::Reader reader){
        auto result=VkAcquireProfilingLockInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){(result.timeout)=reader.gettimeout();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkAcquireProfilingLockInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkAcquireProfilingLockInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPerformanceQuerySubmitInfoKHR::Builder& builder, VkPerformanceQuerySubmitInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setcounterPassIndex((member.counterPassIndex));}();
}

    VkPerformanceQuerySubmitInfoKHR deserialize_struct(VkPerformanceQuerySubmitInfoKHR::Reader reader){
        auto result=VkPerformanceQuerySubmitInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.counterPassIndex)=reader.getcounterPassIndex();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPerformanceQuerySubmitInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPerformanceQuerySubmitInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkHeadlessSurfaceCreateInfoEXT::Builder& builder, VkHeadlessSurfaceCreateInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
}

    VkHeadlessSurfaceCreateInfoEXT deserialize_struct(VkHeadlessSurfaceCreateInfoEXT::Reader reader){
        auto result=VkHeadlessSurfaceCreateInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkHeadlessSurfaceCreateInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkHeadlessSurfaceCreateInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceCoverageReductionModeFeaturesNV::Builder& builder, VkPhysicalDeviceCoverageReductionModeFeaturesNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setcoverageReductionMode((member.coverageReductionMode));}();}();
}

    VkPhysicalDeviceCoverageReductionModeFeaturesNV deserialize_struct(VkPhysicalDeviceCoverageReductionModeFeaturesNV::Reader reader){
        auto result=VkPhysicalDeviceCoverageReductionModeFeaturesNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.coverageReductionMode)=reader.getcoverageReductionMode();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceCoverageReductionModeFeaturesNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceCoverageReductionModeFeaturesNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineCoverageReductionStateCreateInfoNV::Builder& builder, VkPipelineCoverageReductionStateCreateInfoNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){[&](){[&](){return builder.setcoverageReductionMode((member.coverageReductionMode));}();}();}();
}

    VkPipelineCoverageReductionStateCreateInfoNV deserialize_struct(VkPipelineCoverageReductionStateCreateInfoNV::Reader reader){
        auto result=VkPipelineCoverageReductionStateCreateInfoNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){[&](){[&](){(result.coverageReductionMode)=reader.getcoverageReductionMode();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineCoverageReductionStateCreateInfoNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineCoverageReductionStateCreateInfoNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkFramebufferMixedSamplesCombinationNV::Builder& builder, VkFramebufferMixedSamplesCombinationNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setcoverageReductionMode((member.coverageReductionMode));}();}();}();
[&](){[&](){[&](){return builder.setrasterizationSamples((member.rasterizationSamples));}();}();}();
[&](){[&](){[&](){return builder.setdepthStencilSamples((member.depthStencilSamples));}();}();}();
[&](){[&](){[&](){return builder.setcolorSamples((member.colorSamples));}();}();}();
}

    VkFramebufferMixedSamplesCombinationNV deserialize_struct(VkFramebufferMixedSamplesCombinationNV::Reader reader){
        auto result=VkFramebufferMixedSamplesCombinationNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.coverageReductionMode)=reader.getcoverageReductionMode();}();}();}();
[&](){[&](){[&](){(result.rasterizationSamples)=reader.getrasterizationSamples();}();}();}();
[&](){[&](){[&](){(result.depthStencilSamples)=reader.getdepthStencilSamples();}();}();}();
[&](){[&](){[&](){(result.colorSamples)=reader.getcolorSamples();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkFramebufferMixedSamplesCombinationNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkFramebufferMixedSamplesCombinationNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL::Builder& builder, VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setshaderIntegerFunctions2((member.shaderIntegerFunctions2));}();}();
}

    VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL deserialize_struct(VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL::Reader reader){
        auto result=VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.shaderIntegerFunctions2)=reader.getshaderIntegerFunctions2();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPerformanceValueDataINTEL::Builder& builder, VkPerformanceValueDataINTEL member){
        
    
[&](){return builder.setvalue32((member.value32));}();
[&](){return builder.setvalue64((member.value64));}();
[&](){return builder.setvalueFloat((member.valueFloat));}();
[&](){[&](){return builder.setvalueBool((member.valueBool));}();}();
[&](){
            if ((member.valueString)==NULL){
                builder.disownvalueString();
            return; }
        auto proto_arr=builder.initvalueString();
        for(int RsZQIXp=0; RsZQIXp < strlen((member.valueString))+1; RsZQIXp++){
            [&](){return proto_arr.set(RsZQIXp,((member.valueString)[RsZQIXp]));}();
        }
        }();
}

    VkPerformanceValueDataINTEL deserialize_struct(VkPerformanceValueDataINTEL::Reader reader){
        auto result=VkPerformanceValueDataINTEL();
    
[&](){(result.value32)=reader.getvalue32();}();
[&](){(result.value64)=reader.getvalue64();}();
[&](){(result.valueFloat)=reader.getvalueFloat();}();
[&](){[&](){(result.valueBool)=reader.getvalueBool();}();}();
[&](){ char* temp_fJvAAoV[&](){
            if (!reader.hasvalueString()){
                (result.valueString)=NULL;
            return; }{native_concat()}=(char*)malloc(reader.getvalueString().size();*sizeof(char));
        auto proto_arr=reader.getvalueString(reader.getvalueString().size(););
        for(int oRlonMs=0; oRlonMs < reader.getvalueString().size();; oRlonMs++){
            [&](){((result.valueString)[oRlonMs])=proto_arr[oRlonMs];}();
        }
        }();(result.valueString)=temp_fJvAAoV;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPerformanceValueDataINTEL member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPerformanceValueDataINTEL member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPerformanceValueINTEL::Builder& builder, VkPerformanceValueINTEL member){
        
    
[&](){[&](){[&](){return builder.settype((member.type));}();}();}();
[&](){
            auto temp=builder.initdata(data);
            return serialize_struct((member.data), temp);
            }();
}

    VkPerformanceValueINTEL deserialize_struct(VkPerformanceValueINTEL::Reader reader){
        auto result=VkPerformanceValueINTEL();
    
[&](){[&](){[&](){(result.type)=reader.gettype();}();}();}();
[&](){
            auto temp=reader.getdata();
            (result.data)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPerformanceValueINTEL member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPerformanceValueINTEL member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkInitializePerformanceApiInfoINTEL::Builder& builder, VkInitializePerformanceApiInfoINTEL member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            auto temp=builder.initpUserData(pUserData);
            return serialize_struct((member.pUserData), temp);
            }();
}

    VkInitializePerformanceApiInfoINTEL deserialize_struct(VkInitializePerformanceApiInfoINTEL::Reader reader){
        auto result=VkInitializePerformanceApiInfoINTEL();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){
            auto temp=reader.getpUserData();
            (result.pUserData)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkInitializePerformanceApiInfoINTEL member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkInitializePerformanceApiInfoINTEL member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkQueryPoolPerformanceQueryCreateInfoINTEL::Builder& builder, VkQueryPoolPerformanceQueryCreateInfoINTEL member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setperformanceCountersSampling((member.performanceCountersSampling));}();}();}();
}

    VkQueryPoolPerformanceQueryCreateInfoINTEL deserialize_struct(VkQueryPoolPerformanceQueryCreateInfoINTEL::Reader reader){
        auto result=VkQueryPoolPerformanceQueryCreateInfoINTEL();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.performanceCountersSampling)=reader.getperformanceCountersSampling();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkQueryPoolPerformanceQueryCreateInfoINTEL member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkQueryPoolPerformanceQueryCreateInfoINTEL member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPerformanceMarkerInfoINTEL::Builder& builder, VkPerformanceMarkerInfoINTEL member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setmarker((member.marker));}();
}

    VkPerformanceMarkerInfoINTEL deserialize_struct(VkPerformanceMarkerInfoINTEL::Reader reader){
        auto result=VkPerformanceMarkerInfoINTEL();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.marker)=reader.getmarker();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPerformanceMarkerInfoINTEL member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPerformanceMarkerInfoINTEL member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPerformanceStreamMarkerInfoINTEL::Builder& builder, VkPerformanceStreamMarkerInfoINTEL member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setmarker((member.marker));}();
}

    VkPerformanceStreamMarkerInfoINTEL deserialize_struct(VkPerformanceStreamMarkerInfoINTEL::Reader reader){
        auto result=VkPerformanceStreamMarkerInfoINTEL();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.marker)=reader.getmarker();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPerformanceStreamMarkerInfoINTEL member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPerformanceStreamMarkerInfoINTEL member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPerformanceOverrideInfoINTEL::Builder& builder, VkPerformanceOverrideInfoINTEL member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.settype((member.type));}();}();}();
[&](){[&](){return builder.setenable((member.enable));}();}();
[&](){return builder.setparameter((member.parameter));}();
}

    VkPerformanceOverrideInfoINTEL deserialize_struct(VkPerformanceOverrideInfoINTEL::Reader reader){
        auto result=VkPerformanceOverrideInfoINTEL();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.type)=reader.gettype();}();}();}();
[&](){[&](){(result.enable)=reader.getenable();}();}();
[&](){(result.parameter)=reader.getparameter();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPerformanceOverrideInfoINTEL member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPerformanceOverrideInfoINTEL member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPerformanceConfigurationAcquireInfoINTEL::Builder& builder, VkPerformanceConfigurationAcquireInfoINTEL member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.settype((member.type));}();}();}();
}

    VkPerformanceConfigurationAcquireInfoINTEL deserialize_struct(VkPerformanceConfigurationAcquireInfoINTEL::Reader reader){
        auto result=VkPerformanceConfigurationAcquireInfoINTEL();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.type)=reader.gettype();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPerformanceConfigurationAcquireInfoINTEL member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPerformanceConfigurationAcquireInfoINTEL member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceShaderClockFeaturesKHR::Builder& builder, VkPhysicalDeviceShaderClockFeaturesKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setshaderSubgroupClock((member.shaderSubgroupClock));}();}();
[&](){[&](){return builder.setshaderDeviceClock((member.shaderDeviceClock));}();}();
}

    VkPhysicalDeviceShaderClockFeaturesKHR deserialize_struct(VkPhysicalDeviceShaderClockFeaturesKHR::Reader reader){
        auto result=VkPhysicalDeviceShaderClockFeaturesKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.shaderSubgroupClock)=reader.getshaderSubgroupClock();}();}();
[&](){[&](){(result.shaderDeviceClock)=reader.getshaderDeviceClock();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceShaderClockFeaturesKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceShaderClockFeaturesKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceIndexTypeUint8FeaturesEXT::Builder& builder, VkPhysicalDeviceIndexTypeUint8FeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setindexTypeUint8((member.indexTypeUint8));}();}();
}

    VkPhysicalDeviceIndexTypeUint8FeaturesEXT deserialize_struct(VkPhysicalDeviceIndexTypeUint8FeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceIndexTypeUint8FeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.indexTypeUint8)=reader.getindexTypeUint8();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceIndexTypeUint8FeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceIndexTypeUint8FeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceShaderSMBuiltinsPropertiesNV::Builder& builder, VkPhysicalDeviceShaderSMBuiltinsPropertiesNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setshaderSMCount((member.shaderSMCount));}();
[&](){return builder.setshaderWarpsPerSM((member.shaderWarpsPerSM));}();
}

    VkPhysicalDeviceShaderSMBuiltinsPropertiesNV deserialize_struct(VkPhysicalDeviceShaderSMBuiltinsPropertiesNV::Reader reader){
        auto result=VkPhysicalDeviceShaderSMBuiltinsPropertiesNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.shaderSMCount)=reader.getshaderSMCount();}();
[&](){(result.shaderWarpsPerSM)=reader.getshaderWarpsPerSM();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceShaderSMBuiltinsPropertiesNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceShaderSMBuiltinsPropertiesNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceShaderSMBuiltinsFeaturesNV::Builder& builder, VkPhysicalDeviceShaderSMBuiltinsFeaturesNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setshaderSMBuiltins((member.shaderSMBuiltins));}();}();
}

    VkPhysicalDeviceShaderSMBuiltinsFeaturesNV deserialize_struct(VkPhysicalDeviceShaderSMBuiltinsFeaturesNV::Reader reader){
        auto result=VkPhysicalDeviceShaderSMBuiltinsFeaturesNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.shaderSMBuiltins)=reader.getshaderSMBuiltins();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceShaderSMBuiltinsFeaturesNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceShaderSMBuiltinsFeaturesNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT::Builder& builder, VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setfragmentShaderSampleInterlock((member.fragmentShaderSampleInterlock));}();}();
[&](){[&](){return builder.setfragmentShaderPixelInterlock((member.fragmentShaderPixelInterlock));}();}();
[&](){[&](){return builder.setfragmentShaderShadingRateInterlock((member.fragmentShaderShadingRateInterlock));}();}();
}

    VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT deserialize_struct(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.fragmentShaderSampleInterlock)=reader.getfragmentShaderSampleInterlock();}();}();
[&](){[&](){(result.fragmentShaderPixelInterlock)=reader.getfragmentShaderPixelInterlock();}();}();
[&](){[&](){(result.fragmentShaderShadingRateInterlock)=reader.getfragmentShaderShadingRateInterlock();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures::Builder& builder, VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setseparateDepthStencilLayouts((member.separateDepthStencilLayouts));}();}();
}

    VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures deserialize_struct(VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures::Reader reader){
        auto result=VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.separateDepthStencilLayouts)=reader.getseparateDepthStencilLayouts();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkAttachmentReferenceStencilLayout::Builder& builder, VkAttachmentReferenceStencilLayout member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setstencilLayout((member.stencilLayout));}();}();}();
}

    VkAttachmentReferenceStencilLayout deserialize_struct(VkAttachmentReferenceStencilLayout::Reader reader){
        auto result=VkAttachmentReferenceStencilLayout();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.stencilLayout)=reader.getstencilLayout();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkAttachmentReferenceStencilLayout member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkAttachmentReferenceStencilLayout member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT::Builder& builder, VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setprimitiveTopologyListRestart((member.primitiveTopologyListRestart));}();}();
[&](){[&](){return builder.setprimitiveTopologyPatchListRestart((member.primitiveTopologyPatchListRestart));}();}();
}

    VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT deserialize_struct(VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT::Reader reader){
        auto result=VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.primitiveTopologyListRestart)=reader.getprimitiveTopologyListRestart();}();}();
[&](){[&](){(result.primitiveTopologyPatchListRestart)=reader.getprimitiveTopologyPatchListRestart();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkAttachmentDescriptionStencilLayout::Builder& builder, VkAttachmentDescriptionStencilLayout member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setstencilInitialLayout((member.stencilInitialLayout));}();}();}();
[&](){[&](){[&](){return builder.setstencilFinalLayout((member.stencilFinalLayout));}();}();}();
}

    VkAttachmentDescriptionStencilLayout deserialize_struct(VkAttachmentDescriptionStencilLayout::Reader reader){
        auto result=VkAttachmentDescriptionStencilLayout();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.stencilInitialLayout)=reader.getstencilInitialLayout();}();}();}();
[&](){[&](){[&](){(result.stencilFinalLayout)=reader.getstencilFinalLayout();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkAttachmentDescriptionStencilLayout member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkAttachmentDescriptionStencilLayout member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR::Builder& builder, VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setpipelineExecutableInfo((member.pipelineExecutableInfo));}();}();
}

    VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR deserialize_struct(VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR::Reader reader){
        auto result=VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.pipelineExecutableInfo)=reader.getpipelineExecutableInfo();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineInfoKHR::Builder& builder, VkPipelineInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setpipeline(serialize_handle(member.pipeline));}();
}

    VkPipelineInfoKHR deserialize_struct(VkPipelineInfoKHR::Reader reader){
        auto result=VkPipelineInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.pipeline)=deserialize_handle(reader.getpipeline());}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineExecutablePropertiesKHR::Builder& builder, VkPipelineExecutablePropertiesKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setstages((member.stages));}();}();}();
[&](){
        auto proto_arr=builder.initname();
        for(int hWobsSN=0; hWobsSN < VK_MAX_DESCRIPTION_SIZE; hWobsSN++){
            [&](){return proto_arr.set(hWobsSN,((member.name)[hWobsSN]));}();
        }
        }();
[&](){
        auto proto_arr=builder.initdescription();
        for(int oakWTIB=0; oakWTIB < VK_MAX_DESCRIPTION_SIZE; oakWTIB++){
            [&](){return proto_arr.set(oakWTIB,((member.description)[oakWTIB]));}();
        }
        }();
[&](){return builder.setsubgroupSize((member.subgroupSize));}();
}

    VkPipelineExecutablePropertiesKHR deserialize_struct(VkPipelineExecutablePropertiesKHR::Reader reader){
        auto result=VkPipelineExecutablePropertiesKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.stages)=reader.getstages();}();}();}();
[&](){
        auto proto_arr=reader.getname(VK_MAX_DESCRIPTION_SIZE);
        for(int hWobsSN=0; hWobsSN < VK_MAX_DESCRIPTION_SIZE; hWobsSN++){
            [&](){((result.name)[hWobsSN])=proto_arr[hWobsSN];}();
        }
        }();
[&](){
        auto proto_arr=reader.getdescription(VK_MAX_DESCRIPTION_SIZE);
        for(int oakWTIB=0; oakWTIB < VK_MAX_DESCRIPTION_SIZE; oakWTIB++){
            [&](){((result.description)[oakWTIB])=proto_arr[oakWTIB];}();
        }
        }();
[&](){(result.subgroupSize)=reader.getsubgroupSize();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineExecutablePropertiesKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineExecutablePropertiesKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineExecutableInfoKHR::Builder& builder, VkPipelineExecutableInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setpipeline(serialize_handle(member.pipeline));}();
[&](){return builder.setexecutableIndex((member.executableIndex));}();
}

    VkPipelineExecutableInfoKHR deserialize_struct(VkPipelineExecutableInfoKHR::Reader reader){
        auto result=VkPipelineExecutableInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.pipeline)=deserialize_handle(reader.getpipeline());}();
[&](){(result.executableIndex)=reader.getexecutableIndex();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineExecutableInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineExecutableInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineExecutableStatisticValueKHR::Builder& builder, VkPipelineExecutableStatisticValueKHR member){
        
    
[&](){[&](){return builder.setb32((member.b32));}();}();
[&](){return builder.seti64((member.i64));}();
[&](){return builder.setu64((member.u64));}();
[&](){return builder.setf64((member.f64));}();
}

    VkPipelineExecutableStatisticValueKHR deserialize_struct(VkPipelineExecutableStatisticValueKHR::Reader reader){
        auto result=VkPipelineExecutableStatisticValueKHR();
    
[&](){[&](){(result.b32)=reader.getb32();}();}();
[&](){(result.i64)=reader.geti64();}();
[&](){(result.u64)=reader.getu64();}();
[&](){(result.f64)=reader.getf64();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineExecutableStatisticValueKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineExecutableStatisticValueKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineExecutableStatisticKHR::Builder& builder, VkPipelineExecutableStatisticKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
        auto proto_arr=builder.initname();
        for(int hWobsSN=0; hWobsSN < VK_MAX_DESCRIPTION_SIZE; hWobsSN++){
            [&](){return proto_arr.set(hWobsSN,((member.name)[hWobsSN]));}();
        }
        }();
[&](){
        auto proto_arr=builder.initdescription();
        for(int oakWTIB=0; oakWTIB < VK_MAX_DESCRIPTION_SIZE; oakWTIB++){
            [&](){return proto_arr.set(oakWTIB,((member.description)[oakWTIB]));}();
        }
        }();
[&](){[&](){[&](){return builder.setformat((member.format));}();}();}();
[&](){
            auto temp=builder.initvalue(value);
            return serialize_struct((member.value), temp);
            }();
}

    VkPipelineExecutableStatisticKHR deserialize_struct(VkPipelineExecutableStatisticKHR::Reader reader){
        auto result=VkPipelineExecutableStatisticKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){
        auto proto_arr=reader.getname(VK_MAX_DESCRIPTION_SIZE);
        for(int hWobsSN=0; hWobsSN < VK_MAX_DESCRIPTION_SIZE; hWobsSN++){
            [&](){((result.name)[hWobsSN])=proto_arr[hWobsSN];}();
        }
        }();
[&](){
        auto proto_arr=reader.getdescription(VK_MAX_DESCRIPTION_SIZE);
        for(int oakWTIB=0; oakWTIB < VK_MAX_DESCRIPTION_SIZE; oakWTIB++){
            [&](){((result.description)[oakWTIB])=proto_arr[oakWTIB];}();
        }
        }();
[&](){[&](){[&](){(result.format)=reader.getformat();}();}();}();
[&](){
            auto temp=reader.getvalue();
            (result.value)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineExecutableStatisticKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineExecutableStatisticKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineExecutableInternalRepresentationKHR::Builder& builder, VkPipelineExecutableInternalRepresentationKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
        auto proto_arr=builder.initname();
        for(int hWobsSN=0; hWobsSN < VK_MAX_DESCRIPTION_SIZE; hWobsSN++){
            [&](){return proto_arr.set(hWobsSN,((member.name)[hWobsSN]));}();
        }
        }();
[&](){
        auto proto_arr=builder.initdescription();
        for(int oakWTIB=0; oakWTIB < VK_MAX_DESCRIPTION_SIZE; oakWTIB++){
            [&](){return proto_arr.set(oakWTIB,((member.description)[oakWTIB]));}();
        }
        }();
[&](){[&](){return builder.setisText((member.isText));}();}();
[&](){return builder.setdataSize((member.dataSize));}();
[&](){
            if ((member.pData)==NULL){
                builder.disownpData();
            return; }[&](){
            if (((char*)(member.pData).pData)==NULL){
                builder.disownpData();
            return; }
        auto proto_arr=builder.initpData();
        for(int AJXlqIY=0; AJXlqIY < member.dataSize; AJXlqIY++){
            [&](){return proto_arr.set(AJXlqIY,(((char*)(member.pData).pData)[AJXlqIY]));}();
        }
        }();}();
}

    VkPipelineExecutableInternalRepresentationKHR deserialize_struct(VkPipelineExecutableInternalRepresentationKHR::Reader reader){
        auto result=VkPipelineExecutableInternalRepresentationKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){
        auto proto_arr=reader.getname(VK_MAX_DESCRIPTION_SIZE);
        for(int hWobsSN=0; hWobsSN < VK_MAX_DESCRIPTION_SIZE; hWobsSN++){
            [&](){((result.name)[hWobsSN])=proto_arr[hWobsSN];}();
        }
        }();
[&](){
        auto proto_arr=reader.getdescription(VK_MAX_DESCRIPTION_SIZE);
        for(int oakWTIB=0; oakWTIB < VK_MAX_DESCRIPTION_SIZE; oakWTIB++){
            [&](){((result.description)[oakWTIB])=proto_arr[oakWTIB];}();
        }
        }();
[&](){[&](){(result.isText)=reader.getisText();}();}();
[&](){(result.dataSize)=reader.getdataSize();}();
[&](){
            if (!reader.haspData()){
                (result.pData)=NULL;
            return; }char* temp_THmQoYp;[&](){
            if (!reader.haspData()){
                (temp_THmQoYp.pData)=NULL;
            return; }{native_concat()}=(char*)malloc(result.dataSize*sizeof(char));
        auto proto_arr=reader.getpData(result.dataSize);
        for(int AJXlqIY=0; AJXlqIY < result.dataSize; AJXlqIY++){
            [&](){((temp_THmQoYp.pData)[AJXlqIY])=proto_arr[AJXlqIY];}();
        }
        }();(result.pData)=temp_THmQoYp;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineExecutableInternalRepresentationKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineExecutableInternalRepresentationKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures::Builder& builder, VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setshaderDemoteToHelperInvocation((member.shaderDemoteToHelperInvocation));}();}();
}

    VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures deserialize_struct(VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures::Reader reader){
        auto result=VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.shaderDemoteToHelperInvocation)=reader.getshaderDemoteToHelperInvocation();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT::Builder& builder, VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.settexelBufferAlignment((member.texelBufferAlignment));}();}();
}

    VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT deserialize_struct(VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.texelBufferAlignment)=reader.gettexelBufferAlignment();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceTexelBufferAlignmentProperties::Builder& builder, VkPhysicalDeviceTexelBufferAlignmentProperties member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setstorageTexelBufferOffsetAlignmentBytes((member.storageTexelBufferOffsetAlignmentBytes));}();}();
[&](){[&](){return builder.setstorageTexelBufferOffsetSingleTexelAlignment((member.storageTexelBufferOffsetSingleTexelAlignment));}();}();
[&](){[&](){return builder.setuniformTexelBufferOffsetAlignmentBytes((member.uniformTexelBufferOffsetAlignmentBytes));}();}();
[&](){[&](){return builder.setuniformTexelBufferOffsetSingleTexelAlignment((member.uniformTexelBufferOffsetSingleTexelAlignment));}();}();
}

    VkPhysicalDeviceTexelBufferAlignmentProperties deserialize_struct(VkPhysicalDeviceTexelBufferAlignmentProperties::Reader reader){
        auto result=VkPhysicalDeviceTexelBufferAlignmentProperties();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.storageTexelBufferOffsetAlignmentBytes)=reader.getstorageTexelBufferOffsetAlignmentBytes();}();}();
[&](){[&](){(result.storageTexelBufferOffsetSingleTexelAlignment)=reader.getstorageTexelBufferOffsetSingleTexelAlignment();}();}();
[&](){[&](){(result.uniformTexelBufferOffsetAlignmentBytes)=reader.getuniformTexelBufferOffsetAlignmentBytes();}();}();
[&](){[&](){(result.uniformTexelBufferOffsetSingleTexelAlignment)=reader.getuniformTexelBufferOffsetSingleTexelAlignment();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceTexelBufferAlignmentProperties member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceTexelBufferAlignmentProperties member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceSubgroupSizeControlFeatures::Builder& builder, VkPhysicalDeviceSubgroupSizeControlFeatures member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setsubgroupSizeControl((member.subgroupSizeControl));}();}();
[&](){[&](){return builder.setcomputeFullSubgroups((member.computeFullSubgroups));}();}();
}

    VkPhysicalDeviceSubgroupSizeControlFeatures deserialize_struct(VkPhysicalDeviceSubgroupSizeControlFeatures::Reader reader){
        auto result=VkPhysicalDeviceSubgroupSizeControlFeatures();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.subgroupSizeControl)=reader.getsubgroupSizeControl();}();}();
[&](){[&](){(result.computeFullSubgroups)=reader.getcomputeFullSubgroups();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceSubgroupSizeControlFeatures member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceSubgroupSizeControlFeatures member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceSubgroupSizeControlProperties::Builder& builder, VkPhysicalDeviceSubgroupSizeControlProperties member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setminSubgroupSize((member.minSubgroupSize));}();
[&](){return builder.setmaxSubgroupSize((member.maxSubgroupSize));}();
[&](){return builder.setmaxComputeWorkgroupSubgroups((member.maxComputeWorkgroupSubgroups));}();
[&](){[&](){[&](){return builder.setrequiredSubgroupSizeStages((member.requiredSubgroupSizeStages));}();}();}();
}

    VkPhysicalDeviceSubgroupSizeControlProperties deserialize_struct(VkPhysicalDeviceSubgroupSizeControlProperties::Reader reader){
        auto result=VkPhysicalDeviceSubgroupSizeControlProperties();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.minSubgroupSize)=reader.getminSubgroupSize();}();
[&](){(result.maxSubgroupSize)=reader.getmaxSubgroupSize();}();
[&](){(result.maxComputeWorkgroupSubgroups)=reader.getmaxComputeWorkgroupSubgroups();}();
[&](){[&](){[&](){(result.requiredSubgroupSizeStages)=reader.getrequiredSubgroupSizeStages();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceSubgroupSizeControlProperties member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceSubgroupSizeControlProperties member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineShaderStageRequiredSubgroupSizeCreateInfo::Builder& builder, VkPipelineShaderStageRequiredSubgroupSizeCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setrequiredSubgroupSize((member.requiredSubgroupSize));}();
}

    VkPipelineShaderStageRequiredSubgroupSizeCreateInfo deserialize_struct(VkPipelineShaderStageRequiredSubgroupSizeCreateInfo::Reader reader){
        auto result=VkPipelineShaderStageRequiredSubgroupSizeCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.requiredSubgroupSize)=reader.getrequiredSubgroupSize();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineShaderStageRequiredSubgroupSizeCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineShaderStageRequiredSubgroupSizeCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSubpassShadingPipelineCreateInfoHUAWEI::Builder& builder, VkSubpassShadingPipelineCreateInfoHUAWEI member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setrenderPass(serialize_handle(member.renderPass));}();
[&](){return builder.setsubpass((member.subpass));}();
}

    VkSubpassShadingPipelineCreateInfoHUAWEI deserialize_struct(VkSubpassShadingPipelineCreateInfoHUAWEI::Reader reader){
        auto result=VkSubpassShadingPipelineCreateInfoHUAWEI();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.renderPass)=deserialize_handle(reader.getrenderPass());}();
[&](){(result.subpass)=reader.getsubpass();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSubpassShadingPipelineCreateInfoHUAWEI member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSubpassShadingPipelineCreateInfoHUAWEI member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceSubpassShadingPropertiesHUAWEI::Builder& builder, VkPhysicalDeviceSubpassShadingPropertiesHUAWEI member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setmaxSubpassShadingWorkgroupSizeAspectRatio((member.maxSubpassShadingWorkgroupSizeAspectRatio));}();
}

    VkPhysicalDeviceSubpassShadingPropertiesHUAWEI deserialize_struct(VkPhysicalDeviceSubpassShadingPropertiesHUAWEI::Reader reader){
        auto result=VkPhysicalDeviceSubpassShadingPropertiesHUAWEI();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.maxSubpassShadingWorkgroupSizeAspectRatio)=reader.getmaxSubpassShadingWorkgroupSizeAspectRatio();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceSubpassShadingPropertiesHUAWEI member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceSubpassShadingPropertiesHUAWEI member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI::Builder& builder, VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
        auto proto_arr=builder.initmaxWorkGroupCount();
        for(int uxSgNpu=0; uxSgNpu < 3; uxSgNpu++){
            [&](){return proto_arr.set(uxSgNpu,((member.maxWorkGroupCount)[uxSgNpu]));}();
        }
        }();
[&](){
        auto proto_arr=builder.initmaxWorkGroupSize();
        for(int JubkVsI=0; JubkVsI < 3; JubkVsI++){
            [&](){return proto_arr.set(JubkVsI,((member.maxWorkGroupSize)[JubkVsI]));}();
        }
        }();
[&](){return builder.setmaxOutputClusterCount((member.maxOutputClusterCount));}();
[&](){[&](){return builder.setindirectBufferOffsetAlignment((member.indirectBufferOffsetAlignment));}();}();
}

    VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI deserialize_struct(VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI::Reader reader){
        auto result=VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){
        auto proto_arr=reader.getmaxWorkGroupCount(3);
        for(int uxSgNpu=0; uxSgNpu < 3; uxSgNpu++){
            [&](){((result.maxWorkGroupCount)[uxSgNpu])=proto_arr[uxSgNpu];}();
        }
        }();
[&](){
        auto proto_arr=reader.getmaxWorkGroupSize(3);
        for(int JubkVsI=0; JubkVsI < 3; JubkVsI++){
            [&](){((result.maxWorkGroupSize)[JubkVsI])=proto_arr[JubkVsI];}();
        }
        }();
[&](){(result.maxOutputClusterCount)=reader.getmaxOutputClusterCount();}();
[&](){[&](){(result.indirectBufferOffsetAlignment)=reader.getindirectBufferOffsetAlignment();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkMemoryOpaqueCaptureAddressAllocateInfo::Builder& builder, VkMemoryOpaqueCaptureAddressAllocateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setopaqueCaptureAddress((member.opaqueCaptureAddress));}();
}

    VkMemoryOpaqueCaptureAddressAllocateInfo deserialize_struct(VkMemoryOpaqueCaptureAddressAllocateInfo::Reader reader){
        auto result=VkMemoryOpaqueCaptureAddressAllocateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.opaqueCaptureAddress)=reader.getopaqueCaptureAddress();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkMemoryOpaqueCaptureAddressAllocateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkMemoryOpaqueCaptureAddressAllocateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDeviceMemoryOpaqueCaptureAddressInfo::Builder& builder, VkDeviceMemoryOpaqueCaptureAddressInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setmemory(serialize_handle(member.memory));}();
}

    VkDeviceMemoryOpaqueCaptureAddressInfo deserialize_struct(VkDeviceMemoryOpaqueCaptureAddressInfo::Reader reader){
        auto result=VkDeviceMemoryOpaqueCaptureAddressInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.memory)=deserialize_handle(reader.getmemory());}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDeviceMemoryOpaqueCaptureAddressInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDeviceMemoryOpaqueCaptureAddressInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceLineRasterizationFeaturesEXT::Builder& builder, VkPhysicalDeviceLineRasterizationFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setrectangularLines((member.rectangularLines));}();}();
[&](){[&](){return builder.setbresenhamLines((member.bresenhamLines));}();}();
[&](){[&](){return builder.setsmoothLines((member.smoothLines));}();}();
[&](){[&](){return builder.setstippledRectangularLines((member.stippledRectangularLines));}();}();
[&](){[&](){return builder.setstippledBresenhamLines((member.stippledBresenhamLines));}();}();
[&](){[&](){return builder.setstippledSmoothLines((member.stippledSmoothLines));}();}();
}

    VkPhysicalDeviceLineRasterizationFeaturesEXT deserialize_struct(VkPhysicalDeviceLineRasterizationFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceLineRasterizationFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.rectangularLines)=reader.getrectangularLines();}();}();
[&](){[&](){(result.bresenhamLines)=reader.getbresenhamLines();}();}();
[&](){[&](){(result.smoothLines)=reader.getsmoothLines();}();}();
[&](){[&](){(result.stippledRectangularLines)=reader.getstippledRectangularLines();}();}();
[&](){[&](){(result.stippledBresenhamLines)=reader.getstippledBresenhamLines();}();}();
[&](){[&](){(result.stippledSmoothLines)=reader.getstippledSmoothLines();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceLineRasterizationFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceLineRasterizationFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceLineRasterizationPropertiesEXT::Builder& builder, VkPhysicalDeviceLineRasterizationPropertiesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setlineSubPixelPrecisionBits((member.lineSubPixelPrecisionBits));}();
}

    VkPhysicalDeviceLineRasterizationPropertiesEXT deserialize_struct(VkPhysicalDeviceLineRasterizationPropertiesEXT::Reader reader){
        auto result=VkPhysicalDeviceLineRasterizationPropertiesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.lineSubPixelPrecisionBits)=reader.getlineSubPixelPrecisionBits();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceLineRasterizationPropertiesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceLineRasterizationPropertiesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineRasterizationLineStateCreateInfoEXT::Builder& builder, VkPipelineRasterizationLineStateCreateInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setlineRasterizationMode((member.lineRasterizationMode));}();}();}();
[&](){[&](){return builder.setstippledLineEnable((member.stippledLineEnable));}();}();
[&](){return builder.setlineStippleFactor((member.lineStippleFactor));}();
[&](){return builder.setlineStipplePattern((member.lineStipplePattern));}();
}

    VkPipelineRasterizationLineStateCreateInfoEXT deserialize_struct(VkPipelineRasterizationLineStateCreateInfoEXT::Reader reader){
        auto result=VkPipelineRasterizationLineStateCreateInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.lineRasterizationMode)=reader.getlineRasterizationMode();}();}();}();
[&](){[&](){(result.stippledLineEnable)=reader.getstippledLineEnable();}();}();
[&](){(result.lineStippleFactor)=reader.getlineStippleFactor();}();
[&](){(result.lineStipplePattern)=reader.getlineStipplePattern();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineRasterizationLineStateCreateInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineRasterizationLineStateCreateInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDevicePipelineCreationCacheControlFeatures::Builder& builder, VkPhysicalDevicePipelineCreationCacheControlFeatures member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setpipelineCreationCacheControl((member.pipelineCreationCacheControl));}();}();
}

    VkPhysicalDevicePipelineCreationCacheControlFeatures deserialize_struct(VkPhysicalDevicePipelineCreationCacheControlFeatures::Reader reader){
        auto result=VkPhysicalDevicePipelineCreationCacheControlFeatures();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.pipelineCreationCacheControl)=reader.getpipelineCreationCacheControl();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDevicePipelineCreationCacheControlFeatures member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDevicePipelineCreationCacheControlFeatures member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceVulkan11Features::Builder& builder, VkPhysicalDeviceVulkan11Features member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setstorageBuffer16BitAccess((member.storageBuffer16BitAccess));}();}();
[&](){[&](){return builder.setuniformAndStorageBuffer16BitAccess((member.uniformAndStorageBuffer16BitAccess));}();}();
[&](){[&](){return builder.setstoragePushConstant16((member.storagePushConstant16));}();}();
[&](){[&](){return builder.setstorageInputOutput16((member.storageInputOutput16));}();}();
[&](){[&](){return builder.setmultiview((member.multiview));}();}();
[&](){[&](){return builder.setmultiviewGeometryShader((member.multiviewGeometryShader));}();}();
[&](){[&](){return builder.setmultiviewTessellationShader((member.multiviewTessellationShader));}();}();
[&](){[&](){return builder.setvariablePointersStorageBuffer((member.variablePointersStorageBuffer));}();}();
[&](){[&](){return builder.setvariablePointers((member.variablePointers));}();}();
[&](){[&](){return builder.setprotectedMemory((member.protectedMemory));}();}();
[&](){[&](){return builder.setsamplerYcbcrConversion((member.samplerYcbcrConversion));}();}();
[&](){[&](){return builder.setshaderDrawParameters((member.shaderDrawParameters));}();}();
}

    VkPhysicalDeviceVulkan11Features deserialize_struct(VkPhysicalDeviceVulkan11Features::Reader reader){
        auto result=VkPhysicalDeviceVulkan11Features();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.storageBuffer16BitAccess)=reader.getstorageBuffer16BitAccess();}();}();
[&](){[&](){(result.uniformAndStorageBuffer16BitAccess)=reader.getuniformAndStorageBuffer16BitAccess();}();}();
[&](){[&](){(result.storagePushConstant16)=reader.getstoragePushConstant16();}();}();
[&](){[&](){(result.storageInputOutput16)=reader.getstorageInputOutput16();}();}();
[&](){[&](){(result.multiview)=reader.getmultiview();}();}();
[&](){[&](){(result.multiviewGeometryShader)=reader.getmultiviewGeometryShader();}();}();
[&](){[&](){(result.multiviewTessellationShader)=reader.getmultiviewTessellationShader();}();}();
[&](){[&](){(result.variablePointersStorageBuffer)=reader.getvariablePointersStorageBuffer();}();}();
[&](){[&](){(result.variablePointers)=reader.getvariablePointers();}();}();
[&](){[&](){(result.protectedMemory)=reader.getprotectedMemory();}();}();
[&](){[&](){(result.samplerYcbcrConversion)=reader.getsamplerYcbcrConversion();}();}();
[&](){[&](){(result.shaderDrawParameters)=reader.getshaderDrawParameters();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceVulkan11Features member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceVulkan11Features member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceVulkan11Properties::Builder& builder, VkPhysicalDeviceVulkan11Properties member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
        auto proto_arr=builder.initdeviceUUID();
        for(int LghVtrk=0; LghVtrk < VK_UUID_SIZE; LghVtrk++){
            [&](){return proto_arr.set(LghVtrk,((member.deviceUUID)[LghVtrk]));}();
        }
        }();
[&](){
        auto proto_arr=builder.initdriverUUID();
        for(int WbhUlZS=0; WbhUlZS < VK_UUID_SIZE; WbhUlZS++){
            [&](){return proto_arr.set(WbhUlZS,((member.driverUUID)[WbhUlZS]));}();
        }
        }();
[&](){
        auto proto_arr=builder.initdeviceLUID();
        for(int kitdKfY=0; kitdKfY < VK_LUID_SIZE; kitdKfY++){
            [&](){return proto_arr.set(kitdKfY,((member.deviceLUID)[kitdKfY]));}();
        }
        }();
[&](){return builder.setdeviceNodeMask((member.deviceNodeMask));}();
[&](){[&](){return builder.setdeviceLUIDValid((member.deviceLUIDValid));}();}();
[&](){return builder.setsubgroupSize((member.subgroupSize));}();
[&](){[&](){[&](){return builder.setsubgroupSupportedStages((member.subgroupSupportedStages));}();}();}();
[&](){[&](){[&](){return builder.setsubgroupSupportedOperations((member.subgroupSupportedOperations));}();}();}();
[&](){[&](){return builder.setsubgroupQuadOperationsInAllStages((member.subgroupQuadOperationsInAllStages));}();}();
[&](){[&](){[&](){return builder.setpointClippingBehavior((member.pointClippingBehavior));}();}();}();
[&](){return builder.setmaxMultiviewViewCount((member.maxMultiviewViewCount));}();
[&](){return builder.setmaxMultiviewInstanceIndex((member.maxMultiviewInstanceIndex));}();
[&](){[&](){return builder.setprotectedNoFault((member.protectedNoFault));}();}();
[&](){return builder.setmaxPerSetDescriptors((member.maxPerSetDescriptors));}();
[&](){[&](){return builder.setmaxMemoryAllocationSize((member.maxMemoryAllocationSize));}();}();
}

    VkPhysicalDeviceVulkan11Properties deserialize_struct(VkPhysicalDeviceVulkan11Properties::Reader reader){
        auto result=VkPhysicalDeviceVulkan11Properties();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){
        auto proto_arr=reader.getdeviceUUID(VK_UUID_SIZE);
        for(int LghVtrk=0; LghVtrk < VK_UUID_SIZE; LghVtrk++){
            [&](){((result.deviceUUID)[LghVtrk])=proto_arr[LghVtrk];}();
        }
        }();
[&](){
        auto proto_arr=reader.getdriverUUID(VK_UUID_SIZE);
        for(int WbhUlZS=0; WbhUlZS < VK_UUID_SIZE; WbhUlZS++){
            [&](){((result.driverUUID)[WbhUlZS])=proto_arr[WbhUlZS];}();
        }
        }();
[&](){
        auto proto_arr=reader.getdeviceLUID(VK_LUID_SIZE);
        for(int kitdKfY=0; kitdKfY < VK_LUID_SIZE; kitdKfY++){
            [&](){((result.deviceLUID)[kitdKfY])=proto_arr[kitdKfY];}();
        }
        }();
[&](){(result.deviceNodeMask)=reader.getdeviceNodeMask();}();
[&](){[&](){(result.deviceLUIDValid)=reader.getdeviceLUIDValid();}();}();
[&](){(result.subgroupSize)=reader.getsubgroupSize();}();
[&](){[&](){[&](){(result.subgroupSupportedStages)=reader.getsubgroupSupportedStages();}();}();}();
[&](){[&](){[&](){(result.subgroupSupportedOperations)=reader.getsubgroupSupportedOperations();}();}();}();
[&](){[&](){(result.subgroupQuadOperationsInAllStages)=reader.getsubgroupQuadOperationsInAllStages();}();}();
[&](){[&](){[&](){(result.pointClippingBehavior)=reader.getpointClippingBehavior();}();}();}();
[&](){(result.maxMultiviewViewCount)=reader.getmaxMultiviewViewCount();}();
[&](){(result.maxMultiviewInstanceIndex)=reader.getmaxMultiviewInstanceIndex();}();
[&](){[&](){(result.protectedNoFault)=reader.getprotectedNoFault();}();}();
[&](){(result.maxPerSetDescriptors)=reader.getmaxPerSetDescriptors();}();
[&](){[&](){(result.maxMemoryAllocationSize)=reader.getmaxMemoryAllocationSize();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceVulkan11Properties member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceVulkan11Properties member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceVulkan12Features::Builder& builder, VkPhysicalDeviceVulkan12Features member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setsamplerMirrorClampToEdge((member.samplerMirrorClampToEdge));}();}();
[&](){[&](){return builder.setdrawIndirectCount((member.drawIndirectCount));}();}();
[&](){[&](){return builder.setstorageBuffer8BitAccess((member.storageBuffer8BitAccess));}();}();
[&](){[&](){return builder.setuniformAndStorageBuffer8BitAccess((member.uniformAndStorageBuffer8BitAccess));}();}();
[&](){[&](){return builder.setstoragePushConstant8((member.storagePushConstant8));}();}();
[&](){[&](){return builder.setshaderBufferInt64Atomics((member.shaderBufferInt64Atomics));}();}();
[&](){[&](){return builder.setshaderSharedInt64Atomics((member.shaderSharedInt64Atomics));}();}();
[&](){[&](){return builder.setshaderFloat16((member.shaderFloat16));}();}();
[&](){[&](){return builder.setshaderInt8((member.shaderInt8));}();}();
[&](){[&](){return builder.setdescriptorIndexing((member.descriptorIndexing));}();}();
[&](){[&](){return builder.setshaderInputAttachmentArrayDynamicIndexing((member.shaderInputAttachmentArrayDynamicIndexing));}();}();
[&](){[&](){return builder.setshaderUniformTexelBufferArrayDynamicIndexing((member.shaderUniformTexelBufferArrayDynamicIndexing));}();}();
[&](){[&](){return builder.setshaderStorageTexelBufferArrayDynamicIndexing((member.shaderStorageTexelBufferArrayDynamicIndexing));}();}();
[&](){[&](){return builder.setshaderUniformBufferArrayNonUniformIndexing((member.shaderUniformBufferArrayNonUniformIndexing));}();}();
[&](){[&](){return builder.setshaderSampledImageArrayNonUniformIndexing((member.shaderSampledImageArrayNonUniformIndexing));}();}();
[&](){[&](){return builder.setshaderStorageBufferArrayNonUniformIndexing((member.shaderStorageBufferArrayNonUniformIndexing));}();}();
[&](){[&](){return builder.setshaderStorageImageArrayNonUniformIndexing((member.shaderStorageImageArrayNonUniformIndexing));}();}();
[&](){[&](){return builder.setshaderInputAttachmentArrayNonUniformIndexing((member.shaderInputAttachmentArrayNonUniformIndexing));}();}();
[&](){[&](){return builder.setshaderUniformTexelBufferArrayNonUniformIndexing((member.shaderUniformTexelBufferArrayNonUniformIndexing));}();}();
[&](){[&](){return builder.setshaderStorageTexelBufferArrayNonUniformIndexing((member.shaderStorageTexelBufferArrayNonUniformIndexing));}();}();
[&](){[&](){return builder.setdescriptorBindingUniformBufferUpdateAfterBind((member.descriptorBindingUniformBufferUpdateAfterBind));}();}();
[&](){[&](){return builder.setdescriptorBindingSampledImageUpdateAfterBind((member.descriptorBindingSampledImageUpdateAfterBind));}();}();
[&](){[&](){return builder.setdescriptorBindingStorageImageUpdateAfterBind((member.descriptorBindingStorageImageUpdateAfterBind));}();}();
[&](){[&](){return builder.setdescriptorBindingStorageBufferUpdateAfterBind((member.descriptorBindingStorageBufferUpdateAfterBind));}();}();
[&](){[&](){return builder.setdescriptorBindingUniformTexelBufferUpdateAfterBind((member.descriptorBindingUniformTexelBufferUpdateAfterBind));}();}();
[&](){[&](){return builder.setdescriptorBindingStorageTexelBufferUpdateAfterBind((member.descriptorBindingStorageTexelBufferUpdateAfterBind));}();}();
[&](){[&](){return builder.setdescriptorBindingUpdateUnusedWhilePending((member.descriptorBindingUpdateUnusedWhilePending));}();}();
[&](){[&](){return builder.setdescriptorBindingPartiallyBound((member.descriptorBindingPartiallyBound));}();}();
[&](){[&](){return builder.setdescriptorBindingVariableDescriptorCount((member.descriptorBindingVariableDescriptorCount));}();}();
[&](){[&](){return builder.setruntimeDescriptorArray((member.runtimeDescriptorArray));}();}();
[&](){[&](){return builder.setsamplerFilterMinmax((member.samplerFilterMinmax));}();}();
[&](){[&](){return builder.setscalarBlockLayout((member.scalarBlockLayout));}();}();
[&](){[&](){return builder.setimagelessFramebuffer((member.imagelessFramebuffer));}();}();
[&](){[&](){return builder.setuniformBufferStandardLayout((member.uniformBufferStandardLayout));}();}();
[&](){[&](){return builder.setshaderSubgroupExtendedTypes((member.shaderSubgroupExtendedTypes));}();}();
[&](){[&](){return builder.setseparateDepthStencilLayouts((member.separateDepthStencilLayouts));}();}();
[&](){[&](){return builder.sethostQueryReset((member.hostQueryReset));}();}();
[&](){[&](){return builder.settimelineSemaphore((member.timelineSemaphore));}();}();
[&](){[&](){return builder.setbufferDeviceAddress((member.bufferDeviceAddress));}();}();
[&](){[&](){return builder.setbufferDeviceAddressCaptureReplay((member.bufferDeviceAddressCaptureReplay));}();}();
[&](){[&](){return builder.setbufferDeviceAddressMultiDevice((member.bufferDeviceAddressMultiDevice));}();}();
[&](){[&](){return builder.setvulkanMemoryModel((member.vulkanMemoryModel));}();}();
[&](){[&](){return builder.setvulkanMemoryModelDeviceScope((member.vulkanMemoryModelDeviceScope));}();}();
[&](){[&](){return builder.setvulkanMemoryModelAvailabilityVisibilityChains((member.vulkanMemoryModelAvailabilityVisibilityChains));}();}();
[&](){[&](){return builder.setshaderOutputViewportIndex((member.shaderOutputViewportIndex));}();}();
[&](){[&](){return builder.setshaderOutputLayer((member.shaderOutputLayer));}();}();
[&](){[&](){return builder.setsubgroupBroadcastDynamicId((member.subgroupBroadcastDynamicId));}();}();
}

    VkPhysicalDeviceVulkan12Features deserialize_struct(VkPhysicalDeviceVulkan12Features::Reader reader){
        auto result=VkPhysicalDeviceVulkan12Features();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.samplerMirrorClampToEdge)=reader.getsamplerMirrorClampToEdge();}();}();
[&](){[&](){(result.drawIndirectCount)=reader.getdrawIndirectCount();}();}();
[&](){[&](){(result.storageBuffer8BitAccess)=reader.getstorageBuffer8BitAccess();}();}();
[&](){[&](){(result.uniformAndStorageBuffer8BitAccess)=reader.getuniformAndStorageBuffer8BitAccess();}();}();
[&](){[&](){(result.storagePushConstant8)=reader.getstoragePushConstant8();}();}();
[&](){[&](){(result.shaderBufferInt64Atomics)=reader.getshaderBufferInt64Atomics();}();}();
[&](){[&](){(result.shaderSharedInt64Atomics)=reader.getshaderSharedInt64Atomics();}();}();
[&](){[&](){(result.shaderFloat16)=reader.getshaderFloat16();}();}();
[&](){[&](){(result.shaderInt8)=reader.getshaderInt8();}();}();
[&](){[&](){(result.descriptorIndexing)=reader.getdescriptorIndexing();}();}();
[&](){[&](){(result.shaderInputAttachmentArrayDynamicIndexing)=reader.getshaderInputAttachmentArrayDynamicIndexing();}();}();
[&](){[&](){(result.shaderUniformTexelBufferArrayDynamicIndexing)=reader.getshaderUniformTexelBufferArrayDynamicIndexing();}();}();
[&](){[&](){(result.shaderStorageTexelBufferArrayDynamicIndexing)=reader.getshaderStorageTexelBufferArrayDynamicIndexing();}();}();
[&](){[&](){(result.shaderUniformBufferArrayNonUniformIndexing)=reader.getshaderUniformBufferArrayNonUniformIndexing();}();}();
[&](){[&](){(result.shaderSampledImageArrayNonUniformIndexing)=reader.getshaderSampledImageArrayNonUniformIndexing();}();}();
[&](){[&](){(result.shaderStorageBufferArrayNonUniformIndexing)=reader.getshaderStorageBufferArrayNonUniformIndexing();}();}();
[&](){[&](){(result.shaderStorageImageArrayNonUniformIndexing)=reader.getshaderStorageImageArrayNonUniformIndexing();}();}();
[&](){[&](){(result.shaderInputAttachmentArrayNonUniformIndexing)=reader.getshaderInputAttachmentArrayNonUniformIndexing();}();}();
[&](){[&](){(result.shaderUniformTexelBufferArrayNonUniformIndexing)=reader.getshaderUniformTexelBufferArrayNonUniformIndexing();}();}();
[&](){[&](){(result.shaderStorageTexelBufferArrayNonUniformIndexing)=reader.getshaderStorageTexelBufferArrayNonUniformIndexing();}();}();
[&](){[&](){(result.descriptorBindingUniformBufferUpdateAfterBind)=reader.getdescriptorBindingUniformBufferUpdateAfterBind();}();}();
[&](){[&](){(result.descriptorBindingSampledImageUpdateAfterBind)=reader.getdescriptorBindingSampledImageUpdateAfterBind();}();}();
[&](){[&](){(result.descriptorBindingStorageImageUpdateAfterBind)=reader.getdescriptorBindingStorageImageUpdateAfterBind();}();}();
[&](){[&](){(result.descriptorBindingStorageBufferUpdateAfterBind)=reader.getdescriptorBindingStorageBufferUpdateAfterBind();}();}();
[&](){[&](){(result.descriptorBindingUniformTexelBufferUpdateAfterBind)=reader.getdescriptorBindingUniformTexelBufferUpdateAfterBind();}();}();
[&](){[&](){(result.descriptorBindingStorageTexelBufferUpdateAfterBind)=reader.getdescriptorBindingStorageTexelBufferUpdateAfterBind();}();}();
[&](){[&](){(result.descriptorBindingUpdateUnusedWhilePending)=reader.getdescriptorBindingUpdateUnusedWhilePending();}();}();
[&](){[&](){(result.descriptorBindingPartiallyBound)=reader.getdescriptorBindingPartiallyBound();}();}();
[&](){[&](){(result.descriptorBindingVariableDescriptorCount)=reader.getdescriptorBindingVariableDescriptorCount();}();}();
[&](){[&](){(result.runtimeDescriptorArray)=reader.getruntimeDescriptorArray();}();}();
[&](){[&](){(result.samplerFilterMinmax)=reader.getsamplerFilterMinmax();}();}();
[&](){[&](){(result.scalarBlockLayout)=reader.getscalarBlockLayout();}();}();
[&](){[&](){(result.imagelessFramebuffer)=reader.getimagelessFramebuffer();}();}();
[&](){[&](){(result.uniformBufferStandardLayout)=reader.getuniformBufferStandardLayout();}();}();
[&](){[&](){(result.shaderSubgroupExtendedTypes)=reader.getshaderSubgroupExtendedTypes();}();}();
[&](){[&](){(result.separateDepthStencilLayouts)=reader.getseparateDepthStencilLayouts();}();}();
[&](){[&](){(result.hostQueryReset)=reader.gethostQueryReset();}();}();
[&](){[&](){(result.timelineSemaphore)=reader.gettimelineSemaphore();}();}();
[&](){[&](){(result.bufferDeviceAddress)=reader.getbufferDeviceAddress();}();}();
[&](){[&](){(result.bufferDeviceAddressCaptureReplay)=reader.getbufferDeviceAddressCaptureReplay();}();}();
[&](){[&](){(result.bufferDeviceAddressMultiDevice)=reader.getbufferDeviceAddressMultiDevice();}();}();
[&](){[&](){(result.vulkanMemoryModel)=reader.getvulkanMemoryModel();}();}();
[&](){[&](){(result.vulkanMemoryModelDeviceScope)=reader.getvulkanMemoryModelDeviceScope();}();}();
[&](){[&](){(result.vulkanMemoryModelAvailabilityVisibilityChains)=reader.getvulkanMemoryModelAvailabilityVisibilityChains();}();}();
[&](){[&](){(result.shaderOutputViewportIndex)=reader.getshaderOutputViewportIndex();}();}();
[&](){[&](){(result.shaderOutputLayer)=reader.getshaderOutputLayer();}();}();
[&](){[&](){(result.subgroupBroadcastDynamicId)=reader.getsubgroupBroadcastDynamicId();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceVulkan12Features member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceVulkan12Features member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceVulkan12Properties::Builder& builder, VkPhysicalDeviceVulkan12Properties member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setdriverID((member.driverID));}();}();}();
[&](){
        auto proto_arr=builder.initdriverName();
        for(int eglnjYG=0; eglnjYG < VK_MAX_DRIVER_NAME_SIZE; eglnjYG++){
            [&](){return proto_arr.set(eglnjYG,((member.driverName)[eglnjYG]));}();
        }
        }();
[&](){
        auto proto_arr=builder.initdriverInfo();
        for(int ygBYlpo=0; ygBYlpo < VK_MAX_DRIVER_INFO_SIZE; ygBYlpo++){
            [&](){return proto_arr.set(ygBYlpo,((member.driverInfo)[ygBYlpo]));}();
        }
        }();
[&](){
            auto temp=builder.initconformanceVersion(conformanceVersion);
            return serialize_struct((member.conformanceVersion), temp);
            }();
[&](){[&](){[&](){return builder.setdenormBehaviorIndependence((member.denormBehaviorIndependence));}();}();}();
[&](){[&](){[&](){return builder.setroundingModeIndependence((member.roundingModeIndependence));}();}();}();
[&](){[&](){return builder.setshaderSignedZeroInfNanPreserveFloat16((member.shaderSignedZeroInfNanPreserveFloat16));}();}();
[&](){[&](){return builder.setshaderSignedZeroInfNanPreserveFloat32((member.shaderSignedZeroInfNanPreserveFloat32));}();}();
[&](){[&](){return builder.setshaderSignedZeroInfNanPreserveFloat64((member.shaderSignedZeroInfNanPreserveFloat64));}();}();
[&](){[&](){return builder.setshaderDenormPreserveFloat16((member.shaderDenormPreserveFloat16));}();}();
[&](){[&](){return builder.setshaderDenormPreserveFloat32((member.shaderDenormPreserveFloat32));}();}();
[&](){[&](){return builder.setshaderDenormPreserveFloat64((member.shaderDenormPreserveFloat64));}();}();
[&](){[&](){return builder.setshaderDenormFlushToZeroFloat16((member.shaderDenormFlushToZeroFloat16));}();}();
[&](){[&](){return builder.setshaderDenormFlushToZeroFloat32((member.shaderDenormFlushToZeroFloat32));}();}();
[&](){[&](){return builder.setshaderDenormFlushToZeroFloat64((member.shaderDenormFlushToZeroFloat64));}();}();
[&](){[&](){return builder.setshaderRoundingModeRTEFloat16((member.shaderRoundingModeRTEFloat16));}();}();
[&](){[&](){return builder.setshaderRoundingModeRTEFloat32((member.shaderRoundingModeRTEFloat32));}();}();
[&](){[&](){return builder.setshaderRoundingModeRTEFloat64((member.shaderRoundingModeRTEFloat64));}();}();
[&](){[&](){return builder.setshaderRoundingModeRTZFloat16((member.shaderRoundingModeRTZFloat16));}();}();
[&](){[&](){return builder.setshaderRoundingModeRTZFloat32((member.shaderRoundingModeRTZFloat32));}();}();
[&](){[&](){return builder.setshaderRoundingModeRTZFloat64((member.shaderRoundingModeRTZFloat64));}();}();
[&](){return builder.setmaxUpdateAfterBindDescriptorsInAllPools((member.maxUpdateAfterBindDescriptorsInAllPools));}();
[&](){[&](){return builder.setshaderUniformBufferArrayNonUniformIndexingNative((member.shaderUniformBufferArrayNonUniformIndexingNative));}();}();
[&](){[&](){return builder.setshaderSampledImageArrayNonUniformIndexingNative((member.shaderSampledImageArrayNonUniformIndexingNative));}();}();
[&](){[&](){return builder.setshaderStorageBufferArrayNonUniformIndexingNative((member.shaderStorageBufferArrayNonUniformIndexingNative));}();}();
[&](){[&](){return builder.setshaderStorageImageArrayNonUniformIndexingNative((member.shaderStorageImageArrayNonUniformIndexingNative));}();}();
[&](){[&](){return builder.setshaderInputAttachmentArrayNonUniformIndexingNative((member.shaderInputAttachmentArrayNonUniformIndexingNative));}();}();
[&](){[&](){return builder.setrobustBufferAccessUpdateAfterBind((member.robustBufferAccessUpdateAfterBind));}();}();
[&](){[&](){return builder.setquadDivergentImplicitLod((member.quadDivergentImplicitLod));}();}();
[&](){return builder.setmaxPerStageDescriptorUpdateAfterBindSamplers((member.maxPerStageDescriptorUpdateAfterBindSamplers));}();
[&](){return builder.setmaxPerStageDescriptorUpdateAfterBindUniformBuffers((member.maxPerStageDescriptorUpdateAfterBindUniformBuffers));}();
[&](){return builder.setmaxPerStageDescriptorUpdateAfterBindStorageBuffers((member.maxPerStageDescriptorUpdateAfterBindStorageBuffers));}();
[&](){return builder.setmaxPerStageDescriptorUpdateAfterBindSampledImages((member.maxPerStageDescriptorUpdateAfterBindSampledImages));}();
[&](){return builder.setmaxPerStageDescriptorUpdateAfterBindStorageImages((member.maxPerStageDescriptorUpdateAfterBindStorageImages));}();
[&](){return builder.setmaxPerStageDescriptorUpdateAfterBindInputAttachments((member.maxPerStageDescriptorUpdateAfterBindInputAttachments));}();
[&](){return builder.setmaxPerStageUpdateAfterBindResources((member.maxPerStageUpdateAfterBindResources));}();
[&](){return builder.setmaxDescriptorSetUpdateAfterBindSamplers((member.maxDescriptorSetUpdateAfterBindSamplers));}();
[&](){return builder.setmaxDescriptorSetUpdateAfterBindUniformBuffers((member.maxDescriptorSetUpdateAfterBindUniformBuffers));}();
[&](){return builder.setmaxDescriptorSetUpdateAfterBindUniformBuffersDynamic((member.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic));}();
[&](){return builder.setmaxDescriptorSetUpdateAfterBindStorageBuffers((member.maxDescriptorSetUpdateAfterBindStorageBuffers));}();
[&](){return builder.setmaxDescriptorSetUpdateAfterBindStorageBuffersDynamic((member.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic));}();
[&](){return builder.setmaxDescriptorSetUpdateAfterBindSampledImages((member.maxDescriptorSetUpdateAfterBindSampledImages));}();
[&](){return builder.setmaxDescriptorSetUpdateAfterBindStorageImages((member.maxDescriptorSetUpdateAfterBindStorageImages));}();
[&](){return builder.setmaxDescriptorSetUpdateAfterBindInputAttachments((member.maxDescriptorSetUpdateAfterBindInputAttachments));}();
[&](){[&](){[&](){return builder.setsupportedDepthResolveModes((member.supportedDepthResolveModes));}();}();}();
[&](){[&](){[&](){return builder.setsupportedStencilResolveModes((member.supportedStencilResolveModes));}();}();}();
[&](){[&](){return builder.setindependentResolveNone((member.independentResolveNone));}();}();
[&](){[&](){return builder.setindependentResolve((member.independentResolve));}();}();
[&](){[&](){return builder.setfilterMinmaxSingleComponentFormats((member.filterMinmaxSingleComponentFormats));}();}();
[&](){[&](){return builder.setfilterMinmaxImageComponentMapping((member.filterMinmaxImageComponentMapping));}();}();
[&](){return builder.setmaxTimelineSemaphoreValueDifference((member.maxTimelineSemaphoreValueDifference));}();
[&](){[&](){[&](){return builder.setframebufferIntegerColorSampleCounts((member.framebufferIntegerColorSampleCounts));}();}();}();
}

    VkPhysicalDeviceVulkan12Properties deserialize_struct(VkPhysicalDeviceVulkan12Properties::Reader reader){
        auto result=VkPhysicalDeviceVulkan12Properties();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.driverID)=reader.getdriverID();}();}();}();
[&](){
        auto proto_arr=reader.getdriverName(VK_MAX_DRIVER_NAME_SIZE);
        for(int eglnjYG=0; eglnjYG < VK_MAX_DRIVER_NAME_SIZE; eglnjYG++){
            [&](){((result.driverName)[eglnjYG])=proto_arr[eglnjYG];}();
        }
        }();
[&](){
        auto proto_arr=reader.getdriverInfo(VK_MAX_DRIVER_INFO_SIZE);
        for(int ygBYlpo=0; ygBYlpo < VK_MAX_DRIVER_INFO_SIZE; ygBYlpo++){
            [&](){((result.driverInfo)[ygBYlpo])=proto_arr[ygBYlpo];}();
        }
        }();
[&](){
            auto temp=reader.getconformanceVersion();
            (result.conformanceVersion)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.denormBehaviorIndependence)=reader.getdenormBehaviorIndependence();}();}();}();
[&](){[&](){[&](){(result.roundingModeIndependence)=reader.getroundingModeIndependence();}();}();}();
[&](){[&](){(result.shaderSignedZeroInfNanPreserveFloat16)=reader.getshaderSignedZeroInfNanPreserveFloat16();}();}();
[&](){[&](){(result.shaderSignedZeroInfNanPreserveFloat32)=reader.getshaderSignedZeroInfNanPreserveFloat32();}();}();
[&](){[&](){(result.shaderSignedZeroInfNanPreserveFloat64)=reader.getshaderSignedZeroInfNanPreserveFloat64();}();}();
[&](){[&](){(result.shaderDenormPreserveFloat16)=reader.getshaderDenormPreserveFloat16();}();}();
[&](){[&](){(result.shaderDenormPreserveFloat32)=reader.getshaderDenormPreserveFloat32();}();}();
[&](){[&](){(result.shaderDenormPreserveFloat64)=reader.getshaderDenormPreserveFloat64();}();}();
[&](){[&](){(result.shaderDenormFlushToZeroFloat16)=reader.getshaderDenormFlushToZeroFloat16();}();}();
[&](){[&](){(result.shaderDenormFlushToZeroFloat32)=reader.getshaderDenormFlushToZeroFloat32();}();}();
[&](){[&](){(result.shaderDenormFlushToZeroFloat64)=reader.getshaderDenormFlushToZeroFloat64();}();}();
[&](){[&](){(result.shaderRoundingModeRTEFloat16)=reader.getshaderRoundingModeRTEFloat16();}();}();
[&](){[&](){(result.shaderRoundingModeRTEFloat32)=reader.getshaderRoundingModeRTEFloat32();}();}();
[&](){[&](){(result.shaderRoundingModeRTEFloat64)=reader.getshaderRoundingModeRTEFloat64();}();}();
[&](){[&](){(result.shaderRoundingModeRTZFloat16)=reader.getshaderRoundingModeRTZFloat16();}();}();
[&](){[&](){(result.shaderRoundingModeRTZFloat32)=reader.getshaderRoundingModeRTZFloat32();}();}();
[&](){[&](){(result.shaderRoundingModeRTZFloat64)=reader.getshaderRoundingModeRTZFloat64();}();}();
[&](){(result.maxUpdateAfterBindDescriptorsInAllPools)=reader.getmaxUpdateAfterBindDescriptorsInAllPools();}();
[&](){[&](){(result.shaderUniformBufferArrayNonUniformIndexingNative)=reader.getshaderUniformBufferArrayNonUniformIndexingNative();}();}();
[&](){[&](){(result.shaderSampledImageArrayNonUniformIndexingNative)=reader.getshaderSampledImageArrayNonUniformIndexingNative();}();}();
[&](){[&](){(result.shaderStorageBufferArrayNonUniformIndexingNative)=reader.getshaderStorageBufferArrayNonUniformIndexingNative();}();}();
[&](){[&](){(result.shaderStorageImageArrayNonUniformIndexingNative)=reader.getshaderStorageImageArrayNonUniformIndexingNative();}();}();
[&](){[&](){(result.shaderInputAttachmentArrayNonUniformIndexingNative)=reader.getshaderInputAttachmentArrayNonUniformIndexingNative();}();}();
[&](){[&](){(result.robustBufferAccessUpdateAfterBind)=reader.getrobustBufferAccessUpdateAfterBind();}();}();
[&](){[&](){(result.quadDivergentImplicitLod)=reader.getquadDivergentImplicitLod();}();}();
[&](){(result.maxPerStageDescriptorUpdateAfterBindSamplers)=reader.getmaxPerStageDescriptorUpdateAfterBindSamplers();}();
[&](){(result.maxPerStageDescriptorUpdateAfterBindUniformBuffers)=reader.getmaxPerStageDescriptorUpdateAfterBindUniformBuffers();}();
[&](){(result.maxPerStageDescriptorUpdateAfterBindStorageBuffers)=reader.getmaxPerStageDescriptorUpdateAfterBindStorageBuffers();}();
[&](){(result.maxPerStageDescriptorUpdateAfterBindSampledImages)=reader.getmaxPerStageDescriptorUpdateAfterBindSampledImages();}();
[&](){(result.maxPerStageDescriptorUpdateAfterBindStorageImages)=reader.getmaxPerStageDescriptorUpdateAfterBindStorageImages();}();
[&](){(result.maxPerStageDescriptorUpdateAfterBindInputAttachments)=reader.getmaxPerStageDescriptorUpdateAfterBindInputAttachments();}();
[&](){(result.maxPerStageUpdateAfterBindResources)=reader.getmaxPerStageUpdateAfterBindResources();}();
[&](){(result.maxDescriptorSetUpdateAfterBindSamplers)=reader.getmaxDescriptorSetUpdateAfterBindSamplers();}();
[&](){(result.maxDescriptorSetUpdateAfterBindUniformBuffers)=reader.getmaxDescriptorSetUpdateAfterBindUniformBuffers();}();
[&](){(result.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic)=reader.getmaxDescriptorSetUpdateAfterBindUniformBuffersDynamic();}();
[&](){(result.maxDescriptorSetUpdateAfterBindStorageBuffers)=reader.getmaxDescriptorSetUpdateAfterBindStorageBuffers();}();
[&](){(result.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic)=reader.getmaxDescriptorSetUpdateAfterBindStorageBuffersDynamic();}();
[&](){(result.maxDescriptorSetUpdateAfterBindSampledImages)=reader.getmaxDescriptorSetUpdateAfterBindSampledImages();}();
[&](){(result.maxDescriptorSetUpdateAfterBindStorageImages)=reader.getmaxDescriptorSetUpdateAfterBindStorageImages();}();
[&](){(result.maxDescriptorSetUpdateAfterBindInputAttachments)=reader.getmaxDescriptorSetUpdateAfterBindInputAttachments();}();
[&](){[&](){[&](){(result.supportedDepthResolveModes)=reader.getsupportedDepthResolveModes();}();}();}();
[&](){[&](){[&](){(result.supportedStencilResolveModes)=reader.getsupportedStencilResolveModes();}();}();}();
[&](){[&](){(result.independentResolveNone)=reader.getindependentResolveNone();}();}();
[&](){[&](){(result.independentResolve)=reader.getindependentResolve();}();}();
[&](){[&](){(result.filterMinmaxSingleComponentFormats)=reader.getfilterMinmaxSingleComponentFormats();}();}();
[&](){[&](){(result.filterMinmaxImageComponentMapping)=reader.getfilterMinmaxImageComponentMapping();}();}();
[&](){(result.maxTimelineSemaphoreValueDifference)=reader.getmaxTimelineSemaphoreValueDifference();}();
[&](){[&](){[&](){(result.framebufferIntegerColorSampleCounts)=reader.getframebufferIntegerColorSampleCounts();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceVulkan12Properties member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceVulkan12Properties member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceVulkan13Features::Builder& builder, VkPhysicalDeviceVulkan13Features member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setrobustImageAccess((member.robustImageAccess));}();}();
[&](){[&](){return builder.setinlineUniformBlock((member.inlineUniformBlock));}();}();
[&](){[&](){return builder.setdescriptorBindingInlineUniformBlockUpdateAfterBind((member.descriptorBindingInlineUniformBlockUpdateAfterBind));}();}();
[&](){[&](){return builder.setpipelineCreationCacheControl((member.pipelineCreationCacheControl));}();}();
[&](){[&](){return builder.setprivateData((member.privateData));}();}();
[&](){[&](){return builder.setshaderDemoteToHelperInvocation((member.shaderDemoteToHelperInvocation));}();}();
[&](){[&](){return builder.setshaderTerminateInvocation((member.shaderTerminateInvocation));}();}();
[&](){[&](){return builder.setsubgroupSizeControl((member.subgroupSizeControl));}();}();
[&](){[&](){return builder.setcomputeFullSubgroups((member.computeFullSubgroups));}();}();
[&](){[&](){return builder.setsynchronization2((member.synchronization2));}();}();
[&](){[&](){return builder.settextureCompressionASTC_HDR((member.textureCompressionASTC_HDR));}();}();
[&](){[&](){return builder.setshaderZeroInitializeWorkgroupMemory((member.shaderZeroInitializeWorkgroupMemory));}();}();
[&](){[&](){return builder.setdynamicRendering((member.dynamicRendering));}();}();
[&](){[&](){return builder.setshaderIntegerDotProduct((member.shaderIntegerDotProduct));}();}();
[&](){[&](){return builder.setmaintenance4((member.maintenance4));}();}();
}

    VkPhysicalDeviceVulkan13Features deserialize_struct(VkPhysicalDeviceVulkan13Features::Reader reader){
        auto result=VkPhysicalDeviceVulkan13Features();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.robustImageAccess)=reader.getrobustImageAccess();}();}();
[&](){[&](){(result.inlineUniformBlock)=reader.getinlineUniformBlock();}();}();
[&](){[&](){(result.descriptorBindingInlineUniformBlockUpdateAfterBind)=reader.getdescriptorBindingInlineUniformBlockUpdateAfterBind();}();}();
[&](){[&](){(result.pipelineCreationCacheControl)=reader.getpipelineCreationCacheControl();}();}();
[&](){[&](){(result.privateData)=reader.getprivateData();}();}();
[&](){[&](){(result.shaderDemoteToHelperInvocation)=reader.getshaderDemoteToHelperInvocation();}();}();
[&](){[&](){(result.shaderTerminateInvocation)=reader.getshaderTerminateInvocation();}();}();
[&](){[&](){(result.subgroupSizeControl)=reader.getsubgroupSizeControl();}();}();
[&](){[&](){(result.computeFullSubgroups)=reader.getcomputeFullSubgroups();}();}();
[&](){[&](){(result.synchronization2)=reader.getsynchronization2();}();}();
[&](){[&](){(result.textureCompressionASTC_HDR)=reader.gettextureCompressionASTC_HDR();}();}();
[&](){[&](){(result.shaderZeroInitializeWorkgroupMemory)=reader.getshaderZeroInitializeWorkgroupMemory();}();}();
[&](){[&](){(result.dynamicRendering)=reader.getdynamicRendering();}();}();
[&](){[&](){(result.shaderIntegerDotProduct)=reader.getshaderIntegerDotProduct();}();}();
[&](){[&](){(result.maintenance4)=reader.getmaintenance4();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceVulkan13Features member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceVulkan13Features member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceVulkan13Properties::Builder& builder, VkPhysicalDeviceVulkan13Properties member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setminSubgroupSize((member.minSubgroupSize));}();
[&](){return builder.setmaxSubgroupSize((member.maxSubgroupSize));}();
[&](){return builder.setmaxComputeWorkgroupSubgroups((member.maxComputeWorkgroupSubgroups));}();
[&](){[&](){[&](){return builder.setrequiredSubgroupSizeStages((member.requiredSubgroupSizeStages));}();}();}();
[&](){return builder.setmaxInlineUniformBlockSize((member.maxInlineUniformBlockSize));}();
[&](){return builder.setmaxPerStageDescriptorInlineUniformBlocks((member.maxPerStageDescriptorInlineUniformBlocks));}();
[&](){return builder.setmaxPerStageDescriptorUpdateAfterBindInlineUniformBlocks((member.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks));}();
[&](){return builder.setmaxDescriptorSetInlineUniformBlocks((member.maxDescriptorSetInlineUniformBlocks));}();
[&](){return builder.setmaxDescriptorSetUpdateAfterBindInlineUniformBlocks((member.maxDescriptorSetUpdateAfterBindInlineUniformBlocks));}();
[&](){return builder.setmaxInlineUniformTotalSize((member.maxInlineUniformTotalSize));}();
[&](){[&](){return builder.setintegerDotProduct8BitUnsignedAccelerated((member.integerDotProduct8BitUnsignedAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProduct8BitSignedAccelerated((member.integerDotProduct8BitSignedAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProduct8BitMixedSignednessAccelerated((member.integerDotProduct8BitMixedSignednessAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProduct4x8BitPackedUnsignedAccelerated((member.integerDotProduct4x8BitPackedUnsignedAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProduct4x8BitPackedSignedAccelerated((member.integerDotProduct4x8BitPackedSignedAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProduct4x8BitPackedMixedSignednessAccelerated((member.integerDotProduct4x8BitPackedMixedSignednessAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProduct16BitUnsignedAccelerated((member.integerDotProduct16BitUnsignedAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProduct16BitSignedAccelerated((member.integerDotProduct16BitSignedAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProduct16BitMixedSignednessAccelerated((member.integerDotProduct16BitMixedSignednessAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProduct32BitUnsignedAccelerated((member.integerDotProduct32BitUnsignedAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProduct32BitSignedAccelerated((member.integerDotProduct32BitSignedAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProduct32BitMixedSignednessAccelerated((member.integerDotProduct32BitMixedSignednessAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProduct64BitUnsignedAccelerated((member.integerDotProduct64BitUnsignedAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProduct64BitSignedAccelerated((member.integerDotProduct64BitSignedAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProduct64BitMixedSignednessAccelerated((member.integerDotProduct64BitMixedSignednessAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProductAccumulatingSaturating8BitUnsignedAccelerated((member.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProductAccumulatingSaturating8BitSignedAccelerated((member.integerDotProductAccumulatingSaturating8BitSignedAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated((member.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated((member.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated((member.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated((member.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProductAccumulatingSaturating16BitUnsignedAccelerated((member.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProductAccumulatingSaturating16BitSignedAccelerated((member.integerDotProductAccumulatingSaturating16BitSignedAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated((member.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProductAccumulatingSaturating32BitUnsignedAccelerated((member.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProductAccumulatingSaturating32BitSignedAccelerated((member.integerDotProductAccumulatingSaturating32BitSignedAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated((member.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProductAccumulatingSaturating64BitUnsignedAccelerated((member.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProductAccumulatingSaturating64BitSignedAccelerated((member.integerDotProductAccumulatingSaturating64BitSignedAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated((member.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated));}();}();
[&](){[&](){return builder.setstorageTexelBufferOffsetAlignmentBytes((member.storageTexelBufferOffsetAlignmentBytes));}();}();
[&](){[&](){return builder.setstorageTexelBufferOffsetSingleTexelAlignment((member.storageTexelBufferOffsetSingleTexelAlignment));}();}();
[&](){[&](){return builder.setuniformTexelBufferOffsetAlignmentBytes((member.uniformTexelBufferOffsetAlignmentBytes));}();}();
[&](){[&](){return builder.setuniformTexelBufferOffsetSingleTexelAlignment((member.uniformTexelBufferOffsetSingleTexelAlignment));}();}();
[&](){[&](){return builder.setmaxBufferSize((member.maxBufferSize));}();}();
}

    VkPhysicalDeviceVulkan13Properties deserialize_struct(VkPhysicalDeviceVulkan13Properties::Reader reader){
        auto result=VkPhysicalDeviceVulkan13Properties();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.minSubgroupSize)=reader.getminSubgroupSize();}();
[&](){(result.maxSubgroupSize)=reader.getmaxSubgroupSize();}();
[&](){(result.maxComputeWorkgroupSubgroups)=reader.getmaxComputeWorkgroupSubgroups();}();
[&](){[&](){[&](){(result.requiredSubgroupSizeStages)=reader.getrequiredSubgroupSizeStages();}();}();}();
[&](){(result.maxInlineUniformBlockSize)=reader.getmaxInlineUniformBlockSize();}();
[&](){(result.maxPerStageDescriptorInlineUniformBlocks)=reader.getmaxPerStageDescriptorInlineUniformBlocks();}();
[&](){(result.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks)=reader.getmaxPerStageDescriptorUpdateAfterBindInlineUniformBlocks();}();
[&](){(result.maxDescriptorSetInlineUniformBlocks)=reader.getmaxDescriptorSetInlineUniformBlocks();}();
[&](){(result.maxDescriptorSetUpdateAfterBindInlineUniformBlocks)=reader.getmaxDescriptorSetUpdateAfterBindInlineUniformBlocks();}();
[&](){(result.maxInlineUniformTotalSize)=reader.getmaxInlineUniformTotalSize();}();
[&](){[&](){(result.integerDotProduct8BitUnsignedAccelerated)=reader.getintegerDotProduct8BitUnsignedAccelerated();}();}();
[&](){[&](){(result.integerDotProduct8BitSignedAccelerated)=reader.getintegerDotProduct8BitSignedAccelerated();}();}();
[&](){[&](){(result.integerDotProduct8BitMixedSignednessAccelerated)=reader.getintegerDotProduct8BitMixedSignednessAccelerated();}();}();
[&](){[&](){(result.integerDotProduct4x8BitPackedUnsignedAccelerated)=reader.getintegerDotProduct4x8BitPackedUnsignedAccelerated();}();}();
[&](){[&](){(result.integerDotProduct4x8BitPackedSignedAccelerated)=reader.getintegerDotProduct4x8BitPackedSignedAccelerated();}();}();
[&](){[&](){(result.integerDotProduct4x8BitPackedMixedSignednessAccelerated)=reader.getintegerDotProduct4x8BitPackedMixedSignednessAccelerated();}();}();
[&](){[&](){(result.integerDotProduct16BitUnsignedAccelerated)=reader.getintegerDotProduct16BitUnsignedAccelerated();}();}();
[&](){[&](){(result.integerDotProduct16BitSignedAccelerated)=reader.getintegerDotProduct16BitSignedAccelerated();}();}();
[&](){[&](){(result.integerDotProduct16BitMixedSignednessAccelerated)=reader.getintegerDotProduct16BitMixedSignednessAccelerated();}();}();
[&](){[&](){(result.integerDotProduct32BitUnsignedAccelerated)=reader.getintegerDotProduct32BitUnsignedAccelerated();}();}();
[&](){[&](){(result.integerDotProduct32BitSignedAccelerated)=reader.getintegerDotProduct32BitSignedAccelerated();}();}();
[&](){[&](){(result.integerDotProduct32BitMixedSignednessAccelerated)=reader.getintegerDotProduct32BitMixedSignednessAccelerated();}();}();
[&](){[&](){(result.integerDotProduct64BitUnsignedAccelerated)=reader.getintegerDotProduct64BitUnsignedAccelerated();}();}();
[&](){[&](){(result.integerDotProduct64BitSignedAccelerated)=reader.getintegerDotProduct64BitSignedAccelerated();}();}();
[&](){[&](){(result.integerDotProduct64BitMixedSignednessAccelerated)=reader.getintegerDotProduct64BitMixedSignednessAccelerated();}();}();
[&](){[&](){(result.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated)=reader.getintegerDotProductAccumulatingSaturating8BitUnsignedAccelerated();}();}();
[&](){[&](){(result.integerDotProductAccumulatingSaturating8BitSignedAccelerated)=reader.getintegerDotProductAccumulatingSaturating8BitSignedAccelerated();}();}();
[&](){[&](){(result.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated)=reader.getintegerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated();}();}();
[&](){[&](){(result.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated)=reader.getintegerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated();}();}();
[&](){[&](){(result.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated)=reader.getintegerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated();}();}();
[&](){[&](){(result.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated)=reader.getintegerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated();}();}();
[&](){[&](){(result.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated)=reader.getintegerDotProductAccumulatingSaturating16BitUnsignedAccelerated();}();}();
[&](){[&](){(result.integerDotProductAccumulatingSaturating16BitSignedAccelerated)=reader.getintegerDotProductAccumulatingSaturating16BitSignedAccelerated();}();}();
[&](){[&](){(result.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated)=reader.getintegerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated();}();}();
[&](){[&](){(result.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated)=reader.getintegerDotProductAccumulatingSaturating32BitUnsignedAccelerated();}();}();
[&](){[&](){(result.integerDotProductAccumulatingSaturating32BitSignedAccelerated)=reader.getintegerDotProductAccumulatingSaturating32BitSignedAccelerated();}();}();
[&](){[&](){(result.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated)=reader.getintegerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated();}();}();
[&](){[&](){(result.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated)=reader.getintegerDotProductAccumulatingSaturating64BitUnsignedAccelerated();}();}();
[&](){[&](){(result.integerDotProductAccumulatingSaturating64BitSignedAccelerated)=reader.getintegerDotProductAccumulatingSaturating64BitSignedAccelerated();}();}();
[&](){[&](){(result.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated)=reader.getintegerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated();}();}();
[&](){[&](){(result.storageTexelBufferOffsetAlignmentBytes)=reader.getstorageTexelBufferOffsetAlignmentBytes();}();}();
[&](){[&](){(result.storageTexelBufferOffsetSingleTexelAlignment)=reader.getstorageTexelBufferOffsetSingleTexelAlignment();}();}();
[&](){[&](){(result.uniformTexelBufferOffsetAlignmentBytes)=reader.getuniformTexelBufferOffsetAlignmentBytes();}();}();
[&](){[&](){(result.uniformTexelBufferOffsetSingleTexelAlignment)=reader.getuniformTexelBufferOffsetSingleTexelAlignment();}();}();
[&](){[&](){(result.maxBufferSize)=reader.getmaxBufferSize();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceVulkan13Properties member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceVulkan13Properties member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineCompilerControlCreateInfoAMD::Builder& builder, VkPipelineCompilerControlCreateInfoAMD member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setcompilerControlFlags((member.compilerControlFlags));}();}();}();
}

    VkPipelineCompilerControlCreateInfoAMD deserialize_struct(VkPipelineCompilerControlCreateInfoAMD::Reader reader){
        auto result=VkPipelineCompilerControlCreateInfoAMD();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.compilerControlFlags)=reader.getcompilerControlFlags();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineCompilerControlCreateInfoAMD member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineCompilerControlCreateInfoAMD member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceCoherentMemoryFeaturesAMD::Builder& builder, VkPhysicalDeviceCoherentMemoryFeaturesAMD member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setdeviceCoherentMemory((member.deviceCoherentMemory));}();}();
}

    VkPhysicalDeviceCoherentMemoryFeaturesAMD deserialize_struct(VkPhysicalDeviceCoherentMemoryFeaturesAMD::Reader reader){
        auto result=VkPhysicalDeviceCoherentMemoryFeaturesAMD();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.deviceCoherentMemory)=reader.getdeviceCoherentMemory();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceCoherentMemoryFeaturesAMD member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceCoherentMemoryFeaturesAMD member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceToolProperties::Builder& builder, VkPhysicalDeviceToolProperties member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
        auto proto_arr=builder.initname();
        for(int acRPAEG=0; acRPAEG < VK_MAX_EXTENSION_NAME_SIZE; acRPAEG++){
            [&](){return proto_arr.set(acRPAEG,((member.name)[acRPAEG]));}();
        }
        }();
[&](){
        auto proto_arr=builder.initversion();
        for(int IKwHmbc=0; IKwHmbc < VK_MAX_EXTENSION_NAME_SIZE; IKwHmbc++){
            [&](){return proto_arr.set(IKwHmbc,((member.version)[IKwHmbc]));}();
        }
        }();
[&](){[&](){[&](){return builder.setpurposes((member.purposes));}();}();}();
[&](){
        auto proto_arr=builder.initdescription();
        for(int oakWTIB=0; oakWTIB < VK_MAX_DESCRIPTION_SIZE; oakWTIB++){
            [&](){return proto_arr.set(oakWTIB,((member.description)[oakWTIB]));}();
        }
        }();
[&](){
        auto proto_arr=builder.initlayer();
        for(int UTJjPWd=0; UTJjPWd < VK_MAX_EXTENSION_NAME_SIZE; UTJjPWd++){
            [&](){return proto_arr.set(UTJjPWd,((member.layer)[UTJjPWd]));}();
        }
        }();
}

    VkPhysicalDeviceToolProperties deserialize_struct(VkPhysicalDeviceToolProperties::Reader reader){
        auto result=VkPhysicalDeviceToolProperties();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){
        auto proto_arr=reader.getname(VK_MAX_EXTENSION_NAME_SIZE);
        for(int acRPAEG=0; acRPAEG < VK_MAX_EXTENSION_NAME_SIZE; acRPAEG++){
            [&](){((result.name)[acRPAEG])=proto_arr[acRPAEG];}();
        }
        }();
[&](){
        auto proto_arr=reader.getversion(VK_MAX_EXTENSION_NAME_SIZE);
        for(int IKwHmbc=0; IKwHmbc < VK_MAX_EXTENSION_NAME_SIZE; IKwHmbc++){
            [&](){((result.version)[IKwHmbc])=proto_arr[IKwHmbc];}();
        }
        }();
[&](){[&](){[&](){(result.purposes)=reader.getpurposes();}();}();}();
[&](){
        auto proto_arr=reader.getdescription(VK_MAX_DESCRIPTION_SIZE);
        for(int oakWTIB=0; oakWTIB < VK_MAX_DESCRIPTION_SIZE; oakWTIB++){
            [&](){((result.description)[oakWTIB])=proto_arr[oakWTIB];}();
        }
        }();
[&](){
        auto proto_arr=reader.getlayer(VK_MAX_EXTENSION_NAME_SIZE);
        for(int UTJjPWd=0; UTJjPWd < VK_MAX_EXTENSION_NAME_SIZE; UTJjPWd++){
            [&](){((result.layer)[UTJjPWd])=proto_arr[UTJjPWd];}();
        }
        }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceToolProperties member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceToolProperties member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSamplerCustomBorderColorCreateInfoEXT::Builder& builder, VkSamplerCustomBorderColorCreateInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            auto temp=builder.initcustomBorderColor(customBorderColor);
            return serialize_struct((member.customBorderColor), temp);
            }();
[&](){[&](){[&](){return builder.setformat((member.format));}();}();}();
}

    VkSamplerCustomBorderColorCreateInfoEXT deserialize_struct(VkSamplerCustomBorderColorCreateInfoEXT::Reader reader){
        auto result=VkSamplerCustomBorderColorCreateInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){
            auto temp=reader.getcustomBorderColor();
            (result.customBorderColor)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.format)=reader.getformat();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSamplerCustomBorderColorCreateInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSamplerCustomBorderColorCreateInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceCustomBorderColorPropertiesEXT::Builder& builder, VkPhysicalDeviceCustomBorderColorPropertiesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setmaxCustomBorderColorSamplers((member.maxCustomBorderColorSamplers));}();
}

    VkPhysicalDeviceCustomBorderColorPropertiesEXT deserialize_struct(VkPhysicalDeviceCustomBorderColorPropertiesEXT::Reader reader){
        auto result=VkPhysicalDeviceCustomBorderColorPropertiesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.maxCustomBorderColorSamplers)=reader.getmaxCustomBorderColorSamplers();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceCustomBorderColorPropertiesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceCustomBorderColorPropertiesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceCustomBorderColorFeaturesEXT::Builder& builder, VkPhysicalDeviceCustomBorderColorFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setcustomBorderColors((member.customBorderColors));}();}();
[&](){[&](){return builder.setcustomBorderColorWithoutFormat((member.customBorderColorWithoutFormat));}();}();
}

    VkPhysicalDeviceCustomBorderColorFeaturesEXT deserialize_struct(VkPhysicalDeviceCustomBorderColorFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceCustomBorderColorFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.customBorderColors)=reader.getcustomBorderColors();}();}();
[&](){[&](){(result.customBorderColorWithoutFormat)=reader.getcustomBorderColorWithoutFormat();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceCustomBorderColorFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceCustomBorderColorFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSamplerBorderColorComponentMappingCreateInfoEXT::Builder& builder, VkSamplerBorderColorComponentMappingCreateInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            auto temp=builder.initcomponents(components);
            return serialize_struct((member.components), temp);
            }();
[&](){[&](){return builder.setsrgb((member.srgb));}();}();
}

    VkSamplerBorderColorComponentMappingCreateInfoEXT deserialize_struct(VkSamplerBorderColorComponentMappingCreateInfoEXT::Reader reader){
        auto result=VkSamplerBorderColorComponentMappingCreateInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){
            auto temp=reader.getcomponents();
            (result.components)=deserialize_struct(temp);
            }();
[&](){[&](){(result.srgb)=reader.getsrgb();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSamplerBorderColorComponentMappingCreateInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSamplerBorderColorComponentMappingCreateInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceBorderColorSwizzleFeaturesEXT::Builder& builder, VkPhysicalDeviceBorderColorSwizzleFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setborderColorSwizzle((member.borderColorSwizzle));}();}();
[&](){[&](){return builder.setborderColorSwizzleFromImage((member.borderColorSwizzleFromImage));}();}();
}

    VkPhysicalDeviceBorderColorSwizzleFeaturesEXT deserialize_struct(VkPhysicalDeviceBorderColorSwizzleFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceBorderColorSwizzleFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.borderColorSwizzle)=reader.getborderColorSwizzle();}();}();
[&](){[&](){(result.borderColorSwizzleFromImage)=reader.getborderColorSwizzleFromImage();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceBorderColorSwizzleFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceBorderColorSwizzleFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDeviceOrHostAddressKHR::Builder& builder, VkDeviceOrHostAddressKHR member){
        
    
[&](){[&](){return builder.setdeviceAddress((member.deviceAddress));}();}();
[&](){
            if ((member.hostAddress)==NULL){
                builder.disownhostAddress();
            return; }[&](){
            if (((char*)(member.hostAddress).hostAddress)==NULL){
                builder.disownhostAddress();
            return; }
        auto proto_arr=builder.inithostAddress();
        for(int UYQdwVY=0; UYQdwVY < strlen(((char*)(member.hostAddress).hostAddress))+1; UYQdwVY++){
            [&](){return proto_arr.set(UYQdwVY,(((char*)(member.hostAddress).hostAddress)[UYQdwVY]));}();
        }
        }();}();
}

    VkDeviceOrHostAddressKHR deserialize_struct(VkDeviceOrHostAddressKHR::Reader reader){
        auto result=VkDeviceOrHostAddressKHR();
    
[&](){[&](){(result.deviceAddress)=reader.getdeviceAddress();}();}();
[&](){
            if (!reader.hashostAddress()){
                (result.hostAddress)=NULL;
            return; }char* temp_hkOvUOp;[&](){
            if (!reader.hashostAddress()){
                (temp_hkOvUOp.hostAddress)=NULL;
            return; }{native_concat()}=(char*)malloc(reader.gethostAddress().size();*sizeof(char));
        auto proto_arr=reader.gethostAddress(reader.gethostAddress().size(););
        for(int UYQdwVY=0; UYQdwVY < reader.gethostAddress().size();; UYQdwVY++){
            [&](){((temp_hkOvUOp.hostAddress)[UYQdwVY])=proto_arr[UYQdwVY];}();
        }
        }();(result.hostAddress)=temp_hkOvUOp;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDeviceOrHostAddressKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDeviceOrHostAddressKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDeviceOrHostAddressConstKHR::Builder& builder, VkDeviceOrHostAddressConstKHR member){
        
    
[&](){[&](){return builder.setdeviceAddress((member.deviceAddress));}();}();
[&](){
            if ((member.hostAddress)==NULL){
                builder.disownhostAddress();
            return; }[&](){
            if (((char*)(member.hostAddress).hostAddress)==NULL){
                builder.disownhostAddress();
            return; }
        auto proto_arr=builder.inithostAddress();
        for(int VRRvftU=0; VRRvftU < strlen(((char*)(member.hostAddress).hostAddress))+1; VRRvftU++){
            [&](){return proto_arr.set(VRRvftU,(((char*)(member.hostAddress).hostAddress)[VRRvftU]));}();
        }
        }();}();
}

    VkDeviceOrHostAddressConstKHR deserialize_struct(VkDeviceOrHostAddressConstKHR::Reader reader){
        auto result=VkDeviceOrHostAddressConstKHR();
    
[&](){[&](){(result.deviceAddress)=reader.getdeviceAddress();}();}();
[&](){ void* temp_BaTEZDg[&](){
            if (!reader.hashostAddress()){
                (result.hostAddress)=NULL;
            return; }char* temp_huVSMIu;[&](){
            if (!reader.hashostAddress()){
                (temp_huVSMIu.hostAddress)=NULL;
            return; }{native_concat()}=(char*)malloc(reader.gethostAddress().size();*sizeof(char));
        auto proto_arr=reader.gethostAddress(reader.gethostAddress().size(););
        for(int HqoDSMo=0; HqoDSMo < reader.gethostAddress().size();; HqoDSMo++){
            [&](){((temp_huVSMIu.hostAddress)[HqoDSMo])=proto_arr[HqoDSMo];}();
        }
        }();(result.hostAddress)=temp_huVSMIu;}();(result.hostAddress)=temp_BaTEZDg;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDeviceOrHostAddressConstKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDeviceOrHostAddressConstKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkAccelerationStructureGeometryTrianglesDataKHR::Builder& builder, VkAccelerationStructureGeometryTrianglesDataKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setvertexFormat((member.vertexFormat));}();}();}();
[&](){
            auto temp=builder.initvertexData(vertexData);
            return serialize_struct((member.vertexData), temp);
            }();
[&](){[&](){return builder.setvertexStride((member.vertexStride));}();}();
[&](){return builder.setmaxVertex((member.maxVertex));}();
[&](){[&](){[&](){return builder.setindexType((member.indexType));}();}();}();
[&](){
            auto temp=builder.initindexData(indexData);
            return serialize_struct((member.indexData), temp);
            }();
[&](){
            auto temp=builder.inittransformData(transformData);
            return serialize_struct((member.transformData), temp);
            }();
}

    VkAccelerationStructureGeometryTrianglesDataKHR deserialize_struct(VkAccelerationStructureGeometryTrianglesDataKHR::Reader reader){
        auto result=VkAccelerationStructureGeometryTrianglesDataKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.vertexFormat)=reader.getvertexFormat();}();}();}();
[&](){
            auto temp=reader.getvertexData();
            (result.vertexData)=deserialize_struct(temp);
            }();
[&](){[&](){(result.vertexStride)=reader.getvertexStride();}();}();
[&](){(result.maxVertex)=reader.getmaxVertex();}();
[&](){[&](){[&](){(result.indexType)=reader.getindexType();}();}();}();
[&](){
            auto temp=reader.getindexData();
            (result.indexData)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.gettransformData();
            (result.transformData)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkAccelerationStructureGeometryTrianglesDataKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkAccelerationStructureGeometryTrianglesDataKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkAccelerationStructureGeometryAabbsDataKHR::Builder& builder, VkAccelerationStructureGeometryAabbsDataKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            auto temp=builder.initdata(data);
            return serialize_struct((member.data), temp);
            }();
[&](){[&](){return builder.setstride((member.stride));}();}();
}

    VkAccelerationStructureGeometryAabbsDataKHR deserialize_struct(VkAccelerationStructureGeometryAabbsDataKHR::Reader reader){
        auto result=VkAccelerationStructureGeometryAabbsDataKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){
            auto temp=reader.getdata();
            (result.data)=deserialize_struct(temp);
            }();
[&](){[&](){(result.stride)=reader.getstride();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkAccelerationStructureGeometryAabbsDataKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkAccelerationStructureGeometryAabbsDataKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkAccelerationStructureGeometryInstancesDataKHR::Builder& builder, VkAccelerationStructureGeometryInstancesDataKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setarrayOfPointers((member.arrayOfPointers));}();}();
[&](){
            auto temp=builder.initdata(data);
            return serialize_struct((member.data), temp);
            }();
}

    VkAccelerationStructureGeometryInstancesDataKHR deserialize_struct(VkAccelerationStructureGeometryInstancesDataKHR::Reader reader){
        auto result=VkAccelerationStructureGeometryInstancesDataKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){(result.arrayOfPointers)=reader.getarrayOfPointers();}();}();
[&](){
            auto temp=reader.getdata();
            (result.data)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkAccelerationStructureGeometryInstancesDataKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkAccelerationStructureGeometryInstancesDataKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkAccelerationStructureGeometryDataKHR::Builder& builder, VkAccelerationStructureGeometryDataKHR member){
        
    
[&](){
            auto temp=builder.inittriangles(triangles);
            return serialize_struct((member.triangles), temp);
            }();
[&](){
            auto temp=builder.initaabbs(aabbs);
            return serialize_struct((member.aabbs), temp);
            }();
[&](){
            auto temp=builder.initinstances(instances);
            return serialize_struct((member.instances), temp);
            }();
}

    VkAccelerationStructureGeometryDataKHR deserialize_struct(VkAccelerationStructureGeometryDataKHR::Reader reader){
        auto result=VkAccelerationStructureGeometryDataKHR();
    
[&](){
            auto temp=reader.gettriangles();
            (result.triangles)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getaabbs();
            (result.aabbs)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getinstances();
            (result.instances)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkAccelerationStructureGeometryDataKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkAccelerationStructureGeometryDataKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkAccelerationStructureGeometryKHR::Builder& builder, VkAccelerationStructureGeometryKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setgeometryType((member.geometryType));}();}();}();
[&](){
            auto temp=builder.initgeometry(geometry);
            return serialize_struct((member.geometry), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
}

    VkAccelerationStructureGeometryKHR deserialize_struct(VkAccelerationStructureGeometryKHR::Reader reader){
        auto result=VkAccelerationStructureGeometryKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.geometryType)=reader.getgeometryType();}();}();}();
[&](){
            auto temp=reader.getgeometry();
            (result.geometry)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkAccelerationStructureGeometryKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkAccelerationStructureGeometryKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkAccelerationStructureBuildGeometryInfoKHR::Builder& builder, VkAccelerationStructureBuildGeometryInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.settype((member.type));}();}();}();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){[&](){[&](){return builder.setmode((member.mode));}();}();}();
[&](){return builder.setsrcAccelerationStructure(serialize_handle(member.srcAccelerationStructure));}();
[&](){return builder.setdstAccelerationStructure(serialize_handle(member.dstAccelerationStructure));}();
[&](){return builder.setgeometryCount((member.geometryCount));}();
[&](){
            if ((member.pGeometries)==NULL){
                builder.disownpGeometries();
            return; }
        auto proto_arr=builder.initpGeometries();
        for(int fhUWMAC=0; fhUWMAC < member.geometryCount; fhUWMAC++){
            [&](){
            auto temp=proto_arr[fhUWMAC];
            return serialize_struct(((member.pGeometries)[fhUWMAC]), temp);
            }();
        }
        }();
[&](){
            if ((member.ppGeometries)==NULL){
                builder.disownppGeometries();
            return; }
        auto proto_arr=builder.initppGeometries();
        for(int TtQPDAY=0; TtQPDAY < member.geometryCount; TtQPDAY++){
            [&](){
            if (((member.ppGeometries)[TtQPDAY])==NULL){
                proto_arr.init(TtQPDAY);
            return; }
        auto proto_arr=proto_arr[TtQPDAY];
        for(int wscYZjA=0; wscYZjA < 1; wscYZjA++){
            [&](){
            auto temp=proto_arr[wscYZjA];
            return serialize_struct((((member.ppGeometries)[TtQPDAY])[wscYZjA]), temp);
            }();
        }
        }();
        }
        }();
[&](){
            auto temp=builder.initscratchData(scratchData);
            return serialize_struct((member.scratchData), temp);
            }();
}

    VkAccelerationStructureBuildGeometryInfoKHR deserialize_struct(VkAccelerationStructureBuildGeometryInfoKHR::Reader reader){
        auto result=VkAccelerationStructureBuildGeometryInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.type)=reader.gettype();}();}();}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){[&](){[&](){(result.mode)=reader.getmode();}();}();}();
[&](){(result.srcAccelerationStructure)=deserialize_handle(reader.getsrcAccelerationStructure());}();
[&](){(result.dstAccelerationStructure)=deserialize_handle(reader.getdstAccelerationStructure());}();
[&](){(result.geometryCount)=reader.getgeometryCount();}();
[&](){ VkAccelerationStructureGeometryKHR* temp_CbaTjUS[&](){
            if (!reader.haspGeometries()){
                (result.pGeometries)=NULL;
            return; }{native_concat()}=(VkAccelerationStructureGeometryKHR*)malloc(result.geometryCount*sizeof(VkAccelerationStructureGeometryKHR));
        auto proto_arr=reader.getpGeometries(result.geometryCount);
        for(int OecFmyq=0; OecFmyq < result.geometryCount; OecFmyq++){
            [&](){
            auto temp=proto_arr[OecFmyq];
            ((result.pGeometries)[OecFmyq])=deserialize_struct(temp);
            }();
        }
        }();(result.pGeometries)=temp_CbaTjUS;}();
[&](){ VkAccelerationStructureGeometryKHR* * temp_RCDjEBm[&](){
            if (!reader.hasppGeometries()){
                (result.ppGeometries)=NULL;
            return; }{native_concat()}=(VkAccelerationStructureGeometryKHR**)malloc(result.geometryCount*sizeof(VkAccelerationStructureGeometryKHR*));
        auto proto_arr=reader.getppGeometries(result.geometryCount);
        for(int EgklKvE=0; EgklKvE < result.geometryCount; EgklKvE++){
            [&](){
            if (!proto_arr[EgklKvE].size){
                ((result.ppGeometries)[EgklKvE])=NULL;
            return; }{native_concat()}=(VkAccelerationStructureGeometryKHR*)malloc(1*sizeof(VkAccelerationStructureGeometryKHR));
        auto proto_arr=proto_arr[EgklKvE];
        for(int WnVxJDd=0; WnVxJDd < 1; WnVxJDd++){
            [&](){
            auto temp=proto_arr[WnVxJDd];
            (((result.ppGeometries)[EgklKvE])[WnVxJDd])=deserialize_struct(temp);
            }();
        }
        }();
        }
        }();(result.ppGeometries)=temp_RCDjEBm;}();
[&](){
            auto temp=reader.getscratchData();
            (result.scratchData)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkAccelerationStructureBuildGeometryInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkAccelerationStructureBuildGeometryInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkAccelerationStructureBuildRangeInfoKHR::Builder& builder, VkAccelerationStructureBuildRangeInfoKHR member){
        
    
[&](){return builder.setprimitiveCount((member.primitiveCount));}();
[&](){return builder.setprimitiveOffset((member.primitiveOffset));}();
[&](){return builder.setfirstVertex((member.firstVertex));}();
[&](){return builder.settransformOffset((member.transformOffset));}();
}

    VkAccelerationStructureBuildRangeInfoKHR deserialize_struct(VkAccelerationStructureBuildRangeInfoKHR::Reader reader){
        auto result=VkAccelerationStructureBuildRangeInfoKHR();
    
[&](){(result.primitiveCount)=reader.getprimitiveCount();}();
[&](){(result.primitiveOffset)=reader.getprimitiveOffset();}();
[&](){(result.firstVertex)=reader.getfirstVertex();}();
[&](){(result.transformOffset)=reader.gettransformOffset();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkAccelerationStructureBuildRangeInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkAccelerationStructureBuildRangeInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkAccelerationStructureCreateInfoKHR::Builder& builder, VkAccelerationStructureCreateInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setcreateFlags((member.createFlags));}();}();}();
[&](){return builder.setbuffer(serialize_handle(member.buffer));}();
[&](){[&](){return builder.setoffset((member.offset));}();}();
[&](){[&](){return builder.setsize((member.size));}();}();
[&](){[&](){[&](){return builder.settype((member.type));}();}();}();
[&](){[&](){return builder.setdeviceAddress((member.deviceAddress));}();}();
}

    VkAccelerationStructureCreateInfoKHR deserialize_struct(VkAccelerationStructureCreateInfoKHR::Reader reader){
        auto result=VkAccelerationStructureCreateInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.createFlags)=reader.getcreateFlags();}();}();}();
[&](){(result.buffer)=deserialize_handle(reader.getbuffer());}();
[&](){[&](){(result.offset)=reader.getoffset();}();}();
[&](){[&](){(result.size)=reader.getsize();}();}();
[&](){[&](){[&](){(result.type)=reader.gettype();}();}();}();
[&](){[&](){(result.deviceAddress)=reader.getdeviceAddress();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkAccelerationStructureCreateInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkAccelerationStructureCreateInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkAabbPositionsKHR::Builder& builder, VkAabbPositionsKHR member){
        
    
[&](){return builder.setminX((member.minX));}();
[&](){return builder.setminY((member.minY));}();
[&](){return builder.setminZ((member.minZ));}();
[&](){return builder.setmaxX((member.maxX));}();
[&](){return builder.setmaxY((member.maxY));}();
[&](){return builder.setmaxZ((member.maxZ));}();
}

    VkAabbPositionsKHR deserialize_struct(VkAabbPositionsKHR::Reader reader){
        auto result=VkAabbPositionsKHR();
    
[&](){(result.minX)=reader.getminX();}();
[&](){(result.minY)=reader.getminY();}();
[&](){(result.minZ)=reader.getminZ();}();
[&](){(result.maxX)=reader.getmaxX();}();
[&](){(result.maxY)=reader.getmaxY();}();
[&](){(result.maxZ)=reader.getmaxZ();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkAabbPositionsKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkAabbPositionsKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkTransformMatrixKHR::Builder& builder, VkTransformMatrixKHR member){
        
    
[&](){
        auto proto_arr=builder.initmatrix();
        for(int HGQDLyT=0; HGQDLyT < 3; HGQDLyT++){
            [&](){
        auto proto_arr=proto_arr[HGQDLyT];
        for(int jdKOchF=0; jdKOchF < 4; jdKOchF++){
            [&](){return proto_arr.set(jdKOchF,(((member.matrix)[HGQDLyT])[jdKOchF]));}();
        }
        }();
        }
        }();
}

    VkTransformMatrixKHR deserialize_struct(VkTransformMatrixKHR::Reader reader){
        auto result=VkTransformMatrixKHR();
    
[&](){
        auto proto_arr=reader.getmatrix(3);
        for(int HGQDLyT=0; HGQDLyT < 3; HGQDLyT++){
            [&](){
        auto proto_arr=proto_arr[HGQDLyT];
        for(int jdKOchF=0; jdKOchF < 4; jdKOchF++){
            [&](){(((result.matrix)[HGQDLyT])[jdKOchF])=proto_arr[jdKOchF];}();
        }
        }();
        }
        }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkTransformMatrixKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkTransformMatrixKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkAccelerationStructureInstanceKHR::Builder& builder, VkAccelerationStructureInstanceKHR member){
        
    
[&](){
            auto temp=builder.inittransform(transform);
            return serialize_struct((member.transform), temp);
            }();
[&](){return builder.setinstanceCustomIndex((member.instanceCustomIndex));}();
[&](){return builder.setmask((member.mask));}();
[&](){return builder.setinstanceShaderBindingTableRecordOffset((member.instanceShaderBindingTableRecordOffset));}();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){return builder.setaccelerationStructureReference((member.accelerationStructureReference));}();
}

    VkAccelerationStructureInstanceKHR deserialize_struct(VkAccelerationStructureInstanceKHR::Reader reader){
        auto result=VkAccelerationStructureInstanceKHR();
    
[&](){
            auto temp=reader.gettransform();
            (result.transform)=deserialize_struct(temp);
            }();
[&](){(result.instanceCustomIndex)=reader.getinstanceCustomIndex();}();
[&](){(result.mask)=reader.getmask();}();
[&](){(result.instanceShaderBindingTableRecordOffset)=reader.getinstanceShaderBindingTableRecordOffset();}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){(result.accelerationStructureReference)=reader.getaccelerationStructureReference();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkAccelerationStructureInstanceKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkAccelerationStructureInstanceKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkAccelerationStructureDeviceAddressInfoKHR::Builder& builder, VkAccelerationStructureDeviceAddressInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setaccelerationStructure(serialize_handle(member.accelerationStructure));}();
}

    VkAccelerationStructureDeviceAddressInfoKHR deserialize_struct(VkAccelerationStructureDeviceAddressInfoKHR::Reader reader){
        auto result=VkAccelerationStructureDeviceAddressInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.accelerationStructure)=deserialize_handle(reader.getaccelerationStructure());}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkAccelerationStructureDeviceAddressInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkAccelerationStructureDeviceAddressInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkAccelerationStructureVersionInfoKHR::Builder& builder, VkAccelerationStructureVersionInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            if ((member.pVersionData)==NULL){
                builder.disownpVersionData();
            return; }
        auto proto_arr=builder.initpVersionData();
        for(int UXnQvHZ=0; UXnQvHZ < 2*VK_UUID_SIZE; UXnQvHZ++){
            [&](){return proto_arr.set(UXnQvHZ,((member.pVersionData)[UXnQvHZ]));}();
        }
        }();
}

    VkAccelerationStructureVersionInfoKHR deserialize_struct(VkAccelerationStructureVersionInfoKHR::Reader reader){
        auto result=VkAccelerationStructureVersionInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){ uint8_t* temp_kcsYiSk[&](){
            if (!reader.haspVersionData()){
                (result.pVersionData)=NULL;
            return; }{native_concat()}=(uint8_t*)malloc(2*VK_UUID_SIZE*sizeof(uint8_t));
        auto proto_arr=reader.getpVersionData(2*VK_UUID_SIZE);
        for(int aPYYtKH=0; aPYYtKH < 2*VK_UUID_SIZE; aPYYtKH++){
            [&](){((result.pVersionData)[aPYYtKH])=proto_arr[aPYYtKH];}();
        }
        }();(result.pVersionData)=temp_kcsYiSk;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkAccelerationStructureVersionInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkAccelerationStructureVersionInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkCopyAccelerationStructureInfoKHR::Builder& builder, VkCopyAccelerationStructureInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setsrc(serialize_handle(member.src));}();
[&](){return builder.setdst(serialize_handle(member.dst));}();
[&](){[&](){[&](){return builder.setmode((member.mode));}();}();}();
}

    VkCopyAccelerationStructureInfoKHR deserialize_struct(VkCopyAccelerationStructureInfoKHR::Reader reader){
        auto result=VkCopyAccelerationStructureInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.src)=deserialize_handle(reader.getsrc());}();
[&](){(result.dst)=deserialize_handle(reader.getdst());}();
[&](){[&](){[&](){(result.mode)=reader.getmode();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkCopyAccelerationStructureInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkCopyAccelerationStructureInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkCopyAccelerationStructureToMemoryInfoKHR::Builder& builder, VkCopyAccelerationStructureToMemoryInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setsrc(serialize_handle(member.src));}();
[&](){
            auto temp=builder.initdst(dst);
            return serialize_struct((member.dst), temp);
            }();
[&](){[&](){[&](){return builder.setmode((member.mode));}();}();}();
}

    VkCopyAccelerationStructureToMemoryInfoKHR deserialize_struct(VkCopyAccelerationStructureToMemoryInfoKHR::Reader reader){
        auto result=VkCopyAccelerationStructureToMemoryInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.src)=deserialize_handle(reader.getsrc());}();
[&](){
            auto temp=reader.getdst();
            (result.dst)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.mode)=reader.getmode();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkCopyAccelerationStructureToMemoryInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkCopyAccelerationStructureToMemoryInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkCopyMemoryToAccelerationStructureInfoKHR::Builder& builder, VkCopyMemoryToAccelerationStructureInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            auto temp=builder.initsrc(src);
            return serialize_struct((member.src), temp);
            }();
[&](){return builder.setdst(serialize_handle(member.dst));}();
[&](){[&](){[&](){return builder.setmode((member.mode));}();}();}();
}

    VkCopyMemoryToAccelerationStructureInfoKHR deserialize_struct(VkCopyMemoryToAccelerationStructureInfoKHR::Reader reader){
        auto result=VkCopyMemoryToAccelerationStructureInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){
            auto temp=reader.getsrc();
            (result.src)=deserialize_struct(temp);
            }();
[&](){(result.dst)=deserialize_handle(reader.getdst());}();
[&](){[&](){[&](){(result.mode)=reader.getmode();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkCopyMemoryToAccelerationStructureInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkCopyMemoryToAccelerationStructureInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkRayTracingPipelineInterfaceCreateInfoKHR::Builder& builder, VkRayTracingPipelineInterfaceCreateInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setmaxPipelineRayPayloadSize((member.maxPipelineRayPayloadSize));}();
[&](){return builder.setmaxPipelineRayHitAttributeSize((member.maxPipelineRayHitAttributeSize));}();
}

    VkRayTracingPipelineInterfaceCreateInfoKHR deserialize_struct(VkRayTracingPipelineInterfaceCreateInfoKHR::Reader reader){
        auto result=VkRayTracingPipelineInterfaceCreateInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.maxPipelineRayPayloadSize)=reader.getmaxPipelineRayPayloadSize();}();
[&](){(result.maxPipelineRayHitAttributeSize)=reader.getmaxPipelineRayHitAttributeSize();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkRayTracingPipelineInterfaceCreateInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkRayTracingPipelineInterfaceCreateInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineLibraryCreateInfoKHR::Builder& builder, VkPipelineLibraryCreateInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setlibraryCount((member.libraryCount));}();
[&](){
            if ((member.pLibraries)==NULL){
                builder.disownpLibraries();
            return; }
        auto proto_arr=builder.initpLibraries();
        for(int nmCoQWf=0; nmCoQWf < member.libraryCount; nmCoQWf++){
            [&](){return proto_arr.set(nmCoQWf,serialize_handle((member.pLibraries)[nmCoQWf]));}();
        }
        }();
}

    VkPipelineLibraryCreateInfoKHR deserialize_struct(VkPipelineLibraryCreateInfoKHR::Reader reader){
        auto result=VkPipelineLibraryCreateInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.libraryCount)=reader.getlibraryCount();}();
[&](){ VkPipeline* temp_CtvAqgB[&](){
            if (!reader.haspLibraries()){
                (result.pLibraries)=NULL;
            return; }{native_concat()}=(VkPipeline*)malloc(result.libraryCount*sizeof(VkPipeline));
        auto proto_arr=reader.getpLibraries(result.libraryCount);
        for(int jSFoMUK=0; jSFoMUK < result.libraryCount; jSFoMUK++){
            [&](){((result.pLibraries)[jSFoMUK])=deserialize_handle(proto_arr[jSFoMUK]);}();
        }
        }();(result.pLibraries)=temp_CtvAqgB;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineLibraryCreateInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineLibraryCreateInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceExtendedDynamicStateFeaturesEXT::Builder& builder, VkPhysicalDeviceExtendedDynamicStateFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setextendedDynamicState((member.extendedDynamicState));}();}();
}

    VkPhysicalDeviceExtendedDynamicStateFeaturesEXT deserialize_struct(VkPhysicalDeviceExtendedDynamicStateFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceExtendedDynamicStateFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.extendedDynamicState)=reader.getextendedDynamicState();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceExtendedDynamicStateFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceExtendedDynamicStateFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceExtendedDynamicState2FeaturesEXT::Builder& builder, VkPhysicalDeviceExtendedDynamicState2FeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setextendedDynamicState2((member.extendedDynamicState2));}();}();
[&](){[&](){return builder.setextendedDynamicState2LogicOp((member.extendedDynamicState2LogicOp));}();}();
[&](){[&](){return builder.setextendedDynamicState2PatchControlPoints((member.extendedDynamicState2PatchControlPoints));}();}();
}

    VkPhysicalDeviceExtendedDynamicState2FeaturesEXT deserialize_struct(VkPhysicalDeviceExtendedDynamicState2FeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceExtendedDynamicState2FeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.extendedDynamicState2)=reader.getextendedDynamicState2();}();}();
[&](){[&](){(result.extendedDynamicState2LogicOp)=reader.getextendedDynamicState2LogicOp();}();}();
[&](){[&](){(result.extendedDynamicState2PatchControlPoints)=reader.getextendedDynamicState2PatchControlPoints();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceExtendedDynamicState2FeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceExtendedDynamicState2FeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::Builder& builder, VkPhysicalDeviceExtendedDynamicState3FeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setextendedDynamicState3TessellationDomainOrigin((member.extendedDynamicState3TessellationDomainOrigin));}();}();
[&](){[&](){return builder.setextendedDynamicState3DepthClampEnable((member.extendedDynamicState3DepthClampEnable));}();}();
[&](){[&](){return builder.setextendedDynamicState3PolygonMode((member.extendedDynamicState3PolygonMode));}();}();
[&](){[&](){return builder.setextendedDynamicState3RasterizationSamples((member.extendedDynamicState3RasterizationSamples));}();}();
[&](){[&](){return builder.setextendedDynamicState3SampleMask((member.extendedDynamicState3SampleMask));}();}();
[&](){[&](){return builder.setextendedDynamicState3AlphaToCoverageEnable((member.extendedDynamicState3AlphaToCoverageEnable));}();}();
[&](){[&](){return builder.setextendedDynamicState3AlphaToOneEnable((member.extendedDynamicState3AlphaToOneEnable));}();}();
[&](){[&](){return builder.setextendedDynamicState3LogicOpEnable((member.extendedDynamicState3LogicOpEnable));}();}();
[&](){[&](){return builder.setextendedDynamicState3ColorBlendEnable((member.extendedDynamicState3ColorBlendEnable));}();}();
[&](){[&](){return builder.setextendedDynamicState3ColorBlendEquation((member.extendedDynamicState3ColorBlendEquation));}();}();
[&](){[&](){return builder.setextendedDynamicState3ColorWriteMask((member.extendedDynamicState3ColorWriteMask));}();}();
[&](){[&](){return builder.setextendedDynamicState3RasterizationStream((member.extendedDynamicState3RasterizationStream));}();}();
[&](){[&](){return builder.setextendedDynamicState3ConservativeRasterizationMode((member.extendedDynamicState3ConservativeRasterizationMode));}();}();
[&](){[&](){return builder.setextendedDynamicState3ExtraPrimitiveOverestimationSize((member.extendedDynamicState3ExtraPrimitiveOverestimationSize));}();}();
[&](){[&](){return builder.setextendedDynamicState3DepthClipEnable((member.extendedDynamicState3DepthClipEnable));}();}();
[&](){[&](){return builder.setextendedDynamicState3SampleLocationsEnable((member.extendedDynamicState3SampleLocationsEnable));}();}();
[&](){[&](){return builder.setextendedDynamicState3ColorBlendAdvanced((member.extendedDynamicState3ColorBlendAdvanced));}();}();
[&](){[&](){return builder.setextendedDynamicState3ProvokingVertexMode((member.extendedDynamicState3ProvokingVertexMode));}();}();
[&](){[&](){return builder.setextendedDynamicState3LineRasterizationMode((member.extendedDynamicState3LineRasterizationMode));}();}();
[&](){[&](){return builder.setextendedDynamicState3LineStippleEnable((member.extendedDynamicState3LineStippleEnable));}();}();
[&](){[&](){return builder.setextendedDynamicState3DepthClipNegativeOneToOne((member.extendedDynamicState3DepthClipNegativeOneToOne));}();}();
[&](){[&](){return builder.setextendedDynamicState3ViewportWScalingEnable((member.extendedDynamicState3ViewportWScalingEnable));}();}();
[&](){[&](){return builder.setextendedDynamicState3ViewportSwizzle((member.extendedDynamicState3ViewportSwizzle));}();}();
[&](){[&](){return builder.setextendedDynamicState3CoverageToColorEnable((member.extendedDynamicState3CoverageToColorEnable));}();}();
[&](){[&](){return builder.setextendedDynamicState3CoverageToColorLocation((member.extendedDynamicState3CoverageToColorLocation));}();}();
[&](){[&](){return builder.setextendedDynamicState3CoverageModulationMode((member.extendedDynamicState3CoverageModulationMode));}();}();
[&](){[&](){return builder.setextendedDynamicState3CoverageModulationTableEnable((member.extendedDynamicState3CoverageModulationTableEnable));}();}();
[&](){[&](){return builder.setextendedDynamicState3CoverageModulationTable((member.extendedDynamicState3CoverageModulationTable));}();}();
[&](){[&](){return builder.setextendedDynamicState3CoverageReductionMode((member.extendedDynamicState3CoverageReductionMode));}();}();
[&](){[&](){return builder.setextendedDynamicState3RepresentativeFragmentTestEnable((member.extendedDynamicState3RepresentativeFragmentTestEnable));}();}();
[&](){[&](){return builder.setextendedDynamicState3ShadingRateImageEnable((member.extendedDynamicState3ShadingRateImageEnable));}();}();
}

    VkPhysicalDeviceExtendedDynamicState3FeaturesEXT deserialize_struct(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceExtendedDynamicState3FeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.extendedDynamicState3TessellationDomainOrigin)=reader.getextendedDynamicState3TessellationDomainOrigin();}();}();
[&](){[&](){(result.extendedDynamicState3DepthClampEnable)=reader.getextendedDynamicState3DepthClampEnable();}();}();
[&](){[&](){(result.extendedDynamicState3PolygonMode)=reader.getextendedDynamicState3PolygonMode();}();}();
[&](){[&](){(result.extendedDynamicState3RasterizationSamples)=reader.getextendedDynamicState3RasterizationSamples();}();}();
[&](){[&](){(result.extendedDynamicState3SampleMask)=reader.getextendedDynamicState3SampleMask();}();}();
[&](){[&](){(result.extendedDynamicState3AlphaToCoverageEnable)=reader.getextendedDynamicState3AlphaToCoverageEnable();}();}();
[&](){[&](){(result.extendedDynamicState3AlphaToOneEnable)=reader.getextendedDynamicState3AlphaToOneEnable();}();}();
[&](){[&](){(result.extendedDynamicState3LogicOpEnable)=reader.getextendedDynamicState3LogicOpEnable();}();}();
[&](){[&](){(result.extendedDynamicState3ColorBlendEnable)=reader.getextendedDynamicState3ColorBlendEnable();}();}();
[&](){[&](){(result.extendedDynamicState3ColorBlendEquation)=reader.getextendedDynamicState3ColorBlendEquation();}();}();
[&](){[&](){(result.extendedDynamicState3ColorWriteMask)=reader.getextendedDynamicState3ColorWriteMask();}();}();
[&](){[&](){(result.extendedDynamicState3RasterizationStream)=reader.getextendedDynamicState3RasterizationStream();}();}();
[&](){[&](){(result.extendedDynamicState3ConservativeRasterizationMode)=reader.getextendedDynamicState3ConservativeRasterizationMode();}();}();
[&](){[&](){(result.extendedDynamicState3ExtraPrimitiveOverestimationSize)=reader.getextendedDynamicState3ExtraPrimitiveOverestimationSize();}();}();
[&](){[&](){(result.extendedDynamicState3DepthClipEnable)=reader.getextendedDynamicState3DepthClipEnable();}();}();
[&](){[&](){(result.extendedDynamicState3SampleLocationsEnable)=reader.getextendedDynamicState3SampleLocationsEnable();}();}();
[&](){[&](){(result.extendedDynamicState3ColorBlendAdvanced)=reader.getextendedDynamicState3ColorBlendAdvanced();}();}();
[&](){[&](){(result.extendedDynamicState3ProvokingVertexMode)=reader.getextendedDynamicState3ProvokingVertexMode();}();}();
[&](){[&](){(result.extendedDynamicState3LineRasterizationMode)=reader.getextendedDynamicState3LineRasterizationMode();}();}();
[&](){[&](){(result.extendedDynamicState3LineStippleEnable)=reader.getextendedDynamicState3LineStippleEnable();}();}();
[&](){[&](){(result.extendedDynamicState3DepthClipNegativeOneToOne)=reader.getextendedDynamicState3DepthClipNegativeOneToOne();}();}();
[&](){[&](){(result.extendedDynamicState3ViewportWScalingEnable)=reader.getextendedDynamicState3ViewportWScalingEnable();}();}();
[&](){[&](){(result.extendedDynamicState3ViewportSwizzle)=reader.getextendedDynamicState3ViewportSwizzle();}();}();
[&](){[&](){(result.extendedDynamicState3CoverageToColorEnable)=reader.getextendedDynamicState3CoverageToColorEnable();}();}();
[&](){[&](){(result.extendedDynamicState3CoverageToColorLocation)=reader.getextendedDynamicState3CoverageToColorLocation();}();}();
[&](){[&](){(result.extendedDynamicState3CoverageModulationMode)=reader.getextendedDynamicState3CoverageModulationMode();}();}();
[&](){[&](){(result.extendedDynamicState3CoverageModulationTableEnable)=reader.getextendedDynamicState3CoverageModulationTableEnable();}();}();
[&](){[&](){(result.extendedDynamicState3CoverageModulationTable)=reader.getextendedDynamicState3CoverageModulationTable();}();}();
[&](){[&](){(result.extendedDynamicState3CoverageReductionMode)=reader.getextendedDynamicState3CoverageReductionMode();}();}();
[&](){[&](){(result.extendedDynamicState3RepresentativeFragmentTestEnable)=reader.getextendedDynamicState3RepresentativeFragmentTestEnable();}();}();
[&](){[&](){(result.extendedDynamicState3ShadingRateImageEnable)=reader.getextendedDynamicState3ShadingRateImageEnable();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceExtendedDynamicState3FeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceExtendedDynamicState3FeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceExtendedDynamicState3PropertiesEXT::Builder& builder, VkPhysicalDeviceExtendedDynamicState3PropertiesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setdynamicPrimitiveTopologyUnrestricted((member.dynamicPrimitiveTopologyUnrestricted));}();}();
}

    VkPhysicalDeviceExtendedDynamicState3PropertiesEXT deserialize_struct(VkPhysicalDeviceExtendedDynamicState3PropertiesEXT::Reader reader){
        auto result=VkPhysicalDeviceExtendedDynamicState3PropertiesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.dynamicPrimitiveTopologyUnrestricted)=reader.getdynamicPrimitiveTopologyUnrestricted();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceExtendedDynamicState3PropertiesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceExtendedDynamicState3PropertiesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkColorBlendEquationEXT::Builder& builder, VkColorBlendEquationEXT member){
        
    
[&](){[&](){[&](){return builder.setsrcColorBlendFactor((member.srcColorBlendFactor));}();}();}();
[&](){[&](){[&](){return builder.setdstColorBlendFactor((member.dstColorBlendFactor));}();}();}();
[&](){[&](){[&](){return builder.setcolorBlendOp((member.colorBlendOp));}();}();}();
[&](){[&](){[&](){return builder.setsrcAlphaBlendFactor((member.srcAlphaBlendFactor));}();}();}();
[&](){[&](){[&](){return builder.setdstAlphaBlendFactor((member.dstAlphaBlendFactor));}();}();}();
[&](){[&](){[&](){return builder.setalphaBlendOp((member.alphaBlendOp));}();}();}();
}

    VkColorBlendEquationEXT deserialize_struct(VkColorBlendEquationEXT::Reader reader){
        auto result=VkColorBlendEquationEXT();
    
[&](){[&](){[&](){(result.srcColorBlendFactor)=reader.getsrcColorBlendFactor();}();}();}();
[&](){[&](){[&](){(result.dstColorBlendFactor)=reader.getdstColorBlendFactor();}();}();}();
[&](){[&](){[&](){(result.colorBlendOp)=reader.getcolorBlendOp();}();}();}();
[&](){[&](){[&](){(result.srcAlphaBlendFactor)=reader.getsrcAlphaBlendFactor();}();}();}();
[&](){[&](){[&](){(result.dstAlphaBlendFactor)=reader.getdstAlphaBlendFactor();}();}();}();
[&](){[&](){[&](){(result.alphaBlendOp)=reader.getalphaBlendOp();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkColorBlendEquationEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkColorBlendEquationEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkColorBlendAdvancedEXT::Builder& builder, VkColorBlendAdvancedEXT member){
        
    
[&](){[&](){[&](){return builder.setadvancedBlendOp((member.advancedBlendOp));}();}();}();
[&](){[&](){return builder.setsrcPremultiplied((member.srcPremultiplied));}();}();
[&](){[&](){return builder.setdstPremultiplied((member.dstPremultiplied));}();}();
[&](){[&](){[&](){return builder.setblendOverlap((member.blendOverlap));}();}();}();
[&](){[&](){return builder.setclampResults((member.clampResults));}();}();
}

    VkColorBlendAdvancedEXT deserialize_struct(VkColorBlendAdvancedEXT::Reader reader){
        auto result=VkColorBlendAdvancedEXT();
    
[&](){[&](){[&](){(result.advancedBlendOp)=reader.getadvancedBlendOp();}();}();}();
[&](){[&](){(result.srcPremultiplied)=reader.getsrcPremultiplied();}();}();
[&](){[&](){(result.dstPremultiplied)=reader.getdstPremultiplied();}();}();
[&](){[&](){[&](){(result.blendOverlap)=reader.getblendOverlap();}();}();}();
[&](){[&](){(result.clampResults)=reader.getclampResults();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkColorBlendAdvancedEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkColorBlendAdvancedEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkRenderPassTransformBeginInfoQCOM::Builder& builder, VkRenderPassTransformBeginInfoQCOM member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.settransform((member.transform));}();}();}();
}

    VkRenderPassTransformBeginInfoQCOM deserialize_struct(VkRenderPassTransformBeginInfoQCOM::Reader reader){
        auto result=VkRenderPassTransformBeginInfoQCOM();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.transform)=reader.gettransform();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkRenderPassTransformBeginInfoQCOM member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkRenderPassTransformBeginInfoQCOM member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkCopyCommandTransformInfoQCOM::Builder& builder, VkCopyCommandTransformInfoQCOM member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.settransform((member.transform));}();}();}();
}

    VkCopyCommandTransformInfoQCOM deserialize_struct(VkCopyCommandTransformInfoQCOM::Reader reader){
        auto result=VkCopyCommandTransformInfoQCOM();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.transform)=reader.gettransform();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkCopyCommandTransformInfoQCOM member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkCopyCommandTransformInfoQCOM member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkCommandBufferInheritanceRenderPassTransformInfoQCOM::Builder& builder, VkCommandBufferInheritanceRenderPassTransformInfoQCOM member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.settransform((member.transform));}();}();}();
[&](){
            auto temp=builder.initrenderArea(renderArea);
            return serialize_struct((member.renderArea), temp);
            }();
}

    VkCommandBufferInheritanceRenderPassTransformInfoQCOM deserialize_struct(VkCommandBufferInheritanceRenderPassTransformInfoQCOM::Reader reader){
        auto result=VkCommandBufferInheritanceRenderPassTransformInfoQCOM();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.transform)=reader.gettransform();}();}();}();
[&](){
            auto temp=reader.getrenderArea();
            (result.renderArea)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkCommandBufferInheritanceRenderPassTransformInfoQCOM member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkCommandBufferInheritanceRenderPassTransformInfoQCOM member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceDiagnosticsConfigFeaturesNV::Builder& builder, VkPhysicalDeviceDiagnosticsConfigFeaturesNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setdiagnosticsConfig((member.diagnosticsConfig));}();}();
}

    VkPhysicalDeviceDiagnosticsConfigFeaturesNV deserialize_struct(VkPhysicalDeviceDiagnosticsConfigFeaturesNV::Reader reader){
        auto result=VkPhysicalDeviceDiagnosticsConfigFeaturesNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.diagnosticsConfig)=reader.getdiagnosticsConfig();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceDiagnosticsConfigFeaturesNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceDiagnosticsConfigFeaturesNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDeviceDiagnosticsConfigCreateInfoNV::Builder& builder, VkDeviceDiagnosticsConfigCreateInfoNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
}

    VkDeviceDiagnosticsConfigCreateInfoNV deserialize_struct(VkDeviceDiagnosticsConfigCreateInfoNV::Reader reader){
        auto result=VkDeviceDiagnosticsConfigCreateInfoNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDeviceDiagnosticsConfigCreateInfoNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDeviceDiagnosticsConfigCreateInfoNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures::Builder& builder, VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setshaderZeroInitializeWorkgroupMemory((member.shaderZeroInitializeWorkgroupMemory));}();}();
}

    VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures deserialize_struct(VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures::Reader reader){
        auto result=VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.shaderZeroInitializeWorkgroupMemory)=reader.getshaderZeroInitializeWorkgroupMemory();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR::Builder& builder, VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setshaderSubgroupUniformControlFlow((member.shaderSubgroupUniformControlFlow));}();}();
}

    VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR deserialize_struct(VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR::Reader reader){
        auto result=VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.shaderSubgroupUniformControlFlow)=reader.getshaderSubgroupUniformControlFlow();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceRobustness2FeaturesEXT::Builder& builder, VkPhysicalDeviceRobustness2FeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setrobustBufferAccess2((member.robustBufferAccess2));}();}();
[&](){[&](){return builder.setrobustImageAccess2((member.robustImageAccess2));}();}();
[&](){[&](){return builder.setnullDescriptor((member.nullDescriptor));}();}();
}

    VkPhysicalDeviceRobustness2FeaturesEXT deserialize_struct(VkPhysicalDeviceRobustness2FeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceRobustness2FeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.robustBufferAccess2)=reader.getrobustBufferAccess2();}();}();
[&](){[&](){(result.robustImageAccess2)=reader.getrobustImageAccess2();}();}();
[&](){[&](){(result.nullDescriptor)=reader.getnullDescriptor();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceRobustness2FeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceRobustness2FeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceRobustness2PropertiesEXT::Builder& builder, VkPhysicalDeviceRobustness2PropertiesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setrobustStorageBufferAccessSizeAlignment((member.robustStorageBufferAccessSizeAlignment));}();}();
[&](){[&](){return builder.setrobustUniformBufferAccessSizeAlignment((member.robustUniformBufferAccessSizeAlignment));}();}();
}

    VkPhysicalDeviceRobustness2PropertiesEXT deserialize_struct(VkPhysicalDeviceRobustness2PropertiesEXT::Reader reader){
        auto result=VkPhysicalDeviceRobustness2PropertiesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.robustStorageBufferAccessSizeAlignment)=reader.getrobustStorageBufferAccessSizeAlignment();}();}();
[&](){[&](){(result.robustUniformBufferAccessSizeAlignment)=reader.getrobustUniformBufferAccessSizeAlignment();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceRobustness2PropertiesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceRobustness2PropertiesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceImageRobustnessFeatures::Builder& builder, VkPhysicalDeviceImageRobustnessFeatures member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setrobustImageAccess((member.robustImageAccess));}();}();
}

    VkPhysicalDeviceImageRobustnessFeatures deserialize_struct(VkPhysicalDeviceImageRobustnessFeatures::Reader reader){
        auto result=VkPhysicalDeviceImageRobustnessFeatures();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.robustImageAccess)=reader.getrobustImageAccess();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceImageRobustnessFeatures member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceImageRobustnessFeatures member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR::Builder& builder, VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setworkgroupMemoryExplicitLayout((member.workgroupMemoryExplicitLayout));}();}();
[&](){[&](){return builder.setworkgroupMemoryExplicitLayoutScalarBlockLayout((member.workgroupMemoryExplicitLayoutScalarBlockLayout));}();}();
[&](){[&](){return builder.setworkgroupMemoryExplicitLayout8BitAccess((member.workgroupMemoryExplicitLayout8BitAccess));}();}();
[&](){[&](){return builder.setworkgroupMemoryExplicitLayout16BitAccess((member.workgroupMemoryExplicitLayout16BitAccess));}();}();
}

    VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR deserialize_struct(VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR::Reader reader){
        auto result=VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.workgroupMemoryExplicitLayout)=reader.getworkgroupMemoryExplicitLayout();}();}();
[&](){[&](){(result.workgroupMemoryExplicitLayoutScalarBlockLayout)=reader.getworkgroupMemoryExplicitLayoutScalarBlockLayout();}();}();
[&](){[&](){(result.workgroupMemoryExplicitLayout8BitAccess)=reader.getworkgroupMemoryExplicitLayout8BitAccess();}();}();
[&](){[&](){(result.workgroupMemoryExplicitLayout16BitAccess)=reader.getworkgroupMemoryExplicitLayout16BitAccess();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDevice4444FormatsFeaturesEXT::Builder& builder, VkPhysicalDevice4444FormatsFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setformatA4R4G4B4((member.formatA4R4G4B4));}();}();
[&](){[&](){return builder.setformatA4B4G4R4((member.formatA4B4G4R4));}();}();
}

    VkPhysicalDevice4444FormatsFeaturesEXT deserialize_struct(VkPhysicalDevice4444FormatsFeaturesEXT::Reader reader){
        auto result=VkPhysicalDevice4444FormatsFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.formatA4R4G4B4)=reader.getformatA4R4G4B4();}();}();
[&](){[&](){(result.formatA4B4G4R4)=reader.getformatA4B4G4R4();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDevice4444FormatsFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDevice4444FormatsFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceSubpassShadingFeaturesHUAWEI::Builder& builder, VkPhysicalDeviceSubpassShadingFeaturesHUAWEI member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setsubpassShading((member.subpassShading));}();}();
}

    VkPhysicalDeviceSubpassShadingFeaturesHUAWEI deserialize_struct(VkPhysicalDeviceSubpassShadingFeaturesHUAWEI::Reader reader){
        auto result=VkPhysicalDeviceSubpassShadingFeaturesHUAWEI();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.subpassShading)=reader.getsubpassShading();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceSubpassShadingFeaturesHUAWEI member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceSubpassShadingFeaturesHUAWEI member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI::Builder& builder, VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setclustercullingShader((member.clustercullingShader));}();}();
[&](){[&](){return builder.setmultiviewClusterCullingShader((member.multiviewClusterCullingShader));}();}();
}

    VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI deserialize_struct(VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI::Reader reader){
        auto result=VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.clustercullingShader)=reader.getclustercullingShader();}();}();
[&](){[&](){(result.multiviewClusterCullingShader)=reader.getmultiviewClusterCullingShader();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkBufferCopy2::Builder& builder, VkBufferCopy2 member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setsrcOffset((member.srcOffset));}();}();
[&](){[&](){return builder.setdstOffset((member.dstOffset));}();}();
[&](){[&](){return builder.setsize((member.size));}();}();
}

    VkBufferCopy2 deserialize_struct(VkBufferCopy2::Reader reader){
        auto result=VkBufferCopy2();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){(result.srcOffset)=reader.getsrcOffset();}();}();
[&](){[&](){(result.dstOffset)=reader.getdstOffset();}();}();
[&](){[&](){(result.size)=reader.getsize();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkBufferCopy2 member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkBufferCopy2 member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkImageCopy2::Builder& builder, VkImageCopy2 member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            auto temp=builder.initsrcSubresource(srcSubresource);
            return serialize_struct((member.srcSubresource), temp);
            }();
[&](){
            auto temp=builder.initsrcOffset(srcOffset);
            return serialize_struct((member.srcOffset), temp);
            }();
[&](){
            auto temp=builder.initdstSubresource(dstSubresource);
            return serialize_struct((member.dstSubresource), temp);
            }();
[&](){
            auto temp=builder.initdstOffset(dstOffset);
            return serialize_struct((member.dstOffset), temp);
            }();
[&](){
            auto temp=builder.initextent(extent);
            return serialize_struct((member.extent), temp);
            }();
}

    VkImageCopy2 deserialize_struct(VkImageCopy2::Reader reader){
        auto result=VkImageCopy2();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){
            auto temp=reader.getsrcSubresource();
            (result.srcSubresource)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getsrcOffset();
            (result.srcOffset)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getdstSubresource();
            (result.dstSubresource)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getdstOffset();
            (result.dstOffset)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getextent();
            (result.extent)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkImageCopy2 member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkImageCopy2 member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkImageBlit2::Builder& builder, VkImageBlit2 member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            auto temp=builder.initsrcSubresource(srcSubresource);
            return serialize_struct((member.srcSubresource), temp);
            }();
[&](){
        auto proto_arr=builder.initsrcOffsets();
        for(int jRYlQCC=0; jRYlQCC < 2; jRYlQCC++){
            [&](){
            auto temp=proto_arr[jRYlQCC];
            return serialize_struct(((member.srcOffsets)[jRYlQCC]), temp);
            }();
        }
        }();
[&](){
            auto temp=builder.initdstSubresource(dstSubresource);
            return serialize_struct((member.dstSubresource), temp);
            }();
[&](){
        auto proto_arr=builder.initdstOffsets();
        for(int dYmXuSG=0; dYmXuSG < 2; dYmXuSG++){
            [&](){
            auto temp=proto_arr[dYmXuSG];
            return serialize_struct(((member.dstOffsets)[dYmXuSG]), temp);
            }();
        }
        }();
}

    VkImageBlit2 deserialize_struct(VkImageBlit2::Reader reader){
        auto result=VkImageBlit2();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){
            auto temp=reader.getsrcSubresource();
            (result.srcSubresource)=deserialize_struct(temp);
            }();
[&](){
        auto proto_arr=reader.getsrcOffsets(2);
        for(int jRYlQCC=0; jRYlQCC < 2; jRYlQCC++){
            [&](){
            auto temp=proto_arr[jRYlQCC];
            ((result.srcOffsets)[jRYlQCC])=deserialize_struct(temp);
            }();
        }
        }();
[&](){
            auto temp=reader.getdstSubresource();
            (result.dstSubresource)=deserialize_struct(temp);
            }();
[&](){
        auto proto_arr=reader.getdstOffsets(2);
        for(int dYmXuSG=0; dYmXuSG < 2; dYmXuSG++){
            [&](){
            auto temp=proto_arr[dYmXuSG];
            ((result.dstOffsets)[dYmXuSG])=deserialize_struct(temp);
            }();
        }
        }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkImageBlit2 member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkImageBlit2 member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkBufferImageCopy2::Builder& builder, VkBufferImageCopy2 member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setbufferOffset((member.bufferOffset));}();}();
[&](){return builder.setbufferRowLength((member.bufferRowLength));}();
[&](){return builder.setbufferImageHeight((member.bufferImageHeight));}();
[&](){
            auto temp=builder.initimageSubresource(imageSubresource);
            return serialize_struct((member.imageSubresource), temp);
            }();
[&](){
            auto temp=builder.initimageOffset(imageOffset);
            return serialize_struct((member.imageOffset), temp);
            }();
[&](){
            auto temp=builder.initimageExtent(imageExtent);
            return serialize_struct((member.imageExtent), temp);
            }();
}

    VkBufferImageCopy2 deserialize_struct(VkBufferImageCopy2::Reader reader){
        auto result=VkBufferImageCopy2();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){(result.bufferOffset)=reader.getbufferOffset();}();}();
[&](){(result.bufferRowLength)=reader.getbufferRowLength();}();
[&](){(result.bufferImageHeight)=reader.getbufferImageHeight();}();
[&](){
            auto temp=reader.getimageSubresource();
            (result.imageSubresource)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getimageOffset();
            (result.imageOffset)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getimageExtent();
            (result.imageExtent)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkBufferImageCopy2 member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkBufferImageCopy2 member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkImageResolve2::Builder& builder, VkImageResolve2 member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            auto temp=builder.initsrcSubresource(srcSubresource);
            return serialize_struct((member.srcSubresource), temp);
            }();
[&](){
            auto temp=builder.initsrcOffset(srcOffset);
            return serialize_struct((member.srcOffset), temp);
            }();
[&](){
            auto temp=builder.initdstSubresource(dstSubresource);
            return serialize_struct((member.dstSubresource), temp);
            }();
[&](){
            auto temp=builder.initdstOffset(dstOffset);
            return serialize_struct((member.dstOffset), temp);
            }();
[&](){
            auto temp=builder.initextent(extent);
            return serialize_struct((member.extent), temp);
            }();
}

    VkImageResolve2 deserialize_struct(VkImageResolve2::Reader reader){
        auto result=VkImageResolve2();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){
            auto temp=reader.getsrcSubresource();
            (result.srcSubresource)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getsrcOffset();
            (result.srcOffset)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getdstSubresource();
            (result.dstSubresource)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getdstOffset();
            (result.dstOffset)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getextent();
            (result.extent)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkImageResolve2 member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkImageResolve2 member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkCopyBufferInfo2::Builder& builder, VkCopyBufferInfo2 member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setsrcBuffer(serialize_handle(member.srcBuffer));}();
[&](){return builder.setdstBuffer(serialize_handle(member.dstBuffer));}();
[&](){return builder.setregionCount((member.regionCount));}();
[&](){
            if ((member.pRegions)==NULL){
                builder.disownpRegions();
            return; }
        auto proto_arr=builder.initpRegions();
        for(int DGFUXUH=0; DGFUXUH < member.regionCount; DGFUXUH++){
            [&](){
            auto temp=proto_arr[DGFUXUH];
            return serialize_struct(((member.pRegions)[DGFUXUH]), temp);
            }();
        }
        }();
}

    VkCopyBufferInfo2 deserialize_struct(VkCopyBufferInfo2::Reader reader){
        auto result=VkCopyBufferInfo2();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.srcBuffer)=deserialize_handle(reader.getsrcBuffer());}();
[&](){(result.dstBuffer)=deserialize_handle(reader.getdstBuffer());}();
[&](){(result.regionCount)=reader.getregionCount();}();
[&](){ VkBufferCopy2* temp_IGDXIQe[&](){
            if (!reader.haspRegions()){
                (result.pRegions)=NULL;
            return; }{native_concat()}=(VkBufferCopy2*)malloc(result.regionCount*sizeof(VkBufferCopy2));
        auto proto_arr=reader.getpRegions(result.regionCount);
        for(int qxtkDyM=0; qxtkDyM < result.regionCount; qxtkDyM++){
            [&](){
            auto temp=proto_arr[qxtkDyM];
            ((result.pRegions)[qxtkDyM])=deserialize_struct(temp);
            }();
        }
        }();(result.pRegions)=temp_IGDXIQe;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkCopyBufferInfo2 member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkCopyBufferInfo2 member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkCopyImageInfo2::Builder& builder, VkCopyImageInfo2 member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setsrcImage(serialize_handle(member.srcImage));}();
[&](){[&](){[&](){return builder.setsrcImageLayout((member.srcImageLayout));}();}();}();
[&](){return builder.setdstImage(serialize_handle(member.dstImage));}();
[&](){[&](){[&](){return builder.setdstImageLayout((member.dstImageLayout));}();}();}();
[&](){return builder.setregionCount((member.regionCount));}();
[&](){
            if ((member.pRegions)==NULL){
                builder.disownpRegions();
            return; }
        auto proto_arr=builder.initpRegions();
        for(int UKtqPyM=0; UKtqPyM < member.regionCount; UKtqPyM++){
            [&](){
            auto temp=proto_arr[UKtqPyM];
            return serialize_struct(((member.pRegions)[UKtqPyM]), temp);
            }();
        }
        }();
}

    VkCopyImageInfo2 deserialize_struct(VkCopyImageInfo2::Reader reader){
        auto result=VkCopyImageInfo2();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.srcImage)=deserialize_handle(reader.getsrcImage());}();
[&](){[&](){[&](){(result.srcImageLayout)=reader.getsrcImageLayout();}();}();}();
[&](){(result.dstImage)=deserialize_handle(reader.getdstImage());}();
[&](){[&](){[&](){(result.dstImageLayout)=reader.getdstImageLayout();}();}();}();
[&](){(result.regionCount)=reader.getregionCount();}();
[&](){ VkImageCopy2* temp_mdeoncL[&](){
            if (!reader.haspRegions()){
                (result.pRegions)=NULL;
            return; }{native_concat()}=(VkImageCopy2*)malloc(result.regionCount*sizeof(VkImageCopy2));
        auto proto_arr=reader.getpRegions(result.regionCount);
        for(int RcpKxBk=0; RcpKxBk < result.regionCount; RcpKxBk++){
            [&](){
            auto temp=proto_arr[RcpKxBk];
            ((result.pRegions)[RcpKxBk])=deserialize_struct(temp);
            }();
        }
        }();(result.pRegions)=temp_mdeoncL;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkCopyImageInfo2 member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkCopyImageInfo2 member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkBlitImageInfo2::Builder& builder, VkBlitImageInfo2 member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setsrcImage(serialize_handle(member.srcImage));}();
[&](){[&](){[&](){return builder.setsrcImageLayout((member.srcImageLayout));}();}();}();
[&](){return builder.setdstImage(serialize_handle(member.dstImage));}();
[&](){[&](){[&](){return builder.setdstImageLayout((member.dstImageLayout));}();}();}();
[&](){return builder.setregionCount((member.regionCount));}();
[&](){
            if ((member.pRegions)==NULL){
                builder.disownpRegions();
            return; }
        auto proto_arr=builder.initpRegions();
        for(int eyuNqxm=0; eyuNqxm < member.regionCount; eyuNqxm++){
            [&](){
            auto temp=proto_arr[eyuNqxm];
            return serialize_struct(((member.pRegions)[eyuNqxm]), temp);
            }();
        }
        }();
[&](){[&](){[&](){return builder.setfilter((member.filter));}();}();}();
}

    VkBlitImageInfo2 deserialize_struct(VkBlitImageInfo2::Reader reader){
        auto result=VkBlitImageInfo2();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.srcImage)=deserialize_handle(reader.getsrcImage());}();
[&](){[&](){[&](){(result.srcImageLayout)=reader.getsrcImageLayout();}();}();}();
[&](){(result.dstImage)=deserialize_handle(reader.getdstImage());}();
[&](){[&](){[&](){(result.dstImageLayout)=reader.getdstImageLayout();}();}();}();
[&](){(result.regionCount)=reader.getregionCount();}();
[&](){ VkImageBlit2* temp_jiuoxLM[&](){
            if (!reader.haspRegions()){
                (result.pRegions)=NULL;
            return; }{native_concat()}=(VkImageBlit2*)malloc(result.regionCount*sizeof(VkImageBlit2));
        auto proto_arr=reader.getpRegions(result.regionCount);
        for(int vAwDVQE=0; vAwDVQE < result.regionCount; vAwDVQE++){
            [&](){
            auto temp=proto_arr[vAwDVQE];
            ((result.pRegions)[vAwDVQE])=deserialize_struct(temp);
            }();
        }
        }();(result.pRegions)=temp_jiuoxLM;}();
[&](){[&](){[&](){(result.filter)=reader.getfilter();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkBlitImageInfo2 member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkBlitImageInfo2 member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkCopyBufferToImageInfo2::Builder& builder, VkCopyBufferToImageInfo2 member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setsrcBuffer(serialize_handle(member.srcBuffer));}();
[&](){return builder.setdstImage(serialize_handle(member.dstImage));}();
[&](){[&](){[&](){return builder.setdstImageLayout((member.dstImageLayout));}();}();}();
[&](){return builder.setregionCount((member.regionCount));}();
[&](){
            if ((member.pRegions)==NULL){
                builder.disownpRegions();
            return; }
        auto proto_arr=builder.initpRegions();
        for(int NlBTicW=0; NlBTicW < member.regionCount; NlBTicW++){
            [&](){
            auto temp=proto_arr[NlBTicW];
            return serialize_struct(((member.pRegions)[NlBTicW]), temp);
            }();
        }
        }();
}

    VkCopyBufferToImageInfo2 deserialize_struct(VkCopyBufferToImageInfo2::Reader reader){
        auto result=VkCopyBufferToImageInfo2();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.srcBuffer)=deserialize_handle(reader.getsrcBuffer());}();
[&](){(result.dstImage)=deserialize_handle(reader.getdstImage());}();
[&](){[&](){[&](){(result.dstImageLayout)=reader.getdstImageLayout();}();}();}();
[&](){(result.regionCount)=reader.getregionCount();}();
[&](){ VkBufferImageCopy2* temp_neWMapE[&](){
            if (!reader.haspRegions()){
                (result.pRegions)=NULL;
            return; }{native_concat()}=(VkBufferImageCopy2*)malloc(result.regionCount*sizeof(VkBufferImageCopy2));
        auto proto_arr=reader.getpRegions(result.regionCount);
        for(int YLeVual=0; YLeVual < result.regionCount; YLeVual++){
            [&](){
            auto temp=proto_arr[YLeVual];
            ((result.pRegions)[YLeVual])=deserialize_struct(temp);
            }();
        }
        }();(result.pRegions)=temp_neWMapE;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkCopyBufferToImageInfo2 member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkCopyBufferToImageInfo2 member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkCopyImageToBufferInfo2::Builder& builder, VkCopyImageToBufferInfo2 member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setsrcImage(serialize_handle(member.srcImage));}();
[&](){[&](){[&](){return builder.setsrcImageLayout((member.srcImageLayout));}();}();}();
[&](){return builder.setdstBuffer(serialize_handle(member.dstBuffer));}();
[&](){return builder.setregionCount((member.regionCount));}();
[&](){
            if ((member.pRegions)==NULL){
                builder.disownpRegions();
            return; }
        auto proto_arr=builder.initpRegions();
        for(int NlBTicW=0; NlBTicW < member.regionCount; NlBTicW++){
            [&](){
            auto temp=proto_arr[NlBTicW];
            return serialize_struct(((member.pRegions)[NlBTicW]), temp);
            }();
        }
        }();
}

    VkCopyImageToBufferInfo2 deserialize_struct(VkCopyImageToBufferInfo2::Reader reader){
        auto result=VkCopyImageToBufferInfo2();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.srcImage)=deserialize_handle(reader.getsrcImage());}();
[&](){[&](){[&](){(result.srcImageLayout)=reader.getsrcImageLayout();}();}();}();
[&](){(result.dstBuffer)=deserialize_handle(reader.getdstBuffer());}();
[&](){(result.regionCount)=reader.getregionCount();}();
[&](){ VkBufferImageCopy2* temp_neWMapE[&](){
            if (!reader.haspRegions()){
                (result.pRegions)=NULL;
            return; }{native_concat()}=(VkBufferImageCopy2*)malloc(result.regionCount*sizeof(VkBufferImageCopy2));
        auto proto_arr=reader.getpRegions(result.regionCount);
        for(int YLeVual=0; YLeVual < result.regionCount; YLeVual++){
            [&](){
            auto temp=proto_arr[YLeVual];
            ((result.pRegions)[YLeVual])=deserialize_struct(temp);
            }();
        }
        }();(result.pRegions)=temp_neWMapE;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkCopyImageToBufferInfo2 member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkCopyImageToBufferInfo2 member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkResolveImageInfo2::Builder& builder, VkResolveImageInfo2 member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setsrcImage(serialize_handle(member.srcImage));}();
[&](){[&](){[&](){return builder.setsrcImageLayout((member.srcImageLayout));}();}();}();
[&](){return builder.setdstImage(serialize_handle(member.dstImage));}();
[&](){[&](){[&](){return builder.setdstImageLayout((member.dstImageLayout));}();}();}();
[&](){return builder.setregionCount((member.regionCount));}();
[&](){
            if ((member.pRegions)==NULL){
                builder.disownpRegions();
            return; }
        auto proto_arr=builder.initpRegions();
        for(int YWPZXmz=0; YWPZXmz < member.regionCount; YWPZXmz++){
            [&](){
            auto temp=proto_arr[YWPZXmz];
            return serialize_struct(((member.pRegions)[YWPZXmz]), temp);
            }();
        }
        }();
}

    VkResolveImageInfo2 deserialize_struct(VkResolveImageInfo2::Reader reader){
        auto result=VkResolveImageInfo2();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.srcImage)=deserialize_handle(reader.getsrcImage());}();
[&](){[&](){[&](){(result.srcImageLayout)=reader.getsrcImageLayout();}();}();}();
[&](){(result.dstImage)=deserialize_handle(reader.getdstImage());}();
[&](){[&](){[&](){(result.dstImageLayout)=reader.getdstImageLayout();}();}();}();
[&](){(result.regionCount)=reader.getregionCount();}();
[&](){ VkImageResolve2* temp_gNJAvXi[&](){
            if (!reader.haspRegions()){
                (result.pRegions)=NULL;
            return; }{native_concat()}=(VkImageResolve2*)malloc(result.regionCount*sizeof(VkImageResolve2));
        auto proto_arr=reader.getpRegions(result.regionCount);
        for(int cQwfEVG=0; cQwfEVG < result.regionCount; cQwfEVG++){
            [&](){
            auto temp=proto_arr[cQwfEVG];
            ((result.pRegions)[cQwfEVG])=deserialize_struct(temp);
            }();
        }
        }();(result.pRegions)=temp_gNJAvXi;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkResolveImageInfo2 member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkResolveImageInfo2 member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT::Builder& builder, VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setshaderImageInt64Atomics((member.shaderImageInt64Atomics));}();}();
[&](){[&](){return builder.setsparseImageInt64Atomics((member.sparseImageInt64Atomics));}();}();
}

    VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT deserialize_struct(VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.shaderImageInt64Atomics)=reader.getshaderImageInt64Atomics();}();}();
[&](){[&](){(result.sparseImageInt64Atomics)=reader.getsparseImageInt64Atomics();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkFragmentShadingRateAttachmentInfoKHR::Builder& builder, VkFragmentShadingRateAttachmentInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            if ((member.pFragmentShadingRateAttachment)==NULL){
                builder.disownpFragmentShadingRateAttachment();
            return; }
        auto proto_arr=builder.initpFragmentShadingRateAttachment();
        for(int eUKVzmp=0; eUKVzmp < 1; eUKVzmp++){
            [&](){
            auto temp=proto_arr[eUKVzmp];
            return serialize_struct(((member.pFragmentShadingRateAttachment)[eUKVzmp]), temp);
            }();
        }
        }();
[&](){
            auto temp=builder.initshadingRateAttachmentTexelSize(shadingRateAttachmentTexelSize);
            return serialize_struct((member.shadingRateAttachmentTexelSize), temp);
            }();
}

    VkFragmentShadingRateAttachmentInfoKHR deserialize_struct(VkFragmentShadingRateAttachmentInfoKHR::Reader reader){
        auto result=VkFragmentShadingRateAttachmentInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){ VkAttachmentReference2* temp_zmCwYqJ[&](){
            if (!reader.haspFragmentShadingRateAttachment()){
                (result.pFragmentShadingRateAttachment)=NULL;
            return; }{native_concat()}=(VkAttachmentReference2*)malloc(1*sizeof(VkAttachmentReference2));
        auto proto_arr=reader.getpFragmentShadingRateAttachment(1);
        for(int CJUwLOb=0; CJUwLOb < 1; CJUwLOb++){
            [&](){
            auto temp=proto_arr[CJUwLOb];
            ((result.pFragmentShadingRateAttachment)[CJUwLOb])=deserialize_struct(temp);
            }();
        }
        }();(result.pFragmentShadingRateAttachment)=temp_zmCwYqJ;}();
[&](){
            auto temp=reader.getshadingRateAttachmentTexelSize();
            (result.shadingRateAttachmentTexelSize)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkFragmentShadingRateAttachmentInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkFragmentShadingRateAttachmentInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineFragmentShadingRateStateCreateInfoKHR::Builder& builder, VkPipelineFragmentShadingRateStateCreateInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            auto temp=builder.initfragmentSize(fragmentSize);
            return serialize_struct((member.fragmentSize), temp);
            }();
[&](){
        auto proto_arr=builder.initcombinerOps();
        for(int FpqnVre=0; FpqnVre < 2; FpqnVre++){
            [&](){[&](){[&](){return proto_arr.set(FpqnVre,((member.combinerOps)[FpqnVre]));}();}();}();
        }
        }();
}

    VkPipelineFragmentShadingRateStateCreateInfoKHR deserialize_struct(VkPipelineFragmentShadingRateStateCreateInfoKHR::Reader reader){
        auto result=VkPipelineFragmentShadingRateStateCreateInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){
            auto temp=reader.getfragmentSize();
            (result.fragmentSize)=deserialize_struct(temp);
            }();
[&](){
        auto proto_arr=reader.getcombinerOps(2);
        for(int FpqnVre=0; FpqnVre < 2; FpqnVre++){
            [&](){[&](){[&](){((result.combinerOps)[FpqnVre])=proto_arr[FpqnVre];}();}();}();
        }
        }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineFragmentShadingRateStateCreateInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineFragmentShadingRateStateCreateInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceFragmentShadingRateFeaturesKHR::Builder& builder, VkPhysicalDeviceFragmentShadingRateFeaturesKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setpipelineFragmentShadingRate((member.pipelineFragmentShadingRate));}();}();
[&](){[&](){return builder.setprimitiveFragmentShadingRate((member.primitiveFragmentShadingRate));}();}();
[&](){[&](){return builder.setattachmentFragmentShadingRate((member.attachmentFragmentShadingRate));}();}();
}

    VkPhysicalDeviceFragmentShadingRateFeaturesKHR deserialize_struct(VkPhysicalDeviceFragmentShadingRateFeaturesKHR::Reader reader){
        auto result=VkPhysicalDeviceFragmentShadingRateFeaturesKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.pipelineFragmentShadingRate)=reader.getpipelineFragmentShadingRate();}();}();
[&](){[&](){(result.primitiveFragmentShadingRate)=reader.getprimitiveFragmentShadingRate();}();}();
[&](){[&](){(result.attachmentFragmentShadingRate)=reader.getattachmentFragmentShadingRate();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceFragmentShadingRateFeaturesKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceFragmentShadingRateFeaturesKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceFragmentShadingRatePropertiesKHR::Builder& builder, VkPhysicalDeviceFragmentShadingRatePropertiesKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            auto temp=builder.initminFragmentShadingRateAttachmentTexelSize(minFragmentShadingRateAttachmentTexelSize);
            return serialize_struct((member.minFragmentShadingRateAttachmentTexelSize), temp);
            }();
[&](){
            auto temp=builder.initmaxFragmentShadingRateAttachmentTexelSize(maxFragmentShadingRateAttachmentTexelSize);
            return serialize_struct((member.maxFragmentShadingRateAttachmentTexelSize), temp);
            }();
[&](){return builder.setmaxFragmentShadingRateAttachmentTexelSizeAspectRatio((member.maxFragmentShadingRateAttachmentTexelSizeAspectRatio));}();
[&](){[&](){return builder.setprimitiveFragmentShadingRateWithMultipleViewports((member.primitiveFragmentShadingRateWithMultipleViewports));}();}();
[&](){[&](){return builder.setlayeredShadingRateAttachments((member.layeredShadingRateAttachments));}();}();
[&](){[&](){return builder.setfragmentShadingRateNonTrivialCombinerOps((member.fragmentShadingRateNonTrivialCombinerOps));}();}();
[&](){
            auto temp=builder.initmaxFragmentSize(maxFragmentSize);
            return serialize_struct((member.maxFragmentSize), temp);
            }();
[&](){return builder.setmaxFragmentSizeAspectRatio((member.maxFragmentSizeAspectRatio));}();
[&](){return builder.setmaxFragmentShadingRateCoverageSamples((member.maxFragmentShadingRateCoverageSamples));}();
[&](){[&](){[&](){return builder.setmaxFragmentShadingRateRasterizationSamples((member.maxFragmentShadingRateRasterizationSamples));}();}();}();
[&](){[&](){return builder.setfragmentShadingRateWithShaderDepthStencilWrites((member.fragmentShadingRateWithShaderDepthStencilWrites));}();}();
[&](){[&](){return builder.setfragmentShadingRateWithSampleMask((member.fragmentShadingRateWithSampleMask));}();}();
[&](){[&](){return builder.setfragmentShadingRateWithShaderSampleMask((member.fragmentShadingRateWithShaderSampleMask));}();}();
[&](){[&](){return builder.setfragmentShadingRateWithConservativeRasterization((member.fragmentShadingRateWithConservativeRasterization));}();}();
[&](){[&](){return builder.setfragmentShadingRateWithFragmentShaderInterlock((member.fragmentShadingRateWithFragmentShaderInterlock));}();}();
[&](){[&](){return builder.setfragmentShadingRateWithCustomSampleLocations((member.fragmentShadingRateWithCustomSampleLocations));}();}();
[&](){[&](){return builder.setfragmentShadingRateStrictMultiplyCombiner((member.fragmentShadingRateStrictMultiplyCombiner));}();}();
}

    VkPhysicalDeviceFragmentShadingRatePropertiesKHR deserialize_struct(VkPhysicalDeviceFragmentShadingRatePropertiesKHR::Reader reader){
        auto result=VkPhysicalDeviceFragmentShadingRatePropertiesKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getminFragmentShadingRateAttachmentTexelSize();
            (result.minFragmentShadingRateAttachmentTexelSize)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getmaxFragmentShadingRateAttachmentTexelSize();
            (result.maxFragmentShadingRateAttachmentTexelSize)=deserialize_struct(temp);
            }();
[&](){(result.maxFragmentShadingRateAttachmentTexelSizeAspectRatio)=reader.getmaxFragmentShadingRateAttachmentTexelSizeAspectRatio();}();
[&](){[&](){(result.primitiveFragmentShadingRateWithMultipleViewports)=reader.getprimitiveFragmentShadingRateWithMultipleViewports();}();}();
[&](){[&](){(result.layeredShadingRateAttachments)=reader.getlayeredShadingRateAttachments();}();}();
[&](){[&](){(result.fragmentShadingRateNonTrivialCombinerOps)=reader.getfragmentShadingRateNonTrivialCombinerOps();}();}();
[&](){
            auto temp=reader.getmaxFragmentSize();
            (result.maxFragmentSize)=deserialize_struct(temp);
            }();
[&](){(result.maxFragmentSizeAspectRatio)=reader.getmaxFragmentSizeAspectRatio();}();
[&](){(result.maxFragmentShadingRateCoverageSamples)=reader.getmaxFragmentShadingRateCoverageSamples();}();
[&](){[&](){[&](){(result.maxFragmentShadingRateRasterizationSamples)=reader.getmaxFragmentShadingRateRasterizationSamples();}();}();}();
[&](){[&](){(result.fragmentShadingRateWithShaderDepthStencilWrites)=reader.getfragmentShadingRateWithShaderDepthStencilWrites();}();}();
[&](){[&](){(result.fragmentShadingRateWithSampleMask)=reader.getfragmentShadingRateWithSampleMask();}();}();
[&](){[&](){(result.fragmentShadingRateWithShaderSampleMask)=reader.getfragmentShadingRateWithShaderSampleMask();}();}();
[&](){[&](){(result.fragmentShadingRateWithConservativeRasterization)=reader.getfragmentShadingRateWithConservativeRasterization();}();}();
[&](){[&](){(result.fragmentShadingRateWithFragmentShaderInterlock)=reader.getfragmentShadingRateWithFragmentShaderInterlock();}();}();
[&](){[&](){(result.fragmentShadingRateWithCustomSampleLocations)=reader.getfragmentShadingRateWithCustomSampleLocations();}();}();
[&](){[&](){(result.fragmentShadingRateStrictMultiplyCombiner)=reader.getfragmentShadingRateStrictMultiplyCombiner();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceFragmentShadingRatePropertiesKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceFragmentShadingRatePropertiesKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceFragmentShadingRateKHR::Builder& builder, VkPhysicalDeviceFragmentShadingRateKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setsampleCounts((member.sampleCounts));}();}();}();
[&](){
            auto temp=builder.initfragmentSize(fragmentSize);
            return serialize_struct((member.fragmentSize), temp);
            }();
}

    VkPhysicalDeviceFragmentShadingRateKHR deserialize_struct(VkPhysicalDeviceFragmentShadingRateKHR::Reader reader){
        auto result=VkPhysicalDeviceFragmentShadingRateKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.sampleCounts)=reader.getsampleCounts();}();}();}();
[&](){
            auto temp=reader.getfragmentSize();
            (result.fragmentSize)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceFragmentShadingRateKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceFragmentShadingRateKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceShaderTerminateInvocationFeatures::Builder& builder, VkPhysicalDeviceShaderTerminateInvocationFeatures member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setshaderTerminateInvocation((member.shaderTerminateInvocation));}();}();
}

    VkPhysicalDeviceShaderTerminateInvocationFeatures deserialize_struct(VkPhysicalDeviceShaderTerminateInvocationFeatures::Reader reader){
        auto result=VkPhysicalDeviceShaderTerminateInvocationFeatures();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.shaderTerminateInvocation)=reader.getshaderTerminateInvocation();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceShaderTerminateInvocationFeatures member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceShaderTerminateInvocationFeatures member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV::Builder& builder, VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setfragmentShadingRateEnums((member.fragmentShadingRateEnums));}();}();
[&](){[&](){return builder.setsupersampleFragmentShadingRates((member.supersampleFragmentShadingRates));}();}();
[&](){[&](){return builder.setnoInvocationFragmentShadingRates((member.noInvocationFragmentShadingRates));}();}();
}

    VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV deserialize_struct(VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV::Reader reader){
        auto result=VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.fragmentShadingRateEnums)=reader.getfragmentShadingRateEnums();}();}();
[&](){[&](){(result.supersampleFragmentShadingRates)=reader.getsupersampleFragmentShadingRates();}();}();
[&](){[&](){(result.noInvocationFragmentShadingRates)=reader.getnoInvocationFragmentShadingRates();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV::Builder& builder, VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setmaxFragmentShadingRateInvocationCount((member.maxFragmentShadingRateInvocationCount));}();}();}();
}

    VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV deserialize_struct(VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV::Reader reader){
        auto result=VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.maxFragmentShadingRateInvocationCount)=reader.getmaxFragmentShadingRateInvocationCount();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineFragmentShadingRateEnumStateCreateInfoNV::Builder& builder, VkPipelineFragmentShadingRateEnumStateCreateInfoNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setshadingRateType((member.shadingRateType));}();}();}();
[&](){[&](){[&](){return builder.setshadingRate((member.shadingRate));}();}();}();
[&](){
        auto proto_arr=builder.initcombinerOps();
        for(int FpqnVre=0; FpqnVre < 2; FpqnVre++){
            [&](){[&](){[&](){return proto_arr.set(FpqnVre,((member.combinerOps)[FpqnVre]));}();}();}();
        }
        }();
}

    VkPipelineFragmentShadingRateEnumStateCreateInfoNV deserialize_struct(VkPipelineFragmentShadingRateEnumStateCreateInfoNV::Reader reader){
        auto result=VkPipelineFragmentShadingRateEnumStateCreateInfoNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.shadingRateType)=reader.getshadingRateType();}();}();}();
[&](){[&](){[&](){(result.shadingRate)=reader.getshadingRate();}();}();}();
[&](){
        auto proto_arr=reader.getcombinerOps(2);
        for(int FpqnVre=0; FpqnVre < 2; FpqnVre++){
            [&](){[&](){[&](){((result.combinerOps)[FpqnVre])=proto_arr[FpqnVre];}();}();}();
        }
        }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineFragmentShadingRateEnumStateCreateInfoNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineFragmentShadingRateEnumStateCreateInfoNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkAccelerationStructureBuildSizesInfoKHR::Builder& builder, VkAccelerationStructureBuildSizesInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setaccelerationStructureSize((member.accelerationStructureSize));}();}();
[&](){[&](){return builder.setupdateScratchSize((member.updateScratchSize));}();}();
[&](){[&](){return builder.setbuildScratchSize((member.buildScratchSize));}();}();
}

    VkAccelerationStructureBuildSizesInfoKHR deserialize_struct(VkAccelerationStructureBuildSizesInfoKHR::Reader reader){
        auto result=VkAccelerationStructureBuildSizesInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){(result.accelerationStructureSize)=reader.getaccelerationStructureSize();}();}();
[&](){[&](){(result.updateScratchSize)=reader.getupdateScratchSize();}();}();
[&](){[&](){(result.buildScratchSize)=reader.getbuildScratchSize();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkAccelerationStructureBuildSizesInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkAccelerationStructureBuildSizesInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceImage2DViewOf3DFeaturesEXT::Builder& builder, VkPhysicalDeviceImage2DViewOf3DFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setimage2DViewOf3D((member.image2DViewOf3D));}();}();
[&](){[&](){return builder.setsampler2DViewOf3D((member.sampler2DViewOf3D));}();}();
}

    VkPhysicalDeviceImage2DViewOf3DFeaturesEXT deserialize_struct(VkPhysicalDeviceImage2DViewOf3DFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceImage2DViewOf3DFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.image2DViewOf3D)=reader.getimage2DViewOf3D();}();}();
[&](){[&](){(result.sampler2DViewOf3D)=reader.getsampler2DViewOf3D();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceImage2DViewOf3DFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceImage2DViewOf3DFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT::Builder& builder, VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setimageSlicedViewOf3D((member.imageSlicedViewOf3D));}();}();
}

    VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT deserialize_struct(VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.imageSlicedViewOf3D)=reader.getimageSlicedViewOf3D();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT::Builder& builder, VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setattachmentFeedbackLoopDynamicState((member.attachmentFeedbackLoopDynamicState));}();}();
}

    VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT deserialize_struct(VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.attachmentFeedbackLoopDynamicState)=reader.getattachmentFeedbackLoopDynamicState();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT::Builder& builder, VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setmutableDescriptorType((member.mutableDescriptorType));}();}();
}

    VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT deserialize_struct(VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.mutableDescriptorType)=reader.getmutableDescriptorType();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkMutableDescriptorTypeListEXT::Builder& builder, VkMutableDescriptorTypeListEXT member){
        
    
[&](){return builder.setdescriptorTypeCount((member.descriptorTypeCount));}();
[&](){
            if ((member.pDescriptorTypes)==NULL){
                builder.disownpDescriptorTypes();
            return; }
        auto proto_arr=builder.initpDescriptorTypes();
        for(int mMCdMcl=0; mMCdMcl < member.descriptorTypeCount; mMCdMcl++){
            [&](){[&](){[&](){return proto_arr.set(mMCdMcl,((member.pDescriptorTypes)[mMCdMcl]));}();}();}();
        }
        }();
}

    VkMutableDescriptorTypeListEXT deserialize_struct(VkMutableDescriptorTypeListEXT::Reader reader){
        auto result=VkMutableDescriptorTypeListEXT();
    
[&](){(result.descriptorTypeCount)=reader.getdescriptorTypeCount();}();
[&](){ VkDescriptorType* temp_lcgnzTl[&](){
            if (!reader.haspDescriptorTypes()){
                (result.pDescriptorTypes)=NULL;
            return; }{native_concat()}=(VkDescriptorType*)malloc(result.descriptorTypeCount*sizeof(VkDescriptorType));
        auto proto_arr=reader.getpDescriptorTypes(result.descriptorTypeCount);
        for(int hFwMthy=0; hFwMthy < result.descriptorTypeCount; hFwMthy++){
            [&](){[&](){[&](){((result.pDescriptorTypes)[hFwMthy])=proto_arr[hFwMthy];}();}();}();
        }
        }();(result.pDescriptorTypes)=temp_lcgnzTl;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkMutableDescriptorTypeListEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkMutableDescriptorTypeListEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkMutableDescriptorTypeCreateInfoEXT::Builder& builder, VkMutableDescriptorTypeCreateInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setmutableDescriptorTypeListCount((member.mutableDescriptorTypeListCount));}();
[&](){
            if ((member.pMutableDescriptorTypeLists)==NULL){
                builder.disownpMutableDescriptorTypeLists();
            return; }
        auto proto_arr=builder.initpMutableDescriptorTypeLists();
        for(int aVFhYgk=0; aVFhYgk < member.mutableDescriptorTypeListCount; aVFhYgk++){
            [&](){
            auto temp=proto_arr[aVFhYgk];
            return serialize_struct(((member.pMutableDescriptorTypeLists)[aVFhYgk]), temp);
            }();
        }
        }();
}

    VkMutableDescriptorTypeCreateInfoEXT deserialize_struct(VkMutableDescriptorTypeCreateInfoEXT::Reader reader){
        auto result=VkMutableDescriptorTypeCreateInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.mutableDescriptorTypeListCount)=reader.getmutableDescriptorTypeListCount();}();
[&](){ VkMutableDescriptorTypeListEXT* temp_NYqnwHi[&](){
            if (!reader.haspMutableDescriptorTypeLists()){
                (result.pMutableDescriptorTypeLists)=NULL;
            return; }{native_concat()}=(VkMutableDescriptorTypeListEXT*)malloc(result.mutableDescriptorTypeListCount*sizeof(VkMutableDescriptorTypeListEXT));
        auto proto_arr=reader.getpMutableDescriptorTypeLists(result.mutableDescriptorTypeListCount);
        for(int LfvNpBl=0; LfvNpBl < result.mutableDescriptorTypeListCount; LfvNpBl++){
            [&](){
            auto temp=proto_arr[LfvNpBl];
            ((result.pMutableDescriptorTypeLists)[LfvNpBl])=deserialize_struct(temp);
            }();
        }
        }();(result.pMutableDescriptorTypeLists)=temp_NYqnwHi;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkMutableDescriptorTypeCreateInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkMutableDescriptorTypeCreateInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceDepthClipControlFeaturesEXT::Builder& builder, VkPhysicalDeviceDepthClipControlFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setdepthClipControl((member.depthClipControl));}();}();
}

    VkPhysicalDeviceDepthClipControlFeaturesEXT deserialize_struct(VkPhysicalDeviceDepthClipControlFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceDepthClipControlFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.depthClipControl)=reader.getdepthClipControl();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceDepthClipControlFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceDepthClipControlFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineViewportDepthClipControlCreateInfoEXT::Builder& builder, VkPipelineViewportDepthClipControlCreateInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setnegativeOneToOne((member.negativeOneToOne));}();}();
}

    VkPipelineViewportDepthClipControlCreateInfoEXT deserialize_struct(VkPipelineViewportDepthClipControlCreateInfoEXT::Reader reader){
        auto result=VkPipelineViewportDepthClipControlCreateInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){(result.negativeOneToOne)=reader.getnegativeOneToOne();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineViewportDepthClipControlCreateInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineViewportDepthClipControlCreateInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT::Builder& builder, VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setvertexInputDynamicState((member.vertexInputDynamicState));}();}();
}

    VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT deserialize_struct(VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.vertexInputDynamicState)=reader.getvertexInputDynamicState();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceExternalMemoryRDMAFeaturesNV::Builder& builder, VkPhysicalDeviceExternalMemoryRDMAFeaturesNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setexternalMemoryRDMA((member.externalMemoryRDMA));}();}();
}

    VkPhysicalDeviceExternalMemoryRDMAFeaturesNV deserialize_struct(VkPhysicalDeviceExternalMemoryRDMAFeaturesNV::Reader reader){
        auto result=VkPhysicalDeviceExternalMemoryRDMAFeaturesNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.externalMemoryRDMA)=reader.getexternalMemoryRDMA();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceExternalMemoryRDMAFeaturesNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceExternalMemoryRDMAFeaturesNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkVertexInputBindingDescription2EXT::Builder& builder, VkVertexInputBindingDescription2EXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setbinding((member.binding));}();
[&](){return builder.setstride((member.stride));}();
[&](){[&](){[&](){return builder.setinputRate((member.inputRate));}();}();}();
[&](){return builder.setdivisor((member.divisor));}();
}

    VkVertexInputBindingDescription2EXT deserialize_struct(VkVertexInputBindingDescription2EXT::Reader reader){
        auto result=VkVertexInputBindingDescription2EXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.binding)=reader.getbinding();}();
[&](){(result.stride)=reader.getstride();}();
[&](){[&](){[&](){(result.inputRate)=reader.getinputRate();}();}();}();
[&](){(result.divisor)=reader.getdivisor();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkVertexInputBindingDescription2EXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkVertexInputBindingDescription2EXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkVertexInputAttributeDescription2EXT::Builder& builder, VkVertexInputAttributeDescription2EXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setlocation((member.location));}();
[&](){return builder.setbinding((member.binding));}();
[&](){[&](){[&](){return builder.setformat((member.format));}();}();}();
[&](){return builder.setoffset((member.offset));}();
}

    VkVertexInputAttributeDescription2EXT deserialize_struct(VkVertexInputAttributeDescription2EXT::Reader reader){
        auto result=VkVertexInputAttributeDescription2EXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.location)=reader.getlocation();}();
[&](){(result.binding)=reader.getbinding();}();
[&](){[&](){[&](){(result.format)=reader.getformat();}();}();}();
[&](){(result.offset)=reader.getoffset();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkVertexInputAttributeDescription2EXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkVertexInputAttributeDescription2EXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceColorWriteEnableFeaturesEXT::Builder& builder, VkPhysicalDeviceColorWriteEnableFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setcolorWriteEnable((member.colorWriteEnable));}();}();
}

    VkPhysicalDeviceColorWriteEnableFeaturesEXT deserialize_struct(VkPhysicalDeviceColorWriteEnableFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceColorWriteEnableFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.colorWriteEnable)=reader.getcolorWriteEnable();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceColorWriteEnableFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceColorWriteEnableFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineColorWriteCreateInfoEXT::Builder& builder, VkPipelineColorWriteCreateInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setattachmentCount((member.attachmentCount));}();
[&](){
            if ((member.pColorWriteEnables)==NULL){
                builder.disownpColorWriteEnables();
            return; }
        auto proto_arr=builder.initpColorWriteEnables();
        for(int yIAOqhJ=0; yIAOqhJ < member.attachmentCount; yIAOqhJ++){
            [&](){[&](){return proto_arr.set(yIAOqhJ,((member.pColorWriteEnables)[yIAOqhJ]));}();}();
        }
        }();
}

    VkPipelineColorWriteCreateInfoEXT deserialize_struct(VkPipelineColorWriteCreateInfoEXT::Reader reader){
        auto result=VkPipelineColorWriteCreateInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.attachmentCount)=reader.getattachmentCount();}();
[&](){ VkBool32* temp_ZYFOgyc[&](){
            if (!reader.haspColorWriteEnables()){
                (result.pColorWriteEnables)=NULL;
            return; }{native_concat()}=(VkBool32*)malloc(result.attachmentCount*sizeof(VkBool32));
        auto proto_arr=reader.getpColorWriteEnables(result.attachmentCount);
        for(int DHTXFpH=0; DHTXFpH < result.attachmentCount; DHTXFpH++){
            [&](){[&](){((result.pColorWriteEnables)[DHTXFpH])=proto_arr[DHTXFpH];}();}();
        }
        }();(result.pColorWriteEnables)=temp_ZYFOgyc;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineColorWriteCreateInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineColorWriteCreateInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkMemoryBarrier2::Builder& builder, VkMemoryBarrier2 member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setsrcStageMask((member.srcStageMask));}();}();}();
[&](){[&](){[&](){return builder.setsrcAccessMask((member.srcAccessMask));}();}();}();
[&](){[&](){[&](){return builder.setdstStageMask((member.dstStageMask));}();}();}();
[&](){[&](){[&](){return builder.setdstAccessMask((member.dstAccessMask));}();}();}();
}

    VkMemoryBarrier2 deserialize_struct(VkMemoryBarrier2::Reader reader){
        auto result=VkMemoryBarrier2();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.srcStageMask)=reader.getsrcStageMask();}();}();}();
[&](){[&](){[&](){(result.srcAccessMask)=reader.getsrcAccessMask();}();}();}();
[&](){[&](){[&](){(result.dstStageMask)=reader.getdstStageMask();}();}();}();
[&](){[&](){[&](){(result.dstAccessMask)=reader.getdstAccessMask();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkMemoryBarrier2 member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkMemoryBarrier2 member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkImageMemoryBarrier2::Builder& builder, VkImageMemoryBarrier2 member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setsrcStageMask((member.srcStageMask));}();}();}();
[&](){[&](){[&](){return builder.setsrcAccessMask((member.srcAccessMask));}();}();}();
[&](){[&](){[&](){return builder.setdstStageMask((member.dstStageMask));}();}();}();
[&](){[&](){[&](){return builder.setdstAccessMask((member.dstAccessMask));}();}();}();
[&](){[&](){[&](){return builder.setoldLayout((member.oldLayout));}();}();}();
[&](){[&](){[&](){return builder.setnewLayout((member.newLayout));}();}();}();
[&](){return builder.setsrcQueueFamilyIndex((member.srcQueueFamilyIndex));}();
[&](){return builder.setdstQueueFamilyIndex((member.dstQueueFamilyIndex));}();
[&](){return builder.setimage(serialize_handle(member.image));}();
[&](){
            auto temp=builder.initsubresourceRange(subresourceRange);
            return serialize_struct((member.subresourceRange), temp);
            }();
}

    VkImageMemoryBarrier2 deserialize_struct(VkImageMemoryBarrier2::Reader reader){
        auto result=VkImageMemoryBarrier2();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.srcStageMask)=reader.getsrcStageMask();}();}();}();
[&](){[&](){[&](){(result.srcAccessMask)=reader.getsrcAccessMask();}();}();}();
[&](){[&](){[&](){(result.dstStageMask)=reader.getdstStageMask();}();}();}();
[&](){[&](){[&](){(result.dstAccessMask)=reader.getdstAccessMask();}();}();}();
[&](){[&](){[&](){(result.oldLayout)=reader.getoldLayout();}();}();}();
[&](){[&](){[&](){(result.newLayout)=reader.getnewLayout();}();}();}();
[&](){(result.srcQueueFamilyIndex)=reader.getsrcQueueFamilyIndex();}();
[&](){(result.dstQueueFamilyIndex)=reader.getdstQueueFamilyIndex();}();
[&](){(result.image)=deserialize_handle(reader.getimage());}();
[&](){
            auto temp=reader.getsubresourceRange();
            (result.subresourceRange)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkImageMemoryBarrier2 member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkImageMemoryBarrier2 member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkBufferMemoryBarrier2::Builder& builder, VkBufferMemoryBarrier2 member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setsrcStageMask((member.srcStageMask));}();}();}();
[&](){[&](){[&](){return builder.setsrcAccessMask((member.srcAccessMask));}();}();}();
[&](){[&](){[&](){return builder.setdstStageMask((member.dstStageMask));}();}();}();
[&](){[&](){[&](){return builder.setdstAccessMask((member.dstAccessMask));}();}();}();
[&](){return builder.setsrcQueueFamilyIndex((member.srcQueueFamilyIndex));}();
[&](){return builder.setdstQueueFamilyIndex((member.dstQueueFamilyIndex));}();
[&](){return builder.setbuffer(serialize_handle(member.buffer));}();
[&](){[&](){return builder.setoffset((member.offset));}();}();
[&](){[&](){return builder.setsize((member.size));}();}();
}

    VkBufferMemoryBarrier2 deserialize_struct(VkBufferMemoryBarrier2::Reader reader){
        auto result=VkBufferMemoryBarrier2();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.srcStageMask)=reader.getsrcStageMask();}();}();}();
[&](){[&](){[&](){(result.srcAccessMask)=reader.getsrcAccessMask();}();}();}();
[&](){[&](){[&](){(result.dstStageMask)=reader.getdstStageMask();}();}();}();
[&](){[&](){[&](){(result.dstAccessMask)=reader.getdstAccessMask();}();}();}();
[&](){(result.srcQueueFamilyIndex)=reader.getsrcQueueFamilyIndex();}();
[&](){(result.dstQueueFamilyIndex)=reader.getdstQueueFamilyIndex();}();
[&](){(result.buffer)=deserialize_handle(reader.getbuffer());}();
[&](){[&](){(result.offset)=reader.getoffset();}();}();
[&](){[&](){(result.size)=reader.getsize();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkBufferMemoryBarrier2 member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkBufferMemoryBarrier2 member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDependencyInfo::Builder& builder, VkDependencyInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setdependencyFlags((member.dependencyFlags));}();}();}();
[&](){return builder.setmemoryBarrierCount((member.memoryBarrierCount));}();
[&](){
            if ((member.pMemoryBarriers)==NULL){
                builder.disownpMemoryBarriers();
            return; }
        auto proto_arr=builder.initpMemoryBarriers();
        for(int TLpIbmO=0; TLpIbmO < member.memoryBarrierCount; TLpIbmO++){
            [&](){
            auto temp=proto_arr[TLpIbmO];
            return serialize_struct(((member.pMemoryBarriers)[TLpIbmO]), temp);
            }();
        }
        }();
[&](){return builder.setbufferMemoryBarrierCount((member.bufferMemoryBarrierCount));}();
[&](){
            if ((member.pBufferMemoryBarriers)==NULL){
                builder.disownpBufferMemoryBarriers();
            return; }
        auto proto_arr=builder.initpBufferMemoryBarriers();
        for(int bKIYONz=0; bKIYONz < member.bufferMemoryBarrierCount; bKIYONz++){
            [&](){
            auto temp=proto_arr[bKIYONz];
            return serialize_struct(((member.pBufferMemoryBarriers)[bKIYONz]), temp);
            }();
        }
        }();
[&](){return builder.setimageMemoryBarrierCount((member.imageMemoryBarrierCount));}();
[&](){
            if ((member.pImageMemoryBarriers)==NULL){
                builder.disownpImageMemoryBarriers();
            return; }
        auto proto_arr=builder.initpImageMemoryBarriers();
        for(int GWgQpPD=0; GWgQpPD < member.imageMemoryBarrierCount; GWgQpPD++){
            [&](){
            auto temp=proto_arr[GWgQpPD];
            return serialize_struct(((member.pImageMemoryBarriers)[GWgQpPD]), temp);
            }();
        }
        }();
}

    VkDependencyInfo deserialize_struct(VkDependencyInfo::Reader reader){
        auto result=VkDependencyInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.dependencyFlags)=reader.getdependencyFlags();}();}();}();
[&](){(result.memoryBarrierCount)=reader.getmemoryBarrierCount();}();
[&](){ VkMemoryBarrier2* temp_drvMaAZ[&](){
            if (!reader.haspMemoryBarriers()){
                (result.pMemoryBarriers)=NULL;
            return; }{native_concat()}=(VkMemoryBarrier2*)malloc(result.memoryBarrierCount*sizeof(VkMemoryBarrier2));
        auto proto_arr=reader.getpMemoryBarriers(result.memoryBarrierCount);
        for(int MhoHkAx=0; MhoHkAx < result.memoryBarrierCount; MhoHkAx++){
            [&](){
            auto temp=proto_arr[MhoHkAx];
            ((result.pMemoryBarriers)[MhoHkAx])=deserialize_struct(temp);
            }();
        }
        }();(result.pMemoryBarriers)=temp_drvMaAZ;}();
[&](){(result.bufferMemoryBarrierCount)=reader.getbufferMemoryBarrierCount();}();
[&](){ VkBufferMemoryBarrier2* temp_dAKfGvU[&](){
            if (!reader.haspBufferMemoryBarriers()){
                (result.pBufferMemoryBarriers)=NULL;
            return; }{native_concat()}=(VkBufferMemoryBarrier2*)malloc(result.bufferMemoryBarrierCount*sizeof(VkBufferMemoryBarrier2));
        auto proto_arr=reader.getpBufferMemoryBarriers(result.bufferMemoryBarrierCount);
        for(int NYJDAKD=0; NYJDAKD < result.bufferMemoryBarrierCount; NYJDAKD++){
            [&](){
            auto temp=proto_arr[NYJDAKD];
            ((result.pBufferMemoryBarriers)[NYJDAKD])=deserialize_struct(temp);
            }();
        }
        }();(result.pBufferMemoryBarriers)=temp_dAKfGvU;}();
[&](){(result.imageMemoryBarrierCount)=reader.getimageMemoryBarrierCount();}();
[&](){ VkImageMemoryBarrier2* temp_AsuNyRQ[&](){
            if (!reader.haspImageMemoryBarriers()){
                (result.pImageMemoryBarriers)=NULL;
            return; }{native_concat()}=(VkImageMemoryBarrier2*)malloc(result.imageMemoryBarrierCount*sizeof(VkImageMemoryBarrier2));
        auto proto_arr=reader.getpImageMemoryBarriers(result.imageMemoryBarrierCount);
        for(int wOgpYvu=0; wOgpYvu < result.imageMemoryBarrierCount; wOgpYvu++){
            [&](){
            auto temp=proto_arr[wOgpYvu];
            ((result.pImageMemoryBarriers)[wOgpYvu])=deserialize_struct(temp);
            }();
        }
        }();(result.pImageMemoryBarriers)=temp_AsuNyRQ;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDependencyInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDependencyInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSemaphoreSubmitInfo::Builder& builder, VkSemaphoreSubmitInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setsemaphore(serialize_handle(member.semaphore));}();
[&](){return builder.setvalue((member.value));}();
[&](){[&](){[&](){return builder.setstageMask((member.stageMask));}();}();}();
[&](){return builder.setdeviceIndex((member.deviceIndex));}();
}

    VkSemaphoreSubmitInfo deserialize_struct(VkSemaphoreSubmitInfo::Reader reader){
        auto result=VkSemaphoreSubmitInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.semaphore)=deserialize_handle(reader.getsemaphore());}();
[&](){(result.value)=reader.getvalue();}();
[&](){[&](){[&](){(result.stageMask)=reader.getstageMask();}();}();}();
[&](){(result.deviceIndex)=reader.getdeviceIndex();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSemaphoreSubmitInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSemaphoreSubmitInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkCommandBufferSubmitInfo::Builder& builder, VkCommandBufferSubmitInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setcommandBuffer(serialize_handle(member.commandBuffer));}();
[&](){return builder.setdeviceMask((member.deviceMask));}();
}

    VkCommandBufferSubmitInfo deserialize_struct(VkCommandBufferSubmitInfo::Reader reader){
        auto result=VkCommandBufferSubmitInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.commandBuffer)=deserialize_handle(reader.getcommandBuffer());}();
[&](){(result.deviceMask)=reader.getdeviceMask();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkCommandBufferSubmitInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkCommandBufferSubmitInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSubmitInfo2::Builder& builder, VkSubmitInfo2 member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){return builder.setwaitSemaphoreInfoCount((member.waitSemaphoreInfoCount));}();
[&](){
            if ((member.pWaitSemaphoreInfos)==NULL){
                builder.disownpWaitSemaphoreInfos();
            return; }
        auto proto_arr=builder.initpWaitSemaphoreInfos();
        for(int gGUzyVR=0; gGUzyVR < member.waitSemaphoreInfoCount; gGUzyVR++){
            [&](){
            auto temp=proto_arr[gGUzyVR];
            return serialize_struct(((member.pWaitSemaphoreInfos)[gGUzyVR]), temp);
            }();
        }
        }();
[&](){return builder.setcommandBufferInfoCount((member.commandBufferInfoCount));}();
[&](){
            if ((member.pCommandBufferInfos)==NULL){
                builder.disownpCommandBufferInfos();
            return; }
        auto proto_arr=builder.initpCommandBufferInfos();
        for(int fzyXatx=0; fzyXatx < member.commandBufferInfoCount; fzyXatx++){
            [&](){
            auto temp=proto_arr[fzyXatx];
            return serialize_struct(((member.pCommandBufferInfos)[fzyXatx]), temp);
            }();
        }
        }();
[&](){return builder.setsignalSemaphoreInfoCount((member.signalSemaphoreInfoCount));}();
[&](){
            if ((member.pSignalSemaphoreInfos)==NULL){
                builder.disownpSignalSemaphoreInfos();
            return; }
        auto proto_arr=builder.initpSignalSemaphoreInfos();
        for(int UDwXunL=0; UDwXunL < member.signalSemaphoreInfoCount; UDwXunL++){
            [&](){
            auto temp=proto_arr[UDwXunL];
            return serialize_struct(((member.pSignalSemaphoreInfos)[UDwXunL]), temp);
            }();
        }
        }();
}

    VkSubmitInfo2 deserialize_struct(VkSubmitInfo2::Reader reader){
        auto result=VkSubmitInfo2();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){(result.waitSemaphoreInfoCount)=reader.getwaitSemaphoreInfoCount();}();
[&](){ VkSemaphoreSubmitInfo* temp_cazotEN[&](){
            if (!reader.haspWaitSemaphoreInfos()){
                (result.pWaitSemaphoreInfos)=NULL;
            return; }{native_concat()}=(VkSemaphoreSubmitInfo*)malloc(result.waitSemaphoreInfoCount*sizeof(VkSemaphoreSubmitInfo));
        auto proto_arr=reader.getpWaitSemaphoreInfos(result.waitSemaphoreInfoCount);
        for(int ENNkfbt=0; ENNkfbt < result.waitSemaphoreInfoCount; ENNkfbt++){
            [&](){
            auto temp=proto_arr[ENNkfbt];
            ((result.pWaitSemaphoreInfos)[ENNkfbt])=deserialize_struct(temp);
            }();
        }
        }();(result.pWaitSemaphoreInfos)=temp_cazotEN;}();
[&](){(result.commandBufferInfoCount)=reader.getcommandBufferInfoCount();}();
[&](){ VkCommandBufferSubmitInfo* temp_rjjWTGb[&](){
            if (!reader.haspCommandBufferInfos()){
                (result.pCommandBufferInfos)=NULL;
            return; }{native_concat()}=(VkCommandBufferSubmitInfo*)malloc(result.commandBufferInfoCount*sizeof(VkCommandBufferSubmitInfo));
        auto proto_arr=reader.getpCommandBufferInfos(result.commandBufferInfoCount);
        for(int gNNiXEC=0; gNNiXEC < result.commandBufferInfoCount; gNNiXEC++){
            [&](){
            auto temp=proto_arr[gNNiXEC];
            ((result.pCommandBufferInfos)[gNNiXEC])=deserialize_struct(temp);
            }();
        }
        }();(result.pCommandBufferInfos)=temp_rjjWTGb;}();
[&](){(result.signalSemaphoreInfoCount)=reader.getsignalSemaphoreInfoCount();}();
[&](){ VkSemaphoreSubmitInfo* temp_jVoIWsZ[&](){
            if (!reader.haspSignalSemaphoreInfos()){
                (result.pSignalSemaphoreInfos)=NULL;
            return; }{native_concat()}=(VkSemaphoreSubmitInfo*)malloc(result.signalSemaphoreInfoCount*sizeof(VkSemaphoreSubmitInfo));
        auto proto_arr=reader.getpSignalSemaphoreInfos(result.signalSemaphoreInfoCount);
        for(int sLMGTGF=0; sLMGTGF < result.signalSemaphoreInfoCount; sLMGTGF++){
            [&](){
            auto temp=proto_arr[sLMGTGF];
            ((result.pSignalSemaphoreInfos)[sLMGTGF])=deserialize_struct(temp);
            }();
        }
        }();(result.pSignalSemaphoreInfos)=temp_jVoIWsZ;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSubmitInfo2 member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSubmitInfo2 member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkQueueFamilyCheckpointProperties2NV::Builder& builder, VkQueueFamilyCheckpointProperties2NV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setcheckpointExecutionStageMask((member.checkpointExecutionStageMask));}();}();}();
}

    VkQueueFamilyCheckpointProperties2NV deserialize_struct(VkQueueFamilyCheckpointProperties2NV::Reader reader){
        auto result=VkQueueFamilyCheckpointProperties2NV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.checkpointExecutionStageMask)=reader.getcheckpointExecutionStageMask();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkQueueFamilyCheckpointProperties2NV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkQueueFamilyCheckpointProperties2NV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkCheckpointData2NV::Builder& builder, VkCheckpointData2NV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setstage((member.stage));}();}();}();
[&](){
            if ((member.pCheckpointMarker)==NULL){
                builder.disownpCheckpointMarker();
            return; }[&](){
            if (((char*)(member.pCheckpointMarker).pCheckpointMarker)==NULL){
                builder.disownpCheckpointMarker();
            return; }
        auto proto_arr=builder.initpCheckpointMarker();
        for(int ROoHiBu=0; ROoHiBu < strlen(((char*)(member.pCheckpointMarker).pCheckpointMarker))+1; ROoHiBu++){
            [&](){return proto_arr.set(ROoHiBu,(((char*)(member.pCheckpointMarker).pCheckpointMarker)[ROoHiBu]));}();
        }
        }();}();
}

    VkCheckpointData2NV deserialize_struct(VkCheckpointData2NV::Reader reader){
        auto result=VkCheckpointData2NV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.stage)=reader.getstage();}();}();}();
[&](){
            if (!reader.haspCheckpointMarker()){
                (result.pCheckpointMarker)=NULL;
            return; }char* temp_PEjVDYf;[&](){
            if (!reader.haspCheckpointMarker()){
                (temp_PEjVDYf.pCheckpointMarker)=NULL;
            return; }{native_concat()}=(char*)malloc(reader.getpCheckpointMarker().size();*sizeof(char));
        auto proto_arr=reader.getpCheckpointMarker(reader.getpCheckpointMarker().size(););
        for(int ROoHiBu=0; ROoHiBu < reader.getpCheckpointMarker().size();; ROoHiBu++){
            [&](){((temp_PEjVDYf.pCheckpointMarker)[ROoHiBu])=proto_arr[ROoHiBu];}();
        }
        }();(result.pCheckpointMarker)=temp_PEjVDYf;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkCheckpointData2NV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkCheckpointData2NV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceSynchronization2Features::Builder& builder, VkPhysicalDeviceSynchronization2Features member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setsynchronization2((member.synchronization2));}();}();
}

    VkPhysicalDeviceSynchronization2Features deserialize_struct(VkPhysicalDeviceSynchronization2Features::Reader reader){
        auto result=VkPhysicalDeviceSynchronization2Features();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.synchronization2)=reader.getsynchronization2();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceSynchronization2Features member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceSynchronization2Features member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceHostImageCopyFeaturesEXT::Builder& builder, VkPhysicalDeviceHostImageCopyFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.sethostImageCopy((member.hostImageCopy));}();}();
}

    VkPhysicalDeviceHostImageCopyFeaturesEXT deserialize_struct(VkPhysicalDeviceHostImageCopyFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceHostImageCopyFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.hostImageCopy)=reader.gethostImageCopy();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceHostImageCopyFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceHostImageCopyFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceHostImageCopyPropertiesEXT::Builder& builder, VkPhysicalDeviceHostImageCopyPropertiesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setcopySrcLayoutCount((member.copySrcLayoutCount));}();
[&](){
            if ((member.pCopySrcLayouts)==NULL){
                builder.disownpCopySrcLayouts();
            return; }
        auto proto_arr=builder.initpCopySrcLayouts();
        for(int Mkgnnkd=0; Mkgnnkd < member.copySrcLayoutCount; Mkgnnkd++){
            [&](){[&](){[&](){return proto_arr.set(Mkgnnkd,((member.pCopySrcLayouts)[Mkgnnkd]));}();}();}();
        }
        }();
[&](){return builder.setcopyDstLayoutCount((member.copyDstLayoutCount));}();
[&](){
            if ((member.pCopyDstLayouts)==NULL){
                builder.disownpCopyDstLayouts();
            return; }
        auto proto_arr=builder.initpCopyDstLayouts();
        for(int ynYdKwH=0; ynYdKwH < member.copyDstLayoutCount; ynYdKwH++){
            [&](){[&](){[&](){return proto_arr.set(ynYdKwH,((member.pCopyDstLayouts)[ynYdKwH]));}();}();}();
        }
        }();
[&](){
        auto proto_arr=builder.initoptimalTilingLayoutUUID();
        for(int rBEMEhH=0; rBEMEhH < VK_UUID_SIZE; rBEMEhH++){
            [&](){return proto_arr.set(rBEMEhH,((member.optimalTilingLayoutUUID)[rBEMEhH]));}();
        }
        }();
[&](){[&](){return builder.setidenticalMemoryTypeRequirements((member.identicalMemoryTypeRequirements));}();}();
}

    VkPhysicalDeviceHostImageCopyPropertiesEXT deserialize_struct(VkPhysicalDeviceHostImageCopyPropertiesEXT::Reader reader){
        auto result=VkPhysicalDeviceHostImageCopyPropertiesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.copySrcLayoutCount)=reader.getcopySrcLayoutCount();}();
[&](){
            if (!reader.haspCopySrcLayouts()){
                (result.pCopySrcLayouts)=NULL;
            return; }{native_concat()}=(VkImageLayout*)malloc(result.copySrcLayoutCount*sizeof(VkImageLayout));
        auto proto_arr=reader.getpCopySrcLayouts(result.copySrcLayoutCount);
        for(int Mkgnnkd=0; Mkgnnkd < result.copySrcLayoutCount; Mkgnnkd++){
            [&](){[&](){[&](){((result.pCopySrcLayouts)[Mkgnnkd])=proto_arr[Mkgnnkd];}();}();}();
        }
        }();
[&](){(result.copyDstLayoutCount)=reader.getcopyDstLayoutCount();}();
[&](){
            if (!reader.haspCopyDstLayouts()){
                (result.pCopyDstLayouts)=NULL;
            return; }{native_concat()}=(VkImageLayout*)malloc(result.copyDstLayoutCount*sizeof(VkImageLayout));
        auto proto_arr=reader.getpCopyDstLayouts(result.copyDstLayoutCount);
        for(int ynYdKwH=0; ynYdKwH < result.copyDstLayoutCount; ynYdKwH++){
            [&](){[&](){[&](){((result.pCopyDstLayouts)[ynYdKwH])=proto_arr[ynYdKwH];}();}();}();
        }
        }();
[&](){
        auto proto_arr=reader.getoptimalTilingLayoutUUID(VK_UUID_SIZE);
        for(int rBEMEhH=0; rBEMEhH < VK_UUID_SIZE; rBEMEhH++){
            [&](){((result.optimalTilingLayoutUUID)[rBEMEhH])=proto_arr[rBEMEhH];}();
        }
        }();
[&](){[&](){(result.identicalMemoryTypeRequirements)=reader.getidenticalMemoryTypeRequirements();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceHostImageCopyPropertiesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceHostImageCopyPropertiesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkMemoryToImageCopyEXT::Builder& builder, VkMemoryToImageCopyEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            if ((member.pHostPointer)==NULL){
                builder.disownpHostPointer();
            return; }[&](){
            if (((char*)(member.pHostPointer).pHostPointer)==NULL){
                builder.disownpHostPointer();
            return; }
        auto proto_arr=builder.initpHostPointer();
        for(int MgtLJyk=0; MgtLJyk < strlen(((char*)(member.pHostPointer).pHostPointer))+1; MgtLJyk++){
            [&](){return proto_arr.set(MgtLJyk,(((char*)(member.pHostPointer).pHostPointer)[MgtLJyk]));}();
        }
        }();}();
[&](){return builder.setmemoryRowLength((member.memoryRowLength));}();
[&](){return builder.setmemoryImageHeight((member.memoryImageHeight));}();
[&](){
            auto temp=builder.initimageSubresource(imageSubresource);
            return serialize_struct((member.imageSubresource), temp);
            }();
[&](){
            auto temp=builder.initimageOffset(imageOffset);
            return serialize_struct((member.imageOffset), temp);
            }();
[&](){
            auto temp=builder.initimageExtent(imageExtent);
            return serialize_struct((member.imageExtent), temp);
            }();
}

    VkMemoryToImageCopyEXT deserialize_struct(VkMemoryToImageCopyEXT::Reader reader){
        auto result=VkMemoryToImageCopyEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){ void* temp_rSssuyn[&](){
            if (!reader.haspHostPointer()){
                (result.pHostPointer)=NULL;
            return; }char* temp_hThmjkZ;[&](){
            if (!reader.haspHostPointer()){
                (temp_hThmjkZ.pHostPointer)=NULL;
            return; }{native_concat()}=(char*)malloc(reader.getpHostPointer().size();*sizeof(char));
        auto proto_arr=reader.getpHostPointer(reader.getpHostPointer().size(););
        for(int PdKAgKO=0; PdKAgKO < reader.getpHostPointer().size();; PdKAgKO++){
            [&](){((temp_hThmjkZ.pHostPointer)[PdKAgKO])=proto_arr[PdKAgKO];}();
        }
        }();(result.pHostPointer)=temp_hThmjkZ;}();(result.pHostPointer)=temp_rSssuyn;}();
[&](){(result.memoryRowLength)=reader.getmemoryRowLength();}();
[&](){(result.memoryImageHeight)=reader.getmemoryImageHeight();}();
[&](){
            auto temp=reader.getimageSubresource();
            (result.imageSubresource)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getimageOffset();
            (result.imageOffset)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getimageExtent();
            (result.imageExtent)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkMemoryToImageCopyEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkMemoryToImageCopyEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkImageToMemoryCopyEXT::Builder& builder, VkImageToMemoryCopyEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            if ((member.pHostPointer)==NULL){
                builder.disownpHostPointer();
            return; }[&](){
            if (((char*)(member.pHostPointer).pHostPointer)==NULL){
                builder.disownpHostPointer();
            return; }
        auto proto_arr=builder.initpHostPointer();
        for(int XfuwLTM=0; XfuwLTM < 100000; XfuwLTM++){
            [&](){return proto_arr.set(XfuwLTM,(((char*)(member.pHostPointer).pHostPointer)[XfuwLTM]));}();
        }
        }();}();
[&](){return builder.setmemoryRowLength((member.memoryRowLength));}();
[&](){return builder.setmemoryImageHeight((member.memoryImageHeight));}();
[&](){
            auto temp=builder.initimageSubresource(imageSubresource);
            return serialize_struct((member.imageSubresource), temp);
            }();
[&](){
            auto temp=builder.initimageOffset(imageOffset);
            return serialize_struct((member.imageOffset), temp);
            }();
[&](){
            auto temp=builder.initimageExtent(imageExtent);
            return serialize_struct((member.imageExtent), temp);
            }();
}

    VkImageToMemoryCopyEXT deserialize_struct(VkImageToMemoryCopyEXT::Reader reader){
        auto result=VkImageToMemoryCopyEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){
            if (!reader.haspHostPointer()){
                (result.pHostPointer)=NULL;
            return; }char* temp_dFikxRP;[&](){
            if (!reader.haspHostPointer()){
                (temp_dFikxRP.pHostPointer)=NULL;
            return; }{native_concat()}=(char*)malloc(100000*sizeof(char));
        auto proto_arr=reader.getpHostPointer(100000);
        for(int XfuwLTM=0; XfuwLTM < 100000; XfuwLTM++){
            [&](){((temp_dFikxRP.pHostPointer)[XfuwLTM])=proto_arr[XfuwLTM];}();
        }
        }();(result.pHostPointer)=temp_dFikxRP;}();
[&](){(result.memoryRowLength)=reader.getmemoryRowLength();}();
[&](){(result.memoryImageHeight)=reader.getmemoryImageHeight();}();
[&](){
            auto temp=reader.getimageSubresource();
            (result.imageSubresource)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getimageOffset();
            (result.imageOffset)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getimageExtent();
            (result.imageExtent)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkImageToMemoryCopyEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkImageToMemoryCopyEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkCopyMemoryToImageInfoEXT::Builder& builder, VkCopyMemoryToImageInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){return builder.setdstImage(serialize_handle(member.dstImage));}();
[&](){[&](){[&](){return builder.setdstImageLayout((member.dstImageLayout));}();}();}();
[&](){return builder.setregionCount((member.regionCount));}();
[&](){
            if ((member.pRegions)==NULL){
                builder.disownpRegions();
            return; }
        auto proto_arr=builder.initpRegions();
        for(int FNfhlFN=0; FNfhlFN < member.regionCount; FNfhlFN++){
            [&](){
            auto temp=proto_arr[FNfhlFN];
            return serialize_struct(((member.pRegions)[FNfhlFN]), temp);
            }();
        }
        }();
}

    VkCopyMemoryToImageInfoEXT deserialize_struct(VkCopyMemoryToImageInfoEXT::Reader reader){
        auto result=VkCopyMemoryToImageInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){(result.dstImage)=deserialize_handle(reader.getdstImage());}();
[&](){[&](){[&](){(result.dstImageLayout)=reader.getdstImageLayout();}();}();}();
[&](){(result.regionCount)=reader.getregionCount();}();
[&](){ VkMemoryToImageCopyEXT* temp_qitPGkX[&](){
            if (!reader.haspRegions()){
                (result.pRegions)=NULL;
            return; }{native_concat()}=(VkMemoryToImageCopyEXT*)malloc(result.regionCount*sizeof(VkMemoryToImageCopyEXT));
        auto proto_arr=reader.getpRegions(result.regionCount);
        for(int yGaZjSW=0; yGaZjSW < result.regionCount; yGaZjSW++){
            [&](){
            auto temp=proto_arr[yGaZjSW];
            ((result.pRegions)[yGaZjSW])=deserialize_struct(temp);
            }();
        }
        }();(result.pRegions)=temp_qitPGkX;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkCopyMemoryToImageInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkCopyMemoryToImageInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkCopyImageToMemoryInfoEXT::Builder& builder, VkCopyImageToMemoryInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){return builder.setsrcImage(serialize_handle(member.srcImage));}();
[&](){[&](){[&](){return builder.setsrcImageLayout((member.srcImageLayout));}();}();}();
[&](){return builder.setregionCount((member.regionCount));}();
[&](){
            if ((member.pRegions)==NULL){
                builder.disownpRegions();
            return; }
        auto proto_arr=builder.initpRegions();
        for(int OCYScIs=0; OCYScIs < member.regionCount; OCYScIs++){
            [&](){
            auto temp=proto_arr[OCYScIs];
            return serialize_struct(((member.pRegions)[OCYScIs]), temp);
            }();
        }
        }();
}

    VkCopyImageToMemoryInfoEXT deserialize_struct(VkCopyImageToMemoryInfoEXT::Reader reader){
        auto result=VkCopyImageToMemoryInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){(result.srcImage)=deserialize_handle(reader.getsrcImage());}();
[&](){[&](){[&](){(result.srcImageLayout)=reader.getsrcImageLayout();}();}();}();
[&](){(result.regionCount)=reader.getregionCount();}();
[&](){ VkImageToMemoryCopyEXT* temp_xngjqoI[&](){
            if (!reader.haspRegions()){
                (result.pRegions)=NULL;
            return; }{native_concat()}=(VkImageToMemoryCopyEXT*)malloc(result.regionCount*sizeof(VkImageToMemoryCopyEXT));
        auto proto_arr=reader.getpRegions(result.regionCount);
        for(int LJBmGct=0; LJBmGct < result.regionCount; LJBmGct++){
            [&](){
            auto temp=proto_arr[LJBmGct];
            ((result.pRegions)[LJBmGct])=deserialize_struct(temp);
            }();
        }
        }();(result.pRegions)=temp_xngjqoI;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkCopyImageToMemoryInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkCopyImageToMemoryInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkCopyImageToImageInfoEXT::Builder& builder, VkCopyImageToImageInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){return builder.setsrcImage(serialize_handle(member.srcImage));}();
[&](){[&](){[&](){return builder.setsrcImageLayout((member.srcImageLayout));}();}();}();
[&](){return builder.setdstImage(serialize_handle(member.dstImage));}();
[&](){[&](){[&](){return builder.setdstImageLayout((member.dstImageLayout));}();}();}();
[&](){return builder.setregionCount((member.regionCount));}();
[&](){
            if ((member.pRegions)==NULL){
                builder.disownpRegions();
            return; }
        auto proto_arr=builder.initpRegions();
        for(int UKtqPyM=0; UKtqPyM < member.regionCount; UKtqPyM++){
            [&](){
            auto temp=proto_arr[UKtqPyM];
            return serialize_struct(((member.pRegions)[UKtqPyM]), temp);
            }();
        }
        }();
}

    VkCopyImageToImageInfoEXT deserialize_struct(VkCopyImageToImageInfoEXT::Reader reader){
        auto result=VkCopyImageToImageInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){(result.srcImage)=deserialize_handle(reader.getsrcImage());}();
[&](){[&](){[&](){(result.srcImageLayout)=reader.getsrcImageLayout();}();}();}();
[&](){(result.dstImage)=deserialize_handle(reader.getdstImage());}();
[&](){[&](){[&](){(result.dstImageLayout)=reader.getdstImageLayout();}();}();}();
[&](){(result.regionCount)=reader.getregionCount();}();
[&](){ VkImageCopy2* temp_mdeoncL[&](){
            if (!reader.haspRegions()){
                (result.pRegions)=NULL;
            return; }{native_concat()}=(VkImageCopy2*)malloc(result.regionCount*sizeof(VkImageCopy2));
        auto proto_arr=reader.getpRegions(result.regionCount);
        for(int RcpKxBk=0; RcpKxBk < result.regionCount; RcpKxBk++){
            [&](){
            auto temp=proto_arr[RcpKxBk];
            ((result.pRegions)[RcpKxBk])=deserialize_struct(temp);
            }();
        }
        }();(result.pRegions)=temp_mdeoncL;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkCopyImageToImageInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkCopyImageToImageInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkHostImageLayoutTransitionInfoEXT::Builder& builder, VkHostImageLayoutTransitionInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setimage(serialize_handle(member.image));}();
[&](){[&](){[&](){return builder.setoldLayout((member.oldLayout));}();}();}();
[&](){[&](){[&](){return builder.setnewLayout((member.newLayout));}();}();}();
[&](){
            auto temp=builder.initsubresourceRange(subresourceRange);
            return serialize_struct((member.subresourceRange), temp);
            }();
}

    VkHostImageLayoutTransitionInfoEXT deserialize_struct(VkHostImageLayoutTransitionInfoEXT::Reader reader){
        auto result=VkHostImageLayoutTransitionInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.image)=deserialize_handle(reader.getimage());}();
[&](){[&](){[&](){(result.oldLayout)=reader.getoldLayout();}();}();}();
[&](){[&](){[&](){(result.newLayout)=reader.getnewLayout();}();}();}();
[&](){
            auto temp=reader.getsubresourceRange();
            (result.subresourceRange)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkHostImageLayoutTransitionInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkHostImageLayoutTransitionInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSubresourceHostMemcpySizeEXT::Builder& builder, VkSubresourceHostMemcpySizeEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setsize((member.size));}();}();
}

    VkSubresourceHostMemcpySizeEXT deserialize_struct(VkSubresourceHostMemcpySizeEXT::Reader reader){
        auto result=VkSubresourceHostMemcpySizeEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.size)=reader.getsize();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSubresourceHostMemcpySizeEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSubresourceHostMemcpySizeEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkHostImageCopyDevicePerformanceQueryEXT::Builder& builder, VkHostImageCopyDevicePerformanceQueryEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setoptimalDeviceAccess((member.optimalDeviceAccess));}();}();
[&](){[&](){return builder.setidenticalMemoryLayout((member.identicalMemoryLayout));}();}();
}

    VkHostImageCopyDevicePerformanceQueryEXT deserialize_struct(VkHostImageCopyDevicePerformanceQueryEXT::Reader reader){
        auto result=VkHostImageCopyDevicePerformanceQueryEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.optimalDeviceAccess)=reader.getoptimalDeviceAccess();}();}();
[&](){[&](){(result.identicalMemoryLayout)=reader.getidenticalMemoryLayout();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkHostImageCopyDevicePerformanceQueryEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkHostImageCopyDevicePerformanceQueryEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT::Builder& builder, VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setprimitivesGeneratedQuery((member.primitivesGeneratedQuery));}();}();
[&](){[&](){return builder.setprimitivesGeneratedQueryWithRasterizerDiscard((member.primitivesGeneratedQueryWithRasterizerDiscard));}();}();
[&](){[&](){return builder.setprimitivesGeneratedQueryWithNonZeroStreams((member.primitivesGeneratedQueryWithNonZeroStreams));}();}();
}

    VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT deserialize_struct(VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT::Reader reader){
        auto result=VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.primitivesGeneratedQuery)=reader.getprimitivesGeneratedQuery();}();}();
[&](){[&](){(result.primitivesGeneratedQueryWithRasterizerDiscard)=reader.getprimitivesGeneratedQueryWithRasterizerDiscard();}();}();
[&](){[&](){(result.primitivesGeneratedQueryWithNonZeroStreams)=reader.getprimitivesGeneratedQueryWithNonZeroStreams();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceLegacyDitheringFeaturesEXT::Builder& builder, VkPhysicalDeviceLegacyDitheringFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setlegacyDithering((member.legacyDithering));}();}();
}

    VkPhysicalDeviceLegacyDitheringFeaturesEXT deserialize_struct(VkPhysicalDeviceLegacyDitheringFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceLegacyDitheringFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.legacyDithering)=reader.getlegacyDithering();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceLegacyDitheringFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceLegacyDitheringFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT::Builder& builder, VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setmultisampledRenderToSingleSampled((member.multisampledRenderToSingleSampled));}();}();
}

    VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT deserialize_struct(VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.multisampledRenderToSingleSampled)=reader.getmultisampledRenderToSingleSampled();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSubpassResolvePerformanceQueryEXT::Builder& builder, VkSubpassResolvePerformanceQueryEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setoptimal((member.optimal));}();}();
}

    VkSubpassResolvePerformanceQueryEXT deserialize_struct(VkSubpassResolvePerformanceQueryEXT::Reader reader){
        auto result=VkSubpassResolvePerformanceQueryEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.optimal)=reader.getoptimal();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSubpassResolvePerformanceQueryEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSubpassResolvePerformanceQueryEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkMultisampledRenderToSingleSampledInfoEXT::Builder& builder, VkMultisampledRenderToSingleSampledInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setmultisampledRenderToSingleSampledEnable((member.multisampledRenderToSingleSampledEnable));}();}();
[&](){[&](){[&](){return builder.setrasterizationSamples((member.rasterizationSamples));}();}();}();
}

    VkMultisampledRenderToSingleSampledInfoEXT deserialize_struct(VkMultisampledRenderToSingleSampledInfoEXT::Reader reader){
        auto result=VkMultisampledRenderToSingleSampledInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){(result.multisampledRenderToSingleSampledEnable)=reader.getmultisampledRenderToSingleSampledEnable();}();}();
[&](){[&](){[&](){(result.rasterizationSamples)=reader.getrasterizationSamples();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkMultisampledRenderToSingleSampledInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkMultisampledRenderToSingleSampledInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDevicePipelineProtectedAccessFeaturesEXT::Builder& builder, VkPhysicalDevicePipelineProtectedAccessFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setpipelineProtectedAccess((member.pipelineProtectedAccess));}();}();
}

    VkPhysicalDevicePipelineProtectedAccessFeaturesEXT deserialize_struct(VkPhysicalDevicePipelineProtectedAccessFeaturesEXT::Reader reader){
        auto result=VkPhysicalDevicePipelineProtectedAccessFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.pipelineProtectedAccess)=reader.getpipelineProtectedAccess();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDevicePipelineProtectedAccessFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDevicePipelineProtectedAccessFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkQueueFamilyVideoPropertiesKHR::Builder& builder, VkQueueFamilyVideoPropertiesKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setvideoCodecOperations((member.videoCodecOperations));}();}();}();
}

    VkQueueFamilyVideoPropertiesKHR deserialize_struct(VkQueueFamilyVideoPropertiesKHR::Reader reader){
        auto result=VkQueueFamilyVideoPropertiesKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.videoCodecOperations)=reader.getvideoCodecOperations();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkQueueFamilyVideoPropertiesKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkQueueFamilyVideoPropertiesKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkQueueFamilyQueryResultStatusPropertiesKHR::Builder& builder, VkQueueFamilyQueryResultStatusPropertiesKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setqueryResultStatusSupport((member.queryResultStatusSupport));}();}();
}

    VkQueueFamilyQueryResultStatusPropertiesKHR deserialize_struct(VkQueueFamilyQueryResultStatusPropertiesKHR::Reader reader){
        auto result=VkQueueFamilyQueryResultStatusPropertiesKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.queryResultStatusSupport)=reader.getqueryResultStatusSupport();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkQueueFamilyQueryResultStatusPropertiesKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkQueueFamilyQueryResultStatusPropertiesKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkVideoProfileListInfoKHR::Builder& builder, VkVideoProfileListInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setprofileCount((member.profileCount));}();
[&](){
            if ((member.pProfiles)==NULL){
                builder.disownpProfiles();
            return; }
        auto proto_arr=builder.initpProfiles();
        for(int eTTbcXY=0; eTTbcXY < member.profileCount; eTTbcXY++){
            [&](){
            auto temp=proto_arr[eTTbcXY];
            return serialize_struct(((member.pProfiles)[eTTbcXY]), temp);
            }();
        }
        }();
}

    VkVideoProfileListInfoKHR deserialize_struct(VkVideoProfileListInfoKHR::Reader reader){
        auto result=VkVideoProfileListInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.profileCount)=reader.getprofileCount();}();
[&](){ VkVideoProfileInfoKHR* temp_UMuFnDv[&](){
            if (!reader.haspProfiles()){
                (result.pProfiles)=NULL;
            return; }{native_concat()}=(VkVideoProfileInfoKHR*)malloc(result.profileCount*sizeof(VkVideoProfileInfoKHR));
        auto proto_arr=reader.getpProfiles(result.profileCount);
        for(int keIVVNm=0; keIVVNm < result.profileCount; keIVVNm++){
            [&](){
            auto temp=proto_arr[keIVVNm];
            ((result.pProfiles)[keIVVNm])=deserialize_struct(temp);
            }();
        }
        }();(result.pProfiles)=temp_UMuFnDv;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkVideoProfileListInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkVideoProfileListInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceVideoFormatInfoKHR::Builder& builder, VkPhysicalDeviceVideoFormatInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setimageUsage((member.imageUsage));}();}();}();
}

    VkPhysicalDeviceVideoFormatInfoKHR deserialize_struct(VkPhysicalDeviceVideoFormatInfoKHR::Reader reader){
        auto result=VkPhysicalDeviceVideoFormatInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.imageUsage)=reader.getimageUsage();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceVideoFormatInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceVideoFormatInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkVideoFormatPropertiesKHR::Builder& builder, VkVideoFormatPropertiesKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setformat((member.format));}();}();}();
[&](){
            auto temp=builder.initcomponentMapping(componentMapping);
            return serialize_struct((member.componentMapping), temp);
            }();
[&](){[&](){[&](){return builder.setimageCreateFlags((member.imageCreateFlags));}();}();}();
[&](){[&](){[&](){return builder.setimageType((member.imageType));}();}();}();
[&](){[&](){[&](){return builder.setimageTiling((member.imageTiling));}();}();}();
[&](){[&](){[&](){return builder.setimageUsageFlags((member.imageUsageFlags));}();}();}();
}

    VkVideoFormatPropertiesKHR deserialize_struct(VkVideoFormatPropertiesKHR::Reader reader){
        auto result=VkVideoFormatPropertiesKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.format)=reader.getformat();}();}();}();
[&](){
            auto temp=reader.getcomponentMapping();
            (result.componentMapping)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.imageCreateFlags)=reader.getimageCreateFlags();}();}();}();
[&](){[&](){[&](){(result.imageType)=reader.getimageType();}();}();}();
[&](){[&](){[&](){(result.imageTiling)=reader.getimageTiling();}();}();}();
[&](){[&](){[&](){(result.imageUsageFlags)=reader.getimageUsageFlags();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkVideoFormatPropertiesKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkVideoFormatPropertiesKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkVideoProfileInfoKHR::Builder& builder, VkVideoProfileInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setvideoCodecOperation((member.videoCodecOperation));}();}();}();
[&](){[&](){[&](){return builder.setchromaSubsampling((member.chromaSubsampling));}();}();}();
[&](){[&](){[&](){return builder.setlumaBitDepth((member.lumaBitDepth));}();}();}();
[&](){[&](){[&](){return builder.setchromaBitDepth((member.chromaBitDepth));}();}();}();
}

    VkVideoProfileInfoKHR deserialize_struct(VkVideoProfileInfoKHR::Reader reader){
        auto result=VkVideoProfileInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.videoCodecOperation)=reader.getvideoCodecOperation();}();}();}();
[&](){[&](){[&](){(result.chromaSubsampling)=reader.getchromaSubsampling();}();}();}();
[&](){[&](){[&](){(result.lumaBitDepth)=reader.getlumaBitDepth();}();}();}();
[&](){[&](){[&](){(result.chromaBitDepth)=reader.getchromaBitDepth();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkVideoProfileInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkVideoProfileInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkVideoCapabilitiesKHR::Builder& builder, VkVideoCapabilitiesKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){[&](){return builder.setminBitstreamBufferOffsetAlignment((member.minBitstreamBufferOffsetAlignment));}();}();
[&](){[&](){return builder.setminBitstreamBufferSizeAlignment((member.minBitstreamBufferSizeAlignment));}();}();
[&](){
            auto temp=builder.initpictureAccessGranularity(pictureAccessGranularity);
            return serialize_struct((member.pictureAccessGranularity), temp);
            }();
[&](){
            auto temp=builder.initminCodedExtent(minCodedExtent);
            return serialize_struct((member.minCodedExtent), temp);
            }();
[&](){
            auto temp=builder.initmaxCodedExtent(maxCodedExtent);
            return serialize_struct((member.maxCodedExtent), temp);
            }();
[&](){return builder.setmaxDpbSlots((member.maxDpbSlots));}();
[&](){return builder.setmaxActiveReferencePictures((member.maxActiveReferencePictures));}();
[&](){
            auto temp=builder.initstdHeaderVersion(stdHeaderVersion);
            return serialize_struct((member.stdHeaderVersion), temp);
            }();
}

    VkVideoCapabilitiesKHR deserialize_struct(VkVideoCapabilitiesKHR::Reader reader){
        auto result=VkVideoCapabilitiesKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){[&](){(result.minBitstreamBufferOffsetAlignment)=reader.getminBitstreamBufferOffsetAlignment();}();}();
[&](){[&](){(result.minBitstreamBufferSizeAlignment)=reader.getminBitstreamBufferSizeAlignment();}();}();
[&](){
            auto temp=reader.getpictureAccessGranularity();
            (result.pictureAccessGranularity)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getminCodedExtent();
            (result.minCodedExtent)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getmaxCodedExtent();
            (result.maxCodedExtent)=deserialize_struct(temp);
            }();
[&](){(result.maxDpbSlots)=reader.getmaxDpbSlots();}();
[&](){(result.maxActiveReferencePictures)=reader.getmaxActiveReferencePictures();}();
[&](){
            auto temp=reader.getstdHeaderVersion();
            (result.stdHeaderVersion)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkVideoCapabilitiesKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkVideoCapabilitiesKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkVideoSessionMemoryRequirementsKHR::Builder& builder, VkVideoSessionMemoryRequirementsKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setmemoryBindIndex((member.memoryBindIndex));}();
[&](){
            auto temp=builder.initmemoryRequirements(memoryRequirements);
            return serialize_struct((member.memoryRequirements), temp);
            }();
}

    VkVideoSessionMemoryRequirementsKHR deserialize_struct(VkVideoSessionMemoryRequirementsKHR::Reader reader){
        auto result=VkVideoSessionMemoryRequirementsKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.memoryBindIndex)=reader.getmemoryBindIndex();}();
[&](){
            auto temp=reader.getmemoryRequirements();
            (result.memoryRequirements)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkVideoSessionMemoryRequirementsKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkVideoSessionMemoryRequirementsKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkBindVideoSessionMemoryInfoKHR::Builder& builder, VkBindVideoSessionMemoryInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setmemoryBindIndex((member.memoryBindIndex));}();
[&](){return builder.setmemory(serialize_handle(member.memory));}();
[&](){[&](){return builder.setmemoryOffset((member.memoryOffset));}();}();
[&](){[&](){return builder.setmemorySize((member.memorySize));}();}();
}

    VkBindVideoSessionMemoryInfoKHR deserialize_struct(VkBindVideoSessionMemoryInfoKHR::Reader reader){
        auto result=VkBindVideoSessionMemoryInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.memoryBindIndex)=reader.getmemoryBindIndex();}();
[&](){(result.memory)=deserialize_handle(reader.getmemory());}();
[&](){[&](){(result.memoryOffset)=reader.getmemoryOffset();}();}();
[&](){[&](){(result.memorySize)=reader.getmemorySize();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkBindVideoSessionMemoryInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkBindVideoSessionMemoryInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkVideoPictureResourceInfoKHR::Builder& builder, VkVideoPictureResourceInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            auto temp=builder.initcodedOffset(codedOffset);
            return serialize_struct((member.codedOffset), temp);
            }();
[&](){
            auto temp=builder.initcodedExtent(codedExtent);
            return serialize_struct((member.codedExtent), temp);
            }();
[&](){return builder.setbaseArrayLayer((member.baseArrayLayer));}();
[&](){return builder.setimageViewBinding(serialize_handle(member.imageViewBinding));}();
}

    VkVideoPictureResourceInfoKHR deserialize_struct(VkVideoPictureResourceInfoKHR::Reader reader){
        auto result=VkVideoPictureResourceInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){
            auto temp=reader.getcodedOffset();
            (result.codedOffset)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getcodedExtent();
            (result.codedExtent)=deserialize_struct(temp);
            }();
[&](){(result.baseArrayLayer)=reader.getbaseArrayLayer();}();
[&](){(result.imageViewBinding)=deserialize_handle(reader.getimageViewBinding());}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkVideoPictureResourceInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkVideoPictureResourceInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkVideoReferenceSlotInfoKHR::Builder& builder, VkVideoReferenceSlotInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setslotIndex((member.slotIndex));}();
[&](){
            if ((member.pPictureResource)==NULL){
                builder.disownpPictureResource();
            return; }
        auto proto_arr=builder.initpPictureResource();
        for(int evqJarY=0; evqJarY < 1; evqJarY++){
            [&](){
            auto temp=proto_arr[evqJarY];
            return serialize_struct(((member.pPictureResource)[evqJarY]), temp);
            }();
        }
        }();
}

    VkVideoReferenceSlotInfoKHR deserialize_struct(VkVideoReferenceSlotInfoKHR::Reader reader){
        auto result=VkVideoReferenceSlotInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.slotIndex)=reader.getslotIndex();}();
[&](){ VkVideoPictureResourceInfoKHR* temp_RcpzVVQ[&](){
            if (!reader.haspPictureResource()){
                (result.pPictureResource)=NULL;
            return; }{native_concat()}=(VkVideoPictureResourceInfoKHR*)malloc(1*sizeof(VkVideoPictureResourceInfoKHR));
        auto proto_arr=reader.getpPictureResource(1);
        for(int WoaGUEX=0; WoaGUEX < 1; WoaGUEX++){
            [&](){
            auto temp=proto_arr[WoaGUEX];
            ((result.pPictureResource)[WoaGUEX])=deserialize_struct(temp);
            }();
        }
        }();(result.pPictureResource)=temp_RcpzVVQ;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkVideoReferenceSlotInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkVideoReferenceSlotInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkVideoDecodeCapabilitiesKHR::Builder& builder, VkVideoDecodeCapabilitiesKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
}

    VkVideoDecodeCapabilitiesKHR deserialize_struct(VkVideoDecodeCapabilitiesKHR::Reader reader){
        auto result=VkVideoDecodeCapabilitiesKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkVideoDecodeCapabilitiesKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkVideoDecodeCapabilitiesKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkVideoDecodeUsageInfoKHR::Builder& builder, VkVideoDecodeUsageInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setvideoUsageHints((member.videoUsageHints));}();}();}();
}

    VkVideoDecodeUsageInfoKHR deserialize_struct(VkVideoDecodeUsageInfoKHR::Reader reader){
        auto result=VkVideoDecodeUsageInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.videoUsageHints)=reader.getvideoUsageHints();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkVideoDecodeUsageInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkVideoDecodeUsageInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkVideoDecodeInfoKHR::Builder& builder, VkVideoDecodeInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){return builder.setsrcBuffer(serialize_handle(member.srcBuffer));}();
[&](){[&](){return builder.setsrcBufferOffset((member.srcBufferOffset));}();}();
[&](){[&](){return builder.setsrcBufferRange((member.srcBufferRange));}();}();
[&](){
            auto temp=builder.initdstPictureResource(dstPictureResource);
            return serialize_struct((member.dstPictureResource), temp);
            }();
[&](){
            if ((member.pSetupReferenceSlot)==NULL){
                builder.disownpSetupReferenceSlot();
            return; }
        auto proto_arr=builder.initpSetupReferenceSlot();
        for(int MYiEGbW=0; MYiEGbW < 1; MYiEGbW++){
            [&](){
            auto temp=proto_arr[MYiEGbW];
            return serialize_struct(((member.pSetupReferenceSlot)[MYiEGbW]), temp);
            }();
        }
        }();
[&](){return builder.setreferenceSlotCount((member.referenceSlotCount));}();
[&](){
            if ((member.pReferenceSlots)==NULL){
                builder.disownpReferenceSlots();
            return; }
        auto proto_arr=builder.initpReferenceSlots();
        for(int qhYgHtG=0; qhYgHtG < member.referenceSlotCount; qhYgHtG++){
            [&](){
            auto temp=proto_arr[qhYgHtG];
            return serialize_struct(((member.pReferenceSlots)[qhYgHtG]), temp);
            }();
        }
        }();
}

    VkVideoDecodeInfoKHR deserialize_struct(VkVideoDecodeInfoKHR::Reader reader){
        auto result=VkVideoDecodeInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){(result.srcBuffer)=deserialize_handle(reader.getsrcBuffer());}();
[&](){[&](){(result.srcBufferOffset)=reader.getsrcBufferOffset();}();}();
[&](){[&](){(result.srcBufferRange)=reader.getsrcBufferRange();}();}();
[&](){
            auto temp=reader.getdstPictureResource();
            (result.dstPictureResource)=deserialize_struct(temp);
            }();
[&](){ VkVideoReferenceSlotInfoKHR* temp_gTPLFDJ[&](){
            if (!reader.haspSetupReferenceSlot()){
                (result.pSetupReferenceSlot)=NULL;
            return; }{native_concat()}=(VkVideoReferenceSlotInfoKHR*)malloc(1*sizeof(VkVideoReferenceSlotInfoKHR));
        auto proto_arr=reader.getpSetupReferenceSlot(1);
        for(int wXzHASH=0; wXzHASH < 1; wXzHASH++){
            [&](){
            auto temp=proto_arr[wXzHASH];
            ((result.pSetupReferenceSlot)[wXzHASH])=deserialize_struct(temp);
            }();
        }
        }();(result.pSetupReferenceSlot)=temp_gTPLFDJ;}();
[&](){(result.referenceSlotCount)=reader.getreferenceSlotCount();}();
[&](){ VkVideoReferenceSlotInfoKHR* temp_EbPkpwd[&](){
            if (!reader.haspReferenceSlots()){
                (result.pReferenceSlots)=NULL;
            return; }{native_concat()}=(VkVideoReferenceSlotInfoKHR*)malloc(result.referenceSlotCount*sizeof(VkVideoReferenceSlotInfoKHR));
        auto proto_arr=reader.getpReferenceSlots(result.referenceSlotCount);
        for(int fqLTYsR=0; fqLTYsR < result.referenceSlotCount; fqLTYsR++){
            [&](){
            auto temp=proto_arr[fqLTYsR];
            ((result.pReferenceSlots)[fqLTYsR])=deserialize_struct(temp);
            }();
        }
        }();(result.pReferenceSlots)=temp_EbPkpwd;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkVideoDecodeInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkVideoDecodeInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkVideoDecodeH264ProfileInfoKHR::Builder& builder, VkVideoDecodeH264ProfileInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){builder.setstdProfileIdc((uintptr_t)(member.stdProfileIdc));}();
[&](){[&](){[&](){return builder.setpictureLayout((member.pictureLayout));}();}();}();
}

    VkVideoDecodeH264ProfileInfoKHR deserialize_struct(VkVideoDecodeH264ProfileInfoKHR::Reader reader){
        auto result=VkVideoDecodeH264ProfileInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.stdProfileIdc)=(uintptr_t)reader.getstdProfileIdc();}();
[&](){[&](){[&](){(result.pictureLayout)=reader.getpictureLayout();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkVideoDecodeH264ProfileInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkVideoDecodeH264ProfileInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkVideoDecodeH264CapabilitiesKHR::Builder& builder, VkVideoDecodeH264CapabilitiesKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){builder.setmaxLevelIdc((uintptr_t)(member.maxLevelIdc));}();
[&](){
            auto temp=builder.initfieldOffsetGranularity(fieldOffsetGranularity);
            return serialize_struct((member.fieldOffsetGranularity), temp);
            }();
}

    VkVideoDecodeH264CapabilitiesKHR deserialize_struct(VkVideoDecodeH264CapabilitiesKHR::Reader reader){
        auto result=VkVideoDecodeH264CapabilitiesKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.maxLevelIdc)=(uintptr_t)reader.getmaxLevelIdc();}();
[&](){
            auto temp=reader.getfieldOffsetGranularity();
            (result.fieldOffsetGranularity)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkVideoDecodeH264CapabilitiesKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkVideoDecodeH264CapabilitiesKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkVideoDecodeH264SessionParametersAddInfoKHR::Builder& builder, VkVideoDecodeH264SessionParametersAddInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setstdSPSCount((member.stdSPSCount));}();
[&](){
            if ((member.pStdSPSs)==NULL){
                builder.disownpStdSPSs();
            return; }builder.setpStdSPSs((uintptr_t)(member.pStdSPSs));}();
[&](){return builder.setstdPPSCount((member.stdPPSCount));}();
[&](){
            if ((member.pStdPPSs)==NULL){
                builder.disownpStdPPSs();
            return; }builder.setpStdPPSs((uintptr_t)(member.pStdPPSs));}();
}

    VkVideoDecodeH264SessionParametersAddInfoKHR deserialize_struct(VkVideoDecodeH264SessionParametersAddInfoKHR::Reader reader){
        auto result=VkVideoDecodeH264SessionParametersAddInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.stdSPSCount)=reader.getstdSPSCount();}();
[&](){ StdVideoH264SequenceParameterSet* temp_dqnFfFo[&](){
            if (!reader.haspStdSPSs()){
                (result.pStdSPSs)=NULL;
            return; }(result.pStdSPSs)=(uintptr_t)reader.getpStdSPSs();}();(result.pStdSPSs)=temp_dqnFfFo;}();
[&](){(result.stdPPSCount)=reader.getstdPPSCount();}();
[&](){ StdVideoH264PictureParameterSet* temp_dYWGmCm[&](){
            if (!reader.haspStdPPSs()){
                (result.pStdPPSs)=NULL;
            return; }(result.pStdPPSs)=(uintptr_t)reader.getpStdPPSs();}();(result.pStdPPSs)=temp_dYWGmCm;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkVideoDecodeH264SessionParametersAddInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkVideoDecodeH264SessionParametersAddInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkVideoDecodeH264SessionParametersCreateInfoKHR::Builder& builder, VkVideoDecodeH264SessionParametersCreateInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setmaxStdSPSCount((member.maxStdSPSCount));}();
[&](){return builder.setmaxStdPPSCount((member.maxStdPPSCount));}();
[&](){
            if ((member.pParametersAddInfo)==NULL){
                builder.disownpParametersAddInfo();
            return; }
        auto proto_arr=builder.initpParametersAddInfo();
        for(int zjiJYDr=0; zjiJYDr < 1; zjiJYDr++){
            [&](){
            auto temp=proto_arr[zjiJYDr];
            return serialize_struct(((member.pParametersAddInfo)[zjiJYDr]), temp);
            }();
        }
        }();
}

    VkVideoDecodeH264SessionParametersCreateInfoKHR deserialize_struct(VkVideoDecodeH264SessionParametersCreateInfoKHR::Reader reader){
        auto result=VkVideoDecodeH264SessionParametersCreateInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.maxStdSPSCount)=reader.getmaxStdSPSCount();}();
[&](){(result.maxStdPPSCount)=reader.getmaxStdPPSCount();}();
[&](){ VkVideoDecodeH264SessionParametersAddInfoKHR* temp_WinEbhG[&](){
            if (!reader.haspParametersAddInfo()){
                (result.pParametersAddInfo)=NULL;
            return; }{native_concat()}=(VkVideoDecodeH264SessionParametersAddInfoKHR*)malloc(1*sizeof(VkVideoDecodeH264SessionParametersAddInfoKHR));
        auto proto_arr=reader.getpParametersAddInfo(1);
        for(int wOtWEgo=0; wOtWEgo < 1; wOtWEgo++){
            [&](){
            auto temp=proto_arr[wOtWEgo];
            ((result.pParametersAddInfo)[wOtWEgo])=deserialize_struct(temp);
            }();
        }
        }();(result.pParametersAddInfo)=temp_WinEbhG;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkVideoDecodeH264SessionParametersCreateInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkVideoDecodeH264SessionParametersCreateInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkVideoDecodeH264PictureInfoKHR::Builder& builder, VkVideoDecodeH264PictureInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            if ((member.pStdPictureInfo)==NULL){
                builder.disownpStdPictureInfo();
            return; }builder.setpStdPictureInfo((uintptr_t)(member.pStdPictureInfo));}();
[&](){return builder.setsliceCount((member.sliceCount));}();
[&](){
            if ((member.pSliceOffsets)==NULL){
                builder.disownpSliceOffsets();
            return; }
        auto proto_arr=builder.initpSliceOffsets();
        for(int EGgLcXn=0; EGgLcXn < member.sliceCount; EGgLcXn++){
            [&](){return proto_arr.set(EGgLcXn,((member.pSliceOffsets)[EGgLcXn]));}();
        }
        }();
}

    VkVideoDecodeH264PictureInfoKHR deserialize_struct(VkVideoDecodeH264PictureInfoKHR::Reader reader){
        auto result=VkVideoDecodeH264PictureInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){ StdVideoDecodeH264PictureInfo* temp_qpvDkWK[&](){
            if (!reader.haspStdPictureInfo()){
                (result.pStdPictureInfo)=NULL;
            return; }(result.pStdPictureInfo)=(uintptr_t)reader.getpStdPictureInfo();}();(result.pStdPictureInfo)=temp_qpvDkWK;}();
[&](){(result.sliceCount)=reader.getsliceCount();}();
[&](){ uint32_t* temp_iaNUVWb[&](){
            if (!reader.haspSliceOffsets()){
                (result.pSliceOffsets)=NULL;
            return; }{native_concat()}=(uint32_t*)malloc(result.sliceCount*sizeof(uint32_t));
        auto proto_arr=reader.getpSliceOffsets(result.sliceCount);
        for(int KicFNTx=0; KicFNTx < result.sliceCount; KicFNTx++){
            [&](){((result.pSliceOffsets)[KicFNTx])=proto_arr[KicFNTx];}();
        }
        }();(result.pSliceOffsets)=temp_iaNUVWb;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkVideoDecodeH264PictureInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkVideoDecodeH264PictureInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkVideoDecodeH264DpbSlotInfoKHR::Builder& builder, VkVideoDecodeH264DpbSlotInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            if ((member.pStdReferenceInfo)==NULL){
                builder.disownpStdReferenceInfo();
            return; }builder.setpStdReferenceInfo((uintptr_t)(member.pStdReferenceInfo));}();
}

    VkVideoDecodeH264DpbSlotInfoKHR deserialize_struct(VkVideoDecodeH264DpbSlotInfoKHR::Reader reader){
        auto result=VkVideoDecodeH264DpbSlotInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){ StdVideoDecodeH264ReferenceInfo* temp_PbZvQmC[&](){
            if (!reader.haspStdReferenceInfo()){
                (result.pStdReferenceInfo)=NULL;
            return; }(result.pStdReferenceInfo)=(uintptr_t)reader.getpStdReferenceInfo();}();(result.pStdReferenceInfo)=temp_PbZvQmC;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkVideoDecodeH264DpbSlotInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkVideoDecodeH264DpbSlotInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkVideoDecodeH265ProfileInfoKHR::Builder& builder, VkVideoDecodeH265ProfileInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){builder.setstdProfileIdc((uintptr_t)(member.stdProfileIdc));}();
}

    VkVideoDecodeH265ProfileInfoKHR deserialize_struct(VkVideoDecodeH265ProfileInfoKHR::Reader reader){
        auto result=VkVideoDecodeH265ProfileInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.stdProfileIdc)=(uintptr_t)reader.getstdProfileIdc();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkVideoDecodeH265ProfileInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkVideoDecodeH265ProfileInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkVideoDecodeH265CapabilitiesKHR::Builder& builder, VkVideoDecodeH265CapabilitiesKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){builder.setmaxLevelIdc((uintptr_t)(member.maxLevelIdc));}();
}

    VkVideoDecodeH265CapabilitiesKHR deserialize_struct(VkVideoDecodeH265CapabilitiesKHR::Reader reader){
        auto result=VkVideoDecodeH265CapabilitiesKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.maxLevelIdc)=(uintptr_t)reader.getmaxLevelIdc();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkVideoDecodeH265CapabilitiesKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkVideoDecodeH265CapabilitiesKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkVideoDecodeH265SessionParametersAddInfoKHR::Builder& builder, VkVideoDecodeH265SessionParametersAddInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setstdVPSCount((member.stdVPSCount));}();
[&](){
            if ((member.pStdVPSs)==NULL){
                builder.disownpStdVPSs();
            return; }builder.setpStdVPSs((uintptr_t)(member.pStdVPSs));}();
[&](){return builder.setstdSPSCount((member.stdSPSCount));}();
[&](){
            if ((member.pStdSPSs)==NULL){
                builder.disownpStdSPSs();
            return; }builder.setpStdSPSs((uintptr_t)(member.pStdSPSs));}();
[&](){return builder.setstdPPSCount((member.stdPPSCount));}();
[&](){
            if ((member.pStdPPSs)==NULL){
                builder.disownpStdPPSs();
            return; }builder.setpStdPPSs((uintptr_t)(member.pStdPPSs));}();
}

    VkVideoDecodeH265SessionParametersAddInfoKHR deserialize_struct(VkVideoDecodeH265SessionParametersAddInfoKHR::Reader reader){
        auto result=VkVideoDecodeH265SessionParametersAddInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.stdVPSCount)=reader.getstdVPSCount();}();
[&](){ StdVideoH265VideoParameterSet* temp_naBOKnC[&](){
            if (!reader.haspStdVPSs()){
                (result.pStdVPSs)=NULL;
            return; }(result.pStdVPSs)=(uintptr_t)reader.getpStdVPSs();}();(result.pStdVPSs)=temp_naBOKnC;}();
[&](){(result.stdSPSCount)=reader.getstdSPSCount();}();
[&](){ StdVideoH265SequenceParameterSet* temp_eVfMKnS[&](){
            if (!reader.haspStdSPSs()){
                (result.pStdSPSs)=NULL;
            return; }(result.pStdSPSs)=(uintptr_t)reader.getpStdSPSs();}();(result.pStdSPSs)=temp_eVfMKnS;}();
[&](){(result.stdPPSCount)=reader.getstdPPSCount();}();
[&](){ StdVideoH265PictureParameterSet* temp_eYnhpbZ[&](){
            if (!reader.haspStdPPSs()){
                (result.pStdPPSs)=NULL;
            return; }(result.pStdPPSs)=(uintptr_t)reader.getpStdPPSs();}();(result.pStdPPSs)=temp_eYnhpbZ;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkVideoDecodeH265SessionParametersAddInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkVideoDecodeH265SessionParametersAddInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkVideoDecodeH265SessionParametersCreateInfoKHR::Builder& builder, VkVideoDecodeH265SessionParametersCreateInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setmaxStdVPSCount((member.maxStdVPSCount));}();
[&](){return builder.setmaxStdSPSCount((member.maxStdSPSCount));}();
[&](){return builder.setmaxStdPPSCount((member.maxStdPPSCount));}();
[&](){
            if ((member.pParametersAddInfo)==NULL){
                builder.disownpParametersAddInfo();
            return; }
        auto proto_arr=builder.initpParametersAddInfo();
        for(int IoqzVQV=0; IoqzVQV < 1; IoqzVQV++){
            [&](){
            auto temp=proto_arr[IoqzVQV];
            return serialize_struct(((member.pParametersAddInfo)[IoqzVQV]), temp);
            }();
        }
        }();
}

    VkVideoDecodeH265SessionParametersCreateInfoKHR deserialize_struct(VkVideoDecodeH265SessionParametersCreateInfoKHR::Reader reader){
        auto result=VkVideoDecodeH265SessionParametersCreateInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.maxStdVPSCount)=reader.getmaxStdVPSCount();}();
[&](){(result.maxStdSPSCount)=reader.getmaxStdSPSCount();}();
[&](){(result.maxStdPPSCount)=reader.getmaxStdPPSCount();}();
[&](){ VkVideoDecodeH265SessionParametersAddInfoKHR* temp_nDENJWV[&](){
            if (!reader.haspParametersAddInfo()){
                (result.pParametersAddInfo)=NULL;
            return; }{native_concat()}=(VkVideoDecodeH265SessionParametersAddInfoKHR*)malloc(1*sizeof(VkVideoDecodeH265SessionParametersAddInfoKHR));
        auto proto_arr=reader.getpParametersAddInfo(1);
        for(int SZNcaCU=0; SZNcaCU < 1; SZNcaCU++){
            [&](){
            auto temp=proto_arr[SZNcaCU];
            ((result.pParametersAddInfo)[SZNcaCU])=deserialize_struct(temp);
            }();
        }
        }();(result.pParametersAddInfo)=temp_nDENJWV;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkVideoDecodeH265SessionParametersCreateInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkVideoDecodeH265SessionParametersCreateInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkVideoDecodeH265PictureInfoKHR::Builder& builder, VkVideoDecodeH265PictureInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            if ((member.pStdPictureInfo)==NULL){
                builder.disownpStdPictureInfo();
            return; }builder.setpStdPictureInfo((uintptr_t)(member.pStdPictureInfo));}();
[&](){return builder.setsliceSegmentCount((member.sliceSegmentCount));}();
[&](){
            if ((member.pSliceSegmentOffsets)==NULL){
                builder.disownpSliceSegmentOffsets();
            return; }
        auto proto_arr=builder.initpSliceSegmentOffsets();
        for(int YXObous=0; YXObous < member.sliceSegmentCount; YXObous++){
            [&](){return proto_arr.set(YXObous,((member.pSliceSegmentOffsets)[YXObous]));}();
        }
        }();
}

    VkVideoDecodeH265PictureInfoKHR deserialize_struct(VkVideoDecodeH265PictureInfoKHR::Reader reader){
        auto result=VkVideoDecodeH265PictureInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){ StdVideoDecodeH265PictureInfo* temp_bcpKudK[&](){
            if (!reader.haspStdPictureInfo()){
                (result.pStdPictureInfo)=NULL;
            return; }(result.pStdPictureInfo)=(uintptr_t)reader.getpStdPictureInfo();}();(result.pStdPictureInfo)=temp_bcpKudK;}();
[&](){(result.sliceSegmentCount)=reader.getsliceSegmentCount();}();
[&](){ uint32_t* temp_sPLCWQo[&](){
            if (!reader.haspSliceSegmentOffsets()){
                (result.pSliceSegmentOffsets)=NULL;
            return; }{native_concat()}=(uint32_t*)malloc(result.sliceSegmentCount*sizeof(uint32_t));
        auto proto_arr=reader.getpSliceSegmentOffsets(result.sliceSegmentCount);
        for(int bIoEGZU=0; bIoEGZU < result.sliceSegmentCount; bIoEGZU++){
            [&](){((result.pSliceSegmentOffsets)[bIoEGZU])=proto_arr[bIoEGZU];}();
        }
        }();(result.pSliceSegmentOffsets)=temp_sPLCWQo;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkVideoDecodeH265PictureInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkVideoDecodeH265PictureInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkVideoDecodeH265DpbSlotInfoKHR::Builder& builder, VkVideoDecodeH265DpbSlotInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            if ((member.pStdReferenceInfo)==NULL){
                builder.disownpStdReferenceInfo();
            return; }builder.setpStdReferenceInfo((uintptr_t)(member.pStdReferenceInfo));}();
}

    VkVideoDecodeH265DpbSlotInfoKHR deserialize_struct(VkVideoDecodeH265DpbSlotInfoKHR::Reader reader){
        auto result=VkVideoDecodeH265DpbSlotInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){ StdVideoDecodeH265ReferenceInfo* temp_ZuBuGOK[&](){
            if (!reader.haspStdReferenceInfo()){
                (result.pStdReferenceInfo)=NULL;
            return; }(result.pStdReferenceInfo)=(uintptr_t)reader.getpStdReferenceInfo();}();(result.pStdReferenceInfo)=temp_ZuBuGOK;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkVideoDecodeH265DpbSlotInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkVideoDecodeH265DpbSlotInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkVideoSessionCreateInfoKHR::Builder& builder, VkVideoSessionCreateInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setqueueFamilyIndex((member.queueFamilyIndex));}();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){
            if ((member.pVideoProfile)==NULL){
                builder.disownpVideoProfile();
            return; }
        auto proto_arr=builder.initpVideoProfile();
        for(int bzdcboe=0; bzdcboe < 1; bzdcboe++){
            [&](){
            auto temp=proto_arr[bzdcboe];
            return serialize_struct(((member.pVideoProfile)[bzdcboe]), temp);
            }();
        }
        }();
[&](){[&](){[&](){return builder.setpictureFormat((member.pictureFormat));}();}();}();
[&](){
            auto temp=builder.initmaxCodedExtent(maxCodedExtent);
            return serialize_struct((member.maxCodedExtent), temp);
            }();
[&](){[&](){[&](){return builder.setreferencePictureFormat((member.referencePictureFormat));}();}();}();
[&](){return builder.setmaxDpbSlots((member.maxDpbSlots));}();
[&](){return builder.setmaxActiveReferencePictures((member.maxActiveReferencePictures));}();
[&](){
            if ((member.pStdHeaderVersion)==NULL){
                builder.disownpStdHeaderVersion();
            return; }
        auto proto_arr=builder.initpStdHeaderVersion();
        for(int UonLNWm=0; UonLNWm < 1; UonLNWm++){
            [&](){
            auto temp=proto_arr[UonLNWm];
            return serialize_struct(((member.pStdHeaderVersion)[UonLNWm]), temp);
            }();
        }
        }();
}

    VkVideoSessionCreateInfoKHR deserialize_struct(VkVideoSessionCreateInfoKHR::Reader reader){
        auto result=VkVideoSessionCreateInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.queueFamilyIndex)=reader.getqueueFamilyIndex();}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){ VkVideoProfileInfoKHR* temp_CEmjoqs[&](){
            if (!reader.haspVideoProfile()){
                (result.pVideoProfile)=NULL;
            return; }{native_concat()}=(VkVideoProfileInfoKHR*)malloc(1*sizeof(VkVideoProfileInfoKHR));
        auto proto_arr=reader.getpVideoProfile(1);
        for(int SupZTTs=0; SupZTTs < 1; SupZTTs++){
            [&](){
            auto temp=proto_arr[SupZTTs];
            ((result.pVideoProfile)[SupZTTs])=deserialize_struct(temp);
            }();
        }
        }();(result.pVideoProfile)=temp_CEmjoqs;}();
[&](){[&](){[&](){(result.pictureFormat)=reader.getpictureFormat();}();}();}();
[&](){
            auto temp=reader.getmaxCodedExtent();
            (result.maxCodedExtent)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.referencePictureFormat)=reader.getreferencePictureFormat();}();}();}();
[&](){(result.maxDpbSlots)=reader.getmaxDpbSlots();}();
[&](){(result.maxActiveReferencePictures)=reader.getmaxActiveReferencePictures();}();
[&](){ VkExtensionProperties* temp_bgSJaQk[&](){
            if (!reader.haspStdHeaderVersion()){
                (result.pStdHeaderVersion)=NULL;
            return; }{native_concat()}=(VkExtensionProperties*)malloc(1*sizeof(VkExtensionProperties));
        auto proto_arr=reader.getpStdHeaderVersion(1);
        for(int AoXHhyO=0; AoXHhyO < 1; AoXHhyO++){
            [&](){
            auto temp=proto_arr[AoXHhyO];
            ((result.pStdHeaderVersion)[AoXHhyO])=deserialize_struct(temp);
            }();
        }
        }();(result.pStdHeaderVersion)=temp_bgSJaQk;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkVideoSessionCreateInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkVideoSessionCreateInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkVideoSessionParametersCreateInfoKHR::Builder& builder, VkVideoSessionParametersCreateInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){return builder.setvideoSessionParametersTemplate(serialize_handle(member.videoSessionParametersTemplate));}();
[&](){return builder.setvideoSession(serialize_handle(member.videoSession));}();
}

    VkVideoSessionParametersCreateInfoKHR deserialize_struct(VkVideoSessionParametersCreateInfoKHR::Reader reader){
        auto result=VkVideoSessionParametersCreateInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){(result.videoSessionParametersTemplate)=deserialize_handle(reader.getvideoSessionParametersTemplate());}();
[&](){(result.videoSession)=deserialize_handle(reader.getvideoSession());}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkVideoSessionParametersCreateInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkVideoSessionParametersCreateInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkVideoSessionParametersUpdateInfoKHR::Builder& builder, VkVideoSessionParametersUpdateInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setupdateSequenceCount((member.updateSequenceCount));}();
}

    VkVideoSessionParametersUpdateInfoKHR deserialize_struct(VkVideoSessionParametersUpdateInfoKHR::Reader reader){
        auto result=VkVideoSessionParametersUpdateInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.updateSequenceCount)=reader.getupdateSequenceCount();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkVideoSessionParametersUpdateInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkVideoSessionParametersUpdateInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkVideoBeginCodingInfoKHR::Builder& builder, VkVideoBeginCodingInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){return builder.setvideoSession(serialize_handle(member.videoSession));}();
[&](){return builder.setvideoSessionParameters(serialize_handle(member.videoSessionParameters));}();
[&](){return builder.setreferenceSlotCount((member.referenceSlotCount));}();
[&](){
            if ((member.pReferenceSlots)==NULL){
                builder.disownpReferenceSlots();
            return; }
        auto proto_arr=builder.initpReferenceSlots();
        for(int qhYgHtG=0; qhYgHtG < member.referenceSlotCount; qhYgHtG++){
            [&](){
            auto temp=proto_arr[qhYgHtG];
            return serialize_struct(((member.pReferenceSlots)[qhYgHtG]), temp);
            }();
        }
        }();
}

    VkVideoBeginCodingInfoKHR deserialize_struct(VkVideoBeginCodingInfoKHR::Reader reader){
        auto result=VkVideoBeginCodingInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){(result.videoSession)=deserialize_handle(reader.getvideoSession());}();
[&](){(result.videoSessionParameters)=deserialize_handle(reader.getvideoSessionParameters());}();
[&](){(result.referenceSlotCount)=reader.getreferenceSlotCount();}();
[&](){ VkVideoReferenceSlotInfoKHR* temp_EbPkpwd[&](){
            if (!reader.haspReferenceSlots()){
                (result.pReferenceSlots)=NULL;
            return; }{native_concat()}=(VkVideoReferenceSlotInfoKHR*)malloc(result.referenceSlotCount*sizeof(VkVideoReferenceSlotInfoKHR));
        auto proto_arr=reader.getpReferenceSlots(result.referenceSlotCount);
        for(int fqLTYsR=0; fqLTYsR < result.referenceSlotCount; fqLTYsR++){
            [&](){
            auto temp=proto_arr[fqLTYsR];
            ((result.pReferenceSlots)[fqLTYsR])=deserialize_struct(temp);
            }();
        }
        }();(result.pReferenceSlots)=temp_EbPkpwd;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkVideoBeginCodingInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkVideoBeginCodingInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkVideoEndCodingInfoKHR::Builder& builder, VkVideoEndCodingInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
}

    VkVideoEndCodingInfoKHR deserialize_struct(VkVideoEndCodingInfoKHR::Reader reader){
        auto result=VkVideoEndCodingInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkVideoEndCodingInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkVideoEndCodingInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkVideoCodingControlInfoKHR::Builder& builder, VkVideoCodingControlInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
}

    VkVideoCodingControlInfoKHR deserialize_struct(VkVideoCodingControlInfoKHR::Reader reader){
        auto result=VkVideoCodingControlInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkVideoCodingControlInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkVideoCodingControlInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceInheritedViewportScissorFeaturesNV::Builder& builder, VkPhysicalDeviceInheritedViewportScissorFeaturesNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setinheritedViewportScissor2D((member.inheritedViewportScissor2D));}();}();
}

    VkPhysicalDeviceInheritedViewportScissorFeaturesNV deserialize_struct(VkPhysicalDeviceInheritedViewportScissorFeaturesNV::Reader reader){
        auto result=VkPhysicalDeviceInheritedViewportScissorFeaturesNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.inheritedViewportScissor2D)=reader.getinheritedViewportScissor2D();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceInheritedViewportScissorFeaturesNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceInheritedViewportScissorFeaturesNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkCommandBufferInheritanceViewportScissorInfoNV::Builder& builder, VkCommandBufferInheritanceViewportScissorInfoNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setviewportScissor2D((member.viewportScissor2D));}();}();
[&](){return builder.setviewportDepthCount((member.viewportDepthCount));}();
[&](){
            if ((member.pViewportDepths)==NULL){
                builder.disownpViewportDepths();
            return; }
        auto proto_arr=builder.initpViewportDepths();
        for(int KFySZWi=0; KFySZWi < 1; KFySZWi++){
            [&](){
            auto temp=proto_arr[KFySZWi];
            return serialize_struct(((member.pViewportDepths)[KFySZWi]), temp);
            }();
        }
        }();
}

    VkCommandBufferInheritanceViewportScissorInfoNV deserialize_struct(VkCommandBufferInheritanceViewportScissorInfoNV::Reader reader){
        auto result=VkCommandBufferInheritanceViewportScissorInfoNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){(result.viewportScissor2D)=reader.getviewportScissor2D();}();}();
[&](){(result.viewportDepthCount)=reader.getviewportDepthCount();}();
[&](){ VkViewport* temp_CRBZiiw[&](){
            if (!reader.haspViewportDepths()){
                (result.pViewportDepths)=NULL;
            return; }{native_concat()}=(VkViewport*)malloc(1*sizeof(VkViewport));
        auto proto_arr=reader.getpViewportDepths(1);
        for(int TlLmxhB=0; TlLmxhB < 1; TlLmxhB++){
            [&](){
            auto temp=proto_arr[TlLmxhB];
            ((result.pViewportDepths)[TlLmxhB])=deserialize_struct(temp);
            }();
        }
        }();(result.pViewportDepths)=temp_CRBZiiw;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkCommandBufferInheritanceViewportScissorInfoNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkCommandBufferInheritanceViewportScissorInfoNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT::Builder& builder, VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setycbcr2plane444Formats((member.ycbcr2plane444Formats));}();}();
}

    VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT deserialize_struct(VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.ycbcr2plane444Formats)=reader.getycbcr2plane444Formats();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceProvokingVertexFeaturesEXT::Builder& builder, VkPhysicalDeviceProvokingVertexFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setprovokingVertexLast((member.provokingVertexLast));}();}();
[&](){[&](){return builder.settransformFeedbackPreservesProvokingVertex((member.transformFeedbackPreservesProvokingVertex));}();}();
}

    VkPhysicalDeviceProvokingVertexFeaturesEXT deserialize_struct(VkPhysicalDeviceProvokingVertexFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceProvokingVertexFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.provokingVertexLast)=reader.getprovokingVertexLast();}();}();
[&](){[&](){(result.transformFeedbackPreservesProvokingVertex)=reader.gettransformFeedbackPreservesProvokingVertex();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceProvokingVertexFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceProvokingVertexFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceProvokingVertexPropertiesEXT::Builder& builder, VkPhysicalDeviceProvokingVertexPropertiesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setprovokingVertexModePerPipeline((member.provokingVertexModePerPipeline));}();}();
[&](){[&](){return builder.settransformFeedbackPreservesTriangleFanProvokingVertex((member.transformFeedbackPreservesTriangleFanProvokingVertex));}();}();
}

    VkPhysicalDeviceProvokingVertexPropertiesEXT deserialize_struct(VkPhysicalDeviceProvokingVertexPropertiesEXT::Reader reader){
        auto result=VkPhysicalDeviceProvokingVertexPropertiesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.provokingVertexModePerPipeline)=reader.getprovokingVertexModePerPipeline();}();}();
[&](){[&](){(result.transformFeedbackPreservesTriangleFanProvokingVertex)=reader.gettransformFeedbackPreservesTriangleFanProvokingVertex();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceProvokingVertexPropertiesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceProvokingVertexPropertiesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineRasterizationProvokingVertexStateCreateInfoEXT::Builder& builder, VkPipelineRasterizationProvokingVertexStateCreateInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setprovokingVertexMode((member.provokingVertexMode));}();}();}();
}

    VkPipelineRasterizationProvokingVertexStateCreateInfoEXT deserialize_struct(VkPipelineRasterizationProvokingVertexStateCreateInfoEXT::Reader reader){
        auto result=VkPipelineRasterizationProvokingVertexStateCreateInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.provokingVertexMode)=reader.getprovokingVertexMode();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineRasterizationProvokingVertexStateCreateInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineRasterizationProvokingVertexStateCreateInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkCuModuleCreateInfoNVX::Builder& builder, VkCuModuleCreateInfoNVX member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setdataSize((member.dataSize));}();
[&](){
            if ((member.pData)==NULL){
                builder.disownpData();
            return; }[&](){
            if (((char*)(member.pData).pData)==NULL){
                builder.disownpData();
            return; }
        auto proto_arr=builder.initpData();
        for(int KUeyATI=0; KUeyATI < member.dataSize; KUeyATI++){
            [&](){return proto_arr.set(KUeyATI,(((char*)(member.pData).pData)[KUeyATI]));}();
        }
        }();}();
}

    VkCuModuleCreateInfoNVX deserialize_struct(VkCuModuleCreateInfoNVX::Reader reader){
        auto result=VkCuModuleCreateInfoNVX();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.dataSize)=reader.getdataSize();}();
[&](){ void* temp_RUIzmiy[&](){
            if (!reader.haspData()){
                (result.pData)=NULL;
            return; }char* temp_KoPqpjZ;[&](){
            if (!reader.haspData()){
                (temp_KoPqpjZ.pData)=NULL;
            return; }{native_concat()}=(char*)malloc(result.dataSize*sizeof(char));
        auto proto_arr=reader.getpData(result.dataSize);
        for(int OCmuZGI=0; OCmuZGI < result.dataSize; OCmuZGI++){
            [&](){((temp_KoPqpjZ.pData)[OCmuZGI])=proto_arr[OCmuZGI];}();
        }
        }();(result.pData)=temp_KoPqpjZ;}();(result.pData)=temp_RUIzmiy;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkCuModuleCreateInfoNVX member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkCuModuleCreateInfoNVX member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkCuFunctionCreateInfoNVX::Builder& builder, VkCuFunctionCreateInfoNVX member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setmodule(serialize_handle(member.module));}();
[&](){
            if ((member.pName)==NULL){
                builder.disownpName();
            return; }
        auto proto_arr=builder.initpName();
        for(int opTkazg=0; opTkazg < strlen((member.pName))+1; opTkazg++){
            [&](){return proto_arr.set(opTkazg,((member.pName)[opTkazg]));}();
        }
        }();
}

    VkCuFunctionCreateInfoNVX deserialize_struct(VkCuFunctionCreateInfoNVX::Reader reader){
        auto result=VkCuFunctionCreateInfoNVX();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.module)=deserialize_handle(reader.getmodule());}();
[&](){ char* temp_xDKNBiw[&](){
            if (!reader.haspName()){
                (result.pName)=NULL;
            return; }{native_concat()}=(char*)malloc(reader.getpName().size();*sizeof(char));
        auto proto_arr=reader.getpName(reader.getpName().size(););
        for(int zzMOHXu=0; zzMOHXu < reader.getpName().size();; zzMOHXu++){
            [&](){((result.pName)[zzMOHXu])=proto_arr[zzMOHXu];}();
        }
        }();(result.pName)=temp_xDKNBiw;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkCuFunctionCreateInfoNVX member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkCuFunctionCreateInfoNVX member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkCuLaunchInfoNVX::Builder& builder, VkCuLaunchInfoNVX member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setfunction(serialize_handle(member.function));}();
[&](){return builder.setgridDimX((member.gridDimX));}();
[&](){return builder.setgridDimY((member.gridDimY));}();
[&](){return builder.setgridDimZ((member.gridDimZ));}();
[&](){return builder.setblockDimX((member.blockDimX));}();
[&](){return builder.setblockDimY((member.blockDimY));}();
[&](){return builder.setblockDimZ((member.blockDimZ));}();
[&](){return builder.setsharedMemBytes((member.sharedMemBytes));}();
[&](){return builder.setparamCount((member.paramCount));}();
[&](){
            if ((member.pParams)==NULL){
                builder.disownpParams();
            return; }
        auto proto_arr=builder.initpParams();
        for(int bHZRMGd=0; bHZRMGd < member.paramCount; bHZRMGd++){
            [&](){
            if (((member.pParams)[bHZRMGd])==NULL){
                proto_arr.init(bHZRMGd);
            return; }[&](){
            if (((char*)((member.pParams)[bHZRMGd])[bHZRMGd])==NULL){
                proto_arr.init(bHZRMGd);
            return; }
        auto proto_arr=proto_arr[bHZRMGd];
        for(int sDEDPvj=0; sDEDPvj < strlen(((char*)((member.pParams)[bHZRMGd])[bHZRMGd]))+1; sDEDPvj++){
            [&](){return proto_arr.set(sDEDPvj,(((char*)((member.pParams)[bHZRMGd])[bHZRMGd])[sDEDPvj]));}();
        }
        }();}();
        }
        }();
[&](){return builder.setextraCount((member.extraCount));}();
[&](){
            if ((member.pExtras)==NULL){
                builder.disownpExtras();
            return; }
        auto proto_arr=builder.initpExtras();
        for(int qZYmIyj=0; qZYmIyj < member.extraCount; qZYmIyj++){
            [&](){
            if (((member.pExtras)[qZYmIyj])==NULL){
                proto_arr.init(qZYmIyj);
            return; }[&](){
            if (((char*)((member.pExtras)[qZYmIyj])[qZYmIyj])==NULL){
                proto_arr.init(qZYmIyj);
            return; }
        auto proto_arr=proto_arr[qZYmIyj];
        for(int MSLRWeC=0; MSLRWeC < strlen(((char*)((member.pExtras)[qZYmIyj])[qZYmIyj]))+1; MSLRWeC++){
            [&](){return proto_arr.set(MSLRWeC,(((char*)((member.pExtras)[qZYmIyj])[qZYmIyj])[MSLRWeC]));}();
        }
        }();}();
        }
        }();
}

    VkCuLaunchInfoNVX deserialize_struct(VkCuLaunchInfoNVX::Reader reader){
        auto result=VkCuLaunchInfoNVX();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.function)=deserialize_handle(reader.getfunction());}();
[&](){(result.gridDimX)=reader.getgridDimX();}();
[&](){(result.gridDimY)=reader.getgridDimY();}();
[&](){(result.gridDimZ)=reader.getgridDimZ();}();
[&](){(result.blockDimX)=reader.getblockDimX();}();
[&](){(result.blockDimY)=reader.getblockDimY();}();
[&](){(result.blockDimZ)=reader.getblockDimZ();}();
[&](){(result.sharedMemBytes)=reader.getsharedMemBytes();}();
[&](){(result.paramCount)=reader.getparamCount();}();
[&](){ void*  * temp_JgSRbZl[&](){
            if (!reader.haspParams()){
                (result.pParams)=NULL;
            return; }{native_concat()}=(void**)malloc(result.paramCount*sizeof(void*));
        auto proto_arr=reader.getpParams(result.paramCount);
        for(int cDEiPBr=0; cDEiPBr < result.paramCount; cDEiPBr++){
            [&](){
            if (!proto_arr[cDEiPBr].size){
                ((result.pParams)[cDEiPBr])=NULL;
            return; }char* temp_ilfkVLB;[&](){
            if (!proto_arr[cDEiPBr].size){
                (temp_ilfkVLB[cDEiPBr])=NULL;
            return; }{native_concat()}=(char*)malloc(proto_arr[cDEiPBr].size();*sizeof(char));
        auto proto_arr=proto_arr[cDEiPBr];
        for(int JdATHGc=0; JdATHGc < proto_arr[cDEiPBr].size();; JdATHGc++){
            [&](){((temp_ilfkVLB[cDEiPBr])[JdATHGc])=proto_arr[JdATHGc];}();
        }
        }();((result.pParams)[cDEiPBr])=temp_ilfkVLB;}();
        }
        }();(result.pParams)=temp_JgSRbZl;}();
[&](){(result.extraCount)=reader.getextraCount();}();
[&](){ void*  * temp_uZgtcph[&](){
            if (!reader.haspExtras()){
                (result.pExtras)=NULL;
            return; }{native_concat()}=(void**)malloc(result.extraCount*sizeof(void*));
        auto proto_arr=reader.getpExtras(result.extraCount);
        for(int NqvQMTa=0; NqvQMTa < result.extraCount; NqvQMTa++){
            [&](){
            if (!proto_arr[NqvQMTa].size){
                ((result.pExtras)[NqvQMTa])=NULL;
            return; }char* temp_pfmICcn;[&](){
            if (!proto_arr[NqvQMTa].size){
                (temp_pfmICcn[NqvQMTa])=NULL;
            return; }{native_concat()}=(char*)malloc(proto_arr[NqvQMTa].size();*sizeof(char));
        auto proto_arr=proto_arr[NqvQMTa];
        for(int jWwSwFD=0; jWwSwFD < proto_arr[NqvQMTa].size();; jWwSwFD++){
            [&](){((temp_pfmICcn[NqvQMTa])[jWwSwFD])=proto_arr[jWwSwFD];}();
        }
        }();((result.pExtras)[NqvQMTa])=temp_pfmICcn;}();
        }
        }();(result.pExtras)=temp_uZgtcph;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkCuLaunchInfoNVX member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkCuLaunchInfoNVX member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceDescriptorBufferFeaturesEXT::Builder& builder, VkPhysicalDeviceDescriptorBufferFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setdescriptorBuffer((member.descriptorBuffer));}();}();
[&](){[&](){return builder.setdescriptorBufferCaptureReplay((member.descriptorBufferCaptureReplay));}();}();
[&](){[&](){return builder.setdescriptorBufferImageLayoutIgnored((member.descriptorBufferImageLayoutIgnored));}();}();
[&](){[&](){return builder.setdescriptorBufferPushDescriptors((member.descriptorBufferPushDescriptors));}();}();
}

    VkPhysicalDeviceDescriptorBufferFeaturesEXT deserialize_struct(VkPhysicalDeviceDescriptorBufferFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceDescriptorBufferFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.descriptorBuffer)=reader.getdescriptorBuffer();}();}();
[&](){[&](){(result.descriptorBufferCaptureReplay)=reader.getdescriptorBufferCaptureReplay();}();}();
[&](){[&](){(result.descriptorBufferImageLayoutIgnored)=reader.getdescriptorBufferImageLayoutIgnored();}();}();
[&](){[&](){(result.descriptorBufferPushDescriptors)=reader.getdescriptorBufferPushDescriptors();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceDescriptorBufferFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceDescriptorBufferFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceDescriptorBufferPropertiesEXT::Builder& builder, VkPhysicalDeviceDescriptorBufferPropertiesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setcombinedImageSamplerDescriptorSingleArray((member.combinedImageSamplerDescriptorSingleArray));}();}();
[&](){[&](){return builder.setbufferlessPushDescriptors((member.bufferlessPushDescriptors));}();}();
[&](){[&](){return builder.setallowSamplerImageViewPostSubmitCreation((member.allowSamplerImageViewPostSubmitCreation));}();}();
[&](){[&](){return builder.setdescriptorBufferOffsetAlignment((member.descriptorBufferOffsetAlignment));}();}();
[&](){return builder.setmaxDescriptorBufferBindings((member.maxDescriptorBufferBindings));}();
[&](){return builder.setmaxResourceDescriptorBufferBindings((member.maxResourceDescriptorBufferBindings));}();
[&](){return builder.setmaxSamplerDescriptorBufferBindings((member.maxSamplerDescriptorBufferBindings));}();
[&](){return builder.setmaxEmbeddedImmutableSamplerBindings((member.maxEmbeddedImmutableSamplerBindings));}();
[&](){return builder.setmaxEmbeddedImmutableSamplers((member.maxEmbeddedImmutableSamplers));}();
[&](){return builder.setbufferCaptureReplayDescriptorDataSize((member.bufferCaptureReplayDescriptorDataSize));}();
[&](){return builder.setimageCaptureReplayDescriptorDataSize((member.imageCaptureReplayDescriptorDataSize));}();
[&](){return builder.setimageViewCaptureReplayDescriptorDataSize((member.imageViewCaptureReplayDescriptorDataSize));}();
[&](){return builder.setsamplerCaptureReplayDescriptorDataSize((member.samplerCaptureReplayDescriptorDataSize));}();
[&](){return builder.setaccelerationStructureCaptureReplayDescriptorDataSize((member.accelerationStructureCaptureReplayDescriptorDataSize));}();
[&](){return builder.setsamplerDescriptorSize((member.samplerDescriptorSize));}();
[&](){return builder.setcombinedImageSamplerDescriptorSize((member.combinedImageSamplerDescriptorSize));}();
[&](){return builder.setsampledImageDescriptorSize((member.sampledImageDescriptorSize));}();
[&](){return builder.setstorageImageDescriptorSize((member.storageImageDescriptorSize));}();
[&](){return builder.setuniformTexelBufferDescriptorSize((member.uniformTexelBufferDescriptorSize));}();
[&](){return builder.setrobustUniformTexelBufferDescriptorSize((member.robustUniformTexelBufferDescriptorSize));}();
[&](){return builder.setstorageTexelBufferDescriptorSize((member.storageTexelBufferDescriptorSize));}();
[&](){return builder.setrobustStorageTexelBufferDescriptorSize((member.robustStorageTexelBufferDescriptorSize));}();
[&](){return builder.setuniformBufferDescriptorSize((member.uniformBufferDescriptorSize));}();
[&](){return builder.setrobustUniformBufferDescriptorSize((member.robustUniformBufferDescriptorSize));}();
[&](){return builder.setstorageBufferDescriptorSize((member.storageBufferDescriptorSize));}();
[&](){return builder.setrobustStorageBufferDescriptorSize((member.robustStorageBufferDescriptorSize));}();
[&](){return builder.setinputAttachmentDescriptorSize((member.inputAttachmentDescriptorSize));}();
[&](){return builder.setaccelerationStructureDescriptorSize((member.accelerationStructureDescriptorSize));}();
[&](){[&](){return builder.setmaxSamplerDescriptorBufferRange((member.maxSamplerDescriptorBufferRange));}();}();
[&](){[&](){return builder.setmaxResourceDescriptorBufferRange((member.maxResourceDescriptorBufferRange));}();}();
[&](){[&](){return builder.setsamplerDescriptorBufferAddressSpaceSize((member.samplerDescriptorBufferAddressSpaceSize));}();}();
[&](){[&](){return builder.setresourceDescriptorBufferAddressSpaceSize((member.resourceDescriptorBufferAddressSpaceSize));}();}();
[&](){[&](){return builder.setdescriptorBufferAddressSpaceSize((member.descriptorBufferAddressSpaceSize));}();}();
}

    VkPhysicalDeviceDescriptorBufferPropertiesEXT deserialize_struct(VkPhysicalDeviceDescriptorBufferPropertiesEXT::Reader reader){
        auto result=VkPhysicalDeviceDescriptorBufferPropertiesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.combinedImageSamplerDescriptorSingleArray)=reader.getcombinedImageSamplerDescriptorSingleArray();}();}();
[&](){[&](){(result.bufferlessPushDescriptors)=reader.getbufferlessPushDescriptors();}();}();
[&](){[&](){(result.allowSamplerImageViewPostSubmitCreation)=reader.getallowSamplerImageViewPostSubmitCreation();}();}();
[&](){[&](){(result.descriptorBufferOffsetAlignment)=reader.getdescriptorBufferOffsetAlignment();}();}();
[&](){(result.maxDescriptorBufferBindings)=reader.getmaxDescriptorBufferBindings();}();
[&](){(result.maxResourceDescriptorBufferBindings)=reader.getmaxResourceDescriptorBufferBindings();}();
[&](){(result.maxSamplerDescriptorBufferBindings)=reader.getmaxSamplerDescriptorBufferBindings();}();
[&](){(result.maxEmbeddedImmutableSamplerBindings)=reader.getmaxEmbeddedImmutableSamplerBindings();}();
[&](){(result.maxEmbeddedImmutableSamplers)=reader.getmaxEmbeddedImmutableSamplers();}();
[&](){(result.bufferCaptureReplayDescriptorDataSize)=reader.getbufferCaptureReplayDescriptorDataSize();}();
[&](){(result.imageCaptureReplayDescriptorDataSize)=reader.getimageCaptureReplayDescriptorDataSize();}();
[&](){(result.imageViewCaptureReplayDescriptorDataSize)=reader.getimageViewCaptureReplayDescriptorDataSize();}();
[&](){(result.samplerCaptureReplayDescriptorDataSize)=reader.getsamplerCaptureReplayDescriptorDataSize();}();
[&](){(result.accelerationStructureCaptureReplayDescriptorDataSize)=reader.getaccelerationStructureCaptureReplayDescriptorDataSize();}();
[&](){(result.samplerDescriptorSize)=reader.getsamplerDescriptorSize();}();
[&](){(result.combinedImageSamplerDescriptorSize)=reader.getcombinedImageSamplerDescriptorSize();}();
[&](){(result.sampledImageDescriptorSize)=reader.getsampledImageDescriptorSize();}();
[&](){(result.storageImageDescriptorSize)=reader.getstorageImageDescriptorSize();}();
[&](){(result.uniformTexelBufferDescriptorSize)=reader.getuniformTexelBufferDescriptorSize();}();
[&](){(result.robustUniformTexelBufferDescriptorSize)=reader.getrobustUniformTexelBufferDescriptorSize();}();
[&](){(result.storageTexelBufferDescriptorSize)=reader.getstorageTexelBufferDescriptorSize();}();
[&](){(result.robustStorageTexelBufferDescriptorSize)=reader.getrobustStorageTexelBufferDescriptorSize();}();
[&](){(result.uniformBufferDescriptorSize)=reader.getuniformBufferDescriptorSize();}();
[&](){(result.robustUniformBufferDescriptorSize)=reader.getrobustUniformBufferDescriptorSize();}();
[&](){(result.storageBufferDescriptorSize)=reader.getstorageBufferDescriptorSize();}();
[&](){(result.robustStorageBufferDescriptorSize)=reader.getrobustStorageBufferDescriptorSize();}();
[&](){(result.inputAttachmentDescriptorSize)=reader.getinputAttachmentDescriptorSize();}();
[&](){(result.accelerationStructureDescriptorSize)=reader.getaccelerationStructureDescriptorSize();}();
[&](){[&](){(result.maxSamplerDescriptorBufferRange)=reader.getmaxSamplerDescriptorBufferRange();}();}();
[&](){[&](){(result.maxResourceDescriptorBufferRange)=reader.getmaxResourceDescriptorBufferRange();}();}();
[&](){[&](){(result.samplerDescriptorBufferAddressSpaceSize)=reader.getsamplerDescriptorBufferAddressSpaceSize();}();}();
[&](){[&](){(result.resourceDescriptorBufferAddressSpaceSize)=reader.getresourceDescriptorBufferAddressSpaceSize();}();}();
[&](){[&](){(result.descriptorBufferAddressSpaceSize)=reader.getdescriptorBufferAddressSpaceSize();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceDescriptorBufferPropertiesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceDescriptorBufferPropertiesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT::Builder& builder, VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setcombinedImageSamplerDensityMapDescriptorSize((member.combinedImageSamplerDensityMapDescriptorSize));}();
}

    VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT deserialize_struct(VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT::Reader reader){
        auto result=VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.combinedImageSamplerDensityMapDescriptorSize)=reader.getcombinedImageSamplerDensityMapDescriptorSize();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDescriptorAddressInfoEXT::Builder& builder, VkDescriptorAddressInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setaddress((member.address));}();}();
[&](){[&](){return builder.setrange((member.range));}();}();
[&](){[&](){[&](){return builder.setformat((member.format));}();}();}();
}

    VkDescriptorAddressInfoEXT deserialize_struct(VkDescriptorAddressInfoEXT::Reader reader){
        auto result=VkDescriptorAddressInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.address)=reader.getaddress();}();}();
[&](){[&](){(result.range)=reader.getrange();}();}();
[&](){[&](){[&](){(result.format)=reader.getformat();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDescriptorAddressInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDescriptorAddressInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDescriptorBufferBindingInfoEXT::Builder& builder, VkDescriptorBufferBindingInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setaddress((member.address));}();}();
[&](){[&](){[&](){return builder.setusage((member.usage));}();}();}();
}

    VkDescriptorBufferBindingInfoEXT deserialize_struct(VkDescriptorBufferBindingInfoEXT::Reader reader){
        auto result=VkDescriptorBufferBindingInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.address)=reader.getaddress();}();}();
[&](){[&](){[&](){(result.usage)=reader.getusage();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDescriptorBufferBindingInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDescriptorBufferBindingInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDescriptorBufferBindingPushDescriptorBufferHandleEXT::Builder& builder, VkDescriptorBufferBindingPushDescriptorBufferHandleEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setbuffer(serialize_handle(member.buffer));}();
}

    VkDescriptorBufferBindingPushDescriptorBufferHandleEXT deserialize_struct(VkDescriptorBufferBindingPushDescriptorBufferHandleEXT::Reader reader){
        auto result=VkDescriptorBufferBindingPushDescriptorBufferHandleEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.buffer)=deserialize_handle(reader.getbuffer());}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDescriptorBufferBindingPushDescriptorBufferHandleEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDescriptorBufferBindingPushDescriptorBufferHandleEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDescriptorDataEXT::Builder& builder, VkDescriptorDataEXT member){
        
    
[&](){
            if ((member.pSampler)==NULL){
                builder.disownpSampler();
            return; }
        auto proto_arr=builder.initpSampler();
        for(int RcemeEi=0; RcemeEi < 1; RcemeEi++){
            [&](){return proto_arr.set(RcemeEi,serialize_handle((member.pSampler)[RcemeEi]));}();
        }
        }();
[&](){
            if ((member.pCombinedImageSampler)==NULL){
                builder.disownpCombinedImageSampler();
            return; }
        auto proto_arr=builder.initpCombinedImageSampler();
        for(int bIddDFU=0; bIddDFU < 1; bIddDFU++){
            [&](){
            auto temp=proto_arr[bIddDFU];
            return serialize_struct(((member.pCombinedImageSampler)[bIddDFU]), temp);
            }();
        }
        }();
[&](){
            if ((member.pInputAttachmentImage)==NULL){
                builder.disownpInputAttachmentImage();
            return; }
        auto proto_arr=builder.initpInputAttachmentImage();
        for(int XGpUdoM=0; XGpUdoM < 1; XGpUdoM++){
            [&](){
            auto temp=proto_arr[XGpUdoM];
            return serialize_struct(((member.pInputAttachmentImage)[XGpUdoM]), temp);
            }();
        }
        }();
[&](){
            if ((member.pSampledImage)==NULL){
                builder.disownpSampledImage();
            return; }
        auto proto_arr=builder.initpSampledImage();
        for(int GYVkRpE=0; GYVkRpE < 1; GYVkRpE++){
            [&](){
            auto temp=proto_arr[GYVkRpE];
            return serialize_struct(((member.pSampledImage)[GYVkRpE]), temp);
            }();
        }
        }();
[&](){
            if ((member.pStorageImage)==NULL){
                builder.disownpStorageImage();
            return; }
        auto proto_arr=builder.initpStorageImage();
        for(int tQAXyuk=0; tQAXyuk < 1; tQAXyuk++){
            [&](){
            auto temp=proto_arr[tQAXyuk];
            return serialize_struct(((member.pStorageImage)[tQAXyuk]), temp);
            }();
        }
        }();
[&](){
            if ((member.pUniformTexelBuffer)==NULL){
                builder.disownpUniformTexelBuffer();
            return; }
        auto proto_arr=builder.initpUniformTexelBuffer();
        for(int zdWGhKu=0; zdWGhKu < 1; zdWGhKu++){
            [&](){
            auto temp=proto_arr[zdWGhKu];
            return serialize_struct(((member.pUniformTexelBuffer)[zdWGhKu]), temp);
            }();
        }
        }();
[&](){
            if ((member.pStorageTexelBuffer)==NULL){
                builder.disownpStorageTexelBuffer();
            return; }
        auto proto_arr=builder.initpStorageTexelBuffer();
        for(int djGqQAT=0; djGqQAT < 1; djGqQAT++){
            [&](){
            auto temp=proto_arr[djGqQAT];
            return serialize_struct(((member.pStorageTexelBuffer)[djGqQAT]), temp);
            }();
        }
        }();
[&](){
            if ((member.pUniformBuffer)==NULL){
                builder.disownpUniformBuffer();
            return; }
        auto proto_arr=builder.initpUniformBuffer();
        for(int BBFrOWx=0; BBFrOWx < 1; BBFrOWx++){
            [&](){
            auto temp=proto_arr[BBFrOWx];
            return serialize_struct(((member.pUniformBuffer)[BBFrOWx]), temp);
            }();
        }
        }();
[&](){
            if ((member.pStorageBuffer)==NULL){
                builder.disownpStorageBuffer();
            return; }
        auto proto_arr=builder.initpStorageBuffer();
        for(int byTbsmB=0; byTbsmB < 1; byTbsmB++){
            [&](){
            auto temp=proto_arr[byTbsmB];
            return serialize_struct(((member.pStorageBuffer)[byTbsmB]), temp);
            }();
        }
        }();
[&](){[&](){return builder.setaccelerationStructure((member.accelerationStructure));}();}();
}

    VkDescriptorDataEXT deserialize_struct(VkDescriptorDataEXT::Reader reader){
        auto result=VkDescriptorDataEXT();
    
[&](){ VkSampler* temp_mLUUZDO[&](){
            if (!reader.haspSampler()){
                (result.pSampler)=NULL;
            return; }{native_concat()}=(VkSampler*)malloc(1*sizeof(VkSampler));
        auto proto_arr=reader.getpSampler(1);
        for(int JbHkUhn=0; JbHkUhn < 1; JbHkUhn++){
            [&](){((result.pSampler)[JbHkUhn])=deserialize_handle(proto_arr[JbHkUhn]);}();
        }
        }();(result.pSampler)=temp_mLUUZDO;}();
[&](){ VkDescriptorImageInfo* temp_mkaSzbY[&](){
            if (!reader.haspCombinedImageSampler()){
                (result.pCombinedImageSampler)=NULL;
            return; }{native_concat()}=(VkDescriptorImageInfo*)malloc(1*sizeof(VkDescriptorImageInfo));
        auto proto_arr=reader.getpCombinedImageSampler(1);
        for(int ksnKPgj=0; ksnKPgj < 1; ksnKPgj++){
            [&](){
            auto temp=proto_arr[ksnKPgj];
            ((result.pCombinedImageSampler)[ksnKPgj])=deserialize_struct(temp);
            }();
        }
        }();(result.pCombinedImageSampler)=temp_mkaSzbY;}();
[&](){ VkDescriptorImageInfo* temp_SsiWQTq[&](){
            if (!reader.haspInputAttachmentImage()){
                (result.pInputAttachmentImage)=NULL;
            return; }{native_concat()}=(VkDescriptorImageInfo*)malloc(1*sizeof(VkDescriptorImageInfo));
        auto proto_arr=reader.getpInputAttachmentImage(1);
        for(int jCdsXYL=0; jCdsXYL < 1; jCdsXYL++){
            [&](){
            auto temp=proto_arr[jCdsXYL];
            ((result.pInputAttachmentImage)[jCdsXYL])=deserialize_struct(temp);
            }();
        }
        }();(result.pInputAttachmentImage)=temp_SsiWQTq;}();
[&](){ VkDescriptorImageInfo* temp_cXSmOFR[&](){
            if (!reader.haspSampledImage()){
                (result.pSampledImage)=NULL;
            return; }{native_concat()}=(VkDescriptorImageInfo*)malloc(1*sizeof(VkDescriptorImageInfo));
        auto proto_arr=reader.getpSampledImage(1);
        for(int peiDxWp=0; peiDxWp < 1; peiDxWp++){
            [&](){
            auto temp=proto_arr[peiDxWp];
            ((result.pSampledImage)[peiDxWp])=deserialize_struct(temp);
            }();
        }
        }();(result.pSampledImage)=temp_cXSmOFR;}();
[&](){ VkDescriptorImageInfo* temp_nzyLCXh[&](){
            if (!reader.haspStorageImage()){
                (result.pStorageImage)=NULL;
            return; }{native_concat()}=(VkDescriptorImageInfo*)malloc(1*sizeof(VkDescriptorImageInfo));
        auto proto_arr=reader.getpStorageImage(1);
        for(int DwQgfdS=0; DwQgfdS < 1; DwQgfdS++){
            [&](){
            auto temp=proto_arr[DwQgfdS];
            ((result.pStorageImage)[DwQgfdS])=deserialize_struct(temp);
            }();
        }
        }();(result.pStorageImage)=temp_nzyLCXh;}();
[&](){ VkDescriptorAddressInfoEXT* temp_kcYHBjY[&](){
            if (!reader.haspUniformTexelBuffer()){
                (result.pUniformTexelBuffer)=NULL;
            return; }{native_concat()}=(VkDescriptorAddressInfoEXT*)malloc(1*sizeof(VkDescriptorAddressInfoEXT));
        auto proto_arr=reader.getpUniformTexelBuffer(1);
        for(int xaarJir=0; xaarJir < 1; xaarJir++){
            [&](){
            auto temp=proto_arr[xaarJir];
            ((result.pUniformTexelBuffer)[xaarJir])=deserialize_struct(temp);
            }();
        }
        }();(result.pUniformTexelBuffer)=temp_kcYHBjY;}();
[&](){ VkDescriptorAddressInfoEXT* temp_vCLJhGF[&](){
            if (!reader.haspStorageTexelBuffer()){
                (result.pStorageTexelBuffer)=NULL;
            return; }{native_concat()}=(VkDescriptorAddressInfoEXT*)malloc(1*sizeof(VkDescriptorAddressInfoEXT));
        auto proto_arr=reader.getpStorageTexelBuffer(1);
        for(int xqfIrOh=0; xqfIrOh < 1; xqfIrOh++){
            [&](){
            auto temp=proto_arr[xqfIrOh];
            ((result.pStorageTexelBuffer)[xqfIrOh])=deserialize_struct(temp);
            }();
        }
        }();(result.pStorageTexelBuffer)=temp_vCLJhGF;}();
[&](){ VkDescriptorAddressInfoEXT* temp_WRvjAst[&](){
            if (!reader.haspUniformBuffer()){
                (result.pUniformBuffer)=NULL;
            return; }{native_concat()}=(VkDescriptorAddressInfoEXT*)malloc(1*sizeof(VkDescriptorAddressInfoEXT));
        auto proto_arr=reader.getpUniformBuffer(1);
        for(int khYkBAw=0; khYkBAw < 1; khYkBAw++){
            [&](){
            auto temp=proto_arr[khYkBAw];
            ((result.pUniformBuffer)[khYkBAw])=deserialize_struct(temp);
            }();
        }
        }();(result.pUniformBuffer)=temp_WRvjAst;}();
[&](){ VkDescriptorAddressInfoEXT* temp_GGgEJaD[&](){
            if (!reader.haspStorageBuffer()){
                (result.pStorageBuffer)=NULL;
            return; }{native_concat()}=(VkDescriptorAddressInfoEXT*)malloc(1*sizeof(VkDescriptorAddressInfoEXT));
        auto proto_arr=reader.getpStorageBuffer(1);
        for(int UWDCkLS=0; UWDCkLS < 1; UWDCkLS++){
            [&](){
            auto temp=proto_arr[UWDCkLS];
            ((result.pStorageBuffer)[UWDCkLS])=deserialize_struct(temp);
            }();
        }
        }();(result.pStorageBuffer)=temp_GGgEJaD;}();
[&](){[&](){(result.accelerationStructure)=reader.getaccelerationStructure();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDescriptorDataEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDescriptorDataEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDescriptorGetInfoEXT::Builder& builder, VkDescriptorGetInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.settype((member.type));}();}();}();
[&](){
            auto temp=builder.initdata(data);
            return serialize_struct((member.data), temp);
            }();
}

    VkDescriptorGetInfoEXT deserialize_struct(VkDescriptorGetInfoEXT::Reader reader){
        auto result=VkDescriptorGetInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.type)=reader.gettype();}();}();}();
[&](){
            auto temp=reader.getdata();
            (result.data)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDescriptorGetInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDescriptorGetInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkBufferCaptureDescriptorDataInfoEXT::Builder& builder, VkBufferCaptureDescriptorDataInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setbuffer(serialize_handle(member.buffer));}();
}

    VkBufferCaptureDescriptorDataInfoEXT deserialize_struct(VkBufferCaptureDescriptorDataInfoEXT::Reader reader){
        auto result=VkBufferCaptureDescriptorDataInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.buffer)=deserialize_handle(reader.getbuffer());}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkBufferCaptureDescriptorDataInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkBufferCaptureDescriptorDataInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkImageCaptureDescriptorDataInfoEXT::Builder& builder, VkImageCaptureDescriptorDataInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setimage(serialize_handle(member.image));}();
}

    VkImageCaptureDescriptorDataInfoEXT deserialize_struct(VkImageCaptureDescriptorDataInfoEXT::Reader reader){
        auto result=VkImageCaptureDescriptorDataInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.image)=deserialize_handle(reader.getimage());}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkImageCaptureDescriptorDataInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkImageCaptureDescriptorDataInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkImageViewCaptureDescriptorDataInfoEXT::Builder& builder, VkImageViewCaptureDescriptorDataInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setimageView(serialize_handle(member.imageView));}();
}

    VkImageViewCaptureDescriptorDataInfoEXT deserialize_struct(VkImageViewCaptureDescriptorDataInfoEXT::Reader reader){
        auto result=VkImageViewCaptureDescriptorDataInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.imageView)=deserialize_handle(reader.getimageView());}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkImageViewCaptureDescriptorDataInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkImageViewCaptureDescriptorDataInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSamplerCaptureDescriptorDataInfoEXT::Builder& builder, VkSamplerCaptureDescriptorDataInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setsampler(serialize_handle(member.sampler));}();
}

    VkSamplerCaptureDescriptorDataInfoEXT deserialize_struct(VkSamplerCaptureDescriptorDataInfoEXT::Reader reader){
        auto result=VkSamplerCaptureDescriptorDataInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.sampler)=deserialize_handle(reader.getsampler());}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSamplerCaptureDescriptorDataInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSamplerCaptureDescriptorDataInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkAccelerationStructureCaptureDescriptorDataInfoEXT::Builder& builder, VkAccelerationStructureCaptureDescriptorDataInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setaccelerationStructure(serialize_handle(member.accelerationStructure));}();
[&](){return builder.setaccelerationStructureNV(serialize_handle(member.accelerationStructureNV));}();
}

    VkAccelerationStructureCaptureDescriptorDataInfoEXT deserialize_struct(VkAccelerationStructureCaptureDescriptorDataInfoEXT::Reader reader){
        auto result=VkAccelerationStructureCaptureDescriptorDataInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.accelerationStructure)=deserialize_handle(reader.getaccelerationStructure());}();
[&](){(result.accelerationStructureNV)=deserialize_handle(reader.getaccelerationStructureNV());}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkAccelerationStructureCaptureDescriptorDataInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkAccelerationStructureCaptureDescriptorDataInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkOpaqueCaptureDescriptorDataCreateInfoEXT::Builder& builder, VkOpaqueCaptureDescriptorDataCreateInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            if ((member.opaqueCaptureDescriptorData)==NULL){
                builder.disownopaqueCaptureDescriptorData();
            return; }[&](){
            if (((char*)(member.opaqueCaptureDescriptorData).opaqueCaptureDescriptorData)==NULL){
                builder.disownopaqueCaptureDescriptorData();
            return; }
        auto proto_arr=builder.initopaqueCaptureDescriptorData();
        for(int DBqaZyV=0; DBqaZyV < strlen(((char*)(member.opaqueCaptureDescriptorData).opaqueCaptureDescriptorData))+1; DBqaZyV++){
            [&](){return proto_arr.set(DBqaZyV,(((char*)(member.opaqueCaptureDescriptorData).opaqueCaptureDescriptorData)[DBqaZyV]));}();
        }
        }();}();
}

    VkOpaqueCaptureDescriptorDataCreateInfoEXT deserialize_struct(VkOpaqueCaptureDescriptorDataCreateInfoEXT::Reader reader){
        auto result=VkOpaqueCaptureDescriptorDataCreateInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){ void* temp_aKlUxQv[&](){
            if (!reader.hasopaqueCaptureDescriptorData()){
                (result.opaqueCaptureDescriptorData)=NULL;
            return; }char* temp_QATXnVH;[&](){
            if (!reader.hasopaqueCaptureDescriptorData()){
                (temp_QATXnVH.opaqueCaptureDescriptorData)=NULL;
            return; }{native_concat()}=(char*)malloc(reader.getopaqueCaptureDescriptorData().size();*sizeof(char));
        auto proto_arr=reader.getopaqueCaptureDescriptorData(reader.getopaqueCaptureDescriptorData().size(););
        for(int GrXpdLW=0; GrXpdLW < reader.getopaqueCaptureDescriptorData().size();; GrXpdLW++){
            [&](){((temp_QATXnVH.opaqueCaptureDescriptorData)[GrXpdLW])=proto_arr[GrXpdLW];}();
        }
        }();(result.opaqueCaptureDescriptorData)=temp_QATXnVH;}();(result.opaqueCaptureDescriptorData)=temp_aKlUxQv;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkOpaqueCaptureDescriptorDataCreateInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkOpaqueCaptureDescriptorDataCreateInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceShaderIntegerDotProductFeatures::Builder& builder, VkPhysicalDeviceShaderIntegerDotProductFeatures member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setshaderIntegerDotProduct((member.shaderIntegerDotProduct));}();}();
}

    VkPhysicalDeviceShaderIntegerDotProductFeatures deserialize_struct(VkPhysicalDeviceShaderIntegerDotProductFeatures::Reader reader){
        auto result=VkPhysicalDeviceShaderIntegerDotProductFeatures();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.shaderIntegerDotProduct)=reader.getshaderIntegerDotProduct();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceShaderIntegerDotProductFeatures member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceShaderIntegerDotProductFeatures member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceShaderIntegerDotProductProperties::Builder& builder, VkPhysicalDeviceShaderIntegerDotProductProperties member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setintegerDotProduct8BitUnsignedAccelerated((member.integerDotProduct8BitUnsignedAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProduct8BitSignedAccelerated((member.integerDotProduct8BitSignedAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProduct8BitMixedSignednessAccelerated((member.integerDotProduct8BitMixedSignednessAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProduct4x8BitPackedUnsignedAccelerated((member.integerDotProduct4x8BitPackedUnsignedAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProduct4x8BitPackedSignedAccelerated((member.integerDotProduct4x8BitPackedSignedAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProduct4x8BitPackedMixedSignednessAccelerated((member.integerDotProduct4x8BitPackedMixedSignednessAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProduct16BitUnsignedAccelerated((member.integerDotProduct16BitUnsignedAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProduct16BitSignedAccelerated((member.integerDotProduct16BitSignedAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProduct16BitMixedSignednessAccelerated((member.integerDotProduct16BitMixedSignednessAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProduct32BitUnsignedAccelerated((member.integerDotProduct32BitUnsignedAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProduct32BitSignedAccelerated((member.integerDotProduct32BitSignedAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProduct32BitMixedSignednessAccelerated((member.integerDotProduct32BitMixedSignednessAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProduct64BitUnsignedAccelerated((member.integerDotProduct64BitUnsignedAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProduct64BitSignedAccelerated((member.integerDotProduct64BitSignedAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProduct64BitMixedSignednessAccelerated((member.integerDotProduct64BitMixedSignednessAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProductAccumulatingSaturating8BitUnsignedAccelerated((member.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProductAccumulatingSaturating8BitSignedAccelerated((member.integerDotProductAccumulatingSaturating8BitSignedAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated((member.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated((member.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated((member.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated((member.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProductAccumulatingSaturating16BitUnsignedAccelerated((member.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProductAccumulatingSaturating16BitSignedAccelerated((member.integerDotProductAccumulatingSaturating16BitSignedAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated((member.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProductAccumulatingSaturating32BitUnsignedAccelerated((member.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProductAccumulatingSaturating32BitSignedAccelerated((member.integerDotProductAccumulatingSaturating32BitSignedAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated((member.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProductAccumulatingSaturating64BitUnsignedAccelerated((member.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProductAccumulatingSaturating64BitSignedAccelerated((member.integerDotProductAccumulatingSaturating64BitSignedAccelerated));}();}();
[&](){[&](){return builder.setintegerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated((member.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated));}();}();
}

    VkPhysicalDeviceShaderIntegerDotProductProperties deserialize_struct(VkPhysicalDeviceShaderIntegerDotProductProperties::Reader reader){
        auto result=VkPhysicalDeviceShaderIntegerDotProductProperties();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.integerDotProduct8BitUnsignedAccelerated)=reader.getintegerDotProduct8BitUnsignedAccelerated();}();}();
[&](){[&](){(result.integerDotProduct8BitSignedAccelerated)=reader.getintegerDotProduct8BitSignedAccelerated();}();}();
[&](){[&](){(result.integerDotProduct8BitMixedSignednessAccelerated)=reader.getintegerDotProduct8BitMixedSignednessAccelerated();}();}();
[&](){[&](){(result.integerDotProduct4x8BitPackedUnsignedAccelerated)=reader.getintegerDotProduct4x8BitPackedUnsignedAccelerated();}();}();
[&](){[&](){(result.integerDotProduct4x8BitPackedSignedAccelerated)=reader.getintegerDotProduct4x8BitPackedSignedAccelerated();}();}();
[&](){[&](){(result.integerDotProduct4x8BitPackedMixedSignednessAccelerated)=reader.getintegerDotProduct4x8BitPackedMixedSignednessAccelerated();}();}();
[&](){[&](){(result.integerDotProduct16BitUnsignedAccelerated)=reader.getintegerDotProduct16BitUnsignedAccelerated();}();}();
[&](){[&](){(result.integerDotProduct16BitSignedAccelerated)=reader.getintegerDotProduct16BitSignedAccelerated();}();}();
[&](){[&](){(result.integerDotProduct16BitMixedSignednessAccelerated)=reader.getintegerDotProduct16BitMixedSignednessAccelerated();}();}();
[&](){[&](){(result.integerDotProduct32BitUnsignedAccelerated)=reader.getintegerDotProduct32BitUnsignedAccelerated();}();}();
[&](){[&](){(result.integerDotProduct32BitSignedAccelerated)=reader.getintegerDotProduct32BitSignedAccelerated();}();}();
[&](){[&](){(result.integerDotProduct32BitMixedSignednessAccelerated)=reader.getintegerDotProduct32BitMixedSignednessAccelerated();}();}();
[&](){[&](){(result.integerDotProduct64BitUnsignedAccelerated)=reader.getintegerDotProduct64BitUnsignedAccelerated();}();}();
[&](){[&](){(result.integerDotProduct64BitSignedAccelerated)=reader.getintegerDotProduct64BitSignedAccelerated();}();}();
[&](){[&](){(result.integerDotProduct64BitMixedSignednessAccelerated)=reader.getintegerDotProduct64BitMixedSignednessAccelerated();}();}();
[&](){[&](){(result.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated)=reader.getintegerDotProductAccumulatingSaturating8BitUnsignedAccelerated();}();}();
[&](){[&](){(result.integerDotProductAccumulatingSaturating8BitSignedAccelerated)=reader.getintegerDotProductAccumulatingSaturating8BitSignedAccelerated();}();}();
[&](){[&](){(result.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated)=reader.getintegerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated();}();}();
[&](){[&](){(result.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated)=reader.getintegerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated();}();}();
[&](){[&](){(result.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated)=reader.getintegerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated();}();}();
[&](){[&](){(result.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated)=reader.getintegerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated();}();}();
[&](){[&](){(result.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated)=reader.getintegerDotProductAccumulatingSaturating16BitUnsignedAccelerated();}();}();
[&](){[&](){(result.integerDotProductAccumulatingSaturating16BitSignedAccelerated)=reader.getintegerDotProductAccumulatingSaturating16BitSignedAccelerated();}();}();
[&](){[&](){(result.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated)=reader.getintegerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated();}();}();
[&](){[&](){(result.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated)=reader.getintegerDotProductAccumulatingSaturating32BitUnsignedAccelerated();}();}();
[&](){[&](){(result.integerDotProductAccumulatingSaturating32BitSignedAccelerated)=reader.getintegerDotProductAccumulatingSaturating32BitSignedAccelerated();}();}();
[&](){[&](){(result.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated)=reader.getintegerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated();}();}();
[&](){[&](){(result.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated)=reader.getintegerDotProductAccumulatingSaturating64BitUnsignedAccelerated();}();}();
[&](){[&](){(result.integerDotProductAccumulatingSaturating64BitSignedAccelerated)=reader.getintegerDotProductAccumulatingSaturating64BitSignedAccelerated();}();}();
[&](){[&](){(result.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated)=reader.getintegerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceShaderIntegerDotProductProperties member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceShaderIntegerDotProductProperties member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceDrmPropertiesEXT::Builder& builder, VkPhysicalDeviceDrmPropertiesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.sethasPrimary((member.hasPrimary));}();}();
[&](){[&](){return builder.sethasRender((member.hasRender));}();}();
[&](){return builder.setprimaryMajor((member.primaryMajor));}();
[&](){return builder.setprimaryMinor((member.primaryMinor));}();
[&](){return builder.setrenderMajor((member.renderMajor));}();
[&](){return builder.setrenderMinor((member.renderMinor));}();
}

    VkPhysicalDeviceDrmPropertiesEXT deserialize_struct(VkPhysicalDeviceDrmPropertiesEXT::Reader reader){
        auto result=VkPhysicalDeviceDrmPropertiesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.hasPrimary)=reader.gethasPrimary();}();}();
[&](){[&](){(result.hasRender)=reader.gethasRender();}();}();
[&](){(result.primaryMajor)=reader.getprimaryMajor();}();
[&](){(result.primaryMinor)=reader.getprimaryMinor();}();
[&](){(result.renderMajor)=reader.getrenderMajor();}();
[&](){(result.renderMinor)=reader.getrenderMinor();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceDrmPropertiesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceDrmPropertiesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR::Builder& builder, VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setfragmentShaderBarycentric((member.fragmentShaderBarycentric));}();}();
}

    VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR deserialize_struct(VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR::Reader reader){
        auto result=VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.fragmentShaderBarycentric)=reader.getfragmentShaderBarycentric();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR::Builder& builder, VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.settriStripVertexOrderIndependentOfProvokingVertex((member.triStripVertexOrderIndependentOfProvokingVertex));}();}();
}

    VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR deserialize_struct(VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR::Reader reader){
        auto result=VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.triStripVertexOrderIndependentOfProvokingVertex)=reader.gettriStripVertexOrderIndependentOfProvokingVertex();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceRayTracingMotionBlurFeaturesNV::Builder& builder, VkPhysicalDeviceRayTracingMotionBlurFeaturesNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setrayTracingMotionBlur((member.rayTracingMotionBlur));}();}();
[&](){[&](){return builder.setrayTracingMotionBlurPipelineTraceRaysIndirect((member.rayTracingMotionBlurPipelineTraceRaysIndirect));}();}();
}

    VkPhysicalDeviceRayTracingMotionBlurFeaturesNV deserialize_struct(VkPhysicalDeviceRayTracingMotionBlurFeaturesNV::Reader reader){
        auto result=VkPhysicalDeviceRayTracingMotionBlurFeaturesNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.rayTracingMotionBlur)=reader.getrayTracingMotionBlur();}();}();
[&](){[&](){(result.rayTracingMotionBlurPipelineTraceRaysIndirect)=reader.getrayTracingMotionBlurPipelineTraceRaysIndirect();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceRayTracingMotionBlurFeaturesNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceRayTracingMotionBlurFeaturesNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkAccelerationStructureGeometryMotionTrianglesDataNV::Builder& builder, VkAccelerationStructureGeometryMotionTrianglesDataNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            auto temp=builder.initvertexData(vertexData);
            return serialize_struct((member.vertexData), temp);
            }();
}

    VkAccelerationStructureGeometryMotionTrianglesDataNV deserialize_struct(VkAccelerationStructureGeometryMotionTrianglesDataNV::Reader reader){
        auto result=VkAccelerationStructureGeometryMotionTrianglesDataNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){
            auto temp=reader.getvertexData();
            (result.vertexData)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkAccelerationStructureGeometryMotionTrianglesDataNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkAccelerationStructureGeometryMotionTrianglesDataNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkAccelerationStructureMotionInfoNV::Builder& builder, VkAccelerationStructureMotionInfoNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setmaxInstances((member.maxInstances));}();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
}

    VkAccelerationStructureMotionInfoNV deserialize_struct(VkAccelerationStructureMotionInfoNV::Reader reader){
        auto result=VkAccelerationStructureMotionInfoNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.maxInstances)=reader.getmaxInstances();}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkAccelerationStructureMotionInfoNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkAccelerationStructureMotionInfoNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSRTDataNV::Builder& builder, VkSRTDataNV member){
        
    
[&](){return builder.setsx((member.sx));}();
[&](){return builder.seta((member.a));}();
[&](){return builder.setb((member.b));}();
[&](){return builder.setpvx((member.pvx));}();
[&](){return builder.setsy((member.sy));}();
[&](){return builder.setc((member.c));}();
[&](){return builder.setpvy((member.pvy));}();
[&](){return builder.setsz((member.sz));}();
[&](){return builder.setpvz((member.pvz));}();
[&](){return builder.setqx((member.qx));}();
[&](){return builder.setqy((member.qy));}();
[&](){return builder.setqz((member.qz));}();
[&](){return builder.setqw((member.qw));}();
[&](){return builder.settx((member.tx));}();
[&](){return builder.setty((member.ty));}();
[&](){return builder.settz((member.tz));}();
}

    VkSRTDataNV deserialize_struct(VkSRTDataNV::Reader reader){
        auto result=VkSRTDataNV();
    
[&](){(result.sx)=reader.getsx();}();
[&](){(result.a)=reader.geta();}();
[&](){(result.b)=reader.getb();}();
[&](){(result.pvx)=reader.getpvx();}();
[&](){(result.sy)=reader.getsy();}();
[&](){(result.c)=reader.getc();}();
[&](){(result.pvy)=reader.getpvy();}();
[&](){(result.sz)=reader.getsz();}();
[&](){(result.pvz)=reader.getpvz();}();
[&](){(result.qx)=reader.getqx();}();
[&](){(result.qy)=reader.getqy();}();
[&](){(result.qz)=reader.getqz();}();
[&](){(result.qw)=reader.getqw();}();
[&](){(result.tx)=reader.gettx();}();
[&](){(result.ty)=reader.getty();}();
[&](){(result.tz)=reader.gettz();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSRTDataNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSRTDataNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkAccelerationStructureSRTMotionInstanceNV::Builder& builder, VkAccelerationStructureSRTMotionInstanceNV member){
        
    
[&](){
            auto temp=builder.inittransformT0(transformT0);
            return serialize_struct((member.transformT0), temp);
            }();
[&](){
            auto temp=builder.inittransformT1(transformT1);
            return serialize_struct((member.transformT1), temp);
            }();
[&](){return builder.setinstanceCustomIndex((member.instanceCustomIndex));}();
[&](){return builder.setmask((member.mask));}();
[&](){return builder.setinstanceShaderBindingTableRecordOffset((member.instanceShaderBindingTableRecordOffset));}();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){return builder.setaccelerationStructureReference((member.accelerationStructureReference));}();
}

    VkAccelerationStructureSRTMotionInstanceNV deserialize_struct(VkAccelerationStructureSRTMotionInstanceNV::Reader reader){
        auto result=VkAccelerationStructureSRTMotionInstanceNV();
    
[&](){
            auto temp=reader.gettransformT0();
            (result.transformT0)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.gettransformT1();
            (result.transformT1)=deserialize_struct(temp);
            }();
[&](){(result.instanceCustomIndex)=reader.getinstanceCustomIndex();}();
[&](){(result.mask)=reader.getmask();}();
[&](){(result.instanceShaderBindingTableRecordOffset)=reader.getinstanceShaderBindingTableRecordOffset();}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){(result.accelerationStructureReference)=reader.getaccelerationStructureReference();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkAccelerationStructureSRTMotionInstanceNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkAccelerationStructureSRTMotionInstanceNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkAccelerationStructureMatrixMotionInstanceNV::Builder& builder, VkAccelerationStructureMatrixMotionInstanceNV member){
        
    
[&](){
            auto temp=builder.inittransformT0(transformT0);
            return serialize_struct((member.transformT0), temp);
            }();
[&](){
            auto temp=builder.inittransformT1(transformT1);
            return serialize_struct((member.transformT1), temp);
            }();
[&](){return builder.setinstanceCustomIndex((member.instanceCustomIndex));}();
[&](){return builder.setmask((member.mask));}();
[&](){return builder.setinstanceShaderBindingTableRecordOffset((member.instanceShaderBindingTableRecordOffset));}();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){return builder.setaccelerationStructureReference((member.accelerationStructureReference));}();
}

    VkAccelerationStructureMatrixMotionInstanceNV deserialize_struct(VkAccelerationStructureMatrixMotionInstanceNV::Reader reader){
        auto result=VkAccelerationStructureMatrixMotionInstanceNV();
    
[&](){
            auto temp=reader.gettransformT0();
            (result.transformT0)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.gettransformT1();
            (result.transformT1)=deserialize_struct(temp);
            }();
[&](){(result.instanceCustomIndex)=reader.getinstanceCustomIndex();}();
[&](){(result.mask)=reader.getmask();}();
[&](){(result.instanceShaderBindingTableRecordOffset)=reader.getinstanceShaderBindingTableRecordOffset();}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){(result.accelerationStructureReference)=reader.getaccelerationStructureReference();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkAccelerationStructureMatrixMotionInstanceNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkAccelerationStructureMatrixMotionInstanceNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkAccelerationStructureMotionInstanceDataNV::Builder& builder, VkAccelerationStructureMotionInstanceDataNV member){
        
    
[&](){
            auto temp=builder.initstaticInstance(staticInstance);
            return serialize_struct((member.staticInstance), temp);
            }();
[&](){
            auto temp=builder.initmatrixMotionInstance(matrixMotionInstance);
            return serialize_struct((member.matrixMotionInstance), temp);
            }();
[&](){
            auto temp=builder.initsrtMotionInstance(srtMotionInstance);
            return serialize_struct((member.srtMotionInstance), temp);
            }();
}

    VkAccelerationStructureMotionInstanceDataNV deserialize_struct(VkAccelerationStructureMotionInstanceDataNV::Reader reader){
        auto result=VkAccelerationStructureMotionInstanceDataNV();
    
[&](){
            auto temp=reader.getstaticInstance();
            (result.staticInstance)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getmatrixMotionInstance();
            (result.matrixMotionInstance)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getsrtMotionInstance();
            (result.srtMotionInstance)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkAccelerationStructureMotionInstanceDataNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkAccelerationStructureMotionInstanceDataNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkAccelerationStructureMotionInstanceNV::Builder& builder, VkAccelerationStructureMotionInstanceNV member){
        
    
[&](){[&](){[&](){return builder.settype((member.type));}();}();}();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){
            auto temp=builder.initdata(data);
            return serialize_struct((member.data), temp);
            }();
}

    VkAccelerationStructureMotionInstanceNV deserialize_struct(VkAccelerationStructureMotionInstanceNV::Reader reader){
        auto result=VkAccelerationStructureMotionInstanceNV();
    
[&](){[&](){[&](){(result.type)=reader.gettype();}();}();}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){
            auto temp=reader.getdata();
            (result.data)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkAccelerationStructureMotionInstanceNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkAccelerationStructureMotionInstanceNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkMemoryGetRemoteAddressInfoNV::Builder& builder, VkMemoryGetRemoteAddressInfoNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setmemory(serialize_handle(member.memory));}();
[&](){[&](){[&](){return builder.sethandleType((member.handleType));}();}();}();
}

    VkMemoryGetRemoteAddressInfoNV deserialize_struct(VkMemoryGetRemoteAddressInfoNV::Reader reader){
        auto result=VkMemoryGetRemoteAddressInfoNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.memory)=deserialize_handle(reader.getmemory());}();
[&](){[&](){[&](){(result.handleType)=reader.gethandleType();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkMemoryGetRemoteAddressInfoNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkMemoryGetRemoteAddressInfoNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT::Builder& builder, VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setformatRgba10x6WithoutYCbCrSampler((member.formatRgba10x6WithoutYCbCrSampler));}();}();
}

    VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT deserialize_struct(VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.formatRgba10x6WithoutYCbCrSampler)=reader.getformatRgba10x6WithoutYCbCrSampler();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkFormatProperties3::Builder& builder, VkFormatProperties3 member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setlinearTilingFeatures((member.linearTilingFeatures));}();}();}();
[&](){[&](){[&](){return builder.setoptimalTilingFeatures((member.optimalTilingFeatures));}();}();}();
[&](){[&](){[&](){return builder.setbufferFeatures((member.bufferFeatures));}();}();}();
}

    VkFormatProperties3 deserialize_struct(VkFormatProperties3::Reader reader){
        auto result=VkFormatProperties3();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.linearTilingFeatures)=reader.getlinearTilingFeatures();}();}();}();
[&](){[&](){[&](){(result.optimalTilingFeatures)=reader.getoptimalTilingFeatures();}();}();}();
[&](){[&](){[&](){(result.bufferFeatures)=reader.getbufferFeatures();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkFormatProperties3 member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkFormatProperties3 member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDrmFormatModifierPropertiesList2EXT::Builder& builder, VkDrmFormatModifierPropertiesList2EXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setdrmFormatModifierCount((member.drmFormatModifierCount));}();
[&](){
            if ((member.pDrmFormatModifierProperties)==NULL){
                builder.disownpDrmFormatModifierProperties();
            return; }
        auto proto_arr=builder.initpDrmFormatModifierProperties();
        for(int llWReeu=0; llWReeu < member.drmFormatModifierCount; llWReeu++){
            [&](){
            auto temp=proto_arr[llWReeu];
            return serialize_struct(((member.pDrmFormatModifierProperties)[llWReeu]), temp);
            }();
        }
        }();
}

    VkDrmFormatModifierPropertiesList2EXT deserialize_struct(VkDrmFormatModifierPropertiesList2EXT::Reader reader){
        auto result=VkDrmFormatModifierPropertiesList2EXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.drmFormatModifierCount)=reader.getdrmFormatModifierCount();}();
[&](){
            if (!reader.haspDrmFormatModifierProperties()){
                (result.pDrmFormatModifierProperties)=NULL;
            return; }{native_concat()}=(VkDrmFormatModifierProperties2EXT*)malloc(result.drmFormatModifierCount*sizeof(VkDrmFormatModifierProperties2EXT));
        auto proto_arr=reader.getpDrmFormatModifierProperties(result.drmFormatModifierCount);
        for(int llWReeu=0; llWReeu < result.drmFormatModifierCount; llWReeu++){
            [&](){
            auto temp=proto_arr[llWReeu];
            ((result.pDrmFormatModifierProperties)[llWReeu])=deserialize_struct(temp);
            }();
        }
        }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDrmFormatModifierPropertiesList2EXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDrmFormatModifierPropertiesList2EXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDrmFormatModifierProperties2EXT::Builder& builder, VkDrmFormatModifierProperties2EXT member){
        
    
[&](){return builder.setdrmFormatModifier((member.drmFormatModifier));}();
[&](){return builder.setdrmFormatModifierPlaneCount((member.drmFormatModifierPlaneCount));}();
[&](){[&](){[&](){return builder.setdrmFormatModifierTilingFeatures((member.drmFormatModifierTilingFeatures));}();}();}();
}

    VkDrmFormatModifierProperties2EXT deserialize_struct(VkDrmFormatModifierProperties2EXT::Reader reader){
        auto result=VkDrmFormatModifierProperties2EXT();
    
[&](){(result.drmFormatModifier)=reader.getdrmFormatModifier();}();
[&](){(result.drmFormatModifierPlaneCount)=reader.getdrmFormatModifierPlaneCount();}();
[&](){[&](){[&](){(result.drmFormatModifierTilingFeatures)=reader.getdrmFormatModifierTilingFeatures();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDrmFormatModifierProperties2EXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDrmFormatModifierProperties2EXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineRenderingCreateInfo::Builder& builder, VkPipelineRenderingCreateInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setviewMask((member.viewMask));}();
[&](){return builder.setcolorAttachmentCount((member.colorAttachmentCount));}();
[&](){
            if ((member.pColorAttachmentFormats)==NULL){
                builder.disownpColorAttachmentFormats();
            return; }
        auto proto_arr=builder.initpColorAttachmentFormats();
        for(int wEZNsRI=0; wEZNsRI < member.colorAttachmentCount; wEZNsRI++){
            [&](){[&](){[&](){return proto_arr.set(wEZNsRI,((member.pColorAttachmentFormats)[wEZNsRI]));}();}();}();
        }
        }();
[&](){[&](){[&](){return builder.setdepthAttachmentFormat((member.depthAttachmentFormat));}();}();}();
[&](){[&](){[&](){return builder.setstencilAttachmentFormat((member.stencilAttachmentFormat));}();}();}();
}

    VkPipelineRenderingCreateInfo deserialize_struct(VkPipelineRenderingCreateInfo::Reader reader){
        auto result=VkPipelineRenderingCreateInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.viewMask)=reader.getviewMask();}();
[&](){(result.colorAttachmentCount)=reader.getcolorAttachmentCount();}();
[&](){ VkFormat* temp_PrgeUSF[&](){
            if (!reader.haspColorAttachmentFormats()){
                (result.pColorAttachmentFormats)=NULL;
            return; }{native_concat()}=(VkFormat*)malloc(result.colorAttachmentCount*sizeof(VkFormat));
        auto proto_arr=reader.getpColorAttachmentFormats(result.colorAttachmentCount);
        for(int XcfMUtc=0; XcfMUtc < result.colorAttachmentCount; XcfMUtc++){
            [&](){[&](){[&](){((result.pColorAttachmentFormats)[XcfMUtc])=proto_arr[XcfMUtc];}();}();}();
        }
        }();(result.pColorAttachmentFormats)=temp_PrgeUSF;}();
[&](){[&](){[&](){(result.depthAttachmentFormat)=reader.getdepthAttachmentFormat();}();}();}();
[&](){[&](){[&](){(result.stencilAttachmentFormat)=reader.getstencilAttachmentFormat();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineRenderingCreateInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineRenderingCreateInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkRenderingInfo::Builder& builder, VkRenderingInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){
            auto temp=builder.initrenderArea(renderArea);
            return serialize_struct((member.renderArea), temp);
            }();
[&](){return builder.setlayerCount((member.layerCount));}();
[&](){return builder.setviewMask((member.viewMask));}();
[&](){return builder.setcolorAttachmentCount((member.colorAttachmentCount));}();
[&](){
            if ((member.pColorAttachments)==NULL){
                builder.disownpColorAttachments();
            return; }
        auto proto_arr=builder.initpColorAttachments();
        for(int cibkfru=0; cibkfru < member.colorAttachmentCount; cibkfru++){
            [&](){
            auto temp=proto_arr[cibkfru];
            return serialize_struct(((member.pColorAttachments)[cibkfru]), temp);
            }();
        }
        }();
[&](){
            if ((member.pDepthAttachment)==NULL){
                builder.disownpDepthAttachment();
            return; }
        auto proto_arr=builder.initpDepthAttachment();
        for(int kxTATsQ=0; kxTATsQ < 1; kxTATsQ++){
            [&](){
            auto temp=proto_arr[kxTATsQ];
            return serialize_struct(((member.pDepthAttachment)[kxTATsQ]), temp);
            }();
        }
        }();
[&](){
            if ((member.pStencilAttachment)==NULL){
                builder.disownpStencilAttachment();
            return; }
        auto proto_arr=builder.initpStencilAttachment();
        for(int uJrHPnT=0; uJrHPnT < 1; uJrHPnT++){
            [&](){
            auto temp=proto_arr[uJrHPnT];
            return serialize_struct(((member.pStencilAttachment)[uJrHPnT]), temp);
            }();
        }
        }();
}

    VkRenderingInfo deserialize_struct(VkRenderingInfo::Reader reader){
        auto result=VkRenderingInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){
            auto temp=reader.getrenderArea();
            (result.renderArea)=deserialize_struct(temp);
            }();
[&](){(result.layerCount)=reader.getlayerCount();}();
[&](){(result.viewMask)=reader.getviewMask();}();
[&](){(result.colorAttachmentCount)=reader.getcolorAttachmentCount();}();
[&](){ VkRenderingAttachmentInfo* temp_osnAtxY[&](){
            if (!reader.haspColorAttachments()){
                (result.pColorAttachments)=NULL;
            return; }{native_concat()}=(VkRenderingAttachmentInfo*)malloc(result.colorAttachmentCount*sizeof(VkRenderingAttachmentInfo));
        auto proto_arr=reader.getpColorAttachments(result.colorAttachmentCount);
        for(int cGsnvAo=0; cGsnvAo < result.colorAttachmentCount; cGsnvAo++){
            [&](){
            auto temp=proto_arr[cGsnvAo];
            ((result.pColorAttachments)[cGsnvAo])=deserialize_struct(temp);
            }();
        }
        }();(result.pColorAttachments)=temp_osnAtxY;}();
[&](){ VkRenderingAttachmentInfo* temp_CEKgFvq[&](){
            if (!reader.haspDepthAttachment()){
                (result.pDepthAttachment)=NULL;
            return; }{native_concat()}=(VkRenderingAttachmentInfo*)malloc(1*sizeof(VkRenderingAttachmentInfo));
        auto proto_arr=reader.getpDepthAttachment(1);
        for(int ZYEKxYk=0; ZYEKxYk < 1; ZYEKxYk++){
            [&](){
            auto temp=proto_arr[ZYEKxYk];
            ((result.pDepthAttachment)[ZYEKxYk])=deserialize_struct(temp);
            }();
        }
        }();(result.pDepthAttachment)=temp_CEKgFvq;}();
[&](){ VkRenderingAttachmentInfo* temp_tzErIXV[&](){
            if (!reader.haspStencilAttachment()){
                (result.pStencilAttachment)=NULL;
            return; }{native_concat()}=(VkRenderingAttachmentInfo*)malloc(1*sizeof(VkRenderingAttachmentInfo));
        auto proto_arr=reader.getpStencilAttachment(1);
        for(int WFCqNwK=0; WFCqNwK < 1; WFCqNwK++){
            [&](){
            auto temp=proto_arr[WFCqNwK];
            ((result.pStencilAttachment)[WFCqNwK])=deserialize_struct(temp);
            }();
        }
        }();(result.pStencilAttachment)=temp_tzErIXV;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkRenderingInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkRenderingInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkRenderingAttachmentInfo::Builder& builder, VkRenderingAttachmentInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setimageView(serialize_handle(member.imageView));}();
[&](){[&](){[&](){return builder.setimageLayout((member.imageLayout));}();}();}();
[&](){[&](){[&](){return builder.setresolveMode((member.resolveMode));}();}();}();
[&](){return builder.setresolveImageView(serialize_handle(member.resolveImageView));}();
[&](){[&](){[&](){return builder.setresolveImageLayout((member.resolveImageLayout));}();}();}();
[&](){[&](){[&](){return builder.setloadOp((member.loadOp));}();}();}();
[&](){[&](){[&](){return builder.setstoreOp((member.storeOp));}();}();}();
[&](){
            auto temp=builder.initclearValue(clearValue);
            return serialize_struct((member.clearValue), temp);
            }();
}

    VkRenderingAttachmentInfo deserialize_struct(VkRenderingAttachmentInfo::Reader reader){
        auto result=VkRenderingAttachmentInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.imageView)=deserialize_handle(reader.getimageView());}();
[&](){[&](){[&](){(result.imageLayout)=reader.getimageLayout();}();}();}();
[&](){[&](){[&](){(result.resolveMode)=reader.getresolveMode();}();}();}();
[&](){(result.resolveImageView)=deserialize_handle(reader.getresolveImageView());}();
[&](){[&](){[&](){(result.resolveImageLayout)=reader.getresolveImageLayout();}();}();}();
[&](){[&](){[&](){(result.loadOp)=reader.getloadOp();}();}();}();
[&](){[&](){[&](){(result.storeOp)=reader.getstoreOp();}();}();}();
[&](){
            auto temp=reader.getclearValue();
            (result.clearValue)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkRenderingAttachmentInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkRenderingAttachmentInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkRenderingFragmentShadingRateAttachmentInfoKHR::Builder& builder, VkRenderingFragmentShadingRateAttachmentInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setimageView(serialize_handle(member.imageView));}();
[&](){[&](){[&](){return builder.setimageLayout((member.imageLayout));}();}();}();
[&](){
            auto temp=builder.initshadingRateAttachmentTexelSize(shadingRateAttachmentTexelSize);
            return serialize_struct((member.shadingRateAttachmentTexelSize), temp);
            }();
}

    VkRenderingFragmentShadingRateAttachmentInfoKHR deserialize_struct(VkRenderingFragmentShadingRateAttachmentInfoKHR::Reader reader){
        auto result=VkRenderingFragmentShadingRateAttachmentInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.imageView)=deserialize_handle(reader.getimageView());}();
[&](){[&](){[&](){(result.imageLayout)=reader.getimageLayout();}();}();}();
[&](){
            auto temp=reader.getshadingRateAttachmentTexelSize();
            (result.shadingRateAttachmentTexelSize)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkRenderingFragmentShadingRateAttachmentInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkRenderingFragmentShadingRateAttachmentInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkRenderingFragmentDensityMapAttachmentInfoEXT::Builder& builder, VkRenderingFragmentDensityMapAttachmentInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setimageView(serialize_handle(member.imageView));}();
[&](){[&](){[&](){return builder.setimageLayout((member.imageLayout));}();}();}();
}

    VkRenderingFragmentDensityMapAttachmentInfoEXT deserialize_struct(VkRenderingFragmentDensityMapAttachmentInfoEXT::Reader reader){
        auto result=VkRenderingFragmentDensityMapAttachmentInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.imageView)=deserialize_handle(reader.getimageView());}();
[&](){[&](){[&](){(result.imageLayout)=reader.getimageLayout();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkRenderingFragmentDensityMapAttachmentInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkRenderingFragmentDensityMapAttachmentInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceDynamicRenderingFeatures::Builder& builder, VkPhysicalDeviceDynamicRenderingFeatures member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setdynamicRendering((member.dynamicRendering));}();}();
}

    VkPhysicalDeviceDynamicRenderingFeatures deserialize_struct(VkPhysicalDeviceDynamicRenderingFeatures::Reader reader){
        auto result=VkPhysicalDeviceDynamicRenderingFeatures();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.dynamicRendering)=reader.getdynamicRendering();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceDynamicRenderingFeatures member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceDynamicRenderingFeatures member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkCommandBufferInheritanceRenderingInfo::Builder& builder, VkCommandBufferInheritanceRenderingInfo member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){return builder.setviewMask((member.viewMask));}();
[&](){return builder.setcolorAttachmentCount((member.colorAttachmentCount));}();
[&](){
            if ((member.pColorAttachmentFormats)==NULL){
                builder.disownpColorAttachmentFormats();
            return; }
        auto proto_arr=builder.initpColorAttachmentFormats();
        for(int wEZNsRI=0; wEZNsRI < member.colorAttachmentCount; wEZNsRI++){
            [&](){[&](){[&](){return proto_arr.set(wEZNsRI,((member.pColorAttachmentFormats)[wEZNsRI]));}();}();}();
        }
        }();
[&](){[&](){[&](){return builder.setdepthAttachmentFormat((member.depthAttachmentFormat));}();}();}();
[&](){[&](){[&](){return builder.setstencilAttachmentFormat((member.stencilAttachmentFormat));}();}();}();
[&](){[&](){[&](){return builder.setrasterizationSamples((member.rasterizationSamples));}();}();}();
}

    VkCommandBufferInheritanceRenderingInfo deserialize_struct(VkCommandBufferInheritanceRenderingInfo::Reader reader){
        auto result=VkCommandBufferInheritanceRenderingInfo();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){(result.viewMask)=reader.getviewMask();}();
[&](){(result.colorAttachmentCount)=reader.getcolorAttachmentCount();}();
[&](){ VkFormat* temp_PrgeUSF[&](){
            if (!reader.haspColorAttachmentFormats()){
                (result.pColorAttachmentFormats)=NULL;
            return; }{native_concat()}=(VkFormat*)malloc(result.colorAttachmentCount*sizeof(VkFormat));
        auto proto_arr=reader.getpColorAttachmentFormats(result.colorAttachmentCount);
        for(int XcfMUtc=0; XcfMUtc < result.colorAttachmentCount; XcfMUtc++){
            [&](){[&](){[&](){((result.pColorAttachmentFormats)[XcfMUtc])=proto_arr[XcfMUtc];}();}();}();
        }
        }();(result.pColorAttachmentFormats)=temp_PrgeUSF;}();
[&](){[&](){[&](){(result.depthAttachmentFormat)=reader.getdepthAttachmentFormat();}();}();}();
[&](){[&](){[&](){(result.stencilAttachmentFormat)=reader.getstencilAttachmentFormat();}();}();}();
[&](){[&](){[&](){(result.rasterizationSamples)=reader.getrasterizationSamples();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkCommandBufferInheritanceRenderingInfo member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkCommandBufferInheritanceRenderingInfo member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkAttachmentSampleCountInfoAMD::Builder& builder, VkAttachmentSampleCountInfoAMD member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setcolorAttachmentCount((member.colorAttachmentCount));}();
[&](){
            if ((member.pColorAttachmentSamples)==NULL){
                builder.disownpColorAttachmentSamples();
            return; }
        auto proto_arr=builder.initpColorAttachmentSamples();
        for(int DxAFsfK=0; DxAFsfK < member.colorAttachmentCount; DxAFsfK++){
            [&](){[&](){[&](){return proto_arr.set(DxAFsfK,((member.pColorAttachmentSamples)[DxAFsfK]));}();}();}();
        }
        }();
[&](){[&](){[&](){return builder.setdepthStencilAttachmentSamples((member.depthStencilAttachmentSamples));}();}();}();
}

    VkAttachmentSampleCountInfoAMD deserialize_struct(VkAttachmentSampleCountInfoAMD::Reader reader){
        auto result=VkAttachmentSampleCountInfoAMD();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.colorAttachmentCount)=reader.getcolorAttachmentCount();}();
[&](){ VkSampleCountFlagBits* temp_hpxudCQ[&](){
            if (!reader.haspColorAttachmentSamples()){
                (result.pColorAttachmentSamples)=NULL;
            return; }{native_concat()}=(VkSampleCountFlagBits*)malloc(result.colorAttachmentCount*sizeof(VkSampleCountFlagBits));
        auto proto_arr=reader.getpColorAttachmentSamples(result.colorAttachmentCount);
        for(int qSJXYKL=0; qSJXYKL < result.colorAttachmentCount; qSJXYKL++){
            [&](){[&](){[&](){((result.pColorAttachmentSamples)[qSJXYKL])=proto_arr[qSJXYKL];}();}();}();
        }
        }();(result.pColorAttachmentSamples)=temp_hpxudCQ;}();
[&](){[&](){[&](){(result.depthStencilAttachmentSamples)=reader.getdepthStencilAttachmentSamples();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkAttachmentSampleCountInfoAMD member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkAttachmentSampleCountInfoAMD member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkMultiviewPerViewAttributesInfoNVX::Builder& builder, VkMultiviewPerViewAttributesInfoNVX member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setperViewAttributes((member.perViewAttributes));}();}();
[&](){[&](){return builder.setperViewAttributesPositionXOnly((member.perViewAttributesPositionXOnly));}();}();
}

    VkMultiviewPerViewAttributesInfoNVX deserialize_struct(VkMultiviewPerViewAttributesInfoNVX::Reader reader){
        auto result=VkMultiviewPerViewAttributesInfoNVX();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){(result.perViewAttributes)=reader.getperViewAttributes();}();}();
[&](){[&](){(result.perViewAttributesPositionXOnly)=reader.getperViewAttributesPositionXOnly();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkMultiviewPerViewAttributesInfoNVX member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkMultiviewPerViewAttributesInfoNVX member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceImageViewMinLodFeaturesEXT::Builder& builder, VkPhysicalDeviceImageViewMinLodFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setminLod((member.minLod));}();}();
}

    VkPhysicalDeviceImageViewMinLodFeaturesEXT deserialize_struct(VkPhysicalDeviceImageViewMinLodFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceImageViewMinLodFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.minLod)=reader.getminLod();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceImageViewMinLodFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceImageViewMinLodFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkImageViewMinLodCreateInfoEXT::Builder& builder, VkImageViewMinLodCreateInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setminLod((member.minLod));}();
}

    VkImageViewMinLodCreateInfoEXT deserialize_struct(VkImageViewMinLodCreateInfoEXT::Reader reader){
        auto result=VkImageViewMinLodCreateInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.minLod)=reader.getminLod();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkImageViewMinLodCreateInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkImageViewMinLodCreateInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT::Builder& builder, VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setrasterizationOrderColorAttachmentAccess((member.rasterizationOrderColorAttachmentAccess));}();}();
[&](){[&](){return builder.setrasterizationOrderDepthAttachmentAccess((member.rasterizationOrderDepthAttachmentAccess));}();}();
[&](){[&](){return builder.setrasterizationOrderStencilAttachmentAccess((member.rasterizationOrderStencilAttachmentAccess));}();}();
}

    VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT deserialize_struct(VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.rasterizationOrderColorAttachmentAccess)=reader.getrasterizationOrderColorAttachmentAccess();}();}();
[&](){[&](){(result.rasterizationOrderDepthAttachmentAccess)=reader.getrasterizationOrderDepthAttachmentAccess();}();}();
[&](){[&](){(result.rasterizationOrderStencilAttachmentAccess)=reader.getrasterizationOrderStencilAttachmentAccess();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceLinearColorAttachmentFeaturesNV::Builder& builder, VkPhysicalDeviceLinearColorAttachmentFeaturesNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setlinearColorAttachment((member.linearColorAttachment));}();}();
}

    VkPhysicalDeviceLinearColorAttachmentFeaturesNV deserialize_struct(VkPhysicalDeviceLinearColorAttachmentFeaturesNV::Reader reader){
        auto result=VkPhysicalDeviceLinearColorAttachmentFeaturesNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.linearColorAttachment)=reader.getlinearColorAttachment();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceLinearColorAttachmentFeaturesNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceLinearColorAttachmentFeaturesNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT::Builder& builder, VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setgraphicsPipelineLibrary((member.graphicsPipelineLibrary));}();}();
}

    VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT deserialize_struct(VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.graphicsPipelineLibrary)=reader.getgraphicsPipelineLibrary();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT::Builder& builder, VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setgraphicsPipelineLibraryFastLinking((member.graphicsPipelineLibraryFastLinking));}();}();
[&](){[&](){return builder.setgraphicsPipelineLibraryIndependentInterpolationDecoration((member.graphicsPipelineLibraryIndependentInterpolationDecoration));}();}();
}

    VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT deserialize_struct(VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT::Reader reader){
        auto result=VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.graphicsPipelineLibraryFastLinking)=reader.getgraphicsPipelineLibraryFastLinking();}();}();
[&](){[&](){(result.graphicsPipelineLibraryIndependentInterpolationDecoration)=reader.getgraphicsPipelineLibraryIndependentInterpolationDecoration();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkGraphicsPipelineLibraryCreateInfoEXT::Builder& builder, VkGraphicsPipelineLibraryCreateInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
}

    VkGraphicsPipelineLibraryCreateInfoEXT deserialize_struct(VkGraphicsPipelineLibraryCreateInfoEXT::Reader reader){
        auto result=VkGraphicsPipelineLibraryCreateInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkGraphicsPipelineLibraryCreateInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkGraphicsPipelineLibraryCreateInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE::Builder& builder, VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setdescriptorSetHostMapping((member.descriptorSetHostMapping));}();}();
}

    VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE deserialize_struct(VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE::Reader reader){
        auto result=VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.descriptorSetHostMapping)=reader.getdescriptorSetHostMapping();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDescriptorSetBindingReferenceVALVE::Builder& builder, VkDescriptorSetBindingReferenceVALVE member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setdescriptorSetLayout(serialize_handle(member.descriptorSetLayout));}();
[&](){return builder.setbinding((member.binding));}();
}

    VkDescriptorSetBindingReferenceVALVE deserialize_struct(VkDescriptorSetBindingReferenceVALVE::Reader reader){
        auto result=VkDescriptorSetBindingReferenceVALVE();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.descriptorSetLayout)=deserialize_handle(reader.getdescriptorSetLayout());}();
[&](){(result.binding)=reader.getbinding();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDescriptorSetBindingReferenceVALVE member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDescriptorSetBindingReferenceVALVE member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDescriptorSetLayoutHostMappingInfoVALVE::Builder& builder, VkDescriptorSetLayoutHostMappingInfoVALVE member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setdescriptorOffset((member.descriptorOffset));}();
[&](){return builder.setdescriptorSize((member.descriptorSize));}();
}

    VkDescriptorSetLayoutHostMappingInfoVALVE deserialize_struct(VkDescriptorSetLayoutHostMappingInfoVALVE::Reader reader){
        auto result=VkDescriptorSetLayoutHostMappingInfoVALVE();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.descriptorOffset)=reader.getdescriptorOffset();}();
[&](){(result.descriptorSize)=reader.getdescriptorSize();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDescriptorSetLayoutHostMappingInfoVALVE member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDescriptorSetLayoutHostMappingInfoVALVE member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT::Builder& builder, VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setshaderModuleIdentifier((member.shaderModuleIdentifier));}();}();
}

    VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT deserialize_struct(VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.shaderModuleIdentifier)=reader.getshaderModuleIdentifier();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT::Builder& builder, VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
        auto proto_arr=builder.initshaderModuleIdentifierAlgorithmUUID();
        for(int KnKbJaC=0; KnKbJaC < VK_UUID_SIZE; KnKbJaC++){
            [&](){return proto_arr.set(KnKbJaC,((member.shaderModuleIdentifierAlgorithmUUID)[KnKbJaC]));}();
        }
        }();
}

    VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT deserialize_struct(VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT::Reader reader){
        auto result=VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){
        auto proto_arr=reader.getshaderModuleIdentifierAlgorithmUUID(VK_UUID_SIZE);
        for(int KnKbJaC=0; KnKbJaC < VK_UUID_SIZE; KnKbJaC++){
            [&](){((result.shaderModuleIdentifierAlgorithmUUID)[KnKbJaC])=proto_arr[KnKbJaC];}();
        }
        }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineShaderStageModuleIdentifierCreateInfoEXT::Builder& builder, VkPipelineShaderStageModuleIdentifierCreateInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setidentifierSize((member.identifierSize));}();
[&](){
            if ((member.pIdentifier)==NULL){
                builder.disownpIdentifier();
            return; }
        auto proto_arr=builder.initpIdentifier();
        for(int DmBzRet=0; DmBzRet < member.identifierSize; DmBzRet++){
            [&](){return proto_arr.set(DmBzRet,((member.pIdentifier)[DmBzRet]));}();
        }
        }();
}

    VkPipelineShaderStageModuleIdentifierCreateInfoEXT deserialize_struct(VkPipelineShaderStageModuleIdentifierCreateInfoEXT::Reader reader){
        auto result=VkPipelineShaderStageModuleIdentifierCreateInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.identifierSize)=reader.getidentifierSize();}();
[&](){ uint8_t* temp_rLkDPhT[&](){
            if (!reader.haspIdentifier()){
                (result.pIdentifier)=NULL;
            return; }{native_concat()}=(uint8_t*)malloc(result.identifierSize*sizeof(uint8_t));
        auto proto_arr=reader.getpIdentifier(result.identifierSize);
        for(int wMKTMIh=0; wMKTMIh < result.identifierSize; wMKTMIh++){
            [&](){((result.pIdentifier)[wMKTMIh])=proto_arr[wMKTMIh];}();
        }
        }();(result.pIdentifier)=temp_rLkDPhT;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineShaderStageModuleIdentifierCreateInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineShaderStageModuleIdentifierCreateInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkShaderModuleIdentifierEXT::Builder& builder, VkShaderModuleIdentifierEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setidentifierSize((member.identifierSize));}();
[&](){
        auto proto_arr=builder.initidentifier();
        for(int FYYsgLr=0; FYYsgLr < VK_MAX_SHADER_MODULE_IDENTIFIER_SIZE_EXT; FYYsgLr++){
            [&](){return proto_arr.set(FYYsgLr,((member.identifier)[FYYsgLr]));}();
        }
        }();
}

    VkShaderModuleIdentifierEXT deserialize_struct(VkShaderModuleIdentifierEXT::Reader reader){
        auto result=VkShaderModuleIdentifierEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.identifierSize)=reader.getidentifierSize();}();
[&](){
        auto proto_arr=reader.getidentifier(VK_MAX_SHADER_MODULE_IDENTIFIER_SIZE_EXT);
        for(int FYYsgLr=0; FYYsgLr < VK_MAX_SHADER_MODULE_IDENTIFIER_SIZE_EXT; FYYsgLr++){
            [&](){((result.identifier)[FYYsgLr])=proto_arr[FYYsgLr];}();
        }
        }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkShaderModuleIdentifierEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkShaderModuleIdentifierEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkImageCompressionControlEXT::Builder& builder, VkImageCompressionControlEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){return builder.setcompressionControlPlaneCount((member.compressionControlPlaneCount));}();
[&](){
            if ((member.pFixedRateFlags)==NULL){
                builder.disownpFixedRateFlags();
            return; }
        auto proto_arr=builder.initpFixedRateFlags();
        for(int YdHtGOk=0; YdHtGOk < member.compressionControlPlaneCount; YdHtGOk++){
            [&](){[&](){[&](){return proto_arr.set(YdHtGOk,((member.pFixedRateFlags)[YdHtGOk]));}();}();}();
        }
        }();
}

    VkImageCompressionControlEXT deserialize_struct(VkImageCompressionControlEXT::Reader reader){
        auto result=VkImageCompressionControlEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){(result.compressionControlPlaneCount)=reader.getcompressionControlPlaneCount();}();
[&](){
            if (!reader.haspFixedRateFlags()){
                (result.pFixedRateFlags)=NULL;
            return; }{native_concat()}=(VkImageCompressionFixedRateFlagsEXT*)malloc(result.compressionControlPlaneCount*sizeof(VkImageCompressionFixedRateFlagsEXT));
        auto proto_arr=reader.getpFixedRateFlags(result.compressionControlPlaneCount);
        for(int YdHtGOk=0; YdHtGOk < result.compressionControlPlaneCount; YdHtGOk++){
            [&](){[&](){[&](){((result.pFixedRateFlags)[YdHtGOk])=proto_arr[YdHtGOk];}();}();}();
        }
        }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkImageCompressionControlEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkImageCompressionControlEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceImageCompressionControlFeaturesEXT::Builder& builder, VkPhysicalDeviceImageCompressionControlFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setimageCompressionControl((member.imageCompressionControl));}();}();
}

    VkPhysicalDeviceImageCompressionControlFeaturesEXT deserialize_struct(VkPhysicalDeviceImageCompressionControlFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceImageCompressionControlFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.imageCompressionControl)=reader.getimageCompressionControl();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceImageCompressionControlFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceImageCompressionControlFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkImageCompressionPropertiesEXT::Builder& builder, VkImageCompressionPropertiesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setimageCompressionFlags((member.imageCompressionFlags));}();}();}();
[&](){[&](){[&](){return builder.setimageCompressionFixedRateFlags((member.imageCompressionFixedRateFlags));}();}();}();
}

    VkImageCompressionPropertiesEXT deserialize_struct(VkImageCompressionPropertiesEXT::Reader reader){
        auto result=VkImageCompressionPropertiesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.imageCompressionFlags)=reader.getimageCompressionFlags();}();}();}();
[&](){[&](){[&](){(result.imageCompressionFixedRateFlags)=reader.getimageCompressionFixedRateFlags();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkImageCompressionPropertiesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkImageCompressionPropertiesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT::Builder& builder, VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setimageCompressionControlSwapchain((member.imageCompressionControlSwapchain));}();}();
}

    VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT deserialize_struct(VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.imageCompressionControlSwapchain)=reader.getimageCompressionControlSwapchain();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkImageSubresource2KHR::Builder& builder, VkImageSubresource2KHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            auto temp=builder.initimageSubresource(imageSubresource);
            return serialize_struct((member.imageSubresource), temp);
            }();
}

    VkImageSubresource2KHR deserialize_struct(VkImageSubresource2KHR::Reader reader){
        auto result=VkImageSubresource2KHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getimageSubresource();
            (result.imageSubresource)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkImageSubresource2KHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkImageSubresource2KHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSubresourceLayout2KHR::Builder& builder, VkSubresourceLayout2KHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            auto temp=builder.initsubresourceLayout(subresourceLayout);
            return serialize_struct((member.subresourceLayout), temp);
            }();
}

    VkSubresourceLayout2KHR deserialize_struct(VkSubresourceLayout2KHR::Reader reader){
        auto result=VkSubresourceLayout2KHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getsubresourceLayout();
            (result.subresourceLayout)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSubresourceLayout2KHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSubresourceLayout2KHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkRenderPassCreationControlEXT::Builder& builder, VkRenderPassCreationControlEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setdisallowMerging((member.disallowMerging));}();}();
}

    VkRenderPassCreationControlEXT deserialize_struct(VkRenderPassCreationControlEXT::Reader reader){
        auto result=VkRenderPassCreationControlEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){(result.disallowMerging)=reader.getdisallowMerging();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkRenderPassCreationControlEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkRenderPassCreationControlEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkRenderPassCreationFeedbackInfoEXT::Builder& builder, VkRenderPassCreationFeedbackInfoEXT member){
        
    
[&](){return builder.setpostMergeSubpassCount((member.postMergeSubpassCount));}();
}

    VkRenderPassCreationFeedbackInfoEXT deserialize_struct(VkRenderPassCreationFeedbackInfoEXT::Reader reader){
        auto result=VkRenderPassCreationFeedbackInfoEXT();
    
[&](){(result.postMergeSubpassCount)=reader.getpostMergeSubpassCount();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkRenderPassCreationFeedbackInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkRenderPassCreationFeedbackInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkRenderPassCreationFeedbackCreateInfoEXT::Builder& builder, VkRenderPassCreationFeedbackCreateInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            if ((member.pRenderPassFeedback)==NULL){
                builder.disownpRenderPassFeedback();
            return; }
        auto proto_arr=builder.initpRenderPassFeedback();
        for(int vxiUcYZ=0; vxiUcYZ < 1; vxiUcYZ++){
            [&](){
            auto temp=proto_arr[vxiUcYZ];
            return serialize_struct(((member.pRenderPassFeedback)[vxiUcYZ]), temp);
            }();
        }
        }();
}

    VkRenderPassCreationFeedbackCreateInfoEXT deserialize_struct(VkRenderPassCreationFeedbackCreateInfoEXT::Reader reader){
        auto result=VkRenderPassCreationFeedbackCreateInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){
            if (!reader.haspRenderPassFeedback()){
                (result.pRenderPassFeedback)=NULL;
            return; }{native_concat()}=(VkRenderPassCreationFeedbackInfoEXT*)malloc(1*sizeof(VkRenderPassCreationFeedbackInfoEXT));
        auto proto_arr=reader.getpRenderPassFeedback(1);
        for(int vxiUcYZ=0; vxiUcYZ < 1; vxiUcYZ++){
            [&](){
            auto temp=proto_arr[vxiUcYZ];
            ((result.pRenderPassFeedback)[vxiUcYZ])=deserialize_struct(temp);
            }();
        }
        }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkRenderPassCreationFeedbackCreateInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkRenderPassCreationFeedbackCreateInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkRenderPassSubpassFeedbackInfoEXT::Builder& builder, VkRenderPassSubpassFeedbackInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsubpassMergeStatus((member.subpassMergeStatus));}();}();}();
[&](){
        auto proto_arr=builder.initdescription();
        for(int oakWTIB=0; oakWTIB < VK_MAX_DESCRIPTION_SIZE; oakWTIB++){
            [&](){return proto_arr.set(oakWTIB,((member.description)[oakWTIB]));}();
        }
        }();
[&](){return builder.setpostMergeIndex((member.postMergeIndex));}();
}

    VkRenderPassSubpassFeedbackInfoEXT deserialize_struct(VkRenderPassSubpassFeedbackInfoEXT::Reader reader){
        auto result=VkRenderPassSubpassFeedbackInfoEXT();
    
[&](){[&](){[&](){(result.subpassMergeStatus)=reader.getsubpassMergeStatus();}();}();}();
[&](){
        auto proto_arr=reader.getdescription(VK_MAX_DESCRIPTION_SIZE);
        for(int oakWTIB=0; oakWTIB < VK_MAX_DESCRIPTION_SIZE; oakWTIB++){
            [&](){((result.description)[oakWTIB])=proto_arr[oakWTIB];}();
        }
        }();
[&](){(result.postMergeIndex)=reader.getpostMergeIndex();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkRenderPassSubpassFeedbackInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkRenderPassSubpassFeedbackInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkRenderPassSubpassFeedbackCreateInfoEXT::Builder& builder, VkRenderPassSubpassFeedbackCreateInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            if ((member.pSubpassFeedback)==NULL){
                builder.disownpSubpassFeedback();
            return; }
        auto proto_arr=builder.initpSubpassFeedback();
        for(int hutaZSO=0; hutaZSO < 1; hutaZSO++){
            [&](){
            auto temp=proto_arr[hutaZSO];
            return serialize_struct(((member.pSubpassFeedback)[hutaZSO]), temp);
            }();
        }
        }();
}

    VkRenderPassSubpassFeedbackCreateInfoEXT deserialize_struct(VkRenderPassSubpassFeedbackCreateInfoEXT::Reader reader){
        auto result=VkRenderPassSubpassFeedbackCreateInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){
            if (!reader.haspSubpassFeedback()){
                (result.pSubpassFeedback)=NULL;
            return; }{native_concat()}=(VkRenderPassSubpassFeedbackInfoEXT*)malloc(1*sizeof(VkRenderPassSubpassFeedbackInfoEXT));
        auto proto_arr=reader.getpSubpassFeedback(1);
        for(int hutaZSO=0; hutaZSO < 1; hutaZSO++){
            [&](){
            auto temp=proto_arr[hutaZSO];
            ((result.pSubpassFeedback)[hutaZSO])=deserialize_struct(temp);
            }();
        }
        }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkRenderPassSubpassFeedbackCreateInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkRenderPassSubpassFeedbackCreateInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT::Builder& builder, VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setsubpassMergeFeedback((member.subpassMergeFeedback));}();}();
}

    VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT deserialize_struct(VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.subpassMergeFeedback)=reader.getsubpassMergeFeedback();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkMicromapBuildInfoEXT::Builder& builder, VkMicromapBuildInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.settype((member.type));}();}();}();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){[&](){[&](){return builder.setmode((member.mode));}();}();}();
[&](){return builder.setdstMicromap(serialize_handle(member.dstMicromap));}();
[&](){return builder.setusageCountsCount((member.usageCountsCount));}();
[&](){
            if ((member.pUsageCounts)==NULL){
                builder.disownpUsageCounts();
            return; }
        auto proto_arr=builder.initpUsageCounts();
        for(int pwlCVvr=0; pwlCVvr < member.usageCountsCount; pwlCVvr++){
            [&](){
            auto temp=proto_arr[pwlCVvr];
            return serialize_struct(((member.pUsageCounts)[pwlCVvr]), temp);
            }();
        }
        }();
[&](){
            if ((member.ppUsageCounts)==NULL){
                builder.disownppUsageCounts();
            return; }
        auto proto_arr=builder.initppUsageCounts();
        for(int mENrsNk=0; mENrsNk < member.usageCountsCount; mENrsNk++){
            [&](){
            if (((member.ppUsageCounts)[mENrsNk])==NULL){
                proto_arr.init(mENrsNk);
            return; }
        auto proto_arr=proto_arr[mENrsNk];
        for(int NPAhOuj=0; NPAhOuj < 1; NPAhOuj++){
            [&](){
            auto temp=proto_arr[NPAhOuj];
            return serialize_struct((((member.ppUsageCounts)[mENrsNk])[NPAhOuj]), temp);
            }();
        }
        }();
        }
        }();
[&](){
            auto temp=builder.initdata(data);
            return serialize_struct((member.data), temp);
            }();
[&](){
            auto temp=builder.initscratchData(scratchData);
            return serialize_struct((member.scratchData), temp);
            }();
[&](){
            auto temp=builder.inittriangleArray(triangleArray);
            return serialize_struct((member.triangleArray), temp);
            }();
[&](){[&](){return builder.settriangleArrayStride((member.triangleArrayStride));}();}();
}

    VkMicromapBuildInfoEXT deserialize_struct(VkMicromapBuildInfoEXT::Reader reader){
        auto result=VkMicromapBuildInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.type)=reader.gettype();}();}();}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){[&](){[&](){(result.mode)=reader.getmode();}();}();}();
[&](){(result.dstMicromap)=deserialize_handle(reader.getdstMicromap());}();
[&](){(result.usageCountsCount)=reader.getusageCountsCount();}();
[&](){ VkMicromapUsageEXT* temp_dZUFBkW[&](){
            if (!reader.haspUsageCounts()){
                (result.pUsageCounts)=NULL;
            return; }{native_concat()}=(VkMicromapUsageEXT*)malloc(result.usageCountsCount*sizeof(VkMicromapUsageEXT));
        auto proto_arr=reader.getpUsageCounts(result.usageCountsCount);
        for(int TeZtOHY=0; TeZtOHY < result.usageCountsCount; TeZtOHY++){
            [&](){
            auto temp=proto_arr[TeZtOHY];
            ((result.pUsageCounts)[TeZtOHY])=deserialize_struct(temp);
            }();
        }
        }();(result.pUsageCounts)=temp_dZUFBkW;}();
[&](){ VkMicromapUsageEXT* * temp_ShrFTLH[&](){
            if (!reader.hasppUsageCounts()){
                (result.ppUsageCounts)=NULL;
            return; }{native_concat()}=(VkMicromapUsageEXT**)malloc(result.usageCountsCount*sizeof(VkMicromapUsageEXT*));
        auto proto_arr=reader.getppUsageCounts(result.usageCountsCount);
        for(int MkxskvU=0; MkxskvU < result.usageCountsCount; MkxskvU++){
            [&](){
            if (!proto_arr[MkxskvU].size){
                ((result.ppUsageCounts)[MkxskvU])=NULL;
            return; }{native_concat()}=(VkMicromapUsageEXT*)malloc(1*sizeof(VkMicromapUsageEXT));
        auto proto_arr=proto_arr[MkxskvU];
        for(int hNHlthr=0; hNHlthr < 1; hNHlthr++){
            [&](){
            auto temp=proto_arr[hNHlthr];
            (((result.ppUsageCounts)[MkxskvU])[hNHlthr])=deserialize_struct(temp);
            }();
        }
        }();
        }
        }();(result.ppUsageCounts)=temp_ShrFTLH;}();
[&](){
            auto temp=reader.getdata();
            (result.data)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getscratchData();
            (result.scratchData)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.gettriangleArray();
            (result.triangleArray)=deserialize_struct(temp);
            }();
[&](){[&](){(result.triangleArrayStride)=reader.gettriangleArrayStride();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkMicromapBuildInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkMicromapBuildInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkMicromapCreateInfoEXT::Builder& builder, VkMicromapCreateInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setcreateFlags((member.createFlags));}();}();}();
[&](){return builder.setbuffer(serialize_handle(member.buffer));}();
[&](){[&](){return builder.setoffset((member.offset));}();}();
[&](){[&](){return builder.setsize((member.size));}();}();
[&](){[&](){[&](){return builder.settype((member.type));}();}();}();
[&](){[&](){return builder.setdeviceAddress((member.deviceAddress));}();}();
}

    VkMicromapCreateInfoEXT deserialize_struct(VkMicromapCreateInfoEXT::Reader reader){
        auto result=VkMicromapCreateInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.createFlags)=reader.getcreateFlags();}();}();}();
[&](){(result.buffer)=deserialize_handle(reader.getbuffer());}();
[&](){[&](){(result.offset)=reader.getoffset();}();}();
[&](){[&](){(result.size)=reader.getsize();}();}();
[&](){[&](){[&](){(result.type)=reader.gettype();}();}();}();
[&](){[&](){(result.deviceAddress)=reader.getdeviceAddress();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkMicromapCreateInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkMicromapCreateInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkMicromapVersionInfoEXT::Builder& builder, VkMicromapVersionInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            if ((member.pVersionData)==NULL){
                builder.disownpVersionData();
            return; }
        auto proto_arr=builder.initpVersionData();
        for(int UXnQvHZ=0; UXnQvHZ < 2*VK_UUID_SIZE; UXnQvHZ++){
            [&](){return proto_arr.set(UXnQvHZ,((member.pVersionData)[UXnQvHZ]));}();
        }
        }();
}

    VkMicromapVersionInfoEXT deserialize_struct(VkMicromapVersionInfoEXT::Reader reader){
        auto result=VkMicromapVersionInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){ uint8_t* temp_kcsYiSk[&](){
            if (!reader.haspVersionData()){
                (result.pVersionData)=NULL;
            return; }{native_concat()}=(uint8_t*)malloc(2*VK_UUID_SIZE*sizeof(uint8_t));
        auto proto_arr=reader.getpVersionData(2*VK_UUID_SIZE);
        for(int aPYYtKH=0; aPYYtKH < 2*VK_UUID_SIZE; aPYYtKH++){
            [&](){((result.pVersionData)[aPYYtKH])=proto_arr[aPYYtKH];}();
        }
        }();(result.pVersionData)=temp_kcsYiSk;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkMicromapVersionInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkMicromapVersionInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkCopyMicromapInfoEXT::Builder& builder, VkCopyMicromapInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setsrc(serialize_handle(member.src));}();
[&](){return builder.setdst(serialize_handle(member.dst));}();
[&](){[&](){[&](){return builder.setmode((member.mode));}();}();}();
}

    VkCopyMicromapInfoEXT deserialize_struct(VkCopyMicromapInfoEXT::Reader reader){
        auto result=VkCopyMicromapInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.src)=deserialize_handle(reader.getsrc());}();
[&](){(result.dst)=deserialize_handle(reader.getdst());}();
[&](){[&](){[&](){(result.mode)=reader.getmode();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkCopyMicromapInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkCopyMicromapInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkCopyMicromapToMemoryInfoEXT::Builder& builder, VkCopyMicromapToMemoryInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setsrc(serialize_handle(member.src));}();
[&](){
            auto temp=builder.initdst(dst);
            return serialize_struct((member.dst), temp);
            }();
[&](){[&](){[&](){return builder.setmode((member.mode));}();}();}();
}

    VkCopyMicromapToMemoryInfoEXT deserialize_struct(VkCopyMicromapToMemoryInfoEXT::Reader reader){
        auto result=VkCopyMicromapToMemoryInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.src)=deserialize_handle(reader.getsrc());}();
[&](){
            auto temp=reader.getdst();
            (result.dst)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.mode)=reader.getmode();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkCopyMicromapToMemoryInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkCopyMicromapToMemoryInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkCopyMemoryToMicromapInfoEXT::Builder& builder, VkCopyMemoryToMicromapInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            auto temp=builder.initsrc(src);
            return serialize_struct((member.src), temp);
            }();
[&](){return builder.setdst(serialize_handle(member.dst));}();
[&](){[&](){[&](){return builder.setmode((member.mode));}();}();}();
}

    VkCopyMemoryToMicromapInfoEXT deserialize_struct(VkCopyMemoryToMicromapInfoEXT::Reader reader){
        auto result=VkCopyMemoryToMicromapInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){
            auto temp=reader.getsrc();
            (result.src)=deserialize_struct(temp);
            }();
[&](){(result.dst)=deserialize_handle(reader.getdst());}();
[&](){[&](){[&](){(result.mode)=reader.getmode();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkCopyMemoryToMicromapInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkCopyMemoryToMicromapInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkMicromapBuildSizesInfoEXT::Builder& builder, VkMicromapBuildSizesInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setmicromapSize((member.micromapSize));}();}();
[&](){[&](){return builder.setbuildScratchSize((member.buildScratchSize));}();}();
[&](){[&](){return builder.setdiscardable((member.discardable));}();}();
}

    VkMicromapBuildSizesInfoEXT deserialize_struct(VkMicromapBuildSizesInfoEXT::Reader reader){
        auto result=VkMicromapBuildSizesInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){(result.micromapSize)=reader.getmicromapSize();}();}();
[&](){[&](){(result.buildScratchSize)=reader.getbuildScratchSize();}();}();
[&](){[&](){(result.discardable)=reader.getdiscardable();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkMicromapBuildSizesInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkMicromapBuildSizesInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkMicromapUsageEXT::Builder& builder, VkMicromapUsageEXT member){
        
    
[&](){return builder.setcount((member.count));}();
[&](){return builder.setsubdivisionLevel((member.subdivisionLevel));}();
[&](){return builder.setformat((member.format));}();
}

    VkMicromapUsageEXT deserialize_struct(VkMicromapUsageEXT::Reader reader){
        auto result=VkMicromapUsageEXT();
    
[&](){(result.count)=reader.getcount();}();
[&](){(result.subdivisionLevel)=reader.getsubdivisionLevel();}();
[&](){(result.format)=reader.getformat();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkMicromapUsageEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkMicromapUsageEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkMicromapTriangleEXT::Builder& builder, VkMicromapTriangleEXT member){
        
    
[&](){return builder.setdataOffset((member.dataOffset));}();
[&](){return builder.setsubdivisionLevel((member.subdivisionLevel));}();
[&](){return builder.setformat((member.format));}();
}

    VkMicromapTriangleEXT deserialize_struct(VkMicromapTriangleEXT::Reader reader){
        auto result=VkMicromapTriangleEXT();
    
[&](){(result.dataOffset)=reader.getdataOffset();}();
[&](){(result.subdivisionLevel)=reader.getsubdivisionLevel();}();
[&](){(result.format)=reader.getformat();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkMicromapTriangleEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkMicromapTriangleEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceOpacityMicromapFeaturesEXT::Builder& builder, VkPhysicalDeviceOpacityMicromapFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setmicromap((member.micromap));}();}();
[&](){[&](){return builder.setmicromapCaptureReplay((member.micromapCaptureReplay));}();}();
[&](){[&](){return builder.setmicromapHostCommands((member.micromapHostCommands));}();}();
}

    VkPhysicalDeviceOpacityMicromapFeaturesEXT deserialize_struct(VkPhysicalDeviceOpacityMicromapFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceOpacityMicromapFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.micromap)=reader.getmicromap();}();}();
[&](){[&](){(result.micromapCaptureReplay)=reader.getmicromapCaptureReplay();}();}();
[&](){[&](){(result.micromapHostCommands)=reader.getmicromapHostCommands();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceOpacityMicromapFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceOpacityMicromapFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceOpacityMicromapPropertiesEXT::Builder& builder, VkPhysicalDeviceOpacityMicromapPropertiesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setmaxOpacity2StateSubdivisionLevel((member.maxOpacity2StateSubdivisionLevel));}();
[&](){return builder.setmaxOpacity4StateSubdivisionLevel((member.maxOpacity4StateSubdivisionLevel));}();
}

    VkPhysicalDeviceOpacityMicromapPropertiesEXT deserialize_struct(VkPhysicalDeviceOpacityMicromapPropertiesEXT::Reader reader){
        auto result=VkPhysicalDeviceOpacityMicromapPropertiesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.maxOpacity2StateSubdivisionLevel)=reader.getmaxOpacity2StateSubdivisionLevel();}();
[&](){(result.maxOpacity4StateSubdivisionLevel)=reader.getmaxOpacity4StateSubdivisionLevel();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceOpacityMicromapPropertiesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceOpacityMicromapPropertiesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkAccelerationStructureTrianglesOpacityMicromapEXT::Builder& builder, VkAccelerationStructureTrianglesOpacityMicromapEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setindexType((member.indexType));}();}();}();
[&](){
            auto temp=builder.initindexBuffer(indexBuffer);
            return serialize_struct((member.indexBuffer), temp);
            }();
[&](){[&](){return builder.setindexStride((member.indexStride));}();}();
[&](){return builder.setbaseTriangle((member.baseTriangle));}();
[&](){return builder.setusageCountsCount((member.usageCountsCount));}();
[&](){
            if ((member.pUsageCounts)==NULL){
                builder.disownpUsageCounts();
            return; }
        auto proto_arr=builder.initpUsageCounts();
        for(int pwlCVvr=0; pwlCVvr < member.usageCountsCount; pwlCVvr++){
            [&](){
            auto temp=proto_arr[pwlCVvr];
            return serialize_struct(((member.pUsageCounts)[pwlCVvr]), temp);
            }();
        }
        }();
[&](){
            if ((member.ppUsageCounts)==NULL){
                builder.disownppUsageCounts();
            return; }
        auto proto_arr=builder.initppUsageCounts();
        for(int mENrsNk=0; mENrsNk < member.usageCountsCount; mENrsNk++){
            [&](){
            if (((member.ppUsageCounts)[mENrsNk])==NULL){
                proto_arr.init(mENrsNk);
            return; }
        auto proto_arr=proto_arr[mENrsNk];
        for(int NPAhOuj=0; NPAhOuj < 1; NPAhOuj++){
            [&](){
            auto temp=proto_arr[NPAhOuj];
            return serialize_struct((((member.ppUsageCounts)[mENrsNk])[NPAhOuj]), temp);
            }();
        }
        }();
        }
        }();
[&](){return builder.setmicromap(serialize_handle(member.micromap));}();
}

    VkAccelerationStructureTrianglesOpacityMicromapEXT deserialize_struct(VkAccelerationStructureTrianglesOpacityMicromapEXT::Reader reader){
        auto result=VkAccelerationStructureTrianglesOpacityMicromapEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.indexType)=reader.getindexType();}();}();}();
[&](){
            auto temp=reader.getindexBuffer();
            (result.indexBuffer)=deserialize_struct(temp);
            }();
[&](){[&](){(result.indexStride)=reader.getindexStride();}();}();
[&](){(result.baseTriangle)=reader.getbaseTriangle();}();
[&](){(result.usageCountsCount)=reader.getusageCountsCount();}();
[&](){ VkMicromapUsageEXT* temp_dZUFBkW[&](){
            if (!reader.haspUsageCounts()){
                (result.pUsageCounts)=NULL;
            return; }{native_concat()}=(VkMicromapUsageEXT*)malloc(result.usageCountsCount*sizeof(VkMicromapUsageEXT));
        auto proto_arr=reader.getpUsageCounts(result.usageCountsCount);
        for(int TeZtOHY=0; TeZtOHY < result.usageCountsCount; TeZtOHY++){
            [&](){
            auto temp=proto_arr[TeZtOHY];
            ((result.pUsageCounts)[TeZtOHY])=deserialize_struct(temp);
            }();
        }
        }();(result.pUsageCounts)=temp_dZUFBkW;}();
[&](){ VkMicromapUsageEXT* * temp_ShrFTLH[&](){
            if (!reader.hasppUsageCounts()){
                (result.ppUsageCounts)=NULL;
            return; }{native_concat()}=(VkMicromapUsageEXT**)malloc(result.usageCountsCount*sizeof(VkMicromapUsageEXT*));
        auto proto_arr=reader.getppUsageCounts(result.usageCountsCount);
        for(int MkxskvU=0; MkxskvU < result.usageCountsCount; MkxskvU++){
            [&](){
            if (!proto_arr[MkxskvU].size){
                ((result.ppUsageCounts)[MkxskvU])=NULL;
            return; }{native_concat()}=(VkMicromapUsageEXT*)malloc(1*sizeof(VkMicromapUsageEXT));
        auto proto_arr=proto_arr[MkxskvU];
        for(int hNHlthr=0; hNHlthr < 1; hNHlthr++){
            [&](){
            auto temp=proto_arr[hNHlthr];
            (((result.ppUsageCounts)[MkxskvU])[hNHlthr])=deserialize_struct(temp);
            }();
        }
        }();
        }
        }();(result.ppUsageCounts)=temp_ShrFTLH;}();
[&](){(result.micromap)=deserialize_handle(reader.getmicromap());}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkAccelerationStructureTrianglesOpacityMicromapEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkAccelerationStructureTrianglesOpacityMicromapEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelinePropertiesIdentifierEXT::Builder& builder, VkPipelinePropertiesIdentifierEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
        auto proto_arr=builder.initpipelineIdentifier();
        for(int vbeUhnR=0; vbeUhnR < VK_UUID_SIZE; vbeUhnR++){
            [&](){return proto_arr.set(vbeUhnR,((member.pipelineIdentifier)[vbeUhnR]));}();
        }
        }();
}

    VkPipelinePropertiesIdentifierEXT deserialize_struct(VkPipelinePropertiesIdentifierEXT::Reader reader){
        auto result=VkPipelinePropertiesIdentifierEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){
        auto proto_arr=reader.getpipelineIdentifier(VK_UUID_SIZE);
        for(int vbeUhnR=0; vbeUhnR < VK_UUID_SIZE; vbeUhnR++){
            [&](){((result.pipelineIdentifier)[vbeUhnR])=proto_arr[vbeUhnR];}();
        }
        }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelinePropertiesIdentifierEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelinePropertiesIdentifierEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDevicePipelinePropertiesFeaturesEXT::Builder& builder, VkPhysicalDevicePipelinePropertiesFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setpipelinePropertiesIdentifier((member.pipelinePropertiesIdentifier));}();}();
}

    VkPhysicalDevicePipelinePropertiesFeaturesEXT deserialize_struct(VkPhysicalDevicePipelinePropertiesFeaturesEXT::Reader reader){
        auto result=VkPhysicalDevicePipelinePropertiesFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.pipelinePropertiesIdentifier)=reader.getpipelinePropertiesIdentifier();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDevicePipelinePropertiesFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDevicePipelinePropertiesFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD::Builder& builder, VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setshaderEarlyAndLateFragmentTests((member.shaderEarlyAndLateFragmentTests));}();}();
}

    VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD deserialize_struct(VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD::Reader reader){
        auto result=VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.shaderEarlyAndLateFragmentTests)=reader.getshaderEarlyAndLateFragmentTests();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkExternalMemoryAcquireUnmodifiedEXT::Builder& builder, VkExternalMemoryAcquireUnmodifiedEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setacquireUnmodifiedMemory((member.acquireUnmodifiedMemory));}();}();
}

    VkExternalMemoryAcquireUnmodifiedEXT deserialize_struct(VkExternalMemoryAcquireUnmodifiedEXT::Reader reader){
        auto result=VkExternalMemoryAcquireUnmodifiedEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){(result.acquireUnmodifiedMemory)=reader.getacquireUnmodifiedMemory();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkExternalMemoryAcquireUnmodifiedEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkExternalMemoryAcquireUnmodifiedEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT::Builder& builder, VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setnonSeamlessCubeMap((member.nonSeamlessCubeMap));}();}();
}

    VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT deserialize_struct(VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.nonSeamlessCubeMap)=reader.getnonSeamlessCubeMap();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDevicePipelineRobustnessFeaturesEXT::Builder& builder, VkPhysicalDevicePipelineRobustnessFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setpipelineRobustness((member.pipelineRobustness));}();}();
}

    VkPhysicalDevicePipelineRobustnessFeaturesEXT deserialize_struct(VkPhysicalDevicePipelineRobustnessFeaturesEXT::Reader reader){
        auto result=VkPhysicalDevicePipelineRobustnessFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.pipelineRobustness)=reader.getpipelineRobustness();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDevicePipelineRobustnessFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDevicePipelineRobustnessFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPipelineRobustnessCreateInfoEXT::Builder& builder, VkPipelineRobustnessCreateInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setstorageBuffers((member.storageBuffers));}();}();}();
[&](){[&](){[&](){return builder.setuniformBuffers((member.uniformBuffers));}();}();}();
[&](){[&](){[&](){return builder.setvertexInputs((member.vertexInputs));}();}();}();
[&](){[&](){[&](){return builder.setimages((member.images));}();}();}();
}

    VkPipelineRobustnessCreateInfoEXT deserialize_struct(VkPipelineRobustnessCreateInfoEXT::Reader reader){
        auto result=VkPipelineRobustnessCreateInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.storageBuffers)=reader.getstorageBuffers();}();}();}();
[&](){[&](){[&](){(result.uniformBuffers)=reader.getuniformBuffers();}();}();}();
[&](){[&](){[&](){(result.vertexInputs)=reader.getvertexInputs();}();}();}();
[&](){[&](){[&](){(result.images)=reader.getimages();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPipelineRobustnessCreateInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPipelineRobustnessCreateInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDevicePipelineRobustnessPropertiesEXT::Builder& builder, VkPhysicalDevicePipelineRobustnessPropertiesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setdefaultRobustnessStorageBuffers((member.defaultRobustnessStorageBuffers));}();}();}();
[&](){[&](){[&](){return builder.setdefaultRobustnessUniformBuffers((member.defaultRobustnessUniformBuffers));}();}();}();
[&](){[&](){[&](){return builder.setdefaultRobustnessVertexInputs((member.defaultRobustnessVertexInputs));}();}();}();
[&](){[&](){[&](){return builder.setdefaultRobustnessImages((member.defaultRobustnessImages));}();}();}();
}

    VkPhysicalDevicePipelineRobustnessPropertiesEXT deserialize_struct(VkPhysicalDevicePipelineRobustnessPropertiesEXT::Reader reader){
        auto result=VkPhysicalDevicePipelineRobustnessPropertiesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.defaultRobustnessStorageBuffers)=reader.getdefaultRobustnessStorageBuffers();}();}();}();
[&](){[&](){[&](){(result.defaultRobustnessUniformBuffers)=reader.getdefaultRobustnessUniformBuffers();}();}();}();
[&](){[&](){[&](){(result.defaultRobustnessVertexInputs)=reader.getdefaultRobustnessVertexInputs();}();}();}();
[&](){[&](){[&](){(result.defaultRobustnessImages)=reader.getdefaultRobustnessImages();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDevicePipelineRobustnessPropertiesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDevicePipelineRobustnessPropertiesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkImageViewSampleWeightCreateInfoQCOM::Builder& builder, VkImageViewSampleWeightCreateInfoQCOM member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            auto temp=builder.initfilterCenter(filterCenter);
            return serialize_struct((member.filterCenter), temp);
            }();
[&](){
            auto temp=builder.initfilterSize(filterSize);
            return serialize_struct((member.filterSize), temp);
            }();
[&](){return builder.setnumPhases((member.numPhases));}();
}

    VkImageViewSampleWeightCreateInfoQCOM deserialize_struct(VkImageViewSampleWeightCreateInfoQCOM::Reader reader){
        auto result=VkImageViewSampleWeightCreateInfoQCOM();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){
            auto temp=reader.getfilterCenter();
            (result.filterCenter)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getfilterSize();
            (result.filterSize)=deserialize_struct(temp);
            }();
[&](){(result.numPhases)=reader.getnumPhases();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkImageViewSampleWeightCreateInfoQCOM member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkImageViewSampleWeightCreateInfoQCOM member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceImageProcessingFeaturesQCOM::Builder& builder, VkPhysicalDeviceImageProcessingFeaturesQCOM member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.settextureSampleWeighted((member.textureSampleWeighted));}();}();
[&](){[&](){return builder.settextureBoxFilter((member.textureBoxFilter));}();}();
[&](){[&](){return builder.settextureBlockMatch((member.textureBlockMatch));}();}();
}

    VkPhysicalDeviceImageProcessingFeaturesQCOM deserialize_struct(VkPhysicalDeviceImageProcessingFeaturesQCOM::Reader reader){
        auto result=VkPhysicalDeviceImageProcessingFeaturesQCOM();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.textureSampleWeighted)=reader.gettextureSampleWeighted();}();}();
[&](){[&](){(result.textureBoxFilter)=reader.gettextureBoxFilter();}();}();
[&](){[&](){(result.textureBlockMatch)=reader.gettextureBlockMatch();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceImageProcessingFeaturesQCOM member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceImageProcessingFeaturesQCOM member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceImageProcessingPropertiesQCOM::Builder& builder, VkPhysicalDeviceImageProcessingPropertiesQCOM member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setmaxWeightFilterPhases((member.maxWeightFilterPhases));}();
[&](){
            auto temp=builder.initmaxWeightFilterDimension(maxWeightFilterDimension);
            return serialize_struct((member.maxWeightFilterDimension), temp);
            }();
[&](){
            auto temp=builder.initmaxBlockMatchRegion(maxBlockMatchRegion);
            return serialize_struct((member.maxBlockMatchRegion), temp);
            }();
[&](){
            auto temp=builder.initmaxBoxFilterBlockSize(maxBoxFilterBlockSize);
            return serialize_struct((member.maxBoxFilterBlockSize), temp);
            }();
}

    VkPhysicalDeviceImageProcessingPropertiesQCOM deserialize_struct(VkPhysicalDeviceImageProcessingPropertiesQCOM::Reader reader){
        auto result=VkPhysicalDeviceImageProcessingPropertiesQCOM();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.maxWeightFilterPhases)=reader.getmaxWeightFilterPhases();}();
[&](){
            auto temp=reader.getmaxWeightFilterDimension();
            (result.maxWeightFilterDimension)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getmaxBlockMatchRegion();
            (result.maxBlockMatchRegion)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getmaxBoxFilterBlockSize();
            (result.maxBoxFilterBlockSize)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceImageProcessingPropertiesQCOM member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceImageProcessingPropertiesQCOM member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceTilePropertiesFeaturesQCOM::Builder& builder, VkPhysicalDeviceTilePropertiesFeaturesQCOM member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.settileProperties((member.tileProperties));}();}();
}

    VkPhysicalDeviceTilePropertiesFeaturesQCOM deserialize_struct(VkPhysicalDeviceTilePropertiesFeaturesQCOM::Reader reader){
        auto result=VkPhysicalDeviceTilePropertiesFeaturesQCOM();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.tileProperties)=reader.gettileProperties();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceTilePropertiesFeaturesQCOM member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceTilePropertiesFeaturesQCOM member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkTilePropertiesQCOM::Builder& builder, VkTilePropertiesQCOM member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            auto temp=builder.inittileSize(tileSize);
            return serialize_struct((member.tileSize), temp);
            }();
[&](){
            auto temp=builder.initapronSize(apronSize);
            return serialize_struct((member.apronSize), temp);
            }();
[&](){
            auto temp=builder.initorigin(origin);
            return serialize_struct((member.origin), temp);
            }();
}

    VkTilePropertiesQCOM deserialize_struct(VkTilePropertiesQCOM::Reader reader){
        auto result=VkTilePropertiesQCOM();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.gettileSize();
            (result.tileSize)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getapronSize();
            (result.apronSize)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getorigin();
            (result.origin)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkTilePropertiesQCOM member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkTilePropertiesQCOM member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceAmigoProfilingFeaturesSEC::Builder& builder, VkPhysicalDeviceAmigoProfilingFeaturesSEC member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setamigoProfiling((member.amigoProfiling));}();}();
}

    VkPhysicalDeviceAmigoProfilingFeaturesSEC deserialize_struct(VkPhysicalDeviceAmigoProfilingFeaturesSEC::Reader reader){
        auto result=VkPhysicalDeviceAmigoProfilingFeaturesSEC();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.amigoProfiling)=reader.getamigoProfiling();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceAmigoProfilingFeaturesSEC member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceAmigoProfilingFeaturesSEC member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkAmigoProfilingSubmitInfoSEC::Builder& builder, VkAmigoProfilingSubmitInfoSEC member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setfirstDrawTimestamp((member.firstDrawTimestamp));}();
[&](){return builder.setswapBufferTimestamp((member.swapBufferTimestamp));}();
}

    VkAmigoProfilingSubmitInfoSEC deserialize_struct(VkAmigoProfilingSubmitInfoSEC::Reader reader){
        auto result=VkAmigoProfilingSubmitInfoSEC();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.firstDrawTimestamp)=reader.getfirstDrawTimestamp();}();
[&](){(result.swapBufferTimestamp)=reader.getswapBufferTimestamp();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkAmigoProfilingSubmitInfoSEC member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkAmigoProfilingSubmitInfoSEC member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT::Builder& builder, VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setattachmentFeedbackLoopLayout((member.attachmentFeedbackLoopLayout));}();}();
}

    VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT deserialize_struct(VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.attachmentFeedbackLoopLayout)=reader.getattachmentFeedbackLoopLayout();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceDepthClampZeroOneFeaturesEXT::Builder& builder, VkPhysicalDeviceDepthClampZeroOneFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setdepthClampZeroOne((member.depthClampZeroOne));}();}();
}

    VkPhysicalDeviceDepthClampZeroOneFeaturesEXT deserialize_struct(VkPhysicalDeviceDepthClampZeroOneFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceDepthClampZeroOneFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.depthClampZeroOne)=reader.getdepthClampZeroOne();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceDepthClampZeroOneFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceDepthClampZeroOneFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceAddressBindingReportFeaturesEXT::Builder& builder, VkPhysicalDeviceAddressBindingReportFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setreportAddressBinding((member.reportAddressBinding));}();}();
}

    VkPhysicalDeviceAddressBindingReportFeaturesEXT deserialize_struct(VkPhysicalDeviceAddressBindingReportFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceAddressBindingReportFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.reportAddressBinding)=reader.getreportAddressBinding();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceAddressBindingReportFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceAddressBindingReportFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDeviceAddressBindingCallbackDataEXT::Builder& builder, VkDeviceAddressBindingCallbackDataEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){[&](){return builder.setbaseAddress((member.baseAddress));}();}();
[&](){[&](){return builder.setsize((member.size));}();}();
[&](){[&](){[&](){return builder.setbindingType((member.bindingType));}();}();}();
}

    VkDeviceAddressBindingCallbackDataEXT deserialize_struct(VkDeviceAddressBindingCallbackDataEXT::Reader reader){
        auto result=VkDeviceAddressBindingCallbackDataEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){[&](){(result.baseAddress)=reader.getbaseAddress();}();}();
[&](){[&](){(result.size)=reader.getsize();}();}();
[&](){[&](){[&](){(result.bindingType)=reader.getbindingType();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDeviceAddressBindingCallbackDataEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDeviceAddressBindingCallbackDataEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceOpticalFlowFeaturesNV::Builder& builder, VkPhysicalDeviceOpticalFlowFeaturesNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setopticalFlow((member.opticalFlow));}();}();
}

    VkPhysicalDeviceOpticalFlowFeaturesNV deserialize_struct(VkPhysicalDeviceOpticalFlowFeaturesNV::Reader reader){
        auto result=VkPhysicalDeviceOpticalFlowFeaturesNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.opticalFlow)=reader.getopticalFlow();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceOpticalFlowFeaturesNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceOpticalFlowFeaturesNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceOpticalFlowPropertiesNV::Builder& builder, VkPhysicalDeviceOpticalFlowPropertiesNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setsupportedOutputGridSizes((member.supportedOutputGridSizes));}();}();}();
[&](){[&](){[&](){return builder.setsupportedHintGridSizes((member.supportedHintGridSizes));}();}();}();
[&](){[&](){return builder.sethintSupported((member.hintSupported));}();}();
[&](){[&](){return builder.setcostSupported((member.costSupported));}();}();
[&](){[&](){return builder.setbidirectionalFlowSupported((member.bidirectionalFlowSupported));}();}();
[&](){[&](){return builder.setglobalFlowSupported((member.globalFlowSupported));}();}();
[&](){return builder.setminWidth((member.minWidth));}();
[&](){return builder.setminHeight((member.minHeight));}();
[&](){return builder.setmaxWidth((member.maxWidth));}();
[&](){return builder.setmaxHeight((member.maxHeight));}();
[&](){return builder.setmaxNumRegionsOfInterest((member.maxNumRegionsOfInterest));}();
}

    VkPhysicalDeviceOpticalFlowPropertiesNV deserialize_struct(VkPhysicalDeviceOpticalFlowPropertiesNV::Reader reader){
        auto result=VkPhysicalDeviceOpticalFlowPropertiesNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.supportedOutputGridSizes)=reader.getsupportedOutputGridSizes();}();}();}();
[&](){[&](){[&](){(result.supportedHintGridSizes)=reader.getsupportedHintGridSizes();}();}();}();
[&](){[&](){(result.hintSupported)=reader.gethintSupported();}();}();
[&](){[&](){(result.costSupported)=reader.getcostSupported();}();}();
[&](){[&](){(result.bidirectionalFlowSupported)=reader.getbidirectionalFlowSupported();}();}();
[&](){[&](){(result.globalFlowSupported)=reader.getglobalFlowSupported();}();}();
[&](){(result.minWidth)=reader.getminWidth();}();
[&](){(result.minHeight)=reader.getminHeight();}();
[&](){(result.maxWidth)=reader.getmaxWidth();}();
[&](){(result.maxHeight)=reader.getmaxHeight();}();
[&](){(result.maxNumRegionsOfInterest)=reader.getmaxNumRegionsOfInterest();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceOpticalFlowPropertiesNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceOpticalFlowPropertiesNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkOpticalFlowImageFormatInfoNV::Builder& builder, VkOpticalFlowImageFormatInfoNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setusage((member.usage));}();}();}();
}

    VkOpticalFlowImageFormatInfoNV deserialize_struct(VkOpticalFlowImageFormatInfoNV::Reader reader){
        auto result=VkOpticalFlowImageFormatInfoNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.usage)=reader.getusage();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkOpticalFlowImageFormatInfoNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkOpticalFlowImageFormatInfoNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkOpticalFlowImageFormatPropertiesNV::Builder& builder, VkOpticalFlowImageFormatPropertiesNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setformat((member.format));}();}();}();
}

    VkOpticalFlowImageFormatPropertiesNV deserialize_struct(VkOpticalFlowImageFormatPropertiesNV::Reader reader){
        auto result=VkOpticalFlowImageFormatPropertiesNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.format)=reader.getformat();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkOpticalFlowImageFormatPropertiesNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkOpticalFlowImageFormatPropertiesNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkOpticalFlowSessionCreateInfoNV::Builder& builder, VkOpticalFlowSessionCreateInfoNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setwidth((member.width));}();
[&](){return builder.setheight((member.height));}();
[&](){[&](){[&](){return builder.setimageFormat((member.imageFormat));}();}();}();
[&](){[&](){[&](){return builder.setflowVectorFormat((member.flowVectorFormat));}();}();}();
[&](){[&](){[&](){return builder.setcostFormat((member.costFormat));}();}();}();
[&](){[&](){[&](){return builder.setoutputGridSize((member.outputGridSize));}();}();}();
[&](){[&](){[&](){return builder.sethintGridSize((member.hintGridSize));}();}();}();
[&](){[&](){[&](){return builder.setperformanceLevel((member.performanceLevel));}();}();}();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
}

    VkOpticalFlowSessionCreateInfoNV deserialize_struct(VkOpticalFlowSessionCreateInfoNV::Reader reader){
        auto result=VkOpticalFlowSessionCreateInfoNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.width)=reader.getwidth();}();
[&](){(result.height)=reader.getheight();}();
[&](){[&](){[&](){(result.imageFormat)=reader.getimageFormat();}();}();}();
[&](){[&](){[&](){(result.flowVectorFormat)=reader.getflowVectorFormat();}();}();}();
[&](){[&](){[&](){(result.costFormat)=reader.getcostFormat();}();}();}();
[&](){[&](){[&](){(result.outputGridSize)=reader.getoutputGridSize();}();}();}();
[&](){[&](){[&](){(result.hintGridSize)=reader.gethintGridSize();}();}();}();
[&](){[&](){[&](){(result.performanceLevel)=reader.getperformanceLevel();}();}();}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkOpticalFlowSessionCreateInfoNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkOpticalFlowSessionCreateInfoNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkOpticalFlowSessionCreatePrivateDataInfoNV::Builder& builder, VkOpticalFlowSessionCreatePrivateDataInfoNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setid((member.id));}();
[&](){return builder.setsize((member.size));}();
[&](){
            if ((member.pPrivateData)==NULL){
                builder.disownpPrivateData();
            return; }[&](){
            if (((char*)(member.pPrivateData).pPrivateData)==NULL){
                builder.disownpPrivateData();
            return; }
        auto proto_arr=builder.initpPrivateData();
        for(int apNwuhR=0; apNwuhR < strlen(((char*)(member.pPrivateData).pPrivateData))+1; apNwuhR++){
            [&](){return proto_arr.set(apNwuhR,(((char*)(member.pPrivateData).pPrivateData)[apNwuhR]));}();
        }
        }();}();
}

    VkOpticalFlowSessionCreatePrivateDataInfoNV deserialize_struct(VkOpticalFlowSessionCreatePrivateDataInfoNV::Reader reader){
        auto result=VkOpticalFlowSessionCreatePrivateDataInfoNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.id)=reader.getid();}();
[&](){(result.size)=reader.getsize();}();
[&](){ void* temp_ghjOvll[&](){
            if (!reader.haspPrivateData()){
                (result.pPrivateData)=NULL;
            return; }char* temp_lfGIRIt;[&](){
            if (!reader.haspPrivateData()){
                (temp_lfGIRIt.pPrivateData)=NULL;
            return; }{native_concat()}=(char*)malloc(reader.getpPrivateData().size();*sizeof(char));
        auto proto_arr=reader.getpPrivateData(reader.getpPrivateData().size(););
        for(int JoEHaqb=0; JoEHaqb < reader.getpPrivateData().size();; JoEHaqb++){
            [&](){((temp_lfGIRIt.pPrivateData)[JoEHaqb])=proto_arr[JoEHaqb];}();
        }
        }();(result.pPrivateData)=temp_lfGIRIt;}();(result.pPrivateData)=temp_ghjOvll;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkOpticalFlowSessionCreatePrivateDataInfoNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkOpticalFlowSessionCreatePrivateDataInfoNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkOpticalFlowExecuteInfoNV::Builder& builder, VkOpticalFlowExecuteInfoNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){return builder.setregionCount((member.regionCount));}();
[&](){
            if ((member.pRegions)==NULL){
                builder.disownpRegions();
            return; }
        auto proto_arr=builder.initpRegions();
        for(int OlhHmnZ=0; OlhHmnZ < member.regionCount; OlhHmnZ++){
            [&](){
            auto temp=proto_arr[OlhHmnZ];
            return serialize_struct(((member.pRegions)[OlhHmnZ]), temp);
            }();
        }
        }();
}

    VkOpticalFlowExecuteInfoNV deserialize_struct(VkOpticalFlowExecuteInfoNV::Reader reader){
        auto result=VkOpticalFlowExecuteInfoNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){(result.regionCount)=reader.getregionCount();}();
[&](){ VkRect2D* temp_PTyTFgc[&](){
            if (!reader.haspRegions()){
                (result.pRegions)=NULL;
            return; }{native_concat()}=(VkRect2D*)malloc(result.regionCount*sizeof(VkRect2D));
        auto proto_arr=reader.getpRegions(result.regionCount);
        for(int JAOechs=0; JAOechs < result.regionCount; JAOechs++){
            [&](){
            auto temp=proto_arr[JAOechs];
            ((result.pRegions)[JAOechs])=deserialize_struct(temp);
            }();
        }
        }();(result.pRegions)=temp_PTyTFgc;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkOpticalFlowExecuteInfoNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkOpticalFlowExecuteInfoNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceFaultFeaturesEXT::Builder& builder, VkPhysicalDeviceFaultFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setdeviceFault((member.deviceFault));}();}();
[&](){[&](){return builder.setdeviceFaultVendorBinary((member.deviceFaultVendorBinary));}();}();
}

    VkPhysicalDeviceFaultFeaturesEXT deserialize_struct(VkPhysicalDeviceFaultFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceFaultFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.deviceFault)=reader.getdeviceFault();}();}();
[&](){[&](){(result.deviceFaultVendorBinary)=reader.getdeviceFaultVendorBinary();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceFaultFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceFaultFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDeviceFaultAddressInfoEXT::Builder& builder, VkDeviceFaultAddressInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setaddressType((member.addressType));}();}();}();
[&](){[&](){return builder.setreportedAddress((member.reportedAddress));}();}();
[&](){[&](){return builder.setaddressPrecision((member.addressPrecision));}();}();
}

    VkDeviceFaultAddressInfoEXT deserialize_struct(VkDeviceFaultAddressInfoEXT::Reader reader){
        auto result=VkDeviceFaultAddressInfoEXT();
    
[&](){[&](){[&](){(result.addressType)=reader.getaddressType();}();}();}();
[&](){[&](){(result.reportedAddress)=reader.getreportedAddress();}();}();
[&](){[&](){(result.addressPrecision)=reader.getaddressPrecision();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDeviceFaultAddressInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDeviceFaultAddressInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDeviceFaultVendorInfoEXT::Builder& builder, VkDeviceFaultVendorInfoEXT member){
        
    
[&](){
        auto proto_arr=builder.initdescription();
        for(int oakWTIB=0; oakWTIB < VK_MAX_DESCRIPTION_SIZE; oakWTIB++){
            [&](){return proto_arr.set(oakWTIB,((member.description)[oakWTIB]));}();
        }
        }();
[&](){return builder.setvendorFaultCode((member.vendorFaultCode));}();
[&](){return builder.setvendorFaultData((member.vendorFaultData));}();
}

    VkDeviceFaultVendorInfoEXT deserialize_struct(VkDeviceFaultVendorInfoEXT::Reader reader){
        auto result=VkDeviceFaultVendorInfoEXT();
    
[&](){
        auto proto_arr=reader.getdescription(VK_MAX_DESCRIPTION_SIZE);
        for(int oakWTIB=0; oakWTIB < VK_MAX_DESCRIPTION_SIZE; oakWTIB++){
            [&](){((result.description)[oakWTIB])=proto_arr[oakWTIB];}();
        }
        }();
[&](){(result.vendorFaultCode)=reader.getvendorFaultCode();}();
[&](){(result.vendorFaultData)=reader.getvendorFaultData();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDeviceFaultVendorInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDeviceFaultVendorInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDeviceFaultCountsEXT::Builder& builder, VkDeviceFaultCountsEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setaddressInfoCount((member.addressInfoCount));}();
[&](){return builder.setvendorInfoCount((member.vendorInfoCount));}();
[&](){[&](){return builder.setvendorBinarySize((member.vendorBinarySize));}();}();
}

    VkDeviceFaultCountsEXT deserialize_struct(VkDeviceFaultCountsEXT::Reader reader){
        auto result=VkDeviceFaultCountsEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.addressInfoCount)=reader.getaddressInfoCount();}();
[&](){(result.vendorInfoCount)=reader.getvendorInfoCount();}();
[&](){[&](){(result.vendorBinarySize)=reader.getvendorBinarySize();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDeviceFaultCountsEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDeviceFaultCountsEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDeviceFaultInfoEXT::Builder& builder, VkDeviceFaultInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
        auto proto_arr=builder.initdescription();
        for(int oakWTIB=0; oakWTIB < VK_MAX_DESCRIPTION_SIZE; oakWTIB++){
            [&](){return proto_arr.set(oakWTIB,((member.description)[oakWTIB]));}();
        }
        }();
[&](){
            if ((member.pAddressInfos)==NULL){
                builder.disownpAddressInfos();
            return; }
        auto proto_arr=builder.initpAddressInfos();
        for(int QjEnqIT=0; QjEnqIT < 1; QjEnqIT++){
            [&](){
            auto temp=proto_arr[QjEnqIT];
            return serialize_struct(((member.pAddressInfos)[QjEnqIT]), temp);
            }();
        }
        }();
[&](){
            if ((member.pVendorInfos)==NULL){
                builder.disownpVendorInfos();
            return; }
        auto proto_arr=builder.initpVendorInfos();
        for(int fZmZSvT=0; fZmZSvT < 1; fZmZSvT++){
            [&](){
            auto temp=proto_arr[fZmZSvT];
            return serialize_struct(((member.pVendorInfos)[fZmZSvT]), temp);
            }();
        }
        }();
[&](){
            if ((member.pVendorBinaryData)==NULL){
                builder.disownpVendorBinaryData();
            return; }[&](){
            if (((char*)(member.pVendorBinaryData).pVendorBinaryData)==NULL){
                builder.disownpVendorBinaryData();
            return; }
        auto proto_arr=builder.initpVendorBinaryData();
        for(int uBxoxYh=0; uBxoxYh < strlen(((char*)(member.pVendorBinaryData).pVendorBinaryData))+1; uBxoxYh++){
            [&](){return proto_arr.set(uBxoxYh,(((char*)(member.pVendorBinaryData).pVendorBinaryData)[uBxoxYh]));}();
        }
        }();}();
}

    VkDeviceFaultInfoEXT deserialize_struct(VkDeviceFaultInfoEXT::Reader reader){
        auto result=VkDeviceFaultInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){
        auto proto_arr=reader.getdescription(VK_MAX_DESCRIPTION_SIZE);
        for(int oakWTIB=0; oakWTIB < VK_MAX_DESCRIPTION_SIZE; oakWTIB++){
            [&](){((result.description)[oakWTIB])=proto_arr[oakWTIB];}();
        }
        }();
[&](){
            if (!reader.haspAddressInfos()){
                (result.pAddressInfos)=NULL;
            return; }{native_concat()}=(VkDeviceFaultAddressInfoEXT*)malloc(1*sizeof(VkDeviceFaultAddressInfoEXT));
        auto proto_arr=reader.getpAddressInfos(1);
        for(int QjEnqIT=0; QjEnqIT < 1; QjEnqIT++){
            [&](){
            auto temp=proto_arr[QjEnqIT];
            ((result.pAddressInfos)[QjEnqIT])=deserialize_struct(temp);
            }();
        }
        }();
[&](){
            if (!reader.haspVendorInfos()){
                (result.pVendorInfos)=NULL;
            return; }{native_concat()}=(VkDeviceFaultVendorInfoEXT*)malloc(1*sizeof(VkDeviceFaultVendorInfoEXT));
        auto proto_arr=reader.getpVendorInfos(1);
        for(int fZmZSvT=0; fZmZSvT < 1; fZmZSvT++){
            [&](){
            auto temp=proto_arr[fZmZSvT];
            ((result.pVendorInfos)[fZmZSvT])=deserialize_struct(temp);
            }();
        }
        }();
[&](){
            if (!reader.haspVendorBinaryData()){
                (result.pVendorBinaryData)=NULL;
            return; }char* temp_uwlkinv;[&](){
            if (!reader.haspVendorBinaryData()){
                (temp_uwlkinv.pVendorBinaryData)=NULL;
            return; }{native_concat()}=(char*)malloc(reader.getpVendorBinaryData().size();*sizeof(char));
        auto proto_arr=reader.getpVendorBinaryData(reader.getpVendorBinaryData().size(););
        for(int uBxoxYh=0; uBxoxYh < reader.getpVendorBinaryData().size();; uBxoxYh++){
            [&](){((temp_uwlkinv.pVendorBinaryData)[uBxoxYh])=proto_arr[uBxoxYh];}();
        }
        }();(result.pVendorBinaryData)=temp_uwlkinv;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDeviceFaultInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDeviceFaultInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDeviceFaultVendorBinaryHeaderVersionOneEXT::Builder& builder, VkDeviceFaultVendorBinaryHeaderVersionOneEXT member){
        
    
[&](){return builder.setheaderSize((member.headerSize));}();
[&](){[&](){[&](){return builder.setheaderVersion((member.headerVersion));}();}();}();
[&](){return builder.setvendorID((member.vendorID));}();
[&](){return builder.setdeviceID((member.deviceID));}();
[&](){return builder.setdriverVersion((member.driverVersion));}();
[&](){
        auto proto_arr=builder.initpipelineCacheUUID();
        for(int pKnzMjr=0; pKnzMjr < VK_UUID_SIZE; pKnzMjr++){
            [&](){return proto_arr.set(pKnzMjr,((member.pipelineCacheUUID)[pKnzMjr]));}();
        }
        }();
[&](){return builder.setapplicationNameOffset((member.applicationNameOffset));}();
[&](){return builder.setapplicationVersion((member.applicationVersion));}();
[&](){return builder.setengineNameOffset((member.engineNameOffset));}();
[&](){return builder.setengineVersion((member.engineVersion));}();
[&](){return builder.setapiVersion((member.apiVersion));}();
}

    VkDeviceFaultVendorBinaryHeaderVersionOneEXT deserialize_struct(VkDeviceFaultVendorBinaryHeaderVersionOneEXT::Reader reader){
        auto result=VkDeviceFaultVendorBinaryHeaderVersionOneEXT();
    
[&](){(result.headerSize)=reader.getheaderSize();}();
[&](){[&](){[&](){(result.headerVersion)=reader.getheaderVersion();}();}();}();
[&](){(result.vendorID)=reader.getvendorID();}();
[&](){(result.deviceID)=reader.getdeviceID();}();
[&](){(result.driverVersion)=reader.getdriverVersion();}();
[&](){
        auto proto_arr=reader.getpipelineCacheUUID(VK_UUID_SIZE);
        for(int pKnzMjr=0; pKnzMjr < VK_UUID_SIZE; pKnzMjr++){
            [&](){((result.pipelineCacheUUID)[pKnzMjr])=proto_arr[pKnzMjr];}();
        }
        }();
[&](){(result.applicationNameOffset)=reader.getapplicationNameOffset();}();
[&](){(result.applicationVersion)=reader.getapplicationVersion();}();
[&](){(result.engineNameOffset)=reader.getengineNameOffset();}();
[&](){(result.engineVersion)=reader.getengineVersion();}();
[&](){(result.apiVersion)=reader.getapiVersion();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDeviceFaultVendorBinaryHeaderVersionOneEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDeviceFaultVendorBinaryHeaderVersionOneEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT::Builder& builder, VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setpipelineLibraryGroupHandles((member.pipelineLibraryGroupHandles));}();}();
}

    VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT deserialize_struct(VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT::Reader reader){
        auto result=VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.pipelineLibraryGroupHandles)=reader.getpipelineLibraryGroupHandles();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDepthBiasInfoEXT::Builder& builder, VkDepthBiasInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setdepthBiasConstantFactor((member.depthBiasConstantFactor));}();
[&](){return builder.setdepthBiasClamp((member.depthBiasClamp));}();
[&](){return builder.setdepthBiasSlopeFactor((member.depthBiasSlopeFactor));}();
}

    VkDepthBiasInfoEXT deserialize_struct(VkDepthBiasInfoEXT::Reader reader){
        auto result=VkDepthBiasInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.depthBiasConstantFactor)=reader.getdepthBiasConstantFactor();}();
[&](){(result.depthBiasClamp)=reader.getdepthBiasClamp();}();
[&](){(result.depthBiasSlopeFactor)=reader.getdepthBiasSlopeFactor();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDepthBiasInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDepthBiasInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDepthBiasRepresentationInfoEXT::Builder& builder, VkDepthBiasRepresentationInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setdepthBiasRepresentation((member.depthBiasRepresentation));}();}();}();
[&](){[&](){return builder.setdepthBiasExact((member.depthBiasExact));}();}();
}

    VkDepthBiasRepresentationInfoEXT deserialize_struct(VkDepthBiasRepresentationInfoEXT::Reader reader){
        auto result=VkDepthBiasRepresentationInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.depthBiasRepresentation)=reader.getdepthBiasRepresentation();}();}();}();
[&](){[&](){(result.depthBiasExact)=reader.getdepthBiasExact();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDepthBiasRepresentationInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDepthBiasRepresentationInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDecompressMemoryRegionNV::Builder& builder, VkDecompressMemoryRegionNV member){
        
    
[&](){[&](){return builder.setsrcAddress((member.srcAddress));}();}();
[&](){[&](){return builder.setdstAddress((member.dstAddress));}();}();
[&](){[&](){return builder.setcompressedSize((member.compressedSize));}();}();
[&](){[&](){return builder.setdecompressedSize((member.decompressedSize));}();}();
[&](){[&](){[&](){return builder.setdecompressionMethod((member.decompressionMethod));}();}();}();
}

    VkDecompressMemoryRegionNV deserialize_struct(VkDecompressMemoryRegionNV::Reader reader){
        auto result=VkDecompressMemoryRegionNV();
    
[&](){[&](){(result.srcAddress)=reader.getsrcAddress();}();}();
[&](){[&](){(result.dstAddress)=reader.getdstAddress();}();}();
[&](){[&](){(result.compressedSize)=reader.getcompressedSize();}();}();
[&](){[&](){(result.decompressedSize)=reader.getdecompressedSize();}();}();
[&](){[&](){[&](){(result.decompressionMethod)=reader.getdecompressionMethod();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDecompressMemoryRegionNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDecompressMemoryRegionNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM::Builder& builder, VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setshaderCoreMask((member.shaderCoreMask));}();
[&](){return builder.setshaderCoreCount((member.shaderCoreCount));}();
[&](){return builder.setshaderWarpsPerCore((member.shaderWarpsPerCore));}();
}

    VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM deserialize_struct(VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM::Reader reader){
        auto result=VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.shaderCoreMask)=reader.getshaderCoreMask();}();
[&](){(result.shaderCoreCount)=reader.getshaderCoreCount();}();
[&](){(result.shaderWarpsPerCore)=reader.getshaderWarpsPerCore();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM::Builder& builder, VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setshaderCoreBuiltins((member.shaderCoreBuiltins));}();}();
}

    VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM deserialize_struct(VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM::Reader reader){
        auto result=VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.shaderCoreBuiltins)=reader.getshaderCoreBuiltins();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkFrameBoundaryEXT::Builder& builder, VkFrameBoundaryEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){return builder.setframeID((member.frameID));}();
[&](){return builder.setimageCount((member.imageCount));}();
[&](){
            if ((member.pImages)==NULL){
                builder.disownpImages();
            return; }
        auto proto_arr=builder.initpImages();
        for(int bDkiYkB=0; bDkiYkB < member.imageCount; bDkiYkB++){
            [&](){return proto_arr.set(bDkiYkB,serialize_handle((member.pImages)[bDkiYkB]));}();
        }
        }();
[&](){return builder.setbufferCount((member.bufferCount));}();
[&](){
            if ((member.pBuffers)==NULL){
                builder.disownpBuffers();
            return; }
        auto proto_arr=builder.initpBuffers();
        for(int dnzUVcs=0; dnzUVcs < member.bufferCount; dnzUVcs++){
            [&](){return proto_arr.set(dnzUVcs,serialize_handle((member.pBuffers)[dnzUVcs]));}();
        }
        }();
[&](){return builder.settagName((member.tagName));}();
[&](){return builder.settagSize((member.tagSize));}();
[&](){
            if ((member.pTag)==NULL){
                builder.disownpTag();
            return; }[&](){
            if (((char*)(member.pTag).pTag)==NULL){
                builder.disownpTag();
            return; }
        auto proto_arr=builder.initpTag();
        for(int RyqFIjd=0; RyqFIjd < strlen(((char*)(member.pTag).pTag))+1; RyqFIjd++){
            [&](){return proto_arr.set(RyqFIjd,(((char*)(member.pTag).pTag)[RyqFIjd]));}();
        }
        }();}();
}

    VkFrameBoundaryEXT deserialize_struct(VkFrameBoundaryEXT::Reader reader){
        auto result=VkFrameBoundaryEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){(result.frameID)=reader.getframeID();}();
[&](){(result.imageCount)=reader.getimageCount();}();
[&](){ VkImage* temp_BqRJDpW[&](){
            if (!reader.haspImages()){
                (result.pImages)=NULL;
            return; }{native_concat()}=(VkImage*)malloc(result.imageCount*sizeof(VkImage));
        auto proto_arr=reader.getpImages(result.imageCount);
        for(int FpSGybG=0; FpSGybG < result.imageCount; FpSGybG++){
            [&](){((result.pImages)[FpSGybG])=deserialize_handle(proto_arr[FpSGybG]);}();
        }
        }();(result.pImages)=temp_BqRJDpW;}();
[&](){(result.bufferCount)=reader.getbufferCount();}();
[&](){ VkBuffer* temp_rIfWorL[&](){
            if (!reader.haspBuffers()){
                (result.pBuffers)=NULL;
            return; }{native_concat()}=(VkBuffer*)malloc(result.bufferCount*sizeof(VkBuffer));
        auto proto_arr=reader.getpBuffers(result.bufferCount);
        for(int bCTiDDG=0; bCTiDDG < result.bufferCount; bCTiDDG++){
            [&](){((result.pBuffers)[bCTiDDG])=deserialize_handle(proto_arr[bCTiDDG]);}();
        }
        }();(result.pBuffers)=temp_rIfWorL;}();
[&](){(result.tagName)=reader.gettagName();}();
[&](){(result.tagSize)=reader.gettagSize();}();
[&](){ void* temp_xlgiUqt[&](){
            if (!reader.haspTag()){
                (result.pTag)=NULL;
            return; }char* temp_wOnqPmD;[&](){
            if (!reader.haspTag()){
                (temp_wOnqPmD.pTag)=NULL;
            return; }{native_concat()}=(char*)malloc(reader.getpTag().size();*sizeof(char));
        auto proto_arr=reader.getpTag(reader.getpTag().size(););
        for(int lxDYfsn=0; lxDYfsn < reader.getpTag().size();; lxDYfsn++){
            [&](){((temp_wOnqPmD.pTag)[lxDYfsn])=proto_arr[lxDYfsn];}();
        }
        }();(result.pTag)=temp_wOnqPmD;}();(result.pTag)=temp_xlgiUqt;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkFrameBoundaryEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkFrameBoundaryEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceFrameBoundaryFeaturesEXT::Builder& builder, VkPhysicalDeviceFrameBoundaryFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setframeBoundary((member.frameBoundary));}();}();
}

    VkPhysicalDeviceFrameBoundaryFeaturesEXT deserialize_struct(VkPhysicalDeviceFrameBoundaryFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceFrameBoundaryFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.frameBoundary)=reader.getframeBoundary();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceFrameBoundaryFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceFrameBoundaryFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT::Builder& builder, VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setdynamicRenderingUnusedAttachments((member.dynamicRenderingUnusedAttachments));}();}();
}

    VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT deserialize_struct(VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.dynamicRenderingUnusedAttachments)=reader.getdynamicRenderingUnusedAttachments();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSurfacePresentModeEXT::Builder& builder, VkSurfacePresentModeEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setpresentMode((member.presentMode));}();}();}();
}

    VkSurfacePresentModeEXT deserialize_struct(VkSurfacePresentModeEXT::Reader reader){
        auto result=VkSurfacePresentModeEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.presentMode)=reader.getpresentMode();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSurfacePresentModeEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSurfacePresentModeEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSurfacePresentScalingCapabilitiesEXT::Builder& builder, VkSurfacePresentScalingCapabilitiesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setsupportedPresentScaling((member.supportedPresentScaling));}();}();}();
[&](){[&](){[&](){return builder.setsupportedPresentGravityX((member.supportedPresentGravityX));}();}();}();
[&](){[&](){[&](){return builder.setsupportedPresentGravityY((member.supportedPresentGravityY));}();}();}();
[&](){
            auto temp=builder.initminScaledImageExtent(minScaledImageExtent);
            return serialize_struct((member.minScaledImageExtent), temp);
            }();
[&](){
            auto temp=builder.initmaxScaledImageExtent(maxScaledImageExtent);
            return serialize_struct((member.maxScaledImageExtent), temp);
            }();
}

    VkSurfacePresentScalingCapabilitiesEXT deserialize_struct(VkSurfacePresentScalingCapabilitiesEXT::Reader reader){
        auto result=VkSurfacePresentScalingCapabilitiesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.supportedPresentScaling)=reader.getsupportedPresentScaling();}();}();}();
[&](){[&](){[&](){(result.supportedPresentGravityX)=reader.getsupportedPresentGravityX();}();}();}();
[&](){[&](){[&](){(result.supportedPresentGravityY)=reader.getsupportedPresentGravityY();}();}();}();
[&](){
            auto temp=reader.getminScaledImageExtent();
            (result.minScaledImageExtent)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getmaxScaledImageExtent();
            (result.maxScaledImageExtent)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSurfacePresentScalingCapabilitiesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSurfacePresentScalingCapabilitiesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSurfacePresentModeCompatibilityEXT::Builder& builder, VkSurfacePresentModeCompatibilityEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setpresentModeCount((member.presentModeCount));}();
[&](){
            if ((member.pPresentModes)==NULL){
                builder.disownpPresentModes();
            return; }
        auto proto_arr=builder.initpPresentModes();
        for(int GuPZwgH=0; GuPZwgH < member.presentModeCount; GuPZwgH++){
            [&](){[&](){[&](){return proto_arr.set(GuPZwgH,((member.pPresentModes)[GuPZwgH]));}();}();}();
        }
        }();
}

    VkSurfacePresentModeCompatibilityEXT deserialize_struct(VkSurfacePresentModeCompatibilityEXT::Reader reader){
        auto result=VkSurfacePresentModeCompatibilityEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.presentModeCount)=reader.getpresentModeCount();}();
[&](){
            if (!reader.haspPresentModes()){
                (result.pPresentModes)=NULL;
            return; }{native_concat()}=(VkPresentModeKHR*)malloc(result.presentModeCount*sizeof(VkPresentModeKHR));
        auto proto_arr=reader.getpPresentModes(result.presentModeCount);
        for(int GuPZwgH=0; GuPZwgH < result.presentModeCount; GuPZwgH++){
            [&](){[&](){[&](){((result.pPresentModes)[GuPZwgH])=proto_arr[GuPZwgH];}();}();}();
        }
        }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSurfacePresentModeCompatibilityEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSurfacePresentModeCompatibilityEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT::Builder& builder, VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setswapchainMaintenance1((member.swapchainMaintenance1));}();}();
}

    VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT deserialize_struct(VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.swapchainMaintenance1)=reader.getswapchainMaintenance1();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSwapchainPresentFenceInfoEXT::Builder& builder, VkSwapchainPresentFenceInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setswapchainCount((member.swapchainCount));}();
[&](){
            if ((member.pFences)==NULL){
                builder.disownpFences();
            return; }
        auto proto_arr=builder.initpFences();
        for(int ocOiHLH=0; ocOiHLH < member.swapchainCount; ocOiHLH++){
            [&](){return proto_arr.set(ocOiHLH,serialize_handle((member.pFences)[ocOiHLH]));}();
        }
        }();
}

    VkSwapchainPresentFenceInfoEXT deserialize_struct(VkSwapchainPresentFenceInfoEXT::Reader reader){
        auto result=VkSwapchainPresentFenceInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.swapchainCount)=reader.getswapchainCount();}();
[&](){ VkFence* temp_BaHTyXG[&](){
            if (!reader.haspFences()){
                (result.pFences)=NULL;
            return; }{native_concat()}=(VkFence*)malloc(result.swapchainCount*sizeof(VkFence));
        auto proto_arr=reader.getpFences(result.swapchainCount);
        for(int iQgYhvq=0; iQgYhvq < result.swapchainCount; iQgYhvq++){
            [&](){((result.pFences)[iQgYhvq])=deserialize_handle(proto_arr[iQgYhvq]);}();
        }
        }();(result.pFences)=temp_BaHTyXG;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSwapchainPresentFenceInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSwapchainPresentFenceInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSwapchainPresentModesCreateInfoEXT::Builder& builder, VkSwapchainPresentModesCreateInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setpresentModeCount((member.presentModeCount));}();
[&](){
            if ((member.pPresentModes)==NULL){
                builder.disownpPresentModes();
            return; }
        auto proto_arr=builder.initpPresentModes();
        for(int uqvLxPC=0; uqvLxPC < member.presentModeCount; uqvLxPC++){
            [&](){[&](){[&](){return proto_arr.set(uqvLxPC,((member.pPresentModes)[uqvLxPC]));}();}();}();
        }
        }();
}

    VkSwapchainPresentModesCreateInfoEXT deserialize_struct(VkSwapchainPresentModesCreateInfoEXT::Reader reader){
        auto result=VkSwapchainPresentModesCreateInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.presentModeCount)=reader.getpresentModeCount();}();
[&](){ VkPresentModeKHR* temp_dznRqNd[&](){
            if (!reader.haspPresentModes()){
                (result.pPresentModes)=NULL;
            return; }{native_concat()}=(VkPresentModeKHR*)malloc(result.presentModeCount*sizeof(VkPresentModeKHR));
        auto proto_arr=reader.getpPresentModes(result.presentModeCount);
        for(int nDYklWI=0; nDYklWI < result.presentModeCount; nDYklWI++){
            [&](){[&](){[&](){((result.pPresentModes)[nDYklWI])=proto_arr[nDYklWI];}();}();}();
        }
        }();(result.pPresentModes)=temp_dznRqNd;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSwapchainPresentModesCreateInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSwapchainPresentModesCreateInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSwapchainPresentModeInfoEXT::Builder& builder, VkSwapchainPresentModeInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setswapchainCount((member.swapchainCount));}();
[&](){
            if ((member.pPresentModes)==NULL){
                builder.disownpPresentModes();
            return; }
        auto proto_arr=builder.initpPresentModes();
        for(int uqvLxPC=0; uqvLxPC < member.swapchainCount; uqvLxPC++){
            [&](){[&](){[&](){return proto_arr.set(uqvLxPC,((member.pPresentModes)[uqvLxPC]));}();}();}();
        }
        }();
}

    VkSwapchainPresentModeInfoEXT deserialize_struct(VkSwapchainPresentModeInfoEXT::Reader reader){
        auto result=VkSwapchainPresentModeInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.swapchainCount)=reader.getswapchainCount();}();
[&](){ VkPresentModeKHR* temp_gGcJNqc[&](){
            if (!reader.haspPresentModes()){
                (result.pPresentModes)=NULL;
            return; }{native_concat()}=(VkPresentModeKHR*)malloc(result.swapchainCount*sizeof(VkPresentModeKHR));
        auto proto_arr=reader.getpPresentModes(result.swapchainCount);
        for(int nDYklWI=0; nDYklWI < result.swapchainCount; nDYklWI++){
            [&](){[&](){[&](){((result.pPresentModes)[nDYklWI])=proto_arr[nDYklWI];}();}();}();
        }
        }();(result.pPresentModes)=temp_gGcJNqc;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSwapchainPresentModeInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSwapchainPresentModeInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSwapchainPresentScalingCreateInfoEXT::Builder& builder, VkSwapchainPresentScalingCreateInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setscalingBehavior((member.scalingBehavior));}();}();}();
[&](){[&](){[&](){return builder.setpresentGravityX((member.presentGravityX));}();}();}();
[&](){[&](){[&](){return builder.setpresentGravityY((member.presentGravityY));}();}();}();
}

    VkSwapchainPresentScalingCreateInfoEXT deserialize_struct(VkSwapchainPresentScalingCreateInfoEXT::Reader reader){
        auto result=VkSwapchainPresentScalingCreateInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.scalingBehavior)=reader.getscalingBehavior();}();}();}();
[&](){[&](){[&](){(result.presentGravityX)=reader.getpresentGravityX();}();}();}();
[&](){[&](){[&](){(result.presentGravityY)=reader.getpresentGravityY();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSwapchainPresentScalingCreateInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSwapchainPresentScalingCreateInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkReleaseSwapchainImagesInfoEXT::Builder& builder, VkReleaseSwapchainImagesInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setswapchain(serialize_handle(member.swapchain));}();
[&](){return builder.setimageIndexCount((member.imageIndexCount));}();
[&](){
            if ((member.pImageIndices)==NULL){
                builder.disownpImageIndices();
            return; }
        auto proto_arr=builder.initpImageIndices();
        for(int uFkTWYN=0; uFkTWYN < member.imageIndexCount; uFkTWYN++){
            [&](){return proto_arr.set(uFkTWYN,((member.pImageIndices)[uFkTWYN]));}();
        }
        }();
}

    VkReleaseSwapchainImagesInfoEXT deserialize_struct(VkReleaseSwapchainImagesInfoEXT::Reader reader){
        auto result=VkReleaseSwapchainImagesInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.swapchain)=deserialize_handle(reader.getswapchain());}();
[&](){(result.imageIndexCount)=reader.getimageIndexCount();}();
[&](){ uint32_t* temp_eqjbEhr[&](){
            if (!reader.haspImageIndices()){
                (result.pImageIndices)=NULL;
            return; }{native_concat()}=(uint32_t*)malloc(result.imageIndexCount*sizeof(uint32_t));
        auto proto_arr=reader.getpImageIndices(result.imageIndexCount);
        for(int daliJoD=0; daliJoD < result.imageIndexCount; daliJoD++){
            [&](){((result.pImageIndices)[daliJoD])=proto_arr[daliJoD];}();
        }
        }();(result.pImageIndices)=temp_eqjbEhr;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkReleaseSwapchainImagesInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkReleaseSwapchainImagesInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceDepthBiasControlFeaturesEXT::Builder& builder, VkPhysicalDeviceDepthBiasControlFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setdepthBiasControl((member.depthBiasControl));}();}();
[&](){[&](){return builder.setleastRepresentableValueForceUnormRepresentation((member.leastRepresentableValueForceUnormRepresentation));}();}();
[&](){[&](){return builder.setfloatRepresentation((member.floatRepresentation));}();}();
[&](){[&](){return builder.setdepthBiasExact((member.depthBiasExact));}();}();
}

    VkPhysicalDeviceDepthBiasControlFeaturesEXT deserialize_struct(VkPhysicalDeviceDepthBiasControlFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceDepthBiasControlFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.depthBiasControl)=reader.getdepthBiasControl();}();}();
[&](){[&](){(result.leastRepresentableValueForceUnormRepresentation)=reader.getleastRepresentableValueForceUnormRepresentation();}();}();
[&](){[&](){(result.floatRepresentation)=reader.getfloatRepresentation();}();}();
[&](){[&](){(result.depthBiasExact)=reader.getdepthBiasExact();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceDepthBiasControlFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceDepthBiasControlFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV::Builder& builder, VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setrayTracingInvocationReorder((member.rayTracingInvocationReorder));}();}();
}

    VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV deserialize_struct(VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV::Reader reader){
        auto result=VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.rayTracingInvocationReorder)=reader.getrayTracingInvocationReorder();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV::Builder& builder, VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setrayTracingInvocationReorderReorderingHint((member.rayTracingInvocationReorderReorderingHint));}();}();}();
}

    VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV deserialize_struct(VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV::Reader reader){
        auto result=VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.rayTracingInvocationReorderReorderingHint)=reader.getrayTracingInvocationReorderReorderingHint();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDirectDriverLoadingInfoLUNARG::Builder& builder, VkDirectDriverLoadingInfoLUNARG member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){
            auto temp=builder.initpfnGetInstanceProcAddr(pfnGetInstanceProcAddr);
            return serialize_funcpointer((member.pfnGetInstanceProcAddr), temp);
            }();
}

    VkDirectDriverLoadingInfoLUNARG deserialize_struct(VkDirectDriverLoadingInfoLUNARG::Reader reader){
        auto result=VkDirectDriverLoadingInfoLUNARG();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){
#ifndef CLIENT
            auto temp=reader.getpfnGetInstanceProcAddr();
            (result.pfnGetInstanceProcAddr)=deserialize_funcpointer(temp);
            #endif
}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDirectDriverLoadingInfoLUNARG member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
builder.setPFN_vkGetInstanceProcAddrLUNARG((uintptr_t)(member.pfnGetInstanceProcAddr));
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDirectDriverLoadingInfoLUNARG member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();
result.pfnGetInstanceProcAddr=reader.getPFN_vkGetInstanceProcAddrLUNARG();

    return result;
    #endif
    }
    

    void serialize_struct(VkDirectDriverLoadingListLUNARG::Builder& builder, VkDirectDriverLoadingListLUNARG member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setmode((member.mode));}();}();}();
[&](){return builder.setdriverCount((member.driverCount));}();
[&](){
            if ((member.pDrivers)==NULL){
                builder.disownpDrivers();
            return; }
        auto proto_arr=builder.initpDrivers();
        for(int QRMHLjh=0; QRMHLjh < member.driverCount; QRMHLjh++){
            [&](){
            auto temp=proto_arr[QRMHLjh];
            return serialize_struct(((member.pDrivers)[QRMHLjh]), temp);
            }();
        }
        }();
}

    VkDirectDriverLoadingListLUNARG deserialize_struct(VkDirectDriverLoadingListLUNARG::Reader reader){
        auto result=VkDirectDriverLoadingListLUNARG();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.mode)=reader.getmode();}();}();}();
[&](){(result.driverCount)=reader.getdriverCount();}();
[&](){ VkDirectDriverLoadingInfoLUNARG* temp_vSplIIz[&](){
            if (!reader.haspDrivers()){
                (result.pDrivers)=NULL;
            return; }{native_concat()}=(VkDirectDriverLoadingInfoLUNARG*)malloc(result.driverCount*sizeof(VkDirectDriverLoadingInfoLUNARG));
        auto proto_arr=reader.getpDrivers(result.driverCount);
        for(int auWfUrZ=0; auWfUrZ < result.driverCount; auWfUrZ++){
            [&](){
            auto temp=proto_arr[auWfUrZ];
            ((result.pDrivers)[auWfUrZ])=deserialize_struct(temp);
            }();
        }
        }();(result.pDrivers)=temp_vSplIIz;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDirectDriverLoadingListLUNARG member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDirectDriverLoadingListLUNARG member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM::Builder& builder, VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setmultiviewPerViewViewports((member.multiviewPerViewViewports));}();}();
}

    VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM deserialize_struct(VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM::Reader reader){
        auto result=VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.multiviewPerViewViewports)=reader.getmultiviewPerViewViewports();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR::Builder& builder, VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setrayTracingPositionFetch((member.rayTracingPositionFetch));}();}();
}

    VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR deserialize_struct(VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR::Reader reader){
        auto result=VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.rayTracingPositionFetch)=reader.getrayTracingPositionFetch();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkDeviceImageSubresourceInfoKHR::Builder& builder, VkDeviceImageSubresourceInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            if ((member.pCreateInfo)==NULL){
                builder.disownpCreateInfo();
            return; }
        auto proto_arr=builder.initpCreateInfo();
        for(int pUPULkH=0; pUPULkH < 1; pUPULkH++){
            [&](){
            auto temp=proto_arr[pUPULkH];
            return serialize_struct(((member.pCreateInfo)[pUPULkH]), temp);
            }();
        }
        }();
[&](){
            if ((member.pSubresource)==NULL){
                builder.disownpSubresource();
            return; }
        auto proto_arr=builder.initpSubresource();
        for(int iRoNHuq=0; iRoNHuq < 1; iRoNHuq++){
            [&](){
            auto temp=proto_arr[iRoNHuq];
            return serialize_struct(((member.pSubresource)[iRoNHuq]), temp);
            }();
        }
        }();
}

    VkDeviceImageSubresourceInfoKHR deserialize_struct(VkDeviceImageSubresourceInfoKHR::Reader reader){
        auto result=VkDeviceImageSubresourceInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){ VkImageCreateInfo* temp_GaGgIvU[&](){
            if (!reader.haspCreateInfo()){
                (result.pCreateInfo)=NULL;
            return; }{native_concat()}=(VkImageCreateInfo*)malloc(1*sizeof(VkImageCreateInfo));
        auto proto_arr=reader.getpCreateInfo(1);
        for(int OCzXYbh=0; OCzXYbh < 1; OCzXYbh++){
            [&](){
            auto temp=proto_arr[OCzXYbh];
            ((result.pCreateInfo)[OCzXYbh])=deserialize_struct(temp);
            }();
        }
        }();(result.pCreateInfo)=temp_GaGgIvU;}();
[&](){ VkImageSubresource2KHR* temp_bPPrxdS[&](){
            if (!reader.haspSubresource()){
                (result.pSubresource)=NULL;
            return; }{native_concat()}=(VkImageSubresource2KHR*)malloc(1*sizeof(VkImageSubresource2KHR));
        auto proto_arr=reader.getpSubresource(1);
        for(int palwAFi=0; palwAFi < 1; palwAFi++){
            [&](){
            auto temp=proto_arr[palwAFi];
            ((result.pSubresource)[palwAFi])=deserialize_struct(temp);
            }();
        }
        }();(result.pSubresource)=temp_bPPrxdS;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkDeviceImageSubresourceInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkDeviceImageSubresourceInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceShaderCorePropertiesARM::Builder& builder, VkPhysicalDeviceShaderCorePropertiesARM member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setpixelRate((member.pixelRate));}();
[&](){return builder.settexelRate((member.texelRate));}();
[&](){return builder.setfmaRate((member.fmaRate));}();
}

    VkPhysicalDeviceShaderCorePropertiesARM deserialize_struct(VkPhysicalDeviceShaderCorePropertiesARM::Reader reader){
        auto result=VkPhysicalDeviceShaderCorePropertiesARM();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.pixelRate)=reader.getpixelRate();}();
[&](){(result.texelRate)=reader.gettexelRate();}();
[&](){(result.fmaRate)=reader.getfmaRate();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceShaderCorePropertiesARM member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceShaderCorePropertiesARM member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM::Builder& builder, VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setmultiviewPerViewRenderAreas((member.multiviewPerViewRenderAreas));}();}();
}

    VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM deserialize_struct(VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM::Reader reader){
        auto result=VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.multiviewPerViewRenderAreas)=reader.getmultiviewPerViewRenderAreas();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM::Builder& builder, VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setperViewRenderAreaCount((member.perViewRenderAreaCount));}();
[&](){
            if ((member.pPerViewRenderAreas)==NULL){
                builder.disownpPerViewRenderAreas();
            return; }
        auto proto_arr=builder.initpPerViewRenderAreas();
        for(int BKTmmXF=0; BKTmmXF < member.perViewRenderAreaCount; BKTmmXF++){
            [&](){
            auto temp=proto_arr[BKTmmXF];
            return serialize_struct(((member.pPerViewRenderAreas)[BKTmmXF]), temp);
            }();
        }
        }();
}

    VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM deserialize_struct(VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM::Reader reader){
        auto result=VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){(result.perViewRenderAreaCount)=reader.getperViewRenderAreaCount();}();
[&](){ VkRect2D* temp_zZPIkNd[&](){
            if (!reader.haspPerViewRenderAreas()){
                (result.pPerViewRenderAreas)=NULL;
            return; }{native_concat()}=(VkRect2D*)malloc(result.perViewRenderAreaCount*sizeof(VkRect2D));
        auto proto_arr=reader.getpPerViewRenderAreas(result.perViewRenderAreaCount);
        for(int MYXytcc=0; MYXytcc < result.perViewRenderAreaCount; MYXytcc++){
            [&](){
            auto temp=proto_arr[MYXytcc];
            ((result.pPerViewRenderAreas)[MYXytcc])=deserialize_struct(temp);
            }();
        }
        }();(result.pPerViewRenderAreas)=temp_zZPIkNd;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkQueryLowLatencySupportNV::Builder& builder, VkQueryLowLatencySupportNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            if ((member.pQueriedLowLatencyData)==NULL){
                builder.disownpQueriedLowLatencyData();
            return; }[&](){
            if (((char*)(member.pQueriedLowLatencyData).pQueriedLowLatencyData)==NULL){
                builder.disownpQueriedLowLatencyData();
            return; }
        auto proto_arr=builder.initpQueriedLowLatencyData();
        for(int uSAhzUM=0; uSAhzUM < strlen(((char*)(member.pQueriedLowLatencyData).pQueriedLowLatencyData))+1; uSAhzUM++){
            [&](){return proto_arr.set(uSAhzUM,(((char*)(member.pQueriedLowLatencyData).pQueriedLowLatencyData)[uSAhzUM]));}();
        }
        }();}();
}

    VkQueryLowLatencySupportNV deserialize_struct(VkQueryLowLatencySupportNV::Reader reader){
        auto result=VkQueryLowLatencySupportNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){
            if (!reader.haspQueriedLowLatencyData()){
                (result.pQueriedLowLatencyData)=NULL;
            return; }char* temp_dLmkgMg;[&](){
            if (!reader.haspQueriedLowLatencyData()){
                (temp_dLmkgMg.pQueriedLowLatencyData)=NULL;
            return; }{native_concat()}=(char*)malloc(reader.getpQueriedLowLatencyData().size();*sizeof(char));
        auto proto_arr=reader.getpQueriedLowLatencyData(reader.getpQueriedLowLatencyData().size(););
        for(int uSAhzUM=0; uSAhzUM < reader.getpQueriedLowLatencyData().size();; uSAhzUM++){
            [&](){((temp_dLmkgMg.pQueriedLowLatencyData)[uSAhzUM])=proto_arr[uSAhzUM];}();
        }
        }();(result.pQueriedLowLatencyData)=temp_dLmkgMg;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkQueryLowLatencySupportNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkQueryLowLatencySupportNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkMemoryMapInfoKHR::Builder& builder, VkMemoryMapInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){return builder.setmemory(serialize_handle(member.memory));}();
[&](){[&](){return builder.setoffset((member.offset));}();}();
[&](){[&](){return builder.setsize((member.size));}();}();
}

    VkMemoryMapInfoKHR deserialize_struct(VkMemoryMapInfoKHR::Reader reader){
        auto result=VkMemoryMapInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){(result.memory)=deserialize_handle(reader.getmemory());}();
[&](){[&](){(result.offset)=reader.getoffset();}();}();
[&](){[&](){(result.size)=reader.getsize();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkMemoryMapInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkMemoryMapInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkMemoryUnmapInfoKHR::Builder& builder, VkMemoryUnmapInfoKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){return builder.setmemory(serialize_handle(member.memory));}();
}

    VkMemoryUnmapInfoKHR deserialize_struct(VkMemoryUnmapInfoKHR::Reader reader){
        auto result=VkMemoryUnmapInfoKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){(result.memory)=deserialize_handle(reader.getmemory());}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkMemoryUnmapInfoKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkMemoryUnmapInfoKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceShaderObjectFeaturesEXT::Builder& builder, VkPhysicalDeviceShaderObjectFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setshaderObject((member.shaderObject));}();}();
}

    VkPhysicalDeviceShaderObjectFeaturesEXT deserialize_struct(VkPhysicalDeviceShaderObjectFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceShaderObjectFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.shaderObject)=reader.getshaderObject();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceShaderObjectFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceShaderObjectFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceShaderObjectPropertiesEXT::Builder& builder, VkPhysicalDeviceShaderObjectPropertiesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
        auto proto_arr=builder.initshaderBinaryUUID();
        for(int ECztgMK=0; ECztgMK < VK_UUID_SIZE; ECztgMK++){
            [&](){return proto_arr.set(ECztgMK,((member.shaderBinaryUUID)[ECztgMK]));}();
        }
        }();
[&](){return builder.setshaderBinaryVersion((member.shaderBinaryVersion));}();
}

    VkPhysicalDeviceShaderObjectPropertiesEXT deserialize_struct(VkPhysicalDeviceShaderObjectPropertiesEXT::Reader reader){
        auto result=VkPhysicalDeviceShaderObjectPropertiesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){
        auto proto_arr=reader.getshaderBinaryUUID(VK_UUID_SIZE);
        for(int ECztgMK=0; ECztgMK < VK_UUID_SIZE; ECztgMK++){
            [&](){((result.shaderBinaryUUID)[ECztgMK])=proto_arr[ECztgMK];}();
        }
        }();
[&](){(result.shaderBinaryVersion)=reader.getshaderBinaryVersion();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceShaderObjectPropertiesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceShaderObjectPropertiesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkShaderCreateInfoEXT::Builder& builder, VkShaderCreateInfoEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setflags((member.flags));}();}();}();
[&](){[&](){[&](){return builder.setstage((member.stage));}();}();}();
[&](){[&](){[&](){return builder.setnextStage((member.nextStage));}();}();}();
[&](){[&](){[&](){return builder.setcodeType((member.codeType));}();}();}();
[&](){return builder.setcodeSize((member.codeSize));}();
[&](){
            if ((member.pCode)==NULL){
                builder.disownpCode();
            return; }[&](){
            if (((char*)(member.pCode).pCode)==NULL){
                builder.disownpCode();
            return; }
        auto proto_arr=builder.initpCode();
        for(int LndDMvv=0; LndDMvv < member.codeSize; LndDMvv++){
            [&](){return proto_arr.set(LndDMvv,(((char*)(member.pCode).pCode)[LndDMvv]));}();
        }
        }();}();
[&](){
            if ((member.pName)==NULL){
                builder.disownpName();
            return; }
        auto proto_arr=builder.initpName();
        for(int opTkazg=0; opTkazg < strlen((member.pName))+1; opTkazg++){
            [&](){return proto_arr.set(opTkazg,((member.pName)[opTkazg]));}();
        }
        }();
[&](){return builder.setsetLayoutCount((member.setLayoutCount));}();
[&](){
            if ((member.pSetLayouts)==NULL){
                builder.disownpSetLayouts();
            return; }
        auto proto_arr=builder.initpSetLayouts();
        for(int gfILRjy=0; gfILRjy < member.setLayoutCount; gfILRjy++){
            [&](){return proto_arr.set(gfILRjy,serialize_handle((member.pSetLayouts)[gfILRjy]));}();
        }
        }();
[&](){return builder.setpushConstantRangeCount((member.pushConstantRangeCount));}();
[&](){
            if ((member.pPushConstantRanges)==NULL){
                builder.disownpPushConstantRanges();
            return; }
        auto proto_arr=builder.initpPushConstantRanges();
        for(int fStWwBo=0; fStWwBo < member.pushConstantRangeCount; fStWwBo++){
            [&](){
            auto temp=proto_arr[fStWwBo];
            return serialize_struct(((member.pPushConstantRanges)[fStWwBo]), temp);
            }();
        }
        }();
[&](){
            if ((member.pSpecializationInfo)==NULL){
                builder.disownpSpecializationInfo();
            return; }
        auto proto_arr=builder.initpSpecializationInfo();
        for(int xbxpxgP=0; xbxpxgP < 1; xbxpxgP++){
            [&](){
            auto temp=proto_arr[xbxpxgP];
            return serialize_struct(((member.pSpecializationInfo)[xbxpxgP]), temp);
            }();
        }
        }();
}

    VkShaderCreateInfoEXT deserialize_struct(VkShaderCreateInfoEXT::Reader reader){
        auto result=VkShaderCreateInfoEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.flags)=reader.getflags();}();}();}();
[&](){[&](){[&](){(result.stage)=reader.getstage();}();}();}();
[&](){[&](){[&](){(result.nextStage)=reader.getnextStage();}();}();}();
[&](){[&](){[&](){(result.codeType)=reader.getcodeType();}();}();}();
[&](){(result.codeSize)=reader.getcodeSize();}();
[&](){ void* temp_pjzuZBN[&](){
            if (!reader.haspCode()){
                (result.pCode)=NULL;
            return; }char* temp_rTytZvZ;[&](){
            if (!reader.haspCode()){
                (temp_rTytZvZ.pCode)=NULL;
            return; }{native_concat()}=(char*)malloc(result.codeSize*sizeof(char));
        auto proto_arr=reader.getpCode(result.codeSize);
        for(int NLBJMlE=0; NLBJMlE < result.codeSize; NLBJMlE++){
            [&](){((temp_rTytZvZ.pCode)[NLBJMlE])=proto_arr[NLBJMlE];}();
        }
        }();(result.pCode)=temp_rTytZvZ;}();(result.pCode)=temp_pjzuZBN;}();
[&](){ char* temp_xDKNBiw[&](){
            if (!reader.haspName()){
                (result.pName)=NULL;
            return; }{native_concat()}=(char*)malloc(reader.getpName().size();*sizeof(char));
        auto proto_arr=reader.getpName(reader.getpName().size(););
        for(int zzMOHXu=0; zzMOHXu < reader.getpName().size();; zzMOHXu++){
            [&](){((result.pName)[zzMOHXu])=proto_arr[zzMOHXu];}();
        }
        }();(result.pName)=temp_xDKNBiw;}();
[&](){(result.setLayoutCount)=reader.getsetLayoutCount();}();
[&](){ VkDescriptorSetLayout* temp_BHNAemT[&](){
            if (!reader.haspSetLayouts()){
                (result.pSetLayouts)=NULL;
            return; }{native_concat()}=(VkDescriptorSetLayout*)malloc(result.setLayoutCount*sizeof(VkDescriptorSetLayout));
        auto proto_arr=reader.getpSetLayouts(result.setLayoutCount);
        for(int kjCEeqP=0; kjCEeqP < result.setLayoutCount; kjCEeqP++){
            [&](){((result.pSetLayouts)[kjCEeqP])=deserialize_handle(proto_arr[kjCEeqP]);}();
        }
        }();(result.pSetLayouts)=temp_BHNAemT;}();
[&](){(result.pushConstantRangeCount)=reader.getpushConstantRangeCount();}();
[&](){ VkPushConstantRange* temp_HDcMeFk[&](){
            if (!reader.haspPushConstantRanges()){
                (result.pPushConstantRanges)=NULL;
            return; }{native_concat()}=(VkPushConstantRange*)malloc(result.pushConstantRangeCount*sizeof(VkPushConstantRange));
        auto proto_arr=reader.getpPushConstantRanges(result.pushConstantRangeCount);
        for(int xSoqBwb=0; xSoqBwb < result.pushConstantRangeCount; xSoqBwb++){
            [&](){
            auto temp=proto_arr[xSoqBwb];
            ((result.pPushConstantRanges)[xSoqBwb])=deserialize_struct(temp);
            }();
        }
        }();(result.pPushConstantRanges)=temp_HDcMeFk;}();
[&](){ VkSpecializationInfo* temp_mZLjDhf[&](){
            if (!reader.haspSpecializationInfo()){
                (result.pSpecializationInfo)=NULL;
            return; }{native_concat()}=(VkSpecializationInfo*)malloc(1*sizeof(VkSpecializationInfo));
        auto proto_arr=reader.getpSpecializationInfo(1);
        for(int ZWKvpYr=0; ZWKvpYr < 1; ZWKvpYr++){
            [&](){
            auto temp=proto_arr[ZWKvpYr];
            ((result.pSpecializationInfo)[ZWKvpYr])=deserialize_struct(temp);
            }();
        }
        }();(result.pSpecializationInfo)=temp_mZLjDhf;}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkShaderCreateInfoEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkShaderCreateInfoEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceShaderTileImageFeaturesEXT::Builder& builder, VkPhysicalDeviceShaderTileImageFeaturesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setshaderTileImageColorReadAccess((member.shaderTileImageColorReadAccess));}();}();
[&](){[&](){return builder.setshaderTileImageDepthReadAccess((member.shaderTileImageDepthReadAccess));}();}();
[&](){[&](){return builder.setshaderTileImageStencilReadAccess((member.shaderTileImageStencilReadAccess));}();}();
}

    VkPhysicalDeviceShaderTileImageFeaturesEXT deserialize_struct(VkPhysicalDeviceShaderTileImageFeaturesEXT::Reader reader){
        auto result=VkPhysicalDeviceShaderTileImageFeaturesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.shaderTileImageColorReadAccess)=reader.getshaderTileImageColorReadAccess();}();}();
[&](){[&](){(result.shaderTileImageDepthReadAccess)=reader.getshaderTileImageDepthReadAccess();}();}();
[&](){[&](){(result.shaderTileImageStencilReadAccess)=reader.getshaderTileImageStencilReadAccess();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceShaderTileImageFeaturesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceShaderTileImageFeaturesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceShaderTileImagePropertiesEXT::Builder& builder, VkPhysicalDeviceShaderTileImagePropertiesEXT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setshaderTileImageCoherentReadAccelerated((member.shaderTileImageCoherentReadAccelerated));}();}();
[&](){[&](){return builder.setshaderTileImageReadSampleFromPixelRateInvocation((member.shaderTileImageReadSampleFromPixelRateInvocation));}();}();
[&](){[&](){return builder.setshaderTileImageReadFromHelperInvocation((member.shaderTileImageReadFromHelperInvocation));}();}();
}

    VkPhysicalDeviceShaderTileImagePropertiesEXT deserialize_struct(VkPhysicalDeviceShaderTileImagePropertiesEXT::Reader reader){
        auto result=VkPhysicalDeviceShaderTileImagePropertiesEXT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.shaderTileImageCoherentReadAccelerated)=reader.getshaderTileImageCoherentReadAccelerated();}();}();
[&](){[&](){(result.shaderTileImageReadSampleFromPixelRateInvocation)=reader.getshaderTileImageReadSampleFromPixelRateInvocation();}();}();
[&](){[&](){(result.shaderTileImageReadFromHelperInvocation)=reader.getshaderTileImageReadFromHelperInvocation();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceShaderTileImagePropertiesEXT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceShaderTileImagePropertiesEXT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceCooperativeMatrixFeaturesKHR::Builder& builder, VkPhysicalDeviceCooperativeMatrixFeaturesKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setcooperativeMatrix((member.cooperativeMatrix));}();}();
[&](){[&](){return builder.setcooperativeMatrixRobustBufferAccess((member.cooperativeMatrixRobustBufferAccess));}();}();
}

    VkPhysicalDeviceCooperativeMatrixFeaturesKHR deserialize_struct(VkPhysicalDeviceCooperativeMatrixFeaturesKHR::Reader reader){
        auto result=VkPhysicalDeviceCooperativeMatrixFeaturesKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.cooperativeMatrix)=reader.getcooperativeMatrix();}();}();
[&](){[&](){(result.cooperativeMatrixRobustBufferAccess)=reader.getcooperativeMatrixRobustBufferAccess();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceCooperativeMatrixFeaturesKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceCooperativeMatrixFeaturesKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkCooperativeMatrixPropertiesKHR::Builder& builder, VkCooperativeMatrixPropertiesKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){return builder.setMSize((member.MSize));}();
[&](){return builder.setNSize((member.NSize));}();
[&](){return builder.setKSize((member.KSize));}();
[&](){[&](){[&](){return builder.setAType((member.AType));}();}();}();
[&](){[&](){[&](){return builder.setBType((member.BType));}();}();}();
[&](){[&](){[&](){return builder.setCType((member.CType));}();}();}();
[&](){[&](){[&](){return builder.setResultType((member.ResultType));}();}();}();
[&](){[&](){return builder.setsaturatingAccumulation((member.saturatingAccumulation));}();}();
[&](){[&](){[&](){return builder.setscope((member.scope));}();}();}();
}

    VkCooperativeMatrixPropertiesKHR deserialize_struct(VkCooperativeMatrixPropertiesKHR::Reader reader){
        auto result=VkCooperativeMatrixPropertiesKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){(result.MSize)=reader.getMSize();}();
[&](){(result.NSize)=reader.getNSize();}();
[&](){(result.KSize)=reader.getKSize();}();
[&](){[&](){[&](){(result.AType)=reader.getAType();}();}();}();
[&](){[&](){[&](){(result.BType)=reader.getBType();}();}();}();
[&](){[&](){[&](){(result.CType)=reader.getCType();}();}();}();
[&](){[&](){[&](){(result.ResultType)=reader.getResultType();}();}();}();
[&](){[&](){(result.saturatingAccumulation)=reader.getsaturatingAccumulation();}();}();
[&](){[&](){[&](){(result.scope)=reader.getscope();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkCooperativeMatrixPropertiesKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkCooperativeMatrixPropertiesKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceCooperativeMatrixPropertiesKHR::Builder& builder, VkPhysicalDeviceCooperativeMatrixPropertiesKHR member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setcooperativeMatrixSupportedStages((member.cooperativeMatrixSupportedStages));}();}();}();
}

    VkPhysicalDeviceCooperativeMatrixPropertiesKHR deserialize_struct(VkPhysicalDeviceCooperativeMatrixPropertiesKHR::Reader reader){
        auto result=VkPhysicalDeviceCooperativeMatrixPropertiesKHR();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.cooperativeMatrixSupportedStages)=reader.getcooperativeMatrixSupportedStages();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceCooperativeMatrixPropertiesKHR member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceCooperativeMatrixPropertiesKHR member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceCubicClampFeaturesQCOM::Builder& builder, VkPhysicalDeviceCubicClampFeaturesQCOM member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setcubicRangeClamp((member.cubicRangeClamp));}();}();
}

    VkPhysicalDeviceCubicClampFeaturesQCOM deserialize_struct(VkPhysicalDeviceCubicClampFeaturesQCOM::Reader reader){
        auto result=VkPhysicalDeviceCubicClampFeaturesQCOM();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.cubicRangeClamp)=reader.getcubicRangeClamp();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceCubicClampFeaturesQCOM member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceCubicClampFeaturesQCOM member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceYcbcrDegammaFeaturesQCOM::Builder& builder, VkPhysicalDeviceYcbcrDegammaFeaturesQCOM member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setycbcrDegamma((member.ycbcrDegamma));}();}();
}

    VkPhysicalDeviceYcbcrDegammaFeaturesQCOM deserialize_struct(VkPhysicalDeviceYcbcrDegammaFeaturesQCOM::Reader reader){
        auto result=VkPhysicalDeviceYcbcrDegammaFeaturesQCOM();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.ycbcrDegamma)=reader.getycbcrDegamma();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceYcbcrDegammaFeaturesQCOM member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceYcbcrDegammaFeaturesQCOM member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM::Builder& builder, VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setenableYDegamma((member.enableYDegamma));}();}();
[&](){[&](){return builder.setenableCbCrDegamma((member.enableCbCrDegamma));}();}();
}

    VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM deserialize_struct(VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM::Reader reader){
        auto result=VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.enableYDegamma)=reader.getenableYDegamma();}();}();
[&](){[&](){(result.enableCbCrDegamma)=reader.getenableCbCrDegamma();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceCubicWeightsFeaturesQCOM::Builder& builder, VkPhysicalDeviceCubicWeightsFeaturesQCOM member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setselectableCubicWeights((member.selectableCubicWeights));}();}();
}

    VkPhysicalDeviceCubicWeightsFeaturesQCOM deserialize_struct(VkPhysicalDeviceCubicWeightsFeaturesQCOM::Reader reader){
        auto result=VkPhysicalDeviceCubicWeightsFeaturesQCOM();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.selectableCubicWeights)=reader.getselectableCubicWeights();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceCubicWeightsFeaturesQCOM member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceCubicWeightsFeaturesQCOM member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSamplerCubicWeightsCreateInfoQCOM::Builder& builder, VkSamplerCubicWeightsCreateInfoQCOM member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setcubicWeights((member.cubicWeights));}();}();}();
}

    VkSamplerCubicWeightsCreateInfoQCOM deserialize_struct(VkSamplerCubicWeightsCreateInfoQCOM::Reader reader){
        auto result=VkSamplerCubicWeightsCreateInfoQCOM();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.cubicWeights)=reader.getcubicWeights();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSamplerCubicWeightsCreateInfoQCOM member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSamplerCubicWeightsCreateInfoQCOM member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkBlitImageCubicWeightsInfoQCOM::Builder& builder, VkBlitImageCubicWeightsInfoQCOM member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setcubicWeights((member.cubicWeights));}();}();}();
}

    VkBlitImageCubicWeightsInfoQCOM deserialize_struct(VkBlitImageCubicWeightsInfoQCOM::Reader reader){
        auto result=VkBlitImageCubicWeightsInfoQCOM();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){[&](){[&](){(result.cubicWeights)=reader.getcubicWeights();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkBlitImageCubicWeightsInfoQCOM member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkBlitImageCubicWeightsInfoQCOM member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceImageProcessing2FeaturesQCOM::Builder& builder, VkPhysicalDeviceImageProcessing2FeaturesQCOM member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.settextureBlockMatch2((member.textureBlockMatch2));}();}();
}

    VkPhysicalDeviceImageProcessing2FeaturesQCOM deserialize_struct(VkPhysicalDeviceImageProcessing2FeaturesQCOM::Reader reader){
        auto result=VkPhysicalDeviceImageProcessing2FeaturesQCOM();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.textureBlockMatch2)=reader.gettextureBlockMatch2();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceImageProcessing2FeaturesQCOM member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceImageProcessing2FeaturesQCOM member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceImageProcessing2PropertiesQCOM::Builder& builder, VkPhysicalDeviceImageProcessing2PropertiesQCOM member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            auto temp=builder.initmaxBlockMatchWindow(maxBlockMatchWindow);
            return serialize_struct((member.maxBlockMatchWindow), temp);
            }();
}

    VkPhysicalDeviceImageProcessing2PropertiesQCOM deserialize_struct(VkPhysicalDeviceImageProcessing2PropertiesQCOM::Reader reader){
        auto result=VkPhysicalDeviceImageProcessing2PropertiesQCOM();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){
            auto temp=reader.getmaxBlockMatchWindow();
            (result.maxBlockMatchWindow)=deserialize_struct(temp);
            }();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceImageProcessing2PropertiesQCOM member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceImageProcessing2PropertiesQCOM member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkSamplerBlockMatchWindowCreateInfoQCOM::Builder& builder, VkSamplerBlockMatchWindowCreateInfoQCOM member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){
            auto temp=builder.initwindowExtent(windowExtent);
            return serialize_struct((member.windowExtent), temp);
            }();
[&](){[&](){[&](){return builder.setwindowCompareMode((member.windowCompareMode));}();}();}();
}

    VkSamplerBlockMatchWindowCreateInfoQCOM deserialize_struct(VkSamplerBlockMatchWindowCreateInfoQCOM::Reader reader){
        auto result=VkSamplerBlockMatchWindowCreateInfoQCOM();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){ void* temp_pBVSXDo[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();(result.pNext)=temp_pBVSXDo;}();
[&](){
            auto temp=reader.getwindowExtent();
            (result.windowExtent)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.windowCompareMode)=reader.getwindowCompareMode();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkSamplerBlockMatchWindowCreateInfoQCOM member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkSamplerBlockMatchWindowCreateInfoQCOM member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV::Builder& builder, VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){return builder.setdescriptorPoolOverallocation((member.descriptorPoolOverallocation));}();}();
}

    VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV deserialize_struct(VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV::Reader reader){
        auto result=VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){(result.descriptorPoolOverallocation)=reader.getdescriptorPoolOverallocation();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    

    void serialize_struct(VkPhysicalDeviceLayeredDriverPropertiesMSFT::Builder& builder, VkPhysicalDeviceLayeredDriverPropertiesMSFT member){
        
    
[&](){[&](){[&](){return builder.setsType((member.sType));}();}();}();
[&](){
            auto temp=builder.initpNext(pNext);
            return serialize_struct((member.pNext), temp);
            }();
[&](){[&](){[&](){return builder.setunderlyingAPI((member.underlyingAPI));}();}();}();
}

    VkPhysicalDeviceLayeredDriverPropertiesMSFT deserialize_struct(VkPhysicalDeviceLayeredDriverPropertiesMSFT::Reader reader){
        auto result=VkPhysicalDeviceLayeredDriverPropertiesMSFT();
    
[&](){[&](){[&](){(result.sType)=reader.getsType();}();}();}();
[&](){
            auto temp=reader.getpNext();
            (result.pNext)=deserialize_struct(temp);
            }();
[&](){[&](){[&](){(result.underlyingAPI)=reader.getunderlyingAPI();}();}();}();
return result;}

    void serialize_pUserData(PUserData::Builder builder, VkPhysicalDeviceLayeredDriverPropertiesMSFT member){
    
[&](){
            if ((member.pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(member.pUserData).pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int lQswvtW=0; lQswvtW < strlen(((char*)(member.pUserData).pUserData))+1; lQswvtW++){
            [&](){return proto_arr.set(lQswvtW,(((char*)(member.pUserData).pUserData)[lQswvtW]));}();
        }
        }();}();
}

    void* deserialize_pUserData(PUserData::Reader& reader, VkPhysicalDeviceLayeredDriverPropertiesMSFT member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_HQAruTK;[&](){
            if (!reader.haspUserData()){
                (temp_HQAruTKpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int ytILVhn=0; ytILVhn < reader.getpUserData().size();; ytILVhn++){
            [&](){((temp_HQAruTKpUserData)[ytILVhn])=proto_arr[ytILVhn];}();
        }
        }();(pUserData)=temp_HQAruTK;}();
           return pUserData;
        #else
            auto result = new pUserData();
    
[&](){
            if (!reader.haspUserData()){
                (result.pUserData)=NULL;
            return; }char* temp_VSFonfu;[&](){
            if (!reader.haspUserData()){
                (temp_VSFonfu.pUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int lQswvtW=0; lQswvtW < reader.getpUserData().size();; lQswvtW++){
            [&](){((temp_VSFonfu.pUserData)[lQswvtW])=proto_arr[lQswvtW];}();
        }
        }();(result.pUserData)=temp_VSFonfu;}();

    return result;
    #endif
    }
    
std::map<uintptr_t,PFN_vkInternalAllocationNotification> id_to_PFN_vkInternalAllocationNotification;

    void serialize_funcpointer(PFN_vkInternalAllocationNotification::Builder builder, PFN_vkInternalAllocationNotification build){
        //Will only be called by the client
        return;
    }
    

        auto PFN_vkInternalAllocationNotification_wrapper( void* pUserData, size_t size, VkInternalAllocationType allocationType, VkSystemAllocationScope allocationScope){
        //Will only be called by the server
        
        MallocMessageBuilder m;
        auto message=m.initRoot<Message>();
        auto builder=message.initPFN_vkInternalAllocationNotification();
        
[&](){
            if ((pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(pUserData)pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int GzbOwAQ=0; GzbOwAQ < strlen(((char*)(pUserData)pUserData))+1; GzbOwAQ++){
            [&](){return proto_arr.set(GzbOwAQ,(((char*)(pUserData)pUserData)[GzbOwAQ]));}();
        }
        }();}();
[&](){return builder.setsize((size));}();
[&](){[&](){[&](){return builder.setallocationType((allocationType));}();}();}();
[&](){[&](){[&](){return builder.setallocationScope((allocationScope));}();}();}();

        builder.setId( ((pUserData*)pUserData)->PFN_vkInternalAllocationNotification );
        writeToConn(m); //Send request
        auto reader=readFromConn().getPFN_vkInternalAllocationNotification(); //Recieve response
        void result;
        
[&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_jKUCByC;[&](){
            if (!reader.haspUserData()){
                (temp_jKUCByCpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int GzbOwAQ=0; GzbOwAQ < reader.getpUserData().size();; GzbOwAQ++){
            [&](){((temp_jKUCByCpUserData)[GzbOwAQ])=proto_arr[GzbOwAQ];}();
        }
        }();(pUserData)=temp_jKUCByC;}();
[&](){(size)=reader.getsize();}();
[&](){[&](){[&](){(allocationType)=reader.getallocationType();}();}();}();
[&](){[&](){[&](){(allocationScope)=reader.getallocationScope();}();}();}();


        MallocMessageBuilder m;
        auto message=m.initRoot<Message>();
        auto builder=message.initPFN_vkInternalAllocationNotification();
        
builder.setMem(0);

        writeToConn(m); //Send (possible) memory to client so it can store it
        readFromConn(); //Get the confirmation that the client has registered the memory
        
SyncAllocations();
return;
}

        PFN_vkInternalAllocationNotification deserialize_funcpointer(PFN_vkInternalAllocationNotification::Reader reader){
            //Will only be called by the server
            
            return PFN_vkInternalAllocationNotification_wrapper;
            };
        

            void handle_PFN_vkInternalAllocationNotification_request(PFN_vkInternalAllocationNotification::Reader reader){
            //Will only be called by the client
            // Recieved data from server's PFN_vkInternalAllocationNotification wrapper, and will execute the actual function
            auto funcpointer=id_to_PFN_vkInternalAllocationNotification[reader.getId()];
        
void* pUserData;
[&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_jKUCByC;[&](){
            if (!reader.haspUserData()){
                (temp_jKUCByCpUserData)=NULL;
            return; }{native_concat()}=(char*)malloc(reader.getpUserData().size();*sizeof(char));
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int GzbOwAQ=0; GzbOwAQ < reader.getpUserData().size();; GzbOwAQ++){
            [&](){((temp_jKUCByCpUserData)[GzbOwAQ])=proto_arr[GzbOwAQ];}();
        }
        }();(pUserData)=temp_jKUCByC;}();
size_t size;
[&](){(size)=reader.getsize();}();
VkInternalAllocationType allocationType;
[&](){[&](){[&](){(allocationType)=reader.getallocationType();}();}();}();
VkSystemAllocationScope allocationScope;
[&](){[&](){[&](){(allocationScope)=reader.getallocationScope();}();}();}();
funcpointer(pUserData,size,allocationType,allocationScope);

        MallocMessageBuilder m;
        auto message=m.initRoot<Message>();
        auto builder=message.initPFN_vkInternalAllocationNotification();
        
[&](){
            if ((pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(pUserData)pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int GzbOwAQ=0; GzbOwAQ < strlen(((char*)(pUserData)pUserData))+1; GzbOwAQ++){
            [&](){return proto_arr.set(GzbOwAQ,(((char*)(pUserData)pUserData)[GzbOwAQ]));}();
        }
        }();}();
[&](){return builder.setsize((size));}();
[&](){[&](){[&](){return builder.setallocationType((allocationType));}();}();}();
[&](){[&](){[&](){return builder.setallocationScope((allocationScope));}();}();}();

writeToConn(m);
};
std::map<uintptr_t,PFN_vkInternalFreeNotification> id_to_PFN_vkInternalFreeNotification;

    void serialize_funcpointer(PFN_vkInternalFreeNotification::Builder builder, PFN_vkInternalFreeNotification build){
        //Will only be called by the client
        return;
    }
    

        auto PFN_vkInternalFreeNotification_wrapper( void* pUserData, size_t size, VkInternalAllocationType allocationType, VkSystemAllocationScope allocationScope){
        //Will only be called by the server
        
        MallocMessageBuilder m;
        auto message=m.initRoot<Message>();
        auto builder=message.initPFN_vkInternalFreeNotification();
        
[&](){
            if ((pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(pUserData)pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int GzbOwAQ=0; GzbOwAQ < strlen(((char*)(pUserData)pUserData))+1; GzbOwAQ++){
            [&](){return proto_arr.set(GzbOwAQ,(((char*)(pUserData)pUserData)[GzbOwAQ]));}();
        }
        }();}();
[&](){return builder.setsize((size));}();
[&](){[&](){[&](){return builder.setallocationType((allocationType));}();}();}();
[&](){[&](){[&](){return builder.setallocationScope((allocationScope));}();}();}();

        builder.setId( ((pUserData*)pUserData)->PFN_vkInternalFreeNotification );
        writeToConn(m); //Send request
        auto reader=readFromConn().getPFN_vkInternalFreeNotification(); //Recieve response
        void result;
        
[&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_jKUCByC;[&](){
            if (!reader.haspUserData()){
                (temp_jKUCByCpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int GzbOwAQ=0; GzbOwAQ < reader.getpUserData().size();; GzbOwAQ++){
            [&](){((temp_jKUCByCpUserData)[GzbOwAQ])=proto_arr[GzbOwAQ];}();
        }
        }();(pUserData)=temp_jKUCByC;}();
[&](){(size)=reader.getsize();}();
[&](){[&](){[&](){(allocationType)=reader.getallocationType();}();}();}();
[&](){[&](){[&](){(allocationScope)=reader.getallocationScope();}();}();}();


        MallocMessageBuilder m;
        auto message=m.initRoot<Message>();
        auto builder=message.initPFN_vkInternalFreeNotification();
        
builder.setMem(0);

        writeToConn(m); //Send (possible) memory to client so it can store it
        readFromConn(); //Get the confirmation that the client has registered the memory
        
SyncAllocations();
return;
}

        PFN_vkInternalFreeNotification deserialize_funcpointer(PFN_vkInternalFreeNotification::Reader reader){
            //Will only be called by the server
            
            return PFN_vkInternalFreeNotification_wrapper;
            };
        

            void handle_PFN_vkInternalFreeNotification_request(PFN_vkInternalFreeNotification::Reader reader){
            //Will only be called by the client
            // Recieved data from server's PFN_vkInternalFreeNotification wrapper, and will execute the actual function
            auto funcpointer=id_to_PFN_vkInternalFreeNotification[reader.getId()];
        
void* pUserData;
[&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_jKUCByC;[&](){
            if (!reader.haspUserData()){
                (temp_jKUCByCpUserData)=NULL;
            return; }{native_concat()}=(char*)malloc(reader.getpUserData().size();*sizeof(char));
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int GzbOwAQ=0; GzbOwAQ < reader.getpUserData().size();; GzbOwAQ++){
            [&](){((temp_jKUCByCpUserData)[GzbOwAQ])=proto_arr[GzbOwAQ];}();
        }
        }();(pUserData)=temp_jKUCByC;}();
size_t size;
[&](){(size)=reader.getsize();}();
VkInternalAllocationType allocationType;
[&](){[&](){[&](){(allocationType)=reader.getallocationType();}();}();}();
VkSystemAllocationScope allocationScope;
[&](){[&](){[&](){(allocationScope)=reader.getallocationScope();}();}();}();
funcpointer(pUserData,size,allocationType,allocationScope);

        MallocMessageBuilder m;
        auto message=m.initRoot<Message>();
        auto builder=message.initPFN_vkInternalFreeNotification();
        
[&](){
            if ((pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(pUserData)pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int GzbOwAQ=0; GzbOwAQ < strlen(((char*)(pUserData)pUserData))+1; GzbOwAQ++){
            [&](){return proto_arr.set(GzbOwAQ,(((char*)(pUserData)pUserData)[GzbOwAQ]));}();
        }
        }();}();
[&](){return builder.setsize((size));}();
[&](){[&](){[&](){return builder.setallocationType((allocationType));}();}();}();
[&](){[&](){[&](){return builder.setallocationScope((allocationScope));}();}();}();

writeToConn(m);
};
std::map<uintptr_t,PFN_vkReallocationFunction> id_to_PFN_vkReallocationFunction;

    void serialize_funcpointer(PFN_vkReallocationFunction::Builder builder, PFN_vkReallocationFunction build){
        //Will only be called by the client
        return;
    }
    

        auto PFN_vkReallocationFunction_wrapper( void* pUserData, void* pOriginal, size_t size, size_t alignment, VkSystemAllocationScope allocationScope){
        //Will only be called by the server
        
        MallocMessageBuilder m;
        auto message=m.initRoot<Message>();
        auto builder=message.initPFN_vkReallocationFunction();
        
[&](){
            if ((pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(pUserData)pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int GzbOwAQ=0; GzbOwAQ < strlen(((char*)(pUserData)pUserData))+1; GzbOwAQ++){
            [&](){return proto_arr.set(GzbOwAQ,(((char*)(pUserData)pUserData)[GzbOwAQ]));}();
        }
        }();}();
[&](){
            if ((pOriginal)==NULL){
                builder.disownpOriginal();
            return; }[&](){
            if (((char*)(pOriginal)pOriginal)==NULL){
                builder.disownpOriginal();
            return; }
        auto proto_arr=builder.initpOriginal();
        for(int CPzsPmw=0; CPzsPmw < strlen(((char*)(pOriginal)pOriginal))+1; CPzsPmw++){
            [&](){return proto_arr.set(CPzsPmw,(((char*)(pOriginal)pOriginal)[CPzsPmw]));}();
        }
        }();}();
[&](){return builder.setsize((size));}();
[&](){return builder.setalignment((alignment));}();
[&](){[&](){[&](){return builder.setallocationScope((allocationScope));}();}();}();

        builder.setId( ((pUserData*)pUserData)->PFN_vkReallocationFunction );
        writeToConn(m); //Send request
        auto reader=readFromConn().getPFN_vkReallocationFunction(); //Recieve response
        void* result;
        
[&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_jKUCByC;[&](){
            if (!reader.haspUserData()){
                (temp_jKUCByCpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int GzbOwAQ=0; GzbOwAQ < reader.getpUserData().size();; GzbOwAQ++){
            [&](){((temp_jKUCByCpUserData)[GzbOwAQ])=proto_arr[GzbOwAQ];}();
        }
        }();(pUserData)=temp_jKUCByC;}();
[&](){
            if (!reader.haspOriginal()){
                (pOriginal)=NULL;
            return; }char* temp_BtUlbYk;[&](){
            if (!reader.haspOriginal()){
                (temp_BtUlbYkpOriginal)=NULL;
            return; }
        auto proto_arr=reader.getpOriginal(reader.getpOriginal().size(););
        for(int CPzsPmw=0; CPzsPmw < reader.getpOriginal().size();; CPzsPmw++){
            [&](){((temp_BtUlbYkpOriginal)[CPzsPmw])=proto_arr[CPzsPmw];}();
        }
        }();(pOriginal)=temp_BtUlbYk;}();
[&](){(size)=reader.getsize();}();
[&](){(alignment)=reader.getalignment();}();
[&](){[&](){[&](){(allocationScope)=reader.getallocationScope();}();}();}();
[&](){
            if (!reader.hasresult()){
                (result)=NULL;
            return; }char* temp_GeEjtBo;[&](){
            if (!reader.hasresult()){
                (temp_GeEjtBoresult)=NULL;
            return; }
        auto proto_arr=reader.getresult(reader.getresult().size(););
        for(int OCljRPK=0; OCljRPK < reader.getresult().size();; OCljRPK++){
            [&](){((temp_GeEjtBoresult)[OCljRPK])=proto_arr[OCljRPK];}();
        }
        }();(result)=temp_GeEjtBo;}();

        MallocMessageBuilder m;
        auto message=m.initRoot<Message>();
        auto builder=message.initPFN_vkReallocationFunction();
        
registerAllocatedMem(result,size);
builder.setMem((uintptr_t)result);

        writeToConn(m); //Send (possible) memory to client so it can store it
        readFromConn(); //Get the confirmation that the client has registered the memory
        
SyncAllocations();
return result;
}

        PFN_vkReallocationFunction deserialize_funcpointer(PFN_vkReallocationFunction::Reader reader){
            //Will only be called by the server
            
            return PFN_vkReallocationFunction_wrapper;
            };
        

            void handle_PFN_vkReallocationFunction_request(PFN_vkReallocationFunction::Reader reader){
            //Will only be called by the client
            // Recieved data from server's PFN_vkReallocationFunction wrapper, and will execute the actual function
            auto funcpointer=id_to_PFN_vkReallocationFunction[reader.getId()];
        
void* pUserData;
[&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_jKUCByC;[&](){
            if (!reader.haspUserData()){
                (temp_jKUCByCpUserData)=NULL;
            return; }{native_concat()}=(char*)malloc(reader.getpUserData().size();*sizeof(char));
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int GzbOwAQ=0; GzbOwAQ < reader.getpUserData().size();; GzbOwAQ++){
            [&](){((temp_jKUCByCpUserData)[GzbOwAQ])=proto_arr[GzbOwAQ];}();
        }
        }();(pUserData)=temp_jKUCByC;}();
void* pOriginal;
[&](){
            if (!reader.haspOriginal()){
                (pOriginal)=NULL;
            return; }char* temp_BtUlbYk;[&](){
            if (!reader.haspOriginal()){
                (temp_BtUlbYkpOriginal)=NULL;
            return; }{native_concat()}=(char*)malloc(reader.getpOriginal().size();*sizeof(char));
        auto proto_arr=reader.getpOriginal(reader.getpOriginal().size(););
        for(int CPzsPmw=0; CPzsPmw < reader.getpOriginal().size();; CPzsPmw++){
            [&](){((temp_BtUlbYkpOriginal)[CPzsPmw])=proto_arr[CPzsPmw];}();
        }
        }();(pOriginal)=temp_BtUlbYk;}();
size_t size;
[&](){(size)=reader.getsize();}();
size_t alignment;
[&](){(alignment)=reader.getalignment();}();
VkSystemAllocationScope allocationScope;
[&](){[&](){[&](){(allocationScope)=reader.getallocationScope();}();}();}();
auto result=funcpointer(pUserData,pOriginal,size,alignment,allocationScope);

        MallocMessageBuilder m;
        auto message=m.initRoot<Message>();
        auto builder=message.initPFN_vkReallocationFunction();
        
[&](){
            if ((pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(pUserData)pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int GzbOwAQ=0; GzbOwAQ < strlen(((char*)(pUserData)pUserData))+1; GzbOwAQ++){
            [&](){return proto_arr.set(GzbOwAQ,(((char*)(pUserData)pUserData)[GzbOwAQ]));}();
        }
        }();}();
[&](){
            if ((pOriginal)==NULL){
                builder.disownpOriginal();
            return; }[&](){
            if (((char*)(pOriginal)pOriginal)==NULL){
                builder.disownpOriginal();
            return; }
        auto proto_arr=builder.initpOriginal();
        for(int CPzsPmw=0; CPzsPmw < strlen(((char*)(pOriginal)pOriginal))+1; CPzsPmw++){
            [&](){return proto_arr.set(CPzsPmw,(((char*)(pOriginal)pOriginal)[CPzsPmw]));}();
        }
        }();}();
[&](){return builder.setsize((size));}();
[&](){return builder.setalignment((alignment));}();
[&](){[&](){[&](){return builder.setallocationScope((allocationScope));}();}();}();
[&](){
            if (!builder.hasresult()){
                (result)=NULL;
            return; }char* temp_GeEjtBo;[&](){
            if (!builder.hasresult()){
                (temp_GeEjtBoresult)=NULL;
            return; }
        auto proto_arr=builder.getresult(builder.getresult().size(););
        for(int OCljRPK=0; OCljRPK < builder.getresult().size();; OCljRPK++){
            [&](){((temp_GeEjtBoresult)[OCljRPK])=proto_arr[OCljRPK];}();
        }
        }();(result)=temp_GeEjtBo;}();
writeToConn(m);

            auto reader=readFromConn().getPFN_vkReallocationFunction();
            registerClientServerMemoryMapping((uintptr_t)result, (uintptr_t)(reader.getId()) );
            
            MallocMessageBuilder m;
            auto message=m.initRoot<Message>();
            auto builder=message.initPFN_vkReallocationFunction();
            writeConn(m); //Send empty message to signal to the server the mapping is done.
            
};
std::map<uintptr_t,PFN_vkAllocationFunction> id_to_PFN_vkAllocationFunction;

    void serialize_funcpointer(PFN_vkAllocationFunction::Builder builder, PFN_vkAllocationFunction build){
        //Will only be called by the client
        return;
    }
    

        auto PFN_vkAllocationFunction_wrapper( void* pUserData, size_t size, size_t alignment, VkSystemAllocationScope allocationScope){
        //Will only be called by the server
        
        MallocMessageBuilder m;
        auto message=m.initRoot<Message>();
        auto builder=message.initPFN_vkAllocationFunction();
        
[&](){
            if ((pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(pUserData)pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int GzbOwAQ=0; GzbOwAQ < strlen(((char*)(pUserData)pUserData))+1; GzbOwAQ++){
            [&](){return proto_arr.set(GzbOwAQ,(((char*)(pUserData)pUserData)[GzbOwAQ]));}();
        }
        }();}();
[&](){return builder.setsize((size));}();
[&](){return builder.setalignment((alignment));}();
[&](){[&](){[&](){return builder.setallocationScope((allocationScope));}();}();}();

        builder.setId( ((pUserData*)pUserData)->PFN_vkAllocationFunction );
        writeToConn(m); //Send request
        auto reader=readFromConn().getPFN_vkAllocationFunction(); //Recieve response
        void* result;
        
[&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_jKUCByC;[&](){
            if (!reader.haspUserData()){
                (temp_jKUCByCpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int GzbOwAQ=0; GzbOwAQ < reader.getpUserData().size();; GzbOwAQ++){
            [&](){((temp_jKUCByCpUserData)[GzbOwAQ])=proto_arr[GzbOwAQ];}();
        }
        }();(pUserData)=temp_jKUCByC;}();
[&](){(size)=reader.getsize();}();
[&](){(alignment)=reader.getalignment();}();
[&](){[&](){[&](){(allocationScope)=reader.getallocationScope();}();}();}();
[&](){
            if (!reader.hasresult()){
                (result)=NULL;
            return; }char* temp_RzbVuEQ;[&](){
            if (!reader.hasresult()){
                (temp_RzbVuEQresult)=NULL;
            return; }
        auto proto_arr=reader.getresult(size);
        for(int xALmVrM=0; xALmVrM < size; xALmVrM++){
            [&](){((temp_RzbVuEQresult)[xALmVrM])=proto_arr[xALmVrM];}();
        }
        }();(result)=temp_RzbVuEQ;}();

        MallocMessageBuilder m;
        auto message=m.initRoot<Message>();
        auto builder=message.initPFN_vkAllocationFunction();
        
registerAllocatedMem(result,size);
builder.setMem((uintptr_t)result);

        writeToConn(m); //Send (possible) memory to client so it can store it
        readFromConn(); //Get the confirmation that the client has registered the memory
        
SyncAllocations();
return result;
}

        PFN_vkAllocationFunction deserialize_funcpointer(PFN_vkAllocationFunction::Reader reader){
            //Will only be called by the server
            
            return PFN_vkAllocationFunction_wrapper;
            };
        

            void handle_PFN_vkAllocationFunction_request(PFN_vkAllocationFunction::Reader reader){
            //Will only be called by the client
            // Recieved data from server's PFN_vkAllocationFunction wrapper, and will execute the actual function
            auto funcpointer=id_to_PFN_vkAllocationFunction[reader.getId()];
        
void* pUserData;
[&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_jKUCByC;[&](){
            if (!reader.haspUserData()){
                (temp_jKUCByCpUserData)=NULL;
            return; }{native_concat()}=(char*)malloc(reader.getpUserData().size();*sizeof(char));
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int GzbOwAQ=0; GzbOwAQ < reader.getpUserData().size();; GzbOwAQ++){
            [&](){((temp_jKUCByCpUserData)[GzbOwAQ])=proto_arr[GzbOwAQ];}();
        }
        }();(pUserData)=temp_jKUCByC;}();
size_t size;
[&](){(size)=reader.getsize();}();
size_t alignment;
[&](){(alignment)=reader.getalignment();}();
VkSystemAllocationScope allocationScope;
[&](){[&](){[&](){(allocationScope)=reader.getallocationScope();}();}();}();
auto result=funcpointer(pUserData,size,alignment,allocationScope);

        MallocMessageBuilder m;
        auto message=m.initRoot<Message>();
        auto builder=message.initPFN_vkAllocationFunction();
        
[&](){
            if ((pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(pUserData)pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int GzbOwAQ=0; GzbOwAQ < strlen(((char*)(pUserData)pUserData))+1; GzbOwAQ++){
            [&](){return proto_arr.set(GzbOwAQ,(((char*)(pUserData)pUserData)[GzbOwAQ]));}();
        }
        }();}();
[&](){return builder.setsize((size));}();
[&](){return builder.setalignment((alignment));}();
[&](){[&](){[&](){return builder.setallocationScope((allocationScope));}();}();}();
[&](){
            if (!builder.hasresult()){
                (result)=NULL;
            return; }char* temp_RzbVuEQ;[&](){
            if (!builder.hasresult()){
                (temp_RzbVuEQresult)=NULL;
            return; }
        auto proto_arr=builder.getresult(size);
        for(int xALmVrM=0; xALmVrM < size; xALmVrM++){
            [&](){((temp_RzbVuEQresult)[xALmVrM])=proto_arr[xALmVrM];}();
        }
        }();(result)=temp_RzbVuEQ;}();
writeToConn(m);

            auto reader=readFromConn().getPFN_vkAllocationFunction();
            registerClientServerMemoryMapping((uintptr_t)result, (uintptr_t)(reader.getId()) );
            
            MallocMessageBuilder m;
            auto message=m.initRoot<Message>();
            auto builder=message.initPFN_vkAllocationFunction();
            writeConn(m); //Send empty message to signal to the server the mapping is done.
            
};
std::map<uintptr_t,PFN_vkFreeFunction> id_to_PFN_vkFreeFunction;

    void serialize_funcpointer(PFN_vkFreeFunction::Builder builder, PFN_vkFreeFunction build){
        //Will only be called by the client
        return;
    }
    

        auto PFN_vkFreeFunction_wrapper( void* pUserData, void* pMemory){
        //Will only be called by the server
        
        MallocMessageBuilder m;
        auto message=m.initRoot<Message>();
        auto builder=message.initPFN_vkFreeFunction();
        
[&](){
            if ((pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(pUserData)pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int GzbOwAQ=0; GzbOwAQ < strlen(((char*)(pUserData)pUserData))+1; GzbOwAQ++){
            [&](){return proto_arr.set(GzbOwAQ,(((char*)(pUserData)pUserData)[GzbOwAQ]));}();
        }
        }();}();
[&](){
            if ((pMemory)==NULL){
                builder.disownpMemory();
            return; }[&](){
            if (((char*)(pMemory)pMemory)==NULL){
                builder.disownpMemory();
            return; }
        auto proto_arr=builder.initpMemory();
        for(int jqNEFTO=0; jqNEFTO < strlen(((char*)(pMemory)pMemory))+1; jqNEFTO++){
            [&](){return proto_arr.set(jqNEFTO,(((char*)(pMemory)pMemory)[jqNEFTO]));}();
        }
        }();}();

        builder.setId( ((pUserData*)pUserData)->PFN_vkFreeFunction );
        writeToConn(m); //Send request
        auto reader=readFromConn().getPFN_vkFreeFunction(); //Recieve response
        void result;
        
[&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_jKUCByC;[&](){
            if (!reader.haspUserData()){
                (temp_jKUCByCpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int GzbOwAQ=0; GzbOwAQ < reader.getpUserData().size();; GzbOwAQ++){
            [&](){((temp_jKUCByCpUserData)[GzbOwAQ])=proto_arr[GzbOwAQ];}();
        }
        }();(pUserData)=temp_jKUCByC;}();
[&](){
            if (!reader.haspMemory()){
                (pMemory)=NULL;
            return; }char* temp_FMDOOHC;[&](){
            if (!reader.haspMemory()){
                (temp_FMDOOHCpMemory)=NULL;
            return; }
        auto proto_arr=reader.getpMemory(reader.getpMemory().size(););
        for(int jqNEFTO=0; jqNEFTO < reader.getpMemory().size();; jqNEFTO++){
            [&](){((temp_FMDOOHCpMemory)[jqNEFTO])=proto_arr[jqNEFTO];}();
        }
        }();(pMemory)=temp_FMDOOHC;}();


        MallocMessageBuilder m;
        auto message=m.initRoot<Message>();
        auto builder=message.initPFN_vkFreeFunction();
        
builder.setMem(0);

        writeToConn(m); //Send (possible) memory to client so it can store it
        readFromConn(); //Get the confirmation that the client has registered the memory
        
SyncAllocations();
return;
}

        PFN_vkFreeFunction deserialize_funcpointer(PFN_vkFreeFunction::Reader reader){
            //Will only be called by the server
            
            return PFN_vkFreeFunction_wrapper;
            };
        

            void handle_PFN_vkFreeFunction_request(PFN_vkFreeFunction::Reader reader){
            //Will only be called by the client
            // Recieved data from server's PFN_vkFreeFunction wrapper, and will execute the actual function
            auto funcpointer=id_to_PFN_vkFreeFunction[reader.getId()];
        
void* pUserData;
[&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_jKUCByC;[&](){
            if (!reader.haspUserData()){
                (temp_jKUCByCpUserData)=NULL;
            return; }{native_concat()}=(char*)malloc(reader.getpUserData().size();*sizeof(char));
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int GzbOwAQ=0; GzbOwAQ < reader.getpUserData().size();; GzbOwAQ++){
            [&](){((temp_jKUCByCpUserData)[GzbOwAQ])=proto_arr[GzbOwAQ];}();
        }
        }();(pUserData)=temp_jKUCByC;}();
void* pMemory;
[&](){
            if (!reader.haspMemory()){
                (pMemory)=NULL;
            return; }char* temp_FMDOOHC;[&](){
            if (!reader.haspMemory()){
                (temp_FMDOOHCpMemory)=NULL;
            return; }{native_concat()}=(char*)malloc(reader.getpMemory().size();*sizeof(char));
        auto proto_arr=reader.getpMemory(reader.getpMemory().size(););
        for(int jqNEFTO=0; jqNEFTO < reader.getpMemory().size();; jqNEFTO++){
            [&](){((temp_FMDOOHCpMemory)[jqNEFTO])=proto_arr[jqNEFTO];}();
        }
        }();(pMemory)=temp_FMDOOHC;}();
funcpointer(pUserData,pMemory);

        MallocMessageBuilder m;
        auto message=m.initRoot<Message>();
        auto builder=message.initPFN_vkFreeFunction();
        
[&](){
            if ((pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(pUserData)pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int GzbOwAQ=0; GzbOwAQ < strlen(((char*)(pUserData)pUserData))+1; GzbOwAQ++){
            [&](){return proto_arr.set(GzbOwAQ,(((char*)(pUserData)pUserData)[GzbOwAQ]));}();
        }
        }();}();
[&](){
            if ((pMemory)==NULL){
                builder.disownpMemory();
            return; }[&](){
            if (((char*)(pMemory)pMemory)==NULL){
                builder.disownpMemory();
            return; }
        auto proto_arr=builder.initpMemory();
        for(int jqNEFTO=0; jqNEFTO < strlen(((char*)(pMemory)pMemory))+1; jqNEFTO++){
            [&](){return proto_arr.set(jqNEFTO,(((char*)(pMemory)pMemory)[jqNEFTO]));}();
        }
        }();}();

writeToConn(m);
};
std::map<uintptr_t,PFN_vkDebugReportCallbackEXT> id_to_PFN_vkDebugReportCallbackEXT;

    void serialize_funcpointer(PFN_vkDebugReportCallbackEXT::Builder builder, PFN_vkDebugReportCallbackEXT build){
        //Will only be called by the client
        return;
    }
    

        auto PFN_vkDebugReportCallbackEXT_wrapper( VkDebugReportFlagsEXT flags, VkDebugReportObjectTypeEXT objectType, uint64_t object, size_t location, int32_t messageCode, const char* pLayerPrefix, const char* pMessage, void* pUserData){
        //Will only be called by the server
        
        MallocMessageBuilder m;
        auto message=m.initRoot<Message>();
        auto builder=message.initPFN_vkDebugReportCallbackEXT();
        
[&](){[&](){[&](){return builder.setflags((flags));}();}();}();
[&](){[&](){[&](){return builder.setobjectType((objectType));}();}();}();
[&](){return builder.setobject((object));}();
[&](){return builder.setlocation((location));}();
[&](){return builder.setmessageCode((messageCode));}();
[&](){
            if ((pLayerPrefix)==NULL){
                builder.disownpLayerPrefix();
            return; }
        auto proto_arr=builder.initpLayerPrefix();
        for(int EvbekCn=0; EvbekCn < strlen((pLayerPrefix))+1; EvbekCn++){
            [&](){return proto_arr.set(EvbekCn,((pLayerPrefix)[EvbekCn]));}();
        }
        }();
[&](){
            if ((pMessage)==NULL){
                builder.disownpMessage();
            return; }
        auto proto_arr=builder.initpMessage();
        for(int zqBMvjH=0; zqBMvjH < strlen((pMessage))+1; zqBMvjH++){
            [&](){return proto_arr.set(zqBMvjH,((pMessage)[zqBMvjH]));}();
        }
        }();
[&](){
            if ((pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(pUserData)pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int GzbOwAQ=0; GzbOwAQ < strlen(((char*)(pUserData)pUserData))+1; GzbOwAQ++){
            [&](){return proto_arr.set(GzbOwAQ,(((char*)(pUserData)pUserData)[GzbOwAQ]));}();
        }
        }();}();

        builder.setId( ((pUserData*)pUserData)->PFN_vkDebugReportCallbackEXT );
        writeToConn(m); //Send request
        auto reader=readFromConn().getPFN_vkDebugReportCallbackEXT(); //Recieve response
        VkBool32 result;
        
[&](){[&](){[&](){(flags)=reader.getflags();}();}();}();
[&](){[&](){[&](){(objectType)=reader.getobjectType();}();}();}();
[&](){(object)=reader.getobject();}();
[&](){(location)=reader.getlocation();}();
[&](){(messageCode)=reader.getmessageCode();}();


[&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_jKUCByC;[&](){
            if (!reader.haspUserData()){
                (temp_jKUCByCpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int GzbOwAQ=0; GzbOwAQ < reader.getpUserData().size();; GzbOwAQ++){
            [&](){((temp_jKUCByCpUserData)[GzbOwAQ])=proto_arr[GzbOwAQ];}();
        }
        }();(pUserData)=temp_jKUCByC;}();
[&](){[&](){(result)=reader.getresult();}();}();

        MallocMessageBuilder m;
        auto message=m.initRoot<Message>();
        auto builder=message.initPFN_vkDebugReportCallbackEXT();
        
builder.setMem(0);

        writeToConn(m); //Send (possible) memory to client so it can store it
        readFromConn(); //Get the confirmation that the client has registered the memory
        
SyncAllocations();
return result;
}

        PFN_vkDebugReportCallbackEXT deserialize_funcpointer(PFN_vkDebugReportCallbackEXT::Reader reader){
            //Will only be called by the server
            
            return PFN_vkDebugReportCallbackEXT_wrapper;
            };
        

            void handle_PFN_vkDebugReportCallbackEXT_request(PFN_vkDebugReportCallbackEXT::Reader reader){
            //Will only be called by the client
            // Recieved data from server's PFN_vkDebugReportCallbackEXT wrapper, and will execute the actual function
            auto funcpointer=id_to_PFN_vkDebugReportCallbackEXT[reader.getId()];
        
VkDebugReportFlagsEXT flags;
[&](){[&](){[&](){(flags)=reader.getflags();}();}();}();
VkDebugReportObjectTypeEXT objectType;
[&](){[&](){[&](){(objectType)=reader.getobjectType();}();}();}();
uint64_t object;
[&](){(object)=reader.getobject();}();
size_t location;
[&](){(location)=reader.getlocation();}();
int32_t messageCode;
[&](){(messageCode)=reader.getmessageCode();}();
const char* pLayerPrefix;
[&](){ char* temp_QPuseiC[&](){
            if (!reader.haspLayerPrefix()){
                (pLayerPrefix)=NULL;
            return; }{native_concat()}=(char*)malloc(reader.getpLayerPrefix().size();*sizeof(char));
        auto proto_arr=reader.getpLayerPrefix(reader.getpLayerPrefix().size(););
        for(int pFiaGQG=0; pFiaGQG < reader.getpLayerPrefix().size();; pFiaGQG++){
            [&](){((pLayerPrefix)[pFiaGQG])=proto_arr[pFiaGQG];}();
        }
        }();(pLayerPrefix)=temp_QPuseiC;}();
const char* pMessage;
[&](){ char* temp_apslgql[&](){
            if (!reader.haspMessage()){
                (pMessage)=NULL;
            return; }{native_concat()}=(char*)malloc(reader.getpMessage().size();*sizeof(char));
        auto proto_arr=reader.getpMessage(reader.getpMessage().size(););
        for(int oUIcmMP=0; oUIcmMP < reader.getpMessage().size();; oUIcmMP++){
            [&](){((pMessage)[oUIcmMP])=proto_arr[oUIcmMP];}();
        }
        }();(pMessage)=temp_apslgql;}();
void* pUserData;
[&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_jKUCByC;[&](){
            if (!reader.haspUserData()){
                (temp_jKUCByCpUserData)=NULL;
            return; }{native_concat()}=(char*)malloc(reader.getpUserData().size();*sizeof(char));
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int GzbOwAQ=0; GzbOwAQ < reader.getpUserData().size();; GzbOwAQ++){
            [&](){((temp_jKUCByCpUserData)[GzbOwAQ])=proto_arr[GzbOwAQ];}();
        }
        }();(pUserData)=temp_jKUCByC;}();
auto result=funcpointer(flags,objectType,object,location,messageCode,pLayerPrefix,pMessage,pUserData);

        MallocMessageBuilder m;
        auto message=m.initRoot<Message>();
        auto builder=message.initPFN_vkDebugReportCallbackEXT();
        
[&](){[&](){[&](){return builder.setflags((flags));}();}();}();
[&](){[&](){[&](){return builder.setobjectType((objectType));}();}();}();
[&](){return builder.setobject((object));}();
[&](){return builder.setlocation((location));}();
[&](){return builder.setmessageCode((messageCode));}();
[&](){
            if ((pLayerPrefix)==NULL){
                builder.disownpLayerPrefix();
            return; }
        auto proto_arr=builder.initpLayerPrefix();
        for(int EvbekCn=0; EvbekCn < strlen((pLayerPrefix))+1; EvbekCn++){
            [&](){return proto_arr.set(EvbekCn,((pLayerPrefix)[EvbekCn]));}();
        }
        }();
[&](){
            if ((pMessage)==NULL){
                builder.disownpMessage();
            return; }
        auto proto_arr=builder.initpMessage();
        for(int zqBMvjH=0; zqBMvjH < strlen((pMessage))+1; zqBMvjH++){
            [&](){return proto_arr.set(zqBMvjH,((pMessage)[zqBMvjH]));}();
        }
        }();
[&](){
            if ((pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(pUserData)pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int GzbOwAQ=0; GzbOwAQ < strlen(((char*)(pUserData)pUserData))+1; GzbOwAQ++){
            [&](){return proto_arr.set(GzbOwAQ,(((char*)(pUserData)pUserData)[GzbOwAQ]));}();
        }
        }();}();
[&](){[&](){(result)=builder.getresult();}();}();
writeToConn(m);
};
std::map<uintptr_t,PFN_vkDebugUtilsMessengerCallbackEXT> id_to_PFN_vkDebugUtilsMessengerCallbackEXT;

    void serialize_funcpointer(PFN_vkDebugUtilsMessengerCallbackEXT::Builder builder, PFN_vkDebugUtilsMessengerCallbackEXT build){
        //Will only be called by the client
        return;
    }
    

        auto PFN_vkDebugUtilsMessengerCallbackEXT_wrapper( VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageTypes, const VkDebugUtilsMessengerCallbackDataEXT* pCallbackData, void* pUserData){
        //Will only be called by the server
        
        MallocMessageBuilder m;
        auto message=m.initRoot<Message>();
        auto builder=message.initPFN_vkDebugUtilsMessengerCallbackEXT();
        
[&](){[&](){[&](){return builder.setmessageSeverity((messageSeverity));}();}();}();
[&](){[&](){[&](){return builder.setmessageTypes((messageTypes));}();}();}();
[&](){
            if ((pCallbackData)==NULL){
                builder.disownpCallbackData();
            return; }
        auto proto_arr=builder.initpCallbackData();
        for(int SAnJMKd=0; SAnJMKd < 1; SAnJMKd++){
            [&](){
            auto temp=proto_arr[SAnJMKd];
            return serialize_struct(((pCallbackData)[SAnJMKd]), temp);
            }();
        }
        }();
[&](){
            if ((pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(pUserData)pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int GzbOwAQ=0; GzbOwAQ < strlen(((char*)(pUserData)pUserData))+1; GzbOwAQ++){
            [&](){return proto_arr.set(GzbOwAQ,(((char*)(pUserData)pUserData)[GzbOwAQ]));}();
        }
        }();}();

        builder.setId( ((pUserData*)pUserData)->PFN_vkDebugUtilsMessengerCallbackEXT );
        writeToConn(m); //Send request
        auto reader=readFromConn().getPFN_vkDebugUtilsMessengerCallbackEXT(); //Recieve response
        VkBool32 result;
        
[&](){[&](){[&](){(messageSeverity)=reader.getmessageSeverity();}();}();}();
[&](){[&](){[&](){(messageTypes)=reader.getmessageTypes();}();}();}();

[&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_jKUCByC;[&](){
            if (!reader.haspUserData()){
                (temp_jKUCByCpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int GzbOwAQ=0; GzbOwAQ < reader.getpUserData().size();; GzbOwAQ++){
            [&](){((temp_jKUCByCpUserData)[GzbOwAQ])=proto_arr[GzbOwAQ];}();
        }
        }();(pUserData)=temp_jKUCByC;}();
[&](){[&](){(result)=reader.getresult();}();}();

        MallocMessageBuilder m;
        auto message=m.initRoot<Message>();
        auto builder=message.initPFN_vkDebugUtilsMessengerCallbackEXT();
        
builder.setMem(0);

        writeToConn(m); //Send (possible) memory to client so it can store it
        readFromConn(); //Get the confirmation that the client has registered the memory
        
SyncAllocations();
return result;
}

        PFN_vkDebugUtilsMessengerCallbackEXT deserialize_funcpointer(PFN_vkDebugUtilsMessengerCallbackEXT::Reader reader){
            //Will only be called by the server
            
            return PFN_vkDebugUtilsMessengerCallbackEXT_wrapper;
            };
        

            void handle_PFN_vkDebugUtilsMessengerCallbackEXT_request(PFN_vkDebugUtilsMessengerCallbackEXT::Reader reader){
            //Will only be called by the client
            // Recieved data from server's PFN_vkDebugUtilsMessengerCallbackEXT wrapper, and will execute the actual function
            auto funcpointer=id_to_PFN_vkDebugUtilsMessengerCallbackEXT[reader.getId()];
        
VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity;
[&](){[&](){[&](){(messageSeverity)=reader.getmessageSeverity();}();}();}();
VkDebugUtilsMessageTypeFlagsEXT messageTypes;
[&](){[&](){[&](){(messageTypes)=reader.getmessageTypes();}();}();}();
const VkDebugUtilsMessengerCallbackDataEXT* pCallbackData;
[&](){ VkDebugUtilsMessengerCallbackDataEXT* temp_IuzNdgl[&](){
            if (!reader.haspCallbackData()){
                (pCallbackData)=NULL;
            return; }{native_concat()}=(VkDebugUtilsMessengerCallbackDataEXT*)malloc(1*sizeof(VkDebugUtilsMessengerCallbackDataEXT));
        auto proto_arr=reader.getpCallbackData(1);
        for(int JIoxlDg=0; JIoxlDg < 1; JIoxlDg++){
            [&](){
            auto temp=proto_arr[JIoxlDg];
            ((pCallbackData)[JIoxlDg])=deserialize_struct(temp);
            }();
        }
        }();(pCallbackData)=temp_IuzNdgl;}();
void* pUserData;
[&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_jKUCByC;[&](){
            if (!reader.haspUserData()){
                (temp_jKUCByCpUserData)=NULL;
            return; }{native_concat()}=(char*)malloc(reader.getpUserData().size();*sizeof(char));
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int GzbOwAQ=0; GzbOwAQ < reader.getpUserData().size();; GzbOwAQ++){
            [&](){((temp_jKUCByCpUserData)[GzbOwAQ])=proto_arr[GzbOwAQ];}();
        }
        }();(pUserData)=temp_jKUCByC;}();
auto result=funcpointer(messageSeverity,messageTypes,pCallbackData,pUserData);

        MallocMessageBuilder m;
        auto message=m.initRoot<Message>();
        auto builder=message.initPFN_vkDebugUtilsMessengerCallbackEXT();
        
[&](){[&](){[&](){return builder.setmessageSeverity((messageSeverity));}();}();}();
[&](){[&](){[&](){return builder.setmessageTypes((messageTypes));}();}();}();
[&](){
            if ((pCallbackData)==NULL){
                builder.disownpCallbackData();
            return; }
        auto proto_arr=builder.initpCallbackData();
        for(int SAnJMKd=0; SAnJMKd < 1; SAnJMKd++){
            [&](){
            auto temp=proto_arr[SAnJMKd];
            return serialize_struct(((pCallbackData)[SAnJMKd]), temp);
            }();
        }
        }();
[&](){
            if ((pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(pUserData)pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int GzbOwAQ=0; GzbOwAQ < strlen(((char*)(pUserData)pUserData))+1; GzbOwAQ++){
            [&](){return proto_arr.set(GzbOwAQ,(((char*)(pUserData)pUserData)[GzbOwAQ]));}();
        }
        }();}();
[&](){[&](){(result)=builder.getresult();}();}();
writeToConn(m);
};
std::map<uintptr_t,PFN_vkDeviceMemoryReportCallbackEXT> id_to_PFN_vkDeviceMemoryReportCallbackEXT;

    void serialize_funcpointer(PFN_vkDeviceMemoryReportCallbackEXT::Builder builder, PFN_vkDeviceMemoryReportCallbackEXT build){
        //Will only be called by the client
        return;
    }
    

        auto PFN_vkDeviceMemoryReportCallbackEXT_wrapper( const VkDeviceMemoryReportCallbackDataEXT* pCallbackData, void* pUserData){
        //Will only be called by the server
        
        MallocMessageBuilder m;
        auto message=m.initRoot<Message>();
        auto builder=message.initPFN_vkDeviceMemoryReportCallbackEXT();
        
[&](){
            if ((pCallbackData)==NULL){
                builder.disownpCallbackData();
            return; }
        auto proto_arr=builder.initpCallbackData();
        for(int visaHGl=0; visaHGl < 1; visaHGl++){
            [&](){
            auto temp=proto_arr[visaHGl];
            return serialize_struct(((pCallbackData)[visaHGl]), temp);
            }();
        }
        }();
[&](){
            if ((pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(pUserData)pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int GzbOwAQ=0; GzbOwAQ < strlen(((char*)(pUserData)pUserData))+1; GzbOwAQ++){
            [&](){return proto_arr.set(GzbOwAQ,(((char*)(pUserData)pUserData)[GzbOwAQ]));}();
        }
        }();}();

        builder.setId( ((pUserData*)pUserData)->PFN_vkDeviceMemoryReportCallbackEXT );
        writeToConn(m); //Send request
        auto reader=readFromConn().getPFN_vkDeviceMemoryReportCallbackEXT(); //Recieve response
        void result;
        

[&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_jKUCByC;[&](){
            if (!reader.haspUserData()){
                (temp_jKUCByCpUserData)=NULL;
            return; }
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int GzbOwAQ=0; GzbOwAQ < reader.getpUserData().size();; GzbOwAQ++){
            [&](){((temp_jKUCByCpUserData)[GzbOwAQ])=proto_arr[GzbOwAQ];}();
        }
        }();(pUserData)=temp_jKUCByC;}();


        MallocMessageBuilder m;
        auto message=m.initRoot<Message>();
        auto builder=message.initPFN_vkDeviceMemoryReportCallbackEXT();
        
builder.setMem(0);

        writeToConn(m); //Send (possible) memory to client so it can store it
        readFromConn(); //Get the confirmation that the client has registered the memory
        
SyncAllocations();
return;
}

        PFN_vkDeviceMemoryReportCallbackEXT deserialize_funcpointer(PFN_vkDeviceMemoryReportCallbackEXT::Reader reader){
            //Will only be called by the server
            
            return PFN_vkDeviceMemoryReportCallbackEXT_wrapper;
            };
        

            void handle_PFN_vkDeviceMemoryReportCallbackEXT_request(PFN_vkDeviceMemoryReportCallbackEXT::Reader reader){
            //Will only be called by the client
            // Recieved data from server's PFN_vkDeviceMemoryReportCallbackEXT wrapper, and will execute the actual function
            auto funcpointer=id_to_PFN_vkDeviceMemoryReportCallbackEXT[reader.getId()];
        
const VkDeviceMemoryReportCallbackDataEXT* pCallbackData;
[&](){ VkDeviceMemoryReportCallbackDataEXT* temp_fgmmfZS[&](){
            if (!reader.haspCallbackData()){
                (pCallbackData)=NULL;
            return; }{native_concat()}=(VkDeviceMemoryReportCallbackDataEXT*)malloc(1*sizeof(VkDeviceMemoryReportCallbackDataEXT));
        auto proto_arr=reader.getpCallbackData(1);
        for(int bZjeYjg=0; bZjeYjg < 1; bZjeYjg++){
            [&](){
            auto temp=proto_arr[bZjeYjg];
            ((pCallbackData)[bZjeYjg])=deserialize_struct(temp);
            }();
        }
        }();(pCallbackData)=temp_fgmmfZS;}();
void* pUserData;
[&](){
            if (!reader.haspUserData()){
                (pUserData)=NULL;
            return; }char* temp_jKUCByC;[&](){
            if (!reader.haspUserData()){
                (temp_jKUCByCpUserData)=NULL;
            return; }{native_concat()}=(char*)malloc(reader.getpUserData().size();*sizeof(char));
        auto proto_arr=reader.getpUserData(reader.getpUserData().size(););
        for(int GzbOwAQ=0; GzbOwAQ < reader.getpUserData().size();; GzbOwAQ++){
            [&](){((temp_jKUCByCpUserData)[GzbOwAQ])=proto_arr[GzbOwAQ];}();
        }
        }();(pUserData)=temp_jKUCByC;}();
funcpointer(pCallbackData,pUserData);

        MallocMessageBuilder m;
        auto message=m.initRoot<Message>();
        auto builder=message.initPFN_vkDeviceMemoryReportCallbackEXT();
        
[&](){
            if ((pCallbackData)==NULL){
                builder.disownpCallbackData();
            return; }
        auto proto_arr=builder.initpCallbackData();
        for(int visaHGl=0; visaHGl < 1; visaHGl++){
            [&](){
            auto temp=proto_arr[visaHGl];
            return serialize_struct(((pCallbackData)[visaHGl]), temp);
            }();
        }
        }();
[&](){
            if ((pUserData)==NULL){
                builder.disownpUserData();
            return; }[&](){
            if (((char*)(pUserData)pUserData)==NULL){
                builder.disownpUserData();
            return; }
        auto proto_arr=builder.initpUserData();
        for(int GzbOwAQ=0; GzbOwAQ < strlen(((char*)(pUserData)pUserData))+1; GzbOwAQ++){
            [&](){return proto_arr.set(GzbOwAQ,(((char*)(pUserData)pUserData)[GzbOwAQ]));}();
        }
        }();}();

writeToConn(m);
};
std::map<uintptr_t,PFN_vkGetInstanceProcAddrLUNARG> id_to_PFN_vkGetInstanceProcAddrLUNARG;

    void serialize_funcpointer(PFN_vkGetInstanceProcAddrLUNARG::Builder builder, PFN_vkGetInstanceProcAddrLUNARG build){
        //Will only be called by the client
        return;
    }
    

        PFN_vkGetInstanceProcAddrLUNARG deserialize_funcpointer(PFN_vkGetInstanceProcAddrLUNARG::Reader reader){
            //Will only be called by the server
            
            return vkGetInstanceProcAddr;
            };
        

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkInstance_to_server_VkInstance;
            std::map<uintptr_t,uintptr_t> server_VkInstance_to_client_VkInstance;
            
        #endif
        

        uintptr_t serialize_handle(VkInstance data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkInstance_to_server_VkInstance.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkInstance %p not found!\n",data);
                    }
                     debug_printf("Serializing VkInstance %p...\n",(VkInstance)client_VkInstance_to_server_VkInstance[(uintptr_t)data]);
                    result=client_VkInstance_to_server_VkInstance[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkInstance deserialize_handle(uintptr_t data){
                VkInstance result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkInstance)data);
                    if (server_VkInstance_to_client_VkInstance.contains(data)){
                        result=(VkInstance)server_VkInstance_to_client_VkInstance[data];
                        debug_printf("Deserializing to VkInstance %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkInstance));
                        debug_printf("Mapping to VkInstance %p...\n",handle);
                        server_VkInstance_to_client_VkInstance[data]=(uintptr_t)handle;
                        client_VkInstance_to_server_VkInstance[(uintptr_t)handle]=data;
                        
                        result=(VkInstance)handle; //This is highly dangerous -- I'm basically casting VkInstance* to VkInstance. I should do *((VkInstance*)alloc_icd_object())
                    }
                #else
                    result=(VkInstance)data;
                #endif
                
                return result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkPhysicalDevice_to_server_VkPhysicalDevice;
            std::map<uintptr_t,uintptr_t> server_VkPhysicalDevice_to_client_VkPhysicalDevice;
            
        #endif
        

        uintptr_t serialize_handle(VkPhysicalDevice data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkPhysicalDevice_to_server_VkPhysicalDevice.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkPhysicalDevice %p not found!\n",data);
                    }
                     debug_printf("Serializing VkPhysicalDevice %p...\n",(VkPhysicalDevice)client_VkPhysicalDevice_to_server_VkPhysicalDevice[(uintptr_t)data]);
                    result=client_VkPhysicalDevice_to_server_VkPhysicalDevice[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkPhysicalDevice deserialize_handle(uintptr_t data){
                VkPhysicalDevice result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkPhysicalDevice)data);
                    if (server_VkPhysicalDevice_to_client_VkPhysicalDevice.contains(data)){
                        result=(VkPhysicalDevice)server_VkPhysicalDevice_to_client_VkPhysicalDevice[data];
                        debug_printf("Deserializing to VkPhysicalDevice %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkPhysicalDevice));
                        debug_printf("Mapping to VkPhysicalDevice %p...\n",handle);
                        server_VkPhysicalDevice_to_client_VkPhysicalDevice[data]=(uintptr_t)handle;
                        client_VkPhysicalDevice_to_server_VkPhysicalDevice[(uintptr_t)handle]=data;
                        
                        result=(VkPhysicalDevice)handle; //This is highly dangerous -- I'm basically casting VkPhysicalDevice* to VkPhysicalDevice. I should do *((VkPhysicalDevice*)alloc_icd_object())
                    }
                #else
                    result=(VkPhysicalDevice)data;
                #endif
                
                return result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkDevice_to_server_VkDevice;
            std::map<uintptr_t,uintptr_t> server_VkDevice_to_client_VkDevice;
            
        #endif
        

        uintptr_t serialize_handle(VkDevice data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkDevice_to_server_VkDevice.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkDevice %p not found!\n",data);
                    }
                     debug_printf("Serializing VkDevice %p...\n",(VkDevice)client_VkDevice_to_server_VkDevice[(uintptr_t)data]);
                    result=client_VkDevice_to_server_VkDevice[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkDevice deserialize_handle(uintptr_t data){
                VkDevice result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkDevice)data);
                    if (server_VkDevice_to_client_VkDevice.contains(data)){
                        result=(VkDevice)server_VkDevice_to_client_VkDevice[data];
                        debug_printf("Deserializing to VkDevice %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkDevice));
                        debug_printf("Mapping to VkDevice %p...\n",handle);
                        server_VkDevice_to_client_VkDevice[data]=(uintptr_t)handle;
                        client_VkDevice_to_server_VkDevice[(uintptr_t)handle]=data;
                        
                        result=(VkDevice)handle; //This is highly dangerous -- I'm basically casting VkDevice* to VkDevice. I should do *((VkDevice*)alloc_icd_object())
                    }
                #else
                    result=(VkDevice)data;
                #endif
                
                return result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkQueue_to_server_VkQueue;
            std::map<uintptr_t,uintptr_t> server_VkQueue_to_client_VkQueue;
            
        #endif
        

        uintptr_t serialize_handle(VkQueue data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkQueue_to_server_VkQueue.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkQueue %p not found!\n",data);
                    }
                     debug_printf("Serializing VkQueue %p...\n",(VkQueue)client_VkQueue_to_server_VkQueue[(uintptr_t)data]);
                    result=client_VkQueue_to_server_VkQueue[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkQueue deserialize_handle(uintptr_t data){
                VkQueue result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkQueue)data);
                    if (server_VkQueue_to_client_VkQueue.contains(data)){
                        result=(VkQueue)server_VkQueue_to_client_VkQueue[data];
                        debug_printf("Deserializing to VkQueue %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkQueue));
                        debug_printf("Mapping to VkQueue %p...\n",handle);
                        server_VkQueue_to_client_VkQueue[data]=(uintptr_t)handle;
                        client_VkQueue_to_server_VkQueue[(uintptr_t)handle]=data;
                        
                        result=(VkQueue)handle; //This is highly dangerous -- I'm basically casting VkQueue* to VkQueue. I should do *((VkQueue*)alloc_icd_object())
                    }
                #else
                    result=(VkQueue)data;
                #endif
                
                return result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkCommandBuffer_to_server_VkCommandBuffer;
            std::map<uintptr_t,uintptr_t> server_VkCommandBuffer_to_client_VkCommandBuffer;
            
        #endif
        

        uintptr_t serialize_handle(VkCommandBuffer data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkCommandBuffer_to_server_VkCommandBuffer.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkCommandBuffer %p not found!\n",data);
                    }
                     debug_printf("Serializing VkCommandBuffer %p...\n",(VkCommandBuffer)client_VkCommandBuffer_to_server_VkCommandBuffer[(uintptr_t)data]);
                    result=client_VkCommandBuffer_to_server_VkCommandBuffer[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkCommandBuffer deserialize_handle(uintptr_t data){
                VkCommandBuffer result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkCommandBuffer)data);
                    if (server_VkCommandBuffer_to_client_VkCommandBuffer.contains(data)){
                        result=(VkCommandBuffer)server_VkCommandBuffer_to_client_VkCommandBuffer[data];
                        debug_printf("Deserializing to VkCommandBuffer %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkCommandBuffer));
                        debug_printf("Mapping to VkCommandBuffer %p...\n",handle);
                        server_VkCommandBuffer_to_client_VkCommandBuffer[data]=(uintptr_t)handle;
                        client_VkCommandBuffer_to_server_VkCommandBuffer[(uintptr_t)handle]=data;
                        
                        result=(VkCommandBuffer)handle; //This is highly dangerous -- I'm basically casting VkCommandBuffer* to VkCommandBuffer. I should do *((VkCommandBuffer*)alloc_icd_object())
                    }
                #else
                    result=(VkCommandBuffer)data;
                #endif
                
                return result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkDeviceMemory_to_server_VkDeviceMemory;
            std::map<uintptr_t,uintptr_t> server_VkDeviceMemory_to_client_VkDeviceMemory;
            
        #endif
        

        uintptr_t serialize_handle(VkDeviceMemory data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkDeviceMemory_to_server_VkDeviceMemory.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkDeviceMemory %p not found!\n",data);
                    }
                     debug_printf("Serializing VkDeviceMemory %p...\n",(VkDeviceMemory)client_VkDeviceMemory_to_server_VkDeviceMemory[(uintptr_t)data]);
                    result=client_VkDeviceMemory_to_server_VkDeviceMemory[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkDeviceMemory deserialize_handle(uintptr_t data){
                VkDeviceMemory result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkDeviceMemory)data);
                    if (server_VkDeviceMemory_to_client_VkDeviceMemory.contains(data)){
                        result=(VkDeviceMemory)server_VkDeviceMemory_to_client_VkDeviceMemory[data];
                        debug_printf("Deserializing to VkDeviceMemory %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkDeviceMemory));
                        debug_printf("Mapping to VkDeviceMemory %p...\n",handle);
                        server_VkDeviceMemory_to_client_VkDeviceMemory[data]=(uintptr_t)handle;
                        client_VkDeviceMemory_to_server_VkDeviceMemory[(uintptr_t)handle]=data;
                        
                        result=(VkDeviceMemory)handle; //This is highly dangerous -- I'm basically casting VkDeviceMemory* to VkDeviceMemory. I should do *((VkDeviceMemory*)alloc_icd_object())
                    }
                #else
                    result=(VkDeviceMemory)data;
                #endif
                
                return result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkCommandPool_to_server_VkCommandPool;
            std::map<uintptr_t,uintptr_t> server_VkCommandPool_to_client_VkCommandPool;
            
        #endif
        

        uintptr_t serialize_handle(VkCommandPool data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkCommandPool_to_server_VkCommandPool.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkCommandPool %p not found!\n",data);
                    }
                     debug_printf("Serializing VkCommandPool %p...\n",(VkCommandPool)client_VkCommandPool_to_server_VkCommandPool[(uintptr_t)data]);
                    result=client_VkCommandPool_to_server_VkCommandPool[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkCommandPool deserialize_handle(uintptr_t data){
                VkCommandPool result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkCommandPool)data);
                    if (server_VkCommandPool_to_client_VkCommandPool.contains(data)){
                        result=(VkCommandPool)server_VkCommandPool_to_client_VkCommandPool[data];
                        debug_printf("Deserializing to VkCommandPool %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkCommandPool));
                        debug_printf("Mapping to VkCommandPool %p...\n",handle);
                        server_VkCommandPool_to_client_VkCommandPool[data]=(uintptr_t)handle;
                        client_VkCommandPool_to_server_VkCommandPool[(uintptr_t)handle]=data;
                        
                        result=(VkCommandPool)handle; //This is highly dangerous -- I'm basically casting VkCommandPool* to VkCommandPool. I should do *((VkCommandPool*)alloc_icd_object())
                    }
                #else
                    result=(VkCommandPool)data;
                #endif
                
                return result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkBuffer_to_server_VkBuffer;
            std::map<uintptr_t,uintptr_t> server_VkBuffer_to_client_VkBuffer;
            
        #endif
        

        uintptr_t serialize_handle(VkBuffer data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkBuffer_to_server_VkBuffer.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkBuffer %p not found!\n",data);
                    }
                     debug_printf("Serializing VkBuffer %p...\n",(VkBuffer)client_VkBuffer_to_server_VkBuffer[(uintptr_t)data]);
                    result=client_VkBuffer_to_server_VkBuffer[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkBuffer deserialize_handle(uintptr_t data){
                VkBuffer result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkBuffer)data);
                    if (server_VkBuffer_to_client_VkBuffer.contains(data)){
                        result=(VkBuffer)server_VkBuffer_to_client_VkBuffer[data];
                        debug_printf("Deserializing to VkBuffer %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkBuffer));
                        debug_printf("Mapping to VkBuffer %p...\n",handle);
                        server_VkBuffer_to_client_VkBuffer[data]=(uintptr_t)handle;
                        client_VkBuffer_to_server_VkBuffer[(uintptr_t)handle]=data;
                        
                        result=(VkBuffer)handle; //This is highly dangerous -- I'm basically casting VkBuffer* to VkBuffer. I should do *((VkBuffer*)alloc_icd_object())
                    }
                #else
                    result=(VkBuffer)data;
                #endif
                
                return result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkBufferView_to_server_VkBufferView;
            std::map<uintptr_t,uintptr_t> server_VkBufferView_to_client_VkBufferView;
            
        #endif
        

        uintptr_t serialize_handle(VkBufferView data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkBufferView_to_server_VkBufferView.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkBufferView %p not found!\n",data);
                    }
                     debug_printf("Serializing VkBufferView %p...\n",(VkBufferView)client_VkBufferView_to_server_VkBufferView[(uintptr_t)data]);
                    result=client_VkBufferView_to_server_VkBufferView[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkBufferView deserialize_handle(uintptr_t data){
                VkBufferView result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkBufferView)data);
                    if (server_VkBufferView_to_client_VkBufferView.contains(data)){
                        result=(VkBufferView)server_VkBufferView_to_client_VkBufferView[data];
                        debug_printf("Deserializing to VkBufferView %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkBufferView));
                        debug_printf("Mapping to VkBufferView %p...\n",handle);
                        server_VkBufferView_to_client_VkBufferView[data]=(uintptr_t)handle;
                        client_VkBufferView_to_server_VkBufferView[(uintptr_t)handle]=data;
                        
                        result=(VkBufferView)handle; //This is highly dangerous -- I'm basically casting VkBufferView* to VkBufferView. I should do *((VkBufferView*)alloc_icd_object())
                    }
                #else
                    result=(VkBufferView)data;
                #endif
                
                return result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkImage_to_server_VkImage;
            std::map<uintptr_t,uintptr_t> server_VkImage_to_client_VkImage;
            
        #endif
        

        uintptr_t serialize_handle(VkImage data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkImage_to_server_VkImage.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkImage %p not found!\n",data);
                    }
                     debug_printf("Serializing VkImage %p...\n",(VkImage)client_VkImage_to_server_VkImage[(uintptr_t)data]);
                    result=client_VkImage_to_server_VkImage[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkImage deserialize_handle(uintptr_t data){
                VkImage result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkImage)data);
                    if (server_VkImage_to_client_VkImage.contains(data)){
                        result=(VkImage)server_VkImage_to_client_VkImage[data];
                        debug_printf("Deserializing to VkImage %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkImage));
                        debug_printf("Mapping to VkImage %p...\n",handle);
                        server_VkImage_to_client_VkImage[data]=(uintptr_t)handle;
                        client_VkImage_to_server_VkImage[(uintptr_t)handle]=data;
                        
                        result=(VkImage)handle; //This is highly dangerous -- I'm basically casting VkImage* to VkImage. I should do *((VkImage*)alloc_icd_object())
                    }
                #else
                    result=(VkImage)data;
                #endif
                
                return result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkImageView_to_server_VkImageView;
            std::map<uintptr_t,uintptr_t> server_VkImageView_to_client_VkImageView;
            
        #endif
        

        uintptr_t serialize_handle(VkImageView data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkImageView_to_server_VkImageView.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkImageView %p not found!\n",data);
                    }
                     debug_printf("Serializing VkImageView %p...\n",(VkImageView)client_VkImageView_to_server_VkImageView[(uintptr_t)data]);
                    result=client_VkImageView_to_server_VkImageView[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkImageView deserialize_handle(uintptr_t data){
                VkImageView result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkImageView)data);
                    if (server_VkImageView_to_client_VkImageView.contains(data)){
                        result=(VkImageView)server_VkImageView_to_client_VkImageView[data];
                        debug_printf("Deserializing to VkImageView %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkImageView));
                        debug_printf("Mapping to VkImageView %p...\n",handle);
                        server_VkImageView_to_client_VkImageView[data]=(uintptr_t)handle;
                        client_VkImageView_to_server_VkImageView[(uintptr_t)handle]=data;
                        
                        result=(VkImageView)handle; //This is highly dangerous -- I'm basically casting VkImageView* to VkImageView. I should do *((VkImageView*)alloc_icd_object())
                    }
                #else
                    result=(VkImageView)data;
                #endif
                
                return result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkShaderModule_to_server_VkShaderModule;
            std::map<uintptr_t,uintptr_t> server_VkShaderModule_to_client_VkShaderModule;
            
        #endif
        

        uintptr_t serialize_handle(VkShaderModule data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkShaderModule_to_server_VkShaderModule.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkShaderModule %p not found!\n",data);
                    }
                     debug_printf("Serializing VkShaderModule %p...\n",(VkShaderModule)client_VkShaderModule_to_server_VkShaderModule[(uintptr_t)data]);
                    result=client_VkShaderModule_to_server_VkShaderModule[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkShaderModule deserialize_handle(uintptr_t data){
                VkShaderModule result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkShaderModule)data);
                    if (server_VkShaderModule_to_client_VkShaderModule.contains(data)){
                        result=(VkShaderModule)server_VkShaderModule_to_client_VkShaderModule[data];
                        debug_printf("Deserializing to VkShaderModule %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkShaderModule));
                        debug_printf("Mapping to VkShaderModule %p...\n",handle);
                        server_VkShaderModule_to_client_VkShaderModule[data]=(uintptr_t)handle;
                        client_VkShaderModule_to_server_VkShaderModule[(uintptr_t)handle]=data;
                        
                        result=(VkShaderModule)handle; //This is highly dangerous -- I'm basically casting VkShaderModule* to VkShaderModule. I should do *((VkShaderModule*)alloc_icd_object())
                    }
                #else
                    result=(VkShaderModule)data;
                #endif
                
                return result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkPipeline_to_server_VkPipeline;
            std::map<uintptr_t,uintptr_t> server_VkPipeline_to_client_VkPipeline;
            
        #endif
        

        uintptr_t serialize_handle(VkPipeline data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkPipeline_to_server_VkPipeline.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkPipeline %p not found!\n",data);
                    }
                     debug_printf("Serializing VkPipeline %p...\n",(VkPipeline)client_VkPipeline_to_server_VkPipeline[(uintptr_t)data]);
                    result=client_VkPipeline_to_server_VkPipeline[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkPipeline deserialize_handle(uintptr_t data){
                VkPipeline result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkPipeline)data);
                    if (server_VkPipeline_to_client_VkPipeline.contains(data)){
                        result=(VkPipeline)server_VkPipeline_to_client_VkPipeline[data];
                        debug_printf("Deserializing to VkPipeline %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkPipeline));
                        debug_printf("Mapping to VkPipeline %p...\n",handle);
                        server_VkPipeline_to_client_VkPipeline[data]=(uintptr_t)handle;
                        client_VkPipeline_to_server_VkPipeline[(uintptr_t)handle]=data;
                        
                        result=(VkPipeline)handle; //This is highly dangerous -- I'm basically casting VkPipeline* to VkPipeline. I should do *((VkPipeline*)alloc_icd_object())
                    }
                #else
                    result=(VkPipeline)data;
                #endif
                
                return result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkPipelineLayout_to_server_VkPipelineLayout;
            std::map<uintptr_t,uintptr_t> server_VkPipelineLayout_to_client_VkPipelineLayout;
            
        #endif
        

        uintptr_t serialize_handle(VkPipelineLayout data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkPipelineLayout_to_server_VkPipelineLayout.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkPipelineLayout %p not found!\n",data);
                    }
                     debug_printf("Serializing VkPipelineLayout %p...\n",(VkPipelineLayout)client_VkPipelineLayout_to_server_VkPipelineLayout[(uintptr_t)data]);
                    result=client_VkPipelineLayout_to_server_VkPipelineLayout[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkPipelineLayout deserialize_handle(uintptr_t data){
                VkPipelineLayout result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkPipelineLayout)data);
                    if (server_VkPipelineLayout_to_client_VkPipelineLayout.contains(data)){
                        result=(VkPipelineLayout)server_VkPipelineLayout_to_client_VkPipelineLayout[data];
                        debug_printf("Deserializing to VkPipelineLayout %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkPipelineLayout));
                        debug_printf("Mapping to VkPipelineLayout %p...\n",handle);
                        server_VkPipelineLayout_to_client_VkPipelineLayout[data]=(uintptr_t)handle;
                        client_VkPipelineLayout_to_server_VkPipelineLayout[(uintptr_t)handle]=data;
                        
                        result=(VkPipelineLayout)handle; //This is highly dangerous -- I'm basically casting VkPipelineLayout* to VkPipelineLayout. I should do *((VkPipelineLayout*)alloc_icd_object())
                    }
                #else
                    result=(VkPipelineLayout)data;
                #endif
                
                return result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkSampler_to_server_VkSampler;
            std::map<uintptr_t,uintptr_t> server_VkSampler_to_client_VkSampler;
            
        #endif
        

        uintptr_t serialize_handle(VkSampler data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkSampler_to_server_VkSampler.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkSampler %p not found!\n",data);
                    }
                     debug_printf("Serializing VkSampler %p...\n",(VkSampler)client_VkSampler_to_server_VkSampler[(uintptr_t)data]);
                    result=client_VkSampler_to_server_VkSampler[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkSampler deserialize_handle(uintptr_t data){
                VkSampler result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkSampler)data);
                    if (server_VkSampler_to_client_VkSampler.contains(data)){
                        result=(VkSampler)server_VkSampler_to_client_VkSampler[data];
                        debug_printf("Deserializing to VkSampler %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkSampler));
                        debug_printf("Mapping to VkSampler %p...\n",handle);
                        server_VkSampler_to_client_VkSampler[data]=(uintptr_t)handle;
                        client_VkSampler_to_server_VkSampler[(uintptr_t)handle]=data;
                        
                        result=(VkSampler)handle; //This is highly dangerous -- I'm basically casting VkSampler* to VkSampler. I should do *((VkSampler*)alloc_icd_object())
                    }
                #else
                    result=(VkSampler)data;
                #endif
                
                return result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkDescriptorSet_to_server_VkDescriptorSet;
            std::map<uintptr_t,uintptr_t> server_VkDescriptorSet_to_client_VkDescriptorSet;
            
        #endif
        

        uintptr_t serialize_handle(VkDescriptorSet data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkDescriptorSet_to_server_VkDescriptorSet.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkDescriptorSet %p not found!\n",data);
                    }
                     debug_printf("Serializing VkDescriptorSet %p...\n",(VkDescriptorSet)client_VkDescriptorSet_to_server_VkDescriptorSet[(uintptr_t)data]);
                    result=client_VkDescriptorSet_to_server_VkDescriptorSet[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkDescriptorSet deserialize_handle(uintptr_t data){
                VkDescriptorSet result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkDescriptorSet)data);
                    if (server_VkDescriptorSet_to_client_VkDescriptorSet.contains(data)){
                        result=(VkDescriptorSet)server_VkDescriptorSet_to_client_VkDescriptorSet[data];
                        debug_printf("Deserializing to VkDescriptorSet %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkDescriptorSet));
                        debug_printf("Mapping to VkDescriptorSet %p...\n",handle);
                        server_VkDescriptorSet_to_client_VkDescriptorSet[data]=(uintptr_t)handle;
                        client_VkDescriptorSet_to_server_VkDescriptorSet[(uintptr_t)handle]=data;
                        
                        result=(VkDescriptorSet)handle; //This is highly dangerous -- I'm basically casting VkDescriptorSet* to VkDescriptorSet. I should do *((VkDescriptorSet*)alloc_icd_object())
                    }
                #else
                    result=(VkDescriptorSet)data;
                #endif
                
                return result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkDescriptorSetLayout_to_server_VkDescriptorSetLayout;
            std::map<uintptr_t,uintptr_t> server_VkDescriptorSetLayout_to_client_VkDescriptorSetLayout;
            
        #endif
        

        uintptr_t serialize_handle(VkDescriptorSetLayout data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkDescriptorSetLayout_to_server_VkDescriptorSetLayout.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkDescriptorSetLayout %p not found!\n",data);
                    }
                     debug_printf("Serializing VkDescriptorSetLayout %p...\n",(VkDescriptorSetLayout)client_VkDescriptorSetLayout_to_server_VkDescriptorSetLayout[(uintptr_t)data]);
                    result=client_VkDescriptorSetLayout_to_server_VkDescriptorSetLayout[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkDescriptorSetLayout deserialize_handle(uintptr_t data){
                VkDescriptorSetLayout result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkDescriptorSetLayout)data);
                    if (server_VkDescriptorSetLayout_to_client_VkDescriptorSetLayout.contains(data)){
                        result=(VkDescriptorSetLayout)server_VkDescriptorSetLayout_to_client_VkDescriptorSetLayout[data];
                        debug_printf("Deserializing to VkDescriptorSetLayout %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkDescriptorSetLayout));
                        debug_printf("Mapping to VkDescriptorSetLayout %p...\n",handle);
                        server_VkDescriptorSetLayout_to_client_VkDescriptorSetLayout[data]=(uintptr_t)handle;
                        client_VkDescriptorSetLayout_to_server_VkDescriptorSetLayout[(uintptr_t)handle]=data;
                        
                        result=(VkDescriptorSetLayout)handle; //This is highly dangerous -- I'm basically casting VkDescriptorSetLayout* to VkDescriptorSetLayout. I should do *((VkDescriptorSetLayout*)alloc_icd_object())
                    }
                #else
                    result=(VkDescriptorSetLayout)data;
                #endif
                
                return result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkDescriptorPool_to_server_VkDescriptorPool;
            std::map<uintptr_t,uintptr_t> server_VkDescriptorPool_to_client_VkDescriptorPool;
            
        #endif
        

        uintptr_t serialize_handle(VkDescriptorPool data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkDescriptorPool_to_server_VkDescriptorPool.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkDescriptorPool %p not found!\n",data);
                    }
                     debug_printf("Serializing VkDescriptorPool %p...\n",(VkDescriptorPool)client_VkDescriptorPool_to_server_VkDescriptorPool[(uintptr_t)data]);
                    result=client_VkDescriptorPool_to_server_VkDescriptorPool[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkDescriptorPool deserialize_handle(uintptr_t data){
                VkDescriptorPool result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkDescriptorPool)data);
                    if (server_VkDescriptorPool_to_client_VkDescriptorPool.contains(data)){
                        result=(VkDescriptorPool)server_VkDescriptorPool_to_client_VkDescriptorPool[data];
                        debug_printf("Deserializing to VkDescriptorPool %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkDescriptorPool));
                        debug_printf("Mapping to VkDescriptorPool %p...\n",handle);
                        server_VkDescriptorPool_to_client_VkDescriptorPool[data]=(uintptr_t)handle;
                        client_VkDescriptorPool_to_server_VkDescriptorPool[(uintptr_t)handle]=data;
                        
                        result=(VkDescriptorPool)handle; //This is highly dangerous -- I'm basically casting VkDescriptorPool* to VkDescriptorPool. I should do *((VkDescriptorPool*)alloc_icd_object())
                    }
                #else
                    result=(VkDescriptorPool)data;
                #endif
                
                return result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkFence_to_server_VkFence;
            std::map<uintptr_t,uintptr_t> server_VkFence_to_client_VkFence;
            
        #endif
        

        uintptr_t serialize_handle(VkFence data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkFence_to_server_VkFence.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkFence %p not found!\n",data);
                    }
                     debug_printf("Serializing VkFence %p...\n",(VkFence)client_VkFence_to_server_VkFence[(uintptr_t)data]);
                    result=client_VkFence_to_server_VkFence[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkFence deserialize_handle(uintptr_t data){
                VkFence result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkFence)data);
                    if (server_VkFence_to_client_VkFence.contains(data)){
                        result=(VkFence)server_VkFence_to_client_VkFence[data];
                        debug_printf("Deserializing to VkFence %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkFence));
                        debug_printf("Mapping to VkFence %p...\n",handle);
                        server_VkFence_to_client_VkFence[data]=(uintptr_t)handle;
                        client_VkFence_to_server_VkFence[(uintptr_t)handle]=data;
                        
                        result=(VkFence)handle; //This is highly dangerous -- I'm basically casting VkFence* to VkFence. I should do *((VkFence*)alloc_icd_object())
                    }
                #else
                    result=(VkFence)data;
                #endif
                
                return result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkSemaphore_to_server_VkSemaphore;
            std::map<uintptr_t,uintptr_t> server_VkSemaphore_to_client_VkSemaphore;
            
        #endif
        

        uintptr_t serialize_handle(VkSemaphore data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkSemaphore_to_server_VkSemaphore.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkSemaphore %p not found!\n",data);
                    }
                     debug_printf("Serializing VkSemaphore %p...\n",(VkSemaphore)client_VkSemaphore_to_server_VkSemaphore[(uintptr_t)data]);
                    result=client_VkSemaphore_to_server_VkSemaphore[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkSemaphore deserialize_handle(uintptr_t data){
                VkSemaphore result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkSemaphore)data);
                    if (server_VkSemaphore_to_client_VkSemaphore.contains(data)){
                        result=(VkSemaphore)server_VkSemaphore_to_client_VkSemaphore[data];
                        debug_printf("Deserializing to VkSemaphore %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkSemaphore));
                        debug_printf("Mapping to VkSemaphore %p...\n",handle);
                        server_VkSemaphore_to_client_VkSemaphore[data]=(uintptr_t)handle;
                        client_VkSemaphore_to_server_VkSemaphore[(uintptr_t)handle]=data;
                        
                        result=(VkSemaphore)handle; //This is highly dangerous -- I'm basically casting VkSemaphore* to VkSemaphore. I should do *((VkSemaphore*)alloc_icd_object())
                    }
                #else
                    result=(VkSemaphore)data;
                #endif
                
                return result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkEvent_to_server_VkEvent;
            std::map<uintptr_t,uintptr_t> server_VkEvent_to_client_VkEvent;
            
        #endif
        

        uintptr_t serialize_handle(VkEvent data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkEvent_to_server_VkEvent.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkEvent %p not found!\n",data);
                    }
                     debug_printf("Serializing VkEvent %p...\n",(VkEvent)client_VkEvent_to_server_VkEvent[(uintptr_t)data]);
                    result=client_VkEvent_to_server_VkEvent[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkEvent deserialize_handle(uintptr_t data){
                VkEvent result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkEvent)data);
                    if (server_VkEvent_to_client_VkEvent.contains(data)){
                        result=(VkEvent)server_VkEvent_to_client_VkEvent[data];
                        debug_printf("Deserializing to VkEvent %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkEvent));
                        debug_printf("Mapping to VkEvent %p...\n",handle);
                        server_VkEvent_to_client_VkEvent[data]=(uintptr_t)handle;
                        client_VkEvent_to_server_VkEvent[(uintptr_t)handle]=data;
                        
                        result=(VkEvent)handle; //This is highly dangerous -- I'm basically casting VkEvent* to VkEvent. I should do *((VkEvent*)alloc_icd_object())
                    }
                #else
                    result=(VkEvent)data;
                #endif
                
                return result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkQueryPool_to_server_VkQueryPool;
            std::map<uintptr_t,uintptr_t> server_VkQueryPool_to_client_VkQueryPool;
            
        #endif
        

        uintptr_t serialize_handle(VkQueryPool data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkQueryPool_to_server_VkQueryPool.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkQueryPool %p not found!\n",data);
                    }
                     debug_printf("Serializing VkQueryPool %p...\n",(VkQueryPool)client_VkQueryPool_to_server_VkQueryPool[(uintptr_t)data]);
                    result=client_VkQueryPool_to_server_VkQueryPool[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkQueryPool deserialize_handle(uintptr_t data){
                VkQueryPool result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkQueryPool)data);
                    if (server_VkQueryPool_to_client_VkQueryPool.contains(data)){
                        result=(VkQueryPool)server_VkQueryPool_to_client_VkQueryPool[data];
                        debug_printf("Deserializing to VkQueryPool %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkQueryPool));
                        debug_printf("Mapping to VkQueryPool %p...\n",handle);
                        server_VkQueryPool_to_client_VkQueryPool[data]=(uintptr_t)handle;
                        client_VkQueryPool_to_server_VkQueryPool[(uintptr_t)handle]=data;
                        
                        result=(VkQueryPool)handle; //This is highly dangerous -- I'm basically casting VkQueryPool* to VkQueryPool. I should do *((VkQueryPool*)alloc_icd_object())
                    }
                #else
                    result=(VkQueryPool)data;
                #endif
                
                return result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkFramebuffer_to_server_VkFramebuffer;
            std::map<uintptr_t,uintptr_t> server_VkFramebuffer_to_client_VkFramebuffer;
            
        #endif
        

        uintptr_t serialize_handle(VkFramebuffer data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkFramebuffer_to_server_VkFramebuffer.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkFramebuffer %p not found!\n",data);
                    }
                     debug_printf("Serializing VkFramebuffer %p...\n",(VkFramebuffer)client_VkFramebuffer_to_server_VkFramebuffer[(uintptr_t)data]);
                    result=client_VkFramebuffer_to_server_VkFramebuffer[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkFramebuffer deserialize_handle(uintptr_t data){
                VkFramebuffer result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkFramebuffer)data);
                    if (server_VkFramebuffer_to_client_VkFramebuffer.contains(data)){
                        result=(VkFramebuffer)server_VkFramebuffer_to_client_VkFramebuffer[data];
                        debug_printf("Deserializing to VkFramebuffer %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkFramebuffer));
                        debug_printf("Mapping to VkFramebuffer %p...\n",handle);
                        server_VkFramebuffer_to_client_VkFramebuffer[data]=(uintptr_t)handle;
                        client_VkFramebuffer_to_server_VkFramebuffer[(uintptr_t)handle]=data;
                        
                        result=(VkFramebuffer)handle; //This is highly dangerous -- I'm basically casting VkFramebuffer* to VkFramebuffer. I should do *((VkFramebuffer*)alloc_icd_object())
                    }
                #else
                    result=(VkFramebuffer)data;
                #endif
                
                return result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkRenderPass_to_server_VkRenderPass;
            std::map<uintptr_t,uintptr_t> server_VkRenderPass_to_client_VkRenderPass;
            
        #endif
        

        uintptr_t serialize_handle(VkRenderPass data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkRenderPass_to_server_VkRenderPass.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkRenderPass %p not found!\n",data);
                    }
                     debug_printf("Serializing VkRenderPass %p...\n",(VkRenderPass)client_VkRenderPass_to_server_VkRenderPass[(uintptr_t)data]);
                    result=client_VkRenderPass_to_server_VkRenderPass[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkRenderPass deserialize_handle(uintptr_t data){
                VkRenderPass result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkRenderPass)data);
                    if (server_VkRenderPass_to_client_VkRenderPass.contains(data)){
                        result=(VkRenderPass)server_VkRenderPass_to_client_VkRenderPass[data];
                        debug_printf("Deserializing to VkRenderPass %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkRenderPass));
                        debug_printf("Mapping to VkRenderPass %p...\n",handle);
                        server_VkRenderPass_to_client_VkRenderPass[data]=(uintptr_t)handle;
                        client_VkRenderPass_to_server_VkRenderPass[(uintptr_t)handle]=data;
                        
                        result=(VkRenderPass)handle; //This is highly dangerous -- I'm basically casting VkRenderPass* to VkRenderPass. I should do *((VkRenderPass*)alloc_icd_object())
                    }
                #else
                    result=(VkRenderPass)data;
                #endif
                
                return result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkPipelineCache_to_server_VkPipelineCache;
            std::map<uintptr_t,uintptr_t> server_VkPipelineCache_to_client_VkPipelineCache;
            
        #endif
        

        uintptr_t serialize_handle(VkPipelineCache data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkPipelineCache_to_server_VkPipelineCache.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkPipelineCache %p not found!\n",data);
                    }
                     debug_printf("Serializing VkPipelineCache %p...\n",(VkPipelineCache)client_VkPipelineCache_to_server_VkPipelineCache[(uintptr_t)data]);
                    result=client_VkPipelineCache_to_server_VkPipelineCache[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkPipelineCache deserialize_handle(uintptr_t data){
                VkPipelineCache result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkPipelineCache)data);
                    if (server_VkPipelineCache_to_client_VkPipelineCache.contains(data)){
                        result=(VkPipelineCache)server_VkPipelineCache_to_client_VkPipelineCache[data];
                        debug_printf("Deserializing to VkPipelineCache %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkPipelineCache));
                        debug_printf("Mapping to VkPipelineCache %p...\n",handle);
                        server_VkPipelineCache_to_client_VkPipelineCache[data]=(uintptr_t)handle;
                        client_VkPipelineCache_to_server_VkPipelineCache[(uintptr_t)handle]=data;
                        
                        result=(VkPipelineCache)handle; //This is highly dangerous -- I'm basically casting VkPipelineCache* to VkPipelineCache. I should do *((VkPipelineCache*)alloc_icd_object())
                    }
                #else
                    result=(VkPipelineCache)data;
                #endif
                
                return result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkIndirectCommandsLayoutNV_to_server_VkIndirectCommandsLayoutNV;
            std::map<uintptr_t,uintptr_t> server_VkIndirectCommandsLayoutNV_to_client_VkIndirectCommandsLayoutNV;
            
        #endif
        

        uintptr_t serialize_handle(VkIndirectCommandsLayoutNV data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkIndirectCommandsLayoutNV_to_server_VkIndirectCommandsLayoutNV.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkIndirectCommandsLayoutNV %p not found!\n",data);
                    }
                     debug_printf("Serializing VkIndirectCommandsLayoutNV %p...\n",(VkIndirectCommandsLayoutNV)client_VkIndirectCommandsLayoutNV_to_server_VkIndirectCommandsLayoutNV[(uintptr_t)data]);
                    result=client_VkIndirectCommandsLayoutNV_to_server_VkIndirectCommandsLayoutNV[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkIndirectCommandsLayoutNV deserialize_handle(uintptr_t data){
                VkIndirectCommandsLayoutNV result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkIndirectCommandsLayoutNV)data);
                    if (server_VkIndirectCommandsLayoutNV_to_client_VkIndirectCommandsLayoutNV.contains(data)){
                        result=(VkIndirectCommandsLayoutNV)server_VkIndirectCommandsLayoutNV_to_client_VkIndirectCommandsLayoutNV[data];
                        debug_printf("Deserializing to VkIndirectCommandsLayoutNV %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkIndirectCommandsLayoutNV));
                        debug_printf("Mapping to VkIndirectCommandsLayoutNV %p...\n",handle);
                        server_VkIndirectCommandsLayoutNV_to_client_VkIndirectCommandsLayoutNV[data]=(uintptr_t)handle;
                        client_VkIndirectCommandsLayoutNV_to_server_VkIndirectCommandsLayoutNV[(uintptr_t)handle]=data;
                        
                        result=(VkIndirectCommandsLayoutNV)handle; //This is highly dangerous -- I'm basically casting VkIndirectCommandsLayoutNV* to VkIndirectCommandsLayoutNV. I should do *((VkIndirectCommandsLayoutNV*)alloc_icd_object())
                    }
                #else
                    result=(VkIndirectCommandsLayoutNV)data;
                #endif
                
                return result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkDescriptorUpdateTemplate_to_server_VkDescriptorUpdateTemplate;
            std::map<uintptr_t,uintptr_t> server_VkDescriptorUpdateTemplate_to_client_VkDescriptorUpdateTemplate;
            
        #endif
        

        uintptr_t serialize_handle(VkDescriptorUpdateTemplate data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkDescriptorUpdateTemplate_to_server_VkDescriptorUpdateTemplate.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkDescriptorUpdateTemplate %p not found!\n",data);
                    }
                     debug_printf("Serializing VkDescriptorUpdateTemplate %p...\n",(VkDescriptorUpdateTemplate)client_VkDescriptorUpdateTemplate_to_server_VkDescriptorUpdateTemplate[(uintptr_t)data]);
                    result=client_VkDescriptorUpdateTemplate_to_server_VkDescriptorUpdateTemplate[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkDescriptorUpdateTemplate deserialize_handle(uintptr_t data){
                VkDescriptorUpdateTemplate result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkDescriptorUpdateTemplate)data);
                    if (server_VkDescriptorUpdateTemplate_to_client_VkDescriptorUpdateTemplate.contains(data)){
                        result=(VkDescriptorUpdateTemplate)server_VkDescriptorUpdateTemplate_to_client_VkDescriptorUpdateTemplate[data];
                        debug_printf("Deserializing to VkDescriptorUpdateTemplate %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkDescriptorUpdateTemplate));
                        debug_printf("Mapping to VkDescriptorUpdateTemplate %p...\n",handle);
                        server_VkDescriptorUpdateTemplate_to_client_VkDescriptorUpdateTemplate[data]=(uintptr_t)handle;
                        client_VkDescriptorUpdateTemplate_to_server_VkDescriptorUpdateTemplate[(uintptr_t)handle]=data;
                        
                        result=(VkDescriptorUpdateTemplate)handle; //This is highly dangerous -- I'm basically casting VkDescriptorUpdateTemplate* to VkDescriptorUpdateTemplate. I should do *((VkDescriptorUpdateTemplate*)alloc_icd_object())
                    }
                #else
                    result=(VkDescriptorUpdateTemplate)data;
                #endif
                
                return result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkDescriptorUpdateTemplateKHR_to_server_VkDescriptorUpdateTemplateKHR;
            std::map<uintptr_t,uintptr_t> server_VkDescriptorUpdateTemplateKHR_to_client_VkDescriptorUpdateTemplateKHR;
            
        #endif
        

        uintptr_t serialize_handle(VkDescriptorUpdateTemplateKHR data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkDescriptorUpdateTemplateKHR_to_server_VkDescriptorUpdateTemplateKHR.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkDescriptorUpdateTemplateKHR %p not found!\n",data);
                    }
                     debug_printf("Serializing VkDescriptorUpdateTemplateKHR %p...\n",(VkDescriptorUpdateTemplateKHR)client_VkDescriptorUpdateTemplateKHR_to_server_VkDescriptorUpdateTemplateKHR[(uintptr_t)data]);
                    result=client_VkDescriptorUpdateTemplateKHR_to_server_VkDescriptorUpdateTemplateKHR[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkDescriptorUpdateTemplateKHR deserialize_handle(uintptr_t data){
                VkDescriptorUpdateTemplateKHR result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkDescriptorUpdateTemplateKHR)data);
                    if (server_VkDescriptorUpdateTemplateKHR_to_client_VkDescriptorUpdateTemplateKHR.contains(data)){
                        result=(VkDescriptorUpdateTemplateKHR)server_VkDescriptorUpdateTemplateKHR_to_client_VkDescriptorUpdateTemplateKHR[data];
                        debug_printf("Deserializing to VkDescriptorUpdateTemplateKHR %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkDescriptorUpdateTemplateKHR));
                        debug_printf("Mapping to VkDescriptorUpdateTemplateKHR %p...\n",handle);
                        server_VkDescriptorUpdateTemplateKHR_to_client_VkDescriptorUpdateTemplateKHR[data]=(uintptr_t)handle;
                        client_VkDescriptorUpdateTemplateKHR_to_server_VkDescriptorUpdateTemplateKHR[(uintptr_t)handle]=data;
                        
                        result=(VkDescriptorUpdateTemplateKHR)handle; //This is highly dangerous -- I'm basically casting VkDescriptorUpdateTemplateKHR* to VkDescriptorUpdateTemplateKHR. I should do *((VkDescriptorUpdateTemplateKHR*)alloc_icd_object())
                    }
                #else
                    result=(VkDescriptorUpdateTemplateKHR)data;
                #endif
                
                return result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkSamplerYcbcrConversion_to_server_VkSamplerYcbcrConversion;
            std::map<uintptr_t,uintptr_t> server_VkSamplerYcbcrConversion_to_client_VkSamplerYcbcrConversion;
            
        #endif
        

        uintptr_t serialize_handle(VkSamplerYcbcrConversion data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkSamplerYcbcrConversion_to_server_VkSamplerYcbcrConversion.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkSamplerYcbcrConversion %p not found!\n",data);
                    }
                     debug_printf("Serializing VkSamplerYcbcrConversion %p...\n",(VkSamplerYcbcrConversion)client_VkSamplerYcbcrConversion_to_server_VkSamplerYcbcrConversion[(uintptr_t)data]);
                    result=client_VkSamplerYcbcrConversion_to_server_VkSamplerYcbcrConversion[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkSamplerYcbcrConversion deserialize_handle(uintptr_t data){
                VkSamplerYcbcrConversion result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkSamplerYcbcrConversion)data);
                    if (server_VkSamplerYcbcrConversion_to_client_VkSamplerYcbcrConversion.contains(data)){
                        result=(VkSamplerYcbcrConversion)server_VkSamplerYcbcrConversion_to_client_VkSamplerYcbcrConversion[data];
                        debug_printf("Deserializing to VkSamplerYcbcrConversion %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkSamplerYcbcrConversion));
                        debug_printf("Mapping to VkSamplerYcbcrConversion %p...\n",handle);
                        server_VkSamplerYcbcrConversion_to_client_VkSamplerYcbcrConversion[data]=(uintptr_t)handle;
                        client_VkSamplerYcbcrConversion_to_server_VkSamplerYcbcrConversion[(uintptr_t)handle]=data;
                        
                        result=(VkSamplerYcbcrConversion)handle; //This is highly dangerous -- I'm basically casting VkSamplerYcbcrConversion* to VkSamplerYcbcrConversion. I should do *((VkSamplerYcbcrConversion*)alloc_icd_object())
                    }
                #else
                    result=(VkSamplerYcbcrConversion)data;
                #endif
                
                return result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkSamplerYcbcrConversionKHR_to_server_VkSamplerYcbcrConversionKHR;
            std::map<uintptr_t,uintptr_t> server_VkSamplerYcbcrConversionKHR_to_client_VkSamplerYcbcrConversionKHR;
            
        #endif
        

        uintptr_t serialize_handle(VkSamplerYcbcrConversionKHR data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkSamplerYcbcrConversionKHR_to_server_VkSamplerYcbcrConversionKHR.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkSamplerYcbcrConversionKHR %p not found!\n",data);
                    }
                     debug_printf("Serializing VkSamplerYcbcrConversionKHR %p...\n",(VkSamplerYcbcrConversionKHR)client_VkSamplerYcbcrConversionKHR_to_server_VkSamplerYcbcrConversionKHR[(uintptr_t)data]);
                    result=client_VkSamplerYcbcrConversionKHR_to_server_VkSamplerYcbcrConversionKHR[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkSamplerYcbcrConversionKHR deserialize_handle(uintptr_t data){
                VkSamplerYcbcrConversionKHR result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkSamplerYcbcrConversionKHR)data);
                    if (server_VkSamplerYcbcrConversionKHR_to_client_VkSamplerYcbcrConversionKHR.contains(data)){
                        result=(VkSamplerYcbcrConversionKHR)server_VkSamplerYcbcrConversionKHR_to_client_VkSamplerYcbcrConversionKHR[data];
                        debug_printf("Deserializing to VkSamplerYcbcrConversionKHR %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkSamplerYcbcrConversionKHR));
                        debug_printf("Mapping to VkSamplerYcbcrConversionKHR %p...\n",handle);
                        server_VkSamplerYcbcrConversionKHR_to_client_VkSamplerYcbcrConversionKHR[data]=(uintptr_t)handle;
                        client_VkSamplerYcbcrConversionKHR_to_server_VkSamplerYcbcrConversionKHR[(uintptr_t)handle]=data;
                        
                        result=(VkSamplerYcbcrConversionKHR)handle; //This is highly dangerous -- I'm basically casting VkSamplerYcbcrConversionKHR* to VkSamplerYcbcrConversionKHR. I should do *((VkSamplerYcbcrConversionKHR*)alloc_icd_object())
                    }
                #else
                    result=(VkSamplerYcbcrConversionKHR)data;
                #endif
                
                return result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkValidationCacheEXT_to_server_VkValidationCacheEXT;
            std::map<uintptr_t,uintptr_t> server_VkValidationCacheEXT_to_client_VkValidationCacheEXT;
            
        #endif
        

        uintptr_t serialize_handle(VkValidationCacheEXT data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkValidationCacheEXT_to_server_VkValidationCacheEXT.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkValidationCacheEXT %p not found!\n",data);
                    }
                     debug_printf("Serializing VkValidationCacheEXT %p...\n",(VkValidationCacheEXT)client_VkValidationCacheEXT_to_server_VkValidationCacheEXT[(uintptr_t)data]);
                    result=client_VkValidationCacheEXT_to_server_VkValidationCacheEXT[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkValidationCacheEXT deserialize_handle(uintptr_t data){
                VkValidationCacheEXT result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkValidationCacheEXT)data);
                    if (server_VkValidationCacheEXT_to_client_VkValidationCacheEXT.contains(data)){
                        result=(VkValidationCacheEXT)server_VkValidationCacheEXT_to_client_VkValidationCacheEXT[data];
                        debug_printf("Deserializing to VkValidationCacheEXT %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkValidationCacheEXT));
                        debug_printf("Mapping to VkValidationCacheEXT %p...\n",handle);
                        server_VkValidationCacheEXT_to_client_VkValidationCacheEXT[data]=(uintptr_t)handle;
                        client_VkValidationCacheEXT_to_server_VkValidationCacheEXT[(uintptr_t)handle]=data;
                        
                        result=(VkValidationCacheEXT)handle; //This is highly dangerous -- I'm basically casting VkValidationCacheEXT* to VkValidationCacheEXT. I should do *((VkValidationCacheEXT*)alloc_icd_object())
                    }
                #else
                    result=(VkValidationCacheEXT)data;
                #endif
                
                return result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkAccelerationStructureKHR_to_server_VkAccelerationStructureKHR;
            std::map<uintptr_t,uintptr_t> server_VkAccelerationStructureKHR_to_client_VkAccelerationStructureKHR;
            
        #endif
        

        uintptr_t serialize_handle(VkAccelerationStructureKHR data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkAccelerationStructureKHR_to_server_VkAccelerationStructureKHR.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkAccelerationStructureKHR %p not found!\n",data);
                    }
                     debug_printf("Serializing VkAccelerationStructureKHR %p...\n",(VkAccelerationStructureKHR)client_VkAccelerationStructureKHR_to_server_VkAccelerationStructureKHR[(uintptr_t)data]);
                    result=client_VkAccelerationStructureKHR_to_server_VkAccelerationStructureKHR[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkAccelerationStructureKHR deserialize_handle(uintptr_t data){
                VkAccelerationStructureKHR result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkAccelerationStructureKHR)data);
                    if (server_VkAccelerationStructureKHR_to_client_VkAccelerationStructureKHR.contains(data)){
                        result=(VkAccelerationStructureKHR)server_VkAccelerationStructureKHR_to_client_VkAccelerationStructureKHR[data];
                        debug_printf("Deserializing to VkAccelerationStructureKHR %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkAccelerationStructureKHR));
                        debug_printf("Mapping to VkAccelerationStructureKHR %p...\n",handle);
                        server_VkAccelerationStructureKHR_to_client_VkAccelerationStructureKHR[data]=(uintptr_t)handle;
                        client_VkAccelerationStructureKHR_to_server_VkAccelerationStructureKHR[(uintptr_t)handle]=data;
                        
                        result=(VkAccelerationStructureKHR)handle; //This is highly dangerous -- I'm basically casting VkAccelerationStructureKHR* to VkAccelerationStructureKHR. I should do *((VkAccelerationStructureKHR*)alloc_icd_object())
                    }
                #else
                    result=(VkAccelerationStructureKHR)data;
                #endif
                
                return result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkAccelerationStructureNV_to_server_VkAccelerationStructureNV;
            std::map<uintptr_t,uintptr_t> server_VkAccelerationStructureNV_to_client_VkAccelerationStructureNV;
            
        #endif
        

        uintptr_t serialize_handle(VkAccelerationStructureNV data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkAccelerationStructureNV_to_server_VkAccelerationStructureNV.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkAccelerationStructureNV %p not found!\n",data);
                    }
                     debug_printf("Serializing VkAccelerationStructureNV %p...\n",(VkAccelerationStructureNV)client_VkAccelerationStructureNV_to_server_VkAccelerationStructureNV[(uintptr_t)data]);
                    result=client_VkAccelerationStructureNV_to_server_VkAccelerationStructureNV[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkAccelerationStructureNV deserialize_handle(uintptr_t data){
                VkAccelerationStructureNV result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkAccelerationStructureNV)data);
                    if (server_VkAccelerationStructureNV_to_client_VkAccelerationStructureNV.contains(data)){
                        result=(VkAccelerationStructureNV)server_VkAccelerationStructureNV_to_client_VkAccelerationStructureNV[data];
                        debug_printf("Deserializing to VkAccelerationStructureNV %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkAccelerationStructureNV));
                        debug_printf("Mapping to VkAccelerationStructureNV %p...\n",handle);
                        server_VkAccelerationStructureNV_to_client_VkAccelerationStructureNV[data]=(uintptr_t)handle;
                        client_VkAccelerationStructureNV_to_server_VkAccelerationStructureNV[(uintptr_t)handle]=data;
                        
                        result=(VkAccelerationStructureNV)handle; //This is highly dangerous -- I'm basically casting VkAccelerationStructureNV* to VkAccelerationStructureNV. I should do *((VkAccelerationStructureNV*)alloc_icd_object())
                    }
                #else
                    result=(VkAccelerationStructureNV)data;
                #endif
                
                return result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkPerformanceConfigurationINTEL_to_server_VkPerformanceConfigurationINTEL;
            std::map<uintptr_t,uintptr_t> server_VkPerformanceConfigurationINTEL_to_client_VkPerformanceConfigurationINTEL;
            
        #endif
        

        uintptr_t serialize_handle(VkPerformanceConfigurationINTEL data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkPerformanceConfigurationINTEL_to_server_VkPerformanceConfigurationINTEL.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkPerformanceConfigurationINTEL %p not found!\n",data);
                    }
                     debug_printf("Serializing VkPerformanceConfigurationINTEL %p...\n",(VkPerformanceConfigurationINTEL)client_VkPerformanceConfigurationINTEL_to_server_VkPerformanceConfigurationINTEL[(uintptr_t)data]);
                    result=client_VkPerformanceConfigurationINTEL_to_server_VkPerformanceConfigurationINTEL[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkPerformanceConfigurationINTEL deserialize_handle(uintptr_t data){
                VkPerformanceConfigurationINTEL result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkPerformanceConfigurationINTEL)data);
                    if (server_VkPerformanceConfigurationINTEL_to_client_VkPerformanceConfigurationINTEL.contains(data)){
                        result=(VkPerformanceConfigurationINTEL)server_VkPerformanceConfigurationINTEL_to_client_VkPerformanceConfigurationINTEL[data];
                        debug_printf("Deserializing to VkPerformanceConfigurationINTEL %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkPerformanceConfigurationINTEL));
                        debug_printf("Mapping to VkPerformanceConfigurationINTEL %p...\n",handle);
                        server_VkPerformanceConfigurationINTEL_to_client_VkPerformanceConfigurationINTEL[data]=(uintptr_t)handle;
                        client_VkPerformanceConfigurationINTEL_to_server_VkPerformanceConfigurationINTEL[(uintptr_t)handle]=data;
                        
                        result=(VkPerformanceConfigurationINTEL)handle; //This is highly dangerous -- I'm basically casting VkPerformanceConfigurationINTEL* to VkPerformanceConfigurationINTEL. I should do *((VkPerformanceConfigurationINTEL*)alloc_icd_object())
                    }
                #else
                    result=(VkPerformanceConfigurationINTEL)data;
                #endif
                
                return result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkDeferredOperationKHR_to_server_VkDeferredOperationKHR;
            std::map<uintptr_t,uintptr_t> server_VkDeferredOperationKHR_to_client_VkDeferredOperationKHR;
            
        #endif
        

        uintptr_t serialize_handle(VkDeferredOperationKHR data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkDeferredOperationKHR_to_server_VkDeferredOperationKHR.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkDeferredOperationKHR %p not found!\n",data);
                    }
                     debug_printf("Serializing VkDeferredOperationKHR %p...\n",(VkDeferredOperationKHR)client_VkDeferredOperationKHR_to_server_VkDeferredOperationKHR[(uintptr_t)data]);
                    result=client_VkDeferredOperationKHR_to_server_VkDeferredOperationKHR[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkDeferredOperationKHR deserialize_handle(uintptr_t data){
                VkDeferredOperationKHR result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkDeferredOperationKHR)data);
                    if (server_VkDeferredOperationKHR_to_client_VkDeferredOperationKHR.contains(data)){
                        result=(VkDeferredOperationKHR)server_VkDeferredOperationKHR_to_client_VkDeferredOperationKHR[data];
                        debug_printf("Deserializing to VkDeferredOperationKHR %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkDeferredOperationKHR));
                        debug_printf("Mapping to VkDeferredOperationKHR %p...\n",handle);
                        server_VkDeferredOperationKHR_to_client_VkDeferredOperationKHR[data]=(uintptr_t)handle;
                        client_VkDeferredOperationKHR_to_server_VkDeferredOperationKHR[(uintptr_t)handle]=data;
                        
                        result=(VkDeferredOperationKHR)handle; //This is highly dangerous -- I'm basically casting VkDeferredOperationKHR* to VkDeferredOperationKHR. I should do *((VkDeferredOperationKHR*)alloc_icd_object())
                    }
                #else
                    result=(VkDeferredOperationKHR)data;
                #endif
                
                return result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkPrivateDataSlot_to_server_VkPrivateDataSlot;
            std::map<uintptr_t,uintptr_t> server_VkPrivateDataSlot_to_client_VkPrivateDataSlot;
            
        #endif
        

        uintptr_t serialize_handle(VkPrivateDataSlot data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkPrivateDataSlot_to_server_VkPrivateDataSlot.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkPrivateDataSlot %p not found!\n",data);
                    }
                     debug_printf("Serializing VkPrivateDataSlot %p...\n",(VkPrivateDataSlot)client_VkPrivateDataSlot_to_server_VkPrivateDataSlot[(uintptr_t)data]);
                    result=client_VkPrivateDataSlot_to_server_VkPrivateDataSlot[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkPrivateDataSlot deserialize_handle(uintptr_t data){
                VkPrivateDataSlot result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkPrivateDataSlot)data);
                    if (server_VkPrivateDataSlot_to_client_VkPrivateDataSlot.contains(data)){
                        result=(VkPrivateDataSlot)server_VkPrivateDataSlot_to_client_VkPrivateDataSlot[data];
                        debug_printf("Deserializing to VkPrivateDataSlot %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkPrivateDataSlot));
                        debug_printf("Mapping to VkPrivateDataSlot %p...\n",handle);
                        server_VkPrivateDataSlot_to_client_VkPrivateDataSlot[data]=(uintptr_t)handle;
                        client_VkPrivateDataSlot_to_server_VkPrivateDataSlot[(uintptr_t)handle]=data;
                        
                        result=(VkPrivateDataSlot)handle; //This is highly dangerous -- I'm basically casting VkPrivateDataSlot* to VkPrivateDataSlot. I should do *((VkPrivateDataSlot*)alloc_icd_object())
                    }
                #else
                    result=(VkPrivateDataSlot)data;
                #endif
                
                return result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkPrivateDataSlotEXT_to_server_VkPrivateDataSlotEXT;
            std::map<uintptr_t,uintptr_t> server_VkPrivateDataSlotEXT_to_client_VkPrivateDataSlotEXT;
            
        #endif
        

        uintptr_t serialize_handle(VkPrivateDataSlotEXT data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkPrivateDataSlotEXT_to_server_VkPrivateDataSlotEXT.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkPrivateDataSlotEXT %p not found!\n",data);
                    }
                     debug_printf("Serializing VkPrivateDataSlotEXT %p...\n",(VkPrivateDataSlotEXT)client_VkPrivateDataSlotEXT_to_server_VkPrivateDataSlotEXT[(uintptr_t)data]);
                    result=client_VkPrivateDataSlotEXT_to_server_VkPrivateDataSlotEXT[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkPrivateDataSlotEXT deserialize_handle(uintptr_t data){
                VkPrivateDataSlotEXT result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkPrivateDataSlotEXT)data);
                    if (server_VkPrivateDataSlotEXT_to_client_VkPrivateDataSlotEXT.contains(data)){
                        result=(VkPrivateDataSlotEXT)server_VkPrivateDataSlotEXT_to_client_VkPrivateDataSlotEXT[data];
                        debug_printf("Deserializing to VkPrivateDataSlotEXT %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkPrivateDataSlotEXT));
                        debug_printf("Mapping to VkPrivateDataSlotEXT %p...\n",handle);
                        server_VkPrivateDataSlotEXT_to_client_VkPrivateDataSlotEXT[data]=(uintptr_t)handle;
                        client_VkPrivateDataSlotEXT_to_server_VkPrivateDataSlotEXT[(uintptr_t)handle]=data;
                        
                        result=(VkPrivateDataSlotEXT)handle; //This is highly dangerous -- I'm basically casting VkPrivateDataSlotEXT* to VkPrivateDataSlotEXT. I should do *((VkPrivateDataSlotEXT*)alloc_icd_object())
                    }
                #else
                    result=(VkPrivateDataSlotEXT)data;
                #endif
                
                return result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkCuModuleNVX_to_server_VkCuModuleNVX;
            std::map<uintptr_t,uintptr_t> server_VkCuModuleNVX_to_client_VkCuModuleNVX;
            
        #endif
        

        uintptr_t serialize_handle(VkCuModuleNVX data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkCuModuleNVX_to_server_VkCuModuleNVX.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkCuModuleNVX %p not found!\n",data);
                    }
                     debug_printf("Serializing VkCuModuleNVX %p...\n",(VkCuModuleNVX)client_VkCuModuleNVX_to_server_VkCuModuleNVX[(uintptr_t)data]);
                    result=client_VkCuModuleNVX_to_server_VkCuModuleNVX[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkCuModuleNVX deserialize_handle(uintptr_t data){
                VkCuModuleNVX result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkCuModuleNVX)data);
                    if (server_VkCuModuleNVX_to_client_VkCuModuleNVX.contains(data)){
                        result=(VkCuModuleNVX)server_VkCuModuleNVX_to_client_VkCuModuleNVX[data];
                        debug_printf("Deserializing to VkCuModuleNVX %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkCuModuleNVX));
                        debug_printf("Mapping to VkCuModuleNVX %p...\n",handle);
                        server_VkCuModuleNVX_to_client_VkCuModuleNVX[data]=(uintptr_t)handle;
                        client_VkCuModuleNVX_to_server_VkCuModuleNVX[(uintptr_t)handle]=data;
                        
                        result=(VkCuModuleNVX)handle; //This is highly dangerous -- I'm basically casting VkCuModuleNVX* to VkCuModuleNVX. I should do *((VkCuModuleNVX*)alloc_icd_object())
                    }
                #else
                    result=(VkCuModuleNVX)data;
                #endif
                
                return result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkCuFunctionNVX_to_server_VkCuFunctionNVX;
            std::map<uintptr_t,uintptr_t> server_VkCuFunctionNVX_to_client_VkCuFunctionNVX;
            
        #endif
        

        uintptr_t serialize_handle(VkCuFunctionNVX data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkCuFunctionNVX_to_server_VkCuFunctionNVX.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkCuFunctionNVX %p not found!\n",data);
                    }
                     debug_printf("Serializing VkCuFunctionNVX %p...\n",(VkCuFunctionNVX)client_VkCuFunctionNVX_to_server_VkCuFunctionNVX[(uintptr_t)data]);
                    result=client_VkCuFunctionNVX_to_server_VkCuFunctionNVX[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkCuFunctionNVX deserialize_handle(uintptr_t data){
                VkCuFunctionNVX result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkCuFunctionNVX)data);
                    if (server_VkCuFunctionNVX_to_client_VkCuFunctionNVX.contains(data)){
                        result=(VkCuFunctionNVX)server_VkCuFunctionNVX_to_client_VkCuFunctionNVX[data];
                        debug_printf("Deserializing to VkCuFunctionNVX %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkCuFunctionNVX));
                        debug_printf("Mapping to VkCuFunctionNVX %p...\n",handle);
                        server_VkCuFunctionNVX_to_client_VkCuFunctionNVX[data]=(uintptr_t)handle;
                        client_VkCuFunctionNVX_to_server_VkCuFunctionNVX[(uintptr_t)handle]=data;
                        
                        result=(VkCuFunctionNVX)handle; //This is highly dangerous -- I'm basically casting VkCuFunctionNVX* to VkCuFunctionNVX. I should do *((VkCuFunctionNVX*)alloc_icd_object())
                    }
                #else
                    result=(VkCuFunctionNVX)data;
                #endif
                
                return result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkOpticalFlowSessionNV_to_server_VkOpticalFlowSessionNV;
            std::map<uintptr_t,uintptr_t> server_VkOpticalFlowSessionNV_to_client_VkOpticalFlowSessionNV;
            
        #endif
        

        uintptr_t serialize_handle(VkOpticalFlowSessionNV data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkOpticalFlowSessionNV_to_server_VkOpticalFlowSessionNV.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkOpticalFlowSessionNV %p not found!\n",data);
                    }
                     debug_printf("Serializing VkOpticalFlowSessionNV %p...\n",(VkOpticalFlowSessionNV)client_VkOpticalFlowSessionNV_to_server_VkOpticalFlowSessionNV[(uintptr_t)data]);
                    result=client_VkOpticalFlowSessionNV_to_server_VkOpticalFlowSessionNV[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkOpticalFlowSessionNV deserialize_handle(uintptr_t data){
                VkOpticalFlowSessionNV result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkOpticalFlowSessionNV)data);
                    if (server_VkOpticalFlowSessionNV_to_client_VkOpticalFlowSessionNV.contains(data)){
                        result=(VkOpticalFlowSessionNV)server_VkOpticalFlowSessionNV_to_client_VkOpticalFlowSessionNV[data];
                        debug_printf("Deserializing to VkOpticalFlowSessionNV %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkOpticalFlowSessionNV));
                        debug_printf("Mapping to VkOpticalFlowSessionNV %p...\n",handle);
                        server_VkOpticalFlowSessionNV_to_client_VkOpticalFlowSessionNV[data]=(uintptr_t)handle;
                        client_VkOpticalFlowSessionNV_to_server_VkOpticalFlowSessionNV[(uintptr_t)handle]=data;
                        
                        result=(VkOpticalFlowSessionNV)handle; //This is highly dangerous -- I'm basically casting VkOpticalFlowSessionNV* to VkOpticalFlowSessionNV. I should do *((VkOpticalFlowSessionNV*)alloc_icd_object())
                    }
                #else
                    result=(VkOpticalFlowSessionNV)data;
                #endif
                
                return result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkMicromapEXT_to_server_VkMicromapEXT;
            std::map<uintptr_t,uintptr_t> server_VkMicromapEXT_to_client_VkMicromapEXT;
            
        #endif
        

        uintptr_t serialize_handle(VkMicromapEXT data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkMicromapEXT_to_server_VkMicromapEXT.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkMicromapEXT %p not found!\n",data);
                    }
                     debug_printf("Serializing VkMicromapEXT %p...\n",(VkMicromapEXT)client_VkMicromapEXT_to_server_VkMicromapEXT[(uintptr_t)data]);
                    result=client_VkMicromapEXT_to_server_VkMicromapEXT[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkMicromapEXT deserialize_handle(uintptr_t data){
                VkMicromapEXT result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkMicromapEXT)data);
                    if (server_VkMicromapEXT_to_client_VkMicromapEXT.contains(data)){
                        result=(VkMicromapEXT)server_VkMicromapEXT_to_client_VkMicromapEXT[data];
                        debug_printf("Deserializing to VkMicromapEXT %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkMicromapEXT));
                        debug_printf("Mapping to VkMicromapEXT %p...\n",handle);
                        server_VkMicromapEXT_to_client_VkMicromapEXT[data]=(uintptr_t)handle;
                        client_VkMicromapEXT_to_server_VkMicromapEXT[(uintptr_t)handle]=data;
                        
                        result=(VkMicromapEXT)handle; //This is highly dangerous -- I'm basically casting VkMicromapEXT* to VkMicromapEXT. I should do *((VkMicromapEXT*)alloc_icd_object())
                    }
                #else
                    result=(VkMicromapEXT)data;
                #endif
                
                return result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkShaderEXT_to_server_VkShaderEXT;
            std::map<uintptr_t,uintptr_t> server_VkShaderEXT_to_client_VkShaderEXT;
            
        #endif
        

        uintptr_t serialize_handle(VkShaderEXT data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkShaderEXT_to_server_VkShaderEXT.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkShaderEXT %p not found!\n",data);
                    }
                     debug_printf("Serializing VkShaderEXT %p...\n",(VkShaderEXT)client_VkShaderEXT_to_server_VkShaderEXT[(uintptr_t)data]);
                    result=client_VkShaderEXT_to_server_VkShaderEXT[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkShaderEXT deserialize_handle(uintptr_t data){
                VkShaderEXT result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkShaderEXT)data);
                    if (server_VkShaderEXT_to_client_VkShaderEXT.contains(data)){
                        result=(VkShaderEXT)server_VkShaderEXT_to_client_VkShaderEXT[data];
                        debug_printf("Deserializing to VkShaderEXT %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkShaderEXT));
                        debug_printf("Mapping to VkShaderEXT %p...\n",handle);
                        server_VkShaderEXT_to_client_VkShaderEXT[data]=(uintptr_t)handle;
                        client_VkShaderEXT_to_server_VkShaderEXT[(uintptr_t)handle]=data;
                        
                        result=(VkShaderEXT)handle; //This is highly dangerous -- I'm basically casting VkShaderEXT* to VkShaderEXT. I should do *((VkShaderEXT*)alloc_icd_object())
                    }
                #else
                    result=(VkShaderEXT)data;
                #endif
                
                return result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkDisplayKHR_to_server_VkDisplayKHR;
            std::map<uintptr_t,uintptr_t> server_VkDisplayKHR_to_client_VkDisplayKHR;
            
        #endif
        

        uintptr_t serialize_handle(VkDisplayKHR data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkDisplayKHR_to_server_VkDisplayKHR.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkDisplayKHR %p not found!\n",data);
                    }
                     debug_printf("Serializing VkDisplayKHR %p...\n",(VkDisplayKHR)client_VkDisplayKHR_to_server_VkDisplayKHR[(uintptr_t)data]);
                    result=client_VkDisplayKHR_to_server_VkDisplayKHR[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkDisplayKHR deserialize_handle(uintptr_t data){
                VkDisplayKHR result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkDisplayKHR)data);
                    if (server_VkDisplayKHR_to_client_VkDisplayKHR.contains(data)){
                        result=(VkDisplayKHR)server_VkDisplayKHR_to_client_VkDisplayKHR[data];
                        debug_printf("Deserializing to VkDisplayKHR %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkDisplayKHR));
                        debug_printf("Mapping to VkDisplayKHR %p...\n",handle);
                        server_VkDisplayKHR_to_client_VkDisplayKHR[data]=(uintptr_t)handle;
                        client_VkDisplayKHR_to_server_VkDisplayKHR[(uintptr_t)handle]=data;
                        
                        result=(VkDisplayKHR)handle; //This is highly dangerous -- I'm basically casting VkDisplayKHR* to VkDisplayKHR. I should do *((VkDisplayKHR*)alloc_icd_object())
                    }
                #else
                    result=(VkDisplayKHR)data;
                #endif
                
                return result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkDisplayModeKHR_to_server_VkDisplayModeKHR;
            std::map<uintptr_t,uintptr_t> server_VkDisplayModeKHR_to_client_VkDisplayModeKHR;
            
        #endif
        

        uintptr_t serialize_handle(VkDisplayModeKHR data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkDisplayModeKHR_to_server_VkDisplayModeKHR.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkDisplayModeKHR %p not found!\n",data);
                    }
                     debug_printf("Serializing VkDisplayModeKHR %p...\n",(VkDisplayModeKHR)client_VkDisplayModeKHR_to_server_VkDisplayModeKHR[(uintptr_t)data]);
                    result=client_VkDisplayModeKHR_to_server_VkDisplayModeKHR[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkDisplayModeKHR deserialize_handle(uintptr_t data){
                VkDisplayModeKHR result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkDisplayModeKHR)data);
                    if (server_VkDisplayModeKHR_to_client_VkDisplayModeKHR.contains(data)){
                        result=(VkDisplayModeKHR)server_VkDisplayModeKHR_to_client_VkDisplayModeKHR[data];
                        debug_printf("Deserializing to VkDisplayModeKHR %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkDisplayModeKHR));
                        debug_printf("Mapping to VkDisplayModeKHR %p...\n",handle);
                        server_VkDisplayModeKHR_to_client_VkDisplayModeKHR[data]=(uintptr_t)handle;
                        client_VkDisplayModeKHR_to_server_VkDisplayModeKHR[(uintptr_t)handle]=data;
                        
                        result=(VkDisplayModeKHR)handle; //This is highly dangerous -- I'm basically casting VkDisplayModeKHR* to VkDisplayModeKHR. I should do *((VkDisplayModeKHR*)alloc_icd_object())
                    }
                #else
                    result=(VkDisplayModeKHR)data;
                #endif
                
                return result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkSurfaceKHR_to_server_VkSurfaceKHR;
            std::map<uintptr_t,uintptr_t> server_VkSurfaceKHR_to_client_VkSurfaceKHR;
            
        #endif
        

        uintptr_t serialize_handle(VkSurfaceKHR data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkSurfaceKHR_to_server_VkSurfaceKHR.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkSurfaceKHR %p not found!\n",data);
                    }
                     debug_printf("Serializing VkSurfaceKHR %p...\n",(VkSurfaceKHR)client_VkSurfaceKHR_to_server_VkSurfaceKHR[(uintptr_t)data]);
                    result=client_VkSurfaceKHR_to_server_VkSurfaceKHR[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkSurfaceKHR deserialize_handle(uintptr_t data){
                VkSurfaceKHR result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkSurfaceKHR)data);
                    if (server_VkSurfaceKHR_to_client_VkSurfaceKHR.contains(data)){
                        result=(VkSurfaceKHR)server_VkSurfaceKHR_to_client_VkSurfaceKHR[data];
                        debug_printf("Deserializing to VkSurfaceKHR %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkSurfaceKHR));
                        debug_printf("Mapping to VkSurfaceKHR %p...\n",handle);
                        server_VkSurfaceKHR_to_client_VkSurfaceKHR[data]=(uintptr_t)handle;
                        client_VkSurfaceKHR_to_server_VkSurfaceKHR[(uintptr_t)handle]=data;
                        
                        result=(VkSurfaceKHR)handle; //This is highly dangerous -- I'm basically casting VkSurfaceKHR* to VkSurfaceKHR. I should do *((VkSurfaceKHR*)alloc_icd_object())
                    }
                #else
                    result=(VkSurfaceKHR)data;
                #endif
                
                return result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkSwapchainKHR_to_server_VkSwapchainKHR;
            std::map<uintptr_t,uintptr_t> server_VkSwapchainKHR_to_client_VkSwapchainKHR;
            
        #endif
        

        uintptr_t serialize_handle(VkSwapchainKHR data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkSwapchainKHR_to_server_VkSwapchainKHR.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkSwapchainKHR %p not found!\n",data);
                    }
                     debug_printf("Serializing VkSwapchainKHR %p...\n",(VkSwapchainKHR)client_VkSwapchainKHR_to_server_VkSwapchainKHR[(uintptr_t)data]);
                    result=client_VkSwapchainKHR_to_server_VkSwapchainKHR[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkSwapchainKHR deserialize_handle(uintptr_t data){
                VkSwapchainKHR result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkSwapchainKHR)data);
                    if (server_VkSwapchainKHR_to_client_VkSwapchainKHR.contains(data)){
                        result=(VkSwapchainKHR)server_VkSwapchainKHR_to_client_VkSwapchainKHR[data];
                        debug_printf("Deserializing to VkSwapchainKHR %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkSwapchainKHR));
                        debug_printf("Mapping to VkSwapchainKHR %p...\n",handle);
                        server_VkSwapchainKHR_to_client_VkSwapchainKHR[data]=(uintptr_t)handle;
                        client_VkSwapchainKHR_to_server_VkSwapchainKHR[(uintptr_t)handle]=data;
                        
                        result=(VkSwapchainKHR)handle; //This is highly dangerous -- I'm basically casting VkSwapchainKHR* to VkSwapchainKHR. I should do *((VkSwapchainKHR*)alloc_icd_object())
                    }
                #else
                    result=(VkSwapchainKHR)data;
                #endif
                
                return result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkDebugReportCallbackEXT_to_server_VkDebugReportCallbackEXT;
            std::map<uintptr_t,uintptr_t> server_VkDebugReportCallbackEXT_to_client_VkDebugReportCallbackEXT;
            
        #endif
        

        uintptr_t serialize_handle(VkDebugReportCallbackEXT data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkDebugReportCallbackEXT_to_server_VkDebugReportCallbackEXT.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkDebugReportCallbackEXT %p not found!\n",data);
                    }
                     debug_printf("Serializing VkDebugReportCallbackEXT %p...\n",(VkDebugReportCallbackEXT)client_VkDebugReportCallbackEXT_to_server_VkDebugReportCallbackEXT[(uintptr_t)data]);
                    result=client_VkDebugReportCallbackEXT_to_server_VkDebugReportCallbackEXT[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkDebugReportCallbackEXT deserialize_handle(uintptr_t data){
                VkDebugReportCallbackEXT result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkDebugReportCallbackEXT)data);
                    if (server_VkDebugReportCallbackEXT_to_client_VkDebugReportCallbackEXT.contains(data)){
                        result=(VkDebugReportCallbackEXT)server_VkDebugReportCallbackEXT_to_client_VkDebugReportCallbackEXT[data];
                        debug_printf("Deserializing to VkDebugReportCallbackEXT %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkDebugReportCallbackEXT));
                        debug_printf("Mapping to VkDebugReportCallbackEXT %p...\n",handle);
                        server_VkDebugReportCallbackEXT_to_client_VkDebugReportCallbackEXT[data]=(uintptr_t)handle;
                        client_VkDebugReportCallbackEXT_to_server_VkDebugReportCallbackEXT[(uintptr_t)handle]=data;
                        
                        result=(VkDebugReportCallbackEXT)handle; //This is highly dangerous -- I'm basically casting VkDebugReportCallbackEXT* to VkDebugReportCallbackEXT. I should do *((VkDebugReportCallbackEXT*)alloc_icd_object())
                    }
                #else
                    result=(VkDebugReportCallbackEXT)data;
                #endif
                
                return result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkDebugUtilsMessengerEXT_to_server_VkDebugUtilsMessengerEXT;
            std::map<uintptr_t,uintptr_t> server_VkDebugUtilsMessengerEXT_to_client_VkDebugUtilsMessengerEXT;
            
        #endif
        

        uintptr_t serialize_handle(VkDebugUtilsMessengerEXT data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkDebugUtilsMessengerEXT_to_server_VkDebugUtilsMessengerEXT.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkDebugUtilsMessengerEXT %p not found!\n",data);
                    }
                     debug_printf("Serializing VkDebugUtilsMessengerEXT %p...\n",(VkDebugUtilsMessengerEXT)client_VkDebugUtilsMessengerEXT_to_server_VkDebugUtilsMessengerEXT[(uintptr_t)data]);
                    result=client_VkDebugUtilsMessengerEXT_to_server_VkDebugUtilsMessengerEXT[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkDebugUtilsMessengerEXT deserialize_handle(uintptr_t data){
                VkDebugUtilsMessengerEXT result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkDebugUtilsMessengerEXT)data);
                    if (server_VkDebugUtilsMessengerEXT_to_client_VkDebugUtilsMessengerEXT.contains(data)){
                        result=(VkDebugUtilsMessengerEXT)server_VkDebugUtilsMessengerEXT_to_client_VkDebugUtilsMessengerEXT[data];
                        debug_printf("Deserializing to VkDebugUtilsMessengerEXT %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkDebugUtilsMessengerEXT));
                        debug_printf("Mapping to VkDebugUtilsMessengerEXT %p...\n",handle);
                        server_VkDebugUtilsMessengerEXT_to_client_VkDebugUtilsMessengerEXT[data]=(uintptr_t)handle;
                        client_VkDebugUtilsMessengerEXT_to_server_VkDebugUtilsMessengerEXT[(uintptr_t)handle]=data;
                        
                        result=(VkDebugUtilsMessengerEXT)handle; //This is highly dangerous -- I'm basically casting VkDebugUtilsMessengerEXT* to VkDebugUtilsMessengerEXT. I should do *((VkDebugUtilsMessengerEXT*)alloc_icd_object())
                    }
                #else
                    result=(VkDebugUtilsMessengerEXT)data;
                #endif
                
                return result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkVideoSessionKHR_to_server_VkVideoSessionKHR;
            std::map<uintptr_t,uintptr_t> server_VkVideoSessionKHR_to_client_VkVideoSessionKHR;
            
        #endif
        

        uintptr_t serialize_handle(VkVideoSessionKHR data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkVideoSessionKHR_to_server_VkVideoSessionKHR.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkVideoSessionKHR %p not found!\n",data);
                    }
                     debug_printf("Serializing VkVideoSessionKHR %p...\n",(VkVideoSessionKHR)client_VkVideoSessionKHR_to_server_VkVideoSessionKHR[(uintptr_t)data]);
                    result=client_VkVideoSessionKHR_to_server_VkVideoSessionKHR[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkVideoSessionKHR deserialize_handle(uintptr_t data){
                VkVideoSessionKHR result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkVideoSessionKHR)data);
                    if (server_VkVideoSessionKHR_to_client_VkVideoSessionKHR.contains(data)){
                        result=(VkVideoSessionKHR)server_VkVideoSessionKHR_to_client_VkVideoSessionKHR[data];
                        debug_printf("Deserializing to VkVideoSessionKHR %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkVideoSessionKHR));
                        debug_printf("Mapping to VkVideoSessionKHR %p...\n",handle);
                        server_VkVideoSessionKHR_to_client_VkVideoSessionKHR[data]=(uintptr_t)handle;
                        client_VkVideoSessionKHR_to_server_VkVideoSessionKHR[(uintptr_t)handle]=data;
                        
                        result=(VkVideoSessionKHR)handle; //This is highly dangerous -- I'm basically casting VkVideoSessionKHR* to VkVideoSessionKHR. I should do *((VkVideoSessionKHR*)alloc_icd_object())
                    }
                #else
                    result=(VkVideoSessionKHR)data;
                #endif
                
                return result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkVideoSessionParametersKHR_to_server_VkVideoSessionParametersKHR;
            std::map<uintptr_t,uintptr_t> server_VkVideoSessionParametersKHR_to_client_VkVideoSessionParametersKHR;
            
        #endif
        

        uintptr_t serialize_handle(VkVideoSessionParametersKHR data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkVideoSessionParametersKHR_to_server_VkVideoSessionParametersKHR.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkVideoSessionParametersKHR %p not found!\n",data);
                    }
                     debug_printf("Serializing VkVideoSessionParametersKHR %p...\n",(VkVideoSessionParametersKHR)client_VkVideoSessionParametersKHR_to_server_VkVideoSessionParametersKHR[(uintptr_t)data]);
                    result=client_VkVideoSessionParametersKHR_to_server_VkVideoSessionParametersKHR[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            return result;
        }
       

       VkVideoSessionParametersKHR deserialize_handle(uintptr_t data){
                VkVideoSessionParametersKHR result;
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkVideoSessionParametersKHR)data);
                    if (server_VkVideoSessionParametersKHR_to_client_VkVideoSessionParametersKHR.contains(data)){
                        result=(VkVideoSessionParametersKHR)server_VkVideoSessionParametersKHR_to_client_VkVideoSessionParametersKHR[data];
                        debug_printf("Deserializing to VkVideoSessionParametersKHR %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkVideoSessionParametersKHR));
                        debug_printf("Mapping to VkVideoSessionParametersKHR %p...\n",handle);
                        server_VkVideoSessionParametersKHR_to_client_VkVideoSessionParametersKHR[data]=(uintptr_t)handle;
                        client_VkVideoSessionParametersKHR_to_server_VkVideoSessionParametersKHR[(uintptr_t)handle]=data;
                        
                        result=(VkVideoSessionParametersKHR)handle; //This is highly dangerous -- I'm basically casting VkVideoSessionParametersKHR* to VkVideoSessionParametersKHR. I should do *((VkVideoSessionParametersKHR*)alloc_icd_object())
                    }
                #else
                    result=(VkVideoSessionParametersKHR)data;
                #endif
                
                return result;
       }
